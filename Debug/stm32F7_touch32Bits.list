
stm32F7_touch32Bits.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002e948  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f4c  0802eb18  0802eb18  0002fb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08032a64  08032a64  00033a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08032a80  08032a80  0029c058  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08032a80  08032a80  00033a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08032a88  08032a88  0029c058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08032a88  08032a88  00033a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000008  08032a9c  08032a9c  00033a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000000f8  20000000  08032aa4  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferA 00000100  20000100  08032b9c  00034100  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_ScratchbufferB 00000100  20000200  08032c9c  00034200  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00012d04  20000300  08032d9c  00034300  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20013004  08032d9c  00035004  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0029c058  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 002669d4  90000000  90000000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 FontFlashSection 00000660  902669d4  902669d4  0029b9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 TextFlashSection 00000024  90267034  90267034  0029c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 00000000  c0000000  c0000000  0029c088  2**0
                  CONTENTS
 19 .debug_info   000cf593  00000000  00000000  0029c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00015906  00000000  00000000  0036b61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004288  00000000  00000000  00380f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000030f5  00000000  00000000  003851b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0003575a  00000000  00000000  003882a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00048907  00000000  00000000  003bd9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    00126dc3  00000000  00000000  00406306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0052d0c9  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00012440  00000000  00000000  0052d18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 00000066  00000000  00000000  0053f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802eb00 	.word	0x0802eb00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	0802eb00 	.word	0x0802eb00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b988 	b.w	8000a60 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	468e      	mov	lr, r1
 8000770:	4604      	mov	r4, r0
 8000772:	4688      	mov	r8, r1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d14a      	bne.n	800080e <__udivmoddi4+0xa6>
 8000778:	428a      	cmp	r2, r1
 800077a:	4617      	mov	r7, r2
 800077c:	d962      	bls.n	8000844 <__udivmoddi4+0xdc>
 800077e:	fab2 f682 	clz	r6, r2
 8000782:	b14e      	cbz	r6, 8000798 <__udivmoddi4+0x30>
 8000784:	f1c6 0320 	rsb	r3, r6, #32
 8000788:	fa01 f806 	lsl.w	r8, r1, r6
 800078c:	fa20 f303 	lsr.w	r3, r0, r3
 8000790:	40b7      	lsls	r7, r6
 8000792:	ea43 0808 	orr.w	r8, r3, r8
 8000796:	40b4      	lsls	r4, r6
 8000798:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800079c:	fa1f fc87 	uxth.w	ip, r7
 80007a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007a4:	0c23      	lsrs	r3, r4, #16
 80007a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ae:	fb01 f20c 	mul.w	r2, r1, ip
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0x62>
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007bc:	f080 80ea 	bcs.w	8000994 <__udivmoddi4+0x22c>
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f240 80e7 	bls.w	8000994 <__udivmoddi4+0x22c>
 80007c6:	3902      	subs	r1, #2
 80007c8:	443b      	add	r3, r7
 80007ca:	1a9a      	subs	r2, r3, r2
 80007cc:	b2a3      	uxth	r3, r4
 80007ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80007d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007da:	fb00 fc0c 	mul.w	ip, r0, ip
 80007de:	459c      	cmp	ip, r3
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0x8e>
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007e8:	f080 80d6 	bcs.w	8000998 <__udivmoddi4+0x230>
 80007ec:	459c      	cmp	ip, r3
 80007ee:	f240 80d3 	bls.w	8000998 <__udivmoddi4+0x230>
 80007f2:	443b      	add	r3, r7
 80007f4:	3802      	subs	r0, #2
 80007f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007fa:	eba3 030c 	sub.w	r3, r3, ip
 80007fe:	2100      	movs	r1, #0
 8000800:	b11d      	cbz	r5, 800080a <__udivmoddi4+0xa2>
 8000802:	40f3      	lsrs	r3, r6
 8000804:	2200      	movs	r2, #0
 8000806:	e9c5 3200 	strd	r3, r2, [r5]
 800080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080e:	428b      	cmp	r3, r1
 8000810:	d905      	bls.n	800081e <__udivmoddi4+0xb6>
 8000812:	b10d      	cbz	r5, 8000818 <__udivmoddi4+0xb0>
 8000814:	e9c5 0100 	strd	r0, r1, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	4608      	mov	r0, r1
 800081c:	e7f5      	b.n	800080a <__udivmoddi4+0xa2>
 800081e:	fab3 f183 	clz	r1, r3
 8000822:	2900      	cmp	r1, #0
 8000824:	d146      	bne.n	80008b4 <__udivmoddi4+0x14c>
 8000826:	4573      	cmp	r3, lr
 8000828:	d302      	bcc.n	8000830 <__udivmoddi4+0xc8>
 800082a:	4282      	cmp	r2, r0
 800082c:	f200 8105 	bhi.w	8000a3a <__udivmoddi4+0x2d2>
 8000830:	1a84      	subs	r4, r0, r2
 8000832:	eb6e 0203 	sbc.w	r2, lr, r3
 8000836:	2001      	movs	r0, #1
 8000838:	4690      	mov	r8, r2
 800083a:	2d00      	cmp	r5, #0
 800083c:	d0e5      	beq.n	800080a <__udivmoddi4+0xa2>
 800083e:	e9c5 4800 	strd	r4, r8, [r5]
 8000842:	e7e2      	b.n	800080a <__udivmoddi4+0xa2>
 8000844:	2a00      	cmp	r2, #0
 8000846:	f000 8090 	beq.w	800096a <__udivmoddi4+0x202>
 800084a:	fab2 f682 	clz	r6, r2
 800084e:	2e00      	cmp	r6, #0
 8000850:	f040 80a4 	bne.w	800099c <__udivmoddi4+0x234>
 8000854:	1a8a      	subs	r2, r1, r2
 8000856:	0c03      	lsrs	r3, r0, #16
 8000858:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800085c:	b280      	uxth	r0, r0
 800085e:	b2bc      	uxth	r4, r7
 8000860:	2101      	movs	r1, #1
 8000862:	fbb2 fcfe 	udiv	ip, r2, lr
 8000866:	fb0e 221c 	mls	r2, lr, ip, r2
 800086a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800086e:	fb04 f20c 	mul.w	r2, r4, ip
 8000872:	429a      	cmp	r2, r3
 8000874:	d907      	bls.n	8000886 <__udivmoddi4+0x11e>
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	f10c 38ff 	add.w	r8, ip, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x11c>
 800087e:	429a      	cmp	r2, r3
 8000880:	f200 80e0 	bhi.w	8000a44 <__udivmoddi4+0x2dc>
 8000884:	46c4      	mov	ip, r8
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	fbb3 f2fe 	udiv	r2, r3, lr
 800088c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000890:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000894:	fb02 f404 	mul.w	r4, r2, r4
 8000898:	429c      	cmp	r4, r3
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0x144>
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	f102 30ff 	add.w	r0, r2, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0x142>
 80008a4:	429c      	cmp	r4, r3
 80008a6:	f200 80ca 	bhi.w	8000a3e <__udivmoddi4+0x2d6>
 80008aa:	4602      	mov	r2, r0
 80008ac:	1b1b      	subs	r3, r3, r4
 80008ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008b2:	e7a5      	b.n	8000800 <__udivmoddi4+0x98>
 80008b4:	f1c1 0620 	rsb	r6, r1, #32
 80008b8:	408b      	lsls	r3, r1
 80008ba:	fa22 f706 	lsr.w	r7, r2, r6
 80008be:	431f      	orrs	r7, r3
 80008c0:	fa0e f401 	lsl.w	r4, lr, r1
 80008c4:	fa20 f306 	lsr.w	r3, r0, r6
 80008c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80008cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008d0:	4323      	orrs	r3, r4
 80008d2:	fa00 f801 	lsl.w	r8, r0, r1
 80008d6:	fa1f fc87 	uxth.w	ip, r7
 80008da:	fbbe f0f9 	udiv	r0, lr, r9
 80008de:	0c1c      	lsrs	r4, r3, #16
 80008e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	fa02 f201 	lsl.w	r2, r2, r1
 80008f2:	d909      	bls.n	8000908 <__udivmoddi4+0x1a0>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008fa:	f080 809c 	bcs.w	8000a36 <__udivmoddi4+0x2ce>
 80008fe:	45a6      	cmp	lr, r4
 8000900:	f240 8099 	bls.w	8000a36 <__udivmoddi4+0x2ce>
 8000904:	3802      	subs	r0, #2
 8000906:	443c      	add	r4, r7
 8000908:	eba4 040e 	sub.w	r4, r4, lr
 800090c:	fa1f fe83 	uxth.w	lr, r3
 8000910:	fbb4 f3f9 	udiv	r3, r4, r9
 8000914:	fb09 4413 	mls	r4, r9, r3, r4
 8000918:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800091c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000920:	45a4      	cmp	ip, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x1ce>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f103 3eff 	add.w	lr, r3, #4294967295
 800092a:	f080 8082 	bcs.w	8000a32 <__udivmoddi4+0x2ca>
 800092e:	45a4      	cmp	ip, r4
 8000930:	d97f      	bls.n	8000a32 <__udivmoddi4+0x2ca>
 8000932:	3b02      	subs	r3, #2
 8000934:	443c      	add	r4, r7
 8000936:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800093a:	eba4 040c 	sub.w	r4, r4, ip
 800093e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000942:	4564      	cmp	r4, ip
 8000944:	4673      	mov	r3, lr
 8000946:	46e1      	mov	r9, ip
 8000948:	d362      	bcc.n	8000a10 <__udivmoddi4+0x2a8>
 800094a:	d05f      	beq.n	8000a0c <__udivmoddi4+0x2a4>
 800094c:	b15d      	cbz	r5, 8000966 <__udivmoddi4+0x1fe>
 800094e:	ebb8 0203 	subs.w	r2, r8, r3
 8000952:	eb64 0409 	sbc.w	r4, r4, r9
 8000956:	fa04 f606 	lsl.w	r6, r4, r6
 800095a:	fa22 f301 	lsr.w	r3, r2, r1
 800095e:	431e      	orrs	r6, r3
 8000960:	40cc      	lsrs	r4, r1
 8000962:	e9c5 6400 	strd	r6, r4, [r5]
 8000966:	2100      	movs	r1, #0
 8000968:	e74f      	b.n	800080a <__udivmoddi4+0xa2>
 800096a:	fbb1 fcf2 	udiv	ip, r1, r2
 800096e:	0c01      	lsrs	r1, r0, #16
 8000970:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000974:	b280      	uxth	r0, r0
 8000976:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800097a:	463b      	mov	r3, r7
 800097c:	4638      	mov	r0, r7
 800097e:	463c      	mov	r4, r7
 8000980:	46b8      	mov	r8, r7
 8000982:	46be      	mov	lr, r7
 8000984:	2620      	movs	r6, #32
 8000986:	fbb1 f1f7 	udiv	r1, r1, r7
 800098a:	eba2 0208 	sub.w	r2, r2, r8
 800098e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000992:	e766      	b.n	8000862 <__udivmoddi4+0xfa>
 8000994:	4601      	mov	r1, r0
 8000996:	e718      	b.n	80007ca <__udivmoddi4+0x62>
 8000998:	4610      	mov	r0, r2
 800099a:	e72c      	b.n	80007f6 <__udivmoddi4+0x8e>
 800099c:	f1c6 0220 	rsb	r2, r6, #32
 80009a0:	fa2e f302 	lsr.w	r3, lr, r2
 80009a4:	40b7      	lsls	r7, r6
 80009a6:	40b1      	lsls	r1, r6
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	430a      	orrs	r2, r1
 80009b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009b6:	b2bc      	uxth	r4, r7
 80009b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009bc:	0c11      	lsrs	r1, r2, #16
 80009be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c2:	fb08 f904 	mul.w	r9, r8, r4
 80009c6:	40b0      	lsls	r0, r6
 80009c8:	4589      	cmp	r9, r1
 80009ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009ce:	b280      	uxth	r0, r0
 80009d0:	d93e      	bls.n	8000a50 <__udivmoddi4+0x2e8>
 80009d2:	1879      	adds	r1, r7, r1
 80009d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009d8:	d201      	bcs.n	80009de <__udivmoddi4+0x276>
 80009da:	4589      	cmp	r9, r1
 80009dc:	d81f      	bhi.n	8000a1e <__udivmoddi4+0x2b6>
 80009de:	eba1 0109 	sub.w	r1, r1, r9
 80009e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009e6:	fb09 f804 	mul.w	r8, r9, r4
 80009ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ee:	b292      	uxth	r2, r2
 80009f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009f4:	4542      	cmp	r2, r8
 80009f6:	d229      	bcs.n	8000a4c <__udivmoddi4+0x2e4>
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80009fe:	d2c4      	bcs.n	800098a <__udivmoddi4+0x222>
 8000a00:	4542      	cmp	r2, r8
 8000a02:	d2c2      	bcs.n	800098a <__udivmoddi4+0x222>
 8000a04:	f1a9 0102 	sub.w	r1, r9, #2
 8000a08:	443a      	add	r2, r7
 8000a0a:	e7be      	b.n	800098a <__udivmoddi4+0x222>
 8000a0c:	45f0      	cmp	r8, lr
 8000a0e:	d29d      	bcs.n	800094c <__udivmoddi4+0x1e4>
 8000a10:	ebbe 0302 	subs.w	r3, lr, r2
 8000a14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a18:	3801      	subs	r0, #1
 8000a1a:	46e1      	mov	r9, ip
 8000a1c:	e796      	b.n	800094c <__udivmoddi4+0x1e4>
 8000a1e:	eba7 0909 	sub.w	r9, r7, r9
 8000a22:	4449      	add	r1, r9
 8000a24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2c:	fb09 f804 	mul.w	r8, r9, r4
 8000a30:	e7db      	b.n	80009ea <__udivmoddi4+0x282>
 8000a32:	4673      	mov	r3, lr
 8000a34:	e77f      	b.n	8000936 <__udivmoddi4+0x1ce>
 8000a36:	4650      	mov	r0, sl
 8000a38:	e766      	b.n	8000908 <__udivmoddi4+0x1a0>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e6fd      	b.n	800083a <__udivmoddi4+0xd2>
 8000a3e:	443b      	add	r3, r7
 8000a40:	3a02      	subs	r2, #2
 8000a42:	e733      	b.n	80008ac <__udivmoddi4+0x144>
 8000a44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a48:	443b      	add	r3, r7
 8000a4a:	e71c      	b.n	8000886 <__udivmoddi4+0x11e>
 8000a4c:	4649      	mov	r1, r9
 8000a4e:	e79c      	b.n	800098a <__udivmoddi4+0x222>
 8000a50:	eba1 0109 	sub.w	r1, r1, r9
 8000a54:	46c4      	mov	ip, r8
 8000a56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a5a:	fb09 f804 	mul.w	r8, r9, r4
 8000a5e:	e7c4      	b.n	80009ea <__udivmoddi4+0x282>

08000a60 <__aeabi_idiv0>:
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <delay_us>:
#include "CT_I2C.h"

static void delay_us(uint32_t value)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	i = value * 250;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	22fa      	movs	r2, #250	@ 0xfa
 8000a70:	fb02 f303 	mul.w	r3, r2, r3
 8000a74:	60fb      	str	r3, [r7, #12]
	while(i--);
 8000a76:	bf00      	nop
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	60fa      	str	r2, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1fa      	bne.n	8000a78 <delay_us+0x14>
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <CT_SDA_IN>:

static void CT_SDA_IN()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
  GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000a96:	2320      	movs	r3, #32
 8000a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <CT_SDA_IN+0x28>)
 8000aac:	f002 ff10 	bl	80038d0 <HAL_GPIO_Init>
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021c00 	.word	0x40021c00

08000abc <CT_SDA_OUT>:

static void CT_SDA_OUT()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <CT_SDA_OUT+0x28>)
 8000ad8:	f002 fefa 	bl	80038d0 <HAL_GPIO_Init>
}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021c00 	.word	0x40021c00

08000ae8 <CT_I2C_Init>:

void CT_I2C_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	SDA_CLK();
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a1a      	ldr	r2, [pc, #104]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
	SCL_CLK();
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = SCL_GPIO_PIN;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_GPIO_PORT, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <CT_I2C_Init+0x78>)
 8000b36:	f002 fecb 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <CT_I2C_Init+0x78>)
 8000b4e:	f002 febf 	bl	80038d0 <HAL_GPIO_Init>
}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021c00 	.word	0x40021c00

08000b64 <CT_I2C_Start>:

void CT_I2C_Start(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000b68:	f7ff ffa8 	bl	8000abc <CT_SDA_OUT>
	
	SET_SDA();
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2120      	movs	r1, #32
 8000b70:	480f      	ldr	r0, [pc, #60]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000b72:	f003 f871 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);	
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff ff74 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000b82:	f003 f869 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ff6c 	bl	8000a64 <delay_us>
	
 	CLR_SDA();
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000b92:	f003 f861 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff ff64 	bl	8000a64 <delay_us>
	
	CLR_CLK();
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000ba2:	f003 f859 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff ff5c 	bl	8000a64 <delay_us>
}	  
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021c00 	.word	0x40021c00

08000bb4 <CT_I2C_Stop>:

void CT_I2C_Stop(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000bb8:	f7ff ff80 	bl	8000abc <CT_SDA_OUT>
	
	CLR_SDA();
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <CT_I2C_Stop+0x3c>)
 8000bc2:	f003 f849 	bl	8003c58 <HAL_GPIO_WritePin>
 	delay_us(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff ff4c 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <CT_I2C_Stop+0x3c>)
 8000bd2:	f003 f841 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff44 	bl	8000a64 <delay_us>
	
	SET_SDA();
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <CT_I2C_Stop+0x3c>)
 8000be2:	f003 f839 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);							   	
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff ff3c 	bl	8000a64 <delay_us>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021c00 	.word	0x40021c00

08000bf4 <CT_I2C_Send_Byte>:

void CT_I2C_Send_Byte(uint8_t data)
{                        
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	uint8_t t; 
  
	CT_SDA_OUT();    
 8000bfe:	f7ff ff5d 	bl	8000abc <CT_SDA_OUT>
  CLR_CLK();
 8000c02:	2200      	movs	r2, #0
 8000c04:	2110      	movs	r1, #16
 8000c06:	4822      	ldr	r0, [pc, #136]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c08:	f003 f826 	bl	8003c58 <HAL_GPIO_WritePin>
		
	for(t=0;t<8;t++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e027      	b.n	8000c62 <CT_I2C_Send_Byte+0x6e>
	{              
		if(data&0x80)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da05      	bge.n	8000c26 <CT_I2C_Send_Byte+0x32>
		{
			SET_SDA();
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	481c      	ldr	r0, [pc, #112]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c20:	f003 f81a 	bl	8003c58 <HAL_GPIO_WritePin>
 8000c24:	e004      	b.n	8000c30 <CT_I2C_Send_Byte+0x3c>
		}
		else
		{
			CLR_SDA();
 8000c26:	2200      	movs	r2, #0
 8000c28:	2120      	movs	r1, #32
 8000c2a:	4819      	ldr	r0, [pc, #100]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c2c:	f003 f814 	bl	8003c58 <HAL_GPIO_WritePin>
		}

		data<<=1; 	  
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
		delay_us(1); 
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff ff14 	bl	8000a64 <delay_us>

		SET_CLK();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4813      	ldr	r0, [pc, #76]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c42:	f003 f809 	bl	8003c58 <HAL_GPIO_WritePin>
		delay_us(1); 
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff ff0c 	bl	8000a64 <delay_us>
		CLR_CLK();
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	480f      	ldr	r0, [pc, #60]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c52:	f003 f801 	bl	8003c58 <HAL_GPIO_WritePin>
		delay_us(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff ff04 	bl	8000a64 <delay_us>
	for(t=0;t<8;t++)
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d9d4      	bls.n	8000c12 <CT_I2C_Send_Byte+0x1e>
	}	 

	SET_SDA();
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c6e:	f002 fff3 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fef6 	bl	8000a64 <delay_us>
	CLR_CLK();
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c7e:	f002 ffeb 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff feee 	bl	8000a64 <delay_us>
} 
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021c00 	.word	0x40021c00

08000c94 <CT_I2C_Read_Byte>:

uint8_t CT_I2C_Read_Byte(unsigned char ack)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t i,receive=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73bb      	strb	r3, [r7, #14]

 	CT_SDA_IN();
 8000ca2:	f7ff fef5 	bl	8000a90 <CT_SDA_IN>

  for(i=0;i<8;i++ )
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e01f      	b.n	8000cec <CT_I2C_Read_Byte+0x58>
	{
    CLR_CLK(); 
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4819      	ldr	r0, [pc, #100]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cb2:	f002 ffd1 	bl	8003c58 <HAL_GPIO_WritePin>
		delay_us(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fed4 	bl	8000a64 <delay_us>
		SET_CLK();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cc2:	f002 ffc9 	bl	8003c58 <HAL_GPIO_WritePin>
    receive<<=1;
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	73bb      	strb	r3, [r7, #14]
    if(READ_SDA())receive++;   
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cd0:	f002 ffaa 	bl	8003c28 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <CT_I2C_Read_Byte+0x4c>
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff febf 	bl	8000a64 <delay_us>
  for(i=0;i<8;i++ )
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d9dc      	bls.n	8000cac <CT_I2C_Read_Byte+0x18>
	}	

	CLR_CLK(); 	
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cf8:	f002 ffae 	bl	8003c58 <HAL_GPIO_WritePin>
	if (!ack)CT_I2C_NAck();
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <CT_I2C_Read_Byte+0x74>
 8000d02:	f000 f867 	bl	8000dd4 <CT_I2C_NAck>
 8000d06:	e001      	b.n	8000d0c <CT_I2C_Read_Byte+0x78>
	else CT_I2C_Ack(); 
 8000d08:	f000 f83e 	bl	8000d88 <CT_I2C_Ack>
 
	return receive;
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021c00 	.word	0x40021c00

08000d1c <CT_I2C_Wait_Ack>:

uint8_t CT_I2C_Wait_Ack(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]

	CT_SDA_IN();  
 8000d26:	f7ff feb3 	bl	8000a90 <CT_SDA_IN>
	SET_SDA();
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4815      	ldr	r0, [pc, #84]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d30:	f002 ff92 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);	   
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fe95 	bl	8000a64 <delay_us>
	SET_CLK();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d40:	f002 ff8a 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);	
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff fe8d 	bl	8000a64 <delay_us>
	
	while(READ_SDA())
 8000d4a:	e009      	b.n	8000d60 <CT_I2C_Wait_Ack+0x44>
	{
		ucErrTime++;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2bfa      	cmp	r3, #250	@ 0xfa
 8000d56:	d903      	bls.n	8000d60 <CT_I2C_Wait_Ack+0x44>
		{
			CT_I2C_Stop();
 8000d58:	f7ff ff2c 	bl	8000bb4 <CT_I2C_Stop>
			return 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e00c      	b.n	8000d7a <CT_I2C_Wait_Ack+0x5e>
	while(READ_SDA())
 8000d60:	2120      	movs	r1, #32
 8000d62:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d64:	f002 ff60 	bl	8003c28 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1ee      	bne.n	8000d4c <CT_I2C_Wait_Ack+0x30>
		}
	}
	CLR_CLK();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d74:	f002 ff70 	bl	8003c58 <HAL_GPIO_WritePin>
	return 0;  
 8000d78:	2300      	movs	r3, #0
} 
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021c00 	.word	0x40021c00

08000d88 <CT_I2C_Ack>:

void CT_I2C_Ack(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000d8c:	f7ff fe96 	bl	8000abc <CT_SDA_OUT>
	CLR_CLK();
 8000d90:	2200      	movs	r2, #0
 8000d92:	2110      	movs	r1, #16
 8000d94:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000d96:	f002 ff5f 	bl	8003c58 <HAL_GPIO_WritePin>
	
	CLR_SDA();
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000da0:	f002 ff5a 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fe5d 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000daa:	2201      	movs	r2, #1
 8000dac:	2110      	movs	r1, #16
 8000dae:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000db0:	f002 ff52 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fe55 	bl	8000a64 <delay_us>
	
	CLR_CLK();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000dc0:	f002 ff4a 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fe4d 	bl	8000a64 <delay_us>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021c00 	.word	0x40021c00

08000dd4 <CT_I2C_NAck>:
   
void CT_I2C_NAck(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000dd8:	f7ff fe70 	bl	8000abc <CT_SDA_OUT>

	SET_SDA();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2120      	movs	r1, #32
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <CT_I2C_NAck+0x3c>)
 8000de2:	f002 ff39 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fe3c 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <CT_I2C_NAck+0x3c>)
 8000df2:	f002 ff31 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fe34 	bl	8000a64 <delay_us>
	
	CLR_CLK();
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <CT_I2C_NAck+0x3c>)
 8000e02:	f002 ff29 	bl	8003c58 <HAL_GPIO_WritePin>
	delay_us(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fe2c 	bl	8000a64 <delay_us>
}					 				     
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021c00 	.word	0x40021c00

08000e14 <GT911_Reset_Sequence>:
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00
};

static void GT911_Reset_Sequence()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GT911_RST_CLK();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
	GT911_INT_CLK();
 8000e32:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a27      	ldr	r2, [pc, #156]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GT911_RST_PIN;
 8000e4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GT911_RST_PORT, &GPIO_InitStruct);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <GT911_Reset_Sequence+0xc4>)
 8000e64:	f002 fd34 	bl	80038d0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GT911_INT_PIN;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GT911_INT_PORT, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	481a      	ldr	r0, [pc, #104]	@ (8000edc <GT911_Reset_Sequence+0xc8>)
 8000e74:	f002 fd2c 	bl	80038d0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7e:	4816      	ldr	r0, [pc, #88]	@ (8000ed8 <GT911_Reset_Sequence+0xc4>)
 8000e80:	f002 feea 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f002 f8cf 	bl	8003028 <HAL_Delay>
	HAL_GPIO_WritePin(GT911_INT_PORT,GT911_INT_PIN,GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4813      	ldr	r0, [pc, #76]	@ (8000edc <GT911_Reset_Sequence+0xc8>)
 8000e90:	f002 fee2 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	@ 0x64
 8000e96:	f002 f8c7 	bl	8003028 <HAL_Delay>
	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <GT911_Reset_Sequence+0xc4>)
 8000ea2:	f002 fed9 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000ea6:	20c8      	movs	r0, #200	@ 0xc8
 8000ea8:	f002 f8be 	bl	8003028 <HAL_Delay>

	GPIO_InitStruct.Pin = GT911_INT_PIN;
 8000eac:	2301      	movs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GT911_INT_PORT, &GPIO_InitStruct);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4806      	ldr	r0, [pc, #24]	@ (8000edc <GT911_Reset_Sequence+0xc8>)
 8000ec2:	f002 fd05 	bl	80038d0 <HAL_GPIO_Init>

	HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	@ 0x64
 8000ec8:	f002 f8ae 	bl	8003028 <HAL_Delay>
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40022400 	.word	0x40022400

08000ee0 <GT911_WR_Reg>:

static uint8_t GT911_WR_Reg(uint16_t reg,uint8_t *buf,uint8_t len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	80fb      	strh	r3, [r7, #6]
 8000eec:	4613      	mov	r3, r2
 8000eee:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t ret=0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73bb      	strb	r3, [r7, #14]
	CT_I2C_Start();
 8000ef4:	f7ff fe36 	bl	8000b64 <CT_I2C_Start>
 	CT_I2C_Send_Byte(CT_CMD_WR);
 8000ef8:	20ba      	movs	r0, #186	@ 0xba
 8000efa:	f7ff fe7b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000efe:	f7ff ff0d 	bl	8000d1c <CT_I2C_Wait_Ack>
	CT_I2C_Send_Byte(reg>>8);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe72 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f10:	f7ff ff04 	bl	8000d1c <CT_I2C_Wait_Ack>
	CT_I2C_Send_Byte(reg&0XFF);
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe6b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f1e:	f7ff fefd 	bl	8000d1c <CT_I2C_Wait_Ack>
	for(i=0;i<len;i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e010      	b.n	8000f4a <GT911_WR_Reg+0x6a>
	{
    CT_I2C_Send_Byte(buf[i]);
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe5f 	bl	8000bf4 <CT_I2C_Send_Byte>
		ret=CT_I2C_Wait_Ack();
 8000f36:	f7ff fef1 	bl	8000d1c <CT_I2C_Wait_Ack>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]
		if(ret)break;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <GT911_WR_Reg+0x74>
	for(i=0;i<len;i++)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3ea      	bcc.n	8000f28 <GT911_WR_Reg+0x48>
 8000f52:	e000      	b.n	8000f56 <GT911_WR_Reg+0x76>
		if(ret)break;
 8000f54:	bf00      	nop
	}
  CT_I2C_Stop();
 8000f56:	f7ff fe2d 	bl	8000bb4 <CT_I2C_Stop>
	return ret;
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <GT911_RD_Reg>:
//    	res = 5;
//    }
//    return res;
//}
static void GT911_RD_Reg(uint16_t reg,uint8_t *buf,uint8_t len)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	80fb      	strh	r3, [r7, #6]
 8000f70:	4613      	mov	r3, r2
 8000f72:	717b      	strb	r3, [r7, #5]
	uint8_t i;
 	CT_I2C_Start();
 8000f74:	f7ff fdf6 	bl	8000b64 <CT_I2C_Start>
 	CT_I2C_Send_Byte(CT_CMD_WR);
 8000f78:	20ba      	movs	r0, #186	@ 0xba
 8000f7a:	f7ff fe3b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f7e:	f7ff fecd 	bl	8000d1c <CT_I2C_Wait_Ack>
 	CT_I2C_Send_Byte(reg>>8);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe32 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f90:	f7ff fec4 	bl	8000d1c <CT_I2C_Wait_Ack>
 	CT_I2C_Send_Byte(reg&0XFF);
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe2b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f9e:	f7ff febd 	bl	8000d1c <CT_I2C_Wait_Ack>
 	CT_I2C_Stop();
 8000fa2:	f7ff fe07 	bl	8000bb4 <CT_I2C_Stop>

 	CT_I2C_Start();
 8000fa6:	f7ff fddd 	bl	8000b64 <CT_I2C_Start>
	CT_I2C_Send_Byte(CT_CMD_RD);
 8000faa:	20bb      	movs	r0, #187	@ 0xbb
 8000fac:	f7ff fe22 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000fb0:	f7ff feb4 	bl	8000d1c <CT_I2C_Wait_Ack>
	for(i=0;i<len;i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e013      	b.n	8000fe2 <GT911_RD_Reg+0x7e>
	{
		buf[i]=CT_I2C_Read_Byte(i==(len-1)?0:1);
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	797b      	ldrb	r3, [r7, #5]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	18d4      	adds	r4, r2, r3
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	f7ff fe5e 	bl	8000c94 <CT_I2C_Read_Byte>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	7023      	strb	r3, [r4, #0]
	for(i=0;i<len;i++)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3e7      	bcc.n	8000fba <GT911_RD_Reg+0x56>
	}
  CT_I2C_Stop();
 8000fea:	f7ff fde3 	bl	8000bb4 <CT_I2C_Stop>
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd90      	pop	{r4, r7, pc}
	...

08000ff8 <GT911_ReadStatue>:
//    	res =  2;
//    return res;
//}

static uint8_t GT911_ReadStatue(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
	uint8_t buf[4];
	GT911_RD_Reg(GT911_PRODUCT_ID_REG, (uint8_t *)&buf[0], 3);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2203      	movs	r2, #3
 8001002:	4619      	mov	r1, r3
 8001004:	f248 1040 	movw	r0, #33088	@ 0x8140
 8001008:	f7ff ffac 	bl	8000f64 <GT911_RD_Reg>
	GT911_RD_Reg(GT911_CONFIG_REG, (uint8_t *)&buf[3], 1);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	3303      	adds	r3, #3
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f248 0047 	movw	r0, #32839	@ 0x8047
 8001018:	f7ff ffa4 	bl	8000f64 <GT911_RD_Reg>
	printf("TouchPad_ID:%c,%c,%c\r\nTouchPad_Config_Version:%2x\r\n",buf[0],buf[1],buf[2],buf[3]);
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	4619      	mov	r1, r3
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	461a      	mov	r2, r3
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4603      	mov	r3, r0
 800102e:	4804      	ldr	r0, [pc, #16]	@ (8001040 <GT911_ReadStatue+0x48>)
 8001030:	f02c fe3e 	bl	802dcb0 <iprintf>
	return buf[3];
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0802eb18 	.word	0x0802eb18

08001044 <GT911_ReadFirmwareVersion>:

static uint16_t GT911_ReadFirmwareVersion(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	uint8_t buf[2];

	GT911_RD_Reg(GT911_FIRMWARE_VERSION_REG, buf, 2);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2202      	movs	r2, #2
 800104e:	4619      	mov	r1, r3
 8001050:	f248 1044 	movw	r0, #33092	@ 0x8144
 8001054:	f7ff ff86 	bl	8000f64 <GT911_RD_Reg>

	printf("FirmwareVersion:%2x\r\n",(((uint16_t)buf[1] << 8) + buf[0]));
 8001058:	797b      	ldrb	r3, [r7, #5]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	793a      	ldrb	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <GT911_ReadFirmwareVersion+0x38>)
 8001064:	f02c fe24 	bl	802dcb0 <iprintf>
	return ((uint16_t)buf[1] << 8) + buf[0];
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	793a      	ldrb	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	b29b      	uxth	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0802eb4c 	.word	0x0802eb4c

08001080 <GT911_Scan>:

void GT911_Scan(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0
	uint8_t buf[41];
  uint8_t Clearbuf = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
//	uint32_t PointColor[]={LCD_COLOR_BLUE,LCD_COLOR_GREEN,LCD_COLOR_RED,LCD_COLOR_MAGENTA,LCD_COLOR_YELLOW};
	
	if (Dev_Now.Touch == 1)
 800108a:	4b97      	ldr	r3, [pc, #604]	@ (80012e8 <GT911_Scan+0x268>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 819d 	bne.w	80013ce <GT911_Scan+0x34e>
	{	
		Dev_Now.Touch = 0;
 8001094:	4b94      	ldr	r3, [pc, #592]	@ (80012e8 <GT911_Scan+0x268>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
		GT911_RD_Reg(GT911_READ_XY_REG, buf, 1);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	f248 104e 	movw	r0, #33102	@ 0x814e
 80010a4:	f7ff ff5e 	bl	8000f64 <GT911_RD_Reg>

		if ((buf[0]&0x80) == 0x00)
 80010a8:	793b      	ldrb	r3, [r7, #4]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <GT911_Scan+0x46>
		{
			GT911_WR_Reg(GT911_READ_XY_REG, (uint8_t *)&Clearbuf, 1);
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	f248 104e 	movw	r0, #33102	@ 0x814e
 80010ba:	f7ff ff11 	bl	8000ee0 <GT911_WR_Reg>
			//printf("%x\r\n",buf[0]);
			osDelay(5);
 80010be:	2005      	movs	r0, #5
 80010c0:	f006 fb37 	bl	8007732 <osDelay>
 80010c4:	e183      	b.n	80013ce <GT911_Scan+0x34e>
		}
		else
		{
			//printf("bufstat:%x\r\n",buf[0]);
			Dev_Now.TouchpointFlag = buf[0];
 80010c6:	793a      	ldrb	r2, [r7, #4]
 80010c8:	4b87      	ldr	r3, [pc, #540]	@ (80012e8 <GT911_Scan+0x268>)
 80010ca:	705a      	strb	r2, [r3, #1]
			Dev_Now.TouchCount = buf[0]&0x0f;
 80010cc:	793b      	ldrb	r3, [r7, #4]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b84      	ldr	r3, [pc, #528]	@ (80012e8 <GT911_Scan+0x268>)
 80010d6:	709a      	strb	r2, [r3, #2]
			if (Dev_Now.TouchCount > 5)
 80010d8:	4b83      	ldr	r3, [pc, #524]	@ (80012e8 <GT911_Scan+0x268>)
 80010da:	789b      	ldrb	r3, [r3, #2]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d907      	bls.n	80010f0 <GT911_Scan+0x70>
			{
				GT911_WR_Reg(GT911_READ_XY_REG, (uint8_t *)&Clearbuf, 1);
 80010e0:	1cfb      	adds	r3, r7, #3
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f248 104e 	movw	r0, #33102	@ 0x814e
 80010ea:	f7ff fef9 	bl	8000ee0 <GT911_WR_Reg>
 80010ee:	e16e      	b.n	80013ce <GT911_Scan+0x34e>
				return ;
			}		
			GT911_RD_Reg(GT911_READ_XY_REG+1, &buf[1], Dev_Now.TouchCount*8);
 80010f0:	4b7d      	ldr	r3, [pc, #500]	@ (80012e8 <GT911_Scan+0x268>)
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	3301      	adds	r3, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	f248 104f 	movw	r0, #33103	@ 0x814f
 8001102:	f7ff ff2f 	bl	8000f64 <GT911_RD_Reg>
			GT911_WR_Reg(GT911_READ_XY_REG, (uint8_t *)&Clearbuf, 1);
 8001106:	1cfb      	adds	r3, r7, #3
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f248 104e 	movw	r0, #33102	@ 0x814e
 8001110:	f7ff fee6 	bl	8000ee0 <GT911_WR_Reg>
			
			Dev_Now.Touchkeytrackid[0] = buf[1];
 8001114:	797a      	ldrb	r2, [r7, #5]
 8001116:	4b74      	ldr	r3, [pc, #464]	@ (80012e8 <GT911_Scan+0x268>)
 8001118:	70da      	strb	r2, [r3, #3]
			Dev_Now.X[0] = ((uint16_t)buf[3] << 8) + buf[2];
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	4413      	add	r3, r2
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <GT911_Scan+0x268>)
 8001128:	811a      	strh	r2, [r3, #8]
			Dev_Now.Y[0] = ((uint16_t)buf[5] << 8) + buf[4];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	7a3a      	ldrb	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b6c      	ldr	r3, [pc, #432]	@ (80012e8 <GT911_Scan+0x268>)
 8001138:	825a      	strh	r2, [r3, #18]
			Dev_Now.S[0] = ((uint16_t)buf[7] << 8) + buf[6];
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	7aba      	ldrb	r2, [r7, #10]
 8001142:	4413      	add	r3, r2
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <GT911_Scan+0x268>)
 8001148:	839a      	strh	r2, [r3, #28]

			Dev_Now.Touchkeytrackid[1] = buf[9];
 800114a:	7b7a      	ldrb	r2, [r7, #13]
 800114c:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <GT911_Scan+0x268>)
 800114e:	711a      	strb	r2, [r3, #4]
			Dev_Now.X[1] = ((uint16_t)buf[11] << 8) + buf[10];
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	7bba      	ldrb	r2, [r7, #14]
 8001158:	4413      	add	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <GT911_Scan+0x268>)
 800115e:	815a      	strh	r2, [r3, #10]
			Dev_Now.Y[1] = ((uint16_t)buf[13] << 8) + buf[12];
 8001160:	7c7b      	ldrb	r3, [r7, #17]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b29b      	uxth	r3, r3
 8001166:	7c3a      	ldrb	r2, [r7, #16]
 8001168:	4413      	add	r3, r2
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <GT911_Scan+0x268>)
 800116e:	829a      	strh	r2, [r3, #20]
			Dev_Now.S[1] = ((uint16_t)buf[15] << 8) + buf[14];
 8001170:	7cfb      	ldrb	r3, [r7, #19]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	7cba      	ldrb	r2, [r7, #18]
 8001178:	4413      	add	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b5a      	ldr	r3, [pc, #360]	@ (80012e8 <GT911_Scan+0x268>)
 800117e:	83da      	strh	r2, [r3, #30]

			Dev_Now.Touchkeytrackid[2] = buf[17];
 8001180:	7d7a      	ldrb	r2, [r7, #21]
 8001182:	4b59      	ldr	r3, [pc, #356]	@ (80012e8 <GT911_Scan+0x268>)
 8001184:	715a      	strb	r2, [r3, #5]
			Dev_Now.X[2] = ((uint16_t)buf[19] << 8) + buf[18];
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b29b      	uxth	r3, r3
 800118c:	7dba      	ldrb	r2, [r7, #22]
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b55      	ldr	r3, [pc, #340]	@ (80012e8 <GT911_Scan+0x268>)
 8001194:	819a      	strh	r2, [r3, #12]
			Dev_Now.Y[2] = ((uint16_t)buf[21] << 8) + buf[20];
 8001196:	7e7b      	ldrb	r3, [r7, #25]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b29b      	uxth	r3, r3
 800119c:	7e3a      	ldrb	r2, [r7, #24]
 800119e:	4413      	add	r3, r2
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <GT911_Scan+0x268>)
 80011a4:	82da      	strh	r2, [r3, #22]
			Dev_Now.S[2] = ((uint16_t)buf[23] << 8) + buf[22];
 80011a6:	7efb      	ldrb	r3, [r7, #27]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	7eba      	ldrb	r2, [r7, #26]
 80011ae:	4413      	add	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <GT911_Scan+0x268>)
 80011b4:	841a      	strh	r2, [r3, #32]

			Dev_Now.Touchkeytrackid[3] = buf[25];
 80011b6:	7f7a      	ldrb	r2, [r7, #29]
 80011b8:	4b4b      	ldr	r3, [pc, #300]	@ (80012e8 <GT911_Scan+0x268>)
 80011ba:	719a      	strb	r2, [r3, #6]
			Dev_Now.X[3] = ((uint16_t)buf[27] << 8) + buf[26];
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	7fba      	ldrb	r2, [r7, #30]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b47      	ldr	r3, [pc, #284]	@ (80012e8 <GT911_Scan+0x268>)
 80011ca:	81da      	strh	r2, [r3, #14]
			Dev_Now.Y[3] = ((uint16_t)buf[29] << 8) + buf[28];
 80011cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <GT911_Scan+0x268>)
 80011de:	831a      	strh	r2, [r3, #24]
			Dev_Now.S[3] = ((uint16_t)buf[31] << 8) + buf[30];
 80011e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <GT911_Scan+0x268>)
 80011f2:	845a      	strh	r2, [r3, #34]	@ 0x22

			Dev_Now.Touchkeytrackid[4] = buf[33];
 80011f4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <GT911_Scan+0x268>)
 80011fa:	71da      	strb	r2, [r3, #7]
			Dev_Now.X[4] = ((uint16_t)buf[35] << 8) + buf[34];
 80011fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b29b      	uxth	r3, r3
 8001204:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001208:	4413      	add	r3, r2
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <GT911_Scan+0x268>)
 800120e:	821a      	strh	r2, [r3, #16]
			Dev_Now.Y[4] = ((uint16_t)buf[37] << 8) + buf[36];
 8001210:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800121c:	4413      	add	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <GT911_Scan+0x268>)
 8001222:	835a      	strh	r2, [r3, #26]
			Dev_Now.S[4] = ((uint16_t)buf[39] << 8) + buf[38];
 8001224:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001230:	4413      	add	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <GT911_Scan+0x268>)
 8001236:	849a      	strh	r2, [r3, #36]	@ 0x24

			for (i = 0; i< Dev_Backup.TouchCount;i++)
 8001238:	2300      	movs	r3, #0
 800123a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800123e:	e048      	b.n	80012d2 <GT911_Scan+0x252>
			{
				if(Dev_Now.Y[i]<20)Dev_Now.Y[i]=20;
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <GT911_Scan+0x268>)
 8001246:	3308      	adds	r3, #8
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	2b13      	cmp	r3, #19
 8001250:	d807      	bhi.n	8001262 <GT911_Scan+0x1e2>
 8001252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <GT911_Scan+0x268>)
 8001258:	3308      	adds	r3, #8
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	2214      	movs	r2, #20
 8001260:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.Y[i]>GT911_MAX_HEIGHT-20)Dev_Now.Y[i]=GT911_MAX_HEIGHT-20;
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001266:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <GT911_Scan+0x268>)
 8001268:	3308      	adds	r3, #8
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	885b      	ldrh	r3, [r3, #2]
 8001270:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001274:	d908      	bls.n	8001288 <GT911_Scan+0x208>
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <GT911_Scan+0x268>)
 800127c:	3308      	adds	r3, #8
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001286:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.X[i]<20)Dev_Now.X[i]=20;
 8001288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800128c:	4a16      	ldr	r2, [pc, #88]	@ (80012e8 <GT911_Scan+0x268>)
 800128e:	3304      	adds	r3, #4
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	2b13      	cmp	r3, #19
 8001296:	d806      	bhi.n	80012a6 <GT911_Scan+0x226>
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <GT911_Scan+0x268>)
 800129e:	3304      	adds	r3, #4
 80012a0:	2114      	movs	r1, #20
 80012a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Dev_Now.X[i]>GT911_MAX_WIDTH-20)Dev_Now.X[i]=GT911_MAX_WIDTH-20;
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012aa:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <GT911_Scan+0x268>)
 80012ac:	3304      	adds	r3, #4
 80012ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b2:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 80012b6:	d907      	bls.n	80012c8 <GT911_Scan+0x248>
 80012b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <GT911_Scan+0x268>)
 80012be:	3304      	adds	r3, #4
 80012c0:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 80012c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i< Dev_Backup.TouchCount;i++)
 80012c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012cc:	3301      	adds	r3, #1
 80012ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <GT911_Scan+0x26c>)
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3b0      	bcc.n	8001240 <GT911_Scan+0x1c0>
//				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
//				BSP_LCD_FillCircle(Dev_Backup.X[i],Dev_Backup.Y[i],20);
//				BSP_LCD_DrawVLine(Dev_Backup.X[i], 1, GT911_MAX_HEIGHT - 1);
//				BSP_LCD_DrawHLine(1, Dev_Backup.Y[i], GT911_MAX_WIDTH - 1);
			}
			for (i=0;i<Dev_Now.TouchCount;i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012e4:	e06d      	b.n	80013c2 <GT911_Scan+0x342>
 80012e6:	bf00      	nop
 80012e8:	2000031c 	.word	0x2000031c
 80012ec:	20000344 	.word	0x20000344
			{
				if(Dev_Now.Y[i]<20)Dev_Now.Y[i]=20;
 80012f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f4:	4a37      	ldr	r2, [pc, #220]	@ (80013d4 <GT911_Scan+0x354>)
 80012f6:	3308      	adds	r3, #8
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	2b13      	cmp	r3, #19
 8001300:	d807      	bhi.n	8001312 <GT911_Scan+0x292>
 8001302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001306:	4a33      	ldr	r2, [pc, #204]	@ (80013d4 <GT911_Scan+0x354>)
 8001308:	3308      	adds	r3, #8
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	2214      	movs	r2, #20
 8001310:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.Y[i]>GT911_MAX_HEIGHT-20)Dev_Now.Y[i]=GT911_MAX_HEIGHT-20;
 8001312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001316:	4a2f      	ldr	r2, [pc, #188]	@ (80013d4 <GT911_Scan+0x354>)
 8001318:	3308      	adds	r3, #8
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	885b      	ldrh	r3, [r3, #2]
 8001320:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001324:	d908      	bls.n	8001338 <GT911_Scan+0x2b8>
 8001326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800132a:	4a2a      	ldr	r2, [pc, #168]	@ (80013d4 <GT911_Scan+0x354>)
 800132c:	3308      	adds	r3, #8
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001336:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.X[i]<20)Dev_Now.X[i]=20;
 8001338:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800133c:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <GT911_Scan+0x354>)
 800133e:	3304      	adds	r3, #4
 8001340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001344:	2b13      	cmp	r3, #19
 8001346:	d806      	bhi.n	8001356 <GT911_Scan+0x2d6>
 8001348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800134c:	4a21      	ldr	r2, [pc, #132]	@ (80013d4 <GT911_Scan+0x354>)
 800134e:	3304      	adds	r3, #4
 8001350:	2114      	movs	r1, #20
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Dev_Now.X[i]>GT911_MAX_WIDTH-20)Dev_Now.X[i]=GT911_MAX_WIDTH-20;
 8001356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800135a:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <GT911_Scan+0x354>)
 800135c:	3304      	adds	r3, #4
 800135e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001362:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 8001366:	d907      	bls.n	8001378 <GT911_Scan+0x2f8>
 8001368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <GT911_Scan+0x354>)
 800136e:	3304      	adds	r3, #4
 8001370:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8001374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				
				Dev_Backup.X[i] = Dev_Now.X[i];
 8001378:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800137c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001380:	4914      	ldr	r1, [pc, #80]	@ (80013d4 <GT911_Scan+0x354>)
 8001382:	3204      	adds	r2, #4
 8001384:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001388:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <GT911_Scan+0x358>)
 800138a:	3304      	adds	r3, #4
 800138c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				Dev_Backup.Y[i] = Dev_Now.Y[i];
 8001390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001394:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001398:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <GT911_Scan+0x354>)
 800139a:	3308      	adds	r3, #8
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	440b      	add	r3, r1
 80013a0:	8858      	ldrh	r0, [r3, #2]
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <GT911_Scan+0x358>)
 80013a4:	f102 0308 	add.w	r3, r2, #8
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	440b      	add	r3, r1
 80013ac:	4602      	mov	r2, r0
 80013ae:	805a      	strh	r2, [r3, #2]
				Dev_Backup.TouchCount = Dev_Now.TouchCount;		
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <GT911_Scan+0x354>)
 80013b2:	789a      	ldrb	r2, [r3, #2]
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <GT911_Scan+0x358>)
 80013b6:	709a      	strb	r2, [r3, #2]
			for (i=0;i<Dev_Now.TouchCount;i++)
 80013b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013bc:	3301      	adds	r3, #1
 80013be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <GT911_Scan+0x354>)
 80013c4:	789b      	ldrb	r3, [r3, #2]
 80013c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d390      	bcc.n	80012f0 <GT911_Scan+0x270>
//				BSP_LCD_DrawVLine(Dev_Now.X[i], 1, GT911_MAX_HEIGHT - 1);
//				BSP_LCD_DrawHLine(1, Dev_Now.Y[i], GT911_MAX_WIDTH - 1);
			}
		}	
	}
}
 80013ce:	3730      	adds	r7, #48	@ 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000031c 	.word	0x2000031c
 80013d8:	20000344 	.word	0x20000344

080013dc <GT911_TEST>:

void GT911_TEST(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
	uint8_t config_Checksum = 0,i;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
	uint8_t ID=0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	757b      	strb	r3, [r7, #21]
	uint8_t buf[20];
	printf("GT911_TEST\r\n");
 80013ea:	4898      	ldr	r0, [pc, #608]	@ (800164c <GT911_TEST+0x270>)
 80013ec:	f02c fcc8 	bl	802dd80 <puts>
	GT911_Reset_Sequence();
 80013f0:	f7ff fd10 	bl	8000e14 <GT911_Reset_Sequence>
//	HAL_GPIO_WritePin(GT911_INT_PORT,GT911_INT_PIN,GPIO_PIN_RESET);
//	HAL_Delay(100);
//	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_SET);
//	HAL_Delay(200);

	CT_I2C_Init();
 80013f4:	f7ff fb78 	bl	8000ae8 <CT_I2C_Init>
//	while(HAL_I2C_IsDeviceReady(&hi2c2,ID++,1,100) != HAL_OK)
//	{
//		printf("GT911_Error\r\n");
//	}

	GT911_ReadStatue();
 80013f8:	f7ff fdfe 	bl	8000ff8 <GT911_ReadStatue>
//	GT911_WR_Reg(GT911_CONFIG_REG,buf,3);

	//debug
	GT911_RD_Reg(GT911_CONFIG_REG, (uint8_t *)&s_GT911_CfgParams[0], 186);
 80013fc:	22ba      	movs	r2, #186	@ 0xba
 80013fe:	4994      	ldr	r1, [pc, #592]	@ (8001650 <GT911_TEST+0x274>)
 8001400:	f248 0047 	movw	r0, #32839	@ 0x8047
 8001404:	f7ff fdae 	bl	8000f64 <GT911_RD_Reg>

	for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 8001408:	2300      	movs	r3, #0
 800140a:	75bb      	strb	r3, [r7, #22]
 800140c:	e021      	b.n	8001452 <GT911_TEST+0x76>
	{
		config_Checksum += s_GT911_CfgParams[i];
 800140e:	7dbb      	ldrb	r3, [r7, #22]
 8001410:	4a8f      	ldr	r2, [pc, #572]	@ (8001650 <GT911_TEST+0x274>)
 8001412:	5cd2      	ldrb	r2, [r2, r3]
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	4413      	add	r3, r2
 8001418:	75fb      	strb	r3, [r7, #23]

		printf("0x%02X  ", s_GT911_CfgParams[i]);
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	4a8c      	ldr	r2, [pc, #560]	@ (8001650 <GT911_TEST+0x274>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	4619      	mov	r1, r3
 8001422:	488c      	ldr	r0, [pc, #560]	@ (8001654 <GT911_TEST+0x278>)
 8001424:	f02c fc44 	bl	802dcb0 <iprintf>
		if ((i+1)%10==0)
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	4b8a      	ldr	r3, [pc, #552]	@ (8001658 <GT911_TEST+0x27c>)
 800142e:	fb83 2301 	smull	r2, r3, r3, r1
 8001432:	109a      	asrs	r2, r3, #2
 8001434:	17cb      	asrs	r3, r1, #31
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	1aca      	subs	r2, r1, r3
 8001442:	2a00      	cmp	r2, #0
 8001444:	d102      	bne.n	800144c <GT911_TEST+0x70>
			printf("\r\n");
 8001446:	4885      	ldr	r0, [pc, #532]	@ (800165c <GT911_TEST+0x280>)
 8001448:	f02c fc9a 	bl	802dd80 <puts>
	for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 800144c:	7dbb      	ldrb	r3, [r7, #22]
 800144e:	3301      	adds	r3, #1
 8001450:	75bb      	strb	r3, [r7, #22]
 8001452:	7dbb      	ldrb	r3, [r7, #22]
 8001454:	2bb7      	cmp	r3, #183	@ 0xb7
 8001456:	d9da      	bls.n	800140e <GT911_TEST+0x32>
	}
	printf("0x%02X  0x%02X\r\nconfig_Checksum=0x%2X\r\n", s_GT911_CfgParams[184],s_GT911_CfgParams[185], ((~config_Checksum)+1)&0xff);
 8001458:	4b7d      	ldr	r3, [pc, #500]	@ (8001650 <GT911_TEST+0x274>)
 800145a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800145e:	4619      	mov	r1, r3
 8001460:	4b7b      	ldr	r3, [pc, #492]	@ (8001650 <GT911_TEST+0x274>)
 8001462:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8001466:	461a      	mov	r2, r3
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	425b      	negs	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	487c      	ldr	r0, [pc, #496]	@ (8001660 <GT911_TEST+0x284>)
 8001470:	f02c fc1e 	bl	802dcb0 <iprintf>

	if (s_GT911_CfgParams[184] == (((~config_Checksum)+1)&0xff))
 8001474:	4b76      	ldr	r3, [pc, #472]	@ (8001650 <GT911_TEST+0x274>)
 8001476:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800147a:	461a      	mov	r2, r3
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	425b      	negs	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	429a      	cmp	r2, r3
 8001484:	f040 80dc 	bne.w	8001640 <GT911_TEST+0x264>
	{
		printf("READ CONFIG SUCCESS!\r\n");
 8001488:	4876      	ldr	r0, [pc, #472]	@ (8001664 <GT911_TEST+0x288>)
 800148a:	f02c fc79 	bl	802dd80 <puts>
		printf("%d*%d\r\n",s_GT911_CfgParams[2]<<8|s_GT911_CfgParams[1],s_GT911_CfgParams[4]<<8|s_GT911_CfgParams[3]);
 800148e:	4b70      	ldr	r3, [pc, #448]	@ (8001650 <GT911_TEST+0x274>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4a6e      	ldr	r2, [pc, #440]	@ (8001650 <GT911_TEST+0x274>)
 8001496:	7852      	ldrb	r2, [r2, #1]
 8001498:	ea43 0102 	orr.w	r1, r3, r2
 800149c:	4b6c      	ldr	r3, [pc, #432]	@ (8001650 <GT911_TEST+0x274>)
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	4a6b      	ldr	r2, [pc, #428]	@ (8001650 <GT911_TEST+0x274>)
 80014a4:	78d2      	ldrb	r2, [r2, #3]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	486f      	ldr	r0, [pc, #444]	@ (8001668 <GT911_TEST+0x28c>)
 80014ac:	f02c fc00 	bl	802dcb0 <iprintf>

		if ((GT911_MAX_WIDTH != (s_GT911_CfgParams[2]<<8|s_GT911_CfgParams[1])) || (GT911_MAX_HEIGHT != (s_GT911_CfgParams[4]<<8|s_GT911_CfgParams[3])))
 80014b0:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <GT911_TEST+0x274>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	4a66      	ldr	r2, [pc, #408]	@ (8001650 <GT911_TEST+0x274>)
 80014b8:	7852      	ldrb	r2, [r2, #1]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80014c0:	d109      	bne.n	80014d6 <GT911_TEST+0xfa>
 80014c2:	4b63      	ldr	r3, [pc, #396]	@ (8001650 <GT911_TEST+0x274>)
 80014c4:	791b      	ldrb	r3, [r3, #4]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	4a61      	ldr	r2, [pc, #388]	@ (8001650 <GT911_TEST+0x274>)
 80014ca:	78d2      	ldrb	r2, [r2, #3]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80014d2:	f000 80b5 	beq.w	8001640 <GT911_TEST+0x264>
		{
			s_GT911_CfgParams[1] = GT911_MAX_WIDTH&0xff;
 80014d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001650 <GT911_TEST+0x274>)
 80014d8:	2220      	movs	r2, #32
 80014da:	705a      	strb	r2, [r3, #1]
			s_GT911_CfgParams[2] = GT911_MAX_WIDTH>>8;
 80014dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001650 <GT911_TEST+0x274>)
 80014de:	2203      	movs	r2, #3
 80014e0:	709a      	strb	r2, [r3, #2]
			s_GT911_CfgParams[3] = GT911_MAX_HEIGHT&0xff;
 80014e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <GT911_TEST+0x274>)
 80014e4:	22e0      	movs	r2, #224	@ 0xe0
 80014e6:	70da      	strb	r2, [r3, #3]
			s_GT911_CfgParams[4] = GT911_MAX_HEIGHT>>8;
 80014e8:	4b59      	ldr	r3, [pc, #356]	@ (8001650 <GT911_TEST+0x274>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	711a      	strb	r2, [r3, #4]
			s_GT911_CfgParams[185] = 1;
 80014ee:	4b58      	ldr	r3, [pc, #352]	@ (8001650 <GT911_TEST+0x274>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

			printf("%d*%d\r\n",s_GT911_CfgParams[2]<<8|s_GT911_CfgParams[1],s_GT911_CfgParams[4]<<8|s_GT911_CfgParams[3]);
 80014f6:	4b56      	ldr	r3, [pc, #344]	@ (8001650 <GT911_TEST+0x274>)
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4a54      	ldr	r2, [pc, #336]	@ (8001650 <GT911_TEST+0x274>)
 80014fe:	7852      	ldrb	r2, [r2, #1]
 8001500:	ea43 0102 	orr.w	r1, r3, r2
 8001504:	4b52      	ldr	r3, [pc, #328]	@ (8001650 <GT911_TEST+0x274>)
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	4a51      	ldr	r2, [pc, #324]	@ (8001650 <GT911_TEST+0x274>)
 800150c:	78d2      	ldrb	r2, [r2, #3]
 800150e:	4313      	orrs	r3, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4855      	ldr	r0, [pc, #340]	@ (8001668 <GT911_TEST+0x28c>)
 8001514:	f02c fbcc 	bl	802dcb0 <iprintf>

			config_Checksum = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	75fb      	strb	r3, [r7, #23]
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 800151c:	2300      	movs	r3, #0
 800151e:	75bb      	strb	r3, [r7, #22]
 8001520:	e008      	b.n	8001534 <GT911_TEST+0x158>
			{
				config_Checksum += s_GT911_CfgParams[i];
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	4a4a      	ldr	r2, [pc, #296]	@ (8001650 <GT911_TEST+0x274>)
 8001526:	5cd2      	ldrb	r2, [r2, r3]
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	4413      	add	r3, r2
 800152c:	75fb      	strb	r3, [r7, #23]
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 800152e:	7dbb      	ldrb	r3, [r7, #22]
 8001530:	3301      	adds	r3, #1
 8001532:	75bb      	strb	r3, [r7, #22]
 8001534:	7dbb      	ldrb	r3, [r7, #22]
 8001536:	2bb7      	cmp	r3, #183	@ 0xb7
 8001538:	d9f3      	bls.n	8001522 <GT911_TEST+0x146>
			}
			s_GT911_CfgParams[184] = (~config_Checksum)+1;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	425b      	negs	r3, r3
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <GT911_TEST+0x274>)
 8001542:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			printf("config_Checksum=0x%2X\r\n",s_GT911_CfgParams[184]);
 8001546:	4b42      	ldr	r3, [pc, #264]	@ (8001650 <GT911_TEST+0x274>)
 8001548:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800154c:	4619      	mov	r1, r3
 800154e:	4847      	ldr	r0, [pc, #284]	@ (800166c <GT911_TEST+0x290>)
 8001550:	f02c fbae 	bl	802dcb0 <iprintf>

			printf("\r\n*************************\r\n");
 8001554:	4846      	ldr	r0, [pc, #280]	@ (8001670 <GT911_TEST+0x294>)
 8001556:	f02c fc13 	bl	802dd80 <puts>
			for(i=0;i<sizeof(s_GT911_CfgParams);i++)
 800155a:	2300      	movs	r3, #0
 800155c:	75bb      	strb	r3, [r7, #22]
 800155e:	e01b      	b.n	8001598 <GT911_TEST+0x1bc>
			{
				printf("0x%02X  ", s_GT911_CfgParams[i]);
 8001560:	7dbb      	ldrb	r3, [r7, #22]
 8001562:	4a3b      	ldr	r2, [pc, #236]	@ (8001650 <GT911_TEST+0x274>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	4619      	mov	r1, r3
 8001568:	483a      	ldr	r0, [pc, #232]	@ (8001654 <GT911_TEST+0x278>)
 800156a:	f02c fba1 	bl	802dcb0 <iprintf>
				if ((i+1)%10==0)
 800156e:	7dbb      	ldrb	r3, [r7, #22]
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <GT911_TEST+0x27c>)
 8001574:	fb83 2301 	smull	r2, r3, r3, r1
 8001578:	109a      	asrs	r2, r3, #2
 800157a:	17cb      	asrs	r3, r1, #31
 800157c:	1ad2      	subs	r2, r2, r3
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	1aca      	subs	r2, r1, r3
 8001588:	2a00      	cmp	r2, #0
 800158a:	d102      	bne.n	8001592 <GT911_TEST+0x1b6>
					printf("\r\n");
 800158c:	4833      	ldr	r0, [pc, #204]	@ (800165c <GT911_TEST+0x280>)
 800158e:	f02c fbf7 	bl	802dd80 <puts>
			for(i=0;i<sizeof(s_GT911_CfgParams);i++)
 8001592:	7dbb      	ldrb	r3, [r7, #22]
 8001594:	3301      	adds	r3, #1
 8001596:	75bb      	strb	r3, [r7, #22]
 8001598:	7dbb      	ldrb	r3, [r7, #22]
 800159a:	2bb9      	cmp	r3, #185	@ 0xb9
 800159c:	d9e0      	bls.n	8001560 <GT911_TEST+0x184>
			}
			printf("\r\n*************************\r\n");
 800159e:	4834      	ldr	r0, [pc, #208]	@ (8001670 <GT911_TEST+0x294>)
 80015a0:	f02c fbee 	bl	802dd80 <puts>
			GT911_WR_Reg(GT911_CONFIG_REG, (uint8_t *)s_GT911_CfgParams, sizeof(s_GT911_CfgParams));
 80015a4:	22ba      	movs	r2, #186	@ 0xba
 80015a6:	492a      	ldr	r1, [pc, #168]	@ (8001650 <GT911_TEST+0x274>)
 80015a8:	f248 0047 	movw	r0, #32839	@ 0x8047
 80015ac:	f7ff fc98 	bl	8000ee0 <GT911_WR_Reg>


			GT911_RD_Reg(GT911_CONFIG_REG, (uint8_t *)&s_GT911_CfgParams[0], 186);
 80015b0:	22ba      	movs	r2, #186	@ 0xba
 80015b2:	4927      	ldr	r1, [pc, #156]	@ (8001650 <GT911_TEST+0x274>)
 80015b4:	f248 0047 	movw	r0, #32839	@ 0x8047
 80015b8:	f7ff fcd4 	bl	8000f64 <GT911_RD_Reg>

			config_Checksum = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	75bb      	strb	r3, [r7, #22]
 80015c4:	e021      	b.n	800160a <GT911_TEST+0x22e>
			{
				config_Checksum += s_GT911_CfgParams[i];
 80015c6:	7dbb      	ldrb	r3, [r7, #22]
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <GT911_TEST+0x274>)
 80015ca:	5cd2      	ldrb	r2, [r2, r3]
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	4413      	add	r3, r2
 80015d0:	75fb      	strb	r3, [r7, #23]

				printf("0x%02X  ", s_GT911_CfgParams[i]);
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <GT911_TEST+0x274>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	4619      	mov	r1, r3
 80015da:	481e      	ldr	r0, [pc, #120]	@ (8001654 <GT911_TEST+0x278>)
 80015dc:	f02c fb68 	bl	802dcb0 <iprintf>
				if ((i+1)%10==0)
 80015e0:	7dbb      	ldrb	r3, [r7, #22]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <GT911_TEST+0x27c>)
 80015e6:	fb83 2301 	smull	r2, r3, r3, r1
 80015ea:	109a      	asrs	r2, r3, #2
 80015ec:	17cb      	asrs	r3, r1, #31
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	1aca      	subs	r2, r1, r3
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d102      	bne.n	8001604 <GT911_TEST+0x228>
					printf("\r\n");
 80015fe:	4817      	ldr	r0, [pc, #92]	@ (800165c <GT911_TEST+0x280>)
 8001600:	f02c fbbe 	bl	802dd80 <puts>
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 8001604:	7dbb      	ldrb	r3, [r7, #22]
 8001606:	3301      	adds	r3, #1
 8001608:	75bb      	strb	r3, [r7, #22]
 800160a:	7dbb      	ldrb	r3, [r7, #22]
 800160c:	2bb7      	cmp	r3, #183	@ 0xb7
 800160e:	d9da      	bls.n	80015c6 <GT911_TEST+0x1ea>
			}
			printf("0x%02X  ", s_GT911_CfgParams[184]);
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <GT911_TEST+0x274>)
 8001612:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001616:	4619      	mov	r1, r3
 8001618:	480e      	ldr	r0, [pc, #56]	@ (8001654 <GT911_TEST+0x278>)
 800161a:	f02c fb49 	bl	802dcb0 <iprintf>
			printf("0x%02X  ", s_GT911_CfgParams[185]);
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <GT911_TEST+0x274>)
 8001620:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	@ (8001654 <GT911_TEST+0x278>)
 8001628:	f02c fb42 	bl	802dcb0 <iprintf>
			printf("\r\n");
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <GT911_TEST+0x280>)
 800162e:	f02c fba7 	bl	802dd80 <puts>
			printf("config_Checksum=0x%2X\r\n",((~config_Checksum)+1)&0xff);
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	425b      	negs	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	480c      	ldr	r0, [pc, #48]	@ (800166c <GT911_TEST+0x290>)
 800163c:	f02c fb38 	bl	802dcb0 <iprintf>
		}

	}
//debug end

	GT911_ReadFirmwareVersion();
 8001640:	f7ff fd00 	bl	8001044 <GT911_ReadFirmwareVersion>

	while(1)
	{
		GT911_Scan();
 8001644:	f7ff fd1c 	bl	8001080 <GT911_Scan>
 8001648:	e7fc      	b.n	8001644 <GT911_TEST+0x268>
 800164a:	bf00      	nop
 800164c:	0802eb64 	.word	0x0802eb64
 8001650:	2000036c 	.word	0x2000036c
 8001654:	0802eb70 	.word	0x0802eb70
 8001658:	66666667 	.word	0x66666667
 800165c:	0802eb7c 	.word	0x0802eb7c
 8001660:	0802eb80 	.word	0x0802eb80
 8001664:	0802eba8 	.word	0x0802eba8
 8001668:	0802ebc0 	.word	0x0802ebc0
 800166c:	0802ebc8 	.word	0x0802ebc8
 8001670:	0802ebe0 	.word	0x0802ebe0

08001674 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <vApplicationGetIdleTaskMemory+0x30>)
 800168a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000428 	.word	0x20000428
 80016a4:	200004c8 	.word	0x200004c8

080016a8 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2210      	movs	r2, #16
 80016c0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2201      	movs	r2, #1
 80016c6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80016ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f004 fce1 	bl	800609c <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f001 fca4 	bl	8003028 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2202      	movs	r2, #2
 80016e4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2210      	movs	r2, #16
 80016ea:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80016f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f004 fccc 	bl	800609c <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2203      	movs	r2, #3
 8001708:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2210      	movs	r2, #16
 800170e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2208      	movs	r2, #8
 8001714:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800171c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f004 fcba 	bl	800609c <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001728:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800172c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2204      	movs	r2, #4
 8001732:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2210      	movs	r2, #16
 8001738:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f004 fca5 	bl	800609c <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6959      	ldr	r1, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f640 2318 	movw	r3, #2584	@ 0xa18
 8001760:	430b      	orrs	r3, r1
 8001762:	6153      	str	r3, [r2, #20]

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b096      	sub	sp, #88	@ 0x58
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f001 fc2c 	bl	8002fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f871 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f000 fb05 	bl	8001d88 <MX_GPIO_Init>
  MX_FMC_Init();
 800177e:	f000 faad 	bl	8001cdc <MX_FMC_Init>
  MX_LTDC_Init();
 8001782:	f000 f92d 	bl	80019e0 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001786:	f000 f8f9 	bl	800197c <MX_DMA2D_Init>
  MX_TIM3_Init();
 800178a:	f000 fa31 	bl	8001bf0 <MX_TIM3_Init>
  MX_CRC_Init();
 800178e:	f000 f8d3 	bl	8001938 <MX_CRC_Init>
  MX_QUADSPI_Init();
 8001792:	f000 f9a7 	bl	8001ae4 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 8001796:	f000 f9df 	bl	8001b58 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 800179a:	f008 fb9e 	bl	8009eda <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800179e:	f008 fb95 	bl	8009ecc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2140      	movs	r1, #64	@ 0x40
 80017a6:	4824      	ldr	r0, [pc, #144]	@ (8001838 <main+0xcc>)
 80017a8:	f002 fa56 	bl	8003c58 <HAL_GPIO_WritePin>

  htim3.Instance->CCR2 = 1;
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <main+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // Start PWM on channel 2
 80017b4:	2104      	movs	r1, #4
 80017b6:	4821      	ldr	r0, [pc, #132]	@ (800183c <main+0xd0>)
 80017b8:	f004 fdd6 	bl	8006368 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80017bc:	4820      	ldr	r0, [pc, #128]	@ (8001840 <main+0xd4>)
 80017be:	f004 fcf9 	bl	80061b4 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80017c2:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <main+0xd8>)
 80017c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80017c8:	461d      	mov	r5, r3
 80017ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 ff5c 	bl	800769a <osThreadCreate>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <main+0xdc>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 8192);
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <main+0xe0>)
 80017ea:	f107 0420 	add.w	r4, r7, #32
 80017ee:	461d      	mov	r5, r3
 80017f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f005 ff49 	bl	800769a <osThreadCreate>
 8001808:	4603      	mov	r3, r0
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <main+0xe4>)
 800180c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <main+0xe8>)
 8001810:	1d3c      	adds	r4, r7, #4
 8001812:	461d      	mov	r5, r3
 8001814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800181c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f005 ff38 	bl	800769a <osThreadCreate>
 800182a:	4603      	mov	r3, r0
 800182c:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <main+0xec>)
 800182e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001830:	f005 ff2c 	bl	800768c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <main+0xc8>
 8001838:	40021000 	.word	0x40021000
 800183c:	2000086c 	.word	0x2000086c
 8001840:	20000820 	.word	0x20000820
 8001844:	0802ec0c 	.word	0x0802ec0c
 8001848:	200008ec 	.word	0x200008ec
 800184c:	0802ec34 	.word	0x0802ec34
 8001850:	200008f0 	.word	0x200008f0
 8001854:	0802ec5c 	.word	0x0802ec5c
 8001858:	200008f4 	.word	0x200008f4

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b094      	sub	sp, #80	@ 0x50
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2230      	movs	r2, #48	@ 0x30
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f02c fb68 	bl	802df40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <SystemClock_Config+0xd4>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	4a2a      	ldr	r2, [pc, #168]	@ (8001930 <SystemClock_Config+0xd4>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	@ 0x40
 800188c:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <SystemClock_Config+0xd4>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <SystemClock_Config+0xd8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <SystemClock_Config+0xd8>)
 800189e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <SystemClock_Config+0xd8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2302      	movs	r3, #2
 80018bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018c4:	2319      	movs	r3, #25
 80018c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80018c8:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80018cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018d2:	2302      	movs	r3, #2
 80018d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fb12 	bl	8004f04 <HAL_RCC_OscConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018e6:	f000 fb79 	bl	8001fdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018ea:	f002 fd8b 	bl	8004404 <HAL_PWREx_EnableOverDrive>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018f4:	f000 fb72 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001904:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2107      	movs	r1, #7
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fd98 	bl	800544c <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001922:	f000 fb5b 	bl	8001fdc <Error_Handler>
  }
}
 8001926:	bf00      	nop
 8001928:	3750      	adds	r7, #80	@ 0x50
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <MX_CRC_Init+0x3c>)
 800193e:	4a0e      	ldr	r2, [pc, #56]	@ (8001978 <MX_CRC_Init+0x40>)
 8001940:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_CRC_Init+0x3c>)
 8001944:	2200      	movs	r2, #0
 8001946:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <MX_CRC_Init+0x3c>)
 800194a:	2200      	movs	r2, #0
 800194c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_CRC_Init+0x3c>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <MX_CRC_Init+0x3c>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_CRC_Init+0x3c>)
 800195c:	2201      	movs	r2, #1
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_CRC_Init+0x3c>)
 8001962:	f001 fc67 	bl	8003234 <HAL_CRC_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800196c:	f000 fb36 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200006c8 	.word	0x200006c8
 8001978:	40023000 	.word	0x40023000

0800197c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <MX_DMA2D_Init+0x60>)
 8001984:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80019b0:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 80019b2:	f001 fda1 	bl	80034f8 <HAL_DMA2D_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80019bc:	f000 fb0e 	bl	8001fdc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80019c0:	2101      	movs	r1, #1
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_DMA2D_Init+0x5c>)
 80019c4:	f001 fef2 	bl	80037ac <HAL_DMA2D_ConfigLayer>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80019ce:	f000 fb05 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200006ec 	.word	0x200006ec
 80019dc:	4002b000 	.word	0x4002b000

080019e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	@ 0x38
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2234      	movs	r2, #52	@ 0x34
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f02c faa7 	bl	802df40 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <MX_LTDC_Init+0xfc>)
 80019f4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae0 <MX_LTDC_Init+0x100>)
 80019f6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019f8:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <MX_LTDC_Init+0xfc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a04:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001a16:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 46;
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a1e:	222e      	movs	r2, #46	@ 0x2e
 8001a20:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 23;
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a24:	2217      	movs	r2, #23
 8001a26:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 846;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a2a:	f240 324e 	movw	r2, #846	@ 0x34e
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 503;
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a32:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8001a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 1056;
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a3a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 525;
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a42:	f240 220d 	movw	r2, #525	@ 0x20d
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a50:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a60:	481e      	ldr	r0, [pc, #120]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001a62:	f002 f937 	bl	8003cd4 <HAL_LTDC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001a6c:	f000 fab6 	bl	8001fdc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001a74:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001a78:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001a7e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001a82:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a88:	23ff      	movs	r3, #255	@ 0xff
 8001a8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a94:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a96:	2305      	movs	r3, #5
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001a9a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 8001aa0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001aa6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_LTDC_Init+0xfc>)
 8001ac6:	f002 fa8d 	bl	8003fe4 <HAL_LTDC_ConfigLayer>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001ad0:	f000 fa84 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3738      	adds	r7, #56	@ 0x38
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000072c 	.word	0x2000072c
 8001ae0:	40016800 	.word	0x40016800

08001ae4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001aea:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <MX_QUADSPI_Init+0x70>)
 8001aec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001afc:	2210      	movs	r2, #16
 8001afe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001b02:	221f      	movs	r2, #31
 8001b04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <MX_QUADSPI_Init+0x6c>)
 8001b22:	f002 fcbf 	bl	80044a4 <HAL_QSPI_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 fa56 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  if (CSP_QUADSPI_Init() != HAL_OK)Error_Handler();
 8001b30:	f000 fa5a 	bl	8001fe8 <CSP_QUADSPI_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_QUADSPI_Init+0x5a>
 8001b3a:	f000 fa4f 	bl	8001fdc <Error_Handler>
  if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)Error_Handler();
 8001b3e:	f000 fbff 	bl	8002340 <CSP_QSPI_EnableMemoryMappedMode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_QUADSPI_Init+0x68>
 8001b48:	f000 fa48 	bl	8001fdc <Error_Handler>
  /* USER CODE END QUADSPI_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200007d4 	.word	0x200007d4
 8001b54:	a0001000 	.word	0xa0001000

08001b58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 54;
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b80:	2236      	movs	r2, #54	@ 0x36
 8001b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b8c:	2264      	movs	r2, #100	@ 0x64
 8001b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9c:	4813      	ldr	r0, [pc, #76]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001b9e:	f004 fab2 	bl	8006106 <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ba8:	f000 fa18 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001bba:	f004 feeb 	bl	8006994 <HAL_TIM_ConfigClockSource>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bc4:	f000 fa0a 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_TIM2_Init+0x94>)
 8001bd6:	f005 fb99 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001be0:	f000 f9fc 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000820 	.word	0x20000820

08001bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	@ 0x38
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c10:	463b      	mov	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c22:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c24:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd8 <MX_TIM3_Init+0xe8>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c2a:	226c      	movs	r2, #108	@ 0x6c
 8001c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c36:	2264      	movs	r2, #100	@ 0x64
 8001c38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c46:	4823      	ldr	r0, [pc, #140]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c48:	f004 fa5d 	bl	8006106 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c52:	f000 f9c3 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c60:	4619      	mov	r1, r3
 8001c62:	481c      	ldr	r0, [pc, #112]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c64:	f004 fe96 	bl	8006994 <HAL_TIM_ConfigClockSource>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c6e:	f000 f9b5 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c72:	4818      	ldr	r0, [pc, #96]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c74:	f004 fb16 	bl	80062a4 <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c7e:	f000 f9ad 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4810      	ldr	r0, [pc, #64]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001c92:	f005 fb3b 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c9c:	f000 f99e 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	@ 0x60
 8001ca2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001ca4:	2332      	movs	r3, #50	@ 0x32
 8001ca6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001cb8:	f004 fd58 	bl	800676c <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cc2:	f000 f98b 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc6:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <MX_TIM3_Init+0xe4>)
 8001cc8:	f000 fe8c 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8001ccc:	bf00      	nop
 8001cce:	3738      	adds	r7, #56	@ 0x38
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000086c 	.word	0x2000086c
 8001cd8:	40000400 	.word	0x40000400

08001cdc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001cf6:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <MX_FMC_Init+0xa8>)
 8001cf8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d08:	2208      	movs	r2, #8
 8001d0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d0e:	2220      	movs	r2, #32
 8001d10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8001d40:	2308      	movs	r3, #8
 8001d42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 8001d44:	2305      	movs	r3, #5
 8001d46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4808      	ldr	r0, [pc, #32]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d5e:	f004 f969 	bl	8006034 <HAL_SDRAM_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d68:	f000 f938 	bl	8001fdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &SdramTiming);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <MX_FMC_Init+0xa4>)
 8001d72:	f7ff fc99 	bl	80016a8 <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200008b8 	.word	0x200008b8
 8001d84:	a0000140 	.word	0xa0000140

08001d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b090      	sub	sp, #64	@ 0x40
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a69      	ldr	r2, [pc, #420]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b64      	ldr	r3, [pc, #400]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a63      	ldr	r2, [pc, #396]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b61      	ldr	r3, [pc, #388]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b5e      	ldr	r3, [pc, #376]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de6:	4b58      	ldr	r3, [pc, #352]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a57      	ldr	r2, [pc, #348]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b55      	ldr	r3, [pc, #340]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dfe:	4b52      	ldr	r3, [pc, #328]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a51      	ldr	r2, [pc, #324]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e16:	4b4c      	ldr	r3, [pc, #304]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a45      	ldr	r2, [pc, #276]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e46:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b3d      	ldr	r3, [pc, #244]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a39      	ldr	r2, [pc, #228]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e64:	f043 0320 	orr.w	r3, r3, #32
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a2d      	ldr	r2, [pc, #180]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <MX_GPIO_Init+0x1c0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2140      	movs	r1, #64	@ 0x40
 8001eaa:	4828      	ldr	r0, [pc, #160]	@ (8001f4c <MX_GPIO_Init+0x1c4>)
 8001eac:	f001 fed4 	bl	8003c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|ClrWDT_Pin, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001eb6:	4826      	ldr	r0, [pc, #152]	@ (8001f50 <MX_GPIO_Init+0x1c8>)
 8001eb8:	f001 fece 	bl	8003c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001ebc:	2340      	movs	r3, #64	@ 0x40
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481e      	ldr	r0, [pc, #120]	@ (8001f4c <MX_GPIO_Init+0x1c4>)
 8001ed4:	f001 fcfc 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ed8:	2330      	movs	r3, #48	@ 0x30
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001edc:	2312      	movs	r3, #18
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4818      	ldr	r0, [pc, #96]	@ (8001f54 <MX_GPIO_Init+0x1cc>)
 8001ef4:	f001 fcec 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001efc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4812      	ldr	r0, [pc, #72]	@ (8001f58 <MX_GPIO_Init+0x1d0>)
 8001f0e:	f001 fcdf 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin ClrWDT_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|ClrWDT_Pin;
 8001f12:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4809      	ldr	r0, [pc, #36]	@ (8001f50 <MX_GPIO_Init+0x1c8>)
 8001f2c:	f001 fcd0 	bl	80038d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	2006      	movs	r0, #6
 8001f36:	f001 f953 	bl	80031e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f3a:	2006      	movs	r0, #6
 8001f3c:	f001 f96c 	bl	8003218 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f40:	bf00      	nop
 8001f42:	3740      	adds	r7, #64	@ 0x40
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40021c00 	.word	0x40021c00
 8001f58:	40022400 	.word	0x40022400

08001f5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f005 fbe4 	bl	8007732 <osDelay>
 8001f6a:	e7fb      	b.n	8001f64 <StartDefaultTask+0x8>

08001f6c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	MX_TouchGFX_Process();
 8001f74:	f007 ffb9 	bl	8009eea <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f005 fbda 	bl	8007732 <osDelay>
 8001f7e:	e7fb      	b.n	8001f78 <StartTask02+0xc>

08001f80 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f8e:	4809      	ldr	r0, [pc, #36]	@ (8001fb4 <StartTask03+0x34>)
 8001f90:	f001 fe62 	bl	8003c58 <HAL_GPIO_WritePin>
	  osDelay(200);
 8001f94:	20c8      	movs	r0, #200	@ 0xc8
 8001f96:	f005 fbcc 	bl	8007732 <osDelay>
	  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fa0:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <StartTask03+0x34>)
 8001fa2:	f001 fe59 	bl	8003c58 <HAL_GPIO_WritePin>
	  GT911_TEST();
 8001fa6:	f7ff fa19 	bl	80013dc <GT911_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f005 fbc1 	bl	8007732 <osDelay>
 8001fb0:	e7fb      	b.n	8001faa <StartTask03+0x2a>
 8001fb2:	bf00      	nop
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fca:	f001 f80d 	bl	8002fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40001000 	.word	0x40001000

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <Error_Handler+0x8>

08001fe8 <CSP_QUADSPI_Init>:
//}

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
//		return HAL_ERROR;
//	}
//
//	MX_QUADSPI_Init();

	if (QSPI_ResetChip() != HAL_OK) {
 8001fec:	f000 f9e6 	bl	80023bc <QSPI_ResetChip>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <CSP_QUADSPI_Init+0x12>
		return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e01b      	b.n	8002032 <CSP_QUADSPI_Init+0x4a>
	}

	HAL_Delay(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f001 f814 	bl	8003028 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8002000:	f000 f81a 	bl	8002038 <QSPI_AutoPollingMemReady>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <CSP_QUADSPI_Init+0x26>
		return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e011      	b.n	8002032 <CSP_QUADSPI_Init+0x4a>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 800200e:	f000 f85f 	bl	80020d0 <QSPI_WriteEnable>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <CSP_QUADSPI_Init+0x34>

		return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e00a      	b.n	8002032 <CSP_QUADSPI_Init+0x4a>
	}

	if (QSPI_Configuration() != HAL_OK) {
 800201c:	f000 f8ba 	bl	8002194 <QSPI_Configuration>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <CSP_QUADSPI_Init+0x42>
		return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e003      	b.n	8002032 <CSP_QUADSPI_Init+0x4a>
	}

	HAL_Delay(100);
 800202a:	2064      	movs	r0, #100	@ 0x64
 800202c:	f000 fffc 	bl	8003028 <HAL_Delay>

	return HAL_OK;
 8002030:	2300      	movs	r3, #0

}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <QSPI_AutoPollingMemReady>:

	return HAL_OK;

}

uint8_t QSPI_AutoPollingMemReady(void) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b096      	sub	sp, #88	@ 0x58
 800203c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	2238      	movs	r2, #56	@ 0x38
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f02b ff7a 	bl	802df40 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002060:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8002062:	2305      	movs	r3, #5
 8002064:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800206a:	2300      	movs	r3, #0
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800206e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800207c:	2300      	movs	r3, #0
 800207e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002080:	2300      	movs	r3, #0
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50

	sConfig.Match = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8002088:	2301      	movs	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8002094:	2310      	movs	r3, #16
 8002096:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002098:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800209c:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800209e:	1d3a      	adds	r2, r7, #4
 80020a0:	f107 011c 	add.w	r1, r7, #28
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	4808      	ldr	r0, [pc, #32]	@ (80020cc <QSPI_AutoPollingMemReady+0x94>)
 80020aa:	f002 fc0e 	bl	80048ca <HAL_QSPI_AutoPolling>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80020b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 80020bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80020c0:	e000      	b.n	80020c4 <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3758      	adds	r7, #88	@ 0x58
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200007d4 	.word	0x200007d4

080020d0 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b096      	sub	sp, #88	@ 0x58
 80020d4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2238      	movs	r2, #56	@ 0x38
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f02b ff2e 	bl	802df40 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]
 80020f2:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80020f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80020fa:	2306      	movs	r3, #6
 80020fc:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80020fe:	2300      	movs	r3, #0
 8002100:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002102:	2300      	movs	r3, #0
 8002104:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 8002106:	2300      	movs	r3, #0
 8002108:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002112:	2300      	movs	r3, #0
 8002114:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002116:	2300      	movs	r3, #0
 8002118:	653b      	str	r3, [r7, #80]	@ 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4619      	mov	r1, r3
 8002124:	481a      	ldr	r0, [pc, #104]	@ (8002190 <QSPI_WriteEnable+0xc0>)
 8002126:	f002 fa39 	bl	800459c <HAL_QSPI_Command>
 800212a:	4603      	mov	r3, r0
 800212c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800213c:	e024      	b.n	8002188 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 800213e:	2302      	movs	r3, #2
 8002140:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8002142:	2302      	movs	r3, #2
 8002144:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 800214e:	2310      	movs	r3, #16
 8002150:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002152:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002156:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8002158:	2305      	movs	r3, #5
 800215a:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800215c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002160:	643b      	str	r3, [r7, #64]	@ 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8002162:	1d3a      	adds	r2, r7, #4
 8002164:	f107 011c 	add.w	r1, r7, #28
 8002168:	f241 3388 	movw	r3, #5000	@ 0x1388
 800216c:	4808      	ldr	r0, [pc, #32]	@ (8002190 <QSPI_WriteEnable+0xc0>)
 800216e:	f002 fbac 	bl	80048ca <HAL_QSPI_AutoPolling>
 8002172:	4603      	mov	r3, r0
 8002174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002180:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002184:	e000      	b.n	8002188 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3758      	adds	r7, #88	@ 0x58
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200007d4 	.word	0x200007d4

08002194 <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b090      	sub	sp, #64	@ 0x40
 8002198:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2238      	movs	r2, #56	@ 0x38
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f02b fecd 	bl	802df40 <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80021a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021aa:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 80021ac:	2335      	movs	r3, #53	@ 0x35
 80021ae:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80021b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4619      	mov	r1, r3
 80021da:	4858      	ldr	r0, [pc, #352]	@ (800233c <QSPI_Configuration+0x1a8>)
 80021dc:	f002 f9de 	bl	800459c <HAL_QSPI_Command>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 80021ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021f2:	e09f      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 80021f4:	1cfb      	adds	r3, r7, #3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4619      	mov	r1, r3
 80021fc:	484f      	ldr	r0, [pc, #316]	@ (800233c <QSPI_Configuration+0x1a8>)
 80021fe:	f002 fac2 	bl	8004786 <HAL_QSPI_Receive>
 8002202:	4603      	mov	r3, r0
 8002204:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002208:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 8002210:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002214:	e08e      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 800221a:	2350      	movs	r3, #80	@ 0x50
 800221c:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002224:	4619      	mov	r1, r3
 8002226:	4845      	ldr	r0, [pc, #276]	@ (800233c <QSPI_Configuration+0x1a8>)
 8002228:	f002 f9b8 	bl	800459c <HAL_QSPI_Command>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 8002232:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002236:	e07d      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8002238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 800223e:	2331      	movs	r3, #49	@ 0x31
 8002240:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4619      	mov	r1, r3
 8002254:	4839      	ldr	r0, [pc, #228]	@ (800233c <QSPI_Configuration+0x1a8>)
 8002256:	f002 f9a1 	bl	800459c <HAL_QSPI_Command>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8002260:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002264:	e066      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002266:	1cfb      	adds	r3, r7, #3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4619      	mov	r1, r3
 800226e:	4833      	ldr	r0, [pc, #204]	@ (800233c <QSPI_Configuration+0x1a8>)
 8002270:	f002 f9f2 	bl	8004658 <HAL_QSPI_Transmit>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 800227a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800227e:	e059      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002284:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8002286:	2315      	movs	r3, #21
 8002288:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8002292:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4619      	mov	r1, r3
 80022b4:	4821      	ldr	r0, [pc, #132]	@ (800233c <QSPI_Configuration+0x1a8>)
 80022b6:	f002 f971 	bl	800459c <HAL_QSPI_Command>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80022c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 80022c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022cc:	e032      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 80022ce:	1cfb      	adds	r3, r7, #3
 80022d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d4:	4619      	mov	r1, r3
 80022d6:	4819      	ldr	r0, [pc, #100]	@ (800233c <QSPI_Configuration+0x1a8>)
 80022d8:	f002 fa55 	bl	8004786 <HAL_QSPI_Receive>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80022e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 80022ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022ee:	e021      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 80022f0:	2311      	movs	r3, #17
 80022f2:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	@ (800233c <QSPI_Configuration+0x1a8>)
 8002308:	f002 f948 	bl	800459c <HAL_QSPI_Command>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 8002312:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002316:	e00d      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002318:	1cfb      	adds	r3, r7, #3
 800231a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231e:	4619      	mov	r1, r3
 8002320:	4806      	ldr	r0, [pc, #24]	@ (800233c <QSPI_Configuration+0x1a8>)
 8002322:	f002 f999 	bl	8004658 <HAL_QSPI_Transmit>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 800232c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002330:	e000      	b.n	8002334 <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3740      	adds	r7, #64	@ 0x40
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200007d4 	.word	0x200007d4

08002340 <CSP_QSPI_EnableMemoryMappedMode>:
//		return HAL_ERROR;
//	}
//	return HAL_OK;
//}

uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b090      	sub	sp, #64	@ 0x40
 8002344:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800234a:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 800234c:	23eb      	movs	r3, #235	@ 0xeb
 800234e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002354:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8002356:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8002360:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.AlternateBytes = 0xFF;
 8002366:	23ff      	movs	r3, #255	@ 0xff
 8002368:	613b      	str	r3, [r7, #16]
	sCommand.AlternateBytesSize = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002372:	2300      	movs	r3, #0
 8002374:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002376:	2300      	movs	r3, #0
 8002378:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_4_LINES;
 800237a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DummyCycles = 4;
 8002384:	2304      	movs	r3, #4
 8002386:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
	sMemMappedCfg.TimeOutPeriod = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 8002390:	463a      	mov	r2, r7
 8002392:	f107 0308 	add.w	r3, r7, #8
 8002396:	4619      	mov	r1, r3
 8002398:	4807      	ldr	r0, [pc, #28]	@ (80023b8 <CSP_QSPI_EnableMemoryMappedMode+0x78>)
 800239a:	f002 fb0d 	bl	80049b8 <HAL_QSPI_MemoryMapped>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <CSP_QSPI_EnableMemoryMappedMode+0x68>
		return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e003      	b.n	80023b0 <CSP_QSPI_EnableMemoryMappedMode+0x70>
	}
	HAL_Delay(100);
 80023a8:	2064      	movs	r0, #100	@ 0x64
 80023aa:	f000 fe3d 	bl	8003028 <HAL_Delay>
	return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3740      	adds	r7, #64	@ 0x40
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200007d4 	.word	0x200007d4

080023bc <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b090      	sub	sp, #64	@ 0x40
 80023c0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80023c2:	463b      	mov	r3, r7
 80023c4:	2238      	movs	r2, #56	@ 0x38
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f02b fdb9 	bl	802df40 <memset>
	uint32_t temp = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80023d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023d6:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 80023d8:	2366      	movs	r3, #102	@ 0x66
 80023da:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80023f4:	2300      	movs	r3, #0
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80023f8:	463b      	mov	r3, r7
 80023fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fe:	4619      	mov	r1, r3
 8002400:	4820      	ldr	r0, [pc, #128]	@ (8002484 <QSPI_ResetChip+0xc8>)
 8002402:	f002 f8cb 	bl	800459c <HAL_QSPI_Command>
 8002406:	4603      	mov	r3, r0
 8002408:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800240c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002414:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002418:	e02f      	b.n	800247a <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800241a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800241e:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8002420:	2399      	movs	r3, #153	@ 0x99
 8002422:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800243c:	2300      	movs	r3, #0
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8002440:	463b      	mov	r3, r7
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4619      	mov	r1, r3
 8002448:	480e      	ldr	r0, [pc, #56]	@ (8002484 <QSPI_ResetChip+0xc8>)
 800244a:	f002 f8a7 	bl	800459c <HAL_QSPI_Command>
 800244e:	4603      	mov	r3, r0
 8002450:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002454:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 800245c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002460:	e00b      	b.n	800247a <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8002462:	2300      	movs	r3, #0
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002466:	e003      	b.n	8002470 <QSPI_ResetChip+0xb4>
		__NOP();
 8002468:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 800246a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246c:	3301      	adds	r3, #1
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <QSPI_ResetChip+0xcc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d9f7      	bls.n	8002468 <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3740      	adds	r7, #64	@ 0x40
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200007d4 	.word	0x200007d4
 8002488:	0007a11f 	.word	0x0007a11f

0800248c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a10      	ldr	r2, [pc, #64]	@ (80024d8 <HAL_MspInit+0x4c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b6:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	210f      	movs	r1, #15
 80024c6:	f06f 0001 	mvn.w	r0, #1
 80024ca:	f000 fe89 	bl	80031e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <HAL_CRC_MspInit+0x38>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10b      	bne.n	8002506 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_CRC_MspInit+0x3c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <HAL_CRC_MspInit+0x3c>)
 80024f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_CRC_MspInit+0x3c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023000 	.word	0x40023000
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <HAL_DMA2D_MspInit+0x44>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d113      	bne.n	8002556 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_DMA2D_MspInit+0x48>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <HAL_DMA2D_MspInit+0x48>)
 8002534:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_DMA2D_MspInit+0x48>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2105      	movs	r1, #5
 800254a:	205a      	movs	r0, #90	@ 0x5a
 800254c:	f000 fe48 	bl	80031e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002550:	205a      	movs	r0, #90	@ 0x5a
 8002552:	f000 fe61 	bl	8003218 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	4002b000 	.word	0x4002b000
 8002564:	40023800 	.word	0x40023800

08002568 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0b0      	sub	sp, #192	@ 0xc0
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002580:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002584:	2284      	movs	r2, #132	@ 0x84
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f02b fcd9 	bl	802df40 <memset>
  if(hltdc->Instance==LTDC)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a9e      	ldr	r2, [pc, #632]	@ (800280c <HAL_LTDC_MspInit+0x2a4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	f040 8135 	bne.w	8002804 <HAL_LTDC_MspInit+0x29c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800259a:	2308      	movs	r3, #8
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800259e:	23c0      	movs	r3, #192	@ 0xc0
 80025a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 80025a2:	2303      	movs	r3, #3
 80025a4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80025aa:	2300      	movs	r3, #0
 80025ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80025b2:	2300      	movs	r3, #0
 80025b4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 f94a 	bl	8005854 <HAL_RCCEx_PeriphCLKConfig>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 80025c6:	f7ff fd09 	bl	8001fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025ca:	4b91      	ldr	r3, [pc, #580]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	4a90      	ldr	r2, [pc, #576]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a8a      	ldr	r2, [pc, #552]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025e8:	f043 0310 	orr.w	r3, r3, #16
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025fa:	4b85      	ldr	r3, [pc, #532]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a84      	ldr	r2, [pc, #528]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002600:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b82      	ldr	r3, [pc, #520]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002612:	4b7f      	ldr	r3, [pc, #508]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a7e      	ldr	r2, [pc, #504]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b7c      	ldr	r3, [pc, #496]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800262a:	4b79      	ldr	r3, [pc, #484]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a78      	ldr	r2, [pc, #480]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b76      	ldr	r3, [pc, #472]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002642:	4b73      	ldr	r3, [pc, #460]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	4a72      	ldr	r2, [pc, #456]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264c:	6313      	str	r3, [r2, #48]	@ 0x30
 800264e:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a6c      	ldr	r2, [pc, #432]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002672:	4b67      	ldr	r3, [pc, #412]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b64      	ldr	r3, [pc, #400]	@ (8002810 <HAL_LTDC_MspInit+0x2a8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    PJ4     ------> LTDC_R5
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800268a:	2310      	movs	r3, #16
 800268c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026a2:	230e      	movs	r3, #14
 80026a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026ac:	4619      	mov	r1, r3
 80026ae:	4859      	ldr	r0, [pc, #356]	@ (8002814 <HAL_LTDC_MspInit+0x2ac>)
 80026b0:	f001 f90e 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_8
 80026b4:	f64a 73de 	movw	r3, #45022	@ 0xafde
 80026b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026ce:	230e      	movs	r3, #14
 80026d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026d8:	4619      	mov	r1, r3
 80026da:	484f      	ldr	r0, [pc, #316]	@ (8002818 <HAL_LTDC_MspInit+0x2b0>)
 80026dc:	f001 f8f8 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80026e0:	23f7      	movs	r3, #247	@ 0xf7
 80026e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026f8:	230e      	movs	r3, #14
 80026fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002702:	4619      	mov	r1, r3
 8002704:	4845      	ldr	r0, [pc, #276]	@ (800281c <HAL_LTDC_MspInit+0x2b4>)
 8002706:	f001 f8e3 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800270a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800270e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002724:	2309      	movs	r3, #9
 8002726:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800272a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800272e:	4619      	mov	r1, r3
 8002730:	483b      	ldr	r0, [pc, #236]	@ (8002820 <HAL_LTDC_MspInit+0x2b8>)
 8002732:	f001 f8cd 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800273a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002750:	230e      	movs	r3, #14
 8002752:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002756:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800275a:	4619      	mov	r1, r3
 800275c:	4830      	ldr	r0, [pc, #192]	@ (8002820 <HAL_LTDC_MspInit+0x2b8>)
 800275e:	f001 f8b7 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 8002762:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800277c:	230e      	movs	r3, #14
 800277e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002782:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002786:	4619      	mov	r1, r3
 8002788:	4826      	ldr	r0, [pc, #152]	@ (8002824 <HAL_LTDC_MspInit+0x2bc>)
 800278a:	f001 f8a1 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800278e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027a8:	230e      	movs	r3, #14
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027b2:	4619      	mov	r1, r3
 80027b4:	481c      	ldr	r0, [pc, #112]	@ (8002828 <HAL_LTDC_MspInit+0x2c0>)
 80027b6:	f001 f88b 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027ba:	2308      	movs	r3, #8
 80027bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027d2:	230e      	movs	r3, #14
 80027d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027dc:	4619      	mov	r1, r3
 80027de:	4813      	ldr	r0, [pc, #76]	@ (800282c <HAL_LTDC_MspInit+0x2c4>)
 80027e0:	f001 f876 	bl	80038d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2105      	movs	r1, #5
 80027e8:	2058      	movs	r0, #88	@ 0x58
 80027ea:	f000 fcf9 	bl	80031e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80027ee:	2058      	movs	r0, #88	@ 0x58
 80027f0:	f000 fd12 	bl	8003218 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2105      	movs	r1, #5
 80027f8:	2059      	movs	r0, #89	@ 0x59
 80027fa:	f000 fcf1 	bl	80031e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80027fe:	2059      	movs	r0, #89	@ 0x59
 8002800:	f000 fd0a 	bl	8003218 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002804:	bf00      	nop
 8002806:	37c0      	adds	r7, #192	@ 0xc0
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40016800 	.word	0x40016800
 8002810:	40023800 	.word	0x40023800
 8002814:	40021000 	.word	0x40021000
 8002818:	40022400 	.word	0x40022400
 800281c:	40022800 	.word	0x40022800
 8002820:	40021800 	.word	0x40021800
 8002824:	40022000 	.word	0x40022000
 8002828:	40020000 	.word	0x40020000
 800282c:	40021c00 	.word	0x40021c00

08002830 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a44      	ldr	r2, [pc, #272]	@ (8002960 <HAL_QSPI_MspInit+0x130>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 8081 	bne.w	8002956 <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002854:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 8002856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002858:	4a42      	ldr	r2, [pc, #264]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002860:	4b40      	ldr	r3, [pc, #256]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800286c:	4b3d      	ldr	r3, [pc, #244]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	4a3c      	ldr	r2, [pc, #240]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 8002872:	f043 0310 	orr.w	r3, r3, #16
 8002876:	6313      	str	r3, [r2, #48]	@ 0x30
 8002878:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <HAL_QSPI_MspInit+0x134>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028b4:	2304      	movs	r3, #4
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80028c4:	2309      	movs	r3, #9
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4826      	ldr	r0, [pc, #152]	@ (8002968 <HAL_QSPI_MspInit+0x138>)
 80028d0:	f000 fffe 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028d4:	2340      	movs	r3, #64	@ 0x40
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028e4:	230a      	movs	r3, #10
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4619      	mov	r1, r3
 80028ee:	481f      	ldr	r0, [pc, #124]	@ (800296c <HAL_QSPI_MspInit+0x13c>)
 80028f0:	f000 ffee 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f4:	2340      	movs	r3, #64	@ 0x40
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002904:	2309      	movs	r3, #9
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	4818      	ldr	r0, [pc, #96]	@ (8002970 <HAL_QSPI_MspInit+0x140>)
 8002910:	f000 ffde 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002914:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002926:	230a      	movs	r3, #10
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	480f      	ldr	r0, [pc, #60]	@ (8002970 <HAL_QSPI_MspInit+0x140>)
 8002932:	f000 ffcd 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002936:	2304      	movs	r3, #4
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002946:	2309      	movs	r3, #9
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	4806      	ldr	r0, [pc, #24]	@ (800296c <HAL_QSPI_MspInit+0x13c>)
 8002952:	f000 ffbd 	bl	80038d0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002956:	bf00      	nop
 8002958:	3730      	adds	r7, #48	@ 0x30
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	a0001000 	.word	0xa0001000
 8002964:	40023800 	.word	0x40023800
 8002968:	40021000 	.word	0x40021000
 800296c:	40020400 	.word	0x40020400
 8002970:	40021400 	.word	0x40021400

08002974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002984:	d114      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_TIM_Base_MspInit+0x68>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <HAL_TIM_Base_MspInit+0x68>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6413      	str	r3, [r2, #64]	@ 0x40
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_TIM_Base_MspInit+0x68>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2105      	movs	r1, #5
 80029a2:	201c      	movs	r0, #28
 80029a4:	f000 fc1c 	bl	80031e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029a8:	201c      	movs	r0, #28
 80029aa:	f000 fc35 	bl	8003218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029ae:	e010      	b.n	80029d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <HAL_TIM_Base_MspInit+0x6c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10b      	bne.n	80029d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ba:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <HAL_TIM_Base_MspInit+0x68>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a07      	ldr	r2, [pc, #28]	@ (80029dc <HAL_TIM_Base_MspInit+0x68>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_TIM_Base_MspInit+0x68>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40000400 	.word	0x40000400

080029e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a11      	ldr	r2, [pc, #68]	@ (8002a48 <HAL_TIM_MspPostInit+0x64>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11b      	bne.n	8002a3e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_TIM_MspPostInit+0x68>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a10      	ldr	r2, [pc, #64]	@ (8002a4c <HAL_TIM_MspPostInit+0x68>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_TIM_MspPostInit+0x68>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a3a:	f000 ff49 	bl	80038d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a3e:	bf00      	nop
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020800 	.word	0x40020800

08002a54 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a68:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <HAL_FMC_MspInit+0x124>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d17e      	bne.n	8002b6e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8002a70:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <HAL_FMC_MspInit+0x124>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a76:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <HAL_FMC_MspInit+0x128>)
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	4a40      	ldr	r2, [pc, #256]	@ (8002b7c <HAL_FMC_MspInit+0x128>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a82:	4b3e      	ldr	r3, [pc, #248]	@ (8002b7c <HAL_FMC_MspInit+0x128>)
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8002a8e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002a92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4835      	ldr	r0, [pc, #212]	@ (8002b80 <HAL_FMC_MspInit+0x12c>)
 8002aaa:	f000 ff11 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8002aae:	f248 1337 	movw	r3, #33079	@ 0x8137
 8002ab2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	482e      	ldr	r0, [pc, #184]	@ (8002b84 <HAL_FMC_MspInit+0x130>)
 8002aca:	f000 ff01 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002ace:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002ad2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4827      	ldr	r0, [pc, #156]	@ (8002b88 <HAL_FMC_MspInit+0x134>)
 8002aea:	f000 fef1 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8002aee:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002af2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b00:	230c      	movs	r3, #12
 8002b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4820      	ldr	r0, [pc, #128]	@ (8002b8c <HAL_FMC_MspInit+0x138>)
 8002b0a:	f000 fee1 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b0e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002b12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b20:	230c      	movs	r3, #12
 8002b22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	4619      	mov	r1, r3
 8002b28:	4819      	ldr	r0, [pc, #100]	@ (8002b90 <HAL_FMC_MspInit+0x13c>)
 8002b2a:	f000 fed1 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8002b2e:	f64f 7304 	movw	r3, #65284	@ 0xff04
 8002b32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b40:	230c      	movs	r3, #12
 8002b42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	4619      	mov	r1, r3
 8002b48:	4812      	ldr	r0, [pc, #72]	@ (8002b94 <HAL_FMC_MspInit+0x140>)
 8002b4a:	f000 fec1 	bl	80038d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002b4e:	2305      	movs	r3, #5
 8002b50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b5e:	230c      	movs	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <HAL_FMC_MspInit+0x144>)
 8002b68:	f000 feb2 	bl	80038d0 <HAL_GPIO_Init>
 8002b6c:	e000      	b.n	8002b70 <HAL_FMC_MspInit+0x11c>
    return;
 8002b6e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200008f8 	.word	0x200008f8
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40021800 	.word	0x40021800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021c00 	.word	0x40021c00
 8002b98:	40020800 	.word	0x40020800

08002b9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ba4:	f7ff ff56 	bl	8002a54 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	@ 0x38
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bc0:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <HAL_InitTick+0xe0>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	4a32      	ldr	r2, [pc, #200]	@ (8002c90 <HAL_InitTick+0xe0>)
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bcc:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <HAL_InitTick+0xe0>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd8:	f107 0210 	add.w	r2, r7, #16
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fe04 	bl	80057f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bf2:	f002 fde9 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 8002bf6:	6378      	str	r0, [r7, #52]	@ 0x34
 8002bf8:	e004      	b.n	8002c04 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bfa:	f002 fde5 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c06:	4a23      	ldr	r2, [pc, #140]	@ (8002c94 <HAL_InitTick+0xe4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c14:	4a21      	ldr	r2, [pc, #132]	@ (8002c9c <HAL_InitTick+0xec>)
 8002c16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c38:	4817      	ldr	r0, [pc, #92]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c3a:	f003 fa64 	bl	8006106 <HAL_TIM_Base_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11b      	bne.n	8002c84 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c4c:	4812      	ldr	r0, [pc, #72]	@ (8002c98 <HAL_InitTick+0xe8>)
 8002c4e:	f003 fab1 	bl	80061b4 <HAL_TIM_Base_Start_IT>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c60:	2036      	movs	r0, #54	@ 0x36
 8002c62:	f000 fad9 	bl	8003218 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d808      	bhi.n	8002c7e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	2036      	movs	r0, #54	@ 0x36
 8002c72:	f000 fab5 	bl	80031e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <HAL_InitTick+0xf0>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e002      	b.n	8002c84 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3738      	adds	r7, #56	@ 0x38
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	200008fc 	.word	0x200008fc
 8002c9c:	40001000 	.word	0x40001000
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <NMI_Handler+0x4>

08002cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <HardFault_Handler+0x4>

08002cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <MemManage_Handler+0x4>

08002cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Dev_Now.Touch = 1;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <EXTI0_IRQHandler+0x14>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f000 ffd0 	bl	8003c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000031c 	.word	0x2000031c
 8002cf4:	00000000 	.word	0x00000000

08002cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
    // Override and implement this function in Screen3
    static float angle = 0.0f;
    //float sineValue;

    // Calculate the sine value (adjust frequency and amplitude as needed)
    sineValue = 40.0f * sinf(angle);  // Amplitude 20
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <TIM2_IRQHandler+0x70>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	eeb0 0a67 	vmov.f32	s0, s15
 8002d06:	f02a f8d7 	bl	802ceb8 <sinf>
 8002d0a:	eef0 7a40 	vmov.f32	s15, s0
 8002d0e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002d6c <TIM2_IRQHandler+0x74>
 8002d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <TIM2_IRQHandler+0x78>)
 8002d18:	edc3 7a00 	vstr	s15, [r3]

        // Increment the angle for the next point (adjust frequency as needed)
        angle += 0.00005f;  // Adjust the step size for frequency control
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <TIM2_IRQHandler+0x70>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002d74 <TIM2_IRQHandler+0x7c>
 8002d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <TIM2_IRQHandler+0x70>)
 8002d2c:	edc3 7a00 	vstr	s15, [r3]
        if (angle >= 2 * M_PI)  // Reset the angle after a full cycle (2π radians)
 8002d30:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <TIM2_IRQHandler+0x70>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc1f 	bl	8000578 <__aeabi_f2d>
 8002d3a:	a309      	add	r3, pc, #36	@ (adr r3, 8002d60 <TIM2_IRQHandler+0x68>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fce6 	bl	8000710 <__aeabi_dcmpge>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <TIM2_IRQHandler+0x5a>
        {
            angle = 0.0f;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <TIM2_IRQHandler+0x70>)
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
        }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d52:	4809      	ldr	r0, [pc, #36]	@ (8002d78 <TIM2_IRQHandler+0x80>)
 8002d54:	f003 fc02 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	f3af 8000 	nop.w
 8002d60:	54442d18 	.word	0x54442d18
 8002d64:	401921fb 	.word	0x401921fb
 8002d68:	2000094c 	.word	0x2000094c
 8002d6c:	42200000 	.word	0x42200000
 8002d70:	20000948 	.word	0x20000948
 8002d74:	3851b717 	.word	0x3851b717
 8002d78:	20000820 	.word	0x20000820

08002d7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d80:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <TIM6_DAC_IRQHandler+0x10>)
 8002d82:	f003 fbeb 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200008fc 	.word	0x200008fc

08002d90 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <LTDC_IRQHandler+0x10>)
 8002d96:	f001 f86d 	bl	8003e74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000072c 	.word	0x2000072c

08002da4 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002da8:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <LTDC_ER_IRQHandler+0x10>)
 8002daa:	f001 f863 	bl	8003e74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000072c 	.word	0x2000072c

08002db8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002dbc:	4802      	ldr	r0, [pc, #8]	@ (8002dc8 <DMA2D_IRQHandler+0x10>)
 8002dbe:	f000 fbe5 	bl	800358c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200006ec 	.word	0x200006ec

08002dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return 1;
 8002dd0:	2301      	movs	r3, #1
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <_kill>:

int _kill(int pid, int sig)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002de6:	f02b f9ab 	bl	802e140 <__errno>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2216      	movs	r2, #22
 8002dee:	601a      	str	r2, [r3, #0]
  return -1;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_exit>:

void _exit (int status)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ffe7 	bl	8002ddc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e0e:	bf00      	nop
 8002e10:	e7fd      	b.n	8002e0e <_exit+0x12>

08002e12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e00a      	b.n	8002e3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e24:	f3af 8000 	nop.w
 8002e28:	4601      	mov	r1, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	60ba      	str	r2, [r7, #8]
 8002e30:	b2ca      	uxtb	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbf0      	blt.n	8002e24 <_read+0x12>
  }

  return len;
 8002e42:	687b      	ldr	r3, [r7, #4]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e009      	b.n	8002e72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	60ba      	str	r2, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dbf1      	blt.n	8002e5e <_write+0x12>
  }
  return len;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_close>:

int _close(int file)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eac:	605a      	str	r2, [r3, #4]
  return 0;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <_isatty>:

int _isatty(int file)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ec4:	2301      	movs	r3, #1
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <_sbrk+0x5c>)
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <_sbrk+0x60>)
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <_sbrk+0x64>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <_sbrk+0x68>)
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <_sbrk+0x64>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d207      	bcs.n	8002f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f1c:	f02b f910 	bl	802e140 <__errno>
 8002f20:	4603      	mov	r3, r0
 8002f22:	220c      	movs	r2, #12
 8002f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	e009      	b.n	8002f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <_sbrk+0x64>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f32:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a05      	ldr	r2, [pc, #20]	@ (8002f50 <_sbrk+0x64>)
 8002f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20050000 	.word	0x20050000
 8002f4c:	00000400 	.word	0x00000400
 8002f50:	20000950 	.word	0x20000950
 8002f54:	20013008 	.word	0x20013008

08002f58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <SystemInit+0x20>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f62:	4a05      	ldr	r2, [pc, #20]	@ (8002f78 <SystemInit+0x20>)
 8002f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f80:	f7ff ffea 	bl	8002f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f84:	480c      	ldr	r0, [pc, #48]	@ (8002fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f86:	490d      	ldr	r1, [pc, #52]	@ (8002fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f88:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f8c:	e002      	b.n	8002f94 <LoopCopyDataInit>

08002f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f92:	3304      	adds	r3, #4

08002f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f98:	d3f9      	bcc.n	8002f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa0:	e001      	b.n	8002fa6 <LoopFillZerobss>

08002fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa4:	3204      	adds	r2, #4

08002fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa8:	d3fb      	bcc.n	8002fa2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002faa:	f02b f8cf 	bl	802e14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fae:	f7fe fbdd 	bl	800176c <main>
  bx  lr    
 8002fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fbc:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002fc0:	08032aa4 	.word	0x08032aa4
  ldr r2, =_sbss
 8002fc4:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002fc8:	20013004 	.word	0x20013004

08002fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fcc:	e7fe      	b.n	8002fcc <ADC_IRQHandler>

08002fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	f000 f8f9 	bl	80031ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd8:	200f      	movs	r0, #15
 8002fda:	f7ff fde9 	bl	8002bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fde:	f7ff fa55 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_IncTick+0x20>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_IncTick+0x24>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a04      	ldr	r2, [pc, #16]	@ (800300c <HAL_IncTick+0x24>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2000000c 	.word	0x2000000c
 800300c:	20000954 	.word	0x20000954

08003010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return uwTick;
 8003014:	4b03      	ldr	r3, [pc, #12]	@ (8003024 <HAL_GetTick+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000954 	.word	0x20000954

08003028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff ffee 	bl	8003010 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d005      	beq.n	800304e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_Delay+0x44>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800304e:	bf00      	nop
 8003050:	f7ff ffde 	bl	8003010 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d8f7      	bhi.n	8003050 <HAL_Delay+0x28>
  {
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000000c 	.word	0x2000000c

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	4313      	orrs	r3, r2
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <__NVIC_SetPriorityGrouping+0x40>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	05fa0000 	.word	0x05fa0000

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	@ (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	@ (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	@ (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	@ 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	@ 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff4c 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f2:	f7ff ff61 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 80031f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	6978      	ldr	r0, [r7, #20]
 80031fe:	f7ff ffb1 	bl	8003164 <NVIC_EncodePriority>
 8003202:	4602      	mov	r2, r0
 8003204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff80 	bl	8003110 <__NVIC_SetPriority>
}
 8003210:	bf00      	nop
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff54 	bl	80030d4 <__NVIC_EnableIRQ>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e054      	b.n	80032f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f5b      	ldrb	r3, [r3, #29]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff f940 	bl	80024dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	791b      	ldrb	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_CRC_Init+0xc4>)
 8003270:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0218 	bic.w	r2, r2, #24
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	e00c      	b.n	800329e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6899      	ldr	r1, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	461a      	mov	r2, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f834 	bl	80032fc <HAL_CRCEx_Polynomial_Set>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e028      	b.n	80032f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	795b      	ldrb	r3, [r3, #5]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295
 80032ae:	611a      	str	r2, [r3, #16]
 80032b0:	e004      	b.n	80032bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6912      	ldr	r2, [r2, #16]
 80032ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	04c11db7 	.word	0x04c11db7

080032fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800330c:	231f      	movs	r3, #31
 800330e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
 800331e:	e063      	b.n	80033e8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003320:	bf00      	nop
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	613a      	str	r2, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <HAL_CRCEx_Polynomial_Set+0x44>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b18      	cmp	r3, #24
 8003344:	d846      	bhi.n	80033d4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003346:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	080033db 	.word	0x080033db
 8003350:	080033d5 	.word	0x080033d5
 8003354:	080033d5 	.word	0x080033d5
 8003358:	080033d5 	.word	0x080033d5
 800335c:	080033d5 	.word	0x080033d5
 8003360:	080033d5 	.word	0x080033d5
 8003364:	080033d5 	.word	0x080033d5
 8003368:	080033d5 	.word	0x080033d5
 800336c:	080033c9 	.word	0x080033c9
 8003370:	080033d5 	.word	0x080033d5
 8003374:	080033d5 	.word	0x080033d5
 8003378:	080033d5 	.word	0x080033d5
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033d5 	.word	0x080033d5
 800338c:	080033bd 	.word	0x080033bd
 8003390:	080033d5 	.word	0x080033d5
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033d5 	.word	0x080033d5
 800339c:	080033d5 	.word	0x080033d5
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080033d5 	.word	0x080033d5
 80033a8:	080033d5 	.word	0x080033d5
 80033ac:	080033b1 	.word	0x080033b1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d913      	bls.n	80033de <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033ba:	e010      	b.n	80033de <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b07      	cmp	r3, #7
 80033c0:	d90f      	bls.n	80033e2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033c6:	e00c      	b.n	80033e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	d90b      	bls.n	80033e6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033d2:	e008      	b.n	80033e6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
        break;
 80033d8:	e006      	b.n	80033e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033da:	bf00      	nop
 80033dc:	e004      	b.n	80033e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033e6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 0118 	bic.w	r1, r3, #24
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
}
 800340c:	4618      	mov	r0, r3
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003426:	f7ff fdf3 	bl	8003010 <HAL_GetTick>
 800342a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d008      	beq.n	800344a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	@ 0x80
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e052      	b.n	80034f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0216 	bic.w	r2, r2, #22
 8003458:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003468:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_DMA_Abort+0x62>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0208 	bic.w	r2, r2, #8
 8003488:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800349a:	e013      	b.n	80034c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800349c:	f7ff fdb8 	bl	8003010 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d90c      	bls.n	80034c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2203      	movs	r2, #3
 80034b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e015      	b.n	80034f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e4      	bne.n	800349c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d6:	223f      	movs	r2, #63	@ 0x3f
 80034d8:	409a      	lsls	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e039      	b.n	800357e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe fffc 	bl	800251c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	f023 0107 	bic.w	r1, r3, #7
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_DMA2D_Init+0x90>)
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68d1      	ldr	r1, [r2, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	430b      	orrs	r3, r1
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	ffffc000 	.word	0xffffc000

0800358c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d026      	beq.n	80035fc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d021      	beq.n	80035fc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035c6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2204      	movs	r2, #4
 80035e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d026      	beq.n	8003654 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d021      	beq.n	8003654 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800361e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2220      	movs	r2, #32
 8003626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2204      	movs	r2, #4
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d026      	beq.n	80036ac <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003664:	2b00      	cmp	r3, #0
 8003666:	d021      	beq.n	80036ac <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003676:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2204      	movs	r2, #4
 8003690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d013      	beq.n	80036de <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ce:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2204      	movs	r2, #4
 80036d6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f853 	bl	8003784 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d024      	beq.n	8003732 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01f      	beq.n	8003732 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003700:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2202      	movs	r2, #2
 8003708:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01f      	beq.n	800377c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01a      	beq.n	800377c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003754:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2210      	movs	r2, #16
 800375c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f80e 	bl	8003798 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_DMA2D_ConfigLayer+0x20>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e079      	b.n	80038c0 <HAL_DMA2D_ConfigLayer+0x114>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	3318      	adds	r3, #24
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80037f6:	4b35      	ldr	r3, [pc, #212]	@ (80038cc <HAL_DMA2D_ConfigLayer+0x120>)
 80037f8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b0a      	cmp	r3, #10
 8003800:	d003      	beq.n	800380a <HAL_DMA2D_ConfigLayer+0x5e>
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b09      	cmp	r3, #9
 8003808:	d107      	bne.n	800381a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e005      	b.n	8003826 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d120      	bne.n	800386e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	43db      	mvns	r3, r3
 8003836:	ea02 0103 	and.w	r1, r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	430a      	orrs	r2, r1
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b0a      	cmp	r3, #10
 8003854:	d003      	beq.n	800385e <HAL_DMA2D_ConfigLayer+0xb2>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b09      	cmp	r3, #9
 800385c:	d127      	bne.n	80038ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
 800386c:	e01f      	b.n	80038ae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	43db      	mvns	r3, r3
 8003878:	ea02 0103 	and.w	r1, r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	430a      	orrs	r2, r1
 8003884:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b0a      	cmp	r3, #10
 8003896:	d003      	beq.n	80038a0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b09      	cmp	r3, #9
 800389e:	d106      	bne.n	80038ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80038ac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	ff03000f 	.word	0xff03000f

080038d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	@ 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e175      	b.n	8003bdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	429a      	cmp	r2, r3
 800390a:	f040 8164 	bne.w	8003bd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d005      	beq.n	8003926 <HAL_GPIO_Init+0x56>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d130      	bne.n	8003988 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 0201 	and.w	r2, r3, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b03      	cmp	r3, #3
 8003992:	d017      	beq.n	80039c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d123      	bne.n	8003a18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	08da      	lsrs	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3208      	adds	r2, #8
 80039d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	220f      	movs	r2, #15
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	08da      	lsrs	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3208      	adds	r2, #8
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0203 	and.w	r2, r3, #3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80be 	beq.w	8003bd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	4b66      	ldr	r3, [pc, #408]	@ (8003bf4 <HAL_GPIO_Init+0x324>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	4a65      	ldr	r2, [pc, #404]	@ (8003bf4 <HAL_GPIO_Init+0x324>)
 8003a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a66:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_GPIO_Init+0x324>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a72:	4a61      	ldr	r2, [pc, #388]	@ (8003bf8 <HAL_GPIO_Init+0x328>)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	3302      	adds	r3, #2
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a58      	ldr	r2, [pc, #352]	@ (8003bfc <HAL_GPIO_Init+0x32c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d037      	beq.n	8003b0e <HAL_GPIO_Init+0x23e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a57      	ldr	r2, [pc, #348]	@ (8003c00 <HAL_GPIO_Init+0x330>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d031      	beq.n	8003b0a <HAL_GPIO_Init+0x23a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a56      	ldr	r2, [pc, #344]	@ (8003c04 <HAL_GPIO_Init+0x334>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02b      	beq.n	8003b06 <HAL_GPIO_Init+0x236>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a55      	ldr	r2, [pc, #340]	@ (8003c08 <HAL_GPIO_Init+0x338>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d025      	beq.n	8003b02 <HAL_GPIO_Init+0x232>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a54      	ldr	r2, [pc, #336]	@ (8003c0c <HAL_GPIO_Init+0x33c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <HAL_GPIO_Init+0x22e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a53      	ldr	r2, [pc, #332]	@ (8003c10 <HAL_GPIO_Init+0x340>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d019      	beq.n	8003afa <HAL_GPIO_Init+0x22a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	@ (8003c14 <HAL_GPIO_Init+0x344>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_GPIO_Init+0x226>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a51      	ldr	r2, [pc, #324]	@ (8003c18 <HAL_GPIO_Init+0x348>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00d      	beq.n	8003af2 <HAL_GPIO_Init+0x222>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	@ (8003c1c <HAL_GPIO_Init+0x34c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_Init+0x21e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8003c20 <HAL_GPIO_Init+0x350>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_Init+0x21a>
 8003ae6:	2309      	movs	r3, #9
 8003ae8:	e012      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003aea:	230a      	movs	r3, #10
 8003aec:	e010      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003aee:	2308      	movs	r3, #8
 8003af0:	e00e      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003af2:	2307      	movs	r3, #7
 8003af4:	e00c      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003af6:	2306      	movs	r3, #6
 8003af8:	e00a      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003afa:	2305      	movs	r3, #5
 8003afc:	e008      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003afe:	2304      	movs	r3, #4
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003b02:	2303      	movs	r3, #3
 8003b04:	e004      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e002      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_Init+0x240>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	f002 0203 	and.w	r2, r2, #3
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	4093      	lsls	r3, r2
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b20:	4935      	ldr	r1, [pc, #212]	@ (8003bf8 <HAL_GPIO_Init+0x328>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	3302      	adds	r3, #2
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b52:	4a34      	ldr	r2, [pc, #208]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b58:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b7c:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b82:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bd0:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <HAL_GPIO_Init+0x354>)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	f67f ae86 	bls.w	80038f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3724      	adds	r7, #36	@ 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	40020800 	.word	0x40020800
 8003c08:	40020c00 	.word	0x40020c00
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40021400 	.word	0x40021400
 8003c14:	40021800 	.word	0x40021800
 8003c18:	40021c00 	.word	0x40021c00
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40022400 	.word	0x40022400
 8003c24:	40013c00 	.word	0x40013c00

08003c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e001      	b.n	8003c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
 8003c64:	4613      	mov	r3, r2
 8003c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c68:	787b      	ldrb	r3, [r7, #1]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c74:	e003      	b.n	8003c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c76:	887b      	ldrh	r3, [r7, #2]
 8003c78:	041a      	lsls	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	619a      	str	r2, [r3, #24]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c96:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ca2:	4a05      	ldr	r2, [pc, #20]	@ (8003cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f806 	bl	8003cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40013c00 	.word	0x40013c00

08003cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0bf      	b.n	8003e66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fe fc34 	bl	8002568 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003d16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_LTDC_Init+0x19c>)
 8003d48:	400b      	ands	r3, r1
 8003d4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6899      	ldr	r1, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68d9      	ldr	r1, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b3e      	ldr	r3, [pc, #248]	@ (8003e70 <HAL_LTDC_Init+0x19c>)
 8003d76:	400b      	ands	r3, r1
 8003d78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68d9      	ldr	r1, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6919      	ldr	r1, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b33      	ldr	r3, [pc, #204]	@ (8003e70 <HAL_LTDC_Init+0x19c>)
 8003da4:	400b      	ands	r3, r1
 8003da6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6919      	ldr	r1, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6959      	ldr	r1, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b27      	ldr	r3, [pc, #156]	@ (8003e70 <HAL_LTDC_Init+0x19c>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6959      	ldr	r1, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0206 	orr.w	r2, r2, #6
 8003e42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	f000f800 	.word	0xf000f800

08003e74 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d023      	beq.n	8003ede <HAL_LTDC_IRQHandler+0x6a>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f86f 	bl	8003fbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_LTDC_IRQHandler+0xbc>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01e      	beq.n	8003f30 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0202 	bic.w	r2, r2, #2
 8003f00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2202      	movs	r2, #2
 8003f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f10:	f043 0202 	orr.w	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f846 	bl	8003fbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01b      	beq.n	8003f72 <HAL_LTDC_IRQHandler+0xfe>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d016      	beq.n	8003f72 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f010 f82d 	bl	8013fcc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_LTDC_IRQHandler+0x140>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0208 	bic.w	r2, r2, #8
 8003f94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f80e 	bl	8003fd0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fe4:	b5b0      	push	{r4, r5, r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_LTDC_ConfigLayer+0x1a>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e02c      	b.n	8004058 <HAL_LTDC_ConfigLayer+0x74>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2134      	movs	r1, #52	@ 0x34
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800402a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800402c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800402e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f849 	bl	80040d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bdb0      	pop	{r4, r5, r7, pc}

08004060 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_LTDC_ProgramLineEvent+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e023      	b.n	80040c0 <HAL_LTDC_ProgramLineEvent+0x60>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004098:	4a0c      	ldr	r2, [pc, #48]	@ (80040cc <HAL_LTDC_ProgramLineEvent+0x6c>)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40016800 	.word	0x40016800

080040d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	@ 0x24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	0c1b      	lsrs	r3, r3, #16
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	4413      	add	r3, r2
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	4413      	add	r3, r2
 80040fe:	3384      	adds	r3, #132	@ 0x84
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4611      	mov	r1, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	01d2      	lsls	r2, r2, #7
 800410c:	440a      	add	r2, r1
 800410e:	3284      	adds	r2, #132	@ 0x84
 8004110:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004114:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004126:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004128:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4619      	mov	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	01db      	lsls	r3, r3, #7
 8004134:	440b      	add	r3, r1
 8004136:	3384      	adds	r3, #132	@ 0x84
 8004138:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800413e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414e:	4413      	add	r3, r2
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	01db      	lsls	r3, r3, #7
 800415e:	4413      	add	r3, r2
 8004160:	3384      	adds	r3, #132	@ 0x84
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	4611      	mov	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	01d2      	lsls	r2, r2, #7
 800416e:	440a      	add	r2, r1
 8004170:	3284      	adds	r2, #132	@ 0x84
 8004172:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004176:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004186:	4413      	add	r3, r2
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	01db      	lsls	r3, r3, #7
 8004194:	440b      	add	r3, r1
 8004196:	3384      	adds	r3, #132	@ 0x84
 8004198:	4619      	mov	r1, r3
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	01db      	lsls	r3, r3, #7
 80041aa:	4413      	add	r3, r2
 80041ac:	3384      	adds	r3, #132	@ 0x84
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	4611      	mov	r1, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	01d2      	lsls	r2, r2, #7
 80041ba:	440a      	add	r2, r1
 80041bc:	3284      	adds	r2, #132	@ 0x84
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	01db      	lsls	r3, r3, #7
 80041ce:	4413      	add	r3, r2
 80041d0:	3384      	adds	r3, #132	@ 0x84
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	4413      	add	r3, r2
 8004202:	3384      	adds	r3, #132	@ 0x84
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	01db      	lsls	r3, r3, #7
 8004210:	4413      	add	r3, r2
 8004212:	3384      	adds	r3, #132	@ 0x84
 8004214:	461a      	mov	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004220:	461a      	mov	r2, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	431a      	orrs	r2, r3
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	440b      	add	r3, r1
 8004236:	3384      	adds	r3, #132	@ 0x84
 8004238:	4619      	mov	r1, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	01db      	lsls	r3, r3, #7
 800424a:	4413      	add	r3, r2
 800424c:	3384      	adds	r3, #132	@ 0x84
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4611      	mov	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	01d2      	lsls	r2, r2, #7
 800425a:	440a      	add	r2, r1
 800425c:	3284      	adds	r2, #132	@ 0x84
 800425e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004262:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	01db      	lsls	r3, r3, #7
 800426e:	4413      	add	r3, r2
 8004270:	3384      	adds	r3, #132	@ 0x84
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	4413      	add	r3, r2
 8004286:	3384      	adds	r3, #132	@ 0x84
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4619      	mov	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	01db      	lsls	r3, r3, #7
 8004294:	440b      	add	r3, r1
 8004296:	3384      	adds	r3, #132	@ 0x84
 8004298:	4619      	mov	r1, r3
 800429a:	4b58      	ldr	r3, [pc, #352]	@ (80043fc <LTDC_SetConfig+0x32c>)
 800429c:	4013      	ands	r3, r2
 800429e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	6809      	ldr	r1, [r1, #0]
 80042ac:	4608      	mov	r0, r1
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	01c9      	lsls	r1, r1, #7
 80042b2:	4401      	add	r1, r0
 80042b4:	3184      	adds	r1, #132	@ 0x84
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	4413      	add	r3, r2
 80042c6:	3384      	adds	r3, #132	@ 0x84
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	4413      	add	r3, r2
 80042d6:	3384      	adds	r3, #132	@ 0x84
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	01db      	lsls	r3, r3, #7
 80042e8:	4413      	add	r3, r2
 80042ea:	3384      	adds	r3, #132	@ 0x84
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80042fc:	2304      	movs	r3, #4
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e01b      	b.n	800433a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800430a:	2303      	movs	r3, #3
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e014      	b.n	800433a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d00b      	beq.n	8004330 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800431c:	2b02      	cmp	r3, #2
 800431e:	d007      	beq.n	8004330 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004324:	2b03      	cmp	r3, #3
 8004326:	d003      	beq.n	8004330 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800432c:	2b07      	cmp	r3, #7
 800432e:	d102      	bne.n	8004336 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004330:	2302      	movs	r3, #2
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e001      	b.n	800433a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004336:	2301      	movs	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	01db      	lsls	r3, r3, #7
 8004344:	4413      	add	r3, r2
 8004346:	3384      	adds	r3, #132	@ 0x84
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	4611      	mov	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	01d2      	lsls	r2, r2, #7
 8004354:	440a      	add	r2, r1
 8004356:	3284      	adds	r2, #132	@ 0x84
 8004358:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800435c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	1acb      	subs	r3, r1, r3
 8004374:	69f9      	ldr	r1, [r7, #28]
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	6809      	ldr	r1, [r1, #0]
 8004380:	4608      	mov	r0, r1
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	01c9      	lsls	r1, r1, #7
 8004386:	4401      	add	r1, r0
 8004388:	3184      	adds	r1, #132	@ 0x84
 800438a:	4313      	orrs	r3, r2
 800438c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	01db      	lsls	r3, r3, #7
 8004398:	4413      	add	r3, r2
 800439a:	3384      	adds	r3, #132	@ 0x84
 800439c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	01db      	lsls	r3, r3, #7
 80043a8:	440b      	add	r3, r1
 80043aa:	3384      	adds	r3, #132	@ 0x84
 80043ac:	4619      	mov	r1, r3
 80043ae:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <LTDC_SetConfig+0x330>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	01db      	lsls	r3, r3, #7
 80043be:	4413      	add	r3, r2
 80043c0:	3384      	adds	r3, #132	@ 0x84
 80043c2:	461a      	mov	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	4413      	add	r3, r2
 80043d6:	3384      	adds	r3, #132	@ 0x84
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	4611      	mov	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	01d2      	lsls	r2, r2, #7
 80043e4:	440a      	add	r2, r1
 80043e6:	3284      	adds	r2, #132	@ 0x84
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
}
 80043ee:	bf00      	nop
 80043f0:	3724      	adds	r7, #36	@ 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	fffff8f8 	.word	0xfffff8f8
 8004400:	fffff800 	.word	0xfffff800

08004404 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	4b23      	ldr	r3, [pc, #140]	@ (800449c <HAL_PWREx_EnableOverDrive+0x98>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	4a22      	ldr	r2, [pc, #136]	@ (800449c <HAL_PWREx_EnableOverDrive+0x98>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	@ 0x40
 800441a:	4b20      	ldr	r3, [pc, #128]	@ (800449c <HAL_PWREx_EnableOverDrive+0x98>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004426:	4b1e      	ldr	r3, [pc, #120]	@ (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1d      	ldr	r2, [pc, #116]	@ (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004430:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004432:	f7fe fded 	bl	8003010 <HAL_GetTick>
 8004436:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004438:	e009      	b.n	800444e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800443a:	f7fe fde9 	bl	8003010 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004448:	d901      	bls.n	800444e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e022      	b.n	8004494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800444e:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800445a:	d1ee      	bne.n	800443a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800445c:	4b10      	ldr	r3, [pc, #64]	@ (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0f      	ldr	r2, [pc, #60]	@ (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004468:	f7fe fdd2 	bl	8003010 <HAL_GetTick>
 800446c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800446e:	e009      	b.n	8004484 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004470:	f7fe fdce 	bl	8003010 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800447e:	d901      	bls.n	8004484 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e007      	b.n	8004494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004484:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004490:	d1ee      	bne.n	8004470 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000

080044a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044ac:	f7fe fdb0 	bl	8003010 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e067      	b.n	800458c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fe f9ad 	bl	8002830 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044d6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fb47 	bl	8004b6e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	021a      	lsls	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	2120      	movs	r1, #32
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fb3f 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d135      	bne.n	8004582 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b1d      	ldr	r3, [pc, #116]	@ (8004594 <HAL_QSPI_Init+0xf0>)
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6852      	ldr	r2, [r2, #4]
 8004524:	0611      	lsls	r1, r2, #24
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	4311      	orrs	r1, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	69d2      	ldr	r2, [r2, #28]
 8004530:	4311      	orrs	r1, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a12      	ldr	r2, [r2, #32]
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	430b      	orrs	r3, r1
 800453e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <HAL_QSPI_Init+0xf4>)
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6912      	ldr	r2, [r2, #16]
 800454e:	0411      	lsls	r1, r2, #16
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6952      	ldr	r2, [r2, #20]
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6992      	ldr	r2, [r2, #24]
 800455a:	4311      	orrs	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	430b      	orrs	r3, r1
 8004562:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800458a:	7afb      	ldrb	r3, [r7, #11]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	00ffff2f 	.word	0x00ffff2f
 8004598:	ffe0f8fe 	.word	0xffe0f8fe

0800459c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80045a8:	f7fe fd32 	bl	8003010 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_QSPI_Command+0x22>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e048      	b.n	8004650 <HAL_QSPI_Command+0xb4>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d137      	bne.n	8004642 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2200      	movs	r2, #0
 80045e8:	2120      	movs	r1, #32
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 facd 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d125      	bne.n	8004646 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80045fa:	2200      	movs	r2, #0
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fafa 	bl	8004bf8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2201      	movs	r2, #1
 8004614:	2102      	movs	r1, #2
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fab7 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2202      	movs	r2, #2
 800462c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004636:	e006      	b.n	8004646 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004640:	e001      	b.n	8004646 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004642:	2302      	movs	r3, #2
 8004644:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	@ 0x28
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004668:	f7fe fcd2 	bl	8003010 <HAL_GetTick>
 800466c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3320      	adds	r3, #32
 8004674:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_QSPI_Transmit+0x2e>
 8004682:	2302      	movs	r3, #2
 8004684:	e07b      	b.n	800477e <HAL_QSPI_Transmit+0x126>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d16a      	bne.n	8004770 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d05b      	beq.n	800475e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2212      	movs	r2, #18
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80046da:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80046dc:	e01b      	b.n	8004716 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2201      	movs	r2, #1
 80046e6:	2104      	movs	r1, #4
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fa4e 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d113      	bne.n	8004720 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1df      	bne.n	80046de <HAL_QSPI_Transmit+0x86>
 800471e:	e000      	b.n	8004722 <HAL_QSPI_Transmit+0xca>
          break;
 8004720:	bf00      	nop
      }

      if (status == HAL_OK)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d115      	bne.n	8004754 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2201      	movs	r2, #1
 8004730:	2102      	movs	r1, #2
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fa29 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800473c:	7ffb      	ldrb	r3, [r7, #31]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2202      	movs	r2, #2
 8004748:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f996 	bl	8004a7c <HAL_QSPI_Abort>
 8004750:	4603      	mov	r3, r0
 8004752:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800475c:	e00a      	b.n	8004774 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	f043 0208 	orr.w	r2, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e001      	b.n	8004774 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004770:	2302      	movs	r3, #2
 8004772:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800477c:	7ffb      	ldrb	r3, [r7, #31]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b08a      	sub	sp, #40	@ 0x28
 800478a:	af02      	add	r7, sp, #8
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004796:	f7fe fc3b 	bl	8003010 <HAL_GetTick>
 800479a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3320      	adds	r3, #32
 80047aa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_QSPI_Receive+0x36>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e082      	b.n	80048c2 <HAL_QSPI_Receive+0x13c>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d171      	bne.n	80048b4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d062      	beq.n	80048a2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2222      	movs	r2, #34	@ 0x22
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004814:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800481e:	e01c      	b.n	800485a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2201      	movs	r2, #1
 8004828:	2106      	movs	r1, #6
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f9ad 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004834:	7ffb      	ldrb	r3, [r7, #31]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d114      	bne.n	8004864 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1de      	bne.n	8004820 <HAL_QSPI_Receive+0x9a>
 8004862:	e000      	b.n	8004866 <HAL_QSPI_Receive+0xe0>
          break;
 8004864:	bf00      	nop
      }

      if (status == HAL_OK)
 8004866:	7ffb      	ldrb	r3, [r7, #31]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d115      	bne.n	8004898 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2201      	movs	r2, #1
 8004874:	2102      	movs	r1, #2
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f987 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2202      	movs	r2, #2
 800488c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f8f4 	bl	8004a7c <HAL_QSPI_Abort>
 8004894:	4603      	mov	r3, r0
 8004896:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048a0:	e00a      	b.n	80048b8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f043 0208 	orr.w	r2, r3, #8
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e001      	b.n	80048b8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
 80048b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80048c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b088      	sub	sp, #32
 80048ce:	af02      	add	r7, sp, #8
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048d8:	f7fe fb9a 	bl	8003010 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_QSPI_AutoPolling+0x24>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e060      	b.n	80049b0 <HAL_QSPI_AutoPolling+0xe6>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d14f      	bne.n	80049a2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2242      	movs	r2, #66	@ 0x42
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2200      	movs	r2, #0
 8004918:	2120      	movs	r1, #32
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f935 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d13d      	bne.n	80049a6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6852      	ldr	r2, [r2, #4]
 800493c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	431a      	orrs	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004960:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800496a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f941 	bl	8004bf8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2201      	movs	r2, #1
 800497e:	2108      	movs	r1, #8
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f902 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2208      	movs	r2, #8
 8004996:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049a0:	e001      	b.n	80049a6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
 80049a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80049c4:	f7fe fb24 	bl	8003010 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_QSPI_MemoryMapped+0x22>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e04c      	b.n	8004a74 <HAL_QSPI_MemoryMapped+0xbc>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d13b      	bne.n	8004a66 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2282      	movs	r2, #130	@ 0x82
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2120      	movs	r1, #32
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f8be 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d128      	bne.n	8004a6a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 0108 	bic.w	r1, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d110      	bne.n	8004a58 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2210      	movs	r2, #16
 8004a46:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a56:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8004a58:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8ca 	bl	8004bf8 <QSPI_Config>
 8004a64:	e001      	b.n	8004a6a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004a88:	f7fe fac2 	bl	8003010 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d062      	beq.n	8004b64 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fca5 	bl	8003418 <HAL_DMA_Abort>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004adc:	f043 0204 	orr.w	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d034      	beq.n	8004b5c <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0202 	orr.w	r2, r2, #2
 8004b00:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f83b 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10e      	bne.n	8004b3c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2202      	movs	r2, #2
 8004b24:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2120      	movs	r1, #32
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f829 	bl	8004b8a <QSPI_WaitFlagStateUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d110      	bne.n	8004b64 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004b50:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b5a:	e003      	b.n	8004b64 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b9a:	e01a      	b.n	8004bd2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d016      	beq.n	8004bd2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba4:	f7fe fa34 	bl	8003010 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00e      	b.n	8004bf0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d1d6      	bne.n	8004b9c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <QSPI_Config+0x28>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c12:	d005      	beq.n	8004c20 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80b9 	beq.w	8004d9c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05f      	beq.n	8004cf2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	6892      	ldr	r2, [r2, #8]
 8004c3a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d031      	beq.n	8004ca8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	049b      	lsls	r3, r3, #18
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	ea42 0103 	orr.w	r1, r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c98:	f000 812e 	beq.w	8004ef8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004ca6:	e127      	b.n	8004ef8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	049b      	lsls	r3, r3, #18
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	615a      	str	r2, [r3, #20]
}
 8004cf0:	e102      	b.n	8004ef8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02e      	beq.n	8004d58 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	049b      	lsls	r3, r3, #18
 8004d16:	431a      	orrs	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d48:	f000 80d6 	beq.w	8004ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	6852      	ldr	r2, [r2, #4]
 8004d54:	619a      	str	r2, [r3, #24]
}
 8004d56:	e0cf      	b.n	8004ef8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	049b      	lsls	r3, r3, #18
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	ea42 0103 	orr.w	r1, r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	e0ad      	b.n	8004ef8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d058      	beq.n	8004e56 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	6892      	ldr	r2, [r2, #8]
 8004dac:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02d      	beq.n	8004e12 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	049b      	lsls	r3, r3, #18
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e04:	d078      	beq.n	8004ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	6852      	ldr	r2, [r2, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
}
 8004e10:	e072      	b.n	8004ef8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	431a      	orrs	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	049b      	lsls	r3, r3, #18
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	ea42 0103 	orr.w	r1, r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	615a      	str	r2, [r3, #20]
}
 8004e54:	e050      	b.n	8004ef8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02a      	beq.n	8004eb4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	431a      	orrs	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	431a      	orrs	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	049b      	lsls	r3, r3, #18
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004ea6:	d027      	beq.n	8004ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	6852      	ldr	r2, [r2, #4]
 8004eb0:	619a      	str	r2, [r3, #24]
}
 8004eb2:	e021      	b.n	8004ef8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01d      	beq.n	8004ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	049b      	lsls	r3, r3, #18
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	ea42 0103 	orr.w	r1, r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	615a      	str	r2, [r3, #20]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e291      	b.n	800543e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8087 	beq.w	8005036 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f28:	4b96      	ldr	r3, [pc, #600]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d00c      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f34:	4b93      	ldr	r3, [pc, #588]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d112      	bne.n	8004f66 <HAL_RCC_OscConfig+0x62>
 8004f40:	4b90      	ldr	r3, [pc, #576]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f4c:	d10b      	bne.n	8004f66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06c      	beq.n	8005034 <HAL_RCC_OscConfig+0x130>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d168      	bne.n	8005034 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e26b      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x7a>
 8004f70:	4b84      	ldr	r3, [pc, #528]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a83      	ldr	r2, [pc, #524]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e02e      	b.n	8004fdc <HAL_RCC_OscConfig+0xd8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x9c>
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b7c      	ldr	r3, [pc, #496]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a7b      	ldr	r2, [pc, #492]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xd8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xc0>
 8004faa:	4b76      	ldr	r3, [pc, #472]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a75      	ldr	r2, [pc, #468]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b73      	ldr	r3, [pc, #460]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a72      	ldr	r2, [pc, #456]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xd8>
 8004fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f814 	bl	8003010 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fec:	f7fe f810 	bl	8003010 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e21f      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b61      	ldr	r3, [pc, #388]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xe8>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fe f800 	bl	8003010 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7fd fffc 	bl	8003010 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e20b      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	4b57      	ldr	r3, [pc, #348]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x110>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d069      	beq.n	8005116 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005042:	4b50      	ldr	r3, [pc, #320]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504e:	4b4d      	ldr	r3, [pc, #308]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x190>
 800505a:	4b4a      	ldr	r3, [pc, #296]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	4b47      	ldr	r3, [pc, #284]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x17a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e1df      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b41      	ldr	r3, [pc, #260]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	493d      	ldr	r1, [pc, #244]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e040      	b.n	8005116 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d023      	beq.n	80050e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509c:	4b39      	ldr	r3, [pc, #228]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a38      	ldr	r2, [pc, #224]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fd ffb2 	bl	8003010 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b0:	f7fd ffae 	bl	8003010 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1bd      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b30      	ldr	r3, [pc, #192]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4929      	ldr	r1, [pc, #164]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
 80050e2:	e018      	b.n	8005116 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e4:	4b27      	ldr	r3, [pc, #156]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a26      	ldr	r2, [pc, #152]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 80050ea:	f023 0301 	bic.w	r3, r3, #1
 80050ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd ff8e 	bl	8003010 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f8:	f7fd ff8a 	bl	8003010 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e199      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	4b1e      	ldr	r3, [pc, #120]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d038      	beq.n	8005194 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d019      	beq.n	800515e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800512a:	4b16      	ldr	r3, [pc, #88]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 800512c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fd ff6b 	bl	8003010 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513e:	f7fd ff67 	bl	8003010 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e176      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x23a>
 800515c:	e01a      	b.n	8005194 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800515e:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	4a08      	ldr	r2, [pc, #32]	@ (8005184 <HAL_RCC_OscConfig+0x280>)
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fd ff51 	bl	8003010 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005172:	f7fd ff4d 	bl	8003010 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d903      	bls.n	8005188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e15c      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
 8005184:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005188:	4b91      	ldr	r3, [pc, #580]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800518a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ee      	bne.n	8005172 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a4 	beq.w	80052ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a2:	4b8b      	ldr	r3, [pc, #556]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	4b88      	ldr	r3, [pc, #544]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	4a87      	ldr	r2, [pc, #540]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ba:	4b85      	ldr	r3, [pc, #532]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ca:	4b82      	ldr	r3, [pc, #520]	@ (80053d4 <HAL_RCC_OscConfig+0x4d0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d118      	bne.n	8005208 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051d6:	4b7f      	ldr	r3, [pc, #508]	@ (80053d4 <HAL_RCC_OscConfig+0x4d0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a7e      	ldr	r2, [pc, #504]	@ (80053d4 <HAL_RCC_OscConfig+0x4d0>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e2:	f7fd ff15 	bl	8003010 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fd ff11 	bl	8003010 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b64      	cmp	r3, #100	@ 0x64
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e120      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fc:	4b75      	ldr	r3, [pc, #468]	@ (80053d4 <HAL_RCC_OscConfig+0x4d0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x31a>
 8005210:	4b6f      	ldr	r3, [pc, #444]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005214:	4a6e      	ldr	r2, [pc, #440]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6713      	str	r3, [r2, #112]	@ 0x70
 800521c:	e02d      	b.n	800527a <HAL_RCC_OscConfig+0x376>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x33c>
 8005226:	4b6a      	ldr	r3, [pc, #424]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522a:	4a69      	ldr	r2, [pc, #420]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	6713      	str	r3, [r2, #112]	@ 0x70
 8005232:	4b67      	ldr	r3, [pc, #412]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005236:	4a66      	ldr	r2, [pc, #408]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005238:	f023 0304 	bic.w	r3, r3, #4
 800523c:	6713      	str	r3, [r2, #112]	@ 0x70
 800523e:	e01c      	b.n	800527a <HAL_RCC_OscConfig+0x376>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b05      	cmp	r3, #5
 8005246:	d10c      	bne.n	8005262 <HAL_RCC_OscConfig+0x35e>
 8005248:	4b61      	ldr	r3, [pc, #388]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524c:	4a60      	ldr	r2, [pc, #384]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	6713      	str	r3, [r2, #112]	@ 0x70
 8005254:	4b5e      	ldr	r3, [pc, #376]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005258:	4a5d      	ldr	r2, [pc, #372]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005260:	e00b      	b.n	800527a <HAL_RCC_OscConfig+0x376>
 8005262:	4b5b      	ldr	r3, [pc, #364]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	4a5a      	ldr	r2, [pc, #360]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	6713      	str	r3, [r2, #112]	@ 0x70
 800526e:	4b58      	ldr	r3, [pc, #352]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005272:	4a57      	ldr	r2, [pc, #348]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005274:	f023 0304 	bic.w	r3, r3, #4
 8005278:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d015      	beq.n	80052ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005282:	f7fd fec5 	bl	8003010 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005288:	e00a      	b.n	80052a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528a:	f7fd fec1 	bl	8003010 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005298:	4293      	cmp	r3, r2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0ce      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	4b4b      	ldr	r3, [pc, #300]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ee      	beq.n	800528a <HAL_RCC_OscConfig+0x386>
 80052ac:	e014      	b.n	80052d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fd feaf 	bl	8003010 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b4:	e00a      	b.n	80052cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fd feab 	bl	8003010 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e0b8      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052cc:	4b40      	ldr	r3, [pc, #256]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ee      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052de:	4b3c      	ldr	r3, [pc, #240]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	4a3b      	ldr	r2, [pc, #236]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80052e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80a4 	beq.w	800543c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f4:	4b36      	ldr	r3, [pc, #216]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 030c 	and.w	r3, r3, #12
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d06b      	beq.n	80053d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d149      	bne.n	800539c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005308:	4b31      	ldr	r3, [pc, #196]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a30      	ldr	r2, [pc, #192]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800530e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd fe7c 	bl	8003010 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531c:	f7fd fe78 	bl	8003010 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e087      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532e:	4b28      	ldr	r3, [pc, #160]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69da      	ldr	r2, [r3, #28]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	3b01      	subs	r3, #1
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	4313      	orrs	r3, r2
 8005360:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005362:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005366:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005368:	4b19      	ldr	r3, [pc, #100]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800536e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fd fe4c 	bl	8003010 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537c:	f7fd fe48 	bl	8003010 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e057      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538e:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0x478>
 800539a:	e04f      	b.n	800543c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0b      	ldr	r2, [pc, #44]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80053a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fd fe32 	bl	8003010 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fd fe2e 	bl	8003010 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e03d      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_RCC_OscConfig+0x4cc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x4ac>
 80053ce:	e035      	b.n	800543c <HAL_RCC_OscConfig+0x538>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <HAL_RCC_OscConfig+0x544>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d028      	beq.n	8005438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d121      	bne.n	8005438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d11a      	bne.n	8005438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800540e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005410:	4293      	cmp	r3, r2
 8005412:	d111      	bne.n	8005438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d107      	bne.n	8005438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800

0800544c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0d0      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005464:	4b6a      	ldr	r3, [pc, #424]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d910      	bls.n	8005494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b67      	ldr	r3, [pc, #412]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 020f 	bic.w	r2, r3, #15
 800547a:	4965      	ldr	r1, [pc, #404]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b63      	ldr	r3, [pc, #396]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0b8      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ac:	4b59      	ldr	r3, [pc, #356]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a58      	ldr	r2, [pc, #352]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c4:	4b53      	ldr	r3, [pc, #332]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a52      	ldr	r2, [pc, #328]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d0:	4b50      	ldr	r3, [pc, #320]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	494d      	ldr	r1, [pc, #308]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d040      	beq.n	8005570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b47      	ldr	r3, [pc, #284]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d115      	bne.n	800552e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e07f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b41      	ldr	r3, [pc, #260]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e073      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	4b3d      	ldr	r3, [pc, #244]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e06b      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552e:	4b39      	ldr	r3, [pc, #228]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4936      	ldr	r1, [pc, #216]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fd fd66 	bl	8003010 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	e00a      	b.n	800555e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005548:	f7fd fd62 	bl	8003010 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e053      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	4b2d      	ldr	r3, [pc, #180]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 020c 	and.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	429a      	cmp	r2, r3
 800556e:	d1eb      	bne.n	8005548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005570:	4b27      	ldr	r3, [pc, #156]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d210      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b24      	ldr	r3, [pc, #144]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f023 020f 	bic.w	r2, r3, #15
 8005586:	4922      	ldr	r1, [pc, #136]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558e:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e032      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4916      	ldr	r1, [pc, #88]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	490e      	ldr	r1, [pc, #56]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055de:	f000 f821 	bl	8005624 <HAL_RCC_GetSysClockFreq>
 80055e2:	4602      	mov	r2, r0
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	490a      	ldr	r1, [pc, #40]	@ (8005618 <HAL_RCC_ClockConfig+0x1cc>)
 80055f0:	5ccb      	ldrb	r3, [r1, r3]
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	4a09      	ldr	r2, [pc, #36]	@ (800561c <HAL_RCC_ClockConfig+0x1d0>)
 80055f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <HAL_RCC_ClockConfig+0x1d4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fd fad6 	bl	8002bb0 <HAL_InitTick>

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40023c00 	.word	0x40023c00
 8005614:	40023800 	.word	0x40023800
 8005618:	0802fdd4 	.word	0x0802fdd4
 800561c:	20000004 	.word	0x20000004
 8005620:	20000008 	.word	0x20000008

08005624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005628:	b090      	sub	sp, #64	@ 0x40
 800562a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005630:	2300      	movs	r3, #0
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005634:	2300      	movs	r3, #0
 8005636:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800563c:	4b59      	ldr	r3, [pc, #356]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b08      	cmp	r3, #8
 8005646:	d00d      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x40>
 8005648:	2b08      	cmp	r3, #8
 800564a:	f200 80a1 	bhi.w	8005790 <HAL_RCC_GetSysClockFreq+0x16c>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_RCC_GetSysClockFreq+0x34>
 8005652:	2b04      	cmp	r3, #4
 8005654:	d003      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x3a>
 8005656:	e09b      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b53      	ldr	r3, [pc, #332]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800565a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800565c:	e09b      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800565e:	4b53      	ldr	r3, [pc, #332]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005660:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005662:	e098      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005664:	4b4f      	ldr	r3, [pc, #316]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800566c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800566e:	4b4d      	ldr	r3, [pc, #308]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d028      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567a:	4b4a      	ldr	r3, [pc, #296]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	2200      	movs	r2, #0
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	627a      	str	r2, [r7, #36]	@ 0x24
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800568c:	2100      	movs	r1, #0
 800568e:	4b47      	ldr	r3, [pc, #284]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005690:	fb03 f201 	mul.w	r2, r3, r1
 8005694:	2300      	movs	r3, #0
 8005696:	fb00 f303 	mul.w	r3, r0, r3
 800569a:	4413      	add	r3, r2
 800569c:	4a43      	ldr	r2, [pc, #268]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x188>)
 800569e:	fba0 1202 	umull	r1, r2, r0, r2
 80056a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a4:	460a      	mov	r2, r1
 80056a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80056a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056aa:	4413      	add	r3, r2
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b0:	2200      	movs	r2, #0
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	61fa      	str	r2, [r7, #28]
 80056b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056be:	f7fb f83b 	bl	8000738 <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4613      	mov	r3, r2
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ca:	e053      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056cc:	4b35      	ldr	r3, [pc, #212]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	099b      	lsrs	r3, r3, #6
 80056d2:	2200      	movs	r2, #0
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	617a      	str	r2, [r7, #20]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056de:	f04f 0b00 	mov.w	fp, #0
 80056e2:	4652      	mov	r2, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	f04f 0000 	mov.w	r0, #0
 80056ea:	f04f 0100 	mov.w	r1, #0
 80056ee:	0159      	lsls	r1, r3, #5
 80056f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f4:	0150      	lsls	r0, r2, #5
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	ebb2 080a 	subs.w	r8, r2, sl
 80056fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800570e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005716:	ebb2 0408 	subs.w	r4, r2, r8
 800571a:	eb63 0509 	sbc.w	r5, r3, r9
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	00eb      	lsls	r3, r5, #3
 8005728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800572c:	00e2      	lsls	r2, r4, #3
 800572e:	4614      	mov	r4, r2
 8005730:	461d      	mov	r5, r3
 8005732:	eb14 030a 	adds.w	r3, r4, sl
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	eb45 030b 	adc.w	r3, r5, fp
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800574a:	4629      	mov	r1, r5
 800574c:	028b      	lsls	r3, r1, #10
 800574e:	4621      	mov	r1, r4
 8005750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005754:	4621      	mov	r1, r4
 8005756:	028a      	lsls	r2, r1, #10
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575e:	2200      	movs	r2, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005768:	f7fa ffe6 	bl	8000738 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4613      	mov	r3, r2
 8005772:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005774:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	3301      	adds	r3, #1
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005784:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800578e:	e002      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005792:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005798:	4618      	mov	r0, r3
 800579a:	3740      	adds	r7, #64	@ 0x40
 800579c:	46bd      	mov	sp, r7
 800579e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	017d7840 	.word	0x017d7840

080057b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000004 	.word	0x20000004

080057c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057cc:	f7ff fff0 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0a9b      	lsrs	r3, r3, #10
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	4903      	ldr	r1, [pc, #12]	@ (80057ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80057de:	5ccb      	ldrb	r3, [r1, r3]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	0802fde4 	.word	0x0802fde4

080057f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	220f      	movs	r2, #15
 80057fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <HAL_RCC_GetClockConfig+0x5c>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0203 	and.w	r2, r3, #3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800580c:	4b0f      	ldr	r3, [pc, #60]	@ (800584c <HAL_RCC_GetClockConfig+0x5c>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005818:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <HAL_RCC_GetClockConfig+0x5c>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <HAL_RCC_GetClockConfig+0x5c>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	08db      	lsrs	r3, r3, #3
 800582a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <HAL_RCC_GetClockConfig+0x60>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 020f 	and.w	r2, r3, #15
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	601a      	str	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	40023c00 	.word	0x40023c00

08005854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800587c:	4b69      	ldr	r3, [pc, #420]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a68      	ldr	r2, [pc, #416]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005886:	6093      	str	r3, [r2, #8]
 8005888:	4b66      	ldr	r3, [pc, #408]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	4964      	ldr	r1, [pc, #400]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800589e:	2301      	movs	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d017      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	4959      	ldr	r1, [pc, #356]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058cc:	d101      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d017      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ea:	4b4e      	ldr	r3, [pc, #312]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	494a      	ldr	r1, [pc, #296]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005908:	d101      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800590a:	2301      	movs	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005916:	2301      	movs	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005926:	2301      	movs	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 808b 	beq.w	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005938:	4b3a      	ldr	r3, [pc, #232]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	4a39      	ldr	r2, [pc, #228]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005942:	6413      	str	r3, [r2, #64]	@ 0x40
 8005944:	4b37      	ldr	r3, [pc, #220]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005950:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a34      	ldr	r2, [pc, #208]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800595a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595c:	f7fd fb58 	bl	8003010 <HAL_GetTick>
 8005960:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005964:	f7fd fb54 	bl	8003010 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	@ 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e357      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005976:	4b2c      	ldr	r3, [pc, #176]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005982:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d035      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	429a      	cmp	r2, r3
 800599e:	d02e      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a0:	4b20      	ldr	r3, [pc, #128]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059c2:	4a18      	ldr	r2, [pc, #96]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059c8:	4b16      	ldr	r3, [pc, #88]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d114      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fd fb1c 	bl	8003010 <HAL_GetTick>
 80059d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059da:	e00a      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059dc:	f7fd fb18 	bl	8003010 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e319      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ee      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a0a:	d111      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a18:	4b04      	ldr	r3, [pc, #16]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a1a:	400b      	ands	r3, r1
 8005a1c:	4901      	ldr	r1, [pc, #4]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
 8005a22:	e00b      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	0ffffcff 	.word	0x0ffffcff
 8005a30:	4baa      	ldr	r3, [pc, #680]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4aa9      	ldr	r2, [pc, #676]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a36:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a3a:	6093      	str	r3, [r2, #8]
 8005a3c:	4ba7      	ldr	r3, [pc, #668]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a48:	49a4      	ldr	r1, [pc, #656]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a5a:	4ba0      	ldr	r3, [pc, #640]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a60:	4a9e      	ldr	r2, [pc, #632]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	4999      	ldr	r1, [pc, #612]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a88:	4b94      	ldr	r3, [pc, #592]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a96:	4991      	ldr	r1, [pc, #580]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aaa:	4b8c      	ldr	r3, [pc, #560]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ab8:	4988      	ldr	r1, [pc, #544]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005acc:	4b83      	ldr	r3, [pc, #524]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ada:	4980      	ldr	r1, [pc, #512]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aee:	4b7b      	ldr	r3, [pc, #492]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afc:	4977      	ldr	r1, [pc, #476]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b10:	4b72      	ldr	r3, [pc, #456]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	f023 0203 	bic.w	r2, r3, #3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	496f      	ldr	r1, [pc, #444]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b32:	4b6a      	ldr	r3, [pc, #424]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b38:	f023 020c 	bic.w	r2, r3, #12
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b40:	4966      	ldr	r1, [pc, #408]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b54:	4b61      	ldr	r3, [pc, #388]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b62:	495e      	ldr	r1, [pc, #376]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b76:	4b59      	ldr	r3, [pc, #356]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b84:	4955      	ldr	r1, [pc, #340]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b98:	4b50      	ldr	r3, [pc, #320]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	494d      	ldr	r1, [pc, #308]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005bba:	4b48      	ldr	r3, [pc, #288]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	4944      	ldr	r1, [pc, #272]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bea:	493c      	ldr	r1, [pc, #240]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bfe:	4b37      	ldr	r3, [pc, #220]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0c:	4933      	ldr	r1, [pc, #204]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c20:	4b2e      	ldr	r3, [pc, #184]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c26:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c2e:	492b      	ldr	r1, [pc, #172]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d011      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c42:	4b26      	ldr	r3, [pc, #152]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c48:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c50:	4922      	ldr	r1, [pc, #136]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c60:	d101      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c72:	2301      	movs	r3, #1
 8005c74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c82:	4b16      	ldr	r3, [pc, #88]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c90:	4912      	ldr	r1, [pc, #72]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005caa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb4:	4909      	ldr	r1, [pc, #36]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d006      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80d9 	beq.w	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cd0:	4b02      	ldr	r3, [pc, #8]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a01      	ldr	r2, [pc, #4]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce2:	f7fd f995 	bl	8003010 <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cea:	f7fd f991 	bl	8003010 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b64      	cmp	r3, #100	@ 0x64
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e194      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f0      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d021      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11d      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d1c:	4b64      	ldr	r3, [pc, #400]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d2a:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d30:	0e1b      	lsrs	r3, r3, #24
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	019a      	lsls	r2, r3, #6
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	071b      	lsls	r3, r3, #28
 8005d50:	4957      	ldr	r1, [pc, #348]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02e      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d82:	d129      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d84:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8a:	0c1b      	lsrs	r3, r3, #16
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d92:	4b47      	ldr	r3, [pc, #284]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d98:	0f1b      	lsrs	r3, r3, #28
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	019a      	lsls	r2, r3, #6
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	431a      	orrs	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	071b      	lsls	r3, r3, #28
 8005db8:	493d      	ldr	r1, [pc, #244]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc6:	f023 021f 	bic.w	r2, r3, #31
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4937      	ldr	r1, [pc, #220]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005de4:	4b32      	ldr	r3, [pc, #200]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dea:	0e1b      	lsrs	r3, r3, #24
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005df2:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df8:	0f1b      	lsrs	r3, r3, #28
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	019a      	lsls	r2, r3, #6
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	061b      	lsls	r3, r3, #24
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	071b      	lsls	r3, r3, #28
 8005e18:	4925      	ldr	r1, [pc, #148]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d011      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	019a      	lsls	r2, r3, #6
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	061b      	lsls	r3, r3, #24
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	071b      	lsls	r3, r3, #28
 8005e48:	4919      	ldr	r1, [pc, #100]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e50:	4b17      	ldr	r3, [pc, #92]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a16      	ldr	r2, [pc, #88]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e5c:	f7fd f8d8 	bl	8003010 <HAL_GetTick>
 8005e60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e64:	f7fd f8d4 	bl	8003010 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	@ 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0d7      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e76:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	f040 80cd 	bne.w	8006024 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e8a:	4b09      	ldr	r3, [pc, #36]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a08      	ldr	r2, [pc, #32]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e96:	f7fd f8bb 	bl	8003010 <HAL_GetTick>
 8005e9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e9c:	e00a      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e9e:	f7fd f8b7 	bl	8003010 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b64      	cmp	r3, #100	@ 0x64
 8005eaa:	d903      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e0ba      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005eb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec0:	d0ed      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02e      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d12a      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eea:	4b51      	ldr	r3, [pc, #324]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efe:	0f1b      	lsrs	r3, r3, #28
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	019a      	lsls	r2, r3, #6
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	061b      	lsls	r3, r3, #24
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	071b      	lsls	r3, r3, #28
 8005f1e:	4944      	ldr	r1, [pc, #272]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f26:	4b42      	ldr	r3, [pc, #264]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f34:	3b01      	subs	r3, #1
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	493d      	ldr	r1, [pc, #244]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d022      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f54:	d11d      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f56:	4b36      	ldr	r3, [pc, #216]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5c:	0e1b      	lsrs	r3, r3, #24
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f64:	4b32      	ldr	r3, [pc, #200]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6a:	0f1b      	lsrs	r3, r3, #28
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	019a      	lsls	r2, r3, #6
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	071b      	lsls	r3, r3, #28
 8005f8a:	4929      	ldr	r1, [pc, #164]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d028      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f9e:	4b24      	ldr	r3, [pc, #144]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa4:	0e1b      	lsrs	r3, r3, #24
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fac:	4b20      	ldr	r3, [pc, #128]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	019a      	lsls	r2, r3, #6
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	071b      	lsls	r3, r3, #28
 8005fd2:	4917      	ldr	r1, [pc, #92]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fda:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	4911      	ldr	r1, [pc, #68]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ffc:	f7fd f808 	bl	8003010 <HAL_GetTick>
 8006000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006004:	f7fd f804 	bl	8003010 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	@ 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e007      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006016:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800601e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006022:	d1ef      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800

08006034 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e025      	b.n	8006094 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fc fd9d 	bl	8002b9c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f001 f9f5 	bl	8007464 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	461a      	mov	r2, r3
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	f001 fa49 	bl	800751c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80060ae:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d101      	bne.n	80060ba <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
 80060b8:	e021      	b.n	80060fe <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <HAL_SDRAM_SendCommand+0x2a>
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d118      	bne.n	80060f8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 fa8a 	bl	80075f0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d104      	bne.n	80060ee <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2205      	movs	r2, #5
 80060e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060ec:	e006      	b.n	80060fc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060f6:	e001      	b.n	80060fc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e049      	b.n	80061ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fc fc21 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f000 fd17 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e054      	b.n	8006276 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <HAL_TIM_Base_Start_IT+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d01d      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a22      	ldr	r2, [pc, #136]	@ (8006288 <HAL_TIM_Base_Start_IT+0xd4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a21      	ldr	r2, [pc, #132]	@ (800628c <HAL_TIM_Base_Start_IT+0xd8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1f      	ldr	r2, [pc, #124]	@ (8006290 <HAL_TIM_Base_Start_IT+0xdc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1e      	ldr	r2, [pc, #120]	@ (8006294 <HAL_TIM_Base_Start_IT+0xe0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <HAL_TIM_Base_Start_IT+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1b      	ldr	r2, [pc, #108]	@ (800629c <HAL_TIM_Base_Start_IT+0xe8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d115      	bne.n	8006260 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	4b19      	ldr	r3, [pc, #100]	@ (80062a0 <HAL_TIM_Base_Start_IT+0xec>)
 800623c:	4013      	ands	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b06      	cmp	r3, #6
 8006244:	d015      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0xbe>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624c:	d011      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	e008      	b.n	8006272 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e000      	b.n	8006274 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40010000 	.word	0x40010000
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40010400 	.word	0x40010400
 8006298:	40014000 	.word	0x40014000
 800629c:	40001800 	.word	0x40001800
 80062a0:	00010007 	.word	0x00010007

080062a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e049      	b.n	800634a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f841 	bl	8006352 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f000 fc48 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_TIM_PWM_Start+0x24>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e03c      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b04      	cmp	r3, #4
 8006390:	d109      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x3e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	e02f      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d109      	bne.n	80063c0 <HAL_TIM_PWM_Start+0x58>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e022      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b0c      	cmp	r3, #12
 80063c4:	d109      	bne.n	80063da <HAL_TIM_PWM_Start+0x72>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e015      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x8c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e008      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e092      	b.n	8006534 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xb6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800641c:	e023      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xc6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800642c:	e01b      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xd6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800643c:	e013      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0xe6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b10      	cmp	r3, #16
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xf6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800645c:	e003      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 ff26 	bl	80072c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a30      	ldr	r2, [pc, #192]	@ (800653c <HAL_TIM_PWM_Start+0x1d4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIM_PWM_Start+0x120>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2f      	ldr	r2, [pc, #188]	@ (8006540 <HAL_TIM_PWM_Start+0x1d8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d101      	bne.n	800648c <HAL_TIM_PWM_Start+0x124>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_TIM_PWM_Start+0x126>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a25      	ldr	r2, [pc, #148]	@ (800653c <HAL_TIM_PWM_Start+0x1d4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a22      	ldr	r2, [pc, #136]	@ (8006544 <HAL_TIM_PWM_Start+0x1dc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a20      	ldr	r2, [pc, #128]	@ (8006548 <HAL_TIM_PWM_Start+0x1e0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1f      	ldr	r2, [pc, #124]	@ (800654c <HAL_TIM_PWM_Start+0x1e4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a19      	ldr	r2, [pc, #100]	@ (8006540 <HAL_TIM_PWM_Start+0x1d8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <HAL_TIM_PWM_Start+0x1e8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x18a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a19      	ldr	r2, [pc, #100]	@ (8006554 <HAL_TIM_PWM_Start+0x1ec>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d115      	bne.n	800651e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	4b17      	ldr	r3, [pc, #92]	@ (8006558 <HAL_TIM_PWM_Start+0x1f0>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d015      	beq.n	8006530 <HAL_TIM_PWM_Start+0x1c8>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650a:	d011      	beq.n	8006530 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	e008      	b.n	8006530 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e000      	b.n	8006532 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40014000 	.word	0x40014000
 8006554:	40001800 	.word	0x40001800
 8006558:	00010007 	.word	0x00010007

0800655c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d020      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01b      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0202 	mvn.w	r2, #2
 8006590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fac8 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 faba 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 facb 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d020      	beq.n	800660c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0204 	mvn.w	r2, #4
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 faa2 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa94 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 faa5 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d020      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0208 	mvn.w	r2, #8
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa7c 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa6e 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fa7f 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01b      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2208      	movs	r2, #8
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa56 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 8006690:	e005      	b.n	800669e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa48 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fa59 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0201 	mvn.w	r2, #1
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fb fc78 	bl	8001fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fea3 	bl	800743c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fe9b 	bl	8007450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00c      	beq.n	800673e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa13 	bl	8006b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0220 	mvn.w	r2, #32
 800675a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fe63 	bl	8007428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006786:	2302      	movs	r3, #2
 8006788:	e0ff      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b14      	cmp	r3, #20
 8006796:	f200 80f0 	bhi.w	800697a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067f5 	.word	0x080067f5
 80067a4:	0800697b 	.word	0x0800697b
 80067a8:	0800697b 	.word	0x0800697b
 80067ac:	0800697b 	.word	0x0800697b
 80067b0:	08006835 	.word	0x08006835
 80067b4:	0800697b 	.word	0x0800697b
 80067b8:	0800697b 	.word	0x0800697b
 80067bc:	0800697b 	.word	0x0800697b
 80067c0:	08006877 	.word	0x08006877
 80067c4:	0800697b 	.word	0x0800697b
 80067c8:	0800697b 	.word	0x0800697b
 80067cc:	0800697b 	.word	0x0800697b
 80067d0:	080068b7 	.word	0x080068b7
 80067d4:	0800697b 	.word	0x0800697b
 80067d8:	0800697b 	.word	0x0800697b
 80067dc:	0800697b 	.word	0x0800697b
 80067e0:	080068f9 	.word	0x080068f9
 80067e4:	0800697b 	.word	0x0800697b
 80067e8:	0800697b 	.word	0x0800697b
 80067ec:	0800697b 	.word	0x0800697b
 80067f0:	08006939 	.word	0x08006939
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fa68 	bl	8006cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0208 	orr.w	r2, r2, #8
 800680e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0204 	bic.w	r2, r2, #4
 800681e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6999      	ldr	r1, [r3, #24]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	619a      	str	r2, [r3, #24]
      break;
 8006832:	e0a5      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 faba 	bl	8006db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800684e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6999      	ldr	r1, [r3, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	021a      	lsls	r2, r3, #8
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	619a      	str	r2, [r3, #24]
      break;
 8006874:	e084      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fb11 	bl	8006ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0208 	orr.w	r2, r2, #8
 8006890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0204 	bic.w	r2, r2, #4
 80068a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69d9      	ldr	r1, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	61da      	str	r2, [r3, #28]
      break;
 80068b4:	e064      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fb67 	bl	8006f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69d9      	ldr	r1, [r3, #28]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	021a      	lsls	r2, r3, #8
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	61da      	str	r2, [r3, #28]
      break;
 80068f6:	e043      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fb9e 	bl	8007040 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0208 	orr.w	r2, r2, #8
 8006912:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006936:	e023      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fbd0 	bl	80070e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	021a      	lsls	r2, r3, #8
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006978:	e002      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]
      break;
 800697e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop

08006994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIM_ConfigClockSource+0x1c>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e0b4      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x186>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	4b56      	ldr	r3, [pc, #344]	@ (8006b24 <HAL_TIM_ConfigClockSource+0x190>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e8:	d03e      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0xd4>
 80069ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ee:	f200 8087 	bhi.w	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f6:	f000 8086 	beq.w	8006b06 <HAL_TIM_ConfigClockSource+0x172>
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fe:	d87f      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b70      	cmp	r3, #112	@ 0x70
 8006a02:	d01a      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0xa6>
 8006a04:	2b70      	cmp	r3, #112	@ 0x70
 8006a06:	d87b      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b60      	cmp	r3, #96	@ 0x60
 8006a0a:	d050      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x11a>
 8006a0c:	2b60      	cmp	r3, #96	@ 0x60
 8006a0e:	d877      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a10:	2b50      	cmp	r3, #80	@ 0x50
 8006a12:	d03c      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0xfa>
 8006a14:	2b50      	cmp	r3, #80	@ 0x50
 8006a16:	d873      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a18:	2b40      	cmp	r3, #64	@ 0x40
 8006a1a:	d058      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x13a>
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	d86f      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a20:	2b30      	cmp	r3, #48	@ 0x30
 8006a22:	d064      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x15a>
 8006a24:	2b30      	cmp	r3, #48	@ 0x30
 8006a26:	d86b      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d060      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x15a>
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d867      	bhi.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d05c      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x15a>
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d05a      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x15a>
 8006a38:	e062      	b.n	8006b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a4a:	f000 fc19 	bl	8007280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	609a      	str	r2, [r3, #8]
      break;
 8006a66:	e04f      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a78:	f000 fc02 	bl	8007280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a8a:	609a      	str	r2, [r3, #8]
      break;
 8006a8c:	e03c      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f000 fb76 	bl	800718c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2150      	movs	r1, #80	@ 0x50
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fbcf 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006aac:	e02c      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aba:	461a      	mov	r2, r3
 8006abc:	f000 fb95 	bl	80071ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2160      	movs	r1, #96	@ 0x60
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fbbf 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006acc:	e01c      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 fb56 	bl	800718c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2140      	movs	r1, #64	@ 0x40
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fbaf 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006aec:	e00c      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f000 fba6 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006afe:	e003      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
      break;
 8006b04:	e000      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	fffeff88 	.word	0xfffeff88

08006b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a46      	ldr	r2, [pc, #280]	@ (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b96:	d00f      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a43      	ldr	r2, [pc, #268]	@ (8006ca8 <TIM_Base_SetConfig+0x130>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a42      	ldr	r2, [pc, #264]	@ (8006cac <TIM_Base_SetConfig+0x134>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a41      	ldr	r2, [pc, #260]	@ (8006cb0 <TIM_Base_SetConfig+0x138>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a40      	ldr	r2, [pc, #256]	@ (8006cb4 <TIM_Base_SetConfig+0x13c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a35      	ldr	r2, [pc, #212]	@ (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd8:	d027      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a32      	ldr	r2, [pc, #200]	@ (8006ca8 <TIM_Base_SetConfig+0x130>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d023      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a31      	ldr	r2, [pc, #196]	@ (8006cac <TIM_Base_SetConfig+0x134>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a30      	ldr	r2, [pc, #192]	@ (8006cb0 <TIM_Base_SetConfig+0x138>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb4 <TIM_Base_SetConfig+0x13c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb8 <TIM_Base_SetConfig+0x140>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a2d      	ldr	r2, [pc, #180]	@ (8006cbc <TIM_Base_SetConfig+0x144>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006cc0 <TIM_Base_SetConfig+0x148>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc4 <TIM_Base_SetConfig+0x14c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc8 <TIM_Base_SetConfig+0x150>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a29      	ldr	r2, [pc, #164]	@ (8006ccc <TIM_Base_SetConfig+0x154>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a10      	ldr	r2, [pc, #64]	@ (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a12      	ldr	r2, [pc, #72]	@ (8006cb4 <TIM_Base_SetConfig+0x13c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]
  }
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40001800 	.word	0x40001800
 8006cc8:	40001c00 	.word	0x40001c00
 8006ccc:	40002000 	.word	0x40002000

08006cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f023 0201 	bic.w	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8006da8 <TIM_OC1_SetConfig+0xd8>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 0302 	bic.w	r3, r3, #2
 8006d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a21      	ldr	r2, [pc, #132]	@ (8006dac <TIM_OC1_SetConfig+0xdc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC1_SetConfig+0x64>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a20      	ldr	r2, [pc, #128]	@ (8006db0 <TIM_OC1_SetConfig+0xe0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10c      	bne.n	8006d4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 0308 	bic.w	r3, r3, #8
 8006d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a16      	ldr	r2, [pc, #88]	@ (8006dac <TIM_OC1_SetConfig+0xdc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_OC1_SetConfig+0x8e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <TIM_OC1_SetConfig+0xe0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d111      	bne.n	8006d82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	621a      	str	r2, [r3, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	fffeff8f 	.word	0xfffeff8f
 8006dac:	40010000 	.word	0x40010000
 8006db0:	40010400 	.word	0x40010400

08006db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f023 0210 	bic.w	r2, r3, #16
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4b2e      	ldr	r3, [pc, #184]	@ (8006e98 <TIM_OC2_SetConfig+0xe4>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0320 	bic.w	r3, r3, #32
 8006dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a23      	ldr	r2, [pc, #140]	@ (8006e9c <TIM_OC2_SetConfig+0xe8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_OC2_SetConfig+0x68>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a22      	ldr	r2, [pc, #136]	@ (8006ea0 <TIM_OC2_SetConfig+0xec>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10d      	bne.n	8006e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	@ (8006e9c <TIM_OC2_SetConfig+0xe8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC2_SetConfig+0x94>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a17      	ldr	r2, [pc, #92]	@ (8006ea0 <TIM_OC2_SetConfig+0xec>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d113      	bne.n	8006e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	feff8fff 	.word	0xfeff8fff
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40010400 	.word	0x40010400

08006ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4b2d      	ldr	r3, [pc, #180]	@ (8006f84 <TIM_OC3_SetConfig+0xe0>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a22      	ldr	r2, [pc, #136]	@ (8006f88 <TIM_OC3_SetConfig+0xe4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC3_SetConfig+0x66>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a21      	ldr	r2, [pc, #132]	@ (8006f8c <TIM_OC3_SetConfig+0xe8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10d      	bne.n	8006f26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a17      	ldr	r2, [pc, #92]	@ (8006f88 <TIM_OC3_SetConfig+0xe4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_OC3_SetConfig+0x92>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <TIM_OC3_SetConfig+0xe8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d113      	bne.n	8006f5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	621a      	str	r2, [r3, #32]
}
 8006f78:	bf00      	nop
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	fffeff8f 	.word	0xfffeff8f
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400

08006f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4b1e      	ldr	r3, [pc, #120]	@ (8007034 <TIM_OC4_SetConfig+0xa4>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	031b      	lsls	r3, r3, #12
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a13      	ldr	r2, [pc, #76]	@ (8007038 <TIM_OC4_SetConfig+0xa8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_OC4_SetConfig+0x68>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a12      	ldr	r2, [pc, #72]	@ (800703c <TIM_OC4_SetConfig+0xac>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d109      	bne.n	800700c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	019b      	lsls	r3, r3, #6
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	feff8fff 	.word	0xfeff8fff
 8007038:	40010000 	.word	0x40010000
 800703c:	40010400 	.word	0x40010400

08007040 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <TIM_OC5_SetConfig+0x98>)
 800706c:	4013      	ands	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a12      	ldr	r2, [pc, #72]	@ (80070dc <TIM_OC5_SetConfig+0x9c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC5_SetConfig+0x5e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a11      	ldr	r2, [pc, #68]	@ (80070e0 <TIM_OC5_SetConfig+0xa0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d109      	bne.n	80070b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	fffeff8f 	.word	0xfffeff8f
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40010400 	.word	0x40010400

080070e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4b1c      	ldr	r3, [pc, #112]	@ (8007180 <TIM_OC6_SetConfig+0x9c>)
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	051b      	lsls	r3, r3, #20
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a13      	ldr	r2, [pc, #76]	@ (8007184 <TIM_OC6_SetConfig+0xa0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_OC6_SetConfig+0x60>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a12      	ldr	r2, [pc, #72]	@ (8007188 <TIM_OC6_SetConfig+0xa4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d109      	bne.n	8007158 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800714a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	029b      	lsls	r3, r3, #10
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	feff8fff 	.word	0xfeff8fff
 8007184:	40010000 	.word	0x40010000
 8007188:	40010400 	.word	0x40010400

0800718c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 030a 	bic.w	r3, r3, #10
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 0210 	bic.w	r2, r3, #16
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	f043 0307 	orr.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	609a      	str	r2, [r3, #8]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	021a      	lsls	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e06d      	b.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a30      	ldr	r2, [pc, #192]	@ (800740c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2f      	ldr	r2, [pc, #188]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d108      	bne.n	800736a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800735e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007370:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a20      	ldr	r2, [pc, #128]	@ (800740c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d022      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007396:	d01d      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1d      	ldr	r2, [pc, #116]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1a      	ldr	r2, [pc, #104]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a16      	ldr	r2, [pc, #88]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a15      	ldr	r2, [pc, #84]	@ (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10c      	bne.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40000c00 	.word	0x40000c00
 8007420:	40014000 	.word	0x40014000
 8007424:	40001800 	.word	0x40001800

08007428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d121      	bne.n	80074ba <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b27      	ldr	r3, [pc, #156]	@ (8007518 <FMC_SDRAM_Init+0xb4>)
 800747c:	4013      	ands	r3, r2
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	6851      	ldr	r1, [r2, #4]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	6892      	ldr	r2, [r2, #8]
 8007486:	4311      	orrs	r1, r2
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68d2      	ldr	r2, [r2, #12]
 800748c:	4311      	orrs	r1, r2
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	6912      	ldr	r2, [r2, #16]
 8007492:	4311      	orrs	r1, r2
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	6952      	ldr	r2, [r2, #20]
 8007498:	4311      	orrs	r1, r2
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	6992      	ldr	r2, [r2, #24]
 800749e:	4311      	orrs	r1, r2
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	69d2      	ldr	r2, [r2, #28]
 80074a4:	4311      	orrs	r1, r2
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	6a12      	ldr	r2, [r2, #32]
 80074aa:	4311      	orrs	r1, r2
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074b0:	430a      	orrs	r2, r1
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e026      	b.n	8007508 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	69d9      	ldr	r1, [r3, #28]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	4319      	orrs	r1, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d0:	430b      	orrs	r3, r1
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <FMC_SDRAM_Init+0xb4>)
 80074de:	4013      	ands	r3, r2
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	6851      	ldr	r1, [r2, #4]
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	6892      	ldr	r2, [r2, #8]
 80074e8:	4311      	orrs	r1, r2
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	68d2      	ldr	r2, [r2, #12]
 80074ee:	4311      	orrs	r1, r2
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	6912      	ldr	r2, [r2, #16]
 80074f4:	4311      	orrs	r1, r2
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	6952      	ldr	r2, [r2, #20]
 80074fa:	4311      	orrs	r1, r2
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	6992      	ldr	r2, [r2, #24]
 8007500:	430a      	orrs	r2, r1
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	ffff8000 	.word	0xffff8000

0800751c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d128      	bne.n	8007580 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	1e59      	subs	r1, r3, #1
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	3b01      	subs	r3, #1
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4319      	orrs	r1, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	3b01      	subs	r3, #1
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	4319      	orrs	r1, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	3b01      	subs	r3, #1
 8007556:	031b      	lsls	r3, r3, #12
 8007558:	4319      	orrs	r1, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	3b01      	subs	r3, #1
 8007560:	041b      	lsls	r3, r3, #16
 8007562:	4319      	orrs	r1, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	3b01      	subs	r3, #1
 800756a:	051b      	lsls	r3, r3, #20
 800756c:	4319      	orrs	r1, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	3b01      	subs	r3, #1
 8007574:	061b      	lsls	r3, r3, #24
 8007576:	430b      	orrs	r3, r1
 8007578:	431a      	orrs	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	609a      	str	r2, [r3, #8]
 800757e:	e02d      	b.n	80075dc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	4b19      	ldr	r3, [pc, #100]	@ (80075ec <FMC_SDRAM_Timing_Init+0xd0>)
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	68d2      	ldr	r2, [r2, #12]
 800758c:	3a01      	subs	r2, #1
 800758e:	0311      	lsls	r1, r2, #12
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	6952      	ldr	r2, [r2, #20]
 8007594:	3a01      	subs	r2, #1
 8007596:	0512      	lsls	r2, r2, #20
 8007598:	430a      	orrs	r2, r1
 800759a:	431a      	orrs	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	1e59      	subs	r1, r3, #1
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	4319      	orrs	r1, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	3b01      	subs	r3, #1
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	4319      	orrs	r1, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	4319      	orrs	r1, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	430b      	orrs	r3, r1
 80075d6:	431a      	orrs	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	ff0f0fff 	.word	0xff0f0fff

080075f0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	4b0c      	ldr	r3, [pc, #48]	@ (8007634 <FMC_SDRAM_SendCommand+0x44>)
 8007602:	4013      	ands	r3, r2
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	6811      	ldr	r1, [r2, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	6852      	ldr	r2, [r2, #4]
 800760c:	4311      	orrs	r1, r2
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	6892      	ldr	r2, [r2, #8]
 8007612:	3a01      	subs	r2, #1
 8007614:	0152      	lsls	r2, r2, #5
 8007616:	4311      	orrs	r1, r2
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	68d2      	ldr	r2, [r2, #12]
 800761c:	0252      	lsls	r2, r2, #9
 800761e:	430a      	orrs	r2, r1
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	ffc00000 	.word	0xffc00000

08007638 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764a:	2b84      	cmp	r3, #132	@ 0x84
 800764c:	d005      	beq.n	800765a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800764e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	3303      	adds	r3, #3
 8007658:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800766e:	f3ef 8305 	mrs	r3, IPSR
 8007672:	607b      	str	r3, [r7, #4]
  return(result);
 8007674:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2301      	movne	r3, #1
 800767c:	2300      	moveq	r3, #0
 800767e:	b2db      	uxtb	r3, r3
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007690:	f001 f97e 	bl	8008990 <vTaskStartScheduler>
  
  return osOK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	bd80      	pop	{r7, pc}

0800769a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800769a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769c:	b089      	sub	sp, #36	@ 0x24
 800769e:	af04      	add	r7, sp, #16
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d020      	beq.n	80076ee <osThreadCreate+0x54>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01c      	beq.n	80076ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685c      	ldr	r4, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691e      	ldr	r6, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff ffb6 	bl	8007638 <makeFreeRtosPriority>
 80076cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076d6:	9202      	str	r2, [sp, #8]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	9100      	str	r1, [sp, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	4632      	mov	r2, r6
 80076e0:	4629      	mov	r1, r5
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 ff64 	bl	80085b0 <xTaskCreateStatic>
 80076e8:	4603      	mov	r3, r0
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	e01c      	b.n	8007728 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685c      	ldr	r4, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff ff98 	bl	8007638 <makeFreeRtosPriority>
 8007708:	4602      	mov	r2, r0
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	9200      	str	r2, [sp, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	4632      	mov	r2, r6
 8007716:	4629      	mov	r1, r5
 8007718:	4620      	mov	r0, r4
 800771a:	f000 ffaf 	bl	800867c <xTaskCreate>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d001      	beq.n	8007728 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	e000      	b.n	800772a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007732 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <osDelay+0x16>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e000      	b.n	800774a <osDelay+0x18>
 8007748:	2301      	movs	r3, #1
 800774a:	4618      	mov	r0, r3
 800774c:	f001 f8e8 	bl	8008920 <vTaskDelay>
  
  return osOK;
 8007750:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af02      	add	r7, sp, #8
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00f      	beq.n	800778c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10a      	bne.n	8007788 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2203      	movs	r2, #3
 8007778:	9200      	str	r2, [sp, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	2100      	movs	r1, #0
 800777e:	2001      	movs	r0, #1
 8007780:	f000 f9c2 	bl	8007b08 <xQueueGenericCreateStatic>
 8007784:	4603      	mov	r3, r0
 8007786:	e016      	b.n	80077b6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	e014      	b.n	80077b6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d110      	bne.n	80077b4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007792:	2203      	movs	r2, #3
 8007794:	2100      	movs	r1, #0
 8007796:	2001      	movs	r0, #1
 8007798:	f000 fa3d 	bl	8007c16 <xQueueGenericCreate>
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <osSemaphoreCreate+0x56>
 80077a4:	2300      	movs	r3, #0
 80077a6:	2200      	movs	r2, #0
 80077a8:	2100      	movs	r1, #0
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fa96 	bl	8007cdc <xQueueGenericSend>
      return sema;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	e000      	b.n	80077b6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80077b4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80077d4:	2380      	movs	r3, #128	@ 0x80
 80077d6:	e03a      	b.n	800784e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e2:	d103      	bne.n	80077ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e009      	b.n	8007800 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <osSemaphoreWait+0x40>
      ticks = 1;
 80077fc:	2301      	movs	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007800:	f7ff ff32 	bl	8007668 <inHandlerMode>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d017      	beq.n	800783a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	461a      	mov	r2, r3
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fd1c 	bl	8008250 <xQueueReceiveFromISR>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d001      	beq.n	8007822 <osSemaphoreWait+0x62>
      return osErrorOS;
 800781e:	23ff      	movs	r3, #255	@ 0xff
 8007820:	e015      	b.n	800784e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d011      	beq.n	800784c <osSemaphoreWait+0x8c>
 8007828:	4b0b      	ldr	r3, [pc, #44]	@ (8007858 <osSemaphoreWait+0x98>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	e008      	b.n	800784c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800783a:	68f9      	ldr	r1, [r7, #12]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbef 	bl	8008020 <xQueueSemaphoreTake>
 8007842:	4603      	mov	r3, r0
 8007844:	2b01      	cmp	r3, #1
 8007846:	d001      	beq.n	800784c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007848:	23ff      	movs	r3, #255	@ 0xff
 800784a:	e000      	b.n	800784e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800786c:	f7ff fefc 	bl	8007668 <inHandlerMode>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d016      	beq.n	80078a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fb37 	bl	8007ef0 <xQueueGiveFromISR>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d001      	beq.n	800788c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007888:	23ff      	movs	r3, #255	@ 0xff
 800788a:	e017      	b.n	80078bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d013      	beq.n	80078ba <osSemaphoreRelease+0x5e>
 8007892:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <osSemaphoreRelease+0x68>)
 8007894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	e00a      	b.n	80078ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa16 	bl	8007cdc <xQueueGenericSend>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80078b6:	23ff      	movs	r3, #255	@ 0xff
 80078b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f103 0208 	add.w	r2, r3, #8
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f04f 32ff 	mov.w	r2, #4294967295
 80078e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f103 0208 	add.w	r2, r3, #8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f103 0208 	add.w	r2, r3, #8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d103      	bne.n	800798a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e00c      	b.n	80079a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3308      	adds	r3, #8
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e002      	b.n	8007998 <vListInsert+0x2e>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d2f6      	bcs.n	8007992 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	601a      	str	r2, [r3, #0]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6892      	ldr	r2, [r2, #8]
 80079f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6852      	ldr	r2, [r2, #4]
 80079fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d103      	bne.n	8007a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	1e5a      	subs	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10d      	bne.n	8007a60 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	b672      	cpsid	i
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	b662      	cpsie	i
 8007a58:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007a60:	f001 ff1c 	bl	800989c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	68f9      	ldr	r1, [r7, #12]
 8007a6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	441a      	add	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	3b01      	subs	r3, #1
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	441a      	add	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	22ff      	movs	r2, #255	@ 0xff
 8007aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	22ff      	movs	r2, #255	@ 0xff
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d114      	bne.n	8007ae0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01a      	beq.n	8007af4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 f9ca 	bl	8008e5c <xTaskRemoveFromEventList>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d012      	beq.n	8007af4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ace:	4b0d      	ldr	r3, [pc, #52]	@ (8007b04 <xQueueGenericReset+0xd4>)
 8007ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	e009      	b.n	8007af4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff feef 	bl	80078c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3324      	adds	r3, #36	@ 0x24
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff feea 	bl	80078c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007af4:	f001 ff08 	bl	8009908 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007af8:	2301      	movs	r3, #1
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08e      	sub	sp, #56	@ 0x38
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10d      	bne.n	8007b38 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b20:	b672      	cpsid	i
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	b662      	cpsie	i
 8007b30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10d      	bne.n	8007b5a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	b672      	cpsid	i
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	b662      	cpsie	i
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	e7fd      	b.n	8007b56 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <xQueueGenericCreateStatic+0x5e>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <xQueueGenericCreateStatic+0x62>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueGenericCreateStatic+0x64>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10d      	bne.n	8007b8c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	623b      	str	r3, [r7, #32]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d102      	bne.n	8007b98 <xQueueGenericCreateStatic+0x90>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <xQueueGenericCreateStatic+0x94>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <xQueueGenericCreateStatic+0x96>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10d      	bne.n	8007bbe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	61fb      	str	r3, [r7, #28]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bbe:	2348      	movs	r3, #72	@ 0x48
 8007bc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b48      	cmp	r3, #72	@ 0x48
 8007bc6:	d00d      	beq.n	8007be4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	61bb      	str	r3, [r7, #24]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007be4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bf8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f848 	bl	8007c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3730      	adds	r7, #48	@ 0x30
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b08a      	sub	sp, #40	@ 0x28
 8007c1a:	af02      	add	r7, sp, #8
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10d      	bne.n	8007c46 <xQueueGenericCreate+0x30>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	b672      	cpsid	i
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	b662      	cpsie	i
 8007c3e:	613b      	str	r3, [r7, #16]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d102      	bne.n	8007c52 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e004      	b.n	8007c5c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	fb02 f303 	mul.w	r3, r2, r3
 8007c5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	3348      	adds	r3, #72	@ 0x48
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 ff49 	bl	8009af8 <pvPortMalloc>
 8007c66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	3348      	adds	r3, #72	@ 0x48
 8007c76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c80:	79fa      	ldrb	r2, [r7, #7]
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	4613      	mov	r3, r2
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	68b9      	ldr	r1, [r7, #8]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f805 	bl	8007c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c92:	69bb      	ldr	r3, [r7, #24]
	}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3720      	adds	r7, #32
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cca:	2101      	movs	r1, #1
 8007ccc:	69b8      	ldr	r0, [r7, #24]
 8007cce:	f7ff feaf 	bl	8007a30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	@ 0x38
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cea:	2300      	movs	r3, #0
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <xQueueGenericSend+0x38>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	b672      	cpsid	i
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	b662      	cpsie	i
 8007d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <xQueueGenericSend+0x46>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <xQueueGenericSend+0x4a>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <xQueueGenericSend+0x4c>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10d      	bne.n	8007d48 <xQueueGenericSend+0x6c>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d30:	b672      	cpsid	i
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	b662      	cpsie	i
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d42:	bf00      	nop
 8007d44:	bf00      	nop
 8007d46:	e7fd      	b.n	8007d44 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d103      	bne.n	8007d56 <xQueueGenericSend+0x7a>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <xQueueGenericSend+0x7e>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <xQueueGenericSend+0x80>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10d      	bne.n	8007d7c <xQueueGenericSend+0xa0>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d64:	b672      	cpsid	i
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	b662      	cpsie	i
 8007d74:	623b      	str	r3, [r7, #32]
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d7c:	f001 fa3c 	bl	80091f8 <xTaskGetSchedulerState>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <xQueueGenericSend+0xb0>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <xQueueGenericSend+0xb4>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <xQueueGenericSend+0xb6>
 8007d90:	2300      	movs	r3, #0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10d      	bne.n	8007db2 <xQueueGenericSend+0xd6>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9a:	b672      	cpsid	i
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	b662      	cpsie	i
 8007daa:	61fb      	str	r3, [r7, #28]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007db2:	f001 fd73 	bl	800989c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d302      	bcc.n	8007dc8 <xQueueGenericSend+0xec>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d129      	bne.n	8007e1c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dce:	f000 fadf 	bl	8008390 <prvCopyDataToQueue>
 8007dd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d010      	beq.n	8007dfe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	3324      	adds	r3, #36	@ 0x24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 f83b 	bl	8008e5c <xTaskRemoveFromEventList>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d013      	beq.n	8007e14 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dec:	4b3f      	ldr	r3, [pc, #252]	@ (8007eec <xQueueGenericSend+0x210>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	e00a      	b.n	8007e14 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e04:	4b39      	ldr	r3, [pc, #228]	@ (8007eec <xQueueGenericSend+0x210>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e14:	f001 fd78 	bl	8009908 <vPortExitCritical>
				return pdPASS;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e063      	b.n	8007ee4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e22:	f001 fd71 	bl	8009908 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e05c      	b.n	8007ee4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e30:	f107 0314 	add.w	r3, r7, #20
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 f877 	bl	8008f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e3e:	f001 fd63 	bl	8009908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e42:	f000 fe13 	bl	8008a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e46:	f001 fd29 	bl	800989c <vPortEnterCritical>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e50:	b25b      	sxtb	r3, r3
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d103      	bne.n	8007e60 <xQueueGenericSend+0x184>
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d103      	bne.n	8007e76 <xQueueGenericSend+0x19a>
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e76:	f001 fd47 	bl	8009908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e7a:	1d3a      	adds	r2, r7, #4
 8007e7c:	f107 0314 	add.w	r3, r7, #20
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 f866 	bl	8008f54 <xTaskCheckForTimeOut>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d124      	bne.n	8007ed8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e90:	f000 fb76 	bl	8008580 <prvIsQueueFull>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d018      	beq.n	8007ecc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	3310      	adds	r3, #16
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ffb2 	bl	8008e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eaa:	f000 fb01 	bl	80084b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007eae:	f000 fdeb 	bl	8008a88 <xTaskResumeAll>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f47f af7c 	bne.w	8007db2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007eba:	4b0c      	ldr	r3, [pc, #48]	@ (8007eec <xQueueGenericSend+0x210>)
 8007ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	e772      	b.n	8007db2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ece:	f000 faef 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ed2:	f000 fdd9 	bl	8008a88 <xTaskResumeAll>
 8007ed6:	e76c      	b.n	8007db2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eda:	f000 fae9 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ede:	f000 fdd3 	bl	8008a88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ee2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3738      	adds	r7, #56	@ 0x38
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08e      	sub	sp, #56	@ 0x38
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	b672      	cpsid	i
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	b662      	cpsie	i
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00d      	beq.n	8007f44 <xQueueGiveFromISR+0x54>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	b672      	cpsid	i
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	b662      	cpsie	i
 8007f3c:	61fb      	str	r3, [r7, #28]
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	e7fd      	b.n	8007f40 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <xQueueGiveFromISR+0x64>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <xQueueGiveFromISR+0x68>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <xQueueGiveFromISR+0x6a>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10d      	bne.n	8007f7a <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	b672      	cpsid	i
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	b662      	cpsie	i
 8007f72:	61bb      	str	r3, [r7, #24]
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	e7fd      	b.n	8007f76 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f7a:	f001 fd77 	bl	8009a6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	617a      	str	r2, [r7, #20]
 8007f98:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d22b      	bcs.n	8008006 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d112      	bne.n	8007ff0 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d016      	beq.n	8008000 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	3324      	adds	r3, #36	@ 0x24
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 ff40 	bl	8008e5c <xTaskRemoveFromEventList>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e007      	b.n	8008000 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	b25a      	sxtb	r2, r3
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008000:	2301      	movs	r3, #1
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
 8008004:	e001      	b.n	800800a <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008006:	2300      	movs	r3, #0
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008014:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008018:	4618      	mov	r0, r3
 800801a:	3738      	adds	r7, #56	@ 0x38
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08e      	sub	sp, #56	@ 0x38
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008032:	2300      	movs	r3, #0
 8008034:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10d      	bne.n	8008058 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	b672      	cpsid	i
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	b662      	cpsie	i
 8008050:	623b      	str	r3, [r7, #32]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00d      	beq.n	800807c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	b672      	cpsid	i
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	b662      	cpsie	i
 8008074:	61fb      	str	r3, [r7, #28]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800807c:	f001 f8bc 	bl	80091f8 <xTaskGetSchedulerState>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <xQueueSemaphoreTake+0x6c>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <xQueueSemaphoreTake+0x70>
 800808c:	2301      	movs	r3, #1
 800808e:	e000      	b.n	8008092 <xQueueSemaphoreTake+0x72>
 8008090:	2300      	movs	r3, #0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10d      	bne.n	80080b2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	b672      	cpsid	i
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	b662      	cpsie	i
 80080aa:	61bb      	str	r3, [r7, #24]
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	e7fd      	b.n	80080ae <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080b2:	f001 fbf3 	bl	800989c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d024      	beq.n	800810c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c4:	1e5a      	subs	r2, r3, #1
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d104      	bne.n	80080dc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080d2:	f001 fa5b 	bl	800958c <pvTaskIncrementMutexHeldCount>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00f      	beq.n	8008104 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	3310      	adds	r3, #16
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 feb7 	bl	8008e5c <xTaskRemoveFromEventList>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080f4:	4b55      	ldr	r3, [pc, #340]	@ (800824c <xQueueSemaphoreTake+0x22c>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008104:	f001 fc00 	bl	8009908 <vPortExitCritical>
				return pdPASS;
 8008108:	2301      	movs	r3, #1
 800810a:	e09a      	b.n	8008242 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d114      	bne.n	800813c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	b672      	cpsid	i
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	b662      	cpsie	i
 800812c:	617b      	str	r3, [r7, #20]
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008134:	f001 fbe8 	bl	8009908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008138:	2300      	movs	r3, #0
 800813a:	e082      	b.n	8008242 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	4618      	mov	r0, r3
 8008148:	f000 feee 	bl	8008f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008150:	f001 fbda 	bl	8009908 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008154:	f000 fc8a 	bl	8008a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008158:	f001 fba0 	bl	800989c <vPortEnterCritical>
 800815c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008162:	b25b      	sxtb	r3, r3
 8008164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008168:	d103      	bne.n	8008172 <xQueueSemaphoreTake+0x152>
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008178:	b25b      	sxtb	r3, r3
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817e:	d103      	bne.n	8008188 <xQueueSemaphoreTake+0x168>
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008188:	f001 fbbe 	bl	8009908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800818c:	463a      	mov	r2, r7
 800818e:	f107 030c 	add.w	r3, r7, #12
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fedd 	bl	8008f54 <xTaskCheckForTimeOut>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d132      	bne.n	8008206 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081a2:	f000 f9d7 	bl	8008554 <prvIsQueueEmpty>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d026      	beq.n	80081fa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80081b4:	f001 fb72 	bl	800989c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 f839 	bl	8009234 <xTaskPriorityInherit>
 80081c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80081c4:	f001 fba0 	bl	8009908 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ca:	3324      	adds	r3, #36	@ 0x24
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fe1b 	bl	8008e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081d8:	f000 f96a 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081dc:	f000 fc54 	bl	8008a88 <xTaskResumeAll>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f47f af65 	bne.w	80080b2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80081e8:	4b18      	ldr	r3, [pc, #96]	@ (800824c <xQueueSemaphoreTake+0x22c>)
 80081ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	e75b      	b.n	80080b2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081fc:	f000 f958 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008200:	f000 fc42 	bl	8008a88 <xTaskResumeAll>
 8008204:	e755      	b.n	80080b2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008208:	f000 f952 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800820c:	f000 fc3c 	bl	8008a88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008212:	f000 f99f 	bl	8008554 <prvIsQueueEmpty>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f43f af4a 	beq.w	80080b2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00d      	beq.n	8008240 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008224:	f001 fb3a 	bl	800989c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800822a:	f000 f899 	bl	8008360 <prvGetDisinheritPriorityAfterTimeout>
 800822e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008236:	4618      	mov	r0, r3
 8008238:	f001 f908 	bl	800944c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800823c:	f001 fb64 	bl	8009908 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008242:	4618      	mov	r0, r3
 8008244:	3738      	adds	r7, #56	@ 0x38
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	e000ed04 	.word	0xe000ed04

08008250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08e      	sub	sp, #56	@ 0x38
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10d      	bne.n	8008282 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	623b      	str	r3, [r7, #32]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <xQueueReceiveFromISR+0x40>
 8008288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <xQueueReceiveFromISR+0x44>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <xQueueReceiveFromISR+0x46>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	61fb      	str	r3, [r7, #28]
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	e7fd      	b.n	80082b2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082b6:	f001 fbd9 	bl	8009a6c <vPortValidateInterruptPriority>
	__asm volatile
 80082ba:	f3ef 8211 	mrs	r2, BASEPRI
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	b672      	cpsid	i
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	b662      	cpsie	i
 80082d2:	61ba      	str	r2, [r7, #24]
 80082d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80082d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d02f      	beq.n	8008346 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082f4:	f000 f8b6 	bl	8008464 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	1e5a      	subs	r2, r3, #1
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008300:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d112      	bne.n	8008330 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d016      	beq.n	8008340 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	3310      	adds	r3, #16
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fda0 	bl	8008e5c <xTaskRemoveFromEventList>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00e      	beq.n	8008340 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e007      	b.n	8008340 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008334:	3301      	adds	r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	b25a      	sxtb	r2, r3
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008340:	2301      	movs	r3, #1
 8008342:	637b      	str	r3, [r7, #52]	@ 0x34
 8008344:	e001      	b.n	800834a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8008346:	2300      	movs	r3, #0
 8008348:	637b      	str	r3, [r7, #52]	@ 0x34
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f383 8811 	msr	BASEPRI, r3
}
 8008354:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008358:	4618      	mov	r0, r3
 800835a:	3738      	adds	r7, #56	@ 0x38
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f1c3 0307 	rsb	r3, r3, #7
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e001      	b.n	8008382 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008382:	68fb      	ldr	r3, [r7, #12]
	}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d14d      	bne.n	8008452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ffba 	bl	8009334 <xTaskPriorityDisinherit>
 80083c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	609a      	str	r2, [r3, #8]
 80083c8:	e043      	b.n	8008452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d119      	bne.n	8008404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6858      	ldr	r0, [r3, #4]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d8:	461a      	mov	r2, r3
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	f025 fedd 	bl	802e19a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d32b      	bcc.n	8008452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]
 8008402:	e026      	b.n	8008452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68d8      	ldr	r0, [r3, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	461a      	mov	r2, r3
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	f025 fec3 	bl	802e19a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841c:	425b      	negs	r3, r3
 800841e:	441a      	add	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d207      	bcs.n	8008440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	425b      	negs	r3, r3
 800843a:	441a      	add	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d105      	bne.n	8008452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	3b01      	subs	r3, #1
 8008450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800845a:	697b      	ldr	r3, [r7, #20]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d018      	beq.n	80084a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847e:	441a      	add	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	429a      	cmp	r2, r3
 800848e:	d303      	bcc.n	8008498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68d9      	ldr	r1, [r3, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a0:	461a      	mov	r2, r3
 80084a2:	6838      	ldr	r0, [r7, #0]
 80084a4:	f025 fe79 	bl	802e19a <memcpy>
	}
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084b8:	f001 f9f0 	bl	800989c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c4:	e011      	b.n	80084ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d012      	beq.n	80084f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3324      	adds	r3, #36	@ 0x24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fcc2 	bl	8008e5c <xTaskRemoveFromEventList>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084de:	f000 fda1 	bl	8009024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dce9      	bgt.n	80084c6 <prvUnlockQueue+0x16>
 80084f2:	e000      	b.n	80084f6 <prvUnlockQueue+0x46>
					break;
 80084f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	22ff      	movs	r2, #255	@ 0xff
 80084fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084fe:	f001 fa03 	bl	8009908 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008502:	f001 f9cb 	bl	800989c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800850c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800850e:	e011      	b.n	8008534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d012      	beq.n	800853e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3310      	adds	r3, #16
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fc9d 	bl	8008e5c <xTaskRemoveFromEventList>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008528:	f000 fd7c 	bl	8009024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	3b01      	subs	r3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008538:	2b00      	cmp	r3, #0
 800853a:	dce9      	bgt.n	8008510 <prvUnlockQueue+0x60>
 800853c:	e000      	b.n	8008540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800853e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	22ff      	movs	r2, #255	@ 0xff
 8008544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008548:	f001 f9de 	bl	8009908 <vPortExitCritical>
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800855c:	f001 f99e 	bl	800989c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	e001      	b.n	8008572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008572:	f001 f9c9 	bl	8009908 <vPortExitCritical>

	return xReturn;
 8008576:	68fb      	ldr	r3, [r7, #12]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008588:	f001 f988 	bl	800989c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008594:	429a      	cmp	r2, r3
 8008596:	d102      	bne.n	800859e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	e001      	b.n	80085a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800859e:	2300      	movs	r3, #0
 80085a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085a2:	f001 f9b1 	bl	8009908 <vPortExitCritical>

	return xReturn;
 80085a6:	68fb      	ldr	r3, [r7, #12]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	@ 0x38
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10d      	bne.n	80085e0 <xTaskCreateStatic+0x30>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	b672      	cpsid	i
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	b662      	cpsie	i
 80085d8:	623b      	str	r3, [r7, #32]
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	e7fd      	b.n	80085dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10d      	bne.n	8008602 <xTaskCreateStatic+0x52>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	b672      	cpsid	i
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	b662      	cpsie	i
 80085fa:	61fb      	str	r3, [r7, #28]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008602:	23a0      	movs	r3, #160	@ 0xa0
 8008604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2ba0      	cmp	r3, #160	@ 0xa0
 800860a:	d00d      	beq.n	8008628 <xTaskCreateStatic+0x78>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008610:	b672      	cpsid	i
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	b662      	cpsie	i
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	e7fd      	b.n	8008624 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01e      	beq.n	800866e <xTaskCreateStatic+0xbe>
 8008630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01b      	beq.n	800866e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800863e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	2202      	movs	r2, #2
 8008644:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008648:	2300      	movs	r3, #0
 800864a:	9303      	str	r3, [sp, #12]
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	9302      	str	r3, [sp, #8]
 8008650:	f107 0314 	add.w	r3, r7, #20
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f851 	bl	8008708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008668:	f000 f8f0 	bl	800884c <prvAddNewTaskToReadyList>
 800866c:	e001      	b.n	8008672 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008672:	697b      	ldr	r3, [r7, #20]
	}
 8008674:	4618      	mov	r0, r3
 8008676:	3728      	adds	r7, #40	@ 0x28
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08c      	sub	sp, #48	@ 0x30
 8008680:	af04      	add	r7, sp, #16
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4618      	mov	r0, r3
 8008692:	f001 fa31 	bl	8009af8 <pvPortMalloc>
 8008696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800869e:	20a0      	movs	r0, #160	@ 0xa0
 80086a0:	f001 fa2a 	bl	8009af8 <pvPortMalloc>
 80086a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80086b2:	e005      	b.n	80086c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f001 faed 	bl	8009c94 <vPortFree>
 80086ba:	e001      	b.n	80086c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d017      	beq.n	80086f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086ce:	88fa      	ldrh	r2, [r7, #6]
 80086d0:	2300      	movs	r3, #0
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f80f 	bl	8008708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ea:	69f8      	ldr	r0, [r7, #28]
 80086ec:	f000 f8ae 	bl	800884c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086f0:	2301      	movs	r3, #1
 80086f2:	61bb      	str	r3, [r7, #24]
 80086f4:	e002      	b.n	80086fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295
 80086fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086fc:	69bb      	ldr	r3, [r7, #24]
	}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008720:	440b      	add	r3, r1
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	f023 0307 	bic.w	r3, r3, #7
 800872e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00d      	beq.n	8008756 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	b672      	cpsid	i
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	b662      	cpsie	i
 800874e:	617b      	str	r3, [r7, #20]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01f      	beq.n	800879c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800875c:	2300      	movs	r3, #0
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	e012      	b.n	8008788 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	7819      	ldrb	r1, [r3, #0]
 800876a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	3334      	adds	r3, #52	@ 0x34
 8008772:	460a      	mov	r2, r1
 8008774:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d006      	beq.n	8008790 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	d9e9      	bls.n	8008762 <prvInitialiseNewTask+0x5a>
 800878e:	e000      	b.n	8008792 <prvInitialiseNewTask+0x8a>
			{
				break;
 8008790:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800879a:	e003      	b.n	80087a4 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a6:	2b06      	cmp	r3, #6
 80087a8:	d901      	bls.n	80087ae <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087aa:	2306      	movs	r3, #6
 80087ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087b8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	2200      	movs	r2, #0
 80087be:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c2:	3304      	adds	r3, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff f89f 	bl	8007908 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	3318      	adds	r3, #24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff f89a 	bl	8007908 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	f1c3 0207 	rsb	r2, r3, #7
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	334c      	adds	r3, #76	@ 0x4c
 80087fe:	224c      	movs	r2, #76	@ 0x4c
 8008800:	2100      	movs	r1, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f025 fb9c 	bl	802df40 <memset>
 8008808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880a:	4a0d      	ldr	r2, [pc, #52]	@ (8008840 <prvInitialiseNewTask+0x138>)
 800880c:	651a      	str	r2, [r3, #80]	@ 0x50
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	4a0c      	ldr	r2, [pc, #48]	@ (8008844 <prvInitialiseNewTask+0x13c>)
 8008812:	655a      	str	r2, [r3, #84]	@ 0x54
 8008814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008816:	4a0c      	ldr	r2, [pc, #48]	@ (8008848 <prvInitialiseNewTask+0x140>)
 8008818:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	68f9      	ldr	r1, [r7, #12]
 800881e:	69b8      	ldr	r0, [r7, #24]
 8008820:	f000 ff2e 	bl	8009680 <pxPortInitialiseStack>
 8008824:	4602      	mov	r2, r0
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008836:	bf00      	nop
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20012d28 	.word	0x20012d28
 8008844:	20012d90 	.word	0x20012d90
 8008848:	20012df8 	.word	0x20012df8

0800884c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008854:	f001 f822 	bl	800989c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008858:	4b2a      	ldr	r3, [pc, #168]	@ (8008904 <prvAddNewTaskToReadyList+0xb8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	4a29      	ldr	r2, [pc, #164]	@ (8008904 <prvAddNewTaskToReadyList+0xb8>)
 8008860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008862:	4b29      	ldr	r3, [pc, #164]	@ (8008908 <prvAddNewTaskToReadyList+0xbc>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d109      	bne.n	800887e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800886a:	4a27      	ldr	r2, [pc, #156]	@ (8008908 <prvAddNewTaskToReadyList+0xbc>)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008870:	4b24      	ldr	r3, [pc, #144]	@ (8008904 <prvAddNewTaskToReadyList+0xb8>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d110      	bne.n	800889a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008878:	f000 fbf8 	bl	800906c <prvInitialiseTaskLists>
 800887c:	e00d      	b.n	800889a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800887e:	4b23      	ldr	r3, [pc, #140]	@ (800890c <prvAddNewTaskToReadyList+0xc0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008886:	4b20      	ldr	r3, [pc, #128]	@ (8008908 <prvAddNewTaskToReadyList+0xbc>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	429a      	cmp	r2, r3
 8008892:	d802      	bhi.n	800889a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008894:	4a1c      	ldr	r2, [pc, #112]	@ (8008908 <prvAddNewTaskToReadyList+0xbc>)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800889a:	4b1d      	ldr	r3, [pc, #116]	@ (8008910 <prvAddNewTaskToReadyList+0xc4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008910 <prvAddNewTaskToReadyList+0xc4>)
 80088a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	2201      	movs	r2, #1
 80088aa:	409a      	lsls	r2, r3
 80088ac:	4b19      	ldr	r3, [pc, #100]	@ (8008914 <prvAddNewTaskToReadyList+0xc8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	4a18      	ldr	r2, [pc, #96]	@ (8008914 <prvAddNewTaskToReadyList+0xc8>)
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <prvAddNewTaskToReadyList+0xcc>)
 80088c4:	441a      	add	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f7ff f828 	bl	8007922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088d2:	f001 f819 	bl	8009908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <prvAddNewTaskToReadyList+0xc0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00e      	beq.n	80088fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088de:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <prvAddNewTaskToReadyList+0xbc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d207      	bcs.n	80088fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088ec:	4b0b      	ldr	r3, [pc, #44]	@ (800891c <prvAddNewTaskToReadyList+0xd0>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000a58 	.word	0x20000a58
 8008908:	20000958 	.word	0x20000958
 800890c:	20000a64 	.word	0x20000a64
 8008910:	20000a74 	.word	0x20000a74
 8008914:	20000a60 	.word	0x20000a60
 8008918:	2000095c 	.word	0x2000095c
 800891c:	e000ed04 	.word	0xe000ed04

08008920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01a      	beq.n	8008968 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008932:	4b15      	ldr	r3, [pc, #84]	@ (8008988 <vTaskDelay+0x68>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <vTaskDelay+0x36>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893e:	b672      	cpsid	i
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	b662      	cpsie	i
 800894e:	60bb      	str	r3, [r7, #8]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008956:	f000 f889 	bl	8008a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800895a:	2100      	movs	r1, #0
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fe29 	bl	80095b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008962:	f000 f891 	bl	8008a88 <xTaskResumeAll>
 8008966:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d107      	bne.n	800897e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800896e:	4b07      	ldr	r3, [pc, #28]	@ (800898c <vTaskDelay+0x6c>)
 8008970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000a80 	.word	0x20000a80
 800898c:	e000ed04 	.word	0xe000ed04

08008990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	@ 0x28
 8008994:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800899e:	463a      	mov	r2, r7
 80089a0:	1d39      	adds	r1, r7, #4
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f8 fe64 	bl	8001674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	9202      	str	r2, [sp, #8]
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	2300      	movs	r3, #0
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	460a      	mov	r2, r1
 80089be:	4923      	ldr	r1, [pc, #140]	@ (8008a4c <vTaskStartScheduler+0xbc>)
 80089c0:	4823      	ldr	r0, [pc, #140]	@ (8008a50 <vTaskStartScheduler+0xc0>)
 80089c2:	f7ff fdf5 	bl	80085b0 <xTaskCreateStatic>
 80089c6:	4603      	mov	r3, r0
 80089c8:	4a22      	ldr	r2, [pc, #136]	@ (8008a54 <vTaskStartScheduler+0xc4>)
 80089ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089cc:	4b21      	ldr	r3, [pc, #132]	@ (8008a54 <vTaskStartScheduler+0xc4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089d4:	2301      	movs	r3, #1
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e001      	b.n	80089de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d11d      	bne.n	8008a20 <vTaskStartScheduler+0x90>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	b672      	cpsid	i
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	b662      	cpsie	i
 80089f8:	613b      	str	r3, [r7, #16]
}
 80089fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089fc:	4b16      	ldr	r3, [pc, #88]	@ (8008a58 <vTaskStartScheduler+0xc8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	334c      	adds	r3, #76	@ 0x4c
 8008a02:	4a16      	ldr	r2, [pc, #88]	@ (8008a5c <vTaskStartScheduler+0xcc>)
 8008a04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a06:	4b16      	ldr	r3, [pc, #88]	@ (8008a60 <vTaskStartScheduler+0xd0>)
 8008a08:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a0e:	4b15      	ldr	r3, [pc, #84]	@ (8008a64 <vTaskStartScheduler+0xd4>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a14:	4b14      	ldr	r3, [pc, #80]	@ (8008a68 <vTaskStartScheduler+0xd8>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a1a:	f000 fec1 	bl	80097a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a1e:	e011      	b.n	8008a44 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d10d      	bne.n	8008a44 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <vTaskStartScheduler+0xb0>
}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	0802ec78 	.word	0x0802ec78
 8008a50:	0800903d 	.word	0x0800903d
 8008a54:	20000a7c 	.word	0x20000a7c
 8008a58:	20000958 	.word	0x20000958
 8008a5c:	200000a4 	.word	0x200000a4
 8008a60:	20000a78 	.word	0x20000a78
 8008a64:	20000a64 	.word	0x20000a64
 8008a68:	20000a5c 	.word	0x20000a5c

08008a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a70:	4b04      	ldr	r3, [pc, #16]	@ (8008a84 <vTaskSuspendAll+0x18>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3301      	adds	r3, #1
 8008a76:	4a03      	ldr	r2, [pc, #12]	@ (8008a84 <vTaskSuspendAll+0x18>)
 8008a78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008a7a:	bf00      	nop
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	20000a80 	.word	0x20000a80

08008a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a96:	4b43      	ldr	r3, [pc, #268]	@ (8008ba4 <xTaskResumeAll+0x11c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <xTaskResumeAll+0x32>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	b672      	cpsid	i
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	b662      	cpsie	i
 8008ab2:	603b      	str	r3, [r7, #0]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aba:	f000 feef 	bl	800989c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008abe:	4b39      	ldr	r3, [pc, #228]	@ (8008ba4 <xTaskResumeAll+0x11c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	4a37      	ldr	r2, [pc, #220]	@ (8008ba4 <xTaskResumeAll+0x11c>)
 8008ac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac8:	4b36      	ldr	r3, [pc, #216]	@ (8008ba4 <xTaskResumeAll+0x11c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d161      	bne.n	8008b94 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ad0:	4b35      	ldr	r3, [pc, #212]	@ (8008ba8 <xTaskResumeAll+0x120>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d05d      	beq.n	8008b94 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ad8:	e02e      	b.n	8008b38 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ada:	4b34      	ldr	r3, [pc, #208]	@ (8008bac <xTaskResumeAll+0x124>)
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3318      	adds	r3, #24
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe ff78 	bl	80079dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe ff73 	bl	80079dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	2201      	movs	r2, #1
 8008afc:	409a      	lsls	r2, r3
 8008afe:	4b2c      	ldr	r3, [pc, #176]	@ (8008bb0 <xTaskResumeAll+0x128>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb0 <xTaskResumeAll+0x128>)
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4a27      	ldr	r2, [pc, #156]	@ (8008bb4 <xTaskResumeAll+0x12c>)
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7fe feff 	bl	8007922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b28:	4b23      	ldr	r3, [pc, #140]	@ (8008bb8 <xTaskResumeAll+0x130>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d302      	bcc.n	8008b38 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008b32:	4b22      	ldr	r3, [pc, #136]	@ (8008bbc <xTaskResumeAll+0x134>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b38:	4b1c      	ldr	r3, [pc, #112]	@ (8008bac <xTaskResumeAll+0x124>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1cc      	bne.n	8008ada <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b46:	f000 fb37 	bl	80091b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc0 <xTaskResumeAll+0x138>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d010      	beq.n	8008b78 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b56:	f000 f837 	bl	8008bc8 <xTaskIncrementTick>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008b60:	4b16      	ldr	r3, [pc, #88]	@ (8008bbc <xTaskResumeAll+0x134>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f1      	bne.n	8008b56 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008b72:	4b13      	ldr	r3, [pc, #76]	@ (8008bc0 <xTaskResumeAll+0x138>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b78:	4b10      	ldr	r3, [pc, #64]	@ (8008bbc <xTaskResumeAll+0x134>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b80:	2301      	movs	r3, #1
 8008b82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b84:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <xTaskResumeAll+0x13c>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b94:	f000 feb8 	bl	8009908 <vPortExitCritical>

	return xAlreadyYielded;
 8008b98:	68bb      	ldr	r3, [r7, #8]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000a80 	.word	0x20000a80
 8008ba8:	20000a58 	.word	0x20000a58
 8008bac:	20000a18 	.word	0x20000a18
 8008bb0:	20000a60 	.word	0x20000a60
 8008bb4:	2000095c 	.word	0x2000095c
 8008bb8:	20000958 	.word	0x20000958
 8008bbc:	20000a6c 	.word	0x20000a6c
 8008bc0:	20000a68 	.word	0x20000a68
 8008bc4:	e000ed04 	.word	0xe000ed04

08008bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd2:	4b50      	ldr	r3, [pc, #320]	@ (8008d14 <xTaskIncrementTick+0x14c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f040 808b 	bne.w	8008cf2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8008d18 <xTaskIncrementTick+0x150>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008be4:	4a4c      	ldr	r2, [pc, #304]	@ (8008d18 <xTaskIncrementTick+0x150>)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d123      	bne.n	8008c38 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8008d1c <xTaskIncrementTick+0x154>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00d      	beq.n	8008c16 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	b672      	cpsid	i
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	b662      	cpsie	i
 8008c0e:	603b      	str	r3, [r7, #0]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <xTaskIncrementTick+0x4a>
 8008c16:	4b41      	ldr	r3, [pc, #260]	@ (8008d1c <xTaskIncrementTick+0x154>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	4b40      	ldr	r3, [pc, #256]	@ (8008d20 <xTaskIncrementTick+0x158>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a3e      	ldr	r2, [pc, #248]	@ (8008d1c <xTaskIncrementTick+0x154>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	4a3e      	ldr	r2, [pc, #248]	@ (8008d20 <xTaskIncrementTick+0x158>)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d24 <xTaskIncrementTick+0x15c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	4a3c      	ldr	r2, [pc, #240]	@ (8008d24 <xTaskIncrementTick+0x15c>)
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	f000 fac0 	bl	80091b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c38:	4b3b      	ldr	r3, [pc, #236]	@ (8008d28 <xTaskIncrementTick+0x160>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d348      	bcc.n	8008cd4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c42:	4b36      	ldr	r3, [pc, #216]	@ (8008d1c <xTaskIncrementTick+0x154>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c4c:	4b36      	ldr	r3, [pc, #216]	@ (8008d28 <xTaskIncrementTick+0x160>)
 8008c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c52:	601a      	str	r2, [r3, #0]
					break;
 8008c54:	e03e      	b.n	8008cd4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c56:	4b31      	ldr	r3, [pc, #196]	@ (8008d1c <xTaskIncrementTick+0x154>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d203      	bcs.n	8008c76 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8008d28 <xTaskIncrementTick+0x160>)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c74:	e02e      	b.n	8008cd4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe feae 	bl	80079dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	3318      	adds	r3, #24
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fea5 	bl	80079dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c96:	2201      	movs	r2, #1
 8008c98:	409a      	lsls	r2, r3
 8008c9a:	4b24      	ldr	r3, [pc, #144]	@ (8008d2c <xTaskIncrementTick+0x164>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	4a22      	ldr	r2, [pc, #136]	@ (8008d2c <xTaskIncrementTick+0x164>)
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d30 <xTaskIncrementTick+0x168>)
 8008cb2:	441a      	add	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f7fe fe31 	bl	8007922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d34 <xTaskIncrementTick+0x16c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3b9      	bcc.n	8008c42 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cd2:	e7b6      	b.n	8008c42 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cd4:	4b17      	ldr	r3, [pc, #92]	@ (8008d34 <xTaskIncrementTick+0x16c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cda:	4915      	ldr	r1, [pc, #84]	@ (8008d30 <xTaskIncrementTick+0x168>)
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d907      	bls.n	8008cfc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e004      	b.n	8008cfc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008cf2:	4b11      	ldr	r3, [pc, #68]	@ (8008d38 <xTaskIncrementTick+0x170>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8008d38 <xTaskIncrementTick+0x170>)
 8008cfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8008d3c <xTaskIncrementTick+0x174>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d08:	697b      	ldr	r3, [r7, #20]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000a80 	.word	0x20000a80
 8008d18:	20000a5c 	.word	0x20000a5c
 8008d1c:	20000a10 	.word	0x20000a10
 8008d20:	20000a14 	.word	0x20000a14
 8008d24:	20000a70 	.word	0x20000a70
 8008d28:	20000a78 	.word	0x20000a78
 8008d2c:	20000a60 	.word	0x20000a60
 8008d30:	2000095c 	.word	0x2000095c
 8008d34:	20000958 	.word	0x20000958
 8008d38:	20000a68 	.word	0x20000a68
 8008d3c:	20000a6c 	.word	0x20000a6c

08008d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d46:	4b2b      	ldr	r3, [pc, #172]	@ (8008df4 <vTaskSwitchContext+0xb4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8008df8 <vTaskSwitchContext+0xb8>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d54:	e047      	b.n	8008de6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008d56:	4b28      	ldr	r3, [pc, #160]	@ (8008df8 <vTaskSwitchContext+0xb8>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5c:	4b27      	ldr	r3, [pc, #156]	@ (8008dfc <vTaskSwitchContext+0xbc>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	fab3 f383 	clz	r3, r3
 8008d68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
 8008d6c:	f1c3 031f 	rsb	r3, r3, #31
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	4923      	ldr	r1, [pc, #140]	@ (8008e00 <vTaskSwitchContext+0xc0>)
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10d      	bne.n	8008da2 <vTaskSwitchContext+0x62>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	b672      	cpsid	i
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	b662      	cpsie	i
 8008d9a:	607b      	str	r3, [r7, #4]
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	e7fd      	b.n	8008d9e <vTaskSwitchContext+0x5e>
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4a14      	ldr	r2, [pc, #80]	@ (8008e00 <vTaskSwitchContext+0xc0>)
 8008dae:	4413      	add	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	605a      	str	r2, [r3, #4]
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d104      	bne.n	8008dd2 <vTaskSwitchContext+0x92>
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	605a      	str	r2, [r3, #4]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8008e04 <vTaskSwitchContext+0xc4>)
 8008dda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ddc:	4b09      	ldr	r3, [pc, #36]	@ (8008e04 <vTaskSwitchContext+0xc4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	334c      	adds	r3, #76	@ 0x4c
 8008de2:	4a09      	ldr	r2, [pc, #36]	@ (8008e08 <vTaskSwitchContext+0xc8>)
 8008de4:	6013      	str	r3, [r2, #0]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000a80 	.word	0x20000a80
 8008df8:	20000a6c 	.word	0x20000a6c
 8008dfc:	20000a60 	.word	0x20000a60
 8008e00:	2000095c 	.word	0x2000095c
 8008e04:	20000958 	.word	0x20000958
 8008e08:	200000a4 	.word	0x200000a4

08008e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10d      	bne.n	8008e38 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	b672      	cpsid	i
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	b662      	cpsie	i
 8008e30:	60fb      	str	r3, [r7, #12]
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	e7fd      	b.n	8008e34 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e38:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <vTaskPlaceOnEventList+0x4c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3318      	adds	r3, #24
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7fe fd92 	bl	800796a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e46:	2101      	movs	r1, #1
 8008e48:	6838      	ldr	r0, [r7, #0]
 8008e4a:	f000 fbb3 	bl	80095b4 <prvAddCurrentTaskToDelayedList>
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000958 	.word	0x20000958

08008e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10d      	bne.n	8008e8e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	b672      	cpsid	i
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	b662      	cpsie	i
 8008e86:	60fb      	str	r3, [r7, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	3318      	adds	r3, #24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fda2 	bl	80079dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e98:	4b1d      	ldr	r3, [pc, #116]	@ (8008f10 <xTaskRemoveFromEventList+0xb4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11c      	bne.n	8008eda <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fd99 	bl	80079dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eae:	2201      	movs	r2, #1
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	4b18      	ldr	r3, [pc, #96]	@ (8008f14 <xTaskRemoveFromEventList+0xb8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	4a16      	ldr	r2, [pc, #88]	@ (8008f14 <xTaskRemoveFromEventList+0xb8>)
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4a13      	ldr	r2, [pc, #76]	@ (8008f18 <xTaskRemoveFromEventList+0xbc>)
 8008eca:	441a      	add	r2, r3
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f7fe fd25 	bl	8007922 <vListInsertEnd>
 8008ed8:	e005      	b.n	8008ee6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	3318      	adds	r3, #24
 8008ede:	4619      	mov	r1, r3
 8008ee0:	480e      	ldr	r0, [pc, #56]	@ (8008f1c <xTaskRemoveFromEventList+0xc0>)
 8008ee2:	f7fe fd1e 	bl	8007922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <xTaskRemoveFromEventList+0xc4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d905      	bls.n	8008f00 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f24 <xTaskRemoveFromEventList+0xc8>)
 8008efa:	2201      	movs	r2, #1
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	e001      	b.n	8008f04 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f04:	697b      	ldr	r3, [r7, #20]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000a80 	.word	0x20000a80
 8008f14:	20000a60 	.word	0x20000a60
 8008f18:	2000095c 	.word	0x2000095c
 8008f1c:	20000a18 	.word	0x20000a18
 8008f20:	20000958 	.word	0x20000958
 8008f24:	20000a6c 	.word	0x20000a6c

08008f28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f30:	4b06      	ldr	r3, [pc, #24]	@ (8008f4c <vTaskInternalSetTimeOutState+0x24>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f38:	4b05      	ldr	r3, [pc, #20]	@ (8008f50 <vTaskInternalSetTimeOutState+0x28>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	605a      	str	r2, [r3, #4]
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20000a70 	.word	0x20000a70
 8008f50:	20000a5c 	.word	0x20000a5c

08008f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10d      	bne.n	8008f80 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f68:	b672      	cpsid	i
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	b662      	cpsie	i
 8008f78:	613b      	str	r3, [r7, #16]
}
 8008f7a:	bf00      	nop
 8008f7c:	bf00      	nop
 8008f7e:	e7fd      	b.n	8008f7c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10d      	bne.n	8008fa2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	b672      	cpsid	i
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	b662      	cpsie	i
 8008f9a:	60fb      	str	r3, [r7, #12]
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008fa2:	f000 fc7b 	bl	800989c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800901c <xTaskCheckForTimeOut+0xc8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbe:	d102      	bne.n	8008fc6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]
 8008fc4:	e023      	b.n	800900e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	4b15      	ldr	r3, [pc, #84]	@ (8009020 <xTaskCheckForTimeOut+0xcc>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d007      	beq.n	8008fe2 <xTaskCheckForTimeOut+0x8e>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d302      	bcc.n	8008fe2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	61fb      	str	r3, [r7, #28]
 8008fe0:	e015      	b.n	800900e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d20b      	bcs.n	8009004 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	1ad2      	subs	r2, r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ff95 	bl	8008f28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	61fb      	str	r3, [r7, #28]
 8009002:	e004      	b.n	800900e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800900a:	2301      	movs	r3, #1
 800900c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800900e:	f000 fc7b 	bl	8009908 <vPortExitCritical>

	return xReturn;
 8009012:	69fb      	ldr	r3, [r7, #28]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3720      	adds	r7, #32
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000a5c 	.word	0x20000a5c
 8009020:	20000a70 	.word	0x20000a70

08009024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009028:	4b03      	ldr	r3, [pc, #12]	@ (8009038 <vTaskMissedYield+0x14>)
 800902a:	2201      	movs	r2, #1
 800902c:	601a      	str	r2, [r3, #0]
}
 800902e:	bf00      	nop
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20000a6c 	.word	0x20000a6c

0800903c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009044:	f000 f852 	bl	80090ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009048:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <prvIdleTask+0x28>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d9f9      	bls.n	8009044 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009050:	4b05      	ldr	r3, [pc, #20]	@ (8009068 <prvIdleTask+0x2c>)
 8009052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009060:	e7f0      	b.n	8009044 <prvIdleTask+0x8>
 8009062:	bf00      	nop
 8009064:	2000095c 	.word	0x2000095c
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009072:	2300      	movs	r3, #0
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	e00c      	b.n	8009092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4a12      	ldr	r2, [pc, #72]	@ (80090cc <prvInitialiseTaskLists+0x60>)
 8009084:	4413      	add	r3, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fc1e 	bl	80078c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3301      	adds	r3, #1
 8009090:	607b      	str	r3, [r7, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b06      	cmp	r3, #6
 8009096:	d9ef      	bls.n	8009078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009098:	480d      	ldr	r0, [pc, #52]	@ (80090d0 <prvInitialiseTaskLists+0x64>)
 800909a:	f7fe fc15 	bl	80078c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800909e:	480d      	ldr	r0, [pc, #52]	@ (80090d4 <prvInitialiseTaskLists+0x68>)
 80090a0:	f7fe fc12 	bl	80078c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090a4:	480c      	ldr	r0, [pc, #48]	@ (80090d8 <prvInitialiseTaskLists+0x6c>)
 80090a6:	f7fe fc0f 	bl	80078c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090aa:	480c      	ldr	r0, [pc, #48]	@ (80090dc <prvInitialiseTaskLists+0x70>)
 80090ac:	f7fe fc0c 	bl	80078c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090b0:	480b      	ldr	r0, [pc, #44]	@ (80090e0 <prvInitialiseTaskLists+0x74>)
 80090b2:	f7fe fc09 	bl	80078c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090b6:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <prvInitialiseTaskLists+0x78>)
 80090b8:	4a05      	ldr	r2, [pc, #20]	@ (80090d0 <prvInitialiseTaskLists+0x64>)
 80090ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090bc:	4b0a      	ldr	r3, [pc, #40]	@ (80090e8 <prvInitialiseTaskLists+0x7c>)
 80090be:	4a05      	ldr	r2, [pc, #20]	@ (80090d4 <prvInitialiseTaskLists+0x68>)
 80090c0:	601a      	str	r2, [r3, #0]
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2000095c 	.word	0x2000095c
 80090d0:	200009e8 	.word	0x200009e8
 80090d4:	200009fc 	.word	0x200009fc
 80090d8:	20000a18 	.word	0x20000a18
 80090dc:	20000a2c 	.word	0x20000a2c
 80090e0:	20000a44 	.word	0x20000a44
 80090e4:	20000a10 	.word	0x20000a10
 80090e8:	20000a14 	.word	0x20000a14

080090ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090f2:	e019      	b.n	8009128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090f4:	f000 fbd2 	bl	800989c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f8:	4b10      	ldr	r3, [pc, #64]	@ (800913c <prvCheckTasksWaitingTermination+0x50>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3304      	adds	r3, #4
 8009104:	4618      	mov	r0, r3
 8009106:	f7fe fc69 	bl	80079dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800910a:	4b0d      	ldr	r3, [pc, #52]	@ (8009140 <prvCheckTasksWaitingTermination+0x54>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3b01      	subs	r3, #1
 8009110:	4a0b      	ldr	r2, [pc, #44]	@ (8009140 <prvCheckTasksWaitingTermination+0x54>)
 8009112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009114:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <prvCheckTasksWaitingTermination+0x58>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3b01      	subs	r3, #1
 800911a:	4a0a      	ldr	r2, [pc, #40]	@ (8009144 <prvCheckTasksWaitingTermination+0x58>)
 800911c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800911e:	f000 fbf3 	bl	8009908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f810 	bl	8009148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009128:	4b06      	ldr	r3, [pc, #24]	@ (8009144 <prvCheckTasksWaitingTermination+0x58>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e1      	bne.n	80090f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000a2c 	.word	0x20000a2c
 8009140:	20000a58 	.word	0x20000a58
 8009144:	20000a40 	.word	0x20000a40

08009148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	334c      	adds	r3, #76	@ 0x4c
 8009154:	4618      	mov	r0, r3
 8009156:	f024 ff3b 	bl	802dfd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009160:	2b00      	cmp	r3, #0
 8009162:	d108      	bne.n	8009176 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fd93 	bl	8009c94 <vPortFree>
				vPortFree( pxTCB );
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fd90 	bl	8009c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009174:	e01b      	b.n	80091ae <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800917c:	2b01      	cmp	r3, #1
 800917e:	d103      	bne.n	8009188 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fd87 	bl	8009c94 <vPortFree>
	}
 8009186:	e012      	b.n	80091ae <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800918e:	2b02      	cmp	r3, #2
 8009190:	d00d      	beq.n	80091ae <prvDeleteTCB+0x66>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	b672      	cpsid	i
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	b662      	cpsie	i
 80091a6:	60fb      	str	r3, [r7, #12]
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	e7fd      	b.n	80091aa <prvDeleteTCB+0x62>
	}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
	...

080091b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <prvResetNextTaskUnblockTime+0x38>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <prvResetNextTaskUnblockTime+0x3c>)
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091d0:	e008      	b.n	80091e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b07      	ldr	r3, [pc, #28]	@ (80091f0 <prvResetNextTaskUnblockTime+0x38>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	4a04      	ldr	r2, [pc, #16]	@ (80091f4 <prvResetNextTaskUnblockTime+0x3c>)
 80091e2:	6013      	str	r3, [r2, #0]
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	20000a10 	.word	0x20000a10
 80091f4:	20000a78 	.word	0x20000a78

080091f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091fe:	4b0b      	ldr	r3, [pc, #44]	@ (800922c <xTaskGetSchedulerState+0x34>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009206:	2301      	movs	r3, #1
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	e008      	b.n	800921e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800920c:	4b08      	ldr	r3, [pc, #32]	@ (8009230 <xTaskGetSchedulerState+0x38>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009214:	2302      	movs	r3, #2
 8009216:	607b      	str	r3, [r7, #4]
 8009218:	e001      	b.n	800921e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800921a:	2300      	movs	r3, #0
 800921c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800921e:	687b      	ldr	r3, [r7, #4]
	}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20000a64 	.word	0x20000a64
 8009230:	20000a80 	.word	0x20000a80

08009234 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d069      	beq.n	800931e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924e:	4b36      	ldr	r3, [pc, #216]	@ (8009328 <xTaskPriorityInherit+0xf4>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009254:	429a      	cmp	r2, r3
 8009256:	d259      	bcs.n	800930c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	db06      	blt.n	800926e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009260:	4b31      	ldr	r3, [pc, #196]	@ (8009328 <xTaskPriorityInherit+0xf4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009266:	f1c3 0207 	rsb	r2, r3, #7
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6959      	ldr	r1, [r3, #20]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4a2b      	ldr	r2, [pc, #172]	@ (800932c <xTaskPriorityInherit+0xf8>)
 8009280:	4413      	add	r3, r2
 8009282:	4299      	cmp	r1, r3
 8009284:	d13a      	bne.n	80092fc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	3304      	adds	r3, #4
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fba6 	bl	80079dc <uxListRemove>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d115      	bne.n	80092c2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800929a:	4924      	ldr	r1, [pc, #144]	@ (800932c <xTaskPriorityInherit+0xf8>)
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <xTaskPriorityInherit+0x8e>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	2201      	movs	r2, #1
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	43da      	mvns	r2, r3
 80092b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009330 <xTaskPriorityInherit+0xfc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4013      	ands	r3, r2
 80092be:	4a1c      	ldr	r2, [pc, #112]	@ (8009330 <xTaskPriorityInherit+0xfc>)
 80092c0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092c2:	4b19      	ldr	r3, [pc, #100]	@ (8009328 <xTaskPriorityInherit+0xf4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	2201      	movs	r2, #1
 80092d2:	409a      	lsls	r2, r3
 80092d4:	4b16      	ldr	r3, [pc, #88]	@ (8009330 <xTaskPriorityInherit+0xfc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4313      	orrs	r3, r2
 80092da:	4a15      	ldr	r2, [pc, #84]	@ (8009330 <xTaskPriorityInherit+0xfc>)
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4a10      	ldr	r2, [pc, #64]	@ (800932c <xTaskPriorityInherit+0xf8>)
 80092ec:	441a      	add	r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	3304      	adds	r3, #4
 80092f2:	4619      	mov	r1, r3
 80092f4:	4610      	mov	r0, r2
 80092f6:	f7fe fb14 	bl	8007922 <vListInsertEnd>
 80092fa:	e004      	b.n	8009306 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009328 <xTaskPriorityInherit+0xf4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009306:	2301      	movs	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	e008      	b.n	800931e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009310:	4b05      	ldr	r3, [pc, #20]	@ (8009328 <xTaskPriorityInherit+0xf4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009316:	429a      	cmp	r2, r3
 8009318:	d201      	bcs.n	800931e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800931a:	2301      	movs	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800931e:	68fb      	ldr	r3, [r7, #12]
	}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	20000958 	.word	0x20000958
 800932c:	2000095c 	.word	0x2000095c
 8009330:	20000a60 	.word	0x20000a60

08009334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d074      	beq.n	8009434 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800934a:	4b3d      	ldr	r3, [pc, #244]	@ (8009440 <xTaskPriorityDisinherit+0x10c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	d00d      	beq.n	8009370 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009358:	b672      	cpsid	i
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	b662      	cpsie	i
 8009368:	60fb      	str	r3, [r7, #12]
}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	e7fd      	b.n	800936c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10d      	bne.n	8009394 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937c:	b672      	cpsid	i
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	b662      	cpsie	i
 800938c:	60bb      	str	r3, [r7, #8]
}
 800938e:	bf00      	nop
 8009390:	bf00      	nop
 8009392:	e7fd      	b.n	8009390 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009398:	1e5a      	subs	r2, r3, #1
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d044      	beq.n	8009434 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d140      	bne.n	8009434 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fb10 	bl	80079dc <uxListRemove>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d115      	bne.n	80093ee <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c6:	491f      	ldr	r1, [pc, #124]	@ (8009444 <xTaskPriorityDisinherit+0x110>)
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xTaskPriorityDisinherit+0xba>
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	2201      	movs	r2, #1
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	43da      	mvns	r2, r3
 80093e4:	4b18      	ldr	r3, [pc, #96]	@ (8009448 <xTaskPriorityDisinherit+0x114>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4013      	ands	r3, r2
 80093ea:	4a17      	ldr	r2, [pc, #92]	@ (8009448 <xTaskPriorityDisinherit+0x114>)
 80093ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fa:	f1c3 0207 	rsb	r2, r3, #7
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	2201      	movs	r2, #1
 8009408:	409a      	lsls	r2, r3
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <xTaskPriorityDisinherit+0x114>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4313      	orrs	r3, r2
 8009410:	4a0d      	ldr	r2, [pc, #52]	@ (8009448 <xTaskPriorityDisinherit+0x114>)
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4a08      	ldr	r2, [pc, #32]	@ (8009444 <xTaskPriorityDisinherit+0x110>)
 8009422:	441a      	add	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3304      	adds	r3, #4
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f7fe fa79 	bl	8007922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009434:	697b      	ldr	r3, [r7, #20]
	}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000958 	.word	0x20000958
 8009444:	2000095c 	.word	0x2000095c
 8009448:	20000a60 	.word	0x20000a60

0800944c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800945a:	2301      	movs	r3, #1
 800945c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 8089 	beq.w	8009578 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10d      	bne.n	800948a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	b672      	cpsid	i
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	b662      	cpsie	i
 8009482:	60fb      	str	r3, [r7, #12]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d902      	bls.n	800949a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e002      	b.n	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800949e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a4:	69fa      	ldr	r2, [r7, #28]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d066      	beq.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d161      	bne.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094b4:	4b32      	ldr	r3, [pc, #200]	@ (8009580 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d10d      	bne.n	80094da <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	b672      	cpsid	i
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	b662      	cpsie	i
 80094d2:	60bb      	str	r3, [r7, #8]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db04      	blt.n	80094f8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f1c3 0207 	rsb	r2, r3, #7
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	6959      	ldr	r1, [r3, #20]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4a1f      	ldr	r2, [pc, #124]	@ (8009584 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009508:	4413      	add	r3, r2
 800950a:	4299      	cmp	r1, r3
 800950c:	d134      	bne.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	3304      	adds	r3, #4
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fa62 	bl	80079dc <uxListRemove>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d115      	bne.n	800954a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	4918      	ldr	r1, [pc, #96]	@ (8009584 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009538:	2201      	movs	r2, #1
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43da      	mvns	r2, r3
 8009540:	4b11      	ldr	r3, [pc, #68]	@ (8009588 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4013      	ands	r3, r2
 8009546:	4a10      	ldr	r2, [pc, #64]	@ (8009588 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009548:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954e:	2201      	movs	r2, #1
 8009550:	409a      	lsls	r2, r3
 8009552:	4b0d      	ldr	r3, [pc, #52]	@ (8009588 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4313      	orrs	r3, r2
 8009558:	4a0b      	ldr	r2, [pc, #44]	@ (8009588 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4a06      	ldr	r2, [pc, #24]	@ (8009584 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800956a:	441a      	add	r2, r3
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f7fe f9d5 	bl	8007922 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009578:	bf00      	nop
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20000958 	.word	0x20000958
 8009584:	2000095c 	.word	0x2000095c
 8009588:	20000a60 	.word	0x20000a60

0800958c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009590:	4b07      	ldr	r3, [pc, #28]	@ (80095b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d004      	beq.n	80095a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009598:	4b05      	ldr	r3, [pc, #20]	@ (80095b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800959e:	3201      	adds	r2, #1
 80095a0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80095a2:	4b03      	ldr	r3, [pc, #12]	@ (80095b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095a4:	681b      	ldr	r3, [r3, #0]
	}
 80095a6:	4618      	mov	r0, r3
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20000958 	.word	0x20000958

080095b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095be:	4b29      	ldr	r3, [pc, #164]	@ (8009664 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095c4:	4b28      	ldr	r3, [pc, #160]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fa06 	bl	80079dc <uxListRemove>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10b      	bne.n	80095ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095d6:	4b24      	ldr	r3, [pc, #144]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095dc:	2201      	movs	r2, #1
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	43da      	mvns	r2, r3
 80095e4:	4b21      	ldr	r3, [pc, #132]	@ (800966c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4013      	ands	r3, r2
 80095ea:	4a20      	ldr	r2, [pc, #128]	@ (800966c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f4:	d10a      	bne.n	800960c <prvAddCurrentTaskToDelayedList+0x58>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d007      	beq.n	800960c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	481a      	ldr	r0, [pc, #104]	@ (8009670 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009606:	f7fe f98c 	bl	8007922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800960a:	e026      	b.n	800965a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009614:	4b14      	ldr	r3, [pc, #80]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	429a      	cmp	r2, r3
 8009622:	d209      	bcs.n	8009638 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009624:	4b13      	ldr	r3, [pc, #76]	@ (8009674 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	4b0f      	ldr	r3, [pc, #60]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3304      	adds	r3, #4
 800962e:	4619      	mov	r1, r3
 8009630:	4610      	mov	r0, r2
 8009632:	f7fe f99a 	bl	800796a <vListInsert>
}
 8009636:	e010      	b.n	800965a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009638:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <prvAddCurrentTaskToDelayedList+0xc4>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	4b0a      	ldr	r3, [pc, #40]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fe f990 	bl	800796a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800964a:	4b0c      	ldr	r3, [pc, #48]	@ (800967c <prvAddCurrentTaskToDelayedList+0xc8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	429a      	cmp	r2, r3
 8009652:	d202      	bcs.n	800965a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009654:	4a09      	ldr	r2, [pc, #36]	@ (800967c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6013      	str	r3, [r2, #0]
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000a5c 	.word	0x20000a5c
 8009668:	20000958 	.word	0x20000958
 800966c:	20000a60 	.word	0x20000a60
 8009670:	20000a44 	.word	0x20000a44
 8009674:	20000a14 	.word	0x20000a14
 8009678:	20000a10 	.word	0x20000a10
 800967c:	20000a78 	.word	0x20000a78

08009680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3b04      	subs	r3, #4
 8009690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3b04      	subs	r3, #4
 800969e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f023 0201 	bic.w	r2, r3, #1
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b04      	subs	r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096b0:	4a0c      	ldr	r2, [pc, #48]	@ (80096e4 <pxPortInitialiseStack+0x64>)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b14      	subs	r3, #20
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3b04      	subs	r3, #4
 80096c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f06f 0202 	mvn.w	r2, #2
 80096ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3b20      	subs	r3, #32
 80096d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096d6:	68fb      	ldr	r3, [r7, #12]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	080096e9 	.word	0x080096e9

080096e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096f2:	4b15      	ldr	r3, [pc, #84]	@ (8009748 <prvTaskExitError+0x60>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	d00d      	beq.n	8009718 <prvTaskExitError+0x30>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009700:	b672      	cpsid	i
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	b662      	cpsie	i
 8009710:	60fb      	str	r3, [r7, #12]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <prvTaskExitError+0x2c>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971c:	b672      	cpsid	i
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	b662      	cpsie	i
 800972c:	60bb      	str	r3, [r7, #8]
}
 800972e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009730:	bf00      	nop
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0fc      	beq.n	8009732 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000010 	.word	0x20000010
 800974c:	00000000 	.word	0x00000000

08009750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009750:	4b07      	ldr	r3, [pc, #28]	@ (8009770 <pxCurrentTCBConst2>)
 8009752:	6819      	ldr	r1, [r3, #0]
 8009754:	6808      	ldr	r0, [r1, #0]
 8009756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	f380 8809 	msr	PSP, r0
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f04f 0000 	mov.w	r0, #0
 8009766:	f380 8811 	msr	BASEPRI, r0
 800976a:	4770      	bx	lr
 800976c:	f3af 8000 	nop.w

08009770 <pxCurrentTCBConst2>:
 8009770:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop

08009778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009778:	4808      	ldr	r0, [pc, #32]	@ (800979c <prvPortStartFirstTask+0x24>)
 800977a:	6800      	ldr	r0, [r0, #0]
 800977c:	6800      	ldr	r0, [r0, #0]
 800977e:	f380 8808 	msr	MSP, r0
 8009782:	f04f 0000 	mov.w	r0, #0
 8009786:	f380 8814 	msr	CONTROL, r0
 800978a:	b662      	cpsie	i
 800978c:	b661      	cpsie	f
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	df00      	svc	0
 8009798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800979a:	bf00      	nop
 800979c:	e000ed08 	.word	0xe000ed08

080097a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097a6:	4b37      	ldr	r3, [pc, #220]	@ (8009884 <xPortStartScheduler+0xe4>)
 80097a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	22ff      	movs	r2, #255	@ 0xff
 80097b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009888 <xPortStartScheduler+0xe8>)
 80097cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097ce:	4b2f      	ldr	r3, [pc, #188]	@ (800988c <xPortStartScheduler+0xec>)
 80097d0:	2207      	movs	r2, #7
 80097d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097d4:	e009      	b.n	80097ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097d6:	4b2d      	ldr	r3, [pc, #180]	@ (800988c <xPortStartScheduler+0xec>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a2b      	ldr	r2, [pc, #172]	@ (800988c <xPortStartScheduler+0xec>)
 80097de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f2:	2b80      	cmp	r3, #128	@ 0x80
 80097f4:	d0ef      	beq.n	80097d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097f6:	4b25      	ldr	r3, [pc, #148]	@ (800988c <xPortStartScheduler+0xec>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1c3 0307 	rsb	r3, r3, #7
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d00d      	beq.n	800981e <xPortStartScheduler+0x7e>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009806:	b672      	cpsid	i
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	b662      	cpsie	i
 8009816:	60bb      	str	r3, [r7, #8]
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800981e:	4b1b      	ldr	r3, [pc, #108]	@ (800988c <xPortStartScheduler+0xec>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	4a19      	ldr	r2, [pc, #100]	@ (800988c <xPortStartScheduler+0xec>)
 8009826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009828:	4b18      	ldr	r3, [pc, #96]	@ (800988c <xPortStartScheduler+0xec>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009830:	4a16      	ldr	r2, [pc, #88]	@ (800988c <xPortStartScheduler+0xec>)
 8009832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	b2da      	uxtb	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800983c:	4b14      	ldr	r3, [pc, #80]	@ (8009890 <xPortStartScheduler+0xf0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a13      	ldr	r2, [pc, #76]	@ (8009890 <xPortStartScheduler+0xf0>)
 8009842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009848:	4b11      	ldr	r3, [pc, #68]	@ (8009890 <xPortStartScheduler+0xf0>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a10      	ldr	r2, [pc, #64]	@ (8009890 <xPortStartScheduler+0xf0>)
 800984e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009854:	f000 f8dc 	bl	8009a10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <xPortStartScheduler+0xf4>)
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800985e:	f000 f8fb 	bl	8009a58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009862:	4b0d      	ldr	r3, [pc, #52]	@ (8009898 <xPortStartScheduler+0xf8>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <xPortStartScheduler+0xf8>)
 8009868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800986c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800986e:	f7ff ff83 	bl	8009778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009872:	f7ff fa65 	bl	8008d40 <vTaskSwitchContext>
	prvTaskExitError();
 8009876:	f7ff ff37 	bl	80096e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	e000e400 	.word	0xe000e400
 8009888:	20000a84 	.word	0x20000a84
 800988c:	20000a88 	.word	0x20000a88
 8009890:	e000ed20 	.word	0xe000ed20
 8009894:	20000010 	.word	0x20000010
 8009898:	e000ef34 	.word	0xe000ef34

0800989c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a6:	b672      	cpsid	i
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	b662      	cpsie	i
 80098b6:	607b      	str	r3, [r7, #4]
}
 80098b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ba:	4b11      	ldr	r3, [pc, #68]	@ (8009900 <vPortEnterCritical+0x64>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3301      	adds	r3, #1
 80098c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009900 <vPortEnterCritical+0x64>)
 80098c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009900 <vPortEnterCritical+0x64>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d112      	bne.n	80098f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009904 <vPortEnterCritical+0x68>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00d      	beq.n	80098f2 <vPortEnterCritical+0x56>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098da:	b672      	cpsid	i
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	b662      	cpsie	i
 80098ea:	603b      	str	r3, [r7, #0]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <vPortEnterCritical+0x52>
	}
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	20000010 	.word	0x20000010
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800990e:	4b13      	ldr	r3, [pc, #76]	@ (800995c <vPortExitCritical+0x54>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10d      	bne.n	8009932 <vPortExitCritical+0x2a>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	b672      	cpsid	i
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	b662      	cpsie	i
 800992a:	607b      	str	r3, [r7, #4]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009932:	4b0a      	ldr	r3, [pc, #40]	@ (800995c <vPortExitCritical+0x54>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3b01      	subs	r3, #1
 8009938:	4a08      	ldr	r2, [pc, #32]	@ (800995c <vPortExitCritical+0x54>)
 800993a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800993c:	4b07      	ldr	r3, [pc, #28]	@ (800995c <vPortExitCritical+0x54>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d105      	bne.n	8009950 <vPortExitCritical+0x48>
 8009944:	2300      	movs	r3, #0
 8009946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	f383 8811 	msr	BASEPRI, r3
}
 800994e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20000010 	.word	0x20000010

08009960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009960:	f3ef 8009 	mrs	r0, PSP
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4b15      	ldr	r3, [pc, #84]	@ (80099c0 <pxCurrentTCBConst>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	f01e 0f10 	tst.w	lr, #16
 8009970:	bf08      	it	eq
 8009972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997a:	6010      	str	r0, [r2, #0]
 800997c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009984:	b672      	cpsid	i
 8009986:	f380 8811 	msr	BASEPRI, r0
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	b662      	cpsie	i
 8009994:	f7ff f9d4 	bl	8008d40 <vTaskSwitchContext>
 8009998:	f04f 0000 	mov.w	r0, #0
 800999c:	f380 8811 	msr	BASEPRI, r0
 80099a0:	bc09      	pop	{r0, r3}
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	6808      	ldr	r0, [r1, #0]
 80099a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	f01e 0f10 	tst.w	lr, #16
 80099ae:	bf08      	it	eq
 80099b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099b4:	f380 8809 	msr	PSP, r0
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop

080099c0 <pxCurrentTCBConst>:
 80099c0:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	b672      	cpsid	i
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	b662      	cpsie	i
 80099e2:	607b      	str	r3, [r7, #4]
}
 80099e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099e6:	f7ff f8ef 	bl	8008bc8 <xTaskIncrementTick>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099f0:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <SysTick_Handler+0x44>)
 80099f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	2300      	movs	r3, #0
 80099fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	f383 8811 	msr	BASEPRI, r3
}
 8009a02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	e000ed04 	.word	0xe000ed04

08009a10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a14:	4b0b      	ldr	r3, [pc, #44]	@ (8009a44 <vPortSetupTimerInterrupt+0x34>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <vPortSetupTimerInterrupt+0x38>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <vPortSetupTimerInterrupt+0x3c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a0a      	ldr	r2, [pc, #40]	@ (8009a50 <vPortSetupTimerInterrupt+0x40>)
 8009a26:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2a:	099b      	lsrs	r3, r3, #6
 8009a2c:	4a09      	ldr	r2, [pc, #36]	@ (8009a54 <vPortSetupTimerInterrupt+0x44>)
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a32:	4b04      	ldr	r3, [pc, #16]	@ (8009a44 <vPortSetupTimerInterrupt+0x34>)
 8009a34:	2207      	movs	r2, #7
 8009a36:	601a      	str	r2, [r3, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	e000e010 	.word	0xe000e010
 8009a48:	e000e018 	.word	0xe000e018
 8009a4c:	20000004 	.word	0x20000004
 8009a50:	10624dd3 	.word	0x10624dd3
 8009a54:	e000e014 	.word	0xe000e014

08009a58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a68 <vPortEnableVFP+0x10>
 8009a5c:	6801      	ldr	r1, [r0, #0]
 8009a5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a62:	6001      	str	r1, [r0, #0]
 8009a64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a66:	bf00      	nop
 8009a68:	e000ed88 	.word	0xe000ed88

08009a6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a72:	f3ef 8305 	mrs	r3, IPSR
 8009a76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b0f      	cmp	r3, #15
 8009a7c:	d917      	bls.n	8009aae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ae8 <vPortValidateInterruptPriority+0x7c>)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a88:	4b18      	ldr	r3, [pc, #96]	@ (8009aec <vPortValidateInterruptPriority+0x80>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	7afa      	ldrb	r2, [r7, #11]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d20d      	bcs.n	8009aae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	b672      	cpsid	i
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	b662      	cpsie	i
 8009aa6:	607b      	str	r3, [r7, #4]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009aae:	4b10      	ldr	r3, [pc, #64]	@ (8009af0 <vPortValidateInterruptPriority+0x84>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8009af4 <vPortValidateInterruptPriority+0x88>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d90d      	bls.n	8009ada <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	b672      	cpsid	i
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	b662      	cpsie	i
 8009ad2:	603b      	str	r3, [r7, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop
 8009ad8:	e7fd      	b.n	8009ad6 <vPortValidateInterruptPriority+0x6a>
	}
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	e000e3f0 	.word	0xe000e3f0
 8009aec:	20000a84 	.word	0x20000a84
 8009af0:	e000ed0c 	.word	0xe000ed0c
 8009af4:	20000a88 	.word	0x20000a88

08009af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	@ 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b04:	f7fe ffb2 	bl	8008a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b08:	4b5d      	ldr	r3, [pc, #372]	@ (8009c80 <pvPortMalloc+0x188>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b10:	f000 f920 	bl	8009d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b14:	4b5b      	ldr	r3, [pc, #364]	@ (8009c84 <pvPortMalloc+0x18c>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 8094 	bne.w	8009c4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d020      	beq.n	8009b6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009b28:	2208      	movs	r2, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d017      	beq.n	8009b6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	3308      	adds	r3, #8
 8009b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00d      	beq.n	8009b6a <pvPortMalloc+0x72>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	b672      	cpsid	i
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	b662      	cpsie	i
 8009b62:	617b      	str	r3, [r7, #20]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d06c      	beq.n	8009c4a <pvPortMalloc+0x152>
 8009b70:	4b45      	ldr	r3, [pc, #276]	@ (8009c88 <pvPortMalloc+0x190>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d867      	bhi.n	8009c4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b7a:	4b44      	ldr	r3, [pc, #272]	@ (8009c8c <pvPortMalloc+0x194>)
 8009b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b7e:	4b43      	ldr	r3, [pc, #268]	@ (8009c8c <pvPortMalloc+0x194>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b84:	e004      	b.n	8009b90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d903      	bls.n	8009ba2 <pvPortMalloc+0xaa>
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f1      	bne.n	8009b86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ba2:	4b37      	ldr	r3, [pc, #220]	@ (8009c80 <pvPortMalloc+0x188>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d04e      	beq.n	8009c4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2208      	movs	r2, #8
 8009bb2:	4413      	add	r3, r2
 8009bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	1ad2      	subs	r2, r2, r3
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d922      	bls.n	8009c14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00d      	beq.n	8009bfc <pvPortMalloc+0x104>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	b672      	cpsid	i
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	b662      	cpsie	i
 8009bf4:	613b      	str	r3, [r7, #16]
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	1ad2      	subs	r2, r2, r3
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c0e:	69b8      	ldr	r0, [r7, #24]
 8009c10:	f000 f902 	bl	8009e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c14:	4b1c      	ldr	r3, [pc, #112]	@ (8009c88 <pvPortMalloc+0x190>)
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c88 <pvPortMalloc+0x190>)
 8009c20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c22:	4b19      	ldr	r3, [pc, #100]	@ (8009c88 <pvPortMalloc+0x190>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b1a      	ldr	r3, [pc, #104]	@ (8009c90 <pvPortMalloc+0x198>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d203      	bcs.n	8009c36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c2e:	4b16      	ldr	r3, [pc, #88]	@ (8009c88 <pvPortMalloc+0x190>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a17      	ldr	r2, [pc, #92]	@ (8009c90 <pvPortMalloc+0x198>)
 8009c34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <pvPortMalloc+0x18c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c4a:	f7fe ff1d 	bl	8008a88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00d      	beq.n	8009c74 <pvPortMalloc+0x17c>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5c:	b672      	cpsid	i
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	b662      	cpsie	i
 8009c6c:	60fb      	str	r3, [r7, #12]
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	e7fd      	b.n	8009c70 <pvPortMalloc+0x178>
	return pvReturn;
 8009c74:	69fb      	ldr	r3, [r7, #28]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3728      	adds	r7, #40	@ 0x28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	2000d8b4 	.word	0x2000d8b4
 8009c84:	2000d8c0 	.word	0x2000d8c0
 8009c88:	2000d8b8 	.word	0x2000d8b8
 8009c8c:	2000d8ac 	.word	0x2000d8ac
 8009c90:	2000d8bc 	.word	0x2000d8bc

08009c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d04e      	beq.n	8009d44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	425b      	negs	r3, r3
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	4413      	add	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	4b24      	ldr	r3, [pc, #144]	@ (8009d4c <vPortFree+0xb8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10d      	bne.n	8009cde <vPortFree+0x4a>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	b672      	cpsid	i
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	b662      	cpsie	i
 8009cd6:	60fb      	str	r3, [r7, #12]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00d      	beq.n	8009d02 <vPortFree+0x6e>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	b672      	cpsid	i
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	b662      	cpsie	i
 8009cfa:	60bb      	str	r3, [r7, #8]
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	4b11      	ldr	r3, [pc, #68]	@ (8009d4c <vPortFree+0xb8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d019      	beq.n	8009d44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d115      	bne.n	8009d44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d4c <vPortFree+0xb8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	43db      	mvns	r3, r3
 8009d22:	401a      	ands	r2, r3
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d28:	f7fe fea0 	bl	8008a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	4b07      	ldr	r3, [pc, #28]	@ (8009d50 <vPortFree+0xbc>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4413      	add	r3, r2
 8009d36:	4a06      	ldr	r2, [pc, #24]	@ (8009d50 <vPortFree+0xbc>)
 8009d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d3a:	6938      	ldr	r0, [r7, #16]
 8009d3c:	f000 f86c 	bl	8009e18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d40:	f7fe fea2 	bl	8008a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d44:	bf00      	nop
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	2000d8c0 	.word	0x2000d8c0
 8009d50:	2000d8b8 	.word	0x2000d8b8

08009d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d5a:	f64c 6320 	movw	r3, #52768	@ 0xce20
 8009d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d60:	4b27      	ldr	r3, [pc, #156]	@ (8009e00 <prvHeapInit+0xac>)
 8009d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f003 0307 	and.w	r3, r3, #7
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3307      	adds	r3, #7
 8009d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	4a1f      	ldr	r2, [pc, #124]	@ (8009e00 <prvHeapInit+0xac>)
 8009d84:	4413      	add	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e04 <prvHeapInit+0xb0>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d92:	4b1c      	ldr	r3, [pc, #112]	@ (8009e04 <prvHeapInit+0xb0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009da0:	2208      	movs	r2, #8
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a15      	ldr	r2, [pc, #84]	@ (8009e08 <prvHeapInit+0xb4>)
 8009db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009db6:	4b14      	ldr	r3, [pc, #80]	@ (8009e08 <prvHeapInit+0xb4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dbe:	4b12      	ldr	r3, [pc, #72]	@ (8009e08 <prvHeapInit+0xb4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	1ad2      	subs	r2, r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e08 <prvHeapInit+0xb4>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4a0a      	ldr	r2, [pc, #40]	@ (8009e0c <prvHeapInit+0xb8>)
 8009de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a09      	ldr	r2, [pc, #36]	@ (8009e10 <prvHeapInit+0xbc>)
 8009dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dec:	4b09      	ldr	r3, [pc, #36]	@ (8009e14 <prvHeapInit+0xc0>)
 8009dee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009df2:	601a      	str	r2, [r3, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20000a8c 	.word	0x20000a8c
 8009e04:	2000d8ac 	.word	0x2000d8ac
 8009e08:	2000d8b4 	.word	0x2000d8b4
 8009e0c:	2000d8bc 	.word	0x2000d8bc
 8009e10:	2000d8b8 	.word	0x2000d8b8
 8009e14:	2000d8c0 	.word	0x2000d8c0

08009e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e20:	4b28      	ldr	r3, [pc, #160]	@ (8009ec4 <prvInsertBlockIntoFreeList+0xac>)
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e002      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x14>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d8f7      	bhi.n	8009e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d108      	bne.n	8009e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	441a      	add	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d118      	bne.n	8009ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b15      	ldr	r3, [pc, #84]	@ (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d00d      	beq.n	8009e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	441a      	add	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e008      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e96:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e003      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d002      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	2000d8ac 	.word	0x2000d8ac
 8009ec8:	2000d8b4 	.word	0x2000d8b4

08009ecc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
}
 8009ed0:	bf00      	nop
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8009ede:	f009 fced 	bl	80138bc <touchgfx_components_init>
    touchgfx_init();
 8009ee2:	f009 fcc1 	bl	8013868 <touchgfx_init>
}
 8009ee6:	bf00      	nop
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8009eee:	f009 fced 	bl	80138cc <touchgfx_taskEntry>
}
 8009ef2:	bf00      	nop
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
    {
 8009f00:	4a04      	ldr	r2, [pc, #16]	@ (8009f14 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	601a      	str	r2, [r3, #0]
    }
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	0802fe08 	.word	0x0802fe08

08009f18 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
    }
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff ffe9 	bl	8009ef8 <_ZN8touchgfx12FontProviderD1Ev>
 8009f26:	2104      	movs	r1, #4
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f022 ff9c 	bl	802ce66 <_ZdlPvj>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8009f44:	887b      	ldrh	r3, [r7, #2]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d010      	beq.n	8009f6c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	dc13      	bgt.n	8009f76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d005      	beq.n	8009f62 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8009f56:	e00e      	b.n	8009f76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8009f58:	f007 fbb0 	bl	80116bc <_ZN17TypedTextDatabase8getFontsEv>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	e00a      	b.n	8009f78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8009f62:	f007 fbab 	bl	80116bc <_ZN17TypedTextDatabase8getFontsEv>
 8009f66:	4603      	mov	r3, r0
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	e005      	b.n	8009f78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8009f6c:	f007 fba6 	bl	80116bc <_ZN17TypedTextDatabase8getFontsEv>
 8009f70:	4603      	mov	r3, r0
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	e000      	b.n	8009f78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8009f76:	2300      	movs	r3, #0
    }
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	4a05      	ldr	r2, [pc, #20]	@ (8009fa0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff ffb1 	bl	8009ef8 <_ZN8touchgfx12FontProviderD1Ev>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	0802fdf4 	.word	0x0802fdf4

08009fa4 <_ZN23ApplicationFontProviderD0Ev>:
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ffe7 	bl	8009f80 <_ZN23ApplicationFontProviderD1Ev>
 8009fb2:	2104      	movs	r1, #4
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f022 ff56 	bl	802ce66 <_ZdlPvj>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
    {
 8009fcc:	4a04      	ldr	r2, [pc, #16]	@ (8009fe0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	601a      	str	r2, [r3, #0]
    }
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	080309ac 	.word	0x080309ac

08009fe4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
    }
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ffe9 	bl	8009fc4 <_ZN8touchgfx4FontD1Ev>
 8009ff2:	2114      	movs	r1, #20
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f022 ff36 	bl	802ce66 <_ZdlPvj>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800a004:	b590      	push	{r4, r7, lr}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800a010:	887b      	ldrh	r3, [r7, #2]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800a016:	2300      	movs	r3, #0
 800a018:	e010      	b.n	800a03c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	681c      	ldr	r4, [r3, #0]
 800a02a:	f107 030f 	add.w	r3, r7, #15
 800a02e:	f107 0210 	add.w	r2, r7, #16
 800a032:	8879      	ldrh	r1, [r7, #2]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	47a0      	blx	r4
 800a038:	6178      	str	r0, [r7, #20]
        return glyph;
 800a03a:	697b      	ldr	r3, [r7, #20]
    }
 800a03c:	4618      	mov	r0, r3
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	bd90      	pop	{r4, r7, pc}

0800a044 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	89db      	ldrh	r3, [r3, #14]
    }
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	8a1b      	ldrh	r3, [r3, #16]
    }
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	88db      	ldrh	r3, [r3, #6]
    }
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	889b      	ldrh	r3, [r3, #4]
    }
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7a9b      	ldrb	r3, [r3, #10]
 800a0b0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a0b4:	b2db      	uxtb	r3, r3
    }
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	7a9b      	ldrb	r3, [r3, #10]
 800a0ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a0d2:	b2db      	uxtb	r3, r3
    }
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
    {
        return false;
 800a0e8:	2300      	movs	r3, #0
    }
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800a0f6:	b480      	push	{r7}
 800a0f8:	b083      	sub	sp, #12
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a0fe:	f04f 0300 	mov.w	r3, #0
 800a102:	ee07 3a90 	vmov	s15, r3
    }
 800a106:	eeb0 0a67 	vmov.f32	s0, s15
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	4a05      	ldr	r2, [pc, #20]	@ (800a134 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff ff4d 	bl	8009fc4 <_ZN8touchgfx4FontD1Ev>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	080322b4 	.word	0x080322b4

0800a138 <_ZN8touchgfx9ConstFontD0Ev>:
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff ffe7 	bl	800a114 <_ZN8touchgfx9ConstFontD1Ev>
 800a146:	211c      	movs	r1, #28
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f022 fe8c 	bl	802ce66 <_ZdlPvj>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	4a05      	ldr	r2, [pc, #20]	@ (800a178 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ffd3 	bl	800a114 <_ZN8touchgfx9ConstFontD1Ev>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	0802fe2c 	.word	0x0802fe2c

0800a17c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ffe7 	bl	800a158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a18a:	212c      	movs	r1, #44	@ 0x2c
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f022 fe6a 	bl	802ce66 <_ZdlPvj>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
    {
 800a1a4:	4a04      	ldr	r2, [pc, #16]	@ (800a1b8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	601a      	str	r2, [r3, #0]
    }
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	0802fe1c 	.word	0x0802fe1c

0800a1bc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
    }
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ffe9 	bl	800a19c <_ZN8touchgfx9TypedTextD1Ev>
 800a1ca:	2108      	movs	r1, #8
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f022 fe4a 	bl	802ce66 <_ZdlPvj>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08e      	sub	sp, #56	@ 0x38
 800a210:	af0a      	add	r7, sp, #40	@ 0x28
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4611      	mov	r1, r2
 800a218:	461a      	mov	r2, r3
 800a21a:	460b      	mov	r3, r1
 800a21c:	80fb      	strh	r3, [r7, #6]
 800a21e:	4613      	mov	r3, r2
 800a220:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	88b9      	ldrh	r1, [r7, #4]
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a22c:	9308      	str	r3, [sp, #32]
 800a22e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a230:	9307      	str	r3, [sp, #28]
 800a232:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a236:	9306      	str	r3, [sp, #24]
 800a238:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a23c:	9305      	str	r3, [sp, #20]
 800a23e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a248:	9303      	str	r3, [sp, #12]
 800a24a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	7f3b      	ldrb	r3, [r7, #28]
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	8b3b      	ldrh	r3, [r7, #24]
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	460b      	mov	r3, r1
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	f012 f832 	bl	801c2c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800a260:	4a09      	ldr	r2, [pc, #36]	@ (800a288 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a26a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a270:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a276:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a27c:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	0802fe2c 	.word	0x0802fe2c

0800a28c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	889b      	ldrh	r3, [r3, #4]
 800a2a0:	0adb      	lsrs	r3, r3, #11
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4413      	add	r3, r2
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b089      	sub	sp, #36	@ 0x24
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	7b1b      	ldrb	r3, [r3, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e032      	b.n	800a344 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1a      	ldr	r2, [r3, #32]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	7b5b      	ldrb	r3, [r3, #13]
 800a2ea:	b21b      	sxth	r3, r3
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	b21b      	sxth	r3, r3
 800a2f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2f4:	b219      	sxth	r1, r3
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	7adb      	ldrb	r3, [r3, #11]
 800a2fa:	b21b      	sxth	r3, r3
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	b21b      	sxth	r3, r3
 800a300:	b29b      	uxth	r3, r3
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7b1b      	ldrb	r3, [r3, #12]
 800a30c:	837b      	strh	r3, [r7, #26]
 800a30e:	e013      	b.n	800a338 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	897a      	ldrh	r2, [r7, #10]
 800a316:	429a      	cmp	r2, r3
 800a318:	d103      	bne.n	800a322 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a320:	e010      	b.n	800a344 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	897a      	ldrh	r2, [r7, #10]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d309      	bcc.n	800a340 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a32c:	8b7b      	ldrh	r3, [r7, #26]
 800a32e:	3b01      	subs	r3, #1
 800a330:	837b      	strh	r3, [r7, #26]
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	3304      	adds	r3, #4
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	8b7b      	ldrh	r3, [r7, #26]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e8      	bne.n	800a310 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800a33e:	e000      	b.n	800a342 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800a340:	bf00      	nop
        }
    }
    return 0;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3724      	adds	r7, #36	@ 0x24
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
 800a354:	4801      	ldr	r0, [pc, #4]	@ (800a35c <__tcf_0+0xc>)
 800a356:	f7ff feff 	bl	800a158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	2000d8c4 	.word	0x2000d8c4

0800a360 <_Z23getFont_verdana_10_4bppv>:
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	@ 0x38
 800a364:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a366:	4b21      	ldr	r3, [pc, #132]	@ (800a3ec <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f3bf 8f5b 	dmb	ish
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	bf0c      	ite	eq
 800a376:	2301      	moveq	r3, #1
 800a378:	2300      	movne	r3, #0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d030      	beq.n	800a3e2 <_Z23getFont_verdana_10_4bppv+0x82>
 800a380:	481a      	ldr	r0, [pc, #104]	@ (800a3ec <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a382:	f022 fd72 	bl	802ce6a <__cxa_guard_acquire>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bf14      	ite	ne
 800a38c:	2301      	movne	r3, #1
 800a38e:	2300      	moveq	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d025      	beq.n	800a3e2 <_Z23getFont_verdana_10_4bppv+0x82>
 800a396:	2300      	movs	r3, #0
 800a398:	930c      	str	r3, [sp, #48]	@ 0x30
 800a39a:	2300      	movs	r3, #0
 800a39c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a39e:	2300      	movs	r3, #0
 800a3a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a2:	233f      	movs	r3, #63	@ 0x3f
 800a3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a6:	4b12      	ldr	r3, [pc, #72]	@ (800a3f0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800a3a8:	9308      	str	r3, [sp, #32]
 800a3aa:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800a3ac:	9307      	str	r3, [sp, #28]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9306      	str	r3, [sp, #24]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9302      	str	r3, [sp, #8]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	230a      	movs	r3, #10
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	230a      	movs	r3, #10
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	490a      	ldr	r1, [pc, #40]	@ (800a3f8 <_Z23getFont_verdana_10_4bppv+0x98>)
 800a3d0:	480a      	ldr	r0, [pc, #40]	@ (800a3fc <_Z23getFont_verdana_10_4bppv+0x9c>)
 800a3d2:	f7ff ff1b 	bl	800a20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a3d6:	480a      	ldr	r0, [pc, #40]	@ (800a400 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800a3d8:	f023 fac4 	bl	802d964 <atexit>
 800a3dc:	4803      	ldr	r0, [pc, #12]	@ (800a3ec <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a3de:	f022 fd50 	bl	802ce82 <__cxa_guard_release>
    return verdana_10_4bpp;
 800a3e2:	4b06      	ldr	r3, [pc, #24]	@ (800a3fc <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000d8f0 	.word	0x2000d8f0
 800a3f0:	08032a64 	.word	0x08032a64
 800a3f4:	08032a74 	.word	0x08032a74
 800a3f8:	90266f34 	.word	0x90266f34
 800a3fc:	2000d8c4 	.word	0x2000d8c4
 800a400:	0800a351 	.word	0x0800a351

0800a404 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
 800a408:	4801      	ldr	r0, [pc, #4]	@ (800a410 <__tcf_0+0xc>)
 800a40a:	f7ff fea5 	bl	800a158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	2000d8f4 	.word	0x2000d8f4

0800a414 <_Z23getFont_verdana_20_4bppv>:
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	@ 0x38
 800a418:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a41a:	4b21      	ldr	r3, [pc, #132]	@ (800a4a0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f3bf 8f5b 	dmb	ish
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	bf0c      	ite	eq
 800a42a:	2301      	moveq	r3, #1
 800a42c:	2300      	movne	r3, #0
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d030      	beq.n	800a496 <_Z23getFont_verdana_20_4bppv+0x82>
 800a434:	481a      	ldr	r0, [pc, #104]	@ (800a4a0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a436:	f022 fd18 	bl	802ce6a <__cxa_guard_acquire>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d025      	beq.n	800a496 <_Z23getFont_verdana_20_4bppv+0x82>
 800a44a:	2300      	movs	r3, #0
 800a44c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a44e:	2300      	movs	r3, #0
 800a450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a452:	2300      	movs	r3, #0
 800a454:	930a      	str	r3, [sp, #40]	@ 0x28
 800a456:	233f      	movs	r3, #63	@ 0x3f
 800a458:	9309      	str	r3, [sp, #36]	@ 0x24
 800a45a:	4b12      	ldr	r3, [pc, #72]	@ (800a4a4 <_Z23getFont_verdana_20_4bppv+0x90>)
 800a45c:	9308      	str	r3, [sp, #32]
 800a45e:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <_Z23getFont_verdana_20_4bppv+0x94>)
 800a460:	9307      	str	r3, [sp, #28]
 800a462:	2300      	movs	r3, #0
 800a464:	9306      	str	r3, [sp, #24]
 800a466:	2300      	movs	r3, #0
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	2301      	movs	r3, #1
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	2304      	movs	r3, #4
 800a470:	9303      	str	r3, [sp, #12]
 800a472:	2300      	movs	r3, #0
 800a474:	9302      	str	r3, [sp, #8]
 800a476:	2300      	movs	r3, #0
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	2314      	movs	r3, #20
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	2318      	movs	r3, #24
 800a480:	2210      	movs	r2, #16
 800a482:	490a      	ldr	r1, [pc, #40]	@ (800a4ac <_Z23getFont_verdana_20_4bppv+0x98>)
 800a484:	480a      	ldr	r0, [pc, #40]	@ (800a4b0 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800a486:	f7ff fec1 	bl	800a20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a48a:	480a      	ldr	r0, [pc, #40]	@ (800a4b4 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800a48c:	f023 fa6a 	bl	802d964 <atexit>
 800a490:	4803      	ldr	r0, [pc, #12]	@ (800a4a0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a492:	f022 fcf6 	bl	802ce82 <__cxa_guard_release>
    return verdana_20_4bpp;
 800a496:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800a498:	4618      	mov	r0, r3
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000d920 	.word	0x2000d920
 800a4a4:	08032a68 	.word	0x08032a68
 800a4a8:	08032a78 	.word	0x08032a78
 800a4ac:	90266f44 	.word	0x90266f44
 800a4b0:	2000d8f4 	.word	0x2000d8f4
 800a4b4:	0800a405 	.word	0x0800a405

0800a4b8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	4801      	ldr	r0, [pc, #4]	@ (800a4c4 <__tcf_0+0xc>)
 800a4be:	f7ff fe4b 	bl	800a158 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	2000d924 	.word	0x2000d924

0800a4c8 <_Z23getFont_verdana_40_4bppv>:
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	@ 0x38
 800a4cc:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800a4ce:	4b21      	ldr	r3, [pc, #132]	@ (800a554 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f3bf 8f5b 	dmb	ish
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf0c      	ite	eq
 800a4de:	2301      	moveq	r3, #1
 800a4e0:	2300      	movne	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d030      	beq.n	800a54a <_Z23getFont_verdana_40_4bppv+0x82>
 800a4e8:	481a      	ldr	r0, [pc, #104]	@ (800a554 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a4ea:	f022 fcbe 	bl	802ce6a <__cxa_guard_acquire>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d025      	beq.n	800a54a <_Z23getFont_verdana_40_4bppv+0x82>
 800a4fe:	2300      	movs	r3, #0
 800a500:	930c      	str	r3, [sp, #48]	@ 0x30
 800a502:	2300      	movs	r3, #0
 800a504:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a506:	2300      	movs	r3, #0
 800a508:	930a      	str	r3, [sp, #40]	@ 0x28
 800a50a:	233f      	movs	r3, #63	@ 0x3f
 800a50c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a50e:	4b12      	ldr	r3, [pc, #72]	@ (800a558 <_Z23getFont_verdana_40_4bppv+0x90>)
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	4b12      	ldr	r3, [pc, #72]	@ (800a55c <_Z23getFont_verdana_40_4bppv+0x94>)
 800a514:	9307      	str	r3, [sp, #28]
 800a516:	2300      	movs	r3, #0
 800a518:	9306      	str	r3, [sp, #24]
 800a51a:	2300      	movs	r3, #0
 800a51c:	9305      	str	r3, [sp, #20]
 800a51e:	2301      	movs	r3, #1
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	2304      	movs	r3, #4
 800a524:	9303      	str	r3, [sp, #12]
 800a526:	2300      	movs	r3, #0
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	2300      	movs	r3, #0
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	2328      	movs	r3, #40	@ 0x28
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	2328      	movs	r3, #40	@ 0x28
 800a534:	2201      	movs	r2, #1
 800a536:	490a      	ldr	r1, [pc, #40]	@ (800a560 <_Z23getFont_verdana_40_4bppv+0x98>)
 800a538:	480a      	ldr	r0, [pc, #40]	@ (800a564 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800a53a:	f7ff fe67 	bl	800a20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a53e:	480a      	ldr	r0, [pc, #40]	@ (800a568 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800a540:	f023 fa10 	bl	802d964 <atexit>
 800a544:	4803      	ldr	r0, [pc, #12]	@ (800a554 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a546:	f022 fc9c 	bl	802ce82 <__cxa_guard_release>
    return verdana_40_4bpp;
 800a54a:	4b06      	ldr	r3, [pc, #24]	@ (800a564 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	2000d950 	.word	0x2000d950
 800a558:	08032a70 	.word	0x08032a70
 800a55c:	08032a7c 	.word	0x08032a7c
 800a560:	90267024 	.word	0x90267024
 800a564:	2000d924 	.word	0x2000d924
 800a568:	0800a4b9 	.word	0x0800a4b9

0800a56c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	801a      	strh	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	805a      	strh	r2, [r3, #2]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	809a      	strh	r2, [r3, #4]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	80da      	strh	r2, [r3, #6]
    {
    }
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	817b      	strh	r3, [r7, #10]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	813b      	strh	r3, [r7, #8]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	897a      	ldrh	r2, [r7, #10]
 800a5d0:	801a      	strh	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	893a      	ldrh	r2, [r7, #8]
 800a5d6:	805a      	strh	r2, [r3, #2]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	88fa      	ldrh	r2, [r7, #6]
 800a5dc:	809a      	strh	r2, [r3, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8b3a      	ldrh	r2, [r7, #24]
 800a5e2:	80da      	strh	r2, [r3, #6]
    {
    }
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a5fc:	4a14      	ldr	r2, [pc, #80]	@ (800a650 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
        : rect(),
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff ffbc 	bl	800a584 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	330c      	adds	r3, #12
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff ffb7 	bl	800a584 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	0803224c 	.word	0x0803224c

0800a654 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
    {
 800a65c:	4a04      	ldr	r2, [pc, #16]	@ (800a670 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	601a      	str	r2, [r3, #0]
    }
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	0803224c 	.word	0x0803224c

0800a674 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
    }
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff ffe9 	bl	800a654 <_ZN8touchgfx8DrawableD1Ev>
 800a682:	2128      	movs	r1, #40	@ 0x28
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f022 fbee 	bl	802ce66 <_ZdlPvj>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d005      	beq.n	800a6b2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3314      	adds	r3, #20
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
        }
    }
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <_ZN8touchgfx8Drawable14getNextSiblingEv>:
     * Gets the next sibling node. This will be the next Drawable that has been added to the
     * same Container as this Drawable.
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
    {
        return nextSibling;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	699b      	ldr	r3, [r3, #24]
    }
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a6da:	2300      	movs	r3, #0
    }
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	817b      	strh	r3, [r7, #10]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	813b      	strh	r3, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800a702:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f844 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800a712:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a71a:	4619      	mov	r1, r3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 f898 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800a722:	bf00      	nop
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	460b      	mov	r3, r1
 800a768:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	887a      	ldrh	r2, [r7, #2]
 800a76e:	809a      	strh	r2, [r3, #4]
    }
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	887a      	ldrh	r2, [r7, #2]
 800a78c:	80da      	strh	r2, [r3, #6]
    }
 800a78e:	bf00      	nop
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	807b      	strh	r3, [r7, #2]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	3330      	adds	r3, #48	@ 0x30
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	4798      	blx	r3
        setY(y);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	3334      	adds	r3, #52	@ 0x34
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4798      	blx	r3
    }
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	887a      	ldrh	r2, [r7, #2]
 800a7e6:	811a      	strh	r2, [r3, #8]
    }
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	887a      	ldrh	r2, [r7, #2]
 800a804:	815a      	strh	r2, [r3, #10]
    }
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
    {
    }
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	807b      	strh	r3, [r7, #2]
 800a85e:	4613      	mov	r3, r2
 800a860:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3338      	adds	r3, #56	@ 0x38
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a86e:	4611      	mov	r1, r2
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
        setHeight(height);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	333c      	adds	r3, #60	@ 0x3c
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a880:	4611      	mov	r1, r2
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
    }
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
    {
    }
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	807b      	strh	r3, [r7, #2]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3354      	adds	r3, #84	@ 0x54
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	8879      	ldrh	r1, [r7, #2]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a90c:	b292      	uxth	r2, r2
 800a90e:	1a8a      	subs	r2, r1, r2
 800a910:	b292      	uxth	r2, r2
 800a912:	b210      	sxth	r0, r2
 800a914:	8839      	ldrh	r1, [r7, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a91c:	b292      	uxth	r2, r2
 800a91e:	1a8a      	subs	r2, r1, r2
 800a920:	b292      	uxth	r2, r2
 800a922:	b212      	sxth	r2, r2
 800a924:	4601      	mov	r1, r0
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	4798      	blx	r3
    }
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a940:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a948:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a950:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800a952:	bf00      	nop
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff ffe1 	bl	800a932 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	601a      	str	r2, [r3, #0]
    }
 800a97e:	bf00      	nop
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    {
    }
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
    {
    }
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
    {
 800aa10:	4a04      	ldr	r2, [pc, #16]	@ (800aa24 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
    }
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	080300f0 	.word	0x080300f0

0800aa28 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
    }
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff ffe9 	bl	800aa08 <_ZN8touchgfx15UIEventListenerD1Ev>
 800aa36:	2104      	movs	r1, #4
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f022 fa14 	bl	802ce66 <_ZdlPvj>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	607b      	str	r3, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	817b      	strh	r3, [r7, #10]
 800aa56:	4613      	mov	r3, r2
 800aa58:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff ff2b 	bl	800a8b8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d008      	beq.n	800aa7a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff ff31 	bl	800a8d2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e000      	b.n	800aa7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
        }
    }
 800aa86:	bf00      	nop
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
    {
    }
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800aacc:	6810      	ldr	r0, [r2, #0]
 800aace:	6851      	ldr	r1, [r2, #4]
 800aad0:	c303      	stmia	r3!, {r0, r1}
    }
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3304      	adds	r3, #4
 800aaea:	4618      	mov	r0, r3
 800aaec:	f010 fab8 	bl	801b060 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
    {
 800ab00:	4a04      	ldr	r2, [pc, #16]	@ (800ab14 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	601a      	str	r2, [r3, #0]
    }
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	08030070 	.word	0x08030070

0800ab18 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
    }
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff ffe9 	bl	800aaf8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ab26:	2104      	movs	r1, #4
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f022 f99c 	bl	802ce66 <_ZdlPvj>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
    {
        return instance;
 800ab3c:	4b03      	ldr	r3, [pc, #12]	@ (800ab4c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
    }
 800ab40:	4618      	mov	r0, r3
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	200122c4 	.word	0x200122c4

0800ab50 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ab54:	4b0b      	ldr	r3, [pc, #44]	@ (800ab84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d008      	beq.n	800ab72 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ab60:	4b08      	ldr	r3, [pc, #32]	@ (800ab84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ab6a:	4b06      	ldr	r3, [pc, #24]	@ (800ab84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab70:	e002      	b.n	800ab78 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800ab72:	4b04      	ldr	r3, [pc, #16]	@ (800ab84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
    }
 800ab78:	4618      	mov	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	200122c4 	.word	0x200122c4

0800ab88 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ab90:	4a07      	ldr	r2, [pc, #28]	@ (800abb0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	605a      	str	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	721a      	strb	r2, [r3, #8]
    {
    }
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	0802ffe4 	.word	0x0802ffe4

0800abb4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
    {
 800abbc:	4a04      	ldr	r2, [pc, #16]	@ (800abd0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	601a      	str	r2, [r3, #0]
    }
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	0802ffe4 	.word	0x0802ffe4

0800abd4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
    }
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff ffe9 	bl	800abb4 <_ZN8touchgfx10TransitionD1Ev>
 800abe2:	210c      	movs	r1, #12
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f022 f93e 	bl	802ce66 <_ZdlPvj>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
    {
    }
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
    {
    }
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
    {
    }
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800ac38:	f010 f9ac 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	323c      	adds	r2, #60	@ 0x3c
 800ac42:	6812      	ldr	r2, [r2, #0]
 800ac44:	4618      	mov	r0, r3
 800ac46:	4790      	blx	r2
    }
 800ac48:	bf00      	nop
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	605a      	str	r2, [r3, #4]
    }
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	4613      	mov	r3, r2
 800ac86:	2200      	movs	r2, #0
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff fc91 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
        }
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
        {
        }
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
	...

0800acb0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	4a05      	ldr	r2, [pc, #20]	@ (800acd0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fea1 	bl	800aa08 <_ZN8touchgfx15UIEventListenerD1Ev>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	080321f8 	.word	0x080321f8

0800acd4 <_ZN8touchgfx11ApplicationD0Ev>:
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ffe7 	bl	800acb0 <_ZN8touchgfx11ApplicationD1Ev>
 800ace2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f022 f8bd 	bl	802ce66 <_ZdlPvj>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f010 fa7e 	bl	801b204 <_ZN8touchgfx11ApplicationC1Ev>
 800ad08:	4a09      	ldr	r2, [pc, #36]	@ (800ad30 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a04      	ldr	r2, [pc, #16]	@ (800ad34 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ad22:	6013      	str	r3, [r2, #0]
    }
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	0802ff90 	.word	0x0802ff90
 800ad34:	20012318 	.word	0x20012318

0800ad38 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f804 	bl	800ad4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00f      	beq.n	800ad80 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4610      	mov	r0, r2
 800ad74:	4798      	blx	r3
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ad80:	2300      	movs	r3, #0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00e      	beq.n	800ada4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	601a      	str	r2, [r3, #0]
    }
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	4a05      	ldr	r2, [pc, #20]	@ (800ade8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff ff69 	bl	800acb0 <_ZN8touchgfx11ApplicationD1Ev>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	0802ff90 	.word	0x0802ff90

0800adec <_ZN8touchgfx14MVPApplicationD0Ev>:
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7ff ffe7 	bl	800adc8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800adfa:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f022 f831 	bl	802ce66 <_ZdlPvj>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	4a05      	ldr	r2, [pc, #20]	@ (800ae30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fe69 	bl	800aaf8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	0802ff78 	.word	0x0802ff78

0800ae34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff ffe7 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ae42:	2110      	movs	r1, #16
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f022 f80e 	bl	802ce66 <_ZdlPvj>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	4a08      	ldr	r2, [pc, #32]	@ (800ae80 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff ffd1 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff ffa9 	bl	800adc8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	0802ff24 	.word	0x0802ff24

0800ae84 <_ZN23FrontendApplicationBaseD0Ev>:
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff ffe1 	bl	800ae54 <_ZN23FrontendApplicationBaseD1Ev>
 800ae92:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f021 ffe5 	bl	802ce66 <_ZdlPvj>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f902 	bl	800b0b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800aeb4:	bf00      	nop
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	721a      	strb	r2, [r3, #8]
    }
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	605a      	str	r2, [r3, #4]
    }
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
	...

0800aef4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff fb78 	bl	800a5f4 <_ZN8touchgfx8DrawableC1Ev>
 800af04:	4a03      	ldr	r2, [pc, #12]	@ (800af14 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	08030088 	.word	0x08030088

0800af18 <_ZN8touchgfx6WidgetD1Ev>:
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	4a05      	ldr	r2, [pc, #20]	@ (800af38 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fb93 	bl	800a654 <_ZN8touchgfx8DrawableD1Ev>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	08030088 	.word	0x08030088

0800af3c <_ZN8touchgfx6WidgetD0Ev>:
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff ffe7 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800af4a:	2128      	movs	r1, #40	@ 0x28
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f021 ff8a 	bl	802ce66 <_ZdlPvj>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4618      	mov	r0, r3
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen4_screen/Screen4View.hpp>
#include <gui/screen4_screen/Screen4Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fec4 	bl	800acf8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800af70:	4a19      	ldr	r2, [pc, #100]	@ (800afd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 f9c3 	bl	800b308 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800af92:	f7ff fdd1 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 800af96:	4603      	mov	r3, r0
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	3208      	adds	r2, #8
 800af9c:	6812      	ldr	r2, [r2, #0]
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800afa4:	2000      	movs	r0, #0
 800afa6:	f006 fb11 	bl	80115cc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800afaa:	f7ff fdd1 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 800afae:	4603      	mov	r3, r0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f01a f96e 	bl	8025292 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800afb6:	f7ff fdcb 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 800afba:	4603      	mov	r3, r0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f01a f9e7 	bl	8025390 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800afc2:	f7ff fdc5 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 800afc6:	4603      	mov	r3, r0
 800afc8:	4618      	mov	r0, r3
 800afca:	f01a f9ed 	bl	80253a8 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv>
}
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	0802ff24 	.word	0x0802ff24

0800afdc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	4611      	mov	r1, r2
 800b004:	4618      	mov	r0, r3
 800b006:	f7ff ffe9 	bl	800afdc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	605a      	str	r2, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	3308      	adds	r3, #8
 800b018:	3208      	adds	r2, #8
 800b01a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b01e:	e883 0003 	stmia.w	r3, {r0, r1}
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <_ZN23FrontendApplicationBase34gotoscreenScreenWipeTransitionEastEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenWipeTransitionEast()
{
 800b02c:	b590      	push	{r4, r7, lr}
 800b02e:	b089      	sub	sp, #36	@ 0x24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenWipeTransitionEastImpl);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b03a:	4b10      	ldr	r3, [pc, #64]	@ (800b07c <_ZN23FrontendApplicationBase34gotoscreenScreenWipeTransitionEastEv+0x50>)
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
 800b042:	f107 0008 	add.w	r0, r7, #8
 800b046:	f107 0318 	add.w	r3, r7, #24
 800b04a:	cb0c      	ldmia	r3, {r2, r3}
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	f000 f977 	bl	800b340 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b052:	f107 0308 	add.w	r3, r7, #8
 800b056:	4619      	mov	r1, r3
 800b058:	4620      	mov	r0, r4
 800b05a:	f7ff ffcb 	bl	800aff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b05e:	f107 0308 	add.w	r3, r7, #8
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fed4 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b074:	bf00      	nop
 800b076:	3724      	adds	r7, #36	@ 0x24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd90      	pop	{r4, r7, pc}
 800b07c:	0800b081 	.word	0x0800b081

0800b080 <_ZN23FrontendApplicationBase38gotoscreenScreenWipeTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenWipeTransitionEastImpl()
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af02      	add	r7, sp, #8
 800b086:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b094:	461a      	mov	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	4b04      	ldr	r3, [pc, #16]	@ (800b0b0 <_ZN23FrontendApplicationBase38gotoscreenScreenWipeTransitionEastImplEv+0x30>)
 800b0a0:	4804      	ldr	r0, [pc, #16]	@ (800b0b4 <_ZN23FrontendApplicationBase38gotoscreenScreenWipeTransitionEastImplEv+0x34>)
 800b0a2:	f000 f96d 	bl	800b380 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	2001230c 	.word	0x2001230c
 800b0b4:	20012308 	.word	0x20012308

0800b0b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b089      	sub	sp, #36	@ 0x24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b0c6:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800b0c8:	61bb      	str	r3, [r7, #24]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	61fb      	str	r3, [r7, #28]
 800b0ce:	f107 0008 	add.w	r0, r7, #8
 800b0d2:	f107 0318 	add.w	r3, r7, #24
 800b0d6:	cb0c      	ldmia	r3, {r2, r3}
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	f000 f931 	bl	800b340 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b0de:	f107 0308 	add.w	r3, r7, #8
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7ff ff85 	bl	800aff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b0ea:	f107 0308 	add.w	r3, r7, #8
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fe8e 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b100:	bf00      	nop
 800b102:	3724      	adds	r7, #36	@ 0x24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd90      	pop	{r4, r7, pc}
 800b108:	0800b10d 	.word	0x0800b10d

0800b10c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af02      	add	r7, sp, #8
 800b112:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b120:	461a      	mov	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	4b04      	ldr	r3, [pc, #16]	@ (800b13c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800b12c:	4804      	ldr	r0, [pc, #16]	@ (800b140 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800b12e:	f000 fa53 	bl	800b5d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	2001230c 	.word	0x2001230c
 800b140:	20012308 	.word	0x20012308

0800b144 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b089      	sub	sp, #36	@ 0x24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b152:	4b10      	ldr	r3, [pc, #64]	@ (800b194 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	2300      	movs	r3, #0
 800b158:	61fb      	str	r3, [r7, #28]
 800b15a:	f107 0008 	add.w	r0, r7, #8
 800b15e:	f107 0318 	add.w	r3, r7, #24
 800b162:	cb0c      	ldmia	r3, {r2, r3}
 800b164:	6879      	ldr	r1, [r7, #4]
 800b166:	f000 f8eb 	bl	800b340 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b16a:	f107 0308 	add.w	r3, r7, #8
 800b16e:	4619      	mov	r1, r3
 800b170:	4620      	mov	r0, r4
 800b172:	f7ff ff3f 	bl	800aff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b176:	f107 0308 	add.w	r3, r7, #8
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fe48 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b18c:	bf00      	nop
 800b18e:	3724      	adds	r7, #36	@ 0x24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd90      	pop	{r4, r7, pc}
 800b194:	0800b199 	.word	0x0800b199

0800b198 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	4b04      	ldr	r3, [pc, #16]	@ (800b1c8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 800b1b8:	4804      	ldr	r0, [pc, #16]	@ (800b1cc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 800b1ba:	f000 fb27 	bl	800b80c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b1be:	bf00      	nop
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	2001230c 	.word	0x2001230c
 800b1cc:	20012308 	.word	0x20012308

0800b1d0 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionWestEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenSlideTransitionWest()
{
 800b1d0:	b590      	push	{r4, r7, lr}
 800b1d2:	b089      	sub	sp, #36	@ 0x24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen3ScreenSlideTransitionWestImpl);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b1de:	4b10      	ldr	r3, [pc, #64]	@ (800b220 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionWestEv+0x50>)
 800b1e0:	61bb      	str	r3, [r7, #24]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	61fb      	str	r3, [r7, #28]
 800b1e6:	f107 0008 	add.w	r0, r7, #8
 800b1ea:	f107 0318 	add.w	r3, r7, #24
 800b1ee:	cb0c      	ldmia	r3, {r2, r3}
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	f000 f8a5 	bl	800b340 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b1f6:	f107 0308 	add.w	r3, r7, #8
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7ff fef9 	bl	800aff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b202:	f107 0308 	add.w	r3, r7, #8
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff fe02 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b218:	bf00      	nop
 800b21a:	3724      	adds	r7, #36	@ 0x24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}
 800b220:	0800b225 	.word	0x0800b225

0800b224 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenSlideTransitionWestImpl()
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af02      	add	r7, sp, #8
 800b22a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b238:	461a      	mov	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionWestImplEv+0x30>)
 800b244:	4804      	ldr	r0, [pc, #16]	@ (800b258 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionWestImplEv+0x34>)
 800b246:	f000 fbfb 	bl	800ba40 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	2001230c 	.word	0x2001230c
 800b258:	20012308 	.word	0x20012308

0800b25c <_ZN23FrontendApplicationBase35gotoScreen4ScreenWipeTransitionWestEv>:

// Screen4

void FrontendApplicationBase::gotoScreen4ScreenWipeTransitionWest()
{
 800b25c:	b590      	push	{r4, r7, lr}
 800b25e:	b089      	sub	sp, #36	@ 0x24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen4ScreenWipeTransitionWestImpl);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b26a:	4b10      	ldr	r3, [pc, #64]	@ (800b2ac <_ZN23FrontendApplicationBase35gotoScreen4ScreenWipeTransitionWestEv+0x50>)
 800b26c:	61bb      	str	r3, [r7, #24]
 800b26e:	2300      	movs	r3, #0
 800b270:	61fb      	str	r3, [r7, #28]
 800b272:	f107 0008 	add.w	r0, r7, #8
 800b276:	f107 0318 	add.w	r3, r7, #24
 800b27a:	cb0c      	ldmia	r3, {r2, r3}
 800b27c:	6879      	ldr	r1, [r7, #4]
 800b27e:	f000 f85f 	bl	800b340 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b282:	f107 0308 	add.w	r3, r7, #8
 800b286:	4619      	mov	r1, r3
 800b288:	4620      	mov	r0, r4
 800b28a:	f7ff feb3 	bl	800aff4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fdbc 	bl	800ae10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b2a4:	bf00      	nop
 800b2a6:	3724      	adds	r7, #36	@ 0x24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd90      	pop	{r4, r7, pc}
 800b2ac:	0800b2b1 	.word	0x0800b2b1

0800b2b0 <_ZN23FrontendApplicationBase39gotoScreen4ScreenWipeTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen4ScreenWipeTransitionWestImpl()
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen4View, Screen4Presenter, touchgfx::WipeTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	4b04      	ldr	r3, [pc, #16]	@ (800b2e0 <_ZN23FrontendApplicationBase39gotoScreen4ScreenWipeTransitionWestImplEv+0x30>)
 800b2d0:	4804      	ldr	r0, [pc, #16]	@ (800b2e4 <_ZN23FrontendApplicationBase39gotoScreen4ScreenWipeTransitionWestImplEv+0x34>)
 800b2d2:	f000 fcd1 	bl	800bc78 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2001230c 	.word	0x2001230c
 800b2e4:	20012308 	.word	0x20012308

0800b2e8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	4a04      	ldr	r2, [pc, #16]	@ (800b304 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	08030070 	.word	0x08030070

0800b308 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff ffe8 	bl	800b2e8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b318:	4a08      	ldr	r2, [pc, #32]	@ (800b33c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	605a      	str	r2, [r3, #4]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	609a      	str	r2, [r3, #8]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	60da      	str	r2, [r3, #12]
    {
    }
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	0802ff78 	.word	0x0802ff78

0800b340 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	4639      	mov	r1, r7
 800b34c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff ffc8 	bl	800b2e8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b358:	4a08      	ldr	r2, [pc, #32]	@ (800b37c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	605a      	str	r2, [r3, #4]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3308      	adds	r3, #8
 800b368:	463a      	mov	r2, r7
 800b36a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b36e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	0802ff78 	.word	0x0802ff78

0800b380 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b380:	b590      	push	{r4, r7, lr}
 800b382:	b08f      	sub	sp, #60	@ 0x3c
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3320      	adds	r3, #32
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b3a6:	d205      	bcs.n	800b3b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b3a8:	4b7d      	ldr	r3, [pc, #500]	@ (800b5a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800b3aa:	4a7e      	ldr	r2, [pc, #504]	@ (800b5a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b3ac:	21a3      	movs	r1, #163	@ 0xa3
 800b3ae:	487e      	ldr	r0, [pc, #504]	@ (800b5a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b3b0:	f022 faba 	bl	802d928 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3320      	adds	r3, #32
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	4798      	blx	r3
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b0f      	cmp	r3, #15
 800b3ca:	d805      	bhi.n	800b3d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b3cc:	4b77      	ldr	r3, [pc, #476]	@ (800b5ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b3ce:	4a75      	ldr	r2, [pc, #468]	@ (800b5a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b3d0:	21a4      	movs	r1, #164	@ 0xa4
 800b3d2:	4875      	ldr	r0, [pc, #468]	@ (800b5a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b3d4:	f022 faa8 	bl	802d928 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3320      	adds	r3, #32
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	4798      	blx	r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b37      	cmp	r3, #55	@ 0x37
 800b3ee:	d805      	bhi.n	800b3fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800b3f0:	4b6f      	ldr	r3, [pc, #444]	@ (800b5b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b3f2:	4a6c      	ldr	r2, [pc, #432]	@ (800b5a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b3f4:	21a5      	movs	r1, #165	@ 0xa5
 800b3f6:	486c      	ldr	r0, [pc, #432]	@ (800b5a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b3f8:	f022 fa96 	bl	802d928 <__assert_func>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	627b      	str	r3, [r7, #36]	@ 0x24
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b408:	f00f fdc4 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800b40c:	4603      	mov	r3, r0
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff fb65 	bl	800aade <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b414:	6a3b      	ldr	r3, [r7, #32]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d008      	beq.n	800b42e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	330c      	adds	r3, #12
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4610      	mov	r0, r2
 800b42c:	4798      	blx	r3
    if (*currentTrans)
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4610      	mov	r0, r2
 800b444:	4798      	blx	r3
    if (*currentScreen)
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d008      	beq.n	800b460 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800b44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3314      	adds	r3, #20
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
    if (*currentPresenter)
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d008      	beq.n	800b47a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3304      	adds	r3, #4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4610      	mov	r0, r2
 800b478:	4798      	blx	r3
    if (*currentScreen)
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d007      	beq.n	800b492 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4610      	mov	r0, r2
 800b490:	4798      	blx	r3
    if (*currentPresenter)
 800b492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d008      	beq.n	800b4ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
}
 800b4ac:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fcf9 	bl	800beac <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4619      	mov	r1, r3
 800b4be:	2038      	movs	r0, #56	@ 0x38
 800b4c0:	f7ff f854 	bl	800a56c <_ZnwjPv>
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	2114      	movs	r1, #20
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 fd37 	bl	800bf3c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>
 800b4ce:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 fd72 	bl	800bfc0 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b4e4:	f7ff f842 	bl	800a56c <_ZnwjPv>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f006 fc96 	bl	8011e1c <_ZN10screenViewC1Ev>
 800b4f0:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fd74 	bl	800bfe6 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800b4fe:	4603      	mov	r3, r0
 800b500:	4619      	mov	r1, r3
 800b502:	2010      	movs	r0, #16
 800b504:	f7ff f832 	bl	800a56c <_ZnwjPv>
 800b508:	4604      	mov	r4, r0
 800b50a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b50c:	4620      	mov	r0, r4
 800b50e:	f006 fc2d 	bl	8011d6c <_ZN15screenPresenterC1ER10screenView>
 800b512:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b518:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b51e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b524:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52e:	3304      	adds	r3, #4
 800b530:	e000      	b.n	800b534 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800b532:	2300      	movs	r3, #0
 800b534:	4619      	mov	r1, r3
 800b536:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b538:	f7ff fc38 	bl	800adac <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53e:	3304      	adds	r3, #4
 800b540:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff fcc7 	bl	800aed6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fd5d 	bl	800c00c <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	330c      	adds	r3, #12
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	69f8      	ldr	r0, [r7, #28]
 800b568:	4798      	blx	r3
    newPresenter->activate();
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	69f8      	ldr	r0, [r7, #28]
 800b578:	f011 fb10 	bl	801cb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3310      	adds	r3, #16
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6978      	ldr	r0, [r7, #20]
 800b586:	4798      	blx	r3
    newTransition->invalidate();
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3314      	adds	r3, #20
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6978      	ldr	r0, [r7, #20]
 800b592:	4798      	blx	r3
}
 800b594:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800b596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b598:	4618      	mov	r0, r3
 800b59a:	373c      	adds	r7, #60	@ 0x3c
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd90      	pop	{r4, r7, pc}
 800b5a0:	0802ec80 	.word	0x0802ec80
 800b5a4:	0802ed10 	.word	0x0802ed10
 800b5a8:	0802edf4 	.word	0x0802edf4
 800b5ac:	0802ee38 	.word	0x0802ee38
 800b5b0:	0802eedc 	.word	0x0802eedc

0800b5b4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff fae2 	bl	800ab88 <_ZN8touchgfx10TransitionC1Ev>
 800b5c4:	4a03      	ldr	r2, [pc, #12]	@ (800b5d4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	0802ff00 	.word	0x0802ff00

0800b5d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b5d8:	b590      	push	{r4, r7, lr}
 800b5da:	b08f      	sub	sp, #60	@ 0x3c
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689a      	ldr	r2, [r3, #8]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	3320      	adds	r3, #32
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	4798      	blx	r3
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b5fe:	d205      	bcs.n	800b60c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b600:	4b7d      	ldr	r3, [pc, #500]	@ (800b7f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800b602:	4a7e      	ldr	r2, [pc, #504]	@ (800b7fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b604:	21a3      	movs	r1, #163	@ 0xa3
 800b606:	487e      	ldr	r0, [pc, #504]	@ (800b800 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b608:	f022 f98e 	bl	802d928 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3320      	adds	r3, #32
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4610      	mov	r0, r2
 800b61c:	4798      	blx	r3
 800b61e:	4603      	mov	r3, r0
 800b620:	2b0f      	cmp	r3, #15
 800b622:	d805      	bhi.n	800b630 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b624:	4b77      	ldr	r3, [pc, #476]	@ (800b804 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b626:	4a75      	ldr	r2, [pc, #468]	@ (800b7fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b628:	21a4      	movs	r1, #164	@ 0xa4
 800b62a:	4875      	ldr	r0, [pc, #468]	@ (800b800 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b62c:	f022 f97c 	bl	802d928 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3320      	adds	r3, #32
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4610      	mov	r0, r2
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	2b0b      	cmp	r3, #11
 800b646:	d805      	bhi.n	800b654 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800b648:	4b6f      	ldr	r3, [pc, #444]	@ (800b808 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b64a:	4a6c      	ldr	r2, [pc, #432]	@ (800b7fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b64c:	21a5      	movs	r1, #165	@ 0xa5
 800b64e:	486c      	ldr	r0, [pc, #432]	@ (800b800 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b650:	f022 f96a 	bl	802d928 <__assert_func>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b660:	f00f fc98 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800b664:	4603      	mov	r3, r0
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff fa39 	bl	800aade <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d008      	beq.n	800b686 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	330c      	adds	r3, #12
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4610      	mov	r0, r2
 800b684:	4798      	blx	r3
    if (*currentTrans)
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d007      	beq.n	800b69e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4610      	mov	r0, r2
 800b69c:	4798      	blx	r3
    if (*currentScreen)
 800b69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d008      	beq.n	800b6b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800b6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4798      	blx	r3
    if (*currentPresenter)
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d008      	beq.n	800b6d2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	4798      	blx	r3
    if (*currentScreen)
 800b6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d007      	beq.n	800b6ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	4798      	blx	r3
    if (*currentPresenter)
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d008      	beq.n	800b704 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4610      	mov	r0, r2
 800b702:	4798      	blx	r3
}
 800b704:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 fc8b 	bl	800c028 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800b712:	4603      	mov	r3, r0
 800b714:	4619      	mov	r1, r3
 800b716:	200c      	movs	r0, #12
 800b718:	f7fe ff28 	bl	800a56c <_ZnwjPv>
 800b71c:	4604      	mov	r4, r0
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff ff48 	bl	800b5b4 <_ZN8touchgfx12NoTransitionC1Ev>
 800b724:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2100      	movs	r1, #0
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fc8e 	bl	800c04e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b732:	4603      	mov	r3, r0
 800b734:	4619      	mov	r1, r3
 800b736:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b73a:	f7fe ff17 	bl	800a56c <_ZnwjPv>
 800b73e:	4604      	mov	r4, r0
 800b740:	4620      	mov	r0, r4
 800b742:	f006 f949 	bl	80119d8 <_ZN11Screen1ViewC1Ev>
 800b746:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2100      	movs	r1, #0
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fc90 	bl	800c074 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b754:	4603      	mov	r3, r0
 800b756:	4619      	mov	r1, r3
 800b758:	2010      	movs	r0, #16
 800b75a:	f7fe ff07 	bl	800a56c <_ZnwjPv>
 800b75e:	4604      	mov	r4, r0
 800b760:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b762:	4620      	mov	r0, r4
 800b764:	f006 f8e0 	bl	8011928 <_ZN16Screen1PresenterC1ER11Screen1View>
 800b768:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b76e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b774:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b77a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800b782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b784:	3304      	adds	r3, #4
 800b786:	e000      	b.n	800b78a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b788:	2300      	movs	r3, #0
 800b78a:	4619      	mov	r1, r3
 800b78c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b78e:	f7ff fb0d 	bl	800adac <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b794:	3304      	adds	r3, #4
 800b796:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fb9c 	bl	800aed6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f000 fc79 	bl	800c09a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	61fb      	str	r3, [r7, #28]
 800b7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ae:	61bb      	str	r3, [r7, #24]
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	330c      	adds	r3, #12
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	69f8      	ldr	r0, [r7, #28]
 800b7be:	4798      	blx	r3
    newPresenter->activate();
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	69b8      	ldr	r0, [r7, #24]
 800b7c8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b7ca:	6979      	ldr	r1, [r7, #20]
 800b7cc:	69f8      	ldr	r0, [r7, #28]
 800b7ce:	f011 f9e5 	bl	801cb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3310      	adds	r3, #16
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6978      	ldr	r0, [r7, #20]
 800b7dc:	4798      	blx	r3
    newTransition->invalidate();
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	3314      	adds	r3, #20
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6978      	ldr	r0, [r7, #20]
 800b7e8:	4798      	blx	r3
}
 800b7ea:	bf00      	nop
    return newPresenter;
 800b7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	373c      	adds	r7, #60	@ 0x3c
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd90      	pop	{r4, r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0802ec80 	.word	0x0802ec80
 800b7fc:	0802ef80 	.word	0x0802ef80
 800b800:	0802edf4 	.word	0x0802edf4
 800b804:	0802ee38 	.word	0x0802ee38
 800b808:	0802eedc 	.word	0x0802eedc

0800b80c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b08f      	sub	sp, #60	@ 0x3c
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
 800b818:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3320      	adds	r3, #32
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
 800b82e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b832:	d205      	bcs.n	800b840 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b834:	4b7d      	ldr	r3, [pc, #500]	@ (800ba2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800b836:	4a7e      	ldr	r2, [pc, #504]	@ (800ba30 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b838:	21a3      	movs	r1, #163	@ 0xa3
 800b83a:	487e      	ldr	r0, [pc, #504]	@ (800ba34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b83c:	f022 f874 	bl	802d928 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3320      	adds	r3, #32
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4610      	mov	r0, r2
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	2b0f      	cmp	r3, #15
 800b856:	d805      	bhi.n	800b864 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b858:	4b77      	ldr	r3, [pc, #476]	@ (800ba38 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b85a:	4a75      	ldr	r2, [pc, #468]	@ (800ba30 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b85c:	21a4      	movs	r1, #164	@ 0xa4
 800b85e:	4875      	ldr	r0, [pc, #468]	@ (800ba34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b860:	f022 f862 	bl	802d928 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3320      	adds	r3, #32
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4610      	mov	r0, r2
 800b874:	4798      	blx	r3
 800b876:	4603      	mov	r3, r0
 800b878:	2b3f      	cmp	r3, #63	@ 0x3f
 800b87a:	d805      	bhi.n	800b888 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800b87c:	4b6f      	ldr	r3, [pc, #444]	@ (800ba3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b87e:	4a6c      	ldr	r2, [pc, #432]	@ (800ba30 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b880:	21a5      	movs	r1, #165	@ 0xa5
 800b882:	486c      	ldr	r0, [pc, #432]	@ (800ba34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b884:	f022 f850 	bl	802d928 <__assert_func>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b894:	f00f fb7e 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800b898:	4603      	mov	r3, r0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff f91f 	bl	800aade <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d008      	beq.n	800b8ba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	330c      	adds	r3, #12
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	4798      	blx	r3
    if (*currentTrans)
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4798      	blx	r3
    if (*currentScreen)
 800b8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d008      	beq.n	800b8ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800b8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3314      	adds	r3, #20
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4798      	blx	r3
    if (*currentPresenter)
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3304      	adds	r3, #4
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
    if (*currentScreen)
 800b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d007      	beq.n	800b91e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800b90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4610      	mov	r0, r2
 800b91c:	4798      	blx	r3
    if (*currentPresenter)
 800b91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d008      	beq.n	800b938 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3308      	adds	r3, #8
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4610      	mov	r0, r2
 800b936:	4798      	blx	r3
}
 800b938:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	2100      	movs	r1, #0
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fbb8 	bl	800c0b6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800b946:	4603      	mov	r3, r0
 800b948:	4619      	mov	r1, r3
 800b94a:	2040      	movs	r0, #64	@ 0x40
 800b94c:	f7fe fe0e 	bl	800a56c <_ZnwjPv>
 800b950:	4604      	mov	r4, r0
 800b952:	2114      	movs	r1, #20
 800b954:	4620      	mov	r0, r4
 800b956:	f000 fbe3 	bl	800c120 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800b95a:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2100      	movs	r1, #0
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fb73 	bl	800c04e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b968:	4603      	mov	r3, r0
 800b96a:	4619      	mov	r1, r3
 800b96c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b970:	f7fe fdfc 	bl	800a56c <_ZnwjPv>
 800b974:	4604      	mov	r4, r0
 800b976:	4620      	mov	r0, r4
 800b978:	f006 f82e 	bl	80119d8 <_ZN11Screen1ViewC1Ev>
 800b97c:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	2100      	movs	r1, #0
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fb75 	bl	800c074 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b98a:	4603      	mov	r3, r0
 800b98c:	4619      	mov	r1, r3
 800b98e:	2010      	movs	r0, #16
 800b990:	f7fe fdec 	bl	800a56c <_ZnwjPv>
 800b994:	4604      	mov	r4, r0
 800b996:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b998:	4620      	mov	r0, r4
 800b99a:	f005 ffc5 	bl	8011928 <_ZN16Screen1PresenterC1ER11Screen1View>
 800b99e:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9a4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9aa:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9b0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	e000      	b.n	800b9c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b9c4:	f7ff f9f2 	bl	800adac <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff fa81 	bl	800aed6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 fb5e 	bl	800c09a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	61bb      	str	r3, [r7, #24]
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9e8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	330c      	adds	r3, #12
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69f8      	ldr	r0, [r7, #28]
 800b9f4:	4798      	blx	r3
    newPresenter->activate();
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	69b8      	ldr	r0, [r7, #24]
 800b9fe:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ba00:	6979      	ldr	r1, [r7, #20]
 800ba02:	69f8      	ldr	r0, [r7, #28]
 800ba04:	f011 f8ca 	bl	801cb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6978      	ldr	r0, [r7, #20]
 800ba12:	4798      	blx	r3
    newTransition->invalidate();
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3314      	adds	r3, #20
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6978      	ldr	r0, [r7, #20]
 800ba1e:	4798      	blx	r3
}
 800ba20:	bf00      	nop
    return newPresenter;
 800ba22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	373c      	adds	r7, #60	@ 0x3c
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd90      	pop	{r4, r7, pc}
 800ba2c:	0802ec80 	.word	0x0802ec80
 800ba30:	0802f054 	.word	0x0802f054
 800ba34:	0802edf4 	.word	0x0802edf4
 800ba38:	0802ee38 	.word	0x0802ee38
 800ba3c:	0802eedc 	.word	0x0802eedc

0800ba40 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ba40:	b590      	push	{r4, r7, lr}
 800ba42:	b08f      	sub	sp, #60	@ 0x3c
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3320      	adds	r3, #32
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4798      	blx	r3
 800ba60:	4603      	mov	r3, r0
 800ba62:	f643 02a7 	movw	r2, #14503	@ 0x38a7
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d805      	bhi.n	800ba76 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ba6a:	4b7e      	ldr	r3, [pc, #504]	@ (800bc64 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ba6c:	4a7e      	ldr	r2, [pc, #504]	@ (800bc68 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ba6e:	21a3      	movs	r1, #163	@ 0xa3
 800ba70:	487e      	ldr	r0, [pc, #504]	@ (800bc6c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ba72:	f021 ff59 	bl	802d928 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3320      	adds	r3, #32
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4610      	mov	r0, r2
 800ba86:	4798      	blx	r3
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b0f      	cmp	r3, #15
 800ba8c:	d805      	bhi.n	800ba9a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800ba8e:	4b78      	ldr	r3, [pc, #480]	@ (800bc70 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ba90:	4a75      	ldr	r2, [pc, #468]	@ (800bc68 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ba92:	21a4      	movs	r1, #164	@ 0xa4
 800ba94:	4875      	ldr	r0, [pc, #468]	@ (800bc6c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ba96:	f021 ff47 	bl	802d928 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68da      	ldr	r2, [r3, #12]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3320      	adds	r3, #32
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4610      	mov	r0, r2
 800baaa:	4798      	blx	r3
 800baac:	4603      	mov	r3, r0
 800baae:	2b3f      	cmp	r3, #63	@ 0x3f
 800bab0:	d805      	bhi.n	800babe <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800bab2:	4b70      	ldr	r3, [pc, #448]	@ (800bc74 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800bab4:	4a6c      	ldr	r2, [pc, #432]	@ (800bc68 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bab6:	21a5      	movs	r1, #165	@ 0xa5
 800bab8:	486c      	ldr	r0, [pc, #432]	@ (800bc6c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800baba:	f021 ff35 	bl	802d928 <__assert_func>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800baca:	f00f fa63 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800bace:	4603      	mov	r3, r0
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff f804 	bl	800aade <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	330c      	adds	r3, #12
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4610      	mov	r0, r2
 800baee:	4798      	blx	r3
    if (*currentTrans)
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d007      	beq.n	800bb08 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
    if (*currentScreen)
 800bb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d008      	beq.n	800bb22 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800bb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3314      	adds	r3, #20
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4798      	blx	r3
    if (*currentPresenter)
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3304      	adds	r3, #4
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4610      	mov	r0, r2
 800bb3a:	4798      	blx	r3
    if (*currentScreen)
 800bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d007      	beq.n	800bb54 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4610      	mov	r0, r2
 800bb52:	4798      	blx	r3
    if (*currentPresenter)
 800bb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d008      	beq.n	800bb6e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3308      	adds	r3, #8
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4798      	blx	r3
}
 800bb6e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	2100      	movs	r1, #0
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 fa9d 	bl	800c0b6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	4619      	mov	r1, r3
 800bb80:	2040      	movs	r0, #64	@ 0x40
 800bb82:	f7fe fcf3 	bl	800a56c <_ZnwjPv>
 800bb86:	4604      	mov	r4, r0
 800bb88:	2114      	movs	r1, #20
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f000 fac8 	bl	800c120 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800bb90:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	2100      	movs	r1, #0
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f000 fb11 	bl	800c1c0 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4619      	mov	r1, r3
 800bba2:	f643 00a8 	movw	r0, #14504	@ 0x38a8
 800bba6:	f7fe fce1 	bl	800a56c <_ZnwjPv>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4620      	mov	r0, r4
 800bbae:	f005 ffc9 	bl	8011b44 <_ZN11Screen3ViewC1Ev>
 800bbb2:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	2100      	movs	r1, #0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 fb13 	bl	800c1e6 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	2010      	movs	r0, #16
 800bbc6:	f7fe fcd1 	bl	800a56c <_ZnwjPv>
 800bbca:	4604      	mov	r4, r0
 800bbcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f005 ff60 	bl	8011a94 <_ZN16Screen3PresenterC1ER11Screen3View>
 800bbd4:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbda:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbe0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbe6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800bbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800bbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	e000      	b.n	800bbf6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bbfa:	f7ff f8d7 	bl	800adac <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800bbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc00:	3304      	adds	r3, #4
 800bc02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff f966 	bl	800aed6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fafc 	bl	800c20c <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 800bc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc16:	61fb      	str	r3, [r7, #28]
 800bc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1a:	61bb      	str	r3, [r7, #24]
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	330c      	adds	r3, #12
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	69f8      	ldr	r0, [r7, #28]
 800bc2a:	4798      	blx	r3
    newPresenter->activate();
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69b8      	ldr	r0, [r7, #24]
 800bc34:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800bc36:	6979      	ldr	r1, [r7, #20]
 800bc38:	69f8      	ldr	r0, [r7, #28]
 800bc3a:	f010 ffaf 	bl	801cb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3310      	adds	r3, #16
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6978      	ldr	r0, [r7, #20]
 800bc48:	4798      	blx	r3
    newTransition->invalidate();
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3314      	adds	r3, #20
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6978      	ldr	r0, [r7, #20]
 800bc54:	4798      	blx	r3
}
 800bc56:	bf00      	nop
    return newPresenter;
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	373c      	adds	r7, #60	@ 0x3c
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd90      	pop	{r4, r7, pc}
 800bc62:	bf00      	nop
 800bc64:	0802ec80 	.word	0x0802ec80
 800bc68:	0802f13c 	.word	0x0802f13c
 800bc6c:	0802edf4 	.word	0x0802edf4
 800bc70:	0802ee38 	.word	0x0802ee38
 800bc74:	0802eedc 	.word	0x0802eedc

0800bc78 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800bc78:	b590      	push	{r4, r7, lr}
 800bc7a:	b08f      	sub	sp, #60	@ 0x3c
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3320      	adds	r3, #32
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4610      	mov	r0, r2
 800bc96:	4798      	blx	r3
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f5b3 7f76 	cmp.w	r3, #984	@ 0x3d8
 800bc9e:	d205      	bcs.n	800bcac <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800bca0:	4b7d      	ldr	r3, [pc, #500]	@ (800be98 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800bca2:	4a7e      	ldr	r2, [pc, #504]	@ (800be9c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bca4:	21a3      	movs	r1, #163	@ 0xa3
 800bca6:	487e      	ldr	r0, [pc, #504]	@ (800bea0 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bca8:	f021 fe3e 	bl	802d928 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3320      	adds	r3, #32
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4610      	mov	r0, r2
 800bcbc:	4798      	blx	r3
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b0f      	cmp	r3, #15
 800bcc2:	d805      	bhi.n	800bcd0 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800bcc4:	4b77      	ldr	r3, [pc, #476]	@ (800bea4 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800bcc6:	4a75      	ldr	r2, [pc, #468]	@ (800be9c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bcc8:	21a4      	movs	r1, #164	@ 0xa4
 800bcca:	4875      	ldr	r0, [pc, #468]	@ (800bea0 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bccc:	f021 fe2c 	bl	802d928 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68da      	ldr	r2, [r3, #12]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3320      	adds	r3, #32
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4610      	mov	r0, r2
 800bce0:	4798      	blx	r3
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b37      	cmp	r3, #55	@ 0x37
 800bce6:	d805      	bhi.n	800bcf4 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800bce8:	4b6f      	ldr	r3, [pc, #444]	@ (800bea8 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800bcea:	4a6c      	ldr	r2, [pc, #432]	@ (800be9c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bcec:	21a5      	movs	r1, #165	@ 0xa5
 800bcee:	486c      	ldr	r0, [pc, #432]	@ (800bea0 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bcf0:	f021 fe1a 	bl	802d928 <__assert_func>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800bd00:	f00f f948 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800bd04:	4603      	mov	r3, r0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fee9 	bl	800aade <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d008      	beq.n	800bd26 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	330c      	adds	r3, #12
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4610      	mov	r0, r2
 800bd24:	4798      	blx	r3
    if (*currentTrans)
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d007      	beq.n	800bd3e <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	4798      	blx	r3
    if (*currentScreen)
 800bd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d008      	beq.n	800bd58 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3314      	adds	r3, #20
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4610      	mov	r0, r2
 800bd56:	4798      	blx	r3
    if (*currentPresenter)
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d008      	beq.n	800bd72 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800bd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4610      	mov	r0, r2
 800bd70:	4798      	blx	r3
    if (*currentScreen)
 800bd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d007      	beq.n	800bd8a <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4610      	mov	r0, r2
 800bd88:	4798      	blx	r3
    if (*currentPresenter)
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d008      	beq.n	800bda4 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
}
 800bda4:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	2100      	movs	r1, #0
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 fa3b 	bl	800c228 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	2038      	movs	r0, #56	@ 0x38
 800bdb8:	f7fe fbd8 	bl	800a56c <_ZnwjPv>
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	2114      	movs	r1, #20
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f000 fa45 	bl	800c250 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>
 800bdc6:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 fa80 	bl	800c2d4 <_ZN8touchgfx17AbstractPartition2atI11Screen4ViewEERT_t>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800bddc:	f7fe fbc6 	bl	800a56c <_ZnwjPv>
 800bde0:	4604      	mov	r4, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	f005 ff64 	bl	8011cb0 <_ZN11Screen4ViewC1Ev>
 800bde8:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f000 fa82 	bl	800c2fa <_ZN8touchgfx17AbstractPartition2atI16Screen4PresenterEERT_t>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	2010      	movs	r0, #16
 800bdfc:	f7fe fbb6 	bl	800a56c <_ZnwjPv>
 800be00:	4604      	mov	r4, r0
 800be02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be04:	4620      	mov	r0, r4
 800be06:	f005 fefb 	bl	8011c00 <_ZN16Screen4PresenterC1ER11Screen4View>
 800be0a:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be10:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be16:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be1c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800be24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be26:	3304      	adds	r3, #4
 800be28:	e000      	b.n	800be2c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800be2a:	2300      	movs	r3, #0
 800be2c:	4619      	mov	r1, r3
 800be2e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800be30:	f7fe ffbc 	bl	800adac <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800be34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be36:	3304      	adds	r3, #4
 800be38:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff f84b 	bl	800aed6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800be40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fa6b 	bl	800c320 <_ZN8touchgfx4ViewI16Screen4PresenterE4bindERS1_>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	61fb      	str	r3, [r7, #28]
 800be4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be50:	61bb      	str	r3, [r7, #24]
 800be52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be54:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	330c      	adds	r3, #12
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	69f8      	ldr	r0, [r7, #28]
 800be60:	4798      	blx	r3
    newPresenter->activate();
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	69b8      	ldr	r0, [r7, #24]
 800be6a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800be6c:	6979      	ldr	r1, [r7, #20]
 800be6e:	69f8      	ldr	r0, [r7, #28]
 800be70:	f010 fe94 	bl	801cb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3310      	adds	r3, #16
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6978      	ldr	r0, [r7, #20]
 800be7e:	4798      	blx	r3
    newTransition->invalidate();
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3314      	adds	r3, #20
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6978      	ldr	r0, [r7, #20]
 800be8a:	4798      	blx	r3
}
 800be8c:	bf00      	nop
    return newPresenter;
 800be8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800be90:	4618      	mov	r0, r3
 800be92:	373c      	adds	r7, #60	@ 0x3c
 800be94:	46bd      	mov	sp, r7
 800be96:	bd90      	pop	{r4, r7, pc}
 800be98:	0802ec80 	.word	0x0802ec80
 800be9c:	0802f224 	.word	0x0802f224
 800bea0:	0802edf4 	.word	0x0802edf4
 800bea4:	0802ee38 	.word	0x0802ee38
 800bea8:	0802eedc 	.word	0x0802eedc

0800beac <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3324      	adds	r3, #36	@ 0x24
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	887a      	ldrh	r2, [r7, #2]
 800bec2:	4611      	mov	r1, r2
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	4798      	blx	r3
 800bec8:	4603      	mov	r3, r0
    }
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
	...

0800bed4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4618      	mov	r0, r3
 800bee0:	f7ff f808 	bl	800aef4 <_ZN8touchgfx6WidgetC1Ev>
 800bee4:	4a03      	ldr	r2, [pc, #12]	@ (800bef4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	08030008 	.word	0x08030008

0800bef8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	4a05      	ldr	r2, [pc, #20]	@ (800bf18 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff f805 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	08030008 	.word	0x08030008

0800bf1c <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7ff ffe7 	bl	800bef8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800bf2a:	2128      	movs	r1, #40	@ 0x28
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f020 ff9a 	bl	802ce66 <_ZdlPvj>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fe1c 	bl	800ab88 <_ZN8touchgfx10TransitionC1Ev>
 800bf50:	4a18      	ldr	r2, [pc, #96]	@ (800bfb4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x78>)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	78fa      	ldrb	r2, [r7, #3]
 800bf5a:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	81da      	strh	r2, [r3, #14]
          solid()
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3310      	adds	r3, #16
 800bf6c:	2228      	movs	r2, #40	@ 0x28
 800bf6e:	2100      	movs	r1, #0
 800bf70:	4618      	mov	r0, r3
 800bf72:	f021 ffe5 	bl	802df40 <memset>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3310      	adds	r3, #16
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff ffaa 	bl	800bed4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800bf80:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	b21a      	sxth	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	819a      	strh	r2, [r3, #12]
            break;
 800bf8a:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f103 0010 	add.w	r0, r3, #16
 800bf92:	4b09      	ldr	r3, [pc, #36]	@ (800bfb8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	b21a      	sxth	r2, r3
 800bf98:	4b08      	ldr	r3, [pc, #32]	@ (800bfbc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	b21b      	sxth	r3, r3
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	f7fe fb9f 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	0802feb8 	.word	0x0802feb8
 800bfb8:	200122b8 	.word	0x200122b8
 800bfbc:	200122ba 	.word	0x200122ba

0800bfc0 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3324      	adds	r3, #36	@ 0x24
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	887a      	ldrh	r2, [r7, #2]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	4798      	blx	r3
 800bfdc:	4603      	mov	r3, r0
    }
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	460b      	mov	r3, r1
 800bff0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3324      	adds	r3, #36	@ 0x24
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	887a      	ldrh	r2, [r7, #2]
 800bffc:	4611      	mov	r1, r2
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	4798      	blx	r3
 800c002:	4603      	mov	r3, r0
    }
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
    T& at(const uint16_t index)
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3324      	adds	r3, #36	@ 0x24
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	887a      	ldrh	r2, [r7, #2]
 800c03e:	4611      	mov	r1, r2
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	4798      	blx	r3
 800c044:	4603      	mov	r3, r0
    }
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3324      	adds	r3, #36	@ 0x24
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	887a      	ldrh	r2, [r7, #2]
 800c064:	4611      	mov	r1, r2
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
 800c06a:	4603      	mov	r3, r0
    }
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3324      	adds	r3, #36	@ 0x24
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	887a      	ldrh	r2, [r7, #2]
 800c08a:	4611      	mov	r1, r2
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	4798      	blx	r3
 800c090:	4603      	mov	r3, r0
    }
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800c09a:	b480      	push	{r7}
 800c09c:	b083      	sub	sp, #12
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	460b      	mov	r3, r1
 800c0c0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3324      	adds	r3, #36	@ 0x24
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	887a      	ldrh	r2, [r7, #2]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4798      	blx	r3
 800c0d2:	4603      	mov	r3, r0
    }
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	4a05      	ldr	r2, [pc, #20]	@ (800c0fc <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe ff13 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	08031eb8 	.word	0x08031eb8

0800c100 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ffe7 	bl	800c0dc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800c10e:	212c      	movs	r1, #44	@ 0x2c
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f020 fea8 	bl	802ce66 <_ZdlPvj>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af02      	add	r7, sp, #8
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          snapshot(),
          animationSteps(transitionSteps),
          animationCounter(0),
          relativeValue(0)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fd2a 	bl	800ab88 <_ZN8touchgfx10TransitionC1Ev>
 800c134:	4a1e      	ldr	r2, [pc, #120]	@ (800c1b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x90>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	601a      	str	r2, [r3, #0]
          snapshot(),
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	330c      	adds	r3, #12
 800c13e:	4618      	mov	r0, r3
 800c140:	f00b fe7e 	bl	8017e40 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	78fa      	ldrb	r2, [r7, #3]
 800c148:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          animationCounter(0),
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
          relativeValue(0)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	879a      	strh	r2, [r3, #60]	@ 0x3c
    {
        if (!HAL::USE_ANIMATION_STORAGE)
 800c15a:	4b16      	ldr	r3, [pc, #88]	@ (800c1b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x94>)
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	f083 0301 	eor.w	r3, r3, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x52>
        {
            // No animation storage, don't slide
            done = true;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	721a      	strb	r2, [r3, #8]
            return;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	e01a      	b.n	800c1a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x88>
        }

        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f103 000c 	add.w	r0, r3, #12
 800c178:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x98>)
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	b21a      	sxth	r2, r3
 800c17e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x9c>)
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	b21b      	sxth	r3, r3
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	4613      	mov	r3, r2
 800c188:	2200      	movs	r2, #0
 800c18a:	2100      	movs	r1, #0
 800c18c:	f7fe faac 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	330c      	adds	r3, #12
 800c194:	4618      	mov	r0, r3
 800c196:	f00b fdd6 	bl	8017d46 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
            break;
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800c19a:	4b07      	ldr	r3, [pc, #28]	@ (800c1b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x98>)
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	b21a      	sxth	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	875a      	strh	r2, [r3, #58]	@ 0x3a
            break;
 800c1a4:	bf00      	nop
            break;
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
            break;
        }
    }
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	0802fe94 	.word	0x0802fe94
 800c1b4:	200122c3 	.word	0x200122c3
 800c1b8:	200122b8 	.word	0x200122b8
 800c1bc:	200122ba 	.word	0x200122ba

0800c1c0 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3324      	adds	r3, #36	@ 0x24
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	887a      	ldrh	r2, [r7, #2]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	4798      	blx	r3
 800c1dc:	4603      	mov	r3, r0
    }
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3324      	adds	r3, #36	@ 0x24
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	887a      	ldrh	r2, [r7, #2]
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	4798      	blx	r3
 800c202:	4603      	mov	r3, r0
    }
 800c204:	4618      	mov	r0, r3
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3324      	adds	r3, #36	@ 0x24
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	887a      	ldrh	r2, [r7, #2]
 800c23e:	4611      	mov	r1, r2
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	4798      	blx	r3
 800c244:	4603      	mov	r3, r0
    }
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af02      	add	r7, sp, #8
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	460b      	mov	r3, r1
 800c25a:	70fb      	strb	r3, [r7, #3]
          solid()
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fc92 	bl	800ab88 <_ZN8touchgfx10TransitionC1Ev>
 800c264:	4a18      	ldr	r2, [pc, #96]	@ (800c2c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x78>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	78fa      	ldrb	r2, [r7, #3]
 800c26e:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	81da      	strh	r2, [r3, #14]
          solid()
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3310      	adds	r3, #16
 800c280:	2228      	movs	r2, #40	@ 0x28
 800c282:	2100      	movs	r1, #0
 800c284:	4618      	mov	r0, r3
 800c286:	f021 fe5b 	bl	802df40 <memset>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3310      	adds	r3, #16
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff fe20 	bl	800bed4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_WIDTH;
 800c294:	4b0d      	ldr	r3, [pc, #52]	@ (800c2cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	b21a      	sxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	819a      	strh	r2, [r3, #12]
            break;
 800c29e:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f103 0010 	add.w	r0, r3, #16
 800c2a6:	4b09      	ldr	r3, [pc, #36]	@ (800c2cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	b21a      	sxth	r2, r3
 800c2ac:	4b08      	ldr	r3, [pc, #32]	@ (800c2d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x80>)
 800c2ae:	881b      	ldrh	r3, [r3, #0]
 800c2b0:	b21b      	sxth	r3, r3
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	f7fe fa15 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	0802fedc 	.word	0x0802fedc
 800c2cc:	200122b8 	.word	0x200122b8
 800c2d0:	200122ba 	.word	0x200122ba

0800c2d4 <_ZN8touchgfx17AbstractPartition2atI11Screen4ViewEERT_t>:
    T& at(const uint16_t index)
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3324      	adds	r3, #36	@ 0x24
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	887a      	ldrh	r2, [r7, #2]
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	4798      	blx	r3
 800c2f0:	4603      	mov	r3, r0
    }
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <_ZN8touchgfx17AbstractPartition2atI16Screen4PresenterEERT_t>:
    T& at(const uint16_t index)
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	460b      	mov	r3, r1
 800c304:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3324      	adds	r3, #36	@ 0x24
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	887a      	ldrh	r2, [r7, #2]
 800c310:	4611      	mov	r1, r2
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
    }
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <_ZN8touchgfx4ViewI16Screen4PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	4a08      	ldr	r2, [pc, #32]	@ (800c368 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	330c      	adds	r3, #12
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff fec4 	bl	800c0dc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe fc2c 	bl	800abb4 <_ZN8touchgfx10TransitionD1Ev>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	0802fe94 	.word	0x0802fe94

0800c36c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7ff ffe1 	bl	800c33c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800c37a:	2140      	movs	r1, #64	@ 0x40
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f020 fd72 	bl	802ce66 <_ZdlPvj>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
class WipeTransition : public Transition
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	4a08      	ldr	r2, [pc, #32]	@ (800c3b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3310      	adds	r3, #16
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff fdaa 	bl	800bef8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe fc04 	bl	800abb4 <_ZN8touchgfx10TransitionD1Ev>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	0802feb8 	.word	0x0802feb8

0800c3bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff ffe1 	bl	800c38c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>
 800c3ca:	2138      	movs	r1, #56	@ 0x38
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f020 fd4a 	bl	802ce66 <_ZdlPvj>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>:
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	4a08      	ldr	r2, [pc, #32]	@ (800c408 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3310      	adds	r3, #16
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fd82 	bl	800bef8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fbdc 	bl	800abb4 <_ZN8touchgfx10TransitionD1Ev>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0802fedc 	.word	0x0802fedc

0800c40c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED0Ev>:
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff ffe1 	bl	800c3dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>
 800c41a:	2138      	movs	r1, #56	@ 0x38
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f020 fd22 	bl	802ce66 <_ZdlPvj>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <_ZN8touchgfx12NoTransitionD1Ev>:
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	4a05      	ldr	r2, [pc, #20]	@ (800c44c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fbb9 	bl	800abb4 <_ZN8touchgfx10TransitionD1Ev>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	0802ff00 	.word	0x0802ff00

0800c450 <_ZN8touchgfx12NoTransitionD0Ev>:
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff ffe7 	bl	800c42c <_ZN8touchgfx12NoTransitionD1Ev>
 800c45e:	210c      	movs	r1, #12
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f020 fd00 	bl	802ce66 <_ZdlPvj>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container and a SnapshotWidget with a snapshot of the previous Screen. The direction
     * of the transition determines the direction the contents of the container and the
     * SnapshotWidget moves.
     */
    virtual void handleTickEvent()
 800c470:	b5b0      	push	{r4, r5, r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe fbba 	bl	800abf4 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c486:	3301      	adds	r3, #1
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        if (animationCounter > animationSteps)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d907      	bls.n	800c4b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x40>
        {
            // Final step: stop the animation
            done = true;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            return;
 800c4ae:	e05f      	b.n	800c570 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x100>
        }

        // Calculate value in [0;targetValue]
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	f010 fb6f 	bl	801cba8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	81fb      	strh	r3, [r7, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800c4ce:	89fb      	ldrh	r3, [r7, #14]
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00b      	beq.n	800c4f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x82>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c4da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dd01      	ble.n	800c4e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x76>
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	e001      	b.n	800c4ea <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7a>
 800c4e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c4ea:	89fb      	ldrh	r3, [r7, #14]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	81fb      	strh	r3, [r7, #14]
        // Move snapshot
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            relativeValue = calculatedValue - snapshot.getX();
 800c4f2:	89fc      	ldrh	r4, [r7, #14]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	330c      	adds	r3, #12
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe f916 	bl	800a72a <_ZNK8touchgfx8Drawable4getXEv>
 800c4fe:	4603      	mov	r3, r0
 800c500:	b29b      	uxth	r3, r3
 800c502:	1ae3      	subs	r3, r4, r3
 800c504:	b29b      	uxth	r3, r3
 800c506:	b21a      	sxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	879a      	strh	r2, [r3, #60]	@ 0x3c
            break;
 800c50c:	bf00      	nop
            relativeValue = calculatedValue - snapshot.getY();
            break;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	331c      	adds	r3, #28
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4610      	mov	r0, r2
 800c51e:	4798      	blx	r3
 800c520:	60b8      	str	r0, [r7, #8]
        while (d)
 800c522:	e018      	b.n	800c556 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xe6>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800c524:	68bd      	ldr	r5, [r7, #8]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3330      	adds	r3, #48	@ 0x30
 800c52c:	681c      	ldr	r4, [r3, #0]
 800c52e:	68b8      	ldr	r0, [r7, #8]
 800c530:	f7fe f8fb 	bl	800a72a <_ZNK8touchgfx8Drawable4getXEv>
 800c534:	4603      	mov	r3, r0
 800c536:	b29a      	uxth	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4413      	add	r3, r2
 800c542:	b29b      	uxth	r3, r3
 800c544:	b21b      	sxth	r3, r3
 800c546:	4619      	mov	r1, r3
 800c548:	4628      	mov	r0, r5
 800c54a:	47a0      	blx	r4
                break;
 800c54c:	bf00      	nop
            case NORTH:
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }
            d = d->getNextSibling();
 800c54e:	68b8      	ldr	r0, [r7, #8]
 800c550:	f7fe f8b3 	bl	800a6ba <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c554:	60b8      	str	r0, [r7, #8]
        while (d)
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1e3      	bne.n	800c524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb4>
        }

        // Entire screen has changed, redraw
        screenContainer->invalidate();
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	461a      	mov	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3314      	adds	r3, #20
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4610      	mov	r0, r2
 800c56e:	4798      	blx	r3
    }
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c578 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800c580:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00e      	beq.n	800c5a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00a      	beq.n	800c5a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
        {
            screenContainer->remove(snapshot);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6858      	ldr	r0, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	3364      	adds	r3, #100	@ 0x64
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	320c      	adds	r2, #12
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	4798      	blx	r3
        }
    }
 800c5a6:	bf00      	nop
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	200122c3 	.word	0x200122c3

0800c5b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 800c5b4:	b5b0      	push	{r4, r5, r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fb2c 	bl	800ac1c <_ZN8touchgfx10Transition4initEv>

        if (done)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7a1b      	ldrb	r3, [r3, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d132      	bne.n	800c632 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x7e>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	331c      	adds	r3, #28
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4610      	mov	r0, r2
 800c5dc:	4798      	blx	r3
 800c5de:	60f8      	str	r0, [r7, #12]
        while (d)
 800c5e0:	e018      	b.n	800c614 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x60>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800c5e2:	68fd      	ldr	r5, [r7, #12]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3330      	adds	r3, #48	@ 0x30
 800c5ea:	681c      	ldr	r4, [r3, #0]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7fe f89c 	bl	800a72a <_ZNK8touchgfx8Drawable4getXEv>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	b29b      	uxth	r3, r3
 800c602:	b21b      	sxth	r3, r3
 800c604:	4619      	mov	r1, r3
 800c606:	4628      	mov	r0, r5
 800c608:	47a0      	blx	r4
                break;
 800c60a:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7fe f854 	bl	800a6ba <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c612:	60f8      	str	r0, [r7, #12]
        while (d)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e3      	bne.n	800c5e2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x2e>
        }

        screenContainer->add(snapshot);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6858      	ldr	r0, [r3, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3360      	adds	r3, #96	@ 0x60
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	320c      	adds	r2, #12
 800c62c:	4611      	mov	r1, r2
 800c62e:	4798      	blx	r3
 800c630:	e000      	b.n	800c634 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x80>
            return;
 800c632:	bf00      	nop
    }
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c63c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08e      	sub	sp, #56	@ 0x38
 800c640:	af02      	add	r7, sp, #8
 800c642:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4618      	mov	r0, r3
 800c648:	f7fe fad4 	bl	800abf4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7a9b      	ldrb	r3, [r3, #10]
 800c650:	3301      	adds	r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter > animationSteps)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7a9a      	ldrb	r2, [r3, #10]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7a5b      	ldrb	r3, [r3, #9]
 800c660:	429a      	cmp	r2, r3
 800c662:	d906      	bls.n	800c672 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	729a      	strb	r2, [r3, #10]
            return;
 800c670:	e077      	b.n	800c762 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
        }

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	7a9b      	ldrb	r3, [r3, #10]
 800c676:	4618      	mov	r0, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	7a5b      	ldrb	r3, [r3, #9]
 800c682:	2100      	movs	r1, #0
 800c684:	f010 fa90 	bl	801cba8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c696:	b29b      	uxth	r3, r3
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d011      	beq.n	800c6c6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8a>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800c6b0:	2a00      	cmp	r2, #0
 800c6b2:	dd01      	ble.n	800c6b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7c>
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	e001      	b.n	800c6bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
 800c6b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6bc:	4413      	add	r3, r2
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	b21a      	sxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	81da      	strh	r2, [r3, #14]
        switch (templateDirection)
        {
        case EAST:
            {
                // Cover must have width of remaining part
                const uint16_t prevSolidWidth = solid.getWidth();
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	3310      	adds	r3, #16
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe f83a 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f103 0010 	add.w	r0, r3, #16
 800c6da:	4b23      	ldr	r3, [pc, #140]	@ (800c768 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x12c>)
 800c6dc:	881a      	ldrh	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	b21b      	sxth	r3, r3
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f7fe f872 	bl	800a7d6 <_ZN8touchgfx8Drawable8setWidthEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3310      	adds	r3, #16
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fe f824 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3310      	adds	r3, #16
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe f81a 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c710:	4603      	mov	r3, r0
 800c712:	4619      	mov	r1, r3
 800c714:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800c718:	4b14      	ldr	r3, [pc, #80]	@ (800c76c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x130>)
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	b21b      	sxth	r3, r3
 800c71e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	4613      	mov	r3, r2
 800c726:	2200      	movs	r2, #0
 800c728:	f7fd ff43 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	4618      	mov	r0, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3310      	adds	r3, #16
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c740:	4611      	mov	r1, r2
 800c742:	4798      	blx	r3
                break;
 800c744:	bf00      	nop
        }

        // The WipeTransition only draws to parts of the non-TFT
        // framebuffer. To avoid glitches in Double buffering mode
        // both framebuffers must be made identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7a9b      	ldrb	r3, [r3, #10]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d109      	bne.n	800c762 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
 800c74e:	4b08      	ldr	r3, [pc, #32]	@ (800c770 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x134>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d005      	beq.n	800c762 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800c756:	f00e fc1d 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800c75a:	4603      	mov	r3, r0
 800c75c:	4618      	mov	r0, r3
 800c75e:	f00e fc1f 	bl	801afa0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }
    }
 800c762:	3730      	adds	r7, #48	@ 0x30
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	200122b8 	.word	0x200122b8
 800c76c:	200122ba 	.word	0x200122ba
 800c770:	200122c2 	.word	0x200122c2

0800c774 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6858      	ldr	r0, [r3, #4]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3364      	adds	r3, #100	@ 0x64
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	3210      	adds	r2, #16
 800c78e:	4611      	mov	r1, r2
 800c790:	4798      	blx	r3
    }
 800c792:	bf00      	nop
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b082      	sub	sp, #8
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe fa39 	bl	800ac1c <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6858      	ldr	r0, [r3, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3360      	adds	r3, #96	@ 0x60
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	3210      	adds	r2, #16
 800c7bc:	4611      	mov	r1, r2
 800c7be:	4798      	blx	r3
    }
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
    {
    }
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08e      	sub	sp, #56	@ 0x38
 800c7e0:	af02      	add	r7, sp, #8
 800c7e2:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fe fa04 	bl	800abf4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7a9b      	ldrb	r3, [r3, #10]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7a9a      	ldrb	r2, [r3, #10]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7a5b      	ldrb	r3, [r3, #9]
 800c800:	429a      	cmp	r2, r3
 800c802:	d906      	bls.n	800c812 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x36>
            done = true;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	729a      	strb	r2, [r3, #10]
            return;
 800c810:	e079      	b.n	800c906 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12a>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7a9b      	ldrb	r3, [r3, #10]
 800c816:	4618      	mov	r0, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7a5b      	ldrb	r3, [r3, #9]
 800c822:	2100      	movs	r1, #0
 800c824:	f010 f9c0 	bl	801cba8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	81da      	strh	r2, [r3, #14]
        if ((calculatedValue % 2) != 0)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c836:	b29b      	uxth	r3, r3
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d011      	beq.n	800c866 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800c850:	2a00      	cmp	r2, #0
 800c852:	dd01      	ble.n	800c858 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7c>
 800c854:	2201      	movs	r2, #1
 800c856:	e001      	b.n	800c85c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
 800c858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c85c:	4413      	add	r3, r2
 800c85e:	b29b      	uxth	r3, r3
 800c860:	b21a      	sxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	81da      	strh	r2, [r3, #14]
                const uint16_t prevSolidPos = solid.getX();
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3310      	adds	r3, #16
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fd ff5d 	bl	800a72a <_ZNK8touchgfx8Drawable4getXEv>
 800c870:	4603      	mov	r3, r0
 800c872:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f103 0010 	add.w	r0, r3, #16
 800c87a:	4b24      	ldr	r3, [pc, #144]	@ (800c90c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x130>)
 800c87c:	881a      	ldrh	r2, [r3, #0]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c884:	b29b      	uxth	r3, r3
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	b29b      	uxth	r3, r3
 800c88a:	b21b      	sxth	r3, r3
 800c88c:	4619      	mov	r1, r3
 800c88e:	f7fd ffa2 	bl	800a7d6 <_ZN8touchgfx8Drawable8setWidthEs>
                solid.setX(calculatedValue);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f103 0210 	add.w	r2, r3, #16
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	f7fd ff5c 	bl	800a75e <_ZN8touchgfx8Drawable4setXEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                Rect r(prevSolidPos, 0, delta, HAL::DISPLAY_HEIGHT);
 800c8b4:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 800c8b8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800c8bc:	4b14      	ldr	r3, [pc, #80]	@ (800c910 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x134>)
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	b21b      	sxth	r3, r3
 800c8c2:	f107 001c 	add.w	r0, r7, #28
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f7fd fe71 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3310      	adds	r3, #16
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f107 021c 	add.w	r2, r7, #28
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4798      	blx	r3
                break;
 800c8e8:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7a9b      	ldrb	r3, [r3, #10]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d109      	bne.n	800c906 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12a>
 800c8f2:	4b08      	ldr	r3, [pc, #32]	@ (800c914 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x138>)
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d005      	beq.n	800c906 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800c8fa:	f00e fb4b 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800c8fe:	4603      	mov	r3, r0
 800c900:	4618      	mov	r0, r3
 800c902:	f00e fb4d 	bl	801afa0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
    }
 800c906:	3730      	adds	r7, #48	@ 0x30
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	200122b8 	.word	0x200122b8
 800c910:	200122ba 	.word	0x200122ba
 800c914:	200122c2 	.word	0x200122c2

0800c918 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6858      	ldr	r0, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3364      	adds	r3, #100	@ 0x64
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	3210      	adds	r2, #16
 800c932:	4611      	mov	r1, r2
 800c934:	4798      	blx	r3
    }
 800c936:	bf00      	nop
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
        Transition::init();
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe f967 	bl	800ac1c <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6858      	ldr	r0, [r3, #4]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3360      	adds	r3, #96	@ 0x60
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	3210      	adds	r2, #16
 800c960:	4611      	mov	r1, r2
 800c962:	4798      	blx	r3
    }
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE10invalidateEv>:
    virtual void invalidate()
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
    }
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	68d2      	ldr	r2, [r2, #12]
 800c990:	1052      	asrs	r2, r2, #1
 800c992:	1899      	adds	r1, r3, r2
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	e00a      	b.n	800c9bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	68d2      	ldr	r2, [r2, #12]
 800c9ae:	1052      	asrs	r2, r2, #1
 800c9b0:	4413      	add	r3, r2
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	6892      	ldr	r2, [r2, #8]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4608      	mov	r0, r1
 800c9be:	4798      	blx	r3
    }
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d010      	beq.n	800c9fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d107      	bne.n	800c9f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e000      	b.n	800c9f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d001      	beq.n	800c9fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e000      	b.n	800c9fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800c9fa:	2300      	movs	r3, #0
    }
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
        : color(col)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	601a      	str	r2, [r3, #0]
    }
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800ca26:	b480      	push	{r7}
 800ca28:	b083      	sub	sp, #12
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	460b      	mov	r3, r1
 800ca30:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	887a      	ldrh	r2, [r7, #2]
 800ca36:	801a      	strh	r2, [r3, #0]
    {
    }
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	78fa      	ldrb	r2, [r7, #3]
 800ca56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
	...

0800ca68 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	4a05      	ldr	r2, [pc, #20]	@ (800ca88 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fd fdeb 	bl	800a654 <_ZN8touchgfx8DrawableD1Ev>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4618      	mov	r0, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	0803136c 	.word	0x0803136c

0800ca8c <_ZN8touchgfx9ContainerD0Ev>:
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff ffe7 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800ca9a:	212c      	movs	r1, #44	@ 0x2c
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f020 f9e2 	bl	802ce66 <_ZdlPvj>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4618      	mov	r0, r3
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
    {
 800cab4:	4a06      	ldr	r2, [pc, #24]	@ (800cad0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	601a      	str	r2, [r3, #0]
    }
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3304      	adds	r3, #4
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7ff ffd2 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	08032358 	.word	0x08032358

0800cad4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
    }
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff ffe5 	bl	800caac <_ZN8touchgfx6ScreenD1Ev>
 800cae2:	213c      	movs	r1, #60	@ 0x3c
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f020 f9be 	bl	802ce66 <_ZdlPvj>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
    {
    }
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
    {
    }
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
    {
    }
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
    {
    }
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3304      	adds	r3, #4
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f007 fe51 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800cb72:	bf00      	nop
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
	...

0800cb7c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4618      	mov	r0, r3
 800cb88:	2326      	movs	r3, #38	@ 0x26
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f021 f9d7 	bl	802df40 <memset>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe f9ad 	bl	800aef4 <_ZN8touchgfx6WidgetC1Ev>
 800cb9a:	4a09      	ldr	r2, [pc, #36]	@ (800cbc0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	22ff      	movs	r2, #255	@ 0xff
 800cba4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3328      	adds	r3, #40	@ 0x28
 800cbac:	2100      	movs	r1, #0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff ff2a 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	08031fb8 	.word	0x08031fb8

0800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	683a      	ldr	r2, [r7, #0]
 800cbd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	2326      	movs	r3, #38	@ 0x26
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	f021 f9a4 	bl	802df40 <memset>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe f97a 	bl	800aef4 <_ZN8touchgfx6WidgetC1Ev>
 800cc00:	4a09      	ldr	r2, [pc, #36]	@ (800cc28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	8812      	ldrh	r2, [r2, #0]
 800cc0c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	22ff      	movs	r2, #255	@ 0xff
 800cc12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f00b fe13 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	08032124 	.word	0x08032124

0800cc2c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4618      	mov	r0, r3
 800cc38:	2326      	movs	r3, #38	@ 0x26
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	f021 f97f 	bl	802df40 <memset>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fe f955 	bl	800aef4 <_ZN8touchgfx6WidgetC1Ev>
 800cc4a:	4a0a      	ldr	r2, [pc, #40]	@ (800cc74 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	629a      	str	r2, [r3, #40]	@ 0x28
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2101      	movs	r1, #1
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff feef 	bl	800ca46 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	08031e48 	.word	0x08031e48

0800cc78 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	4a05      	ldr	r2, [pc, #20]	@ (800ccb4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fe f937 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	08031e48 	.word	0x08031e48

0800ccb8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff ffe7 	bl	800cc94 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ccc6:	2130      	movs	r1, #48	@ 0x30
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f020 f8cc 	bl	802ce66 <_ZdlPvj>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff ffa2 	bl	800cc2c <_ZN8touchgfx14AbstractButtonC1Ev>
 800cce8:	4a0c      	ldr	r2, [pc, #48]	@ (800cd1c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	332e      	adds	r3, #46	@ 0x2e
 800ccf2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fe95 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3330      	adds	r3, #48	@ 0x30
 800cd00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff fe8e 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	22ff      	movs	r2, #255	@ 0xff
 800cd0e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	08032020 	.word	0x08032020

0800cd20 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800cd28:	f00e f934 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800cd2c:	4603      	mov	r3, r0
    }
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	4a05      	ldr	r2, [pc, #20]	@ (800cd58 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff feaf 	bl	800caac <_ZN8touchgfx6ScreenD1Ev>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4618      	mov	r0, r3
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	08030164 	.word	0x08030164

0800cd5c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff ffe7 	bl	800cd38 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800cd6a:	2140      	movs	r1, #64	@ 0x40
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f020 f87a 	bl	802ce66 <_ZdlPvj>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4618      	mov	r0, r3
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	4a05      	ldr	r2, [pc, #20]	@ (800cd9c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe f8c3 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	08031fb8 	.word	0x08031fb8

0800cda0 <_ZN8touchgfx3BoxD0Ev>:
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7ff ffe7 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 800cdae:	212c      	movs	r1, #44	@ 0x2c
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f020 f858 	bl	802ce66 <_ZdlPvj>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	4a05      	ldr	r2, [pc, #20]	@ (800cde0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fe f8a1 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	08032124 	.word	0x08032124

0800cde4 <_ZN8touchgfx5ImageD0Ev>:
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff ffe7 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 800cdf2:	212c      	movs	r1, #44	@ 0x2c
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f020 f836 	bl	802ce66 <_ZdlPvj>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	4a05      	ldr	r2, [pc, #20]	@ (800ce24 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	601a      	str	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff ff3d 	bl	800cc94 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	08032020 	.word	0x08032020

0800ce28 <_ZN8touchgfx6ButtonD0Ev>:
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff ffe7 	bl	800ce04 <_ZN8touchgfx6ButtonD1Ev>
 800ce36:	2134      	movs	r1, #52	@ 0x34
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f020 f814 	bl	802ce66 <_ZdlPvj>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4618      	mov	r0, r3
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	4a05      	ldr	r2, [pc, #20]	@ (800ce68 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 f9b3 	bl	800d1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	0803014c 	.word	0x0803014c

0800ce6c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff ffe7 	bl	800ce48 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800ce7a:	2110      	movs	r1, #16
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f01f fff2 	bl	802ce66 <_ZdlPvj>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4618      	mov	r0, r3
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800ce8c:	b590      	push	{r4, r7, lr}
 800ce8e:	b08f      	sub	sp, #60	@ 0x3c
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 f94e 	bl	800d138 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800ce9c:	4a76      	ldr	r2, [pc, #472]	@ (800d078 <_ZN15Screen1ViewBaseC1Ev+0x1ec>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	601a      	str	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	3340      	adds	r3, #64	@ 0x40
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff fe68 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	336c      	adds	r3, #108	@ 0x6c
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fe63 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800cebc:	f107 0308 	add.w	r3, r7, #8
 800cec0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff fdae 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800ceca:	f107 0308 	add.w	r3, r7, #8
 800cece:	4619      	mov	r1, r3
 800ced0:	4620      	mov	r0, r4
 800ced2:	f7ff fe85 	bl	800cbe0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	33c4      	adds	r3, #196	@ 0xc4
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff fefc 	bl	800ccd8 <_ZN8touchgfx6ButtonC1Ev>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 800cee6:	4b65      	ldr	r3, [pc, #404]	@ (800d07c <_ZN15Screen1ViewBaseC1Ev+0x1f0>)
 800cee8:	60fb      	str	r3, [r7, #12]
 800ceea:	2300      	movs	r3, #0
 800ceec:	613b      	str	r3, [r7, #16]
 800ceee:	f107 030c 	add.w	r3, r7, #12
 800cef2:	cb0c      	ldmia	r3, {r2, r3}
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	f000 f945 	bl	800d184 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 800, 480);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800cf00:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	f7fd fbeb 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf24:	2300      	movs	r3, #0
 800cf26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800cf2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cf2e:	041a      	lsls	r2, r3, #16
 800cf30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf34:	021b      	lsls	r3, r3, #8
 800cf36:	431a      	orrs	r2, r3
 800cf38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cf42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf46:	4611      	mov	r1, r2
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7ff fd5d 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf50:	4619      	mov	r1, r3
 800cf52:	4620      	mov	r0, r4
 800cf54:	f7ff fe36 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3340      	adds	r3, #64	@ 0x40
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f7ff fdfb 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800cf6c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800cf76:	2200      	movs	r2, #0
 800cf78:	2100      	movs	r1, #0
 800cf7a:	f7fd fbb5 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800cf84:	23ff      	movs	r3, #255	@ 0xff
 800cf86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cf8a:	23ff      	movs	r3, #255	@ 0xff
 800cf8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800cf90:	23ff      	movs	r3, #255	@ 0xff
 800cf92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800cf96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf9a:	041a      	lsls	r2, r3, #16
 800cf9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cfa0:	021b      	lsls	r3, r3, #8
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cfae:	f107 0320 	add.w	r3, r7, #32
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fd27 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f7ff fe00 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	336c      	adds	r3, #108	@ 0x6c
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4610      	mov	r0, r2
 800cfce:	f7ff fdc5 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	3398      	adds	r3, #152	@ 0x98
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2100      	movs	r1, #0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fd fbdd 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_NARIT_LOGO_ID));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800cfe6:	f107 0314 	add.w	r3, r7, #20
 800cfea:	2105      	movs	r1, #5
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7ff fd1a 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	4619      	mov	r1, r3
 800cff8:	4620      	mov	r0, r4
 800cffa:	f00b fc23 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	3398      	adds	r3, #152	@ 0x98
 800d004:	4619      	mov	r1, r3
 800d006:	4610      	mov	r0, r2
 800d008:	f7ff fda8 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(743, 423);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	33c4      	adds	r3, #196	@ 0xc4
 800d010:	f240 12a7 	movw	r2, #423	@ 0x1a7
 800d014:	f240 21e7 	movw	r1, #743	@ 0x2e7
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fd fbbe 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800d024:	f107 0318 	add.w	r3, r7, #24
 800d028:	2106      	movs	r1, #6
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff fcfb 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800d030:	f107 031c 	add.w	r3, r7, #28
 800d034:	2107      	movs	r1, #7
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff fcf5 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800d03c:	f107 021c 	add.w	r2, r7, #28
 800d040:	f107 0318 	add.w	r3, r7, #24
 800d044:	4619      	mov	r1, r3
 800d046:	4620      	mov	r0, r4
 800d048:	f00b fadc 	bl	8018604 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	33f8      	adds	r3, #248	@ 0xf8
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f7ff fe0d 	bl	800cc78 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	33c4      	adds	r3, #196	@ 0xc4
 800d064:	4619      	mov	r1, r3
 800d066:	4610      	mov	r0, r2
 800d068:	f7ff fd78 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4618      	mov	r0, r3
 800d070:	3734      	adds	r7, #52	@ 0x34
 800d072:	46bd      	mov	sp, r7
 800d074:	bd90      	pop	{r4, r7, pc}
 800d076:	bf00      	nop
 800d078:	08030118 	.word	0x08030118
 800d07c:	0800d10f 	.word	0x0800d10f

0800d080 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	4a12      	ldr	r2, [pc, #72]	@ (800d0d4 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
{

}
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	33f8      	adds	r3, #248	@ 0xf8
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fed8 	bl	800ce48 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	33c4      	adds	r3, #196	@ 0xc4
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff feb1 	bl	800ce04 <_ZN8touchgfx6ButtonD1Ev>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3398      	adds	r3, #152	@ 0x98
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fe8a 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	336c      	adds	r3, #108	@ 0x6c
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fe63 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3340      	adds	r3, #64	@ 0x40
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7ff fe5e 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff fe38 	bl	800cd38 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	08030118 	.word	0x08030118

0800d0d8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
}
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ffcd 	bl	800d080 <_ZN15Screen1ViewBaseD1Ev>
 800d0e6:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f01f febb 	bl	802ce66 <_ZdlPvj>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]

}
 800d102:	bf00      	nop
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	33c4      	adds	r3, #196	@ 0xc4
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d106      	bne.n	800d130 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen3
        //Go to Screen3 with screen transition towards West
        application().gotoScreen3ScreenSlideTransitionWest();
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fdfc 	bl	800cd20 <_ZN15Screen1ViewBase11applicationEv>
 800d128:	4603      	mov	r3, r0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fe f850 	bl	800b1d0 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionWestEv>
    }
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4618      	mov	r0, r3
 800d144:	f00f fb7e 	bl	801c844 <_ZN8touchgfx6ScreenC1Ev>
 800d148:	4a05      	ldr	r2, [pc, #20]	@ (800d160 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	08030164 	.word	0x08030164

0800d164 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	4a04      	ldr	r2, [pc, #16]	@ (800d180 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr
 800d180:	08030198 	.word	0x08030198

0800d184 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	4639      	mov	r1, r7
 800d190:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff ffe4 	bl	800d164 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d19c:	4a08      	ldr	r2, [pc, #32]	@ (800d1c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	605a      	str	r2, [r3, #4]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	463a      	mov	r2, r7
 800d1ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	0803014c 	.word	0x0803014c

0800d1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
    }
 800d1cc:	4a04      	ldr	r2, [pc, #16]	@ (800d1e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	08030198 	.word	0x08030198

0800d1e4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
    }
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7ff ffe9 	bl	800d1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d1f2:	2104      	movs	r1, #4
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f01f fe36 	bl	802ce66 <_ZdlPvj>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	68d2      	ldr	r2, [r2, #12]
 800d216:	1052      	asrs	r2, r2, #1
 800d218:	1898      	adds	r0, r3, r2
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d102      	bne.n	800d22c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	e00a      	b.n	800d242 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	68d2      	ldr	r2, [r2, #12]
 800d234:	1052      	asrs	r2, r2, #1
 800d236:	4413      	add	r3, r2
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	6892      	ldr	r2, [r2, #8]
 800d23e:	4413      	add	r3, r2
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	4798      	blx	r3
    }
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d010      	beq.n	800d280 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d276:	2300      	movs	r3, #0
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d001      	beq.n	800d280 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e000      	b.n	800d282 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d280:	2300      	movs	r3, #0
    }
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
        : color(0)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]
    }
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	370c      	adds	r7, #12
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800d2aa:	b480      	push	{r7}
 800d2ac:	b083      	sub	sp, #12
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
        return color;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
    }
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800d2c2:	b480      	push	{r7}
 800d2c4:	b083      	sub	sp, #12
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
        return rect.height;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800d314:	4a06      	ldr	r2, [pc, #24]	@ (800d330 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	809a      	strh	r2, [r3, #4]
    {
    }
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	08030700 	.word	0x08030700

0800d334 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    {
 800d33c:	4a04      	ldr	r2, [pc, #16]	@ (800d350 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	601a      	str	r2, [r3, #0]
    }
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	08030700 	.word	0x08030700

0800d354 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
    }
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff ffe9 	bl	800d334 <_ZN8touchgfx15AbstractPainterD1Ev>
 800d362:	2108      	movs	r1, #8
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f01f fd7e 	bl	802ce66 <_ZdlPvj>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800d37c:	2300      	movs	r3, #0
    }
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	809a      	strh	r2, [r3, #4]
        return true;
 800d39e:	2301      	movs	r3, #1
    }
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    {
        return;
 800d3b4:	bf00      	nop
    }
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
            : v(i)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	601a      	str	r2, [r3, #0]
        {
        }
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr

0800d3de <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800d3de:	b480      	push	{r7}
 800d3e0:	b083      	sub	sp, #12
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
        {
            return v;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
        }
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
         *
         * @param  q5 The Q5 to add to this.
         *
         * @return The result of the operation.
         */
        Q5 operator+(const Q5& q5) const
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	6039      	str	r1, [r7, #0]
        {
            return Q5(v + q5.v);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	441a      	add	r2, r3
 800d40a:	f107 030c 	add.w	r3, r7, #12
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff ffd5 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d416:	68fb      	ldr	r3, [r7, #12]
        }
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
         *
         * @param  q5 The Q5 to subtract from this.
         *
         * @return The result of the operation.
         */
        Q5 operator-(const Q5& q5) const
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
        {
            return Q5(v - q5.v);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	1ad2      	subs	r2, r2, r3
 800d434:	f107 030c 	add.w	r3, r7, #12
 800d438:	4611      	mov	r1, r2
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7ff ffc0 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d440:	68fb      	ldr	r3, [r7, #12]
        }
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ5(Q5 factor1, Q5 factor2, Q5 divisor)
 800d44a:	b5b0      	push	{r4, r5, r7, lr}
 800d44c:	b086      	sub	sp, #24
 800d44e:	af00      	add	r7, sp, #0
 800d450:	60f8      	str	r0, [r7, #12]
 800d452:	60b9      	str	r1, [r7, #8]
 800d454:	607a      	str	r2, [r7, #4]
    {
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800d456:	f107 030c 	add.w	r3, r7, #12
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff ffbf 	bl	800d3de <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800d460:	4604      	mov	r4, r0
 800d462:	f107 0308 	add.w	r3, r7, #8
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff ffb9 	bl	800d3de <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800d46c:	4605      	mov	r5, r0
 800d46e:	1d3b      	adds	r3, r7, #4
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff ffb4 	bl	800d3de <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800d476:	4603      	mov	r3, r0
 800d478:	461a      	mov	r2, r3
 800d47a:	4629      	mov	r1, r5
 800d47c:	4620      	mov	r0, r4
 800d47e:	f00f f83e 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 800d482:	4602      	mov	r2, r0
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	4611      	mov	r1, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff ff98 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d490:	697b      	ldr	r3, [r7, #20]
    }
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bdb0      	pop	{r4, r5, r7, pc}

0800d49a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b094      	sub	sp, #80	@ 0x50
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800d4a6:	f107 0310 	add.w	r3, r7, #16
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	68b9      	ldr	r1, [r7, #8]
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f00f f806 	bl	801c4c0 <_ZN8touchgfx6muldivElllRl>
 800d4b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (result >= 0)
 800d4b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	db2f      	blt.n	800d51c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x82>
 800d4bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4be:	64bb      	str	r3, [r7, #72]	@ 0x48
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800d4c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ff78 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800d4d2:	617b      	str	r3, [r7, #20]
 800d4d4:	f107 031c 	add.w	r3, r7, #28
 800d4d8:	2120      	movs	r1, #32
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff ff70 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	f107 0320 	add.w	r3, r7, #32
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff ff69 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff ff63 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4fc:	6a39      	ldr	r1, [r7, #32]
 800d4fe:	69f8      	ldr	r0, [r7, #28]
 800d500:	f7ff ffa3 	bl	800d44a <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800d504:	4603      	mov	r3, r0
 800d506:	61bb      	str	r3, [r7, #24]
 800d508:	f107 0218 	add.w	r2, r7, #24
 800d50c:	f107 0314 	add.w	r3, r7, #20
 800d510:	4611      	mov	r1, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff ff6f 	bl	800d3f6 <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800d518:	4603      	mov	r3, r0
 800d51a:	e02e      	b.n	800d57a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0xe0>
 800d51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d51e:	647b      	str	r3, [r7, #68]	@ 0x44
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800d520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d528:	4611      	mov	r1, r2
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff ff48 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800d532:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d534:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d538:	2120      	movs	r1, #32
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff ff40 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d540:	693a      	ldr	r2, [r7, #16]
 800d542:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d546:	4611      	mov	r1, r2
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff ff39 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d54e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d552:	6879      	ldr	r1, [r7, #4]
 800d554:	4618      	mov	r0, r3
 800d556:	f7ff ff33 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d55a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d55c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d55e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d560:	f7ff ff73 	bl	800d44a <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800d564:	4603      	mov	r3, r0
 800d566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d568:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d56c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d570:	4611      	mov	r1, r2
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ff54 	bl	800d420 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800d578:	4603      	mov	r3, r0
    }
 800d57a:	4618      	mov	r0, r3
 800d57c:	3750      	adds	r7, #80	@ 0x50
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
 800d582:	b480      	push	{r7}
 800d584:	b083      	sub	sp, #12
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
    {
        return xScale;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
 800d58e:	4618      	mov	r0, r3
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
 800d59a:	b480      	push	{r7}
 800d59c:	b083      	sub	sp, #12
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
    {
        return yScale;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha()
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	78fa      	ldrb	r2, [r7, #3]
 800d5c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b08c      	sub	sp, #48	@ 0x30
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	33a4      	adds	r3, #164	@ 0xa4
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	61fa      	str	r2, [r7, #28]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	61ba      	str	r2, [r7, #24]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800d5ee:	69fa      	ldr	r2, [r7, #28]
 800d5f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d5f2:	69b9      	ldr	r1, [r7, #24]
 800d5f4:	6179      	str	r1, [r7, #20]
 800d5f6:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	6939      	ldr	r1, [r7, #16]
 800d5fc:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, xScale);
 800d600:	bf00      	nop
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d60a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d60c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d60e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d610:	6279      	str	r1, [r7, #36]	@ 0x24
 800d612:	623a      	str	r2, [r7, #32]
        return i * scale;
 800d614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d616:	6a39      	ldr	r1, [r7, #32]
 800d618:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800d61c:	bf00      	nop
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800d61e:	4601      	mov	r1, r0
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	4798      	blx	r3
    }
 800d624:	bf00      	nop
 800d626:	3730      	adds	r7, #48	@ 0x30
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
    virtual void setGraphRangeX(float min, float max)
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08e      	sub	sp, #56	@ 0x38
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	ed87 0a02 	vstr	s0, [r7, #8]
 800d638:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	33a4      	adds	r3, #164	@ 0xa4
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	623a      	str	r2, [r7, #32]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledX(float f) const
    {
        return float2scaled(f, xScale);
 800d64c:	6a3a      	ldr	r2, [r7, #32]
 800d64e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d650:	69f9      	ldr	r1, [r7, #28]
 800d652:	61b9      	str	r1, [r7, #24]
 800d654:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800d656:	697a      	ldr	r2, [r7, #20]
 800d658:	ee07 2a90 	vmov	s15, r2
 800d65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d660:	ed97 7a06 	vldr	s14, [r7, #24]
 800d664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d668:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800d66c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d678:	db0a      	blt.n	800d690 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x64>
            return (int)(fs + 0.5f);
 800d67a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d67e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d682:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d68a:	ee17 0a90 	vmov	r0, s15
 800d68e:	e019      	b.n	800d6c4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d690:	edd7 7a04 	vldr	s15, [r7, #16]
 800d694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d698:	ee17 2a90 	vmov	r2, s15
 800d69c:	3a01      	subs	r2, #1
 800d69e:	edd7 7a04 	vldr	s15, [r7, #16]
 800d6a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6aa:	ed97 7a04 	vldr	s14, [r7, #16]
 800d6ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6b2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d6b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6be:	ee17 1a90 	vmov	r1, s15
 800d6c2:	1850      	adds	r0, r2, r1
        return float2scaled(f, xScale);
 800d6c4:	bf00      	nop
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	637a      	str	r2, [r7, #52]	@ 0x34
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d6d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6d4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d6d6:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800d6d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6da:	ee07 2a90 	vmov	s15, r2
 800d6de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6e2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800d6ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d6f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fa:	db0a      	blt.n	800d712 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0xe6>
            return (int)(fs + 0.5f);
 800d6fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d700:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d704:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d70c:	ee17 2a90 	vmov	r2, s15
 800d710:	e019      	b.n	800d746 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d712:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d71a:	ee17 2a90 	vmov	r2, s15
 800d71e:	3a01      	subs	r2, #1
 800d720:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d72c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d730:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d734:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d73c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d740:	ee17 1a90 	vmov	r1, s15
 800d744:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800d746:	bf00      	nop
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800d748:	4601      	mov	r1, r0
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	4798      	blx	r3
    }
 800d74e:	bf00      	nop
 800d750:	3738      	adds	r7, #56	@ 0x38
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800d756:	b580      	push	{r7, lr}
 800d758:	b088      	sub	sp, #32
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	60f8      	str	r0, [r7, #12]
 800d75e:	460b      	mov	r3, r1
 800d760:	607a      	str	r2, [r7, #4]
 800d762:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	33b0      	adds	r3, #176	@ 0xb0
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	61fa      	str	r2, [r7, #28]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, xScale);
 800d774:	69fa      	ldr	r2, [r7, #28]
 800d776:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d778:	69b9      	ldr	r1, [r7, #24]
 800d77a:	6179      	str	r1, [r7, #20]
 800d77c:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	6939      	ldr	r1, [r7, #16]
 800d782:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800d786:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800d788:	7af9      	ldrb	r1, [r7, #11]
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	4798      	blx	r3
    }
 800d78e:	bf00      	nop
 800d790:	3720      	adds	r7, #32
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 800d796:	b580      	push	{r7, lr}
 800d798:	b08a      	sub	sp, #40	@ 0x28
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	60f8      	str	r0, [r7, #12]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	ed87 0a01 	vstr	s0, [r7, #4]
 800d7a4:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	33b0      	adds	r3, #176	@ 0xb0
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	623a      	str	r2, [r7, #32]
        return float2scaled(f, xScale);
 800d7b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d7ba:	6a39      	ldr	r1, [r7, #32]
 800d7bc:	61f9      	str	r1, [r7, #28]
 800d7be:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800d7c0:	69ba      	ldr	r2, [r7, #24]
 800d7c2:	ee07 2a90 	vmov	s15, r2
 800d7c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ca:	ed97 7a07 	vldr	s14, [r7, #28]
 800d7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d2:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800d7d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e2:	db0a      	blt.n	800d7fa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800d7e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d7ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7f4:	ee17 2a90 	vmov	r2, s15
 800d7f8:	e019      	b.n	800d82e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d7fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d802:	ee17 2a90 	vmov	r2, s15
 800d806:	3a01      	subs	r2, #1
 800d808:	edd7 7a05 	vldr	s15, [r7, #20]
 800d80c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d814:	ed97 7a05 	vldr	s14, [r7, #20]
 800d818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d81c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d820:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d828:	ee17 1a90 	vmov	r1, s15
 800d82c:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800d82e:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800d830:	7af9      	ldrb	r1, [r7, #11]
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	4798      	blx	r3
    }
 800d836:	bf00      	nop
 800d838:	3728      	adds	r7, #40	@ 0x28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800d83e:	b580      	push	{r7, lr}
 800d840:	b08c      	sub	sp, #48	@ 0x30
 800d842:	af00      	add	r7, sp, #0
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	607a      	str	r2, [r7, #4]
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	33bc      	adds	r3, #188	@ 0xbc
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	61fa      	str	r2, [r7, #28]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800d85a:	69fa      	ldr	r2, [r7, #28]
 800d85c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d85e:	69b9      	ldr	r1, [r7, #24]
 800d860:	6179      	str	r1, [r7, #20]
 800d862:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	6939      	ldr	r1, [r7, #16]
 800d868:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, yScale);
 800d86c:	bf00      	nop
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d87a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d87c:	6279      	str	r1, [r7, #36]	@ 0x24
 800d87e:	623a      	str	r2, [r7, #32]
        return i * scale;
 800d880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d882:	6a39      	ldr	r1, [r7, #32]
 800d884:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800d888:	bf00      	nop
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800d88a:	4601      	mov	r1, r0
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	4798      	blx	r3
    }
 800d890:	bf00      	nop
 800d892:	3730      	adds	r7, #48	@ 0x30
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
    virtual void setGraphRangeY(float min, float max)
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	@ 0x38
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	ed87 0a02 	vstr	s0, [r7, #8]
 800d8a4:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	33bc      	adds	r3, #188	@ 0xbc
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	623a      	str	r2, [r7, #32]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledY(float f) const
    {
        return float2scaled(f, yScale);
 800d8b8:	6a3a      	ldr	r2, [r7, #32]
 800d8ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d8bc:	69f9      	ldr	r1, [r7, #28]
 800d8be:	61b9      	str	r1, [r7, #24]
 800d8c0:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	ee07 2a90 	vmov	s15, r2
 800d8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8cc:	ed97 7a06 	vldr	s14, [r7, #24]
 800d8d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8d4:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800d8d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e4:	db0a      	blt.n	800d8fc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x64>
            return (int)(fs + 0.5f);
 800d8e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d8ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8f6:	ee17 0a90 	vmov	r0, s15
 800d8fa:	e019      	b.n	800d930 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d8fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800d900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d904:	ee17 2a90 	vmov	r2, s15
 800d908:	3a01      	subs	r2, #1
 800d90a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d90e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d916:	ed97 7a04 	vldr	s14, [r7, #16]
 800d91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d91e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d922:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d92a:	ee17 1a90 	vmov	r1, s15
 800d92e:	1850      	adds	r0, r2, r1
        return float2scaled(f, yScale);
 800d930:	bf00      	nop
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	637a      	str	r2, [r7, #52]	@ 0x34
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	633a      	str	r2, [r7, #48]	@ 0x30
 800d93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d93c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d93e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d940:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d942:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800d944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d946:	ee07 2a90 	vmov	s15, r2
 800d94a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d94e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d956:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800d95a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d95e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d966:	db0a      	blt.n	800d97e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0xe6>
            return (int)(fs + 0.5f);
 800d968:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d96c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d970:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d978:	ee17 2a90 	vmov	r2, s15
 800d97c:	e019      	b.n	800d9b2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d97e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d986:	ee17 2a90 	vmov	r2, s15
 800d98a:	3a01      	subs	r2, #1
 800d98c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d998:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d99c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9a0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d9a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9ac:	ee17 1a90 	vmov	r1, s15
 800d9b0:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800d9b2:	bf00      	nop
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	4798      	blx	r3
    }
 800d9ba:	bf00      	nop
 800d9bc:	3738      	adds	r7, #56	@ 0x38
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b088      	sub	sp, #32
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	607a      	str	r2, [r7, #4]
 800d9ce:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	33c0      	adds	r3, #192	@ 0xc0
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	61fa      	str	r2, [r7, #28]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800d9e0:	69fa      	ldr	r2, [r7, #28]
 800d9e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d9e4:	69b9      	ldr	r1, [r7, #24]
 800d9e6:	6179      	str	r1, [r7, #20]
 800d9e8:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	6939      	ldr	r1, [r7, #16]
 800d9ee:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800d9f2:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800d9f4:	7af9      	ldrb	r1, [r7, #11]
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	4798      	blx	r3
    }
 800d9fa:	bf00      	nop
 800d9fc:	3720      	adds	r7, #32
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 800da02:	b580      	push	{r7, lr}
 800da04:	b08a      	sub	sp, #40	@ 0x28
 800da06:	af00      	add	r7, sp, #0
 800da08:	60f8      	str	r0, [r7, #12]
 800da0a:	460b      	mov	r3, r1
 800da0c:	ed87 0a01 	vstr	s0, [r7, #4]
 800da10:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	33c0      	adds	r3, #192	@ 0xc0
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	627a      	str	r2, [r7, #36]	@ 0x24
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	623a      	str	r2, [r7, #32]
        return float2scaled(f, yScale);
 800da22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800da26:	6a39      	ldr	r1, [r7, #32]
 800da28:	61f9      	str	r1, [r7, #28]
 800da2a:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	ee07 2a90 	vmov	s15, r2
 800da32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da36:	ed97 7a07 	vldr	s14, [r7, #28]
 800da3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3e:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800da42:	edd7 7a05 	vldr	s15, [r7, #20]
 800da46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4e:	db0a      	blt.n	800da66 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800da50:	edd7 7a05 	vldr	s15, [r7, #20]
 800da54:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800da58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da60:	ee17 2a90 	vmov	r2, s15
 800da64:	e019      	b.n	800da9a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800da66:	edd7 7a05 	vldr	s15, [r7, #20]
 800da6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da6e:	ee17 2a90 	vmov	r2, s15
 800da72:	3a01      	subs	r2, #1
 800da74:	edd7 7a05 	vldr	s15, [r7, #20]
 800da78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da80:	ed97 7a05 	vldr	s14, [r7, #20]
 800da84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da88:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800da8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da94:	ee17 1a90 	vmov	r1, s15
 800da98:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800da9a:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800da9c:	7af9      	ldrb	r1, [r7, #11]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	4798      	blx	r3
    }
 800daa2:	bf00      	nop
 800daa4:	3728      	adds	r7, #40	@ 0x28
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
    virtual int getGraphRangeXMinAsInt() const
 800daaa:	b480      	push	{r7}
 800daac:	b087      	sub	sp, #28
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMinX);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	617a      	str	r2, [r7, #20]
 800dabc:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	60fa      	str	r2, [r7, #12]
 800dac6:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	db0b      	blt.n	800dae6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	005a      	lsls	r2, r3, #1
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	441a      	add	r2, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	fb92 f3f3 	sdiv	r3, r2, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	da00      	bge.n	800dae2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x38>
 800dae0:	3301      	adds	r3, #1
 800dae2:	105b      	asrs	r3, r3, #1
 800dae4:	e010      	b.n	800db08 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	4613      	mov	r3, r2
 800daea:	07db      	lsls	r3, r3, #31
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	005b      	lsls	r3, r3, #1
 800daf0:	461a      	mov	r2, r3
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	4413      	add	r3, r2
 800daf6:	1e5a      	subs	r2, r3, #1
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	fb92 f3f3 	sdiv	r3, r2, r3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	da00      	bge.n	800db04 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5a>
 800db02:	3301      	adds	r3, #1
 800db04:	105b      	asrs	r3, r3, #1
 800db06:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800db08:	bf00      	nop
    }
 800db0a:	4618      	mov	r0, r3
 800db0c:	371c      	adds	r7, #28
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
    virtual float getGraphRangeXMinAsFloat() const
 800db16:	b480      	push	{r7}
 800db18:	b087      	sub	sp, #28
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMinX);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	617a      	str	r2, [r7, #20]
 800db28:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatX(int i) const
    {
        return scaled2float(i, xScale);
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	60fa      	str	r2, [r7, #12]
 800db32:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	ee07 3a90 	vmov	s15, r3
 800db3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db48:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800db4c:	bf00      	nop
        return scaled2floatX(graphRangeMinX);
 800db4e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800db52:	eeb0 0a67 	vmov.f32	s0, s15
 800db56:	371c      	adds	r7, #28
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    virtual int getGraphRangeXMinScaled() const
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
        return graphRangeMinX;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
    }
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
    virtual int getGraphRangeXMaxAsInt() const
 800db7a:	b480      	push	{r7}
 800db7c:	b087      	sub	sp, #28
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMaxX);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	617a      	str	r2, [r7, #20]
 800db8c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db92:	693a      	ldr	r2, [r7, #16]
 800db94:	60fa      	str	r2, [r7, #12]
 800db96:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	db0b      	blt.n	800dbb6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	005a      	lsls	r2, r3, #1
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	441a      	add	r2, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	fb92 f3f3 	sdiv	r3, r2, r3
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	da00      	bge.n	800dbb2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x38>
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	105b      	asrs	r3, r3, #1
 800dbb4:	e010      	b.n	800dbd8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	07db      	lsls	r3, r3, #31
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	1e5a      	subs	r2, r3, #1
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	fb92 f3f3 	sdiv	r3, r2, r3
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	da00      	bge.n	800dbd4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5a>
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	105b      	asrs	r3, r3, #1
 800dbd6:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800dbd8:	bf00      	nop
    }
 800dbda:	4618      	mov	r0, r3
 800dbdc:	371c      	adds	r7, #28
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
    virtual float getGraphRangeXMaxAsFloat() const
 800dbe6:	b480      	push	{r7}
 800dbe8:	b087      	sub	sp, #28
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMaxX);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	617a      	str	r2, [r7, #20]
 800dbf8:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	60fa      	str	r2, [r7, #12]
 800dc02:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	ee07 3a90 	vmov	s15, r3
 800dc0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	ee07 3a90 	vmov	s15, r3
 800dc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc18:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800dc1c:	bf00      	nop
        return scaled2floatX(graphRangeMaxX);
 800dc1e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800dc22:	eeb0 0a67 	vmov.f32	s0, s15
 800dc26:	371c      	adds	r7, #28
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    virtual int getGraphRangeXMaxScaled() const
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
        return graphRangeMaxX;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
    }
 800dc3e:	4618      	mov	r0, r3
 800dc40:	370c      	adds	r7, #12
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
    virtual int getGraphRangeYMinAsInt() const
 800dc4a:	b480      	push	{r7}
 800dc4c:	b087      	sub	sp, #28
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMinY);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	617a      	str	r2, [r7, #20]
 800dc5c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc62:	693a      	ldr	r2, [r7, #16]
 800dc64:	60fa      	str	r2, [r7, #12]
 800dc66:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	db0b      	blt.n	800dc86 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	005a      	lsls	r2, r3, #1
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	441a      	add	r2, r3
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	fb92 f3f3 	sdiv	r3, r2, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	da00      	bge.n	800dc82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x38>
 800dc80:	3301      	adds	r3, #1
 800dc82:	105b      	asrs	r3, r3, #1
 800dc84:	e010      	b.n	800dca8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	07db      	lsls	r3, r3, #31
 800dc8c:	1a9b      	subs	r3, r3, r2
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	461a      	mov	r2, r3
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	4413      	add	r3, r2
 800dc96:	1e5a      	subs	r2, r3, #1
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	fb92 f3f3 	sdiv	r3, r2, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	da00      	bge.n	800dca4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5a>
 800dca2:	3301      	adds	r3, #1
 800dca4:	105b      	asrs	r3, r3, #1
 800dca6:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800dca8:	bf00      	nop
    }
 800dcaa:	4618      	mov	r0, r3
 800dcac:	371c      	adds	r7, #28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
    virtual float getGraphRangeYMinAsFloat() const
 800dcb6:	b480      	push	{r7}
 800dcb8:	b087      	sub	sp, #28
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMinY);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	617a      	str	r2, [r7, #20]
 800dcc8:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatY(int i) const
    {
        return scaled2float(i, yScale);
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	60fa      	str	r2, [r7, #12]
 800dcd2:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	ee07 3a90 	vmov	s15, r3
 800dcda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	ee07 3a90 	vmov	s15, r3
 800dce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dce8:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800dcec:	bf00      	nop
        return scaled2floatY(graphRangeMinY);
 800dcee:	eef0 7a66 	vmov.f32	s15, s13
    }
 800dcf2:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf6:	371c      	adds	r7, #28
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    virtual int getGraphRangeYMinScaled() const
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
        return graphRangeMinY;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
    }
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
    virtual int getGraphRangeYMaxAsInt() const
 800dd1a:	b480      	push	{r7}
 800dd1c:	b087      	sub	sp, #28
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMaxY);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	617a      	str	r2, [r7, #20]
 800dd2c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	60fa      	str	r2, [r7, #12]
 800dd36:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db0b      	blt.n	800dd56 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	005a      	lsls	r2, r3, #1
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	441a      	add	r2, r3
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	da00      	bge.n	800dd52 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x38>
 800dd50:	3301      	adds	r3, #1
 800dd52:	105b      	asrs	r3, r3, #1
 800dd54:	e010      	b.n	800dd78 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	07db      	lsls	r3, r3, #31
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	461a      	mov	r2, r3
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	4413      	add	r3, r2
 800dd66:	1e5a      	subs	r2, r3, #1
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	da00      	bge.n	800dd74 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5a>
 800dd72:	3301      	adds	r3, #1
 800dd74:	105b      	asrs	r3, r3, #1
 800dd76:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800dd78:	bf00      	nop
    }
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	371c      	adds	r7, #28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
    virtual float getGraphRangeYMaxAsFloat() const
 800dd86:	b480      	push	{r7}
 800dd88:	b087      	sub	sp, #28
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMaxY);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	617a      	str	r2, [r7, #20]
 800dd98:	613b      	str	r3, [r7, #16]
        return scaled2float(i, yScale);
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd9e:	693a      	ldr	r2, [r7, #16]
 800dda0:	60fa      	str	r2, [r7, #12]
 800dda2:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	ee07 3a90 	vmov	s15, r3
 800ddaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	ee07 3a90 	vmov	s15, r3
 800ddb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800ddbc:	bf00      	nop
        return scaled2floatY(graphRangeMaxY);
 800ddbe:	eef0 7a66 	vmov.f32	s15, s13
    }
 800ddc2:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc6:	371c      	adds	r7, #28
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    virtual int getGraphRangeYMaxScaled() const
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
        return graphRangeMaxY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
    }
 800ddde:	4618      	mov	r0, r3
 800dde0:	370c      	adds	r7, #12
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
     * @return The given data converted to a new scale.
     */
    static int convertToNewScale(int value, int oldScale, int newScale);

    /** Invalidate content. */
    virtual void invalidateContent() const
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b082      	sub	sp, #8
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d003      	beq.n	800de04 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x1a>
        {
            Container::invalidateContent();
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fc fc48 	bl	800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800de04:	bf00      	nop
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
     *
     * @param  x The x value.
     *
     * @return The screen x coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800de0c:	b590      	push	{r4, r7, lr}
 800de0e:	b089      	sub	sp, #36	@ 0x24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
    {
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	1ad4      	subs	r4, r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	3338      	adds	r3, #56	@ 0x38
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fc fc8b 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800de2e:	4603      	mov	r3, r0
 800de30:	b29a      	uxth	r2, r3
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800de38:	b299      	uxth	r1, r3
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800de40:	b29b      	uxth	r3, r3
 800de42:	440b      	add	r3, r1
 800de44:	b29b      	uxth	r3, r3
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	b29b      	uxth	r3, r3
 800de4a:	b21b      	sxth	r3, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800de4c:	1e59      	subs	r1, r3, #1
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800de5a:	1ad3      	subs	r3, r2, r3
 800de5c:	461a      	mov	r2, r3
 800de5e:	4620      	mov	r0, r4
 800de60:	f7ff fb1b 	bl	800d49a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800de64:	4603      	mov	r3, r0
 800de66:	60fb      	str	r3, [r7, #12]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800de6e:	83fb      	strh	r3, [r7, #30]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800de70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800de74:	015a      	lsls	r2, r3, #5
 800de76:	f107 0314 	add.w	r3, r7, #20
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7ff fa9f 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	613b      	str	r3, [r7, #16]
 800de86:	f107 0210 	add.w	r2, r7, #16
 800de8a:	f107 030c 	add.w	r3, r7, #12
 800de8e:	4611      	mov	r1, r2
 800de90:	4618      	mov	r0, r3
 800de92:	f7ff fab0 	bl	800d3f6 <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800de96:	4603      	mov	r3, r0
    }
 800de98:	4618      	mov	r0, r3
 800de9a:	3724      	adds	r7, #36	@ 0x24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd90      	pop	{r4, r7, pc}

0800dea0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
     *
     * @param  y The y value.
     *
     * @return The screen y coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	617b      	str	r3, [r7, #20]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	3338      	adds	r3, #56	@ 0x38
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7ff fa05 	bl	800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800deb8:	4603      	mov	r3, r0
 800deba:	b29a      	uxth	r2, r3
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800dec2:	b299      	uxth	r1, r3
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800deca:	b29b      	uxth	r3, r3
 800decc:	440b      	add	r3, r1
 800dece:	b29b      	uxth	r3, r3
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	b21b      	sxth	r3, r3
    {
        const int16_t graphAreaHeight = getGraphAreaHeight();
 800ded6:	83fb      	strh	r3, [r7, #30]
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800ded8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	f9b2 2114 	ldrsh.w	r2, [r2, #276]	@ 0x114
 800dee2:	4413      	add	r3, r2
 800dee4:	3b01      	subs	r3, #1
 800dee6:	61bb      	str	r3, [r7, #24]
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	015a      	lsls	r2, r3, #5
 800deec:	f107 0310 	add.w	r3, r7, #16
 800def0:	4611      	mov	r1, r2
 800def2:	4618      	mov	r0, r3
 800def4:	f7ff fa64 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	60bb      	str	r3, [r7, #8]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	1ad0      	subs	r0, r2, r3
 800df06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df0a:	1e59      	subs	r1, r3, #1
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	461a      	mov	r2, r3
 800df1c:	f7ff fabd 	bl	800d49a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800df20:	4603      	mov	r3, r0
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	f107 020c 	add.w	r2, r7, #12
 800df28:	f107 0308 	add.w	r3, r7, #8
 800df2c:	4611      	mov	r1, r2
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff fa76 	bl	800d420 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800df34:	4603      	mov	r3, r0
    }
 800df36:	4618      	mov	r0, r3
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <_ZN8touchgfx17AbstractDataGraphD1Ev>:
class AbstractDataGraph : public Container
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	4a12      	ldr	r2, [pc, #72]	@ (800df94 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	33e8      	adds	r3, #232	@ 0xe8
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe fd88 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	33bc      	adds	r3, #188	@ 0xbc
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fe fd83 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	3390      	adds	r3, #144	@ 0x90
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe fd7e 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3364      	adds	r3, #100	@ 0x64
 800df70:	4618      	mov	r0, r3
 800df72:	f7fe fd79 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3338      	adds	r3, #56	@ 0x38
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fd74 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe fd70 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	4618      	mov	r0, r3
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	08031868 	.word	0x08031868

0800df98 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff ffcd 	bl	800df40 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800dfa6:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f01e ff5b 	bl	802ce66 <_ZdlPvj>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
	...

0800dfbc <_ZN8touchgfx16DynamicDataGraphC1EsPi>:
     * Initializes a new instance of the AbstractDataGraphWithY class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Address where to store the y values of the graph.
     */
    DynamicDataGraph(int16_t capacity, int* values)
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	607a      	str	r2, [r7, #4]
 800dfc8:	817b      	strh	r3, [r7, #10]
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f008 fcac 	bl	8016930 <_ZN8touchgfx17AbstractDataGraphC1Es>
 800dfd8:	4a0f      	ldr	r2, [pc, #60]	@ (800e018 <_ZN8touchgfx16DynamicDataGraphC1EsPi+0x5c>)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    {
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e004:	3b01      	subs	r3, #1
 800e006:	461a      	mov	r2, r3
 800e008:	2100      	movs	r1, #0
 800e00a:	f7ff fae2 	bl	800d5d2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    }
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	080316d0 	.word	0x080316d0

0800e01c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @see getScale
     *
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	4613      	mov	r3, r2
 800e028:	71fb      	strb	r3, [r7, #7]
    {
        setScaleX(scale, updateData);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3388      	adds	r3, #136	@ 0x88
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	79fa      	ldrb	r2, [r7, #7]
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	4798      	blx	r3
        setScaleY(scale, updateData);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3390      	adds	r3, #144	@ 0x90
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	79fa      	ldrb	r2, [r7, #7]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	4798      	blx	r3
    }
 800e04a:	bf00      	nop
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @return The scaling factor.
     *
     * @see setScale
     */
    virtual int getScale() const
 800e052:	b580      	push	{r7, lr}
 800e054:	b082      	sub	sp, #8
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
    {
        return getScaleY();
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3394      	adds	r3, #148	@ 0x94
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	4798      	blx	r3
 800e066:	4603      	mov	r3, r0
    }
 800e068:	4618      	mov	r0, r3
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
    /**
     * Gets the minimum x coordinate for the graph.
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMinScaled();
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	33d4      	adds	r3, #212	@ 0xd4
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4610      	mov	r0, r2
 800e084:	4798      	blx	r3
 800e086:	4603      	mov	r3, r0
    }
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
    /**
     * Gets the maximum x coordinate for the graph.
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMaxScaled();
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	33e0      	adds	r3, #224	@ 0xe0
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4798      	blx	r3
 800e0a6:	4603      	mov	r3, r0
    }
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800e0b0:	b5b0      	push	{r4, r5, r7, lr}
 800e0b2:	b08c      	sub	sp, #48	@ 0x30
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	72fb      	strb	r3, [r7, #11]
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	33a4      	adds	r3, #164	@ 0xa4
 800e0c6:	681c      	ldr	r4, [r3, #0]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	617a      	str	r2, [r7, #20]
 800e0d8:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	db0b      	blt.n	800e0f8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x48>
            return ((i * 2 + scale) / scale) / 2;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	005a      	lsls	r2, r3, #1
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	441a      	add	r2, r3
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	da00      	bge.n	800e0f4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x44>
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	105b      	asrs	r3, r3, #1
 800e0f6:	e010      	b.n	800e11a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x6a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e0f8:	697a      	ldr	r2, [r7, #20]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	07db      	lsls	r3, r3, #31
 800e0fe:	1a9b      	subs	r3, r3, r2
 800e100:	005b      	lsls	r3, r3, #1
 800e102:	461a      	mov	r2, r3
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	4413      	add	r3, r2
 800e108:	1e5a      	subs	r2, r3, #1
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	da00      	bge.n	800e116 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x66>
 800e114:	3301      	adds	r3, #1
 800e116:	105b      	asrs	r3, r3, #1
 800e118:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e11a:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800e11c:	425d      	negs	r5, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800e124:	1e59      	subs	r1, r3, #1
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	62bb      	str	r3, [r7, #40]	@ 0x28
        return scaled2int(i, xScale);
 800e12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e134:	627a      	str	r2, [r7, #36]	@ 0x24
 800e136:	623b      	str	r3, [r7, #32]
        if (i >= 0)
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	db0b      	blt.n	800e156 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa6>
            return ((i * 2 + scale) / scale) / 2;
 800e13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e140:	005a      	lsls	r2, r3, #1
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	441a      	add	r2, r3
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	fb92 f3f3 	sdiv	r3, r2, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	da00      	bge.n	800e152 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa2>
 800e150:	3301      	adds	r3, #1
 800e152:	105b      	asrs	r3, r3, #1
 800e154:	e010      	b.n	800e178 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc8>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e158:	4613      	mov	r3, r2
 800e15a:	07db      	lsls	r3, r3, #31
 800e15c:	1a9b      	subs	r3, r3, r2
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	461a      	mov	r2, r3
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	4413      	add	r3, r2
 800e166:	1e5a      	subs	r2, r3, #1
 800e168:	6a3b      	ldr	r3, [r7, #32]
 800e16a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	da00      	bge.n	800e174 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc4>
 800e172:	3301      	adds	r3, #1
 800e174:	105b      	asrs	r3, r3, #1
 800e176:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e178:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800e17a:	440b      	add	r3, r1
 800e17c:	461a      	mov	r2, r3
 800e17e:	4629      	mov	r1, r5
 800e180:	47a0      	blx	r4
    }
 800e182:	bf00      	nop
 800e184:	3730      	adds	r7, #48	@ 0x30
 800e186:	46bd      	mov	sp, r7
 800e188:	bdb0      	pop	{r4, r5, r7, pc}

0800e18a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactor(scale);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6839      	ldr	r1, [r7, #0]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	4798      	blx	r3
    }
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
     * Set x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(int2scaledX(factor));
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	617a      	str	r2, [r7, #20]
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e1cc:	6939      	ldr	r1, [r7, #16]
 800e1ce:	60f9      	str	r1, [r7, #12]
 800e1d0:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	68b9      	ldr	r1, [r7, #8]
 800e1d6:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e1da:	bf00      	nop
        setXAxisFactorScaled(int2scaledX(factor));
 800e1dc:	4611      	mov	r1, r2
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
    }
 800e1e2:	bf00      	nop
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b082      	sub	sp, #8
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactor(scale);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	ed97 0a00 	vldr	s0, [r7]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	4798      	blx	r3
    }
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:

    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
 800e210:	b580      	push	{r7, lr}
 800e212:	b088      	sub	sp, #32
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactorScaled(float2scaledX(factor));
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	61fa      	str	r2, [r7, #28]
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800e22e:	69fa      	ldr	r2, [r7, #28]
 800e230:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e232:	69b9      	ldr	r1, [r7, #24]
 800e234:	6179      	str	r1, [r7, #20]
 800e236:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800e238:	693a      	ldr	r2, [r7, #16]
 800e23a:	ee07 2a90 	vmov	s15, r2
 800e23e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e242:	ed97 7a05 	vldr	s14, [r7, #20]
 800e246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800e24e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25a:	db0a      	blt.n	800e272 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
            return (int)(fs + 0.5f);
 800e25c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e260:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e264:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e26c:	ee17 2a90 	vmov	r2, s15
 800e270:	e019      	b.n	800e2a6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e272:	edd7 7a03 	vldr	s15, [r7, #12]
 800e276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e27a:	ee17 2a90 	vmov	r2, s15
 800e27e:	3a01      	subs	r2, #1
 800e280:	edd7 7a03 	vldr	s15, [r7, #12]
 800e284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e28c:	ed97 7a03 	vldr	s14, [r7, #12]
 800e290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e294:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e29c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2a0:	ee17 1a90 	vmov	r1, s15
 800e2a4:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800e2a6:	bf00      	nop
        setXAxisFactorScaled(float2scaledX(factor));
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	4798      	blx	r3
    }
 800e2ae:	bf00      	nop
 800e2b0:	3720      	adds	r7, #32
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @param  factor The x axis factor.
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
 800e2b6:	b480      	push	{r7}
 800e2b8:	b083      	sub	sp, #12
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	6039      	str	r1, [r7, #0]
    {
        xAxisFactor = factor;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    }
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsInt();
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	4798      	blx	r3
 800e2ea:	4603      	mov	r3, r0
    }
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     * Get x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b087      	sub	sp, #28
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisFactorScaled());
 800e2fc:	687c      	ldr	r4, [r7, #4]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	4798      	blx	r3
 800e30c:	4603      	mov	r3, r0
 800e30e:	617c      	str	r4, [r7, #20]
 800e310:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	60fa      	str	r2, [r7, #12]
 800e31a:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	db0b      	blt.n	800e33a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	005a      	lsls	r2, r3, #1
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	441a      	add	r2, r3
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	da00      	bge.n	800e336 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x42>
 800e334:	3301      	adds	r3, #1
 800e336:	105b      	asrs	r3, r3, #1
 800e338:	e010      	b.n	800e35c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x68>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	4613      	mov	r3, r2
 800e33e:	07db      	lsls	r3, r3, #31
 800e340:	1a9b      	subs	r3, r3, r2
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	461a      	mov	r2, r3
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	4413      	add	r3, r2
 800e34a:	1e5a      	subs	r2, r3, #1
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	da00      	bge.n	800e358 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x64>
 800e356:	3301      	adds	r3, #1
 800e358:	105b      	asrs	r3, r3, #1
 800e35a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e35c:	bf00      	nop
    }
 800e35e:	4618      	mov	r0, r3
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	bd90      	pop	{r4, r7, pc}

0800e366 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
 800e366:	b580      	push	{r7, lr}
 800e368:	b082      	sub	sp, #8
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsFloat();
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	4798      	blx	r3
 800e37c:	eef0 7a40 	vmov.f32	s15, s0
    }
 800e380:	eeb0 0a67 	vmov.f32	s0, s15
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:

    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
 800e38a:	b590      	push	{r4, r7, lr}
 800e38c:	b087      	sub	sp, #28
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisFactorScaled());
 800e392:	687c      	ldr	r4, [r7, #4]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	4798      	blx	r3
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	617c      	str	r4, [r7, #20]
 800e3a6:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	60fa      	str	r2, [r7, #12]
 800e3b0:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	ee07 3a90 	vmov	s15, r3
 800e3b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	ee07 3a90 	vmov	s15, r3
 800e3c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800e3ca:	bf00      	nop
        return scaled2floatX(getXAxisFactorScaled());
 800e3cc:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e3d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e3d4:	371c      	adds	r7, #28
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd90      	pop	{r4, r7, pc}

0800e3da <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     *
     * @return The x axis factor (scaled).
     *
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
 800e3da:	b480      	push	{r7}
 800e3dc:	b083      	sub	sp, #12
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
    {
        return xAxisFactor;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
    }
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
     * Set x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	617a      	str	r2, [r7, #20]
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e414:	6939      	ldr	r1, [r7, #16]
 800e416:	60f9      	str	r1, [r7, #12]
 800e418:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	68b9      	ldr	r1, [r7, #8]
 800e41e:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e422:	bf00      	nop
        setXAxisOffsetScaled(int2scaledX(offset));
 800e424:	4611      	mov	r1, r2
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	4798      	blx	r3
    }
 800e42a:	bf00      	nop
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
 800e432:	b580      	push	{r7, lr}
 800e434:	b088      	sub	sp, #32
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	61fa      	str	r2, [r7, #28]
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800e450:	69fa      	ldr	r2, [r7, #28]
 800e452:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e454:	69b9      	ldr	r1, [r7, #24]
 800e456:	6179      	str	r1, [r7, #20]
 800e458:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800e45a:	693a      	ldr	r2, [r7, #16]
 800e45c:	ee07 2a90 	vmov	s15, r2
 800e460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e464:	ed97 7a05 	vldr	s14, [r7, #20]
 800e468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e46c:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800e470:	edd7 7a03 	vldr	s15, [r7, #12]
 800e474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47c:	db0a      	blt.n	800e494 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
            return (int)(fs + 0.5f);
 800e47e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e482:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e48a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e48e:	ee17 2a90 	vmov	r2, s15
 800e492:	e019      	b.n	800e4c8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e494:	edd7 7a03 	vldr	s15, [r7, #12]
 800e498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e49c:	ee17 2a90 	vmov	r2, s15
 800e4a0:	3a01      	subs	r2, #1
 800e4a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e4a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4ae:	ed97 7a03 	vldr	s14, [r7, #12]
 800e4b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4b6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e4ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4c2:	ee17 1a90 	vmov	r1, s15
 800e4c6:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800e4c8:	bf00      	nop
        setXAxisOffsetScaled(float2scaledX(offset));
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	4798      	blx	r3
    }
 800e4d0:	bf00      	nop
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
    {
        xAxisOffset = offset;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    }
 800e4ea:	bf00      	nop
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     * Get x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
 800e4f6:	b590      	push	{r4, r7, lr}
 800e4f8:	b087      	sub	sp, #28
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisOffsetScaled());
 800e4fe:	687c      	ldr	r4, [r7, #4]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	4798      	blx	r3
 800e50e:	4603      	mov	r3, r0
 800e510:	617c      	str	r4, [r7, #20]
 800e512:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	60fa      	str	r2, [r7, #12]
 800e51c:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	db0b      	blt.n	800e53c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	005a      	lsls	r2, r3, #1
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	441a      	add	r2, r3
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	da00      	bge.n	800e538 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x42>
 800e536:	3301      	adds	r3, #1
 800e538:	105b      	asrs	r3, r3, #1
 800e53a:	e010      	b.n	800e55e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x68>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4613      	mov	r3, r2
 800e540:	07db      	lsls	r3, r3, #31
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	461a      	mov	r2, r3
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	4413      	add	r3, r2
 800e54c:	1e5a      	subs	r2, r3, #1
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	fb92 f3f3 	sdiv	r3, r2, r3
 800e554:	2b00      	cmp	r3, #0
 800e556:	da00      	bge.n	800e55a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x64>
 800e558:	3301      	adds	r3, #1
 800e55a:	105b      	asrs	r3, r3, #1
 800e55c:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e55e:	bf00      	nop
    }
 800e560:	4618      	mov	r0, r3
 800e562:	371c      	adds	r7, #28
 800e564:	46bd      	mov	sp, r7
 800e566:	bd90      	pop	{r4, r7, pc}

0800e568 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800e570:	687c      	ldr	r4, [r7, #4]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	4798      	blx	r3
 800e580:	4603      	mov	r3, r0
 800e582:	617c      	str	r4, [r7, #20]
 800e584:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	60fa      	str	r2, [r7, #12]
 800e58e:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	ee07 3a90 	vmov	s15, r3
 800e596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	ee07 3a90 	vmov	s15, r3
 800e5a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800e5a8:	bf00      	nop
        return scaled2floatX(getXAxisOffsetScaled());
 800e5aa:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e5ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e5b2:	371c      	adds	r7, #28
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd90      	pop	{r4, r7, pc}

0800e5b8 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     *
     * @return The x axis offset (scaled).
     *
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
    {
        return xAxisOffset;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    }
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	370c      	adds	r7, #12
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
	...

0800e5d4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:

    virtual int indexToDataPointXScaled(int16_t index) const
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	460b      	mov	r3, r1
 800e5de:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800e5e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	db06      	blt.n	800e5f6 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800e5ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	db06      	blt.n	800e604 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>
 800e5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e634 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x60>)
 800e5f8:	4a0f      	ldr	r2, [pc, #60]	@ (800e638 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x64>)
 800e5fa:	f240 6133 	movw	r1, #1587	@ 0x633
 800e5fe:	480f      	ldr	r0, [pc, #60]	@ (800e63c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x68>)
 800e600:	f01f f992 	bl	802d928 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e612:	4611      	mov	r1, r2
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	4798      	blx	r3
 800e618:	4602      	mov	r2, r0
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800e620:	fb03 f202 	mul.w	r2, r3, r2
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e62a:	4413      	add	r3, r2
    }
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	0802f308 	.word	0x0802f308
 800e638:	0802f32c 	.word	0x0802f32c
 800e63c:	0802f37c 	.word	0x0802f37c

0800e640 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:

    virtual int indexToDataPointYScaled(int16_t index) const
 800e640:	b590      	push	{r4, r7, lr}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	460b      	mov	r3, r1
 800e64a:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800e64c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e650:	2b00      	cmp	r3, #0
 800e652:	db06      	blt.n	800e662 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x22>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800e65a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e65e:	429a      	cmp	r2, r3
 800e660:	db06      	blt.n	800e670 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>
 800e662:	4b0e      	ldr	r3, [pc, #56]	@ (800e69c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x5c>)
 800e664:	4a0e      	ldr	r2, [pc, #56]	@ (800e6a0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x60>)
 800e666:	f240 6139 	movw	r1, #1593	@ 0x639
 800e66a:	480e      	ldr	r0, [pc, #56]	@ (800e6a4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x64>)
 800e66c:	f01f f95c 	bl	802d928 <__assert_func>
        return yValues[dataIndex(index)];
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 4144 	ldr.w	r4, [r3, #324]	@ 0x144
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e684:	4611      	mov	r1, r2
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	4798      	blx	r3
 800e68a:	4603      	mov	r3, r0
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4423      	add	r3, r4
 800e690:	681b      	ldr	r3, [r3, #0]
    }
 800e692:	4618      	mov	r0, r3
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	bd90      	pop	{r4, r7, pc}
 800e69a:	bf00      	nop
 800e69c:	0802f308 	.word	0x0802f308
 800e6a0:	0802f3d8 	.word	0x0802f3d8
 800e6a4:	0802f37c 	.word	0x0802f37c

0800e6a8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (int32_t)index;
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b089      	sub	sp, #36	@ 0x24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800e6bc:	681c      	ldr	r4, [r3, #0]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	61fb      	str	r3, [r7, #28]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	617a      	str	r2, [r7, #20]
 800e6ce:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	db0b      	blt.n	800e6ee <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	005a      	lsls	r2, r3, #1
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	441a      	add	r2, r3
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	fb92 f3f3 	sdiv	r3, r2, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da00      	bge.n	800e6ea <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x42>
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	105b      	asrs	r3, r3, #1
 800e6ec:	e010      	b.n	800e710 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x68>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	07db      	lsls	r3, r3, #31
 800e6f4:	1a9b      	subs	r3, r3, r2
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	1e5a      	subs	r2, r3, #1
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	fb92 f3f3 	sdiv	r3, r2, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	da00      	bge.n	800e70c <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x64>
 800e70a:	3301      	adds	r3, #1
 800e70c:	105b      	asrs	r3, r3, #1
 800e70e:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e710:	bf00      	nop
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800e712:	b21b      	sxth	r3, r3
 800e714:	4619      	mov	r1, r3
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	47a0      	blx	r4
 800e71a:	4602      	mov	r2, r0
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800e722:	fb03 f202 	mul.w	r2, r3, r2
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e72c:	4413      	add	r3, r2
    }
 800e72e:	4618      	mov	r0, r3
 800e730:	3724      	adds	r7, #36	@ 0x24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd90      	pop	{r4, r7, pc}

0800e736 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
 800e736:	b580      	push	{r7, lr}
 800e738:	b082      	sub	sp, #8
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleX();
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4618      	mov	r0, r3
 800e742:	f7fe ff1e 	bl	800d582 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>
 800e746:	4603      	mov	r3, r0
    }
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:

    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleY();
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fe ff1d 	bl	800d59a <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>
 800e760:	4603      	mov	r3, r0
    }
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(scale);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	4798      	blx	r3
    }
 800e784:	bf00      	nop
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:

    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorScaled();
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	4798      	blx	r3
 800e7a2:	4603      	mov	r3, r0
    }
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenXQ5(int2scaledX(index));
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6879      	ldr	r1, [r7, #4]
 800e7c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e7ca:	6179      	str	r1, [r7, #20]
 800e7cc:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e7d2:	6939      	ldr	r1, [r7, #16]
 800e7d4:	60f9      	str	r1, [r7, #12]
 800e7d6:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e7e0:	bf00      	nop
        return valueToScreenXQ5(int2scaledX(index));
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	4798      	blx	r3
 800e7e6:	4603      	mov	r3, r0
    }
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800e7fc:	687e      	ldr	r6, [r7, #4]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800e806:	681c      	ldr	r4, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e81c:	4611      	mov	r1, r2
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	4798      	blx	r3
 800e822:	4603      	mov	r3, r0
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	442b      	add	r3, r5
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4619      	mov	r1, r3
 800e82c:	4630      	mov	r0, r6
 800e82e:	47a0      	blx	r4
 800e830:	4603      	mov	r3, r0
    }
 800e832:	4618      	mov	r0, r3
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e83c <_ZN8touchgfx16DynamicDataGraphD1Ev>:
class DynamicDataGraph : public AbstractDataGraph
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	4a05      	ldr	r2, [pc, #20]	@ (800e85c <_ZN8touchgfx16DynamicDataGraphD1Ev+0x20>)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7ff fb77 	bl	800df40 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4618      	mov	r0, r3
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	080316d0 	.word	0x080316d0

0800e860 <_ZN8touchgfx16DynamicDataGraphD0Ev>:
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7ff ffe7 	bl	800e83c <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800e86e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f01e faf7 	bl	802ce66 <_ZdlPvj>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <_ZN8touchgfx15GraphScrollDataC1EsPi>:
     * Initializes a new instance of the GraphScrollData class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Pointer to memory with room for capacity elements of type T.
     */
    GraphScrollData(int16_t capacity, int* values)
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	460b      	mov	r3, r1
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	817b      	strh	r3, [r7, #10]
        : DynamicDataGraph(capacity, values), current(0)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7ff fb8e 	bl	800dfbc <_ZN8touchgfx16DynamicDataGraphC1EsPi>
 800e8a0:	4a05      	ldr	r2, [pc, #20]	@ (800e8b8 <_ZN8touchgfx15GraphScrollDataC1EsPi+0x34>)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
    {
    }
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	08031cac 	.word	0x08031cac

0800e8bc <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual void beforeAddValue();

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	807b      	strh	r3, [r7, #2]
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f9b3 211e 	ldrsh.w	r2, [r3, #286]	@ 0x11e
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	@ 0x11c
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	db0f      	blt.n	800e8f8 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x3c>
 800e8d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	f9b2 214c 	ldrsh.w	r2, [r2, #332]	@ 0x14c
 800e8e2:	4413      	add	r3, r2
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	f9b2 211c 	ldrsh.w	r2, [r2, #284]	@ 0x11c
 800e8ea:	fb93 f1f2 	sdiv	r1, r3, r2
 800e8ee:	fb01 f202 	mul.w	r2, r1, r2
 800e8f2:	1a9b      	subs	r3, r3, r2
 800e8f4:	b21b      	sxth	r3, r3
 800e8f6:	e001      	b.n	800e8fc <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x40>
 800e8f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	460b      	mov	r3, r1
 800e912:	807b      	strh	r3, [r7, #2]
 800e914:	887b      	ldrh	r3, [r7, #2]
 800e916:	81fb      	strh	r3, [r7, #14]
 800e918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e91c:	015a      	lsls	r2, r3, #5
 800e91e:	f107 0308 	add.w	r3, r7, #8
 800e922:	4611      	mov	r1, r2
 800e924:	4618      	mov	r0, r3
 800e926:	f7fe fd4b 	bl	800d3c0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e92a:	68bb      	ldr	r3, [r7, #8]
    {
        return CWRUtil::toQ5(index);
    }
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	460b      	mov	r3, r1
 800e95a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	78fa      	ldrb	r2, [r7, #3]
 800e960:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 800e964:	bf00      	nop
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 800e97e:	4618      	mov	r0, r3
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800e98a:	b590      	push	{r4, r7, lr}
 800e98c:	b085      	sub	sp, #20
 800e98e:	af02      	add	r7, sp, #8
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	4618      	mov	r0, r3
 800e998:	f7fb fed4 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e99c:	4603      	mov	r3, r0
 800e99e:	461c      	mov	r4, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fe fc8d 	bl	800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	4623      	mov	r3, r4
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7fb fdfd 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
    }
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd90      	pop	{r4, r7, pc}

0800e9c0 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7fb fdda 	bl	800a584 <_ZN8touchgfx4RectC1Ev>
    }
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	4a05      	ldr	r2, [pc, #20]	@ (800e9f8 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	601a      	str	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fc fa95 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	08031658 	.word	0x08031658

0800e9fc <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff ffe7 	bl	800e9d8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800ea0a:	212c      	movs	r1, #44	@ 0x2c
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f01e fa2a 	bl	802ce66 <_ZdlPvj>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 */
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
        : CanvasWidget()
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f007 fbc0 	bl	80161ac <_ZN8touchgfx12CanvasWidgetC1Ev>
 800ea2c:	4a03      	ldr	r2, [pc, #12]	@ (800ea3c <_ZN8touchgfx20AbstractGraphElementC1Ev+0x20>)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	601a      	str	r2, [r3, #0]
    {
    }
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4618      	mov	r0, r3
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	08030684 	.word	0x08030684

0800ea40 <_ZN8touchgfx20AbstractGraphElementD1Ev>:
class AbstractGraphElement : public CanvasWidget
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	4a05      	ldr	r2, [pc, #20]	@ (800ea60 <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff ffc1 	bl	800e9d8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	08030684 	.word	0x08030684

0800ea64 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff ffe7 	bl	800ea40 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800ea72:	212c      	movs	r1, #44	@ 0x2c
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f01e f9f6 	bl	802ce66 <_ZdlPvj>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 * not use CWR (Canvas Widget Renderer).
 */
class AbstractGraphElementNoCWR : public AbstractGraphElement
{
public:
    AbstractGraphElementNoCWR()
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
        : color(0)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff ffc4 	bl	800ea1c <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800ea94:	4a06      	ldr	r2, [pc, #24]	@ (800eab0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x2c>)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	601a      	str	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	332c      	adds	r3, #44	@ 0x2c
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fd ffb1 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	080305fc 	.word	0x080305fc

0800eab4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @param  newColor The new color.
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	683a      	ldr	r2, [r7, #0]
 800eac2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     *
     * @return The color.
     *
     * @see setColor
     */
    virtual colortype getColor() const
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
    {
        return color;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
 800eadc:	4618      	mov	r0, r3
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
    {
        return true;
 800eaf2:	2301      	movs	r3, #1
    }
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
     * @param [in,out] r The rectangle.
     */
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
    {
    }
 800eb0a:	bf00      	nop
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
	...

0800eb18 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
class AbstractGraphElementNoCWR : public AbstractGraphElement
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	4a05      	ldr	r2, [pc, #20]	@ (800eb38 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	601a      	str	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7ff ff89 	bl	800ea40 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	080305fc 	.word	0x080305fc

0800eb3c <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff ffe7 	bl	800eb18 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800eb4a:	2130      	movs	r1, #48	@ 0x30
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f01e f98a 	bl	802ce66 <_ZdlPvj>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4618      	mov	r0, r3
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
{
public:
    /** Default constructor. */
    GraphElementGridBase()
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff ff8c 	bl	800ea84 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800eb6c:	4a0a      	ldr	r2, [pc, #40]	@ (800eb98 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x3c>)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	220a      	movs	r2, #10
 800eb7c:	635a      	str	r2, [r3, #52]	@ 0x34
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    {
    }
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3708      	adds	r7, #8
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	08031a14 	.word	0x08031a14

0800eb9c <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
    FORCE_INLINE_FUNCTION uint8_t getLineWidth() const
    {
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	460b      	mov	r3, r1
 800eba6:	807b      	strh	r3, [r7, #2]
    {
    }
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @param  graph The graph.
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00b      	beq.n	800ebde <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2a>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3380      	adds	r3, #128	@ 0x80
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6839      	ldr	r1, [r7, #0]
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	4798      	blx	r3
 800ebda:	4603      	mov	r3, r0
 800ebdc:	e000      	b.n	800ebe0 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2c>
 800ebde:	2300      	movs	r3, #0
    }
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridX : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 800ebf2:	6879      	ldr	r1, [r7, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebfc:	6179      	str	r1, [r7, #20]
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	6139      	str	r1, [r7, #16]
 800ec02:	60fa      	str	r2, [r7, #12]
 800ec04:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	338c      	adds	r3, #140	@ 0x8c
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	6938      	ldr	r0, [r7, #16]
 800ec10:	4798      	blx	r3
 800ec12:	4603      	mov	r3, r0
 800ec14:	461a      	mov	r2, r3
 800ec16:	68b9      	ldr	r1, [r7, #8]
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f007 feed 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	bf00      	nop
    }
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800ec2a:	b5b0      	push	{r4, r5, r7, lr}
 800ec2c:	b08a      	sub	sp, #40	@ 0x28
 800ec2e:	af02      	add	r7, sp, #8
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	60b9      	str	r1, [r7, #8]
 800ec34:	607a      	str	r2, [r7, #4]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	617b      	str	r3, [r7, #20]
        return topPadding;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	f9b3 4114 	ldrsh.w	r4, [r3, #276]	@ 0x114
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth();
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	3338      	adds	r3, #56	@ 0x38
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fb fd7b 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	461d      	mov	r5, r3
 800ec52:	bf00      	nop
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	3338      	adds	r3, #56	@ 0x38
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe fb30 	bl	800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ec62:	4603      	mov	r3, r0
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800ec6c:	b299      	uxth	r1, r3
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	440b      	add	r3, r1
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	b21b      	sxth	r3, r3
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	462b      	mov	r3, r5
 800ec84:	4622      	mov	r2, r4
 800ec86:	2100      	movs	r1, #0
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7fb fc92 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
    }
 800ec8e:	68f8      	ldr	r0, [r7, #12]
 800ec90:	3720      	adds	r7, #32
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bdb0      	pop	{r4, r5, r7, pc}

0800ec96 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b086      	sub	sp, #24
 800ec9a:	af02      	add	r7, sp, #8
 800ec9c:	60f8      	str	r0, [r7, #12]
 800ec9e:	60b9      	str	r1, [r7, #8]
 800eca0:	4611      	mov	r1, r2
 800eca2:	461a      	mov	r2, r3
 800eca4:	460b      	mov	r3, r1
 800eca6:	80fb      	strh	r3, [r7, #6]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(pos, start, width, length);
 800ecac:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800ecb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ecb4:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800ecb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7fb fc76 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
    }
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeXMinScaled();
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	33d4      	adds	r3, #212	@ 0xd4
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6838      	ldr	r0, [r7, #0]
 800ece2:	4798      	blx	r3
 800ece4:	4603      	mov	r3, r0
    }
 800ece6:	4618      	mov	r0, r3
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeXMaxScaled();
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	33e0      	adds	r3, #224	@ 0xe0
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	6838      	ldr	r0, [r7, #0]
 800ed02:	4798      	blx	r3
 800ed04:	4603      	mov	r3, r0
    }
 800ed06:	4618      	mov	r0, r3
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 800ed0e:	b480      	push	{r7}
 800ed10:	b085      	sub	sp, #20
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	6039      	str	r1, [r7, #0]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	60fb      	str	r3, [r7, #12]
        return topPadding;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 800ed22:	4618      	mov	r0, r3
 800ed24:	3714      	adds	r7, #20
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	6039      	str	r1, [r7, #0]
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	3338      	adds	r3, #56	@ 0x38
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fe fabe 	bl	800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ed46:	4603      	mov	r3, r0
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800ed50:	b299      	uxth	r1, r3
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	440b      	add	r3, r1
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 800ed64:	4618      	mov	r0, r3
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800ed80:	4618      	mov	r0, r3
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	3338      	adds	r3, #56	@ 0x38
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fb fcd0 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800eda4:	4603      	mov	r3, r0
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800edae:	b299      	uxth	r1, r3
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	440b      	add	r3, r1
 800edba:	b29b      	uxth	r3, r3
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800edca:	b580      	push	{r7, lr}
 800edcc:	b088      	sub	sp, #32
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	60b9      	str	r1, [r7, #8]
 800edd4:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenXQ5(graph, value);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	61fb      	str	r3, [r7, #28]
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	61bb      	str	r3, [r7, #24]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenXQ5(x);
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	6979      	ldr	r1, [r7, #20]
 800edee:	69b8      	ldr	r0, [r7, #24]
 800edf0:	4798      	blx	r3
 800edf2:	4603      	mov	r3, r0
 800edf4:	bf00      	nop
    }
 800edf6:	4618      	mov	r0, r3
 800edf8:	3720      	adds	r7, #32
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b086      	sub	sp, #24
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800ee08:	6879      	ldr	r1, [r7, #4]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee12:	6179      	str	r1, [r7, #20]
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	6139      	str	r1, [r7, #16]
 800ee18:	60fa      	str	r2, [r7, #12]
 800ee1a:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3394      	adds	r3, #148	@ 0x94
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	6938      	ldr	r0, [r7, #16]
 800ee26:	4798      	blx	r3
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	68b9      	ldr	r1, [r7, #8]
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f007 fde2 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800ee34:	4603      	mov	r3, r0
 800ee36:	bf00      	nop
    }
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b08a      	sub	sp, #40	@ 0x28
 800ee44:	af02      	add	r7, sp, #8
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	607a      	str	r2, [r7, #4]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	617b      	str	r3, [r7, #20]
        return leftPadding;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	f9b3 4116 	ldrsh.w	r4, [r3, #278]	@ 0x116
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	3338      	adds	r3, #56	@ 0x38
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fb fc70 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ee64:	4603      	mov	r3, r0
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800ee6e:	b299      	uxth	r1, r3
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	440b      	add	r3, r1
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	b21d      	sxth	r5, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight();
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	3338      	adds	r3, #56	@ 0x38
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fa19 	bl	800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ee90:	4603      	mov	r3, r0
 800ee92:	bf00      	nop
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	462b      	mov	r3, r5
 800ee98:	2200      	movs	r2, #0
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f7fb fb88 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
    }
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	3720      	adds	r7, #32
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bdb0      	pop	{r4, r5, r7, pc}

0800eeaa <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b086      	sub	sp, #24
 800eeae:	af02      	add	r7, sp, #8
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	460b      	mov	r3, r1
 800eeba:	80fb      	strh	r3, [r7, #6]
 800eebc:	4613      	mov	r3, r2
 800eebe:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(start, pos, length, width);
 800eec0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800eec4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800eec8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800eecc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	4603      	mov	r3, r0
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f7fb fb6c 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
    }
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b082      	sub	sp, #8
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMinScaled();
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	33ec      	adds	r3, #236	@ 0xec
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6838      	ldr	r0, [r7, #0]
 800eef6:	4798      	blx	r3
 800eef8:	4603      	mov	r3, r0
    }
 800eefa:	4618      	mov	r0, r3
 800eefc:	3708      	adds	r7, #8
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b082      	sub	sp, #8
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMaxScaled();
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	33f8      	adds	r3, #248	@ 0xf8
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6838      	ldr	r0, [r7, #0]
 800ef16:	4798      	blx	r3
 800ef18:	4603      	mov	r3, r0
    }
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 800ef22:	b480      	push	{r7}
 800ef24:	b085      	sub	sp, #20
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	6039      	str	r1, [r7, #0]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b084      	sub	sp, #16
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
 800ef4a:	6039      	str	r1, [r7, #0]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	3338      	adds	r3, #56	@ 0x38
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fb fbf5 	bl	800a744 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800ef64:	b299      	uxth	r1, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	440b      	add	r3, r1
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3710      	adds	r7, #16
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	60fb      	str	r3, [r7, #12]
        return topPadding;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 800ef94:	4618      	mov	r0, r3
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3338      	adds	r3, #56	@ 0x38
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe f985 	bl	800d2c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800efb8:	4603      	mov	r3, r0
 800efba:	b29a      	uxth	r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800efc2:	b299      	uxth	r1, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800efca:	b29b      	uxth	r3, r3
 800efcc:	440b      	add	r3, r1
 800efce:	b29b      	uxth	r3, r3
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800efde:	b580      	push	{r7, lr}
 800efe0:	b088      	sub	sp, #32
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	60f8      	str	r0, [r7, #12]
 800efe6:	60b9      	str	r1, [r7, #8]
 800efe8:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenYQ5(graph, value);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	61fb      	str	r3, [r7, #28]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	61bb      	str	r3, [r7, #24]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenYQ5(y);
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6979      	ldr	r1, [r7, #20]
 800f002:	69b8      	ldr	r0, [r7, #24]
 800f004:	4798      	blx	r3
 800f006:	4603      	mov	r3, r0
 800f008:	bf00      	nop
    }
 800f00a:	4618      	mov	r0, r3
 800f00c:	3720      	adds	r7, #32
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
	...

0800f014 <_ZN8touchgfx16GraphElementLineC1Ev>:
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
        : lineWidth(2)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff fcfc 	bl	800ea1c <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800f024:	4a05      	ldr	r2, [pc, #20]	@ (800f03c <_ZN8touchgfx16GraphElementLineC1Ev+0x28>)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2202      	movs	r2, #2
 800f02e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
    }
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4618      	mov	r0, r3
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	08031998 	.word	0x08031998

0800f040 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f04c:	4a06      	ldr	r2, [pc, #24]	@ (800f068 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	887a      	ldrh	r2, [r7, #2]
 800f056:	809a      	strh	r2, [r3, #4]
    }
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop
 800f068:	0802fe1c 	.word	0x0802fe1c

0800f06c <_ZN8touchgfx23AbstractGraphDecorationC1Ev>:
#include <touchgfx/widgets/graph/GraphElements.hpp>

namespace touchgfx
{
/** Helper class used for adding labels around the graph. Currently empty. */
class AbstractGraphDecoration : public AbstractGraphElementNoCWR
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fd04 	bl	800ea84 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800f07c:	4a03      	ldr	r2, [pc, #12]	@ (800f08c <_ZN8touchgfx23AbstractGraphDecorationC1Ev+0x20>)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4618      	mov	r0, r3
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	08030404 	.word	0x08030404

0800f090 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>:
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	4a05      	ldr	r2, [pc, #20]	@ (800f0b0 <_ZN8touchgfx23AbstractGraphDecorationD1Ev+0x20>)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	601a      	str	r2, [r3, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff fd39 	bl	800eb18 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	08030404 	.word	0x08030404

0800f0b4 <_ZN8touchgfx23AbstractGraphDecorationD0Ev>:
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff ffe7 	bl	800f090 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>
 800f0c2:	2130      	movs	r1, #48	@ 0x30
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f01d fece 	bl	802ce66 <_ZdlPvj>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	2330      	movs	r3, #48	@ 0x30
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	f01e ff2b 	bl	802df40 <memset>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7ff ffbd 	bl	800f06c <_ZN8touchgfx23AbstractGraphDecorationC1Ev>
 800f0f2:	4a12      	ldr	r2, [pc, #72]	@ (800f13c <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x68>)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	601a      	str	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	635a      	str	r2, [r3, #52]	@ 0x34
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3338      	adds	r3, #56	@ 0x38
 800f108:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7ff ff97 	bl	800f040 <_ZN8touchgfx9TypedTextC1Et>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	222e      	movs	r2, #46	@ 0x2e
 800f126:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	4618      	mov	r0, r3
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	08031c0c 	.word	0x08031c0c

0800f140 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	889a      	ldrh	r2, [r3, #4]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	809a      	strh	r2, [r3, #4]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4618      	mov	r0, r3
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fe f8ce 	bl	800d30c <_ZN8touchgfx15AbstractPainterC1Ev>
 800f170:	4a26      	ldr	r2, [pc, #152]	@ (800f20c <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	601a      	str	r2, [r3, #0]
 800f176:	2302      	movs	r3, #2
 800f178:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800f17a:	f7fb fce9 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 800f17e:	4603      	mov	r3, r0
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	322c      	adds	r2, #44	@ 0x2c
 800f184:	6812      	ldr	r2, [r2, #0]
 800f186:	4618      	mov	r0, r3
 800f188:	4790      	blx	r2
 800f18a:	4603      	mov	r3, r0
 800f18c:	461a      	mov	r2, r3
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
 800f190:	4293      	cmp	r3, r2
 800f192:	bf0c      	ite	eq
 800f194:	2301      	moveq	r3, #1
 800f196:	2300      	movne	r3, #0
 800f198:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800f19a:	f7fb fccd 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fe f8a7 	bl	800d2f4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bf14      	ite	ne
 800f1ac:	2301      	movne	r3, #1
 800f1ae:	2300      	moveq	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d01b      	beq.n	800f1ee <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800f1b6:	f7fb fcbf 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fe f899 	bl	800d2f4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	322c      	adds	r2, #44	@ 0x2c
 800f1c8:	6812      	ldr	r2, [r2, #0]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	4790      	blx	r2
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	bf0c      	ite	eq
 800f1d8:	2301      	moveq	r3, #1
 800f1da:	2300      	movne	r3, #0
 800f1dc:	b2da      	uxtb	r2, r3
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bf14      	ite	ne
 800f1e8:	2301      	movne	r3, #1
 800f1ea:	2300      	moveq	r3, #0
 800f1ec:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800f1ee:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d105      	bne.n	800f200 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 800f1f4:	4b06      	ldr	r3, [pc, #24]	@ (800f210 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 800f1f6:	4a07      	ldr	r2, [pc, #28]	@ (800f214 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 800f1f8:	2128      	movs	r1, #40	@ 0x28
 800f1fa:	4807      	ldr	r0, [pc, #28]	@ (800f218 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 800f1fc:	f01e fb94 	bl	802d928 <__assert_func>
    }
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	080303e4 	.word	0x080303e4
 800f210:	0802f428 	.word	0x0802f428
 800f214:	0802f48c 	.word	0x0802f48c
 800f218:	0802f4cc 	.word	0x0802f4cc

0800f21c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
    {
 800f226:	4a08      	ldr	r2, [pc, #32]	@ (800f248 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	601a      	str	r2, [r3, #0]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3304      	adds	r3, #4
 800f230:	4618      	mov	r0, r3
 800f232:	f7fe f82c 	bl	800d28e <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f827 	bl	800f28c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	080303d0 	.word	0x080303d0

0800f24c <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
    {
 800f254:	4a04      	ldr	r2, [pc, #16]	@ (800f268 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	601a      	str	r2, [r3, #0]
    }
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4618      	mov	r0, r3
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	080303d0 	.word	0x080303d0

0800f26c <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
    }
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff ffe9 	bl	800f24c <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f27a:	2108      	movs	r1, #8
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f01d fdf2 	bl	802ce66 <_ZdlPvj>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4618      	mov	r0, r3
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	683a      	ldr	r2, [r7, #0]
 800f29a:	605a      	str	r2, [r3, #4]
    }
 800f29c:	bf00      	nop
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	4a05      	ldr	r2, [pc, #20]	@ (800f2c8 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe f83b 	bl	800d334 <_ZN8touchgfx15AbstractPainterD1Ev>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	080303e4 	.word	0x080303e4

0800f2cc <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff ffe7 	bl	800f2a8 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f2da:	2108      	movs	r1, #8
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f01d fdc2 	bl	802ce66 <_ZdlPvj>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff ff31 	bl	800f160 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3308      	adds	r3, #8
 800f302:	6839      	ldr	r1, [r7, #0]
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff ff89 	bl	800f21c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800f30a:	4a05      	ldr	r2, [pc, #20]	@ (800f320 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	601a      	str	r2, [r3, #0]
 800f310:	4a04      	ldr	r2, [pc, #16]	@ (800f324 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	609a      	str	r2, [r3, #8]
    {
    }
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4618      	mov	r0, r3
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	08031620 	.word	0x08031620
 800f324:	08031644 	.word	0x08031644

0800f328 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3308      	adds	r3, #8
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ffa7 	bl	800f28c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800f342:	f107 0314 	add.w	r3, r7, #20
 800f346:	4618      	mov	r0, r3
 800f348:	f7fd ffaf 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 800f34c:	4603      	mov	r3, r0
 800f34e:	0c1b      	lsrs	r3, r3, #16
 800f350:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	741a      	strb	r2, [r3, #16]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 800f35a:	f107 0310 	add.w	r3, r7, #16
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fd ffa3 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 800f364:	4603      	mov	r3, r0
 800f366:	0a1b      	lsrs	r3, r3, #8
 800f368:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	745a      	strb	r2, [r3, #17]
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800f372:	f107 030c 	add.w	r3, r7, #12
 800f376:	4618      	mov	r0, r3
 800f378:	f7fd ff97 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 800f37c:	4603      	mov	r3, r0
 800f37e:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	749a      	strb	r2, [r3, #18]
    }
 800f384:	bf00      	nop
 800f386:	3718      	adds	r7, #24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800f38c:	f1a0 0008 	sub.w	r0, r0, #8
 800f390:	e7ca      	b.n	800f328 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>

0800f392 <_ZN15Screen3ViewBase9function1Ev>:
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 800f392:	b480      	push	{r7}
 800f394:	b083      	sub	sp, #12
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen3
    }
 800f39a:	bf00      	nop
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <_ZN15Screen3ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f3ae:	f00b fdf1 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800f3b2:	4603      	mov	r3, r0
    }
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	4a05      	ldr	r2, [pc, #20]	@ (800f3dc <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7fd fb6d 	bl	800caac <_ZN8touchgfx6ScreenD1Ev>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	0803039c 	.word	0x0803039c

0800f3e0 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff ffe7 	bl	800f3bc <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 800f3ee:	2140      	movs	r1, #64	@ 0x40
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f01d fd38 	bl	802ce66 <_ZdlPvj>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_ZN8touchgfx15GraphScrollDataD1Ev>:
class GraphScrollData : public DynamicDataGraph
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	4a05      	ldr	r2, [pc, #20]	@ (800f420 <_ZN8touchgfx15GraphScrollDataD1Ev+0x20>)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	601a      	str	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff fa13 	bl	800e83c <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	08031cac 	.word	0x08031cac

0800f424 <_ZN8touchgfx15GraphScrollDataD0Ev>:
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff ffe7 	bl	800f400 <_ZN8touchgfx15GraphScrollDataD1Ev>
 800f432:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f01d fd15 	bl	802ce66 <_ZdlPvj>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4618      	mov	r0, r3
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
	...

0800f448 <_ZN8touchgfx11GraphScrollILs400EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	4a05      	ldr	r2, [pc, #20]	@ (800f468 <_ZN8touchgfx11GraphScrollILs400EED1Ev+0x20>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff ffd1 	bl	800f400 <_ZN8touchgfx15GraphScrollDataD1Ev>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	08030200 	.word	0x08030200

0800f46c <_ZN8touchgfx11GraphScrollILs400EED0Ev>:
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff ffe7 	bl	800f448 <_ZN8touchgfx11GraphScrollILs400EED1Ev>
 800f47a:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f01d fcf1 	bl	802ce66 <_ZdlPvj>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4618      	mov	r0, r3
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
class GraphElementGridBase : public AbstractGraphElementNoCWR
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	4a05      	ldr	r2, [pc, #20]	@ (800f4b0 <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff fb39 	bl	800eb18 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	08031a14 	.word	0x08031a14

0800f4b4 <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff ffe7 	bl	800f490 <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800f4c2:	2140      	movs	r1, #64	@ 0x40
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f01d fcce 	bl	802ce66 <_ZdlPvj>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZN8touchgfx17GraphElementGridXC1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff fb3c 	bl	800eb5c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800f4e4:	4a03      	ldr	r2, [pc, #12]	@ (800f4f4 <_ZN8touchgfx17GraphElementGridXC1Ev+0x20>)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	08030544 	.word	0x08030544

0800f4f8 <_ZN8touchgfx17GraphElementGridXD1Ev>:
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	4a05      	ldr	r2, [pc, #20]	@ (800f518 <_ZN8touchgfx17GraphElementGridXD1Ev+0x20>)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7ff ffc1 	bl	800f490 <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	08030544 	.word	0x08030544

0800f51c <_ZN8touchgfx17GraphElementGridXD0Ev>:
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff ffe7 	bl	800f4f8 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800f52a:	2140      	movs	r1, #64	@ 0x40
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f01d fc9a 	bl	802ce66 <_ZdlPvj>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <_ZN8touchgfx17GraphElementGridYC1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4618      	mov	r0, r3
 800f548:	f7ff fb08 	bl	800eb5c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800f54c:	4a03      	ldr	r2, [pc, #12]	@ (800f55c <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4618      	mov	r0, r3
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	0803048c 	.word	0x0803048c

0800f560 <_ZN8touchgfx17GraphElementGridYD1Ev>:
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	4a05      	ldr	r2, [pc, #20]	@ (800f580 <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	601a      	str	r2, [r3, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff ff8d 	bl	800f490 <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4618      	mov	r0, r3
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	0803048c 	.word	0x0803048c

0800f584 <_ZN8touchgfx17GraphElementGridYD0Ev>:
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ffe7 	bl	800f560 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800f592:	2140      	movs	r1, #64	@ 0x40
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f01d fc66 	bl	802ce66 <_ZdlPvj>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <_ZN8touchgfx15GraphLabelsBaseD1Ev>:
class GraphLabelsBase : public AbstractGraphDecoration
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	4a08      	ldr	r2, [pc, #32]	@ (800f5d0 <_ZN8touchgfx15GraphLabelsBaseD1Ev+0x2c>)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3338      	adds	r3, #56	@ 0x38
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fa fdf0 	bl	800a19c <_ZN8touchgfx9TypedTextD1Ev>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7ff fd66 	bl	800f090 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	08031c0c 	.word	0x08031c0c

0800f5d4 <_ZN8touchgfx15GraphLabelsBaseD0Ev>:
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff ffe1 	bl	800f5a4 <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800f5e2:	214c      	movs	r1, #76	@ 0x4c
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f01d fc3e 	bl	802ce66 <_ZdlPvj>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <_ZN8touchgfx12GraphLabelsXC1Ev>:

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff fd68 	bl	800f0d4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800f604:	4a03      	ldr	r2, [pc, #12]	@ (800f614 <_ZN8touchgfx12GraphLabelsXC1Ev+0x20>)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	08031acc 	.word	0x08031acc

0800f618 <_ZN8touchgfx12GraphLabelsXD1Ev>:
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	4a05      	ldr	r2, [pc, #20]	@ (800f638 <_ZN8touchgfx12GraphLabelsXD1Ev+0x20>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff ffbb 	bl	800f5a4 <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	08031acc 	.word	0x08031acc

0800f63c <_ZN8touchgfx12GraphLabelsXD0Ev>:
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff ffe7 	bl	800f618 <_ZN8touchgfx12GraphLabelsXD1Ev>
 800f64a:	214c      	movs	r1, #76	@ 0x4c
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f01d fc0a 	bl	802ce66 <_ZdlPvj>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <_ZN8touchgfx12GraphLabelsYC1Ev>:

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff fd34 	bl	800f0d4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800f66c:	4a03      	ldr	r2, [pc, #12]	@ (800f67c <_ZN8touchgfx12GraphLabelsYC1Ev+0x20>)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	08031b6c 	.word	0x08031b6c

0800f680 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	4a05      	ldr	r2, [pc, #20]	@ (800f6a0 <_ZN8touchgfx12GraphLabelsYD1Ev+0x20>)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff ff87 	bl	800f5a4 <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4618      	mov	r0, r3
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	08031b6c 	.word	0x08031b6c

0800f6a4 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7ff ffe7 	bl	800f680 <_ZN8touchgfx12GraphLabelsYD1Ev>
 800f6b2:	214c      	movs	r1, #76	@ 0x4c
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f01d fbd6 	bl	802ce66 <_ZdlPvj>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <_ZN8touchgfx16GraphElementLineD1Ev>:
class GraphElementLine : public AbstractGraphElement
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	4a05      	ldr	r2, [pc, #20]	@ (800f6e4 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	601a      	str	r2, [r3, #0]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7ff f9b3 	bl	800ea40 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	08031998 	.word	0x08031998

0800f6e8 <_ZN8touchgfx16GraphElementLineD0Ev>:
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7ff ffe7 	bl	800f6c4 <_ZN8touchgfx16GraphElementLineD1Ev>
 800f6f6:	2130      	movs	r1, #48	@ 0x30
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f01d fbb4 	bl	802ce66 <_ZdlPvj>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	4a09      	ldr	r2, [pc, #36]	@ (800f738 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	4a09      	ldr	r2, [pc, #36]	@ (800f73c <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	609a      	str	r2, [r3, #8]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3308      	adds	r3, #8
 800f720:	4618      	mov	r0, r3
 800f722:	f7ff fd93 	bl	800f24c <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff fdbd 	bl	800f2a8 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	08031620 	.word	0x08031620
 800f73c:	08031644 	.word	0x08031644

0800f740 <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 800f740:	f1a0 0008 	sub.w	r0, r0, #8
 800f744:	e7e0      	b.n	800f708 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f746:	bf00      	nop

0800f748 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff ffd9 	bl	800f708 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f756:	2114      	movs	r1, #20
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f01d fb84 	bl	802ce66 <_ZdlPvj>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 800f768:	f1a0 0008 	sub.w	r0, r0, #8
 800f76c:	e7ec      	b.n	800f748 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

0800f770 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	4a05      	ldr	r2, [pc, #20]	@ (800f790 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	f7fd fd1f 	bl	800d1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	080301e8 	.word	0x080301e8

0800f794 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7ff ffe7 	bl	800f770 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f7a2:	2110      	movs	r1, #16
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f01d fb5e 	bl	802ce66 <_ZdlPvj>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <_ZN15Screen3ViewBaseC1Ev>:
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen3ViewBase::Screen3ViewBase() :
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b0bf      	sub	sp, #252	@ 0xfc
 800f7b8:	af02      	add	r7, sp, #8
 800f7ba:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f000 fc5c 	bl	801007c <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 800f7c4:	4ac2      	ldr	r2, [pc, #776]	@ (800fad0 <_ZN15Screen3ViewBaseC1Ev+0x31c>)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3340      	adds	r3, #64	@ 0x40
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fd f9d4 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	336c      	adds	r3, #108	@ 0x6c
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fd f9cf 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3398      	adds	r3, #152	@ 0x98
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd fa78 	bl	800ccd8 <_ZN8touchgfx6ButtonC1Ev>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	33cc      	adds	r3, #204	@ 0xcc
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 fc5b 	bl	80100a8 <_ZN8touchgfx11GraphScrollILs400EEC1Ev>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7ff fe6b 	bl	800f4d4 <_ZN8touchgfx17GraphElementGridXC1Ev>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800f804:	4618      	mov	r0, r3
 800f806:	f7ff fe99 	bl	800f53c <_ZN8touchgfx17GraphElementGridYC1Ev>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff feef 	bl	800f5f4 <_ZN8touchgfx12GraphLabelsXC1Ev>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff ff1d 	bl	800f65c <_ZN8touchgfx12GraphLabelsYC1Ev>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff fbf3 	bl	800f014 <_ZN8touchgfx16GraphElementLineC1Ev>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f603 14a4 	addw	r4, r3, #2468	@ 0x9a4
 800f834:	f107 0308 	add.w	r3, r7, #8
 800f838:	2100      	movs	r1, #0
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fd f8e4 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800f840:	68b9      	ldr	r1, [r7, #8]
 800f842:	4620      	mov	r0, r4
 800f844:	f7ff fd52 	bl	800f2ec <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f643 0098 	movw	r0, #14488	@ 0x3898
 800f84e:	4418      	add	r0, r3
 800f850:	4ba0      	ldr	r3, [pc, #640]	@ (800fad4 <_ZN15Screen3ViewBaseC1Ev+0x320>)
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	2300      	movs	r3, #0
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	f107 030c 	add.w	r3, r7, #12
 800f85c:	cb0c      	ldmia	r3, {r2, r3}
 800f85e:	6879      	ldr	r1, [r7, #4]
 800f860:	f000 fc3a 	bl	80100d8 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f603 13b8 	addw	r3, r3, #2488	@ 0x9b8
 800f86a:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 800f86e:	4618      	mov	r0, r3
 800f870:	f009 fedc 	bl	801962c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    
    __background.setPosition(0, 0, 800, 480);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800f87a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f884:	2200      	movs	r2, #0
 800f886:	2100      	movs	r1, #0
 800f888:	f7fa ff2e 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800f892:	2300      	movs	r3, #0
 800f894:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800f898:	2300      	movs	r3, #0
 800f89a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f8a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800f8a8:	041a      	lsls	r2, r3, #16
 800f8aa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f8ae:	021b      	lsls	r3, r3, #8
 800f8b0:	431a      	orrs	r2, r3
 800f8b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f8bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f8c0:	4611      	mov	r1, r2
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fd f8a0 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800f8c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f7fd f979 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3340      	adds	r3, #64	@ 0x40
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f7fd f93e 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800f8e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	f7fa fef8 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800f8fe:	2300      	movs	r3, #0
 800f900:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800f904:	2300      	movs	r3, #0
 800f906:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f90a:	2300      	movs	r3, #0
 800f90c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f910:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800f914:	041a      	lsls	r2, r3, #16
 800f916:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f91a:	021b      	lsls	r3, r3, #8
 800f91c:	431a      	orrs	r2, r3
 800f91e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800f922:	4313      	orrs	r3, r2
 800f924:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f928:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f92c:	4611      	mov	r1, r2
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fd f86a 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800f934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f936:	4619      	mov	r1, r3
 800f938:	4620      	mov	r0, r4
 800f93a:	f7fd f943 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	336c      	adds	r3, #108	@ 0x6c
 800f944:	4619      	mov	r1, r3
 800f946:	4610      	mov	r0, r2
 800f948:	f7fd f908 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(743, 421);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3398      	adds	r3, #152	@ 0x98
 800f950:	f240 12a5 	movw	r2, #421	@ 0x1a5
 800f954:	f240 21e7 	movw	r1, #743	@ 0x2e7
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fa ff1e 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f964:	f107 0314 	add.w	r3, r7, #20
 800f968:	2106      	movs	r1, #6
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fd f85b 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800f970:	f107 0318 	add.w	r3, r7, #24
 800f974:	2107      	movs	r1, #7
 800f976:	4618      	mov	r0, r3
 800f978:	f7fd f855 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 800f97c:	f107 0218 	add.w	r2, r7, #24
 800f980:	f107 0314 	add.w	r3, r7, #20
 800f984:	4619      	mov	r1, r3
 800f986:	4620      	mov	r0, r4
 800f988:	f008 fe3c 	bl	8018604 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	f643 0398 	movw	r3, #14488	@ 0x3898
 800f998:	4413      	add	r3, r2
 800f99a:	4619      	mov	r1, r3
 800f99c:	f7fd f96c 	bl	800cc78 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	3398      	adds	r3, #152	@ 0x98
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	4610      	mov	r0, r2
 800f9aa:	f7fd f8d7 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    dynamicGraph1.setPosition(65, 34, 670, 352);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800f9b4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	f240 239e 	movw	r3, #670	@ 0x29e
 800f9be:	2222      	movs	r2, #34	@ 0x22
 800f9c0:	2141      	movs	r1, #65	@ 0x41
 800f9c2:	f7fa fe91 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1000);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	33cc      	adds	r3, #204	@ 0xcc
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fe fb23 	bl	800e01c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800f9dc:	2300      	movs	r3, #0
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	f006 ff54 	bl	8016892 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	2100      	movs	r1, #0
 800f9fa:	f006 fe4d 	bl	8016698 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(-50, 50);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	33cc      	adds	r3, #204	@ 0xcc
 800fa02:	2232      	movs	r2, #50	@ 0x32
 800fa04:	f06f 0131 	mvn.w	r1, #49	@ 0x31
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fd ff18 	bl	800d83e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph1.setAlpha(246);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	33cc      	adds	r3, #204	@ 0xcc
 800fa12:	21f6      	movs	r1, #246	@ 0xf6
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fd fdcc 	bl	800d5b2 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>
    dynamicGraph1MajorXAxisGrid.setColor(touchgfx::Color::getColorFromRGB(0, 240, 16));
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f603 045c 	addw	r4, r3, #2140	@ 0x85c
 800fa20:	2300      	movs	r3, #0
 800fa22:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800fa26:	23f0      	movs	r3, #240	@ 0xf0
 800fa28:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800fa2c:	2310      	movs	r3, #16
 800fa2e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 800fa32:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800fa36:	041a      	lsls	r2, r3, #16
 800fa38:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800fa3c:	021b      	lsls	r3, r3, #8
 800fa3e:	431a      	orrs	r2, r3
 800fa40:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800fa44:	4313      	orrs	r3, r2
 800fa46:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fa4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fa4e:	4611      	mov	r1, r2
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fc ffd9 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800fa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7ff f82a 	bl	800eab4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorXAxisGrid.setInterval(100);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fa66:	663b      	str	r3, [r7, #96]	@ 0x60
 800fa68:	2364      	movs	r3, #100	@ 0x64
 800fa6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        setIntervalScaled(abs(interval) * dataScale);
 800fa6c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fa6e:	f000 faf7 	bl	8010060 <_ZN8touchgfx3absIiEET_S1_>
 800fa72:	4602      	mov	r2, r0
 800fa74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa78:	fb02 f303 	mul.w	r3, r2, r3
 800fa7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fa7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fa80:	657b      	str	r3, [r7, #84]	@ 0x54
        gridInterval = abs(interval);
 800fa82:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800fa84:	f000 faec 	bl	8010060 <_ZN8touchgfx3absIiEET_S1_>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa8c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fa8e:	bf00      	nop
    }
 800fa90:	bf00      	nop
    dynamicGraph1MajorXAxisGrid.setLineWidth(1);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fa98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lineWidth = width;
 800faa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800faa2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800faa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 800faaa:	bf00      	nop
    dynamicGraph1MajorXAxisGrid.setScale(1000);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fab2:	673b      	str	r3, [r7, #112]	@ 0x70
 800fab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        assert(scale != 0);
 800faba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d111      	bne.n	800fae4 <_ZN15Screen3ViewBaseC1Ev+0x330>
 800fac0:	4b05      	ldr	r3, [pc, #20]	@ (800fad8 <_ZN15Screen3ViewBaseC1Ev+0x324>)
 800fac2:	4a06      	ldr	r2, [pc, #24]	@ (800fadc <_ZN15Screen3ViewBaseC1Ev+0x328>)
 800fac4:	f240 112f 	movw	r1, #303	@ 0x12f
 800fac8:	4805      	ldr	r0, [pc, #20]	@ (800fae0 <_ZN15Screen3ViewBaseC1Ev+0x32c>)
 800faca:	f01d ff2d 	bl	802d928 <__assert_func>
 800face:	bf00      	nop
 800fad0:	080301b0 	.word	0x080301b0
 800fad4:	0801001b 	.word	0x0801001b
 800fad8:	0802f530 	.word	0x0802f530
 800fadc:	0802f53c 	.word	0x0802f53c
 800fae0:	0802f570 	.word	0x0802f570
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800fae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fae6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fae8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800faea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800faee:	4619      	mov	r1, r3
 800faf0:	f006 ff82 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800faf4:	4602      	mov	r2, r0
 800faf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800faf8:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fafa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fafc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fafe:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fb00:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fb0e:	4619      	mov	r1, r3
 800fb10:	4610      	mov	r0, r2
 800fb12:	f006 fdcc 	bl	80166ae <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(33, 196, 22));
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f603 049c 	addw	r4, r3, #2204	@ 0x89c
 800fb1c:	2321      	movs	r3, #33	@ 0x21
 800fb1e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800fb22:	23c4      	movs	r3, #196	@ 0xc4
 800fb24:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800fb28:	2316      	movs	r3, #22
 800fb2a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800fb2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800fb32:	041a      	lsls	r2, r3, #16
 800fb34:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fb38:	021b      	lsls	r3, r3, #8
 800fb3a:	431a      	orrs	r2, r3
 800fb3c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800fb40:	4313      	orrs	r3, r2
 800fb42:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fb46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fc ff5b 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800fb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb54:	4619      	mov	r1, r3
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7fe ffac 	bl	800eab4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisGrid.setInterval(10);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fb62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fb66:	230a      	movs	r3, #10
 800fb68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        setIntervalScaled(abs(interval) * dataScale);
 800fb6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800fb70:	f000 fa76 	bl	8010060 <_ZN8touchgfx3absIiEET_S1_>
 800fb74:	4602      	mov	r2, r0
 800fb76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb7c:	fb02 f303 	mul.w	r3, r2, r3
 800fb80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fb84:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800fb86:	67bb      	str	r3, [r7, #120]	@ 0x78
        gridInterval = abs(interval);
 800fb88:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800fb8a:	f000 fa69 	bl	8010060 <_ZN8touchgfx3absIiEET_S1_>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fb92:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fb94:	bf00      	nop
    }
 800fb96:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setLineWidth(1);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fb9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fba2:	2301      	movs	r3, #1
 800fba4:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        lineWidth = width;
 800fba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbac:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800fbb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 800fbb4:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setAlpha(226);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fbbc:	21e2      	movs	r1, #226	@ 0xe2
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fe fec6 	bl	800e950 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    dynamicGraph1MajorYAxisGrid.setScale(1000);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fbca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fbce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        assert(scale != 0);
 800fbd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d106      	bne.n	800fbec <_ZN15Screen3ViewBaseC1Ev+0x438>
 800fbde:	4bd2      	ldr	r3, [pc, #840]	@ (800ff28 <_ZN15Screen3ViewBaseC1Ev+0x774>)
 800fbe0:	4ad2      	ldr	r2, [pc, #840]	@ (800ff2c <_ZN15Screen3ViewBaseC1Ev+0x778>)
 800fbe2:	f240 112f 	movw	r1, #303	@ 0x12f
 800fbe6:	48d2      	ldr	r0, [pc, #840]	@ (800ff30 <_ZN15Screen3ViewBaseC1Ev+0x77c>)
 800fbe8:	f01d fe9e 	bl	802d928 <__assert_func>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800fbec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbf0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fbf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbf8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	f006 fefb 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800fc02:	4602      	mov	r2, r0
 800fc04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc08:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fc0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fc12:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fc14:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fc22:	4619      	mov	r1, r3
 800fc24:	4610      	mov	r0, r2
 800fc26:	f006 fd42 	bl	80166ae <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1MajorXAxisLabel.setInterval(102);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800fc30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fc34:	2366      	movs	r3, #102	@ 0x66
 800fc36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800fc3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc40:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fc44:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800fc48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        return i * scale;
 800fc4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fc50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800fc54:	fb02 f303 	mul.w	r3, r2, r3
 800fc58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fc5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800fc60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        labelInterval = abs(interval);
 800fc64:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800fc68:	f000 f9fa 	bl	8010060 <_ZN8touchgfx3absIiEET_S1_>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc72:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fc74:	bf00      	nop
    }
 800fc76:	bf00      	nop
    dynamicGraph1MajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_4H4X));
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f603 04dc 	addw	r4, r3, #2268	@ 0x8dc
 800fc7e:	f107 031c 	add.w	r3, r7, #28
 800fc82:	2101      	movs	r1, #1
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff f9db 	bl	800f040 <_ZN8touchgfx9TypedTextC1Et>
 800fc8a:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
        labelTypedText = typedText;
 800fc8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fc92:	3338      	adds	r3, #56	@ 0x38
 800fc94:	f107 021c 	add.w	r2, r7, #28
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff fa50 	bl	800f140 <_ZN8touchgfx9TypedTextaSERKS0_>
    }
 800fca0:	bf00      	nop
 800fca2:	f107 031c 	add.w	r3, r7, #28
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fa fa78 	bl	800a19c <_ZN8touchgfx9TypedTextD1Ev>
    dynamicGraph1MajorXAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f603 04dc 	addw	r4, r3, #2268	@ 0x8dc
 800fcb2:	2314      	movs	r3, #20
 800fcb4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 800fcb8:	2397      	movs	r3, #151	@ 0x97
 800fcba:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 800fcbe:	23c5      	movs	r3, #197	@ 0xc5
 800fcc0:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 800fcc4:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800fcc8:	041a      	lsls	r2, r3, #16
 800fcca:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800fcce:	021b      	lsls	r3, r3, #8
 800fcd0:	431a      	orrs	r2, r3
 800fcd2:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fcdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fc fe90 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800fce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcea:	4619      	mov	r1, r3
 800fcec:	4620      	mov	r0, r4
 800fcee:	f7fe fee1 	bl	800eab4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorXAxisLabel.setScale(1000);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800fcf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fcfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        assert(scale != 0);
 800fd04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d105      	bne.n	800fd18 <_ZN15Screen3ViewBaseC1Ev+0x564>
 800fd0c:	4b86      	ldr	r3, [pc, #536]	@ (800ff28 <_ZN15Screen3ViewBaseC1Ev+0x774>)
 800fd0e:	4a89      	ldr	r2, [pc, #548]	@ (800ff34 <_ZN15Screen3ViewBaseC1Ev+0x780>)
 800fd10:	213e      	movs	r1, #62	@ 0x3e
 800fd12:	4889      	ldr	r0, [pc, #548]	@ (800ff38 <_ZN15Screen3ViewBaseC1Ev+0x784>)
 800fd14:	f01d fe08 	bl	802d928 <__assert_func>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800fd18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fd1c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fd1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fd22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fd28:	4619      	mov	r1, r3
 800fd2a:	f006 fe65 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fd34:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fd36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fd3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fd3e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fd40:	bf00      	nop
    dynamicGraph1.addBottomElement(dynamicGraph1MajorXAxisLabel);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4610      	mov	r0, r2
 800fd52:	f006 fcd0 	bl	80166f6 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>

    dynamicGraph1MajorYAxisLabel.setInterval(10);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800fd5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fd60:	230a      	movs	r3, #10
 800fd62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800fd66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd6c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fd70:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800fd74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fd78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800fd7c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800fd80:	fb02 f303 	mul.w	r3, r2, r3
 800fd84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800fd88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800fd8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        labelInterval = abs(interval);
 800fd90:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800fd94:	f000 f964 	bl	8010060 <_ZN8touchgfx3absIiEET_S1_>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fd9e:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fda0:	bf00      	nop
    }
 800fda2:	bf00      	nop
    dynamicGraph1MajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_CELW));
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f603 1428 	addw	r4, r3, #2344	@ 0x928
 800fdaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdae:	2102      	movs	r1, #2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff f945 	bl	800f040 <_ZN8touchgfx9TypedTextC1Et>
 800fdb6:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
        labelTypedText = typedText;
 800fdba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fdbe:	3338      	adds	r3, #56	@ 0x38
 800fdc0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800fdc4:	4611      	mov	r1, r2
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7ff f9ba 	bl	800f140 <_ZN8touchgfx9TypedTextaSERKS0_>
    }
 800fdcc:	bf00      	nop
 800fdce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fa f9e2 	bl	800a19c <_ZN8touchgfx9TypedTextD1Ev>
    dynamicGraph1MajorYAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f603 1428 	addw	r4, r3, #2344	@ 0x928
 800fdde:	2314      	movs	r3, #20
 800fde0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800fde4:	2397      	movs	r3, #151	@ 0x97
 800fde6:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 800fdea:	23c5      	movs	r3, #197	@ 0xc5
 800fdec:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 800fdf0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800fdf4:	041a      	lsls	r2, r3, #16
 800fdf6:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800fdfa:	021b      	lsls	r3, r3, #8
 800fdfc:	431a      	orrs	r2, r3
 800fdfe:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800fe02:	4313      	orrs	r3, r2
 800fe04:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fe08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fc fdfa 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800fe14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe16:	4619      	mov	r1, r3
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f7fe fe4b 	bl	800eab4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisLabel.setScale(1000);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800fe24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fe28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        assert(scale != 0);
 800fe30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d105      	bne.n	800fe44 <_ZN15Screen3ViewBaseC1Ev+0x690>
 800fe38:	4b3b      	ldr	r3, [pc, #236]	@ (800ff28 <_ZN15Screen3ViewBaseC1Ev+0x774>)
 800fe3a:	4a3e      	ldr	r2, [pc, #248]	@ (800ff34 <_ZN15Screen3ViewBaseC1Ev+0x780>)
 800fe3c:	213e      	movs	r1, #62	@ 0x3e
 800fe3e:	483e      	ldr	r0, [pc, #248]	@ (800ff38 <_ZN15Screen3ViewBaseC1Ev+0x784>)
 800fe40:	f01d fd72 	bl	802d928 <__assert_func>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800fe44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe48:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fe4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe50:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fe54:	4619      	mov	r1, r3
 800fe56:	f006 fdcf 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe60:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fe62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fe6a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fe6c:	bf00      	nop
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	4610      	mov	r0, r2
 800fe7e:	f006 fc28 	bl	80166d2 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>

    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(196, 22, 33));
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f603 14a4 	addw	r4, r3, #2468	@ 0x9a4
 800fe88:	23c4      	movs	r3, #196	@ 0xc4
 800fe8a:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
 800fe8e:	2316      	movs	r3, #22
 800fe90:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
 800fe94:	2321      	movs	r3, #33	@ 0x21
 800fe96:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
 800fe9a:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 800fe9e:	041a      	lsls	r2, r3, #16
 800fea0:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800fea4:	021b      	lsls	r3, r3, #8
 800fea6:	431a      	orrs	r2, r3
 800fea8:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
 800feac:	4313      	orrs	r3, r2
 800feae:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800feb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800feb6:	4611      	mov	r1, r2
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fc fda5 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 800febe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fec0:	4619      	mov	r1, r3
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7ff fa30 	bl	800f328 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f603 1274 	addw	r2, r3, #2420	@ 0x974
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f603 13a4 	addw	r3, r3, #2468	@ 0x9a4
 800fed4:	4619      	mov	r1, r3
 800fed6:	4610      	mov	r0, r2
 800fed8:	f7fe fd2c 	bl	800e934 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800fee2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800fee6:	2302      	movs	r3, #2
 800fee8:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 800feec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800fef0:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 800fef4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800fef8:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800ff06:	4619      	mov	r1, r3
 800ff08:	4610      	mov	r0, r2
 800ff0a:	f006 fbd0 	bl	80166ae <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>


    add(dynamicGraph1);
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	33cc      	adds	r3, #204	@ 0xcc
 800ff14:	4619      	mov	r1, r3
 800ff16:	4610      	mov	r0, r2
 800ff18:	f7fc fe20 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	37f4      	adds	r7, #244	@ 0xf4
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd90      	pop	{r4, r7, pc}
 800ff26:	bf00      	nop
 800ff28:	0802f530 	.word	0x0802f530
 800ff2c:	0802f53c 	.word	0x0802f53c
 800ff30:	0802f570 	.word	0x0802f570
 800ff34:	0802f5c8 	.word	0x0802f5c8
 800ff38:	0802f5f8 	.word	0x0802f5f8

0800ff3c <_ZN15Screen3ViewBaseD1Ev>:

Screen3ViewBase::~Screen3ViewBase()
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	4a26      	ldr	r2, [pc, #152]	@ (800ffe0 <_ZN15Screen3ViewBaseD1Ev+0xa4>)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	601a      	str	r2, [r3, #0]
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 800ff4a:	f009 fb79 	bl	8019640 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	f643 0398 	movw	r3, #14488	@ 0x3898
 800ff54:	4413      	add	r3, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff fc0a 	bl	800f770 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f603 13a4 	addw	r3, r3, #2468	@ 0x9a4
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7ff fbd0 	bl	800f708 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7ff fba8 	bl	800f6c4 <_ZN8touchgfx16GraphElementLineD1Ev>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff fb80 	bl	800f680 <_ZN8touchgfx12GraphLabelsYD1Ev>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fb46 	bl	800f618 <_ZN8touchgfx12GraphLabelsXD1Ev>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff fae4 	bl	800f560 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff faaa 	bl	800f4f8 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	33cc      	adds	r3, #204	@ 0xcc
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff fa4d 	bl	800f448 <_ZN8touchgfx11GraphScrollILs400EED1Ev>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	3398      	adds	r3, #152	@ 0x98
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fc ff26 	bl	800ce04 <_ZN8touchgfx6ButtonD1Ev>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	336c      	adds	r3, #108	@ 0x6c
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fc fedd 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	3340      	adds	r3, #64	@ 0x40
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fc fed8 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff f9f4 	bl	800f3bc <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3708      	adds	r7, #8
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	080301b0 	.word	0x080301b0

0800ffe4 <_ZN15Screen3ViewBaseD0Ev>:
Screen3ViewBase::~Screen3ViewBase()
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
}
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff ffa5 	bl	800ff3c <_ZN15Screen3ViewBaseD1Ev>
 800fff2:	f643 01a8 	movw	r1, #14504	@ 0x38a8
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f01c ff35 	bl	802ce66 <_ZdlPvj>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]

}
 801000e:	bf00      	nop
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
 8010022:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3398      	adds	r3, #152	@ 0x98
 8010028:	683a      	ldr	r2, [r7, #0]
 801002a:	429a      	cmp	r2, r3
 801002c:	d106      	bne.n	801003c <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When button1 clicked change screen to Screen4
        //Go to Screen4 with screen transition towards West
        application().gotoScreen4ScreenWipeTransitionWest();
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7ff f9b9 	bl	800f3a6 <_ZN15Screen3ViewBase11applicationEv>
 8010034:	4603      	mov	r3, r0
 8010036:	4618      	mov	r0, r3
 8010038:	f7fb f910 	bl	800b25c <_ZN23FrontendApplicationBase35gotoScreen4ScreenWipeTransitionWestEv>
    }
}
 801003c:	bf00      	nop
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <_ZN15Screen3ViewBase15handleTickEventEv>:

void Screen3ViewBase::handleTickEvent()
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
    //Interaction3
    //When every N tick call virtual function
    //Call function1
    function1();
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	332c      	adds	r3, #44	@ 0x2c
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	4798      	blx	r3
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <_ZN8touchgfx3absIiEET_S1_>:
 * @param  d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
{
    return (d < 0) ? -d : d;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	bfb8      	it	lt
 801006e:	425b      	neglt	r3, r3
}
 8010070:	4618      	mov	r0, r3
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4618      	mov	r0, r3
 8010088:	f00c fbdc 	bl	801c844 <_ZN8touchgfx6ScreenC1Ev>
 801008c:	4a05      	ldr	r2, [pc, #20]	@ (80100a4 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	0803039c 	.word	0x0803039c

080100a8 <_ZN8touchgfx11GraphScrollILs400EEC1Ev>:
{
public:
    GraphScroll()
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
        : GraphScrollData(CAPACITY, y)
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80100b8:	461a      	mov	r2, r3
 80100ba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80100be:	f7fe fbe1 	bl	800e884 <_ZN8touchgfx15GraphScrollDataC1EsPi>
 80100c2:	4a04      	ldr	r2, [pc, #16]	@ (80100d4 <_ZN8touchgfx11GraphScrollILs400EEC1Ev+0x2c>)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	601a      	str	r2, [r3, #0]
    {
    }
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4618      	mov	r0, r3
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	08030200 	.word	0x08030200

080100d8 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	4639      	mov	r1, r7
 80100e4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fd f83a 	bl	800d164 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80100f0:	4a08      	ldr	r2, [pc, #32]	@ (8010114 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	605a      	str	r2, [r3, #4]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3308      	adds	r3, #8
 8010100:	463a      	mov	r2, r7
 8010102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010106:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	080301e8 	.word	0x080301e8

08010118 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	68d2      	ldr	r2, [r2, #12]
 801012a:	1052      	asrs	r2, r2, #1
 801012c:	1898      	adds	r0, r3, r2
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	f003 0301 	and.w	r3, r3, #1
 8010136:	2b00      	cmp	r3, #0
 8010138:	d102      	bne.n	8010140 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	e00a      	b.n	8010156 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	68d2      	ldr	r2, [r2, #12]
 8010148:	1052      	asrs	r2, r2, #1
 801014a:	4413      	add	r3, r2
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	6892      	ldr	r2, [r2, #8]
 8010152:	4413      	add	r3, r2
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6839      	ldr	r1, [r7, #0]
 8010158:	4798      	blx	r3
    }
 801015a:	bf00      	nop
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}

08010162 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010162:	b480      	push	{r7}
 8010164:	b083      	sub	sp, #12
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d010      	beq.n	8010194 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d107      	bne.n	801018a <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	f003 0301 	and.w	r3, r3, #1
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010186:	2301      	movs	r3, #1
 8010188:	e000      	b.n	801018c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801018a:	2300      	movs	r3, #0
 801018c:	2b01      	cmp	r3, #1
 801018e:	d001      	beq.n	8010194 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010190:	2301      	movs	r3, #1
 8010192:	e000      	b.n	8010196 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010194:	2300      	movs	r3, #0
    }
 8010196:	4618      	mov	r0, r3
 8010198:	370c      	adds	r7, #12
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80101a2:	b590      	push	{r4, r7, lr}
 80101a4:	b087      	sub	sp, #28
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6178      	str	r0, [r7, #20]
 80101aa:	460b      	mov	r3, r1
 80101ac:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80101b4:	4611      	mov	r1, r2
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fa fb0d 	bl	800a7d6 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3384      	adds	r3, #132	@ 0x84
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	697c      	ldr	r4, [r7, #20]
 80101c6:	463a      	mov	r2, r7
 80101c8:	6979      	ldr	r1, [r7, #20]
 80101ca:	4610      	mov	r0, r2
 80101cc:	4798      	blx	r3
 80101ce:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80101d2:	463a      	mov	r2, r7
 80101d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80101d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80101da:	bf00      	nop
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd90      	pop	{r4, r7, pc}

080101e2 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80101e2:	b590      	push	{r4, r7, lr}
 80101e4:	b087      	sub	sp, #28
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6178      	str	r0, [r7, #20]
 80101ea:	460b      	mov	r3, r1
 80101ec:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80101f4:	4611      	mov	r1, r2
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fa fafc 	bl	800a7f4 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3384      	adds	r3, #132	@ 0x84
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	697c      	ldr	r4, [r7, #20]
 8010206:	463a      	mov	r2, r7
 8010208:	6979      	ldr	r1, [r7, #20]
 801020a:	4610      	mov	r0, r2
 801020c:	4798      	blx	r3
 801020e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8010212:	463a      	mov	r2, r7
 8010214:	ca07      	ldmia	r2, {r0, r1, r2}
 8010216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801021a:	bf00      	nop
 801021c:	371c      	adds	r7, #28
 801021e:	46bd      	mov	sp, r7
 8010220:	bd90      	pop	{r4, r7, pc}

08010222 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8010222:	b580      	push	{r7, lr}
 8010224:	b082      	sub	sp, #8
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7fa f9a9 	bl	800a584 <_ZN8touchgfx4RectC1Ev>
    }
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 801023a:	b480      	push	{r7}
 801023c:	b083      	sub	sp, #12
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	460b      	mov	r3, r1
 8010244:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	78fa      	ldrb	r2, [r7, #3]
 801024a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 801024e:	bf00      	nop
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr
	...

0801025c <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 801025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025e:	b085      	sub	sp, #20
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	460b      	mov	r3, r1
 8010266:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8010268:	687e      	ldr	r6, [r7, #4]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3334      	adds	r3, #52	@ 0x34
 8010270:	681c      	ldr	r4, [r3, #0]
 8010272:	887d      	ldrh	r5, [r7, #2]
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f867 	bl	8010348 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 801027a:	4603      	mov	r3, r0
 801027c:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801027e:	4b1c      	ldr	r3, [pc, #112]	@ (80102f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d105      	bne.n	8010292 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8010286:	4b1b      	ldr	r3, [pc, #108]	@ (80102f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8010288:	4a1b      	ldr	r2, [pc, #108]	@ (80102f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 801028a:	216c      	movs	r1, #108	@ 0x6c
 801028c:	481b      	ldr	r0, [pc, #108]	@ (80102fc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 801028e:	f01d fb4b 	bl	802d928 <__assert_func>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	889a      	ldrh	r2, [r3, #4]
 801029a:	4b19      	ldr	r3, [pc, #100]	@ (8010300 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	429a      	cmp	r2, r3
 80102a0:	bf34      	ite	cc
 80102a2:	2301      	movcc	r3, #1
 80102a4:	2300      	movcs	r3, #0
 80102a6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d105      	bne.n	80102b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 80102ac:	4b15      	ldr	r3, [pc, #84]	@ (8010304 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 80102ae:	4a12      	ldr	r2, [pc, #72]	@ (80102f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 80102b0:	216d      	movs	r1, #109	@ 0x6d
 80102b2:	4812      	ldr	r0, [pc, #72]	@ (80102fc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 80102b4:	f01d fb38 	bl	802d928 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80102b8:	4b13      	ldr	r3, [pc, #76]	@ (8010308 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	4b0c      	ldr	r3, [pc, #48]	@ (80102f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 80102be:	6819      	ldr	r1, [r3, #0]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	889b      	ldrh	r3, [r3, #4]
 80102c4:	005b      	lsls	r3, r3, #1
 80102c6:	440b      	add	r3, r1
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	3230      	adds	r2, #48	@ 0x30
 80102d4:	6812      	ldr	r2, [r2, #0]
 80102d6:	4618      	mov	r0, r3
 80102d8:	4790      	blx	r2
 80102da:	4603      	mov	r3, r0
 80102dc:	1aeb      	subs	r3, r5, r3
 80102de:	b29b      	uxth	r3, r3
 80102e0:	b21b      	sxth	r3, r3
 80102e2:	4619      	mov	r1, r3
 80102e4:	4630      	mov	r0, r6
 80102e6:	47a0      	blx	r4
    }
 80102e8:	bf00      	nop
 80102ea:	3714      	adds	r7, #20
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102f0:	2001231c 	.word	0x2001231c
 80102f4:	0802f64c 	.word	0x0802f64c
 80102f8:	0802f690 	.word	0x0802f690
 80102fc:	0802f6cc 	.word	0x0802f6cc
 8010300:	20012320 	.word	0x20012320
 8010304:	0802f710 	.word	0x0802f710
 8010308:	20012324 	.word	0x20012324

0801030c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	460b      	mov	r3, r1
 8010316:	807b      	strh	r3, [r7, #2]
 8010318:	4613      	mov	r3, r2
 801031a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3330      	adds	r3, #48	@ 0x30
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801032a:	4610      	mov	r0, r2
 801032c:	4798      	blx	r3
        setBaselineY(baselineY);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	3364      	adds	r3, #100	@ 0x64
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f9b7 2000 	ldrsh.w	r2, [r7]
 801033a:	4611      	mov	r1, r2
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	4798      	blx	r3
    }
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	3328      	adds	r3, #40	@ 0x28
    }
 8010354:	4618      	mov	r0, r3
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010368:	2300      	movs	r3, #0
    }
 801036a:	4618      	mov	r0, r3
 801036c:	370c      	adds	r7, #12
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr

08010376 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af02      	add	r7, sp, #8
 801037c:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f04f 33ff 	mov.w	r3, #4294967295
 8010384:	9300      	str	r3, [sp, #0]
 8010386:	f04f 33ff 	mov.w	r3, #4294967295
 801038a:	2200      	movs	r2, #0
 801038c:	2100      	movs	r1, #0
 801038e:	f7fa f910 	bl	800a5b2 <_ZN8touchgfx4RectC1Essss>
              text(0)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	609a      	str	r2, [r3, #8]
        {
        }
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4618      	mov	r0, r3
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
	...

080103a4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	4a08      	ldr	r2, [pc, #32]	@ (80103d0 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	601a      	str	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	3328      	adds	r3, #40	@ 0x28
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7f9 fef0 	bl	800a19c <_ZN8touchgfx9TypedTextD1Ev>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fa fdaa 	bl	800af18 <_ZN8touchgfx6WidgetD1Ev>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4618      	mov	r0, r3
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	08031f28 	.word	0x08031f28

080103d4 <_ZN8touchgfx8TextAreaD0Ev>:
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7ff ffe1 	bl	80103a4 <_ZN8touchgfx8TextAreaD1Ev>
 80103e2:	2148      	movs	r1, #72	@ 0x48
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f01c fd3e 	bl	802ce66 <_ZdlPvj>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4618      	mov	r0, r3
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7fa f948 	bl	800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f7ff ffad 	bl	8010376 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	4a05      	ldr	r2, [pc, #20]	@ (8010444 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	601a      	str	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff ffb5 	bl	80103a4 <_ZN8touchgfx8TextAreaD1Ev>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	08032094 	.word	0x08032094

08010448 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ffe7 	bl	8010424 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010456:	2148      	movs	r1, #72	@ 0x48
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f01c fd04 	bl	802ce66 <_ZdlPvj>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4618      	mov	r0, r3
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8010474:	4618      	mov	r0, r3
 8010476:	370c      	adds	r7, #12
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8010480:	b480      	push	{r7}
 8010482:	b083      	sub	sp, #12
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    }
 8010492:	bf00      	nop
 8010494:	370c      	adds	r7, #12
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <_ZN15Screen4ViewBase9function1Ei>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void function1(int value)
 801049e:	b480      	push	{r7}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen4
    }
 80104a8:	bf00      	nop
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <_ZN15Screen4ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80104bc:	f00a fd6a 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80104c0:	4603      	mov	r3, r0
    }
 80104c2:	4618      	mov	r0, r3
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
	...

080104cc <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev>:
class View : public Screen
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	4a05      	ldr	r2, [pc, #20]	@ (80104ec <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev+0x20>)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fc fae5 	bl	800caac <_ZN8touchgfx6ScreenD1Ev>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	08030788 	.word	0x08030788

080104f0 <_ZN8touchgfx4ViewI16Screen4PresenterED0Ev>:
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff ffe7 	bl	80104cc <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev>
 80104fe:	2140      	movs	r1, #64	@ 0x40
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f01c fcb0 	bl	802ce66 <_ZdlPvj>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	4a0a      	ldr	r2, [pc, #40]	@ (8010544 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	3358      	adds	r3, #88	@ 0x58
 8010522:	4618      	mov	r0, r3
 8010524:	f7fc faa0 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	332c      	adds	r3, #44	@ 0x2c
 801052c:	4618      	mov	r0, r3
 801052e:	f7fc fc47 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	f7fc fa97 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	08031298 	.word	0x08031298

08010548 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7ff ffdd 	bl	8010510 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8010556:	21b4      	movs	r1, #180	@ 0xb4
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f01c fc84 	bl	802ce66 <_ZdlPvj>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	4a05      	ldr	r2, [pc, #20]	@ (8010588 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff ffc9 	bl	8010510 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	080311bc 	.word	0x080311bc

0801058c <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff ffe7 	bl	8010568 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801059a:	21b8      	movs	r1, #184	@ 0xb8
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f01c fc62 	bl	802ce66 <_ZdlPvj>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	4a08      	ldr	r2, [pc, #32]	@ (80105d8 <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	33b8      	adds	r3, #184	@ 0xb8
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fc fbdc 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff ffce 	bl	8010568 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	080310d8 	.word	0x080310d8

080105dc <_ZN8touchgfx11BoxProgressD0Ev>:
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7ff ffe1 	bl	80105ac <_ZN8touchgfx11BoxProgressD1Ev>
 80105ea:	21e4      	movs	r1, #228	@ 0xe4
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f01c fc3a 	bl	802ce66 <_ZdlPvj>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	4a05      	ldr	r2, [pc, #20]	@ (801061c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	601a      	str	r2, [r3, #0]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff ff09 	bl	8010424 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	080307d4 	.word	0x080307d4

08010620 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff ffe7 	bl	80105fc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801062e:	214c      	movs	r1, #76	@ 0x4c
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f01c fc18 	bl	802ce66 <_ZdlPvj>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4618      	mov	r0, r3
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	4a08      	ldr	r2, [pc, #32]	@ (801066c <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	33b4      	adds	r3, #180	@ 0xb4
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff ffd2 	bl	80105fc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff ff58 	bl	8010510 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	08030fec 	.word	0x08030fec

08010670 <_ZN8touchgfx12TextProgressD0Ev>:
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7ff ffe1 	bl	8010640 <_ZN8touchgfx12TextProgressD1Ev>
 801067e:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f01c fbef 	bl	802ce66 <_ZdlPvj>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4618      	mov	r0, r3
 801068c:	3708      	adds	r7, #8
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
	...

08010694 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	4a0f      	ldr	r2, [pc, #60]	@ (80106dc <_ZN8touchgfx6SliderD1Ev+0x48>)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	601a      	str	r2, [r3, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	33b8      	adds	r3, #184	@ 0xb8
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fc f9de 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	338c      	adds	r3, #140	@ 0x8c
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7fc fb85 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	3360      	adds	r3, #96	@ 0x60
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fc fb80 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	3334      	adds	r3, #52	@ 0x34
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fc fb7b 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fc f9cb 	bl	800ca68 <_ZN8touchgfx9ContainerD1Ev>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	080313fc 	.word	0x080313fc

080106e0 <_ZN8touchgfx6SliderD0Ev>:
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7ff ffd3 	bl	8010694 <_ZN8touchgfx6SliderD1Ev>
 80106ee:	21f4      	movs	r1, #244	@ 0xf4
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f01c fbb8 	bl	802ce66 <_ZdlPvj>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	4a05      	ldr	r2, [pc, #20]	@ (8010720 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev+0x20>)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	601a      	str	r2, [r3, #0]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4618      	mov	r0, r3
 8010712:	f000 fb1f 	bl	8010d54 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	3708      	adds	r7, #8
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}
 8010720:	08030770 	.word	0x08030770

08010724 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED0Ev>:
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7ff ffe7 	bl	8010700 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev>
 8010732:	2110      	movs	r1, #16
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f01c fb96 	bl	802ce66 <_ZdlPvj>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	4a05      	ldr	r2, [pc, #20]	@ (8010764 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	f7fc fd35 	bl	800d1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	4618      	mov	r0, r3
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	08030758 	.word	0x08030758

08010768 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f7ff ffe7 	bl	8010744 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010776:	2110      	movs	r1, #16
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f01c fb74 	bl	802ce66 <_ZdlPvj>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4618      	mov	r0, r3
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <_ZN15Screen4ViewBaseC1Ev>:
#include <gui_generated/screen4_screen/Screen4ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen4ViewBase::Screen4ViewBase() :
 8010788:	b590      	push	{r4, r7, lr}
 801078a:	b099      	sub	sp, #100	@ 0x64
 801078c:	af02      	add	r7, sp, #8
 801078e:	6078      	str	r0, [r7, #4]
    sliderValueChangedCallback(this, &Screen4ViewBase::sliderValueChangedCallbackHandler),
    buttonCallback(this, &Screen4ViewBase::buttonCallbackHandler)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 fa98 	bl	8010cc8 <_ZN8touchgfx4ViewI16Screen4PresenterEC1Ev>
 8010798:	4add      	ldr	r2, [pc, #884]	@ (8010b10 <_ZN15Screen4ViewBaseC1Ev+0x388>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	3340      	adds	r3, #64	@ 0x40
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fc f9ea 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	336c      	adds	r3, #108	@ 0x6c
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fc f9e5 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	3398      	adds	r3, #152	@ 0x98
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fc fa8e 	bl	800ccd8 <_ZN8touchgfx6ButtonC1Ev>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	33cc      	adds	r3, #204	@ 0xcc
 80107c0:	4618      	mov	r0, r3
 80107c2:	f003 fe23 	bl	801440c <_ZN8touchgfx11BoxProgressC1Ev>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80107cc:	4618      	mov	r0, r3
 80107ce:	f003 fd13 	bl	80141f8 <_ZN8touchgfx12TextProgressC1Ev>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80107d8:	4618      	mov	r0, r3
 80107da:	f004 fc9f 	bl	801511c <_ZN8touchgfx6SliderC1Ev>
    sliderValueChangedCallback(this, &Screen4ViewBase::sliderValueChangedCallbackHandler),
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f503 706e 	add.w	r0, r3, #952	@ 0x3b8
 80107e4:	4bcb      	ldr	r3, [pc, #812]	@ (8010b14 <_ZN15Screen4ViewBaseC1Ev+0x38c>)
 80107e6:	60bb      	str	r3, [r7, #8]
 80107e8:	2300      	movs	r3, #0
 80107ea:	60fb      	str	r3, [r7, #12]
 80107ec:	f107 0308 	add.w	r3, r7, #8
 80107f0:	cb0c      	ldmia	r3, {r2, r3}
 80107f2:	6879      	ldr	r1, [r7, #4]
 80107f4:	f000 fa8e 	bl	8010d14 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
    buttonCallback(this, &Screen4ViewBase::buttonCallbackHandler)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f503 7072 	add.w	r0, r3, #968	@ 0x3c8
 80107fe:	4bc6      	ldr	r3, [pc, #792]	@ (8010b18 <_ZN15Screen4ViewBaseC1Ev+0x390>)
 8010800:	613b      	str	r3, [r7, #16]
 8010802:	2300      	movs	r3, #0
 8010804:	617b      	str	r3, [r7, #20]
 8010806:	f107 0310 	add.w	r3, r7, #16
 801080a:	cb0c      	ldmia	r3, {r2, r3}
 801080c:	6879      	ldr	r1, [r7, #4]
 801080e:	f000 fac1 	bl	8010d94 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 800, 480);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010818:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8010822:	2200      	movs	r2, #0
 8010824:	2100      	movs	r1, #0
 8010826:	f7f9 ff5f 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010830:	2300      	movs	r3, #0
 8010832:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8010836:	2300      	movs	r3, #0
 8010838:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 801083c:	2300      	movs	r3, #0
 801083e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8010842:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8010846:	041a      	lsls	r2, r3, #16
 8010848:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 801084c:	021b      	lsls	r3, r3, #8
 801084e:	431a      	orrs	r2, r3
 8010850:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8010854:	4313      	orrs	r3, r2
 8010856:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801085a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f7fc f8d1 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 8010866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010868:	4619      	mov	r1, r3
 801086a:	4620      	mov	r0, r4
 801086c:	f7fc f9aa 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	3340      	adds	r3, #64	@ 0x40
 8010876:	4619      	mov	r1, r3
 8010878:	4610      	mov	r0, r2
 801087a:	f7fc f96f 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8010884:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801088e:	2200      	movs	r2, #0
 8010890:	2100      	movs	r1, #0
 8010892:	f7f9 ff29 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(5, 1, 48));
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 801089c:	2305      	movs	r3, #5
 801089e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80108a2:	2301      	movs	r3, #1
 80108a4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80108a8:	2330      	movs	r3, #48	@ 0x30
 80108aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80108ae:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80108b2:	041a      	lsls	r2, r3, #16
 80108b4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80108b8:	021b      	lsls	r3, r3, #8
 80108ba:	431a      	orrs	r2, r3
 80108bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80108c0:	4313      	orrs	r3, r2
 80108c2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80108c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80108ca:	4611      	mov	r1, r2
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fc f89b 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 80108d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108d4:	4619      	mov	r1, r3
 80108d6:	4620      	mov	r0, r4
 80108d8:	f7fc f974 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	336c      	adds	r3, #108	@ 0x6c
 80108e2:	4619      	mov	r1, r3
 80108e4:	4610      	mov	r0, r2
 80108e6:	f7fc f939 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(743, 421);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	3398      	adds	r3, #152	@ 0x98
 80108ee:	f240 12a5 	movw	r2, #421	@ 0x1a5
 80108f2:	f240 21e7 	movw	r1, #743	@ 0x2e7
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7f9 ff4f 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8010902:	f107 0318 	add.w	r3, r7, #24
 8010906:	2106      	movs	r1, #6
 8010908:	4618      	mov	r0, r3
 801090a:	f7fc f88c 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 801090e:	f107 031c 	add.w	r3, r7, #28
 8010912:	2107      	movs	r1, #7
 8010914:	4618      	mov	r0, r3
 8010916:	f7fc f886 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 801091a:	f107 021c 	add.w	r2, r7, #28
 801091e:	f107 0318 	add.w	r3, r7, #24
 8010922:	4619      	mov	r1, r3
 8010924:	4620      	mov	r0, r4
 8010926:	f007 fe6d 	bl	8018604 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8010936:	4619      	mov	r1, r3
 8010938:	4610      	mov	r0, r2
 801093a:	f7fc f99d 	bl	800cc78 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	3398      	adds	r3, #152	@ 0x98
 8010944:	4619      	mov	r1, r3
 8010946:	4610      	mov	r0, r2
 8010948:	f7fc f908 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    boxProgress1.setXY(250, 143);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	33cc      	adds	r3, #204	@ 0xcc
 8010950:	228f      	movs	r2, #143	@ 0x8f
 8010952:	21fa      	movs	r1, #250	@ 0xfa
 8010954:	4618      	mov	r0, r3
 8010956:	f7f9 ff20 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(0, 0, 300, 10);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8010960:	230a      	movs	r3, #10
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8010968:	2200      	movs	r2, #0
 801096a:	2100      	movs	r1, #0
 801096c:	f003 fca8 	bl	80142c0 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 300);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8010976:	2300      	movs	r3, #0
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	2300      	movs	r3, #0
 801097c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8010980:	2100      	movs	r1, #0
 8010982:	f003 fdb3 	bl	80144ec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	33cc      	adds	r3, #204	@ 0xcc
 801098a:	2100      	movs	r1, #0
 801098c:	4618      	mov	r0, r3
 801098e:	f003 fd8c 	bl	80144aa <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_MEDIUM_ID));
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
 8010998:	f107 0320 	add.w	r3, r7, #32
 801099c:	2100      	movs	r1, #0
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fc f841 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 80109a4:	f107 0320 	add.w	r3, r7, #32
 80109a8:	4619      	mov	r1, r3
 80109aa:	4620      	mov	r0, r4
 80109ac:	f003 fec4 	bl	8014738 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 0));
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
 80109b6:	23ff      	movs	r3, #255	@ 0xff
 80109b8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80109bc:	23ff      	movs	r3, #255	@ 0xff
 80109be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80109c2:	2300      	movs	r3, #0
 80109c4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80109c8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80109cc:	041a      	lsls	r2, r3, #16
 80109ce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80109d2:	021b      	lsls	r3, r3, #8
 80109d4:	431a      	orrs	r2, r3
 80109d6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80109da:	4313      	orrs	r3, r2
 80109dc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80109e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80109e4:	4611      	mov	r1, r2
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fc f80e 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 80109ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109ee:	4619      	mov	r1, r3
 80109f0:	4620      	mov	r0, r4
 80109f2:	f003 fc57 	bl	80142a4 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	33cc      	adds	r3, #204	@ 0xcc
 80109fa:	213c      	movs	r1, #60	@ 0x3c
 80109fc:	4618      	mov	r0, r3
 80109fe:	f003 fc77 	bl	80142f0 <_ZN8touchgfx11BoxProgress8setValueEi>
    add(boxProgress1);
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	33cc      	adds	r3, #204	@ 0xcc
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	f7fc f8a6 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textProgress1.setXY(330, 183);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010a16:	22b7      	movs	r2, #183	@ 0xb7
 8010a18:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7f9 febc 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(12, 10, 150, 30);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8010a28:	231e      	movs	r3, #30
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	2396      	movs	r3, #150	@ 0x96
 8010a2e:	220a      	movs	r2, #10
 8010a30:	210c      	movs	r1, #12
 8010a32:	f003 fbc3 	bl	80141bc <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	9300      	str	r3, [sp, #0]
 8010a40:	2300      	movs	r3, #0
 8010a42:	2264      	movs	r2, #100	@ 0x64
 8010a44:	2100      	movs	r1, #0
 8010a46:	f003 fd51 	bl	80144ec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(157, 247, 30));
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8010a50:	239d      	movs	r3, #157	@ 0x9d
 8010a52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8010a56:	23f7      	movs	r3, #247	@ 0xf7
 8010a58:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8010a5c:	231e      	movs	r3, #30
 8010a5e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8010a62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a66:	041a      	lsls	r2, r3, #16
 8010a68:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8010a6c:	021b      	lsls	r3, r3, #8
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8010a74:	4313      	orrs	r3, r2
 8010a76:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010a7a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010a7e:	4611      	mov	r1, r2
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fb ffc1 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 8010a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a88:	4619      	mov	r1, r3
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	f003 fb23 	bl	80140d6 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1EKU));
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8010a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fe facf 	bl	800f040 <_ZN8touchgfx9TypedTextC1Et>
 8010aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f003 fb30 	bl	801410e <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8010aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7f9 fb72 	bl	800a19c <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TEXTPROGRESS_BACKGROUNDS_ROUNDED_LIGHT_ID));
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8010abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010ac2:	2104      	movs	r1, #4
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fb ffae 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 8010aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010ace:	4619      	mov	r1, r3
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f003 fe31 	bl	8014738 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(60);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010adc:	213c      	movs	r1, #60	@ 0x3c
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f003 fb20 	bl	8014124 <_ZN8touchgfx12TextProgress8setValueEi>
    add(textProgress1);
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010aec:	4619      	mov	r1, r3
 8010aee:	4610      	mov	r0, r2
 8010af0:	f7fc f834 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    slider1.setXY(209, 267);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010afa:	f240 120b 	movw	r2, #267	@ 0x10b
 8010afe:	21d1      	movs	r1, #209	@ 0xd1
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7f9 fe4a 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_LARGE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUND_LIGHT_ID));
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f503 7431 	add.w	r4, r3, #708	@ 0x2c4
 8010b0c:	e006      	b.n	8010b1c <_ZN15Screen4ViewBaseC1Ev+0x394>
 8010b0e:	bf00      	nop
 8010b10:	08030720 	.word	0x08030720
 8010b14:	08010c6f 	.word	0x08010c6f
 8010b18:	08010c9d 	.word	0x08010c9d
 8010b1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010b20:	2103      	movs	r1, #3
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fb ff7f 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 8010b28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010b2c:	2101      	movs	r1, #1
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fb ff79 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 8010b34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010b38:	2102      	movs	r1, #2
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fb ff73 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 8010b40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010b44:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010b48:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f004 fb3f 	bl	80151d0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 300);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8010b58:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8010b5c:	9301      	str	r3, [sp, #4]
 8010b5e:	2300      	movs	r3, #0
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	2300      	movs	r3, #0
 8010b64:	220b      	movs	r2, #11
 8010b66:	2110      	movs	r1, #16
 8010b68:	f004 fa53 	bl	8015012 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    slider1.setValueRange(0, 300);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010b72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8010b76:	2100      	movs	r1, #0
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f004 f910 	bl	8014d9e <_ZN8touchgfx6Slider13setValueRangeEss>
    slider1.setValue(0);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010b84:	2100      	movs	r1, #0
 8010b86:	4618      	mov	r0, r3
 8010b88:	f004 f8d1 	bl	8014d2e <_ZN8touchgfx6Slider8setValueEs>
    slider1.setNewValueCallback(sliderValueChangedCallback);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f503 7231 	add.w	r2, r3, #708	@ 0x2c4
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	f7ff fc70 	bl	8010480 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    add(slider1);
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f7fb ffd6 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	375c      	adds	r7, #92	@ 0x5c
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd90      	pop	{r4, r7, pc}
 8010bba:	bf00      	nop

08010bbc <_ZN15Screen4ViewBaseD1Ev>:

Screen4ViewBase::~Screen4ViewBase()
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8010c34 <_ZN15Screen4ViewBaseD1Ev+0x78>)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	601a      	str	r2, [r3, #0]
{

}
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff fdb7 	bl	8010744 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff fd8f 	bl	8010700 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff fd53 	bl	8010694 <_ZN8touchgfx6SliderD1Ev>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff fd23 	bl	8010640 <_ZN8touchgfx12TextProgressD1Ev>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	33cc      	adds	r3, #204	@ 0xcc
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff fcd4 	bl	80105ac <_ZN8touchgfx11BoxProgressD1Ev>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	3398      	adds	r3, #152	@ 0x98
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fc f8fb 	bl	800ce04 <_ZN8touchgfx6ButtonD1Ev>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	336c      	adds	r3, #108	@ 0x6c
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fc f8b2 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3340      	adds	r3, #64	@ 0x40
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fc f8ad 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7ff fc51 	bl	80104cc <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	08030720 	.word	0x08030720

08010c38 <_ZN15Screen4ViewBaseD0Ev>:
Screen4ViewBase::~Screen4ViewBase()
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
}
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff ffbb 	bl	8010bbc <_ZN15Screen4ViewBaseD1Ev>
 8010c46:	f44f 7176 	mov.w	r1, #984	@ 0x3d8
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f01c f90b 	bl	802ce66 <_ZdlPvj>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <_ZN15Screen4ViewBase11setupScreenEv>:

void Screen4ViewBase::setupScreen()
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b083      	sub	sp, #12
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]

}
 8010c62:	bf00      	nop
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <_ZN15Screen4ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen4ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	60f8      	str	r0, [r7, #12]
 8010c76:	60b9      	str	r1, [r7, #8]
 8010c78:	607a      	str	r2, [r7, #4]
    if (&src == &slider1)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d106      	bne.n	8010c94 <_ZN15Screen4ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Interaction1
        //When slider1 value changed call virtual function
        //Call function1
        function1(value);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	332c      	adds	r3, #44	@ 0x2c
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	6879      	ldr	r1, [r7, #4]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	4798      	blx	r3
    }
}
 8010c94:	bf00      	nop
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <_ZN15Screen4ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen4ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	3398      	adds	r3, #152	@ 0x98
 8010caa:	683a      	ldr	r2, [r7, #0]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d106      	bne.n	8010cbe <_ZN15Screen4ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When button1 clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenWipeTransitionEast();
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7ff fbff 	bl	80104b4 <_ZN15Screen4ViewBase11applicationEv>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7fa f9b7 	bl	800b02c <_ZN23FrontendApplicationBase34gotoscreenScreenWipeTransitionEastEv>
    }
}
 8010cbe:	bf00      	nop
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <_ZN8touchgfx4ViewI16Screen4PresenterEC1Ev>:
    View()
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f00b fdb6 	bl	801c844 <_ZN8touchgfx6ScreenC1Ev>
 8010cd8:	4a05      	ldr	r2, [pc, #20]	@ (8010cf0 <_ZN8touchgfx4ViewI16Screen4PresenterEC1Ev+0x28>)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	601a      	str	r2, [r3, #0]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3708      	adds	r7, #8
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	08030788 	.word	0x08030788

08010cf4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	4a04      	ldr	r2, [pc, #16]	@ (8010d10 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	080307bc 	.word	0x080307bc

08010d14 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_2)(T1, T2))
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	4639      	mov	r1, r7
 8010d20:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_2)
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7ff ffe4 	bl	8010cf4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8010d2c:	4a08      	ldr	r2, [pc, #32]	@ (8010d50 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	601a      	str	r2, [r3, #0]
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	605a      	str	r2, [r3, #4]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	3308      	adds	r3, #8
 8010d3c:	463a      	mov	r2, r7
 8010d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d42:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	08030770 	.word	0x08030770

08010d54 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
    }
 8010d5c:	4a04      	ldr	r2, [pc, #16]	@ (8010d70 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	370c      	adds	r7, #12
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	080307bc 	.word	0x080307bc

08010d74 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
    }
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff ffe9 	bl	8010d54 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8010d82:	2104      	movs	r1, #4
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f01c f86e 	bl	802ce66 <_ZdlPvj>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	4639      	mov	r1, r7
 8010da0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fc f9dc 	bl	800d164 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010dac:	4a08      	ldr	r2, [pc, #32]	@ (8010dd0 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	601a      	str	r2, [r3, #0]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	68ba      	ldr	r2, [r7, #8]
 8010db6:	605a      	str	r2, [r3, #4]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3308      	adds	r3, #8
 8010dbc:	463a      	mov	r2, r7
 8010dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dc2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	08030758 	.word	0x08030758

08010dd4 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	68d2      	ldr	r2, [r2, #12]
 8010de6:	1052      	asrs	r2, r2, #1
 8010de8:	1898      	adds	r0, r3, r2
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	f003 0301 	and.w	r3, r3, #1
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d102      	bne.n	8010dfc <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	689b      	ldr	r3, [r3, #8]
 8010dfa:	e00a      	b.n	8010e12 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	68d2      	ldr	r2, [r2, #12]
 8010e04:	1052      	asrs	r2, r2, #1
 8010e06:	4413      	add	r3, r2
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	6892      	ldr	r2, [r2, #8]
 8010e0e:	4413      	add	r3, r2
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	4798      	blx	r3
    }
 8010e16:	bf00      	nop
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010e1e:	b480      	push	{r7}
 8010e20:	b083      	sub	sp, #12
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d010      	beq.n	8010e50 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d107      	bne.n	8010e46 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010e42:	2301      	movs	r3, #1
 8010e44:	e000      	b.n	8010e48 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010e46:	2300      	movs	r3, #0
 8010e48:	2b01      	cmp	r3, #1
 8010e4a:	d001      	beq.n	8010e50 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	e000      	b.n	8010e52 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010e50:	2300      	movs	r3, #0
    }
 8010e52:	4618      	mov	r0, r3
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b084      	sub	sp, #16
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	60f8      	str	r0, [r7, #12]
 8010e66:	60b9      	str	r1, [r7, #8]
 8010e68:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun)(t1, t2);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	68d2      	ldr	r2, [r2, #12]
 8010e72:	1052      	asrs	r2, r2, #1
 8010e74:	1898      	adds	r0, r3, r2
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	f003 0301 	and.w	r3, r3, #1
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d102      	bne.n	8010e88 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	e00a      	b.n	8010e9e <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	68d2      	ldr	r2, [r2, #12]
 8010e90:	1052      	asrs	r2, r2, #1
 8010e92:	4413      	add	r3, r2
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	6892      	ldr	r2, [r2, #8]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	4798      	blx	r3
    }
 8010ea4:	bf00      	nop
 8010ea6:	3710      	adds	r7, #16
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d010      	beq.n	8010ede <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d107      	bne.n	8010ed4 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	f003 0301 	and.w	r3, r3, #1
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d101      	bne.n	8010ed4 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e000      	b.n	8010ed6 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d001      	beq.n	8010ede <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8010eda:	2301      	movs	r3, #1
 8010edc:	e000      	b.n	8010ee0 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8010ede:	2300      	movs	r3, #0
    }
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <_ZN14screenViewBase11applicationEv>:
    screenViewBase();
    virtual ~screenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010ef4:	f00a f84e 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8010ef8:	4603      	mov	r3, r0
    }
 8010efa:	4618      	mov	r0, r3
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
	...

08010f04 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	4a05      	ldr	r2, [pc, #20]	@ (8010f24 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fb fdc9 	bl	800caac <_ZN8touchgfx6ScreenD1Ev>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	080308b0 	.word	0x080308b0

08010f28 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f7ff ffe7 	bl	8010f04 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010f36:	2140      	movs	r1, #64	@ 0x40
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f01b ff94 	bl	802ce66 <_ZdlPvj>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	4a05      	ldr	r2, [pc, #20]	@ (8010f68 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	601a      	str	r2, [r3, #0]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7fc f933 	bl	800d1c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	08030898 	.word	0x08030898

08010f6c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7ff ffe7 	bl	8010f48 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010f7a:	2110      	movs	r1, #16
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f01b ff72 	bl	802ce66 <_ZdlPvj>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase() :
 8010f8c:	b590      	push	{r4, r7, lr}
 8010f8e:	b08f      	sub	sp, #60	@ 0x3c
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f000 f94e 	bl	8011238 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8010f9c:	4a76      	ldr	r2, [pc, #472]	@ (8011178 <_ZN14screenViewBaseC1Ev+0x1ec>)
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	601a      	str	r2, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3340      	adds	r3, #64	@ 0x40
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fb fde8 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	336c      	adds	r3, #108	@ 0x6c
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fb fde3 	bl	800cb7c <_ZN8touchgfx3BoxC1Ev>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8010fbc:	f107 0308 	add.w	r3, r7, #8
 8010fc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fb fd2e 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 8010fca:	f107 0308 	add.w	r3, r7, #8
 8010fce:	4619      	mov	r1, r3
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f7fb fe05 	bl	800cbe0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	33c4      	adds	r3, #196	@ 0xc4
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fb fe7c 	bl	800ccd8 <_ZN8touchgfx6ButtonC1Ev>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 8010fe6:	4b65      	ldr	r3, [pc, #404]	@ (801117c <_ZN14screenViewBaseC1Ev+0x1f0>)
 8010fe8:	60fb      	str	r3, [r7, #12]
 8010fea:	2300      	movs	r3, #0
 8010fec:	613b      	str	r3, [r7, #16]
 8010fee:	f107 030c 	add.w	r3, r7, #12
 8010ff2:	cb0c      	ldmia	r3, {r2, r3}
 8010ff4:	6879      	ldr	r1, [r7, #4]
 8010ff6:	f000 f935 	bl	8011264 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 800, 480);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8011000:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801100a:	2200      	movs	r2, #0
 801100c:	2100      	movs	r1, #0
 801100e:	f7f9 fb6b 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8011018:	2300      	movs	r3, #0
 801101a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 801101e:	2300      	movs	r3, #0
 8011020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011024:	2300      	movs	r3, #0
 8011026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801102a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801102e:	041a      	lsls	r2, r3, #16
 8011030:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011034:	021b      	lsls	r3, r3, #8
 8011036:	431a      	orrs	r2, r3
 8011038:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801103c:	4313      	orrs	r3, r2
 801103e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011046:	4611      	mov	r1, r2
 8011048:	4618      	mov	r0, r3
 801104a:	f7fb fcdd 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 801104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011050:	4619      	mov	r1, r3
 8011052:	4620      	mov	r0, r4
 8011054:	f7fb fdb6 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	3340      	adds	r3, #64	@ 0x40
 801105e:	4619      	mov	r1, r3
 8011060:	4610      	mov	r0, r2
 8011062:	f7fb fd7b 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801106c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8011076:	2200      	movs	r2, #0
 8011078:	2100      	movs	r1, #0
 801107a:	f7f9 fb35 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8011084:	23ff      	movs	r3, #255	@ 0xff
 8011086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801108a:	23ff      	movs	r3, #255	@ 0xff
 801108c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8011090:	23ff      	movs	r3, #255	@ 0xff
 8011092:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8011096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801109a:	041a      	lsls	r2, r3, #16
 801109c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80110a0:	021b      	lsls	r3, r3, #8
 80110a2:	431a      	orrs	r2, r3
 80110a4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80110a8:	4313      	orrs	r3, r2
 80110aa:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80110ae:	f107 0320 	add.w	r3, r7, #32
 80110b2:	4611      	mov	r1, r2
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fb fca7 	bl	800ca08 <_ZN8touchgfx9colortypeC1Em>
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	4619      	mov	r1, r3
 80110be:	4620      	mov	r0, r4
 80110c0:	f7fb fd80 	bl	800cbc4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	336c      	adds	r3, #108	@ 0x6c
 80110ca:	4619      	mov	r1, r3
 80110cc:	4610      	mov	r0, r2
 80110ce:	f7fb fd45 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(80, 0);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	3398      	adds	r3, #152	@ 0x98
 80110d6:	2200      	movs	r2, #0
 80110d8:	2150      	movs	r1, #80	@ 0x50
 80110da:	4618      	mov	r0, r3
 80110dc:	f7f9 fb5d 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_VIEW_HOME_ID));
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 80110e6:	f107 0314 	add.w	r3, r7, #20
 80110ea:	2109      	movs	r1, #9
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fb fc9a 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 80110f2:	f107 0314 	add.w	r3, r7, #20
 80110f6:	4619      	mov	r1, r3
 80110f8:	4620      	mov	r0, r4
 80110fa:	f007 fba3 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	3398      	adds	r3, #152	@ 0x98
 8011104:	4619      	mov	r1, r3
 8011106:	4610      	mov	r0, r2
 8011108:	f7fb fd28 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(742, 422);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	33c4      	adds	r3, #196	@ 0xc4
 8011110:	f44f 72d3 	mov.w	r2, #422	@ 0x1a6
 8011114:	f240 21e6 	movw	r1, #742	@ 0x2e6
 8011118:	4618      	mov	r0, r3
 801111a:	f7f9 fb3e 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8011124:	f107 0318 	add.w	r3, r7, #24
 8011128:	2106      	movs	r1, #6
 801112a:	4618      	mov	r0, r3
 801112c:	f7fb fc7b 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 8011130:	f107 031c 	add.w	r3, r7, #28
 8011134:	2107      	movs	r1, #7
 8011136:	4618      	mov	r0, r3
 8011138:	f7fb fc75 	bl	800ca26 <_ZN8touchgfx6BitmapC1Et>
 801113c:	f107 021c 	add.w	r2, r7, #28
 8011140:	f107 0318 	add.w	r3, r7, #24
 8011144:	4619      	mov	r1, r3
 8011146:	4620      	mov	r0, r4
 8011148:	f007 fa5c 	bl	8018604 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	33f8      	adds	r3, #248	@ 0xf8
 8011156:	4619      	mov	r1, r3
 8011158:	4610      	mov	r0, r2
 801115a:	f7fb fd8d 	bl	800cc78 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	33c4      	adds	r3, #196	@ 0xc4
 8011164:	4619      	mov	r1, r3
 8011166:	4610      	mov	r0, r2
 8011168:	f7fb fcf8 	bl	800cb5c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4618      	mov	r0, r3
 8011170:	3734      	adds	r7, #52	@ 0x34
 8011172:	46bd      	mov	sp, r7
 8011174:	bd90      	pop	{r4, r7, pc}
 8011176:	bf00      	nop
 8011178:	08030864 	.word	0x08030864
 801117c:	0801120f 	.word	0x0801120f

08011180 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	4a12      	ldr	r2, [pc, #72]	@ (80111d4 <_ZN14screenViewBaseD1Ev+0x54>)
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	601a      	str	r2, [r3, #0]
{

}
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	33f8      	adds	r3, #248	@ 0xf8
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff fed8 	bl	8010f48 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	33c4      	adds	r3, #196	@ 0xc4
 801119c:	4618      	mov	r0, r3
 801119e:	f7fb fe31 	bl	800ce04 <_ZN8touchgfx6ButtonD1Ev>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	3398      	adds	r3, #152	@ 0x98
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fb fe0a 	bl	800cdc0 <_ZN8touchgfx5ImageD1Ev>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	336c      	adds	r3, #108	@ 0x6c
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fb fde3 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	3340      	adds	r3, #64	@ 0x40
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7fb fdde 	bl	800cd7c <_ZN8touchgfx3BoxD1Ev>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff fe9e 	bl	8010f04 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4618      	mov	r0, r3
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	08030864 	.word	0x08030864

080111d8 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
}
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f7ff ffcd 	bl	8011180 <_ZN14screenViewBaseD1Ev>
 80111e6:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f01b fe3b 	bl	802ce66 <_ZdlPvj>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4618      	mov	r0, r3
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 80111fa:	b480      	push	{r7}
 80111fc:	b083      	sub	sp, #12
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]

}
 8011202:	bf00      	nop
 8011204:	370c      	adds	r7, #12
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b082      	sub	sp, #8
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	33c4      	adds	r3, #196	@ 0xc4
 801121c:	683a      	ldr	r2, [r7, #0]
 801121e:	429a      	cmp	r2, r3
 8011220:	d106      	bne.n	8011230 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7ff fe62 	bl	8010eec <_ZN14screenViewBase11applicationEv>
 8011228:	4603      	mov	r3, r0
 801122a:	4618      	mov	r0, r3
 801122c:	f7f9 ff8a 	bl	800b144 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	4618      	mov	r0, r3
 8011244:	f00b fafe 	bl	801c844 <_ZN8touchgfx6ScreenC1Ev>
 8011248:	4a05      	ldr	r2, [pc, #20]	@ (8011260 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	601a      	str	r2, [r3, #0]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2200      	movs	r2, #0
 8011252:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	080308b0 	.word	0x080308b0

08011264 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	4639      	mov	r1, r7
 8011270:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4618      	mov	r0, r3
 8011278:	f7fb ff74 	bl	800d164 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801127c:	4a08      	ldr	r2, [pc, #32]	@ (80112a0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	601a      	str	r2, [r3, #0]
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	68ba      	ldr	r2, [r7, #8]
 8011286:	605a      	str	r2, [r3, #4]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	3308      	adds	r3, #8
 801128c:	463a      	mov	r2, r7
 801128e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011292:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	4618      	mov	r0, r3
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	08030898 	.word	0x08030898

080112a4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	687a      	ldr	r2, [r7, #4]
 80112b4:	68d2      	ldr	r2, [r2, #12]
 80112b6:	1052      	asrs	r2, r2, #1
 80112b8:	1898      	adds	r0, r3, r2
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	f003 0301 	and.w	r3, r3, #1
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d102      	bne.n	80112cc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	e00a      	b.n	80112e2 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	68d2      	ldr	r2, [r2, #12]
 80112d4:	1052      	asrs	r2, r2, #1
 80112d6:	4413      	add	r3, r2
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	6892      	ldr	r2, [r2, #8]
 80112de:	4413      	add	r3, r2
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6839      	ldr	r1, [r7, #0]
 80112e4:	4798      	blx	r3
    }
 80112e6:	bf00      	nop
 80112e8:	3708      	adds	r7, #8
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80112ee:	b480      	push	{r7}
 80112f0:	b083      	sub	sp, #12
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d010      	beq.n	8011320 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	689b      	ldr	r3, [r3, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d107      	bne.n	8011316 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	f003 0301 	and.w	r3, r3, #1
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011312:	2301      	movs	r3, #1
 8011314:	e000      	b.n	8011318 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011316:	2300      	movs	r3, #0
 8011318:	2b01      	cmp	r3, #1
 801131a:	d001      	beq.n	8011320 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801131c:	2301      	movs	r3, #1
 801131e:	e000      	b.n	8011322 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011320:	2300      	movs	r3, #0
    }
 8011322:	4618      	mov	r0, r3
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
	...

08011330 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011330:	b480      	push	{r7}
 8011332:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011334:	4b02      	ldr	r3, [pc, #8]	@ (8011340 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011336:	4618      	mov	r0, r3
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	080308dc 	.word	0x080308dc

08011344 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011344:	b480      	push	{r7}
 8011346:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011348:	230a      	movs	r3, #10
}
 801134a:	4618      	mov	r0, r3
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	460b      	mov	r3, r1
 801135e:	607a      	str	r2, [r7, #4]
 8011360:	817b      	strh	r3, [r7, #10]
        return 0;
 8011362:	2300      	movs	r3, #0
    }
 8011364:	4618      	mov	r0, r3
 8011366:	3714      	adds	r7, #20
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
        return 0;
 8011378:	2300      	movs	r3, #0
    }
 801137a:	4618      	mov	r0, r3
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011386:	b480      	push	{r7}
 8011388:	b083      	sub	sp, #12
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
        return 0;
 801138e:	2300      	movs	r3, #0
    }
 8011390:	4618      	mov	r0, r3
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr

0801139c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801139c:	b480      	push	{r7}
 801139e:	b085      	sub	sp, #20
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	60b9      	str	r1, [r7, #8]
 80113a6:	4613      	mov	r3, r2
 80113a8:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 80113aa:	4a07      	ldr	r2, [pc, #28]	@ (80113c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	6013      	str	r3, [r2, #0]
        fonts = f;
 80113b0:	4a06      	ldr	r2, [pc, #24]	@ (80113cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80113b6:	4a06      	ldr	r2, [pc, #24]	@ (80113d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80113b8:	88fb      	ldrh	r3, [r7, #6]
 80113ba:	8013      	strh	r3, [r2, #0]
    }
 80113bc:	bf00      	nop
 80113be:	3714      	adds	r7, #20
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr
 80113c8:	2001231c 	.word	0x2001231c
 80113cc:	20012324 	.word	0x20012324
 80113d0:	20012320 	.word	0x20012320

080113d4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80113d4:	b40e      	push	{r1, r2, r3}
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b085      	sub	sp, #20
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80113de:	f107 0320 	add.w	r3, r7, #32
 80113e2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	69fa      	ldr	r2, [r7, #28]
 80113e8:	2100      	movs	r1, #0
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f00a fd92 	bl	801bf14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80113f0:	4603      	mov	r3, r0
 80113f2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80113f4:	89fb      	ldrh	r3, [r7, #14]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3714      	adds	r7, #20
 80113fa:	46bd      	mov	sp, r7
 80113fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011400:	b003      	add	sp, #12
 8011402:	4770      	bx	lr

08011404 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011404:	b40c      	push	{r2, r3}
 8011406:	b580      	push	{r7, lr}
 8011408:	b084      	sub	sp, #16
 801140a:	af00      	add	r7, sp, #0
 801140c:	6078      	str	r0, [r7, #4]
 801140e:	460b      	mov	r3, r1
 8011410:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011412:	f107 031c 	add.w	r3, r7, #28
 8011416:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011418:	78f9      	ldrb	r1, [r7, #3]
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	69ba      	ldr	r2, [r7, #24]
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f00a fd78 	bl	801bf14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011424:	4603      	mov	r3, r0
 8011426:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011428:	89fb      	ldrh	r3, [r7, #14]
}
 801142a:	4618      	mov	r0, r3
 801142c:	3710      	adds	r7, #16
 801142e:	46bd      	mov	sp, r7
 8011430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011434:	b002      	add	sp, #8
 8011436:	4770      	bx	lr

08011438 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08a      	sub	sp, #40	@ 0x28
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011448:	2b00      	cmp	r3, #0
 801144a:	d016      	beq.n	801147a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	3322      	adds	r3, #34	@ 0x22
 8011450:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011454:	8adb      	ldrh	r3, [r3, #22]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d105      	bne.n	8011466 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801145a:	4b43      	ldr	r3, [pc, #268]	@ (8011568 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801145c:	4a43      	ldr	r2, [pc, #268]	@ (801156c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801145e:	21c5      	movs	r1, #197	@ 0xc5
 8011460:	4843      	ldr	r0, [pc, #268]	@ (8011570 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011462:	f01c fa61 	bl	802d928 <__assert_func>
            return buffer[pos];
 8011466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011468:	8a9b      	ldrh	r3, [r3, #20]
 801146a:	461a      	mov	r2, r3
 801146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d001      	beq.n	801147a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801147a:	2300      	movs	r3, #0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d06a      	beq.n	8011556 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f00c f949 	bl	801d718 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	3322      	adds	r3, #34	@ 0x22
 801148a:	623b      	str	r3, [r7, #32]
 801148c:	2301      	movs	r3, #1
 801148e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011490:	6a3b      	ldr	r3, [r7, #32]
 8011492:	8adb      	ldrh	r3, [r3, #22]
 8011494:	8bfa      	ldrh	r2, [r7, #30]
 8011496:	429a      	cmp	r2, r3
 8011498:	d305      	bcc.n	80114a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801149a:	4b36      	ldr	r3, [pc, #216]	@ (8011574 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801149c:	4a36      	ldr	r2, [pc, #216]	@ (8011578 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801149e:	21cb      	movs	r1, #203	@ 0xcb
 80114a0:	4833      	ldr	r0, [pc, #204]	@ (8011570 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80114a2:	f01c fa41 	bl	802d928 <__assert_func>
            const uint16_t index = pos + offset;
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	8a9a      	ldrh	r2, [r3, #20]
 80114aa:	8bfb      	ldrh	r3, [r7, #30]
 80114ac:	4413      	add	r3, r2
 80114ae:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80114b0:	8bbb      	ldrh	r3, [r7, #28]
 80114b2:	2b09      	cmp	r3, #9
 80114b4:	d801      	bhi.n	80114ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80114b6:	8bbb      	ldrh	r3, [r7, #28]
 80114b8:	e001      	b.n	80114be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80114ba:	8bbb      	ldrh	r3, [r7, #28]
 80114bc:	3b0a      	subs	r3, #10
 80114be:	6a3a      	ldr	r2, [r7, #32]
 80114c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114c4:	f640 123f 	movw	r2, #2367	@ 0x93f
 80114c8:	4293      	cmp	r3, r2
 80114ca:	bf0c      	ite	eq
 80114cc:	2301      	moveq	r3, #1
 80114ce:	2300      	movne	r3, #0
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d03f      	beq.n	8011556 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	3322      	adds	r3, #34	@ 0x22
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	3222      	adds	r2, #34	@ 0x22
 80114de:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80114e0:	68ba      	ldr	r2, [r7, #8]
 80114e2:	8ad2      	ldrh	r2, [r2, #22]
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	d105      	bne.n	80114f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80114e8:	4b1f      	ldr	r3, [pc, #124]	@ (8011568 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80114ea:	4a20      	ldr	r2, [pc, #128]	@ (801156c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80114ec:	21c5      	movs	r1, #197	@ 0xc5
 80114ee:	4820      	ldr	r0, [pc, #128]	@ (8011570 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80114f0:	f01c fa1a 	bl	802d928 <__assert_func>
            return buffer[pos];
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	8a92      	ldrh	r2, [r2, #20]
 80114f8:	4611      	mov	r1, r2
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011500:	613b      	str	r3, [r7, #16]
 8011502:	4613      	mov	r3, r2
 8011504:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	8adb      	ldrh	r3, [r3, #22]
 801150a:	2b01      	cmp	r3, #1
 801150c:	d806      	bhi.n	801151c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801150e:	4b1b      	ldr	r3, [pc, #108]	@ (801157c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011510:	4a1b      	ldr	r2, [pc, #108]	@ (8011580 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011512:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8011516:	4816      	ldr	r0, [pc, #88]	@ (8011570 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011518:	f01c fa06 	bl	802d928 <__assert_func>
            const uint16_t index = pos + 1;
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	8a9b      	ldrh	r3, [r3, #20]
 8011520:	3301      	adds	r3, #1
 8011522:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011524:	89bb      	ldrh	r3, [r7, #12]
 8011526:	2b09      	cmp	r3, #9
 8011528:	d801      	bhi.n	801152e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801152a:	89bb      	ldrh	r3, [r7, #12]
 801152c:	e000      	b.n	8011530 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801152e:	2300      	movs	r3, #0
 8011530:	693a      	ldr	r2, [r7, #16]
 8011532:	89f9      	ldrh	r1, [r7, #14]
 8011534:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011538:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	3322      	adds	r3, #34	@ 0x22
 801153e:	61bb      	str	r3, [r7, #24]
 8011540:	f640 133f 	movw	r3, #2367	@ 0x93f
 8011544:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	8a9b      	ldrh	r3, [r3, #20]
 801154a:	4619      	mov	r1, r3
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	8afa      	ldrh	r2, [r7, #22]
 8011550:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011554:	bf00      	nop
        }
    }
    return getNextChar();
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f00b ffe0 	bl	801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801155c:	4603      	mov	r3, r0
}
 801155e:	4618      	mov	r0, r3
 8011560:	3728      	adds	r7, #40	@ 0x28
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	0802f750 	.word	0x0802f750
 801156c:	0802f75c 	.word	0x0802f75c
 8011570:	0802f808 	.word	0x0802f808
 8011574:	0802f850 	.word	0x0802f850
 8011578:	0802f860 	.word	0x0802f860
 801157c:	0802f934 	.word	0x0802f934
 8011580:	0802f940 	.word	0x0802f940

08011584 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f00b ff8e 	bl	801d4ae <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011592:	bf00      	nop
 8011594:	3708      	adds	r7, #8
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801159a:	b580      	push	{r7, lr}
 801159c:	b088      	sub	sp, #32
 801159e:	af02      	add	r7, sp, #8
 80115a0:	60f8      	str	r0, [r7, #12]
 80115a2:	1d38      	adds	r0, r7, #4
 80115a4:	e880 0006 	stmia.w	r0, {r1, r2}
 80115a8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80115aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80115ae:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80115b0:	1d39      	adds	r1, r7, #4
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	9301      	str	r3, [sp, #4]
 80115b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	6a3b      	ldr	r3, [r7, #32]
 80115bc:	683a      	ldr	r2, [r7, #0]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f009 f8d6 	bl	801a770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80115c4:	bf00      	nop
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80115cc:	b590      	push	{r4, r7, lr}
 80115ce:	b085      	sub	sp, #20
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80115da:	88fb      	ldrh	r3, [r7, #6]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d127      	bne.n	8011630 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80115e0:	88fb      	ldrh	r3, [r7, #6]
 80115e2:	4a1e      	ldr	r2, [pc, #120]	@ (801165c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80115e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d016      	beq.n	801161a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80115ec:	88fb      	ldrh	r3, [r7, #6]
 80115ee:	4a1b      	ldr	r2, [pc, #108]	@ (801165c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80115f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115f4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	68ba      	ldr	r2, [r7, #8]
 80115fc:	4413      	add	r3, r2
 80115fe:	4a18      	ldr	r2, [pc, #96]	@ (8011660 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011600:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	68ba      	ldr	r2, [r7, #8]
 8011608:	4413      	add	r3, r2
 801160a:	4a16      	ldr	r2, [pc, #88]	@ (8011664 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801160c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	689b      	ldr	r3, [r3, #8]
 8011612:	68ba      	ldr	r2, [r7, #8]
 8011614:	4413      	add	r3, r2
 8011616:	60fb      	str	r3, [r7, #12]
 8011618:	e00a      	b.n	8011630 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801161a:	4b11      	ldr	r3, [pc, #68]	@ (8011660 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801161c:	4a12      	ldr	r2, [pc, #72]	@ (8011668 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801161e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011620:	4a12      	ldr	r2, [pc, #72]	@ (801166c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011622:	4b10      	ldr	r3, [pc, #64]	@ (8011664 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011624:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011626:	88fb      	ldrh	r3, [r7, #6]
 8011628:	4a11      	ldr	r2, [pc, #68]	@ (8011670 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801162e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00d      	beq.n	8011652 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011636:	4a0f      	ldr	r2, [pc, #60]	@ (8011674 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011638:	88fb      	ldrh	r3, [r7, #6]
 801163a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801163c:	f000 f83e 	bl	80116bc <_ZN17TypedTextDatabase8getFontsEv>
 8011640:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011642:	f000 f833 	bl	80116ac <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011646:	4603      	mov	r3, r0
 8011648:	461a      	mov	r2, r3
 801164a:	4621      	mov	r1, r4
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7ff fea5 	bl	801139c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011652:	bf00      	nop
 8011654:	3714      	adds	r7, #20
 8011656:	46bd      	mov	sp, r7
 8011658:	bd90      	pop	{r4, r7, pc}
 801165a:	bf00      	nop
 801165c:	2000d954 	.word	0x2000d954
 8011660:	2000d95c 	.word	0x2000d95c
 8011664:	2000d960 	.word	0x2000d960
 8011668:	90267040 	.word	0x90267040
 801166c:	90267034 	.word	0x90267034
 8011670:	90267054 	.word	0x90267054
 8011674:	2000d958 	.word	0x2000d958

08011678 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	460b      	mov	r3, r1
 8011682:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011684:	4b07      	ldr	r3, [pc, #28]	@ (80116a4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	4b07      	ldr	r3, [pc, #28]	@ (80116a8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801168a:	6819      	ldr	r1, [r3, #0]
 801168c:	887b      	ldrh	r3, [r7, #2]
 801168e:	009b      	lsls	r3, r3, #2
 8011690:	440b      	add	r3, r1
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	4413      	add	r3, r2
}
 8011698:	4618      	mov	r0, r3
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	2000d95c 	.word	0x2000d95c
 80116a8:	2000d960 	.word	0x2000d960

080116ac <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80116ac:	b480      	push	{r7}
 80116ae:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80116b0:	2303      	movs	r3, #3
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80116c0:	4b02      	ldr	r3, [pc, #8]	@ (80116cc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	2000d964 	.word	0x2000d964

080116d0 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 80116d4:	f7f8 fe9e 	bl	800a414 <_Z23getFont_verdana_20_4bppv>
 80116d8:	4603      	mov	r3, r0
};
 80116da:	4a07      	ldr	r2, [pc, #28]	@ (80116f8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80116dc:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80116de:	f7f8 fef3 	bl	800a4c8 <_Z23getFont_verdana_40_4bppv>
 80116e2:	4603      	mov	r3, r0
};
 80116e4:	4a04      	ldr	r2, [pc, #16]	@ (80116f8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80116e6:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80116e8:	f7f8 fe3a 	bl	800a360 <_Z23getFont_verdana_10_4bppv>
 80116ec:	4603      	mov	r3, r0
};
 80116ee:	4a02      	ldr	r2, [pc, #8]	@ (80116f8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80116f0:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80116f2:	bf00      	nop
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	2000d964 	.word	0x2000d964

080116fc <_GLOBAL__sub_I_touchgfx_fonts>:
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
 8011700:	f7ff ffe6 	bl	80116d0 <_Z41__static_initialization_and_destruction_0v>
 8011704:	bd80      	pop	{r7, pc}
	...

08011708 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	4a05      	ldr	r2, [pc, #20]	@ (8011728 <_ZN19FrontendApplicationD1Ev+0x20>)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	601a      	str	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	4618      	mov	r0, r3
 801171a:	f7f9 fb9b 	bl	800ae54 <_ZN23FrontendApplicationBaseD1Ev>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4618      	mov	r0, r3
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	08030a10 	.word	0x08030a10

0801172c <_ZN19FrontendApplicationD0Ev>:
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7ff ffe7 	bl	8011708 <_ZN19FrontendApplicationD1Ev>
 801173a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f01b fb91 	bl	802ce66 <_ZdlPvj>
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4618      	mov	r0, r3
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801174e:	b580      	push	{r7, lr}
 8011750:	b082      	sub	sp, #8
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801175c:	4618      	mov	r0, r3
 801175e:	f000 f82d 	bl	80117bc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4618      	mov	r0, r3
 8011766:	f009 fcd9 	bl	801b11c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801176a:	bf00      	nop
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
	...

08011774 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	68b9      	ldr	r1, [r7, #8]
 8011786:	4618      	mov	r0, r3
 8011788:	f7f9 fbe8 	bl	800af5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801178c:	4a03      	ldr	r2, [pc, #12]	@ (801179c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	601a      	str	r2, [r3, #0]
{

}
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	4618      	mov	r0, r3
 8011796:	3710      	adds	r7, #16
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	08030a10 	.word	0x08030a10

080117a0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	601a      	str	r2, [r3, #0]
{

}
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr

080117bc <_ZN5Model4tickEv>:

void Model::tick()
{
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]

}
 80117c4:	bf00      	nop
 80117c6:	370c      	adds	r7, #12
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr

080117d0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
    {
    }
 80117d8:	bf00      	nop
 80117da:	370c      	adds	r7, #12
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
    {
    }
 80117ec:	bf00      	nop
 80117ee:	370c      	adds	r7, #12
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr

080117f8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
    {
 8011800:	4a04      	ldr	r2, [pc, #16]	@ (8011814 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	601a      	str	r2, [r3, #0]
    }
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr
 8011814:	08030a9c 	.word	0x08030a9c

08011818 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
    }
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f7ff ffe9 	bl	80117f8 <_ZN8touchgfx9PresenterD1Ev>
 8011826:	2104      	movs	r1, #4
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f01b fb1c 	bl	802ce66 <_ZdlPvj>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4618      	mov	r0, r3
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011838:	b480      	push	{r7}
 801183a:	b083      	sub	sp, #12
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
    {
 8011840:	4a04      	ldr	r2, [pc, #16]	@ (8011854 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	601a      	str	r2, [r3, #0]
    }
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	08030a9c 	.word	0x08030a9c

08011858 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	4a06      	ldr	r2, [pc, #24]	@ (801187c <_ZN13ModelListenerC1Ev+0x24>)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	601a      	str	r2, [r3, #0]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	605a      	str	r2, [r3, #4]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	4618      	mov	r0, r3
 8011870:	370c      	adds	r7, #12
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	08030a8c 	.word	0x08030a8c

08011880 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	4a04      	ldr	r2, [pc, #16]	@ (801189c <_ZN13ModelListenerD1Ev+0x1c>)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	601a      	str	r2, [r3, #0]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4618      	mov	r0, r3
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	08030a8c 	.word	0x08030a8c

080118a0 <_ZN13ModelListenerD0Ev>:
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7ff ffe9 	bl	8011880 <_ZN13ModelListenerD1Ev>
 80118ae:	2108      	movs	r1, #8
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f01b fad8 	bl	802ce66 <_ZdlPvj>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4618      	mov	r0, r3
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	4a09      	ldr	r2, [pc, #36]	@ (80118f0 <_ZN16Screen1PresenterD1Ev+0x30>)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	601a      	str	r2, [r3, #0]
 80118ce:	4a09      	ldr	r2, [pc, #36]	@ (80118f4 <_ZN16Screen1PresenterD1Ev+0x34>)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	605a      	str	r2, [r3, #4]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3304      	adds	r3, #4
 80118d8:	4618      	mov	r0, r3
 80118da:	f7ff ffd1 	bl	8011880 <_ZN13ModelListenerD1Ev>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7ff ff89 	bl	80117f8 <_ZN8touchgfx9PresenterD1Ev>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	08030a64 	.word	0x08030a64
 80118f4:	08030a7c 	.word	0x08030a7c

080118f8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80118f8:	f1a0 0004 	sub.w	r0, r0, #4
 80118fc:	e7e0      	b.n	80118c0 <_ZN16Screen1PresenterD1Ev>
 80118fe:	bf00      	nop

08011900 <_ZN16Screen1PresenterD0Ev>:
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff ffd9 	bl	80118c0 <_ZN16Screen1PresenterD1Ev>
 801190e:	2110      	movs	r1, #16
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f01b faa8 	bl	802ce66 <_ZdlPvj>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	4618      	mov	r0, r3
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <_ZThn4_N16Screen1PresenterD0Ev>:
 8011920:	f1a0 0004 	sub.w	r0, r0, #4
 8011924:	e7ec      	b.n	8011900 <_ZN16Screen1PresenterD0Ev>
	...

08011928 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
    : view(v)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	4618      	mov	r0, r3
 8011936:	f7ff ff7f 	bl	8011838 <_ZN8touchgfx9PresenterC1Ev>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3304      	adds	r3, #4
 801193e:	4618      	mov	r0, r3
 8011940:	f7ff ff8a 	bl	8011858 <_ZN13ModelListenerC1Ev>
 8011944:	4a06      	ldr	r2, [pc, #24]	@ (8011960 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	601a      	str	r2, [r3, #0]
 801194a:	4a06      	ldr	r2, [pc, #24]	@ (8011964 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	605a      	str	r2, [r3, #4]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	683a      	ldr	r2, [r7, #0]
 8011954:	60da      	str	r2, [r3, #12]
{

}
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	4618      	mov	r0, r3
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	08030a64 	.word	0x08030a64
 8011964:	08030a7c 	.word	0x08030a7c

08011968 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]

}
 8011970:	bf00      	nop
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]

}
 8011984:	bf00      	nop
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	4a05      	ldr	r2, [pc, #20]	@ (80119b0 <_ZN11Screen1ViewD1Ev+0x20>)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fb fb6d 	bl	800d080 <_ZN15Screen1ViewBaseD1Ev>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	08030ab4 	.word	0x08030ab4

080119b4 <_ZN11Screen1ViewD0Ev>:
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f7ff ffe7 	bl	8011990 <_ZN11Screen1ViewD1Ev>
 80119c2:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f01b fa4d 	bl	802ce66 <_ZdlPvj>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
	...

080119d8 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fb fa52 	bl	800ce8c <_ZN15Screen1ViewBaseC1Ev>
 80119e8:	4a03      	ldr	r2, [pc, #12]	@ (80119f8 <_ZN11Screen1ViewC1Ev+0x20>)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	601a      	str	r2, [r3, #0]
{

}
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	08030ab4 	.word	0x08030ab4

080119fc <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fb fb77 	bl	800d0fa <_ZN15Screen1ViewBase11setupScreenEv>
}
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fb f87c 	bl	800cb1c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011a24:	bf00      	nop
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {}
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	4a09      	ldr	r2, [pc, #36]	@ (8011a5c <_ZN16Screen3PresenterD1Ev+0x30>)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	4a09      	ldr	r2, [pc, #36]	@ (8011a60 <_ZN16Screen3PresenterD1Ev+0x34>)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	605a      	str	r2, [r3, #4]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3304      	adds	r3, #4
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ff ff1b 	bl	8011880 <_ZN13ModelListenerD1Ev>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff fed3 	bl	80117f8 <_ZN8touchgfx9PresenterD1Ev>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	08030ae8 	.word	0x08030ae8
 8011a60:	08030b00 	.word	0x08030b00

08011a64 <_ZThn4_N16Screen3PresenterD1Ev>:
 8011a64:	f1a0 0004 	sub.w	r0, r0, #4
 8011a68:	e7e0      	b.n	8011a2c <_ZN16Screen3PresenterD1Ev>
 8011a6a:	bf00      	nop

08011a6c <_ZN16Screen3PresenterD0Ev>:
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f7ff ffd9 	bl	8011a2c <_ZN16Screen3PresenterD1Ev>
 8011a7a:	2110      	movs	r1, #16
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f01b f9f2 	bl	802ce66 <_ZdlPvj>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	4618      	mov	r0, r3
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <_ZThn4_N16Screen3PresenterD0Ev>:
 8011a8c:	f1a0 0004 	sub.w	r0, r0, #4
 8011a90:	e7ec      	b.n	8011a6c <_ZN16Screen3PresenterD0Ev>
	...

08011a94 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
    : view(v)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7ff fec9 	bl	8011838 <_ZN8touchgfx9PresenterC1Ev>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7ff fed4 	bl	8011858 <_ZN13ModelListenerC1Ev>
 8011ab0:	4a06      	ldr	r2, [pc, #24]	@ (8011acc <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	601a      	str	r2, [r3, #0]
 8011ab6:	4a06      	ldr	r2, [pc, #24]	@ (8011ad0 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	605a      	str	r2, [r3, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	683a      	ldr	r2, [r7, #0]
 8011ac0:	60da      	str	r2, [r3, #12]
{

}
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3708      	adds	r7, #8
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	08030ae8 	.word	0x08030ae8
 8011ad0:	08030b00 	.word	0x08030b00

08011ad4 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]

}
 8011adc:	bf00      	nop
 8011ade:	370c      	adds	r7, #12
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr

08011ae8 <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]

}
 8011af0:	bf00      	nop
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	4a05      	ldr	r2, [pc, #20]	@ (8011b1c <_ZN11Screen3ViewD1Ev+0x20>)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fe fa15 	bl	800ff3c <_ZN15Screen3ViewBaseD1Ev>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4618      	mov	r0, r3
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	08030b10 	.word	0x08030b10

08011b20 <_ZN11Screen3ViewD0Ev>:
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f7ff ffe7 	bl	8011afc <_ZN11Screen3ViewD1Ev>
 8011b2e:	f643 01a8 	movw	r1, #14504	@ 0x38a8
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f01b f997 	bl	802ce66 <_ZdlPvj>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fd fe30 	bl	800f7b4 <_ZN15Screen3ViewBaseC1Ev>
 8011b54:	4a03      	ldr	r2, [pc, #12]	@ (8011b64 <_ZN11Screen3ViewC1Ev+0x20>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	601a      	str	r2, [r3, #0]
{

}
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	08030b10 	.word	0x08030b10

08011b68 <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fe fa47 	bl	8010006 <_ZN15Screen3ViewBase11setupScreenEv>
}
 8011b78:	bf00      	nop
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fa ffc6 	bl	800cb1c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011b90:	bf00      	nop
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <_ZN16Screen4PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen4Presenter() {}
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	4a09      	ldr	r2, [pc, #36]	@ (8011bc8 <_ZN16Screen4PresenterD1Ev+0x30>)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	601a      	str	r2, [r3, #0]
 8011ba6:	4a09      	ldr	r2, [pc, #36]	@ (8011bcc <_ZN16Screen4PresenterD1Ev+0x34>)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	605a      	str	r2, [r3, #4]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	3304      	adds	r3, #4
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7ff fe65 	bl	8011880 <_ZN13ModelListenerD1Ev>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7ff fe1d 	bl	80117f8 <_ZN8touchgfx9PresenterD1Ev>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	08030b48 	.word	0x08030b48
 8011bcc:	08030b60 	.word	0x08030b60

08011bd0 <_ZThn4_N16Screen4PresenterD1Ev>:
 8011bd0:	f1a0 0004 	sub.w	r0, r0, #4
 8011bd4:	e7e0      	b.n	8011b98 <_ZN16Screen4PresenterD1Ev>
 8011bd6:	bf00      	nop

08011bd8 <_ZN16Screen4PresenterD0Ev>:
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7ff ffd9 	bl	8011b98 <_ZN16Screen4PresenterD1Ev>
 8011be6:	2110      	movs	r1, #16
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f01b f93c 	bl	802ce66 <_ZdlPvj>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <_ZThn4_N16Screen4PresenterD0Ev>:
 8011bf8:	f1a0 0004 	sub.w	r0, r0, #4
 8011bfc:	e7ec      	b.n	8011bd8 <_ZN16Screen4PresenterD0Ev>
	...

08011c00 <_ZN16Screen4PresenterC1ER11Screen4View>:
#include <gui/screen4_screen/Screen4View.hpp>
#include <gui/screen4_screen/Screen4Presenter.hpp>

Screen4Presenter::Screen4Presenter(Screen4View& v)
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
    : view(v)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7ff fe13 	bl	8011838 <_ZN8touchgfx9PresenterC1Ev>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	3304      	adds	r3, #4
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7ff fe1e 	bl	8011858 <_ZN13ModelListenerC1Ev>
 8011c1c:	4a06      	ldr	r2, [pc, #24]	@ (8011c38 <_ZN16Screen4PresenterC1ER11Screen4View+0x38>)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	601a      	str	r2, [r3, #0]
 8011c22:	4a06      	ldr	r2, [pc, #24]	@ (8011c3c <_ZN16Screen4PresenterC1ER11Screen4View+0x3c>)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	605a      	str	r2, [r3, #4]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	683a      	ldr	r2, [r7, #0]
 8011c2c:	60da      	str	r2, [r3, #12]
{

}
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	08030b48 	.word	0x08030b48
 8011c3c:	08030b60 	.word	0x08030b60

08011c40 <_ZN16Screen4Presenter8activateEv>:

void Screen4Presenter::activate()
{
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]

}
 8011c48:	bf00      	nop
 8011c4a:	370c      	adds	r7, #12
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr

08011c54 <_ZN16Screen4Presenter10deactivateEv>:

void Screen4Presenter::deactivate()
{
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]

}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <_ZN11Screen4ViewD1Ev>:

class Screen4View : public Screen4ViewBase
{
public:
    Screen4View();
    virtual ~Screen4View() {}
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	4a05      	ldr	r2, [pc, #20]	@ (8011c88 <_ZN11Screen4ViewD1Ev+0x20>)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	601a      	str	r2, [r3, #0]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fe ff9f 	bl	8010bbc <_ZN15Screen4ViewBaseD1Ev>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	08030b70 	.word	0x08030b70

08011c8c <_ZN11Screen4ViewD0Ev>:
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff ffe7 	bl	8011c68 <_ZN11Screen4ViewD1Ev>
 8011c9a:	f44f 7176 	mov.w	r1, #984	@ 0x3d8
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f01b f8e1 	bl	802ce66 <_ZdlPvj>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
	...

08011cb0 <_ZN11Screen4ViewC1Ev>:
#include <gui/screen4_screen/Screen4View.hpp>

Screen4View::Screen4View()
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7fe fd64 	bl	8010788 <_ZN15Screen4ViewBaseC1Ev>
 8011cc0:	4a03      	ldr	r2, [pc, #12]	@ (8011cd0 <_ZN11Screen4ViewC1Ev+0x20>)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
{

}
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	08030b70 	.word	0x08030b70

08011cd4 <_ZN11Screen4View11setupScreenEv>:

void Screen4View::setupScreen()
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
    Screen4ViewBase::setupScreen();
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fe ffbb 	bl	8010c5a <_ZN15Screen4ViewBase11setupScreenEv>
}
 8011ce4:	bf00      	nop
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <_ZN11Screen4View14tearDownScreenEv>:

void Screen4View::tearDownScreen()
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
    Screen4ViewBase::tearDownScreen();
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7fa ff10 	bl	800cb1c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011cfc:	bf00      	nop
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	4a09      	ldr	r2, [pc, #36]	@ (8011d34 <_ZN15screenPresenterD1Ev+0x30>)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	601a      	str	r2, [r3, #0]
 8011d12:	4a09      	ldr	r2, [pc, #36]	@ (8011d38 <_ZN15screenPresenterD1Ev+0x34>)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	605a      	str	r2, [r3, #4]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	3304      	adds	r3, #4
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7ff fdaf 	bl	8011880 <_ZN13ModelListenerD1Ev>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7ff fd67 	bl	80117f8 <_ZN8touchgfx9PresenterD1Ev>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	08030ba8 	.word	0x08030ba8
 8011d38:	08030bc0 	.word	0x08030bc0

08011d3c <_ZThn4_N15screenPresenterD1Ev>:
 8011d3c:	f1a0 0004 	sub.w	r0, r0, #4
 8011d40:	e7e0      	b.n	8011d04 <_ZN15screenPresenterD1Ev>
 8011d42:	bf00      	nop

08011d44 <_ZN15screenPresenterD0Ev>:
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7ff ffd9 	bl	8011d04 <_ZN15screenPresenterD1Ev>
 8011d52:	2110      	movs	r1, #16
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f01b f886 	bl	802ce66 <_ZdlPvj>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <_ZThn4_N15screenPresenterD0Ev>:
 8011d64:	f1a0 0004 	sub.w	r0, r0, #4
 8011d68:	e7ec      	b.n	8011d44 <_ZN15screenPresenterD0Ev>
	...

08011d6c <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
    : view(v)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7ff fd5d 	bl	8011838 <_ZN8touchgfx9PresenterC1Ev>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	3304      	adds	r3, #4
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff fd68 	bl	8011858 <_ZN13ModelListenerC1Ev>
 8011d88:	4a06      	ldr	r2, [pc, #24]	@ (8011da4 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	601a      	str	r2, [r3, #0]
 8011d8e:	4a06      	ldr	r2, [pc, #24]	@ (8011da8 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	605a      	str	r2, [r3, #4]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	683a      	ldr	r2, [r7, #0]
 8011d98:	60da      	str	r2, [r3, #12]
{

}
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3708      	adds	r7, #8
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	08030ba8 	.word	0x08030ba8
 8011da8:	08030bc0 	.word	0x08030bc0

08011dac <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8011dac:	b480      	push	{r7}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]

}
 8011db4:	bf00      	nop
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]

}
 8011dc8:	bf00      	nop
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr

08011dd4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	4a05      	ldr	r2, [pc, #20]	@ (8011df4 <_ZN10screenViewD1Ev+0x20>)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7ff f9cb 	bl	8011180 <_ZN14screenViewBaseD1Ev>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	08030bd0 	.word	0x08030bd0

08011df8 <_ZN10screenViewD0Ev>:
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7ff ffe7 	bl	8011dd4 <_ZN10screenViewD1Ev>
 8011e06:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f01b f82b 	bl	802ce66 <_ZdlPvj>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	4618      	mov	r0, r3
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7ff f8b0 	bl	8010f8c <_ZN14screenViewBaseC1Ev>
 8011e2c:	4a03      	ldr	r2, [pc, #12]	@ (8011e3c <_ZN10screenViewC1Ev+0x20>)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	601a      	str	r2, [r3, #0]
{

}
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	08030bd0 	.word	0x08030bd0

08011e40 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7ff f9d5 	bl	80111fa <_ZN14screenViewBase11setupScreenEv>
}
 8011e50:	bf00      	nop
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fa fe5a 	bl	800cb1c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011e68:	bf00      	nop
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011e70:	b480      	push	{r7}
 8011e72:	b083      	sub	sp, #12
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
    {
 8011e78:	4a04      	ldr	r2, [pc, #16]	@ (8011e8c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	601a      	str	r2, [r3, #0]
    }
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	08030c1c 	.word	0x08030c1c

08011e90 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
    }
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff ffe9 	bl	8011e70 <_ZN8touchgfx15TouchControllerD1Ev>
 8011e9e:	2104      	movs	r1, #4
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f01a ffe0 	bl	802ce66 <_ZdlPvj>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <_ZN20STM32TouchController4initEv>:
extern GT911_Dev Dev_Now;

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
     */

	static int16_t xx=0,yy=0;


	if((Dev_Now.X[0] != xx ) || (Dev_Now.Y[0]!= yy ))
 8011ed0:	4b17      	ldr	r3, [pc, #92]	@ (8011f30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011ed2:	891b      	ldrh	r3, [r3, #8]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	4b17      	ldr	r3, [pc, #92]	@ (8011f34 <_ZN20STM32TouchController11sampleTouchERlS0_+0x70>)
 8011ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d107      	bne.n	8011ef0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>
 8011ee0:	4b13      	ldr	r3, [pc, #76]	@ (8011f30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011ee2:	8a5b      	ldrh	r3, [r3, #18]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4b14      	ldr	r3, [pc, #80]	@ (8011f38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x74>)
 8011ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d017      	beq.n	8011f20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x5c>
	{
		xx = Dev_Now.X[0];
 8011ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8011f30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011ef2:	891b      	ldrh	r3, [r3, #8]
 8011ef4:	b21a      	sxth	r2, r3
 8011ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8011f34 <_ZN20STM32TouchController11sampleTouchERlS0_+0x70>)
 8011ef8:	801a      	strh	r2, [r3, #0]
		yy = Dev_Now.Y[0];
 8011efa:	4b0d      	ldr	r3, [pc, #52]	@ (8011f30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011efc:	8a5b      	ldrh	r3, [r3, #18]
 8011efe:	b21a      	sxth	r2, r3
 8011f00:	4b0d      	ldr	r3, [pc, #52]	@ (8011f38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x74>)
 8011f02:	801a      	strh	r2, [r3, #0]

		x= xx;
 8011f04:	4b0b      	ldr	r3, [pc, #44]	@ (8011f34 <_ZN20STM32TouchController11sampleTouchERlS0_+0x70>)
 8011f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	601a      	str	r2, [r3, #0]
		y= yy;
 8011f10:	4b09      	ldr	r3, [pc, #36]	@ (8011f38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x74>)
 8011f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f16:	461a      	mov	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	601a      	str	r2, [r3, #0]
		return true;
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	e000      	b.n	8011f22 <_ZN20STM32TouchController11sampleTouchERlS0_+0x5e>
	}
    return false;
 8011f20:	2300      	movs	r3, #0
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3714      	adds	r7, #20
 8011f26:	46bd      	mov	sp, r7
 8011f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2c:	4770      	bx	lr
 8011f2e:	bf00      	nop
 8011f30:	2000031c 	.word	0x2000031c
 8011f34:	2000d970 	.word	0x2000d970
 8011f38:	2000d972 	.word	0x2000d972

08011f3c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	4a05      	ldr	r2, [pc, #20]	@ (8011f5c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	601a      	str	r2, [r3, #0]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7ff ff8f 	bl	8011e70 <_ZN8touchgfx15TouchControllerD1Ev>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	08030c04 	.word	0x08030c04

08011f60 <_ZN20STM32TouchControllerD0Ev>:
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff ffe7 	bl	8011f3c <_ZN20STM32TouchControllerD1Ev>
 8011f6e:	2104      	movs	r1, #4
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f01a ff78 	bl	802ce66 <_ZdlPvj>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3708      	adds	r7, #8
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8011f80:	b480      	push	{r7}
 8011f82:	af00      	add	r7, sp, #0

}
 8011f84:	bf00      	nop
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr
	...

08011f90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	4603      	mov	r3, r0
 8011f98:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
 8011f9c:	2b03      	cmp	r3, #3
 8011f9e:	d80c      	bhi.n	8011fba <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8011fa8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fa6:	bf00      	nop
 8011fa8:	08011fb9 	.word	0x08011fb9
 8011fac:	08011fb9 	.word	0x08011fb9
 8011fb0:	08011fb9 	.word	0x08011fb9
 8011fb4:	08011fb9 	.word	0x08011fb9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011fb8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8011fba:	bf00      	nop
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop

08011fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d80c      	bhi.n	8011ff2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8011fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8011fe0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8011fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fde:	bf00      	nop
 8011fe0:	08011ff1 	.word	0x08011ff1
 8011fe4:	08011ff1 	.word	0x08011ff1
 8011fe8:	08011ff1 	.word	0x08011ff1
 8011fec:	08011ff1 	.word	0x08011ff1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8011ff0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8011ff2:	bf00      	nop
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop

08012000 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	4603      	mov	r3, r0
 8012008:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801200a:	79fb      	ldrb	r3, [r7, #7]
 801200c:	2b03      	cmp	r3, #3
 801200e:	d80c      	bhi.n	801202a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8012010:	a201      	add	r2, pc, #4	@ (adr r2, 8012018 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8012012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012016:	bf00      	nop
 8012018:	08012029 	.word	0x08012029
 801201c:	08012029 	.word	0x08012029
 8012020:	08012029 	.word	0x08012029
 8012024:	08012029 	.word	0x08012029
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8012028:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801202a:	bf00      	nop
 801202c:	370c      	adds	r7, #12
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop

08012038 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
    {
 8012040:	4a04      	ldr	r2, [pc, #16]	@ (8012054 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	601a      	str	r2, [r3, #0]
    }
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr
 8012054:	080314d4 	.word	0x080314d4

08012058 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
    }
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f7ff ffe9 	bl	8012038 <_ZN8touchgfx3HALD1Ev>
 8012066:	217c      	movs	r1, #124	@ 0x7c
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f01a fefc 	bl	802ce66 <_ZdlPvj>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	4618      	mov	r0, r3
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	460b      	mov	r3, r1
 8012082:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	78fa      	ldrb	r2, [r7, #3]
 8012088:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8012094:	bf00      	nop
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	460b      	mov	r3, r1
 80120aa:	807b      	strh	r3, [r7, #2]
 80120ac:	4613      	mov	r3, r2
 80120ae:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80120b0:	4b0c      	ldr	r3, [pc, #48]	@ (80120e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	887a      	ldrh	r2, [r7, #2]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d304      	bcc.n	80120c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80120ba:	4b0b      	ldr	r3, [pc, #44]	@ (80120e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80120bc:	881b      	ldrh	r3, [r3, #0]
 80120be:	883a      	ldrh	r2, [r7, #0]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d205      	bcs.n	80120d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80120c4:	4b09      	ldr	r3, [pc, #36]	@ (80120ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80120c6:	4a0a      	ldr	r2, [pc, #40]	@ (80120f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80120c8:	219e      	movs	r1, #158	@ 0x9e
 80120ca:	480a      	ldr	r0, [pc, #40]	@ (80120f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80120cc:	f01b fc2c 	bl	802d928 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80120d0:	4a09      	ldr	r2, [pc, #36]	@ (80120f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80120d2:	887b      	ldrh	r3, [r7, #2]
 80120d4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80120d6:	4a09      	ldr	r2, [pc, #36]	@ (80120fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80120d8:	883b      	ldrh	r3, [r7, #0]
 80120da:	8013      	strh	r3, [r2, #0]
    }
 80120dc:	bf00      	nop
 80120de:	3708      	adds	r7, #8
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	200122b8 	.word	0x200122b8
 80120e8:	200122ba 	.word	0x200122ba
 80120ec:	0802f9f4 	.word	0x0802f9f4
 80120f0:	0802fa58 	.word	0x0802fa58
 80120f4:	0802fa9c 	.word	0x0802fa9c
 80120f8:	200122be 	.word	0x200122be
 80120fc:	200122c0 	.word	0x200122c0

08012100 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801210e:	2b00      	cmp	r3, #0
 8012110:	d009      	beq.n	8012126 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	4610      	mov	r0, r2
 8012120:	4798      	blx	r3
 8012122:	4603      	mov	r3, r0
 8012124:	e000      	b.n	8012128 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8012126:	2300      	movs	r3, #0
    }
 8012128:	4618      	mov	r0, r3
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f003 fe2f 	bl	8015d9c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	33ac      	adds	r3, #172	@ 0xac
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	4798      	blx	r3
    }
 801214a:	bf00      	nop
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8012152:	b480      	push	{r7}
 8012154:	b083      	sub	sp, #12
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	6039      	str	r1, [r7, #0]
        return false;
 801215c:	2300      	movs	r3, #0
    }
 801215e:	4618      	mov	r0, r3
 8012160:	370c      	adds	r7, #12
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr
	...

0801216c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
 8012178:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d106      	bne.n	801218e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012180:	4b0f      	ldr	r3, [pc, #60]	@ (80121c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012182:	4a10      	ldr	r2, [pc, #64]	@ (80121c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012184:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8012188:	480f      	ldr	r0, [pc, #60]	@ (80121c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801218a:	f01b fbcd 	bl	802d928 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2b00      	cmp	r3, #0
 801219e:	bf14      	ite	ne
 80121a0:	2301      	movne	r3, #1
 80121a2:	2300      	moveq	r3, #0
 80121a4:	b2da      	uxtb	r2, r3
 80121a6:	4b09      	ldr	r3, [pc, #36]	@ (80121cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80121a8:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	338c      	adds	r3, #140	@ 0x8c
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	6839      	ldr	r1, [r7, #0]
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	4798      	blx	r3
    }
 80121b8:	bf00      	nop
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	0802fae0 	.word	0x0802fae0
 80121c4:	0802fb18 	.word	0x0802fb18
 80121c8:	0802fa9c 	.word	0x0802fa9c
 80121cc:	200122c2 	.word	0x200122c2

080121d0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	bf14      	ite	ne
 80121e6:	2301      	movne	r3, #1
 80121e8:	2300      	moveq	r3, #0
 80121ea:	b2da      	uxtb	r2, r3
 80121ec:	4b03      	ldr	r3, [pc, #12]	@ (80121fc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80121ee:	701a      	strb	r2, [r3, #0]
    }
 80121f0:	bf00      	nop
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr
 80121fc:	200122c3 	.word	0x200122c3

08012200 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
        return 0;
 8012208:	2300      	movs	r3, #0
    }
 801220a:	4618      	mov	r0, r3
 801220c:	370c      	adds	r7, #12
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr

08012216 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8012216:	b580      	push	{r7, lr}
 8012218:	b082      	sub	sp, #8
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
 801221e:	460b      	mov	r3, r1
 8012220:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012226:	2b00      	cmp	r3, #0
 8012228:	d004      	beq.n	8012234 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801222e:	887a      	ldrh	r2, [r7, #2]
 8012230:	4610      	mov	r0, r2
 8012232:	4798      	blx	r3
    }
 8012234:	bf00      	nop
 8012236:	3708      	adds	r7, #8
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	685a      	ldr	r2, [r3, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	3318      	adds	r3, #24
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	4610      	mov	r0, r2
 8012254:	4798      	blx	r3
 8012256:	4603      	mov	r3, r0
    }
 8012258:	4618      	mov	r0, r3
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012260:	b480      	push	{r7}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012274:	429a      	cmp	r2, r3
 8012276:	d011      	beq.n	801229c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012278:	4b14      	ldr	r3, [pc, #80]	@ (80122cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d11e      	bne.n	80122be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8012280:	4b13      	ldr	r3, [pc, #76]	@ (80122d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8012286:	4b13      	ldr	r3, [pc, #76]	@ (80122d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012288:	881a      	ldrh	r2, [r3, #0]
 801228a:	4b11      	ldr	r3, [pc, #68]	@ (80122d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801228c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801228e:	4a11      	ldr	r2, [pc, #68]	@ (80122d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012290:	89bb      	ldrh	r3, [r7, #12]
 8012292:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8012294:	4b0d      	ldr	r3, [pc, #52]	@ (80122cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012296:	2201      	movs	r2, #1
 8012298:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801229a:	e010      	b.n	80122be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801229c:	4b0b      	ldr	r3, [pc, #44]	@ (80122cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00c      	beq.n	80122be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80122a4:	4b0a      	ldr	r3, [pc, #40]	@ (80122d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80122aa:	4b0a      	ldr	r3, [pc, #40]	@ (80122d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80122ac:	881a      	ldrh	r2, [r3, #0]
 80122ae:	4b08      	ldr	r3, [pc, #32]	@ (80122d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80122b0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80122b2:	4a08      	ldr	r2, [pc, #32]	@ (80122d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80122b4:	89fb      	ldrh	r3, [r7, #14]
 80122b6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80122b8:	4b04      	ldr	r3, [pc, #16]	@ (80122cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80122ba:	2200      	movs	r2, #0
 80122bc:	701a      	strb	r2, [r3, #0]
    }
 80122be:	bf00      	nop
 80122c0:	3714      	adds	r7, #20
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	200122bc 	.word	0x200122bc
 80122d0:	200122ba 	.word	0x200122ba
 80122d4:	200122b8 	.word	0x200122b8

080122d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f002 ffb8 	bl	8015258 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80122e8:	bf00      	nop
 80122ea:	3708      	adds	r7, #8
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	4a05      	ldr	r2, [pc, #20]	@ (8012310 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	601a      	str	r2, [r3, #0]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	f7ff fe99 	bl	8012038 <_ZN8touchgfx3HALD1Ev>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4618      	mov	r0, r3
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	08030e64 	.word	0x08030e64

08012314 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff ffe7 	bl	80122f0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012322:	217c      	movs	r1, #124	@ 0x7c
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f01a fd9e 	bl	802ce66 <_ZdlPvj>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4618      	mov	r0, r3
 8012340:	f7ff ffca 	bl	80122d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012344:	bf00      	nop
 8012346:	3708      	adds	r7, #8
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	4618      	mov	r0, r3
 8012358:	f001 fd00 	bl	8013d5c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801235c:	bf00      	nop
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4618      	mov	r0, r3
 8012370:	f001 fd96 	bl	8013ea0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012374:	4603      	mov	r3, r0
}
 8012376:	4618      	mov	r0, r3
 8012378:	3708      	adds	r7, #8
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b082      	sub	sp, #8
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
 8012386:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6839      	ldr	r1, [r7, #0]
 801238c:	4618      	mov	r0, r3
 801238e:	f001 fd95 	bl	8013ebc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012392:	bf00      	nop
 8012394:	3708      	adds	r7, #8
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}

0801239a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b082      	sub	sp, #8
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
 80123a2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6839      	ldr	r1, [r7, #0]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f001 fd9d 	bl	8013ee8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80123ae:	bf00      	nop
 80123b0:	3708      	adds	r7, #8
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b084      	sub	sp, #16
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	60f8      	str	r0, [r7, #12]
 80123be:	60b9      	str	r1, [r7, #8]
 80123c0:	607a      	str	r2, [r7, #4]
 80123c2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80123c4:	68f8      	ldr	r0, [r7, #12]
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	68b9      	ldr	r1, [r7, #8]
 80123cc:	f001 fd9a 	bl	8013f04 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80123d0:	4603      	mov	r3, r0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80123da:	b580      	push	{r7, lr}
 80123dc:	b082      	sub	sp, #8
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4618      	mov	r0, r3
 80123e6:	f001 fce7 	bl	8013db8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80123ea:	bf00      	nop
 80123ec:	3708      	adds	r7, #8
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b082      	sub	sp, #8
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f001 fceb 	bl	8013dd8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012402:	bf00      	nop
 8012404:	3708      	adds	r7, #8
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b082      	sub	sp, #8
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4618      	mov	r0, r3
 8012416:	f001 fced 	bl	8013df4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801241a:	bf00      	nop
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012422:	b580      	push	{r7, lr}
 8012424:	b082      	sub	sp, #8
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4618      	mov	r0, r3
 801242e:	f001 fcef 	bl	8013e10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012432:	bf00      	nop
 8012434:	3708      	adds	r7, #8
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b082      	sub	sp, #8
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4618      	mov	r0, r3
 8012446:	f001 fd11 	bl	8013e6c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801244a:	4603      	mov	r3, r0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f001 fd11 	bl	8013e86 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012464:	bf00      	nop
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	4a05      	ldr	r2, [pc, #20]	@ (801248c <_ZN11TouchGFXHALD1Ev+0x20>)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff ff37 	bl	80122f0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4618      	mov	r0, r3
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	08030c34 	.word	0x08030c34

08012490 <_ZN11TouchGFXHALD0Ev>:
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7ff ffe7 	bl	801246c <_ZN11TouchGFXHALD1Ev>
 801249e:	217c      	movs	r1, #124	@ 0x7c
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f01a fce0 	bl	802ce66 <_ZdlPvj>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 80124b4:	2101      	movs	r1, #1
 80124b6:	4811      	ldr	r0, [pc, #68]	@ (80124fc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80124b8:	f7f5 f94f 	bl	800775a <osSemaphoreCreate>
 80124bc:	4603      	mov	r3, r0
 80124be:	4a10      	ldr	r2, [pc, #64]	@ (8012500 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80124c0:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80124c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012500 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d105      	bne.n	80124d6 <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 80124ca:	4b0e      	ldr	r3, [pc, #56]	@ (8012504 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80124cc:	4a0e      	ldr	r2, [pc, #56]	@ (8012508 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80124ce:	2127      	movs	r1, #39	@ 0x27
 80124d0:	480e      	ldr	r0, [pc, #56]	@ (801250c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80124d2:	f01b fa29 	bl	802d928 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 80124d6:	2101      	movs	r1, #1
 80124d8:	480d      	ldr	r0, [pc, #52]	@ (8012510 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80124da:	f7f5 f93e 	bl	800775a <osSemaphoreCreate>
 80124de:	4603      	mov	r3, r0
 80124e0:	4a0c      	ldr	r2, [pc, #48]	@ (8012514 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80124e2:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 80124e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012514 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d105      	bne.n	80124f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80124ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012518 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80124ee:	4a06      	ldr	r2, [pc, #24]	@ (8012508 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80124f0:	212a      	movs	r1, #42	@ 0x2a
 80124f2:	4806      	ldr	r0, [pc, #24]	@ (801250c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80124f4:	f01b fa18 	bl	802d928 <__assert_func>
}
 80124f8:	bf00      	nop
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	08030d04 	.word	0x08030d04
 8012500:	2000d974 	.word	0x2000d974
 8012504:	0802fb68 	.word	0x0802fb68
 8012508:	0802fbb4 	.word	0x0802fbb4
 801250c:	0802fbe4 	.word	0x0802fbe4
 8012510:	08030d0c 	.word	0x08030d0c
 8012514:	2000d978 	.word	0x2000d978
 8012518:	0802fc10 	.word	0x0802fc10

0801251c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801251c:	b580      	push	{r7, lr}
 801251e:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8012520:	4b04      	ldr	r3, [pc, #16]	@ (8012534 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f04f 31ff 	mov.w	r1, #4294967295
 8012528:	4618      	mov	r0, r3
 801252a:	f7f5 f949 	bl	80077c0 <osSemaphoreWait>
}
 801252e:	bf00      	nop
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	2000d974 	.word	0x2000d974

08012538 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012538:	b580      	push	{r7, lr}
 801253a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801253c:	4b03      	ldr	r3, [pc, #12]	@ (801254c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4618      	mov	r0, r3
 8012542:	f7f5 f98b 	bl	800785c <osSemaphoreRelease>
}
 8012546:	bf00      	nop
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	2000d974 	.word	0x2000d974

08012550 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012550:	b580      	push	{r7, lr}
 8012552:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8012554:	4b03      	ldr	r3, [pc, #12]	@ (8012564 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2100      	movs	r1, #0
 801255a:	4618      	mov	r0, r3
 801255c:	f7f5 f930 	bl	80077c0 <osSemaphoreWait>
}
 8012560:	bf00      	nop
 8012562:	bd80      	pop	{r7, pc}
 8012564:	2000d974 	.word	0x2000d974

08012568 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012568:	b580      	push	{r7, lr}
 801256a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 801256c:	4b03      	ldr	r3, [pc, #12]	@ (801257c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4618      	mov	r0, r3
 8012572:	f7f5 f973 	bl	800785c <osSemaphoreRelease>
}
 8012576:	bf00      	nop
 8012578:	bd80      	pop	{r7, pc}
 801257a:	bf00      	nop
 801257c:	2000d974 	.word	0x2000d974

08012580 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012580:	b580      	push	{r7, lr}
 8012582:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8012584:	4b03      	ldr	r3, [pc, #12]	@ (8012594 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4618      	mov	r0, r3
 801258a:	f7f5 f967 	bl	800785c <osSemaphoreRelease>
}
 801258e:	bf00      	nop
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	2000d978 	.word	0x2000d978

08012598 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012598:	b580      	push	{r7, lr}
 801259a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 801259c:	4b07      	ldr	r3, [pc, #28]	@ (80125bc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2100      	movs	r1, #0
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7f5 f90c 	bl	80077c0 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80125a8:	4b04      	ldr	r3, [pc, #16]	@ (80125bc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f04f 31ff 	mov.w	r1, #4294967295
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f5 f905 	bl	80077c0 <osSemaphoreWait>
}
 80125b6:	bf00      	nop
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	2000d978 	.word	0x2000d978

080125c0 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	4603      	mov	r3, r0
 80125c8:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80125ca:	88fb      	ldrh	r3, [r7, #6]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7f5 f8b0 	bl	8007732 <osDelay>
}
 80125d2:	bf00      	nop
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
	...

080125dc <__NVIC_EnableIRQ>:
{
 80125dc:	b480      	push	{r7}
 80125de:	b083      	sub	sp, #12
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	4603      	mov	r3, r0
 80125e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80125e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	db0b      	blt.n	8012606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80125ee:	79fb      	ldrb	r3, [r7, #7]
 80125f0:	f003 021f 	and.w	r2, r3, #31
 80125f4:	4907      	ldr	r1, [pc, #28]	@ (8012614 <__NVIC_EnableIRQ+0x38>)
 80125f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125fa:	095b      	lsrs	r3, r3, #5
 80125fc:	2001      	movs	r0, #1
 80125fe:	fa00 f202 	lsl.w	r2, r0, r2
 8012602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012606:	bf00      	nop
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	e000e100 	.word	0xe000e100

08012618 <__NVIC_DisableIRQ>:
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	4603      	mov	r3, r0
 8012620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012626:	2b00      	cmp	r3, #0
 8012628:	db12      	blt.n	8012650 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	f003 021f 	and.w	r2, r3, #31
 8012630:	490a      	ldr	r1, [pc, #40]	@ (801265c <__NVIC_DisableIRQ+0x44>)
 8012632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012636:	095b      	lsrs	r3, r3, #5
 8012638:	2001      	movs	r0, #1
 801263a:	fa00 f202 	lsl.w	r2, r0, r2
 801263e:	3320      	adds	r3, #32
 8012640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012644:	f3bf 8f4f 	dsb	sy
}
 8012648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801264a:	f3bf 8f6f 	isb	sy
}
 801264e:	bf00      	nop
}
 8012650:	bf00      	nop
 8012652:	370c      	adds	r7, #12
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr
 801265c:	e000e100 	.word	0xe000e100

08012660 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8012660:	b480      	push	{r7}
 8012662:	b087      	sub	sp, #28
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8012672:	2320      	movs	r3, #32
 8012674:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012676:	f3bf 8f4f 	dsb	sy
}
 801267a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 801267c:	e00b      	b.n	8012696 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 801267e:	4a0d      	ldr	r2, [pc, #52]	@ (80126b4 <SCB_CleanDCache_by_Addr+0x54>)
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	693a      	ldr	r2, [r7, #16]
 801268a:	4413      	add	r3, r2
 801268c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801268e:	697a      	ldr	r2, [r7, #20]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2b00      	cmp	r3, #0
 801269a:	dcf0      	bgt.n	801267e <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801269c:	f3bf 8f4f 	dsb	sy
}
 80126a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80126a2:	f3bf 8f6f 	isb	sy
}
 80126a6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80126a8:	bf00      	nop
 80126aa:	371c      	adds	r7, #28
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr
 80126b4:	e000ed00 	.word	0xe000ed00

080126b8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
    {
 80126c0:	4a04      	ldr	r2, [pc, #16]	@ (80126d4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	601a      	str	r2, [r3, #0]
    }
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	4618      	mov	r0, r3
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr
 80126d4:	08030d6c 	.word	0x08030d6c

080126d8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
    }
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7ff ffe9 	bl	80126b8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80126e6:	2104      	movs	r1, #4
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f01a fbbc 	bl	802ce66 <_ZdlPvj>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	3344      	adds	r3, #68	@ 0x44
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	4798      	blx	r3
    }
 801270c:	bf00      	nop
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012714:	b480      	push	{r7}
 8012716:	b083      	sub	sp, #12
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
    {
 801271c:	4a04      	ldr	r2, [pc, #16]	@ (8012730 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	601a      	str	r2, [r3, #0]
    }
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr
 8012730:	080315ac 	.word	0x080315ac

08012734 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
    }
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff ffe9 	bl	8012714 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012742:	210c      	movs	r1, #12
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f01a fb8e 	bl	802ce66 <_ZdlPvj>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801275e:	4a09      	ldr	r2, [pc, #36]	@ (8012784 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	601a      	str	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	605a      	str	r2, [r3, #4]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	721a      	strb	r2, [r3, #8]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2200      	movs	r2, #0
 8012774:	725a      	strb	r2, [r3, #9]
    {
    }
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4618      	mov	r0, r3
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	080315ac 	.word	0x080315ac

08012788 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8012790:	2301      	movs	r3, #1
    }
 8012792:	4618      	mov	r0, r3
 8012794:	370c      	adds	r7, #12
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr

0801279e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801279e:	b580      	push	{r7, lr}
 80127a0:	b082      	sub	sp, #8
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	3328      	adds	r3, #40	@ 0x28
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4610      	mov	r0, r2
 80127b2:	4798      	blx	r3
    }
 80127b4:	bf00      	nop
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	685a      	ldr	r2, [r3, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	3314      	adds	r3, #20
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	4610      	mov	r0, r2
 80127d4:	4798      	blx	r3
    }
 80127d6:	bf00      	nop
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80127de:	b580      	push	{r7, lr}
 80127e0:	b082      	sub	sp, #8
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80127e6:	f7f8 f9a7 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 80127ea:	4603      	mov	r3, r0
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7ff ffe5 	bl	80127bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80127f2:	bf00      	nop
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 80127fa:	b480      	push	{r7}
 80127fc:	b083      	sub	sp, #12
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8012802:	bf00      	nop
 8012804:	e7fd      	b.n	8012802 <DMA2D_XferErrorCallback+0x8>
	...

08012808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	4a05      	ldr	r2, [pc, #20]	@ (8012828 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	f7ff ff4d 	bl	80126b8 <_ZN8touchgfx9DMA_QueueD1Ev>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	080315fc 	.word	0x080315fc

0801282c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7ff ffe7 	bl	8012808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801283a:	2114      	movs	r1, #20
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f01a fb12 	bl	802ce66 <_ZdlPvj>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	4618      	mov	r0, r3
 8012846:	3708      	adds	r7, #8
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	330c      	adds	r3, #12
 8012858:	4618      	mov	r0, r3
 801285a:	f7fa fd18 	bl	800d28e <_ZN8touchgfx9colortypeC1Ev>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 8012868:	b5b0      	push	{r4, r5, r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	330c      	adds	r3, #12
 8012876:	4619      	mov	r1, r3
 8012878:	4610      	mov	r0, r2
 801287a:	f7ff ff6b 	bl	8012754 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801287e:	4a0e      	ldr	r2, [pc, #56]	@ (80128b8 <_ZN8STM32DMAC1Ev+0x50>)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	601a      	str	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f103 000c 	add.w	r0, r3, #12
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	3320      	adds	r3, #32
 801288e:	2260      	movs	r2, #96	@ 0x60
 8012890:	4619      	mov	r1, r3
 8012892:	f003 fbd7 	bl	8016044 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	3320      	adds	r3, #32
 801289a:	245f      	movs	r4, #95	@ 0x5f
 801289c:	461d      	mov	r5, r3
 801289e:	e004      	b.n	80128aa <_ZN8STM32DMAC1Ev+0x42>
 80128a0:	4628      	mov	r0, r5
 80128a2:	f7ff ffd3 	bl	801284c <_ZN8touchgfx6BlitOpC1Ev>
 80128a6:	3c01      	subs	r4, #1
 80128a8:	3524      	adds	r5, #36	@ 0x24
 80128aa:	2c00      	cmp	r4, #0
 80128ac:	daf8      	bge.n	80128a0 <_ZN8STM32DMAC1Ev+0x38>
{
}
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bdb0      	pop	{r4, r5, r7, pc}
 80128b8:	08030d1c 	.word	0x08030d1c

080128bc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	4a09      	ldr	r2, [pc, #36]	@ (80128ec <_ZN8STM32DMAD1Ev+0x30>)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80128ca:	205a      	movs	r0, #90	@ 0x5a
 80128cc:	f7ff fea4 	bl	8012618 <__NVIC_DisableIRQ>
}
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	330c      	adds	r3, #12
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7ff ff97 	bl	8012808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4618      	mov	r0, r3
 80128de:	f7ff ff19 	bl	8012714 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	08030d1c 	.word	0x08030d1c

080128f0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
}
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7ff ffdf 	bl	80128bc <_ZN8STM32DMAD1Ev>
 80128fe:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f01a faaf 	bl	802ce66 <_ZdlPvj>
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4618      	mov	r0, r3
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
	...

08012914 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801291c:	4b12      	ldr	r3, [pc, #72]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 801291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012920:	4a11      	ldr	r2, [pc, #68]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 8012922:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012926:	6313      	str	r3, [r2, #48]	@ 0x30
 8012928:	4b0f      	ldr	r3, [pc, #60]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 801292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801292c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012930:	60fb      	str	r3, [r7, #12]
 8012932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8012934:	4b0c      	ldr	r3, [pc, #48]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 8012936:	691b      	ldr	r3, [r3, #16]
 8012938:	4a0b      	ldr	r2, [pc, #44]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 801293a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801293e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8012940:	4b09      	ldr	r3, [pc, #36]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 8012942:	691b      	ldr	r3, [r3, #16]
 8012944:	4a08      	ldr	r2, [pc, #32]	@ (8012968 <_ZN8STM32DMA10initializeEv+0x54>)
 8012946:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801294a:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801294c:	4b07      	ldr	r3, [pc, #28]	@ (801296c <_ZN8STM32DMA10initializeEv+0x58>)
 801294e:	4a08      	ldr	r2, [pc, #32]	@ (8012970 <_ZN8STM32DMA10initializeEv+0x5c>)
 8012950:	611a      	str	r2, [r3, #16]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012952:	4b06      	ldr	r3, [pc, #24]	@ (801296c <_ZN8STM32DMA10initializeEv+0x58>)
 8012954:	4a07      	ldr	r2, [pc, #28]	@ (8012974 <_ZN8STM32DMA10initializeEv+0x60>)
 8012956:	615a      	str	r2, [r3, #20]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012958:	205a      	movs	r0, #90	@ 0x5a
 801295a:	f7ff fe3f 	bl	80125dc <__NVIC_EnableIRQ>
}
 801295e:	bf00      	nop
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	40023800 	.word	0x40023800
 801296c:	200006ec 	.word	0x200006ec
 8012970:	080127df 	.word	0x080127df
 8012974:	080127fb 	.word	0x080127fb

08012978 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	460b      	mov	r3, r1
 8012982:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012984:	2300      	movs	r3, #0
 8012986:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012988:	78fb      	ldrb	r3, [r7, #3]
 801298a:	2b0b      	cmp	r3, #11
 801298c:	d826      	bhi.n	80129dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801298e:	a201      	add	r2, pc, #4	@ (adr r2, 8012994 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012994:	080129d1 	.word	0x080129d1
 8012998:	080129cb 	.word	0x080129cb
 801299c:	080129c5 	.word	0x080129c5
 80129a0:	080129dd 	.word	0x080129dd
 80129a4:	080129dd 	.word	0x080129dd
 80129a8:	080129dd 	.word	0x080129dd
 80129ac:	080129dd 	.word	0x080129dd
 80129b0:	080129d7 	.word	0x080129d7
 80129b4:	080129d7 	.word	0x080129d7
 80129b8:	080129d7 	.word	0x080129d7
 80129bc:	080129d7 	.word	0x080129d7
 80129c0:	080129d7 	.word	0x080129d7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80129c4:	2300      	movs	r3, #0
 80129c6:	60fb      	str	r3, [r7, #12]
        break;
 80129c8:	e00e      	b.n	80129e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80129ca:	2301      	movs	r3, #1
 80129cc:	60fb      	str	r3, [r7, #12]
        break;
 80129ce:	e00b      	b.n	80129e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80129d0:	2302      	movs	r3, #2
 80129d2:	60fb      	str	r3, [r7, #12]
        break;
 80129d4:	e008      	b.n	80129e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80129d6:	2305      	movs	r3, #5
 80129d8:	60fb      	str	r3, [r7, #12]
        break;
 80129da:	e005      	b.n	80129e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80129dc:	4b05      	ldr	r3, [pc, #20]	@ (80129f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80129de:	4a06      	ldr	r2, [pc, #24]	@ (80129f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80129e0:	216f      	movs	r1, #111	@ 0x6f
 80129e2:	4806      	ldr	r0, [pc, #24]	@ (80129fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80129e4:	f01a ffa0 	bl	802d928 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80129e8:	68fb      	ldr	r3, [r7, #12]
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	0802fc4c 	.word	0x0802fc4c
 80129f8:	0802fc68 	.word	0x0802fc68
 80129fc:	0802fcb4 	.word	0x0802fcb4

08012a00 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	460b      	mov	r3, r1
 8012a0a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012a10:	78fb      	ldrb	r3, [r7, #3]
 8012a12:	2b0a      	cmp	r3, #10
 8012a14:	d821      	bhi.n	8012a5a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012a16:	a201      	add	r2, pc, #4	@ (adr r2, 8012a1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a1c:	08012a55 	.word	0x08012a55
 8012a20:	08012a4f 	.word	0x08012a4f
 8012a24:	08012a49 	.word	0x08012a49
 8012a28:	08012a5b 	.word	0x08012a5b
 8012a2c:	08012a5b 	.word	0x08012a5b
 8012a30:	08012a5b 	.word	0x08012a5b
 8012a34:	08012a5b 	.word	0x08012a5b
 8012a38:	08012a4f 	.word	0x08012a4f
 8012a3c:	08012a4f 	.word	0x08012a4f
 8012a40:	08012a4f 	.word	0x08012a4f
 8012a44:	08012a4f 	.word	0x08012a4f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	60fb      	str	r3, [r7, #12]
        break;
 8012a4c:	e00b      	b.n	8012a66 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	60fb      	str	r3, [r7, #12]
        break;
 8012a52:	e008      	b.n	8012a66 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012a54:	2302      	movs	r3, #2
 8012a56:	60fb      	str	r3, [r7, #12]
        break;
 8012a58:	e005      	b.n	8012a66 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012a5a:	4b05      	ldr	r3, [pc, #20]	@ (8012a70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012a5c:	4a05      	ldr	r2, [pc, #20]	@ (8012a74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8012a5e:	2190      	movs	r1, #144	@ 0x90
 8012a60:	4805      	ldr	r0, [pc, #20]	@ (8012a78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8012a62:	f01a ff61 	bl	802d928 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012a66:	68fb      	ldr	r3, [r7, #12]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	0802fc4c 	.word	0x0802fc4c
 8012a74:	0802fce0 	.word	0x0802fce0
 8012a78:	0802fcb4 	.word	0x0802fcb4

08012a7c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b083      	sub	sp, #12
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012a84:	f640 73ef 	movw	r3, #4079	@ 0xfef
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b088      	sub	sp, #32
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	7f5b      	ldrb	r3, [r3, #29]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7ff ff67 	bl	8012978 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012aaa:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	7f9b      	ldrb	r3, [r3, #30]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7ff ff60 	bl	8012978 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012ab8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	7f9b      	ldrb	r3, [r3, #30]
 8012abe:	4619      	mov	r1, r3
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff ff9d 	bl	8012a00 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012ac6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	8b5b      	ldrh	r3, [r3, #26]
 8012acc:	461a      	mov	r2, r3
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	8a9b      	ldrh	r3, [r3, #20]
 8012ad2:	1ad2      	subs	r2, r2, r3
 8012ad4:	4b91      	ldr	r3, [pc, #580]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ad6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	8b5b      	ldrh	r3, [r3, #26]
 8012adc:	461a      	mov	r2, r3
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	8a9b      	ldrh	r3, [r3, #20]
 8012ae2:	1ad2      	subs	r2, r2, r3
 8012ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ae6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	8b1b      	ldrh	r3, [r3, #24]
 8012aec:	461a      	mov	r2, r3
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	8a9b      	ldrh	r3, [r3, #20]
 8012af2:	1ad2      	subs	r2, r2, r3
 8012af4:	4b89      	ldr	r3, [pc, #548]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012af6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012af8:	4a88      	ldr	r2, [pc, #544]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	8adb      	ldrh	r3, [r3, #22]
 8012b02:	461a      	mov	r2, r3
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	8a9b      	ldrh	r3, [r3, #20]
 8012b08:	041b      	lsls	r3, r3, #16
 8012b0a:	431a      	orrs	r2, r3
 8012b0c:	4b83      	ldr	r3, [pc, #524]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	691a      	ldr	r2, [r3, #16]
 8012b14:	4b81      	ldr	r3, [pc, #516]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	685a      	ldr	r2, [r3, #4]
 8012b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b1e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b28:	d041      	beq.n	8012bae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11a>
 8012b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b2e:	f200 814e 	bhi.w	8012dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b36:	d014      	beq.n	8012b62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b3c:	f200 8147 	bhi.w	8012dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012b40:	2b80      	cmp	r3, #128	@ 0x80
 8012b42:	d078      	beq.n	8012c36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a2>
 8012b44:	2b80      	cmp	r3, #128	@ 0x80
 8012b46:	f200 8142 	bhi.w	8012dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012b4a:	2b40      	cmp	r3, #64	@ 0x40
 8012b4c:	f000 8121 	beq.w	8012d92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
 8012b50:	2b40      	cmp	r3, #64	@ 0x40
 8012b52:	f200 813c 	bhi.w	8012dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012b56:	2b04      	cmp	r3, #4
 8012b58:	d04f      	beq.n	8012bfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 8012b5a:	2b20      	cmp	r3, #32
 8012b5c:	f000 80f2 	beq.w	8012d44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
 8012b60:	e135      	b.n	8012dce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	7f1b      	ldrb	r3, [r3, #28]
 8012b66:	061a      	lsls	r2, r3, #24
 8012b68:	496c      	ldr	r1, [pc, #432]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8012d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	330c      	adds	r3, #12
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fa fb98 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	4a67      	ldr	r2, [pc, #412]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012b82:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	7fdb      	ldrb	r3, [r3, #31]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d005      	beq.n	8012b98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012b8c:	4963      	ldr	r1, [pc, #396]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b8e:	697a      	ldr	r2, [r7, #20]
 8012b90:	4b64      	ldr	r3, [pc, #400]	@ (8012d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012b92:	4313      	orrs	r3, r2
 8012b94:	624b      	str	r3, [r1, #36]	@ 0x24
 8012b96:	e002      	b.n	8012b9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012b98:	4a60      	ldr	r2, [pc, #384]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	691a      	ldr	r2, [r3, #16]
 8012ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ba4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ba8:	4a5f      	ldr	r2, [pc, #380]	@ (8012d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012baa:	601a      	str	r2, [r3, #0]
        break;
 8012bac:	e130      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	7f1b      	ldrb	r3, [r3, #28]
 8012bb2:	061a      	lsls	r2, r3, #24
 8012bb4:	4959      	ldr	r1, [pc, #356]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8012d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bb8:	4313      	orrs	r3, r2
 8012bba:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	330c      	adds	r3, #12
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fa fb72 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	4a54      	ldr	r2, [pc, #336]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012bce:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	7fdb      	ldrb	r3, [r3, #31]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d005      	beq.n	8012be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012bd8:	4950      	ldr	r1, [pc, #320]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bda:	697a      	ldr	r2, [r7, #20]
 8012bdc:	4b51      	ldr	r3, [pc, #324]	@ (8012d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012bde:	4313      	orrs	r3, r2
 8012be0:	624b      	str	r3, [r1, #36]	@ 0x24
 8012be2:	e002      	b.n	8012bea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012be4:	4a4d      	ldr	r2, [pc, #308]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	691a      	ldr	r2, [r3, #16]
 8012bee:	4b4b      	ldr	r3, [pc, #300]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bf0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bf4:	4a4c      	ldr	r2, [pc, #304]	@ (8012d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012bf6:	601a      	str	r2, [r3, #0]
        break;
 8012bf8:	e10a      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	7f1b      	ldrb	r3, [r3, #28]
 8012bfe:	061a      	lsls	r2, r3, #24
 8012c00:	69bb      	ldr	r3, [r7, #24]
 8012c02:	4313      	orrs	r3, r2
 8012c04:	4a45      	ldr	r2, [pc, #276]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c0a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	7fdb      	ldrb	r3, [r3, #31]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d005      	beq.n	8012c20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012c14:	4941      	ldr	r1, [pc, #260]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c16:	697a      	ldr	r2, [r7, #20]
 8012c18:	4b42      	ldr	r3, [pc, #264]	@ (8012d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	624b      	str	r3, [r1, #36]	@ 0x24
 8012c1e:	e002      	b.n	8012c26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c20:	4a3e      	ldr	r2, [pc, #248]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	691a      	ldr	r2, [r3, #16]
 8012c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c2c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c30:	4a3d      	ldr	r2, [pc, #244]	@ (8012d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012c32:	601a      	str	r2, [r3, #0]
        break;
 8012c34:	e0ec      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012c36:	2301      	movs	r3, #1
 8012c38:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	689b      	ldr	r3, [r3, #8]
 8012c3e:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	1d1a      	adds	r2, r3, #4
 8012c44:	4b35      	ldr	r3, [pc, #212]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c46:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	7f1b      	ldrb	r3, [r3, #28]
 8012c4c:	061a      	lsls	r2, r3, #24
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	4313      	orrs	r3, r2
 8012c52:	4a32      	ldr	r2, [pc, #200]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c58:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	7fdb      	ldrb	r3, [r3, #31]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012c62:	492e      	ldr	r1, [pc, #184]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	4b2f      	ldr	r3, [pc, #188]	@ (8012d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	624b      	str	r3, [r1, #36]	@ 0x24
 8012c6c:	e002      	b.n	8012c74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	6253      	str	r3, [r2, #36]	@ 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	691a      	ldr	r2, [r3, #16]
 8012c78:	4b28      	ldr	r3, [pc, #160]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c7a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d002      	beq.n	8012c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d00c      	beq.n	8012ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8012c8a:	e01f      	b.n	8012ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012c8c:	4b23      	ldr	r3, [pc, #140]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c8e:	69da      	ldr	r2, [r3, #28]
 8012c90:	4b27      	ldr	r3, [pc, #156]	@ (8012d30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c92:	4013      	ands	r3, r2
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	8852      	ldrh	r2, [r2, #2]
 8012c98:	3a01      	subs	r2, #1
 8012c9a:	0212      	lsls	r2, r2, #8
 8012c9c:	491f      	ldr	r1, [pc, #124]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c9e:	4313      	orrs	r3, r2
 8012ca0:	61cb      	str	r3, [r1, #28]
                break;
 8012ca2:	e01a      	b.n	8012cda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	7f1b      	ldrb	r3, [r3, #28]
 8012ca8:	2bff      	cmp	r3, #255	@ 0xff
 8012caa:	d101      	bne.n	8012cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
                {
                    blend = false;
 8012cac:	2300      	movs	r3, #0
 8012cae:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cb2:	69da      	ldr	r2, [r3, #28]
 8012cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8012d30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012cb6:	4013      	ands	r3, r2
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	8852      	ldrh	r2, [r2, #2]
 8012cbc:	3a01      	subs	r2, #1
 8012cbe:	0212      	lsls	r2, r2, #8
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	4a16      	ldr	r2, [pc, #88]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cc4:	f043 0310 	orr.w	r3, r3, #16
 8012cc8:	61d3      	str	r3, [r2, #28]
                break;
 8012cca:	e006      	b.n	8012cda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8012ccc:	4b19      	ldr	r3, [pc, #100]	@ (8012d34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012cce:	4a1a      	ldr	r2, [pc, #104]	@ (8012d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012cd0:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8012cd4:	4819      	ldr	r0, [pc, #100]	@ (8012d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8012cd6:	f01a fe27 	bl	802d928 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8012cda:	4b10      	ldr	r3, [pc, #64]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cdc:	69db      	ldr	r3, [r3, #28]
 8012cde:	4a0f      	ldr	r2, [pc, #60]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ce0:	f043 0320 	orr.w	r3, r3, #32
 8012ce4:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8012ce6:	bf00      	nop
 8012ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cea:	69db      	ldr	r3, [r3, #28]
 8012cec:	f003 0320 	and.w	r3, r3, #32
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	bf14      	ite	ne
 8012cf4:	2301      	movne	r3, #1
 8012cf6:	2300      	moveq	r3, #0
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1f4      	bne.n	8012ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012cfe:	4b07      	ldr	r3, [pc, #28]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d00:	2210      	movs	r2, #16
 8012d02:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8012d04:	7ffb      	ldrb	r3, [r7, #31]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d003      	beq.n	8012d12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012d0a:	4b04      	ldr	r3, [pc, #16]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d0c:	4a06      	ldr	r2, [pc, #24]	@ (8012d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012d0e:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8012d10:	e07e      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012d12:	4b02      	ldr	r3, [pc, #8]	@ (8012d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d14:	4a0a      	ldr	r2, [pc, #40]	@ (8012d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012d16:	601a      	str	r2, [r3, #0]
        break;
 8012d18:	e07a      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
 8012d1a:	bf00      	nop
 8012d1c:	4002b000 	.word	0x4002b000
 8012d20:	0002000a 	.word	0x0002000a
 8012d24:	ff010000 	.word	0xff010000
 8012d28:	00022301 	.word	0x00022301
 8012d2c:	00020009 	.word	0x00020009
 8012d30:	ffff00ef 	.word	0xffff00ef
 8012d34:	0802fd2c 	.word	0x0802fd2c
 8012d38:	0802fd48 	.word	0x0802fd48
 8012d3c:	0802fcb4 	.word	0x0802fcb4
 8012d40:	00012301 	.word	0x00012301
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d009      	beq.n	8012d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ce>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	7f1b      	ldrb	r3, [r3, #28]
 8012d52:	061a      	lsls	r2, r3, #24
 8012d54:	69bb      	ldr	r3, [r7, #24]
 8012d56:	4313      	orrs	r3, r2
 8012d58:	4a2f      	ldr	r2, [pc, #188]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d5e:	61d3      	str	r3, [r2, #28]
 8012d60:	e002      	b.n	8012d68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012d62:	4a2d      	ldr	r2, [pc, #180]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	7fdb      	ldrb	r3, [r3, #31]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d005      	beq.n	8012d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012d70:	4929      	ldr	r1, [pc, #164]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d72:	697a      	ldr	r2, [r7, #20]
 8012d74:	4b29      	ldr	r3, [pc, #164]	@ (8012e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x388>)
 8012d76:	4313      	orrs	r3, r2
 8012d78:	624b      	str	r3, [r1, #36]	@ 0x24
 8012d7a:	e002      	b.n	8012d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ee>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012d7c:	4a26      	ldr	r2, [pc, #152]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	691a      	ldr	r2, [r3, #16]
 8012d86:	4b24      	ldr	r3, [pc, #144]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d88:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012d8a:	4b23      	ldr	r3, [pc, #140]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d8c:	4a24      	ldr	r2, [pc, #144]	@ (8012e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012d8e:	601a      	str	r2, [r3, #0]
        break;
 8012d90:	e03e      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	7f1b      	ldrb	r3, [r3, #28]
 8012d96:	061a      	lsls	r2, r3, #24
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012da2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	7fdb      	ldrb	r3, [r3, #31]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d005      	beq.n	8012db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012dac:	491a      	ldr	r1, [pc, #104]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012dae:	697a      	ldr	r2, [r7, #20]
 8012db0:	4b1a      	ldr	r3, [pc, #104]	@ (8012e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x388>)
 8012db2:	4313      	orrs	r3, r2
 8012db4:	624b      	str	r3, [r1, #36]	@ 0x24
 8012db6:	e002      	b.n	8012dbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012db8:	4a17      	ldr	r2, [pc, #92]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	691a      	ldr	r2, [r3, #16]
 8012dc2:	4b15      	ldr	r3, [pc, #84]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012dc4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012dc6:	4b14      	ldr	r3, [pc, #80]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012dc8:	4a15      	ldr	r2, [pc, #84]	@ (8012e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012dca:	601a      	str	r2, [r3, #0]
        break;
 8012dcc:	e020      	b.n	8012e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d005      	beq.n	8012de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x350>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012dd8:	490f      	ldr	r1, [pc, #60]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012dda:	69ba      	ldr	r2, [r7, #24]
 8012ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8012e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x388>)
 8012dde:	4313      	orrs	r3, r2
 8012de0:	61cb      	str	r3, [r1, #28]
 8012de2:	e002      	b.n	8012dea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x356>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012de4:	4a0c      	ldr	r2, [pc, #48]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	7f5a      	ldrb	r2, [r3, #29]
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	7f9b      	ldrb	r3, [r3, #30]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d007      	beq.n	8012e06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x372>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	691a      	ldr	r2, [r3, #16]
 8012dfa:	4b07      	ldr	r3, [pc, #28]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012dfc:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012dfe:	4b06      	ldr	r3, [pc, #24]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e00:	4a08      	ldr	r2, [pc, #32]	@ (8012e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8012e02:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8012e04:	e003      	b.n	8012e0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012e06:	4b04      	ldr	r3, [pc, #16]	@ (8012e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e08:	f242 3201 	movw	r2, #8961	@ 0x2301
 8012e0c:	601a      	str	r2, [r3, #0]
        break;
 8012e0e:	bf00      	nop
    }
}
 8012e10:	bf00      	nop
 8012e12:	3720      	adds	r7, #32
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	4002b000 	.word	0x4002b000
 8012e1c:	ff010000 	.word	0xff010000
 8012e20:	00022301 	.word	0x00022301
 8012e24:	00012301 	.word	0x00012301

08012e28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012e28:	b590      	push	{r4, r7, lr}
 8012e2a:	b085      	sub	sp, #20
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	7f9b      	ldrb	r3, [r3, #30]
 8012e36:	4619      	mov	r1, r3
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ff fde1 	bl	8012a00 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012e3e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012e40:	4a3f      	ldr	r2, [pc, #252]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	8adb      	ldrh	r3, [r3, #22]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	8a9b      	ldrh	r3, [r3, #20]
 8012e50:	041b      	lsls	r3, r3, #16
 8012e52:	431a      	orrs	r2, r3
 8012e54:	4b3a      	ldr	r3, [pc, #232]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012e56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	691a      	ldr	r2, [r3, #16]
 8012e5c:	4b38      	ldr	r3, [pc, #224]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	8b5b      	ldrh	r3, [r3, #26]
 8012e64:	461a      	mov	r2, r3
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	8a9b      	ldrh	r3, [r3, #20]
 8012e6a:	1ad2      	subs	r2, r2, r3
 8012e6c:	4b34      	ldr	r3, [pc, #208]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	2b08      	cmp	r3, #8
 8012e76:	d139      	bne.n	8012eec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc4>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	8b5b      	ldrh	r3, [r3, #26]
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	8a9b      	ldrh	r3, [r3, #20]
 8012e82:	1ad2      	subs	r2, r2, r3
 8012e84:	4b2e      	ldr	r3, [pc, #184]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012e86:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	8b5b      	ldrh	r3, [r3, #26]
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	8a9b      	ldrh	r3, [r3, #20]
 8012e92:	1ad2      	subs	r2, r2, r3
 8012e94:	4b2a      	ldr	r3, [pc, #168]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012e96:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	7fdb      	ldrb	r3, [r3, #31]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d005      	beq.n	8012eac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012ea0:	4927      	ldr	r1, [pc, #156]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ea2:	68fa      	ldr	r2, [r7, #12]
 8012ea4:	4b27      	ldr	r3, [pc, #156]	@ (8012f44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	624b      	str	r3, [r1, #36]	@ 0x24
 8012eaa:	e002      	b.n	8012eb2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012eac:	4a24      	ldr	r2, [pc, #144]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	7f1b      	ldrb	r3, [r3, #28]
 8012eb6:	061a      	lsls	r2, r3, #24
 8012eb8:	4921      	ldr	r1, [pc, #132]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012eba:	4b23      	ldr	r3, [pc, #140]	@ (8012f48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8012ebc:	4313      	orrs	r3, r2
 8012ebe:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	330c      	adds	r3, #12
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fa f9f0 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ece:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012ed2:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	691a      	ldr	r2, [r3, #16]
 8012ed8:	4b19      	ldr	r3, [pc, #100]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012eda:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	691a      	ldr	r2, [r3, #16]
 8012ee0:	4b17      	ldr	r3, [pc, #92]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ee2:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8012ee4:	4b16      	ldr	r3, [pc, #88]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ee6:	4a19      	ldr	r2, [pc, #100]	@ (8012f4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 8012ee8:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 8012eea:	e024      	b.n	8012f36 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012eec:	4a14      	ldr	r2, [pc, #80]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8012ef2:	4b13      	ldr	r3, [pc, #76]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	7f9b      	ldrb	r3, [r3, #30]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d109      	bne.n	8012f14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	330c      	adds	r3, #12
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fa f9d0 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	6393      	str	r3, [r2, #56]	@ 0x38
 8012f12:	e00d      	b.n	8012f30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	7f1b      	ldrb	r3, [r3, #28]
 8012f18:	061c      	lsls	r4, r3, #24
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	330c      	adds	r3, #12
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fa f9c3 	bl	800d2aa <_ZNK8touchgfx9colortypecvmEv>
 8012f24:	4603      	mov	r3, r0
 8012f26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012f2a:	4a05      	ldr	r2, [pc, #20]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f2c:	4323      	orrs	r3, r4
 8012f2e:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8012f30:	4b03      	ldr	r3, [pc, #12]	@ (8012f40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f32:	4a07      	ldr	r2, [pc, #28]	@ (8012f50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 8012f34:	601a      	str	r2, [r3, #0]
}
 8012f36:	bf00      	nop
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd90      	pop	{r4, r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	4002b000 	.word	0x4002b000
 8012f44:	ff010000 	.word	0xff010000
 8012f48:	00010009 	.word	0x00010009
 8012f4c:	00022301 	.word	0x00022301
 8012f50:	00032301 	.word	0x00032301

08012f54 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 8012f54:	b480      	push	{r7}
 8012f56:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012f58:	bf00      	nop
 8012f5a:	4b09      	ldr	r3, [pc, #36]	@ (8012f80 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 0301 	and.w	r3, r3, #1
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	bf14      	ite	ne
 8012f66:	2301      	movne	r3, #1
 8012f68:	2300      	moveq	r3, #0
 8012f6a:	b2db      	uxtb	r3, r3
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1f4      	bne.n	8012f5a <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012f70:	4b03      	ldr	r3, [pc, #12]	@ (8012f80 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8012f72:	2223      	movs	r2, #35	@ 0x23
 8012f74:	609a      	str	r2, [r3, #8]
}
 8012f76:	bf00      	nop
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr
 8012f80:	4002b000 	.word	0x4002b000

08012f84 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8012f8e:	4b09      	ldr	r3, [pc, #36]	@ (8012fb4 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8012f90:	695b      	ldr	r3, [r3, #20]
 8012f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	bf14      	ite	ne
 8012f9a:	2301      	movne	r3, #1
 8012f9c:	2300      	moveq	r3, #0
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d003      	beq.n	8012fac <_ZN8touchgfx5paint9flushLineEPmi+0x28>
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
 8012fa4:	6839      	ldr	r1, [r7, #0]
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f7ff fb5a 	bl	8012660 <SCB_CleanDCache_by_Addr>
    }
}
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	e000ed00 	.word	0xe000ed00

08012fb8 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This function will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint32_t* const ptr, const int16_t count, const uint32_t painterColor, const uint8_t alpha)
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b085      	sub	sp, #20
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	607a      	str	r2, [r7, #4]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	817b      	strh	r3, [r7, #10]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	727b      	strb	r3, [r7, #9]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012fcc:	bf00      	nop
 8012fce:	4b22      	ldr	r3, [pc, #136]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f003 0301 	and.w	r3, r3, #1
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	bf14      	ite	ne
 8012fda:	2301      	movne	r3, #1
 8012fdc:	2300      	moveq	r3, #0
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d1f4      	bne.n	8012fce <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0x16>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8012fe6:	2223      	movs	r2, #35	@ 0x23
 8012fe8:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration (set output image color format) */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_ARGB8888);
 8012fea:	4b1b      	ldr	r3, [pc, #108]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size (pixels per line (PL)) */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012ff0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012ff4:	041b      	lsls	r3, r3, #16
 8012ff6:	f043 0201 	orr.w	r2, r3, #1
 8012ffa:	4b17      	ldr	r3, [pc, #92]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8012ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012ffe:	4a16      	ldr	r2, [pc, #88]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 8013004:	7a7b      	ldrb	r3, [r7, #9]
 8013006:	2bff      	cmp	r3, #255	@ 0xff
 8013008:	d017      	beq.n	801303a <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0x82>
    {
        /* Write DMA2D BGPFCCR (background control) register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801300a:	4b13      	ldr	r3, [pc, #76]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 801300c:	2200      	movs	r2, #0
 801300e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR (foreground control) register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8013010:	7a7b      	ldrb	r3, [r7, #9]
 8013012:	061a      	lsls	r2, r3, #24
 8013014:	4910      	ldr	r1, [pc, #64]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013016:	4b11      	ldr	r3, [pc, #68]	@ (801305c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa4>)
 8013018:	4313      	orrs	r3, r2
 801301a:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, painterColor & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801301c:	4a0e      	ldr	r2, [pc, #56]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013024:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8013026:	4a0c      	ldr	r2, [pc, #48]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 801302c:	4a0a      	ldr	r2, [pc, #40]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8013032:	4b09      	ldr	r3, [pc, #36]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013034:	4a0a      	ldr	r2, [pc, #40]	@ (8013060 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa8>)
 8013036:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, painterColor);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8013038:	e008      	b.n	801304c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0x94>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801303a:	4b07      	ldr	r3, [pc, #28]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 801303c:	2200      	movs	r2, #0
 801303e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, painterColor);
 8013040:	4a05      	ldr	r2, [pc, #20]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8013046:	4b04      	ldr	r3, [pc, #16]	@ (8013058 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013048:	4a06      	ldr	r2, [pc, #24]	@ (8013064 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xac>)
 801304a:	601a      	str	r2, [r3, #0]
}
 801304c:	bf00      	nop
 801304e:	3714      	adds	r7, #20
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr
 8013058:	4002b000 	.word	0x4002b000
 801305c:	00010009 	.word	0x00010009
 8013060:	00020001 	.word	0x00020001
 8013064:	00030001 	.word	0x00030001

08013068 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>:
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
    }
}

void lineFromRGB565(uint8_t* const ptr, const uint16_t* const data, const int16_t length, const uint8_t alpha)
{
 8013068:	b480      	push	{r7}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	4611      	mov	r1, r2
 8013074:	461a      	mov	r2, r3
 8013076:	460b      	mov	r3, r1
 8013078:	80fb      	strh	r3, [r7, #6]
 801307a:	4613      	mov	r3, r2
 801307c:	717b      	strb	r3, [r7, #5]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801307e:	bf00      	nop
 8013080:	4b1e      	ldr	r3, [pc, #120]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f003 0301 	and.w	r3, r3, #1
 8013088:	2b00      	cmp	r3, #0
 801308a:	bf14      	ite	ne
 801308c:	2301      	movne	r3, #1
 801308e:	2300      	moveq	r3, #0
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d1f4      	bne.n	8013080 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x18>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8013096:	4b19      	ldr	r3, [pc, #100]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013098:	2223      	movs	r2, #35	@ 0x23
 801309a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_ARGB8888);
 801309c:	4b17      	ldr	r3, [pc, #92]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 801309e:	2200      	movs	r2, #0
 80130a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (length << DMA2D_NLR_PL_Pos)));
 80130a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130a6:	041b      	lsls	r3, r3, #16
 80130a8:	f043 0201 	orr.w	r2, r3, #1
 80130ac:	4b13      	ldr	r3, [pc, #76]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80130b0:	4a12      	ldr	r2, [pc, #72]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80130b6:	4a11      	ldr	r2, [pc, #68]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 80130bc:	797b      	ldrb	r3, [r7, #5]
 80130be:	2bff      	cmp	r3, #255	@ 0xff
 80130c0:	d00f      	beq.n	80130e2 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x7a>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80130c2:	797b      	ldrb	r3, [r7, #5]
 80130c4:	061b      	lsls	r3, r3, #24
 80130c6:	4a0d      	ldr	r2, [pc, #52]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130c8:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80130cc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80130ce:	4b0b      	ldr	r3, [pc, #44]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130d0:	2200      	movs	r2, #0
 80130d2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80130d4:	4a09      	ldr	r2, [pc, #36]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80130da:	4b08      	ldr	r3, [pc, #32]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130dc:	4a08      	ldr	r2, [pc, #32]	@ (8013100 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x98>)
 80130de:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
    }
}
 80130e0:	e005      	b.n	80130ee <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x86>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80130e2:	4b06      	ldr	r3, [pc, #24]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130e4:	2202      	movs	r2, #2
 80130e6:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80130e8:	4b04      	ldr	r3, [pc, #16]	@ (80130fc <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80130ea:	4a05      	ldr	r2, [pc, #20]	@ (8013100 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x98>)
 80130ec:	601a      	str	r2, [r3, #0]
}
 80130ee:	bf00      	nop
 80130f0:	3714      	adds	r7, #20
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	4002b000 	.word	0x4002b000
 8013100:	00020001 	.word	0x00020001

08013104 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const int16_t length, const uint8_t alpha)
{
 8013104:	b480      	push	{r7}
 8013106:	b085      	sub	sp, #20
 8013108:	af00      	add	r7, sp, #0
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	60b9      	str	r1, [r7, #8]
 801310e:	4611      	mov	r1, r2
 8013110:	461a      	mov	r2, r3
 8013112:	460b      	mov	r3, r1
 8013114:	80fb      	strh	r3, [r7, #6]
 8013116:	4613      	mov	r3, r2
 8013118:	717b      	strb	r3, [r7, #5]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801311a:	bf00      	nop
 801311c:	4b1c      	ldr	r3, [pc, #112]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f003 0301 	and.w	r3, r3, #1
 8013124:	2b00      	cmp	r3, #0
 8013126:	bf14      	ite	ne
 8013128:	2301      	movne	r3, #1
 801312a:	2300      	moveq	r3, #0
 801312c:	b2db      	uxtb	r3, r3
 801312e:	2b00      	cmp	r3, #0
 8013130:	d1f4      	bne.n	801311c <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x18>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8013132:	4b17      	ldr	r3, [pc, #92]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013134:	2223      	movs	r2, #35	@ 0x23
 8013136:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_ARGB8888);
 8013138:	4b15      	ldr	r3, [pc, #84]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801313a:	2200      	movs	r2, #0
 801313c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (length << DMA2D_NLR_PL_Pos)));
 801313e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013142:	041b      	lsls	r3, r3, #16
 8013144:	f043 0201 	orr.w	r2, r3, #1
 8013148:	4b11      	ldr	r3, [pc, #68]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801314a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801314c:	4a10      	ldr	r2, [pc, #64]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8013152:	4a0f      	ldr	r2, [pc, #60]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8013158:	797b      	ldrb	r3, [r7, #5]
 801315a:	2bff      	cmp	r3, #255	@ 0xff
 801315c:	d006      	beq.n	801316c <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x68>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 801315e:	797b      	ldrb	r3, [r7, #5]
 8013160:	061b      	lsls	r3, r3, #24
 8013162:	4a0b      	ldr	r2, [pc, #44]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013168:	61d3      	str	r3, [r2, #28]
 801316a:	e002      	b.n	8013172 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x6e>
    }
    else
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801316c:	4b08      	ldr	r3, [pc, #32]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801316e:	2200      	movs	r2, #0
 8013170:	61da      	str	r2, [r3, #28]
    }

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013172:	4b07      	ldr	r3, [pc, #28]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013174:	2200      	movs	r2, #0
 8013176:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8013178:	4a05      	ldr	r2, [pc, #20]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6153      	str	r3, [r2, #20]

    /* Start DMA2D */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 801317e:	4b04      	ldr	r3, [pc, #16]	@ (8013190 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013180:	4a04      	ldr	r2, [pc, #16]	@ (8013194 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x90>)
 8013182:	601a      	str	r2, [r3, #0]
}
 8013184:	bf00      	nop
 8013186:	3714      	adds	r7, #20
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr
 8013190:	4002b000 	.word	0x4002b000
 8013194:	00020001 	.word	0x00020001

08013198 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80131a0:	4a04      	ldr	r2, [pc, #16]	@ (80131b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6013      	str	r3, [r2, #0]
    }
 80131a6:	bf00      	nop
 80131a8:	370c      	adds	r7, #12
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop
 80131b4:	20012328 	.word	0x20012328

080131b8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80131b8:	b480      	push	{r7}
 80131ba:	b085      	sub	sp, #20
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
 80131c4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80131c6:	4a0b      	ldr	r2, [pc, #44]	@ (80131f4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	68ba      	ldr	r2, [r7, #8]
 80131d0:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	683a      	ldr	r2, [r7, #0]
 80131dc:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	69ba      	ldr	r2, [r7, #24]
 80131e2:	611a      	str	r2, [r3, #16]
    {
    }
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	4618      	mov	r0, r3
 80131e8:	3714      	adds	r7, #20
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr
 80131f2:	bf00      	nop
 80131f4:	08030e54 	.word	0x08030e54

080131f8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
    {
 8013200:	4a04      	ldr	r2, [pc, #16]	@ (8013214 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	601a      	str	r2, [r3, #0]
    }
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4618      	mov	r0, r3
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr
 8013214:	08030e54 	.word	0x08030e54

08013218 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
    }
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7ff ffe9 	bl	80131f8 <_ZN8touchgfx7MVPHeapD1Ev>
 8013226:	2114      	movs	r1, #20
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f019 fe1c 	bl	802ce66 <_ZdlPvj>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
    {
 8013240:	4a04      	ldr	r2, [pc, #16]	@ (8013254 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	601a      	str	r2, [r3, #0]
    }
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	4618      	mov	r0, r3
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	080321a0 	.word	0x080321a0

08013258 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
    }
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f7ff ffe9 	bl	8013238 <_ZN8touchgfx3LCDD1Ev>
 8013266:	210c      	movs	r1, #12
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f019 fdfc 	bl	802ce66 <_ZdlPvj>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4618      	mov	r0, r3
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8013278:	b480      	push	{r7}
 801327a:	b083      	sub	sp, #12
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2200      	movs	r2, #0
 8013284:	801a      	strh	r2, [r3, #0]
              startY(0),
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2200      	movs	r2, #0
 801328a:	805a      	strh	r2, [r3, #2]
              downX(0),
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2200      	movs	r2, #0
 8013290:	809a      	strh	r2, [r3, #4]
              downY(0),
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2200      	movs	r2, #0
 8013296:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	739a      	strb	r2, [r3, #14]
        {
        }
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80132be:	b580      	push	{r7, lr}
 80132c0:	b082      	sub	sp, #8
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7ff ffd5 	bl	8013278 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2200      	movs	r2, #0
 80132d2:	611a      	str	r2, [r3, #16]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2200      	movs	r2, #0
 80132d8:	829a      	strh	r2, [r3, #20]
    {
    }
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4618      	mov	r0, r3
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
 80132f0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80132f2:	4a55      	ldr	r2, [pc, #340]	@ (8013448 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	683a      	ldr	r2, [r7, #0]
 8013308:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2200      	movs	r2, #0
 801330e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2200      	movs	r2, #0
 8013314:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	2200      	movs	r2, #0
 801331a:	619a      	str	r2, [r3, #24]
          gestures(),
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	331c      	adds	r3, #28
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff ffcc 	bl	80132be <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2200      	movs	r2, #0
 801332a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	2200      	movs	r2, #0
 8013338:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2200      	movs	r2, #0
 801333e:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2200      	movs	r2, #0
 8013344:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2201      	movs	r2, #1
 8013352:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2200      	movs	r2, #0
 801335a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	2200      	movs	r2, #0
 801336a:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	3350      	adds	r3, #80	@ 0x50
 8013370:	4618      	mov	r0, r3
 8013372:	f7f7 f907 	bl	800a584 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2200      	movs	r2, #0
 801337a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2200      	movs	r2, #0
 8013382:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2200      	movs	r2, #0
 8013388:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2200      	movs	r2, #0
 801338e:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	2201      	movs	r2, #1
 8013394:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2200      	movs	r2, #0
 801339c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2200      	movs	r2, #0
 80133a4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2201      	movs	r2, #1
 80133ac:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2200      	movs	r2, #0
 80133b4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2200      	movs	r2, #0
 80133bc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2200      	movs	r2, #0
 80133c4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	2200      	movs	r2, #0
 80133cc:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2200      	movs	r2, #0
 80133d4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2200      	movs	r2, #0
 80133dc:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2200      	movs	r2, #0
 80133e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2200      	movs	r2, #0
 80133ea:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2201      	movs	r2, #1
 80133f2:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2201      	movs	r2, #1
 80133fa:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 80133fe:	4a13      	ldr	r2, [pc, #76]	@ (801344c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8013404:	4a12      	ldr	r2, [pc, #72]	@ (8013450 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013406:	8b3b      	ldrh	r3, [r7, #24]
 8013408:	8013      	strh	r3, [r2, #0]
 801340a:	4b11      	ldr	r3, [pc, #68]	@ (8013450 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801340c:	881a      	ldrh	r2, [r3, #0]
 801340e:	4b11      	ldr	r3, [pc, #68]	@ (8013454 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8013410:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8013412:	4a11      	ldr	r2, [pc, #68]	@ (8013458 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013414:	8bbb      	ldrh	r3, [r7, #28]
 8013416:	8013      	strh	r3, [r2, #0]
 8013418:	4b0f      	ldr	r3, [pc, #60]	@ (8013458 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801341a:	881a      	ldrh	r2, [r3, #0]
 801341c:	4b0f      	ldr	r3, [pc, #60]	@ (801345c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801341e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8013420:	4b0f      	ldr	r3, [pc, #60]	@ (8013460 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8013422:	2200      	movs	r2, #0
 8013424:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013426:	8b3a      	ldrh	r2, [r7, #24]
 8013428:	8bbb      	ldrh	r3, [r7, #28]
 801342a:	429a      	cmp	r2, r3
 801342c:	bf34      	ite	cc
 801342e:	2301      	movcc	r3, #1
 8013430:	2300      	movcs	r3, #0
 8013432:	b2db      	uxtb	r3, r3
 8013434:	461a      	mov	r2, r3
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	4618      	mov	r0, r3
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	080314d4 	.word	0x080314d4
 801344c:	200122c4 	.word	0x200122c4
 8013450:	200122b8 	.word	0x200122b8
 8013454:	200122be 	.word	0x200122be
 8013458:	200122ba 	.word	0x200122ba
 801345c:	200122c0 	.word	0x200122c0
 8013460:	200122bc 	.word	0x200122bc

08013464 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	4618      	mov	r0, r3
 8013472:	f7f7 fe21 	bl	800b0b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8013476:	bf00      	nop
 8013478:	3708      	adds	r7, #8
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
	...

08013480 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013480:	b580      	push	{r7, lr}
 8013482:	b086      	sub	sp, #24
 8013484:	af02      	add	r7, sp, #8
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801348e:	68f8      	ldr	r0, [r7, #12]
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	68b9      	ldr	r1, [r7, #8]
 801349a:	f7ff fe8d 	bl	80131b8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801349e:	4a04      	ldr	r2, [pc, #16]	@ (80134b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	601a      	str	r2, [r3, #0]
    {

    }
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	4618      	mov	r0, r3
 80134a8:	3710      	adds	r7, #16
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	08030e40 	.word	0x08030e40

080134b4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	4a05      	ldr	r2, [pc, #20]	@ (80134d4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	601a      	str	r2, [r3, #0]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ff fe97 	bl	80131f8 <_ZN8touchgfx7MVPHeapD1Ev>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	4618      	mov	r0, r3
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	08030e40 	.word	0x08030e40

080134d8 <_ZN16FrontendHeapBaseD0Ev>:
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f7ff ffe7 	bl	80134b4 <_ZN16FrontendHeapBaseD1Ev>
 80134e6:	2114      	movs	r1, #20
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f019 fcbc 	bl	802ce66 <_ZdlPvj>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	4618      	mov	r0, r3
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	4a05      	ldr	r2, [pc, #20]	@ (8013518 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	601a      	str	r2, [r3, #0]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	4618      	mov	r0, r3
 801350a:	f000 fdce 	bl	80140aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4618      	mov	r0, r3
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}
 8013518:	08030e0c 	.word	0x08030e0c

0801351c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff ffe7 	bl	80134f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801352a:	2118      	movs	r1, #24
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f019 fc9a 	bl	802ce66 <_ZdlPvj>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	3708      	adds	r7, #8
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	4a05      	ldr	r2, [pc, #20]	@ (801355c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	601a      	str	r2, [r3, #0]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4618      	mov	r0, r3
 801354e:	f000 fdac 	bl	80140aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4618      	mov	r0, r3
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	08030dd8 	.word	0x08030dd8

08013560 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f7ff ffe7 	bl	801353c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801356e:	f643 01b0 	movw	r1, #14512	@ 0x38b0
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f019 fc77 	bl	802ce66 <_ZdlPvj>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4618      	mov	r0, r3
 801357c:	3708      	adds	r7, #8
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
	...

08013584 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	4a05      	ldr	r2, [pc, #20]	@ (80135a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4618      	mov	r0, r3
 8013596:	f000 fd88 	bl	80140aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	4618      	mov	r0, r3
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	08030da4 	.word	0x08030da4

080135a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b082      	sub	sp, #8
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff ffe7 	bl	8013584 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80135b6:	2148      	movs	r1, #72	@ 0x48
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f019 fc54 	bl	802ce66 <_ZdlPvj>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4618      	mov	r0, r3
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	4a11      	ldr	r2, [pc, #68]	@ (8013618 <_ZN12FrontendHeapD1Ev+0x50>)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	601a      	str	r2, [r3, #0]
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	f643 1328 	movw	r3, #14632	@ 0x3928
 80135dc:	4413      	add	r3, r2
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fe f892 	bl	8011708 <_ZN19FrontendApplicationD1Ev>
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	f643 03dc 	movw	r3, #14556	@ 0x38dc
 80135ea:	4413      	add	r3, r2
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff ffc9 	bl	8013584 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	332c      	adds	r3, #44	@ 0x2c
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff ffa0 	bl	801353c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	3314      	adds	r3, #20
 8013600:	4618      	mov	r0, r3
 8013602:	f7ff ff79 	bl	80134f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	f7ff ff53 	bl	80134b4 <_ZN16FrontendHeapBaseD1Ev>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	08030d90 	.word	0x08030d90

0801361c <_ZN12FrontendHeapD0Ev>:
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f7ff ffcf 	bl	80135c8 <_ZN12FrontendHeapD1Ev>
 801362a:	f643 2184 	movw	r1, #14980	@ 0x3a84
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f019 fc19 	bl	802ce66 <_ZdlPvj>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4618      	mov	r0, r3
 8013638:	3708      	adds	r7, #8
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
	...

08013640 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013640:	b580      	push	{r7, lr}
 8013642:	af00      	add	r7, sp, #0
 8013644:	4801      	ldr	r0, [pc, #4]	@ (801364c <__tcf_0+0xc>)
 8013646:	f7ff ffbf 	bl	80135c8 <_ZN12FrontendHeapD1Ev>
 801364a:	bd80      	pop	{r7, pc}
 801364c:	2000d97c 	.word	0x2000d97c

08013650 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013650:	b580      	push	{r7, lr}
 8013652:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013654:	4b11      	ldr	r3, [pc, #68]	@ (801369c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f3bf 8f5b 	dmb	ish
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	bf0c      	ite	eq
 8013664:	2301      	moveq	r3, #1
 8013666:	2300      	movne	r3, #0
 8013668:	b2db      	uxtb	r3, r3
 801366a:	2b00      	cmp	r3, #0
 801366c:	d013      	beq.n	8013696 <_ZN12FrontendHeap11getInstanceEv+0x46>
 801366e:	480b      	ldr	r0, [pc, #44]	@ (801369c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013670:	f019 fbfb 	bl	802ce6a <__cxa_guard_acquire>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	bf14      	ite	ne
 801367a:	2301      	movne	r3, #1
 801367c:	2300      	moveq	r3, #0
 801367e:	b2db      	uxtb	r3, r3
 8013680:	2b00      	cmp	r3, #0
 8013682:	d008      	beq.n	8013696 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8013684:	4806      	ldr	r0, [pc, #24]	@ (80136a0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013686:	f000 f845 	bl	8013714 <_ZN12FrontendHeapC1Ev>
 801368a:	4806      	ldr	r0, [pc, #24]	@ (80136a4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801368c:	f01a f96a 	bl	802d964 <atexit>
 8013690:	4802      	ldr	r0, [pc, #8]	@ (801369c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013692:	f019 fbf6 	bl	802ce82 <__cxa_guard_release>
        return instance;
 8013696:	4b02      	ldr	r3, [pc, #8]	@ (80136a0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8013698:	4618      	mov	r0, r3
 801369a:	bd80      	pop	{r7, pc}
 801369c:	20011400 	.word	0x20011400
 80136a0:	2000d97c 	.word	0x2000d97c
 80136a4:	08013641 	.word	0x08013641

080136a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 fcfa 	bl	80140ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 80136b8:	4a03      	ldr	r2, [pc, #12]	@ (80136c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	601a      	str	r2, [r3, #0]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	4618      	mov	r0, r3
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	08030e0c 	.word	0x08030e0c

080136cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f000 fce8 	bl	80140ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 80136dc:	4a03      	ldr	r2, [pc, #12]	@ (80136ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	601a      	str	r2, [r3, #0]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	08030dd8 	.word	0x08030dd8

080136f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 fcd6 	bl	80140ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013700:	4a03      	ldr	r2, [pc, #12]	@ (8013710 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	601a      	str	r2, [r3, #0]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	4618      	mov	r0, r3
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	08030da4 	.word	0x08030da4

08013714 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013714:	b5b0      	push	{r4, r5, r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af02      	add	r7, sp, #8
 801371a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f103 0414 	add.w	r4, r3, #20
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f643 02dc 	movw	r2, #14556	@ 0x38dc
 8013730:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013732:	6879      	ldr	r1, [r7, #4]
 8013734:	f643 1328 	movw	r3, #14632	@ 0x3928
 8013738:	440b      	add	r3, r1
                     app(model, *this)
 801373a:	9300      	str	r3, [sp, #0]
 801373c:	4613      	mov	r3, r2
 801373e:	462a      	mov	r2, r5
 8013740:	4621      	mov	r1, r4
 8013742:	f7ff fe9d 	bl	8013480 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013746:	4a1a      	ldr	r2, [pc, #104]	@ (80137b0 <_ZN12FrontendHeapC1Ev+0x9c>)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	3314      	adds	r3, #20
 8013750:	4618      	mov	r0, r3
 8013752:	f7ff ffa9 	bl	80136a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	332c      	adds	r3, #44	@ 0x2c
 801375a:	4618      	mov	r0, r3
 801375c:	f7ff ffb6 	bl	80136cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	f643 03dc 	movw	r3, #14556	@ 0x38dc
 8013766:	4413      	add	r3, r2
 8013768:	4618      	mov	r0, r3
 801376a:	f7ff ffc1 	bl	80136f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	f643 1324 	movw	r3, #14628	@ 0x3924
 8013774:	4413      	add	r3, r2
 8013776:	4618      	mov	r0, r3
 8013778:	f7fe f812 	bl	80117a0 <_ZN5ModelC1Ev>
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	f643 1328 	movw	r3, #14632	@ 0x3928
 8013782:	4413      	add	r3, r2
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	f643 1124 	movw	r1, #14628	@ 0x3924
 801378a:	4411      	add	r1, r2
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	4618      	mov	r0, r3
 8013790:	f7fd fff0 	bl	8011774 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	f643 1328 	movw	r3, #14632	@ 0x3928
 801379c:	4413      	add	r3, r2
 801379e:	4619      	mov	r1, r3
 80137a0:	f7ff fe60 	bl	8013464 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4618      	mov	r0, r3
 80137a8:	3708      	adds	r7, #8
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bdb0      	pop	{r4, r5, r7, pc}
 80137ae:	bf00      	nop
 80137b0:	08030d90 	.word	0x08030d90

080137b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af02      	add	r7, sp, #8
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	8bbb      	ldrh	r3, [r7, #28]
 80137c6:	9301      	str	r3, [sp, #4]
 80137c8:	8b3b      	ldrh	r3, [r7, #24]
 80137ca:	9300      	str	r3, [sp, #0]
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	68b9      	ldr	r1, [r7, #8]
 80137d2:	f7ff fd87 	bl	80132e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80137d6:	4a04      	ldr	r2, [pc, #16]	@ (80137e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	601a      	str	r2, [r3, #0]
    }
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	4618      	mov	r0, r3
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	08030e64 	.word	0x08030e64

080137ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b086      	sub	sp, #24
 80137f0:	af02      	add	r7, sp, #8
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	8bbb      	ldrh	r3, [r7, #28]
 80137fe:	9301      	str	r3, [sp, #4]
 8013800:	8b3b      	ldrh	r3, [r7, #24]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	68b9      	ldr	r1, [r7, #8]
 801380a:	f7ff ffd3 	bl	80137b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801380e:	4a04      	ldr	r2, [pc, #16]	@ (8013820 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	601a      	str	r2, [r3, #0]
    }
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	4618      	mov	r0, r3
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	08030c34 	.word	0x08030c34

08013824 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013824:	b480      	push	{r7}
 8013826:	b083      	sub	sp, #12
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	4a04      	ldr	r2, [pc, #16]	@ (8013840 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	601a      	str	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr
 8013840:	08030c1c 	.word	0x08030c1c

08013844 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4618      	mov	r0, r3
 8013850:	f7ff ffe8 	bl	8013824 <_ZN8touchgfx15TouchControllerC1Ev>
 8013854:	4a03      	ldr	r2, [pc, #12]	@ (8013864 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	08030c04 	.word	0x08030c04

08013868 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8013868:	b590      	push	{r4, r7, lr}
 801386a:	b085      	sub	sp, #20
 801386c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801386e:	f7fd fd5f 	bl	8011330 <_ZN14BitmapDatabase11getInstanceEv>
 8013872:	4604      	mov	r4, r0
 8013874:	f7fd fd66 	bl	8011344 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013878:	4603      	mov	r3, r0
 801387a:	4619      	mov	r1, r3
 801387c:	2300      	movs	r3, #0
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	2300      	movs	r3, #0
 8013882:	2200      	movs	r2, #0
 8013884:	4620      	mov	r0, r4
 8013886:	f00a fe51 	bl	801e52c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801388a:	4809      	ldr	r0, [pc, #36]	@ (80138b0 <touchgfx_init+0x48>)
 801388c:	f7ff fc84 	bl	8013198 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013890:	2000      	movs	r0, #0
 8013892:	f7fd fe9b 	bl	80115cc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8013896:	4807      	ldr	r0, [pc, #28]	@ (80138b4 <touchgfx_init+0x4c>)
 8013898:	f00a fcf4 	bl	801e284 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801389c:	f7ff fed8 	bl	8013650 <_ZN12FrontendHeap11getInstanceEv>
 80138a0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80138a2:	4805      	ldr	r0, [pc, #20]	@ (80138b8 <touchgfx_init+0x50>)
 80138a4:	f7fe fd52 	bl	801234c <_ZN11TouchGFXHAL10initializeEv>
}
 80138a8:	bf00      	nop
 80138aa:	370c      	adds	r7, #12
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd90      	pop	{r4, r7, pc}
 80138b0:	20012234 	.word	0x20012234
 80138b4:	20000014 	.word	0x20000014
 80138b8:	20012238 	.word	0x20012238

080138bc <touchgfx_components_init>:

void touchgfx_components_init()
{
 80138bc:	b480      	push	{r7}
 80138be:	af00      	add	r7, sp, #0
}
 80138c0:	bf00      	nop
 80138c2:	46bd      	mov	sp, r7
 80138c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c8:	4770      	bx	lr
	...

080138cc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80138d0:	4802      	ldr	r0, [pc, #8]	@ (80138dc <touchgfx_taskEntry+0x10>)
 80138d2:	f001 fd2a 	bl	801532a <_ZN8touchgfx3HAL9taskEntryEv>
}
 80138d6:	bf00      	nop
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	20012238 	.word	0x20012238

080138e0 <_Z41__static_initialization_and_destruction_0v>:
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 80138e6:	480c      	ldr	r0, [pc, #48]	@ (8013918 <_Z41__static_initialization_and_destruction_0v+0x38>)
 80138e8:	f7ff ffac 	bl	8013844 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80138ec:	480b      	ldr	r0, [pc, #44]	@ (801391c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80138ee:	f7fe ffbb 	bl	8012868 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 80138f2:	480b      	ldr	r0, [pc, #44]	@ (8013920 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80138f4:	f010 f92c 	bl	8023b50 <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80138f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80138fc:	9301      	str	r3, [sp, #4]
 80138fe:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	4b04      	ldr	r3, [pc, #16]	@ (8013918 <_Z41__static_initialization_and_destruction_0v+0x38>)
 8013906:	4a06      	ldr	r2, [pc, #24]	@ (8013920 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8013908:	4904      	ldr	r1, [pc, #16]	@ (801391c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 801390a:	4806      	ldr	r0, [pc, #24]	@ (8013924 <_Z41__static_initialization_and_destruction_0v+0x44>)
 801390c:	f7ff ff6e 	bl	80137ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8013910:	bf00      	nop
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	20011404 	.word	0x20011404
 801391c:	20011408 	.word	0x20011408
 8013920:	200121a8 	.word	0x200121a8
 8013924:	20012238 	.word	0x20012238

08013928 <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	4a05      	ldr	r2, [pc, #20]	@ (8013948 <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	601a      	str	r2, [r3, #0]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4618      	mov	r0, r3
 801393a:	f7ff fc7d 	bl	8013238 <_ZN8touchgfx3LCDD1Ev>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	0803262c 	.word	0x0803262c

0801394c <_ZN8touchgfx8LCD32bppD0Ev>:
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7ff ffe7 	bl	8013928 <_ZN8touchgfx8LCD32bppD1Ev>
 801395a:	218c      	movs	r1, #140	@ 0x8c
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f019 fa82 	bl	802ce66 <_ZdlPvj>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4618      	mov	r0, r3
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <_Z41__static_initialization_and_destruction_1v>:
 801396c:	b580      	push	{r7, lr}
 801396e:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8013970:	4808      	ldr	r0, [pc, #32]	@ (8013994 <_Z41__static_initialization_and_destruction_1v+0x28>)
 8013972:	f7fe fd7b 	bl	801246c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013976:	4808      	ldr	r0, [pc, #32]	@ (8013998 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8013978:	f7f6 fb02 	bl	8009f80 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 801397c:	4807      	ldr	r0, [pc, #28]	@ (801399c <_Z41__static_initialization_and_destruction_1v+0x30>)
 801397e:	f7ff ffd3 	bl	8013928 <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 8013982:	4807      	ldr	r0, [pc, #28]	@ (80139a0 <_Z41__static_initialization_and_destruction_1v+0x34>)
 8013984:	f7fe ff9a 	bl	80128bc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013988:	4806      	ldr	r0, [pc, #24]	@ (80139a4 <_Z41__static_initialization_and_destruction_1v+0x38>)
 801398a:	f7fe fad7 	bl	8011f3c <_ZN20STM32TouchControllerD1Ev>
}
 801398e:	bf00      	nop
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	20012238 	.word	0x20012238
 8013998:	20000014 	.word	0x20000014
 801399c:	200121a8 	.word	0x200121a8
 80139a0:	20011408 	.word	0x20011408
 80139a4:	20011404 	.word	0x20011404

080139a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80139b0:	2301      	movs	r3, #1
    }
 80139b2:	4618      	mov	r0, r3
 80139b4:	370c      	adds	r7, #12
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr

080139be <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80139be:	b480      	push	{r7}
 80139c0:	b083      	sub	sp, #12
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80139c6:	2340      	movs	r3, #64	@ 0x40
    }
 80139c8:	4618      	mov	r0, r3
 80139ca:	370c      	adds	r7, #12
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	460b      	mov	r3, r1
 80139de:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80139e0:	887b      	ldrh	r3, [r7, #2]
 80139e2:	019b      	lsls	r3, r3, #6
 80139e4:	3308      	adds	r3, #8
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	4413      	add	r3, r2
    }
 80139ea:	4618      	mov	r0, r3
 80139ec:	370c      	adds	r7, #12
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr

080139f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80139f6:	b480      	push	{r7}
 80139f8:	b083      	sub	sp, #12
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	460b      	mov	r3, r1
 8013a00:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013a02:	887b      	ldrh	r3, [r7, #2]
 8013a04:	019b      	lsls	r3, r3, #6
 8013a06:	3308      	adds	r3, #8
 8013a08:	687a      	ldr	r2, [r7, #4]
 8013a0a:	4413      	add	r3, r2
    }
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	370c      	adds	r7, #12
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr

08013a18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013a18:	b480      	push	{r7}
 8013a1a:	b083      	sub	sp, #12
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013a20:	2301      	movs	r3, #1
    }
 8013a22:	4618      	mov	r0, r3
 8013a24:	370c      	adds	r7, #12
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr

08013a2e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013a2e:	b480      	push	{r7}
 8013a30:	b083      	sub	sp, #12
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013a36:	f643 03a8 	movw	r3, #14504	@ 0x38a8
    }
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013a46:	b480      	push	{r7}
 8013a48:	b083      	sub	sp, #12
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
 8013a4e:	460b      	mov	r3, r1
 8013a50:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013a52:	887b      	ldrh	r3, [r7, #2]
 8013a54:	f643 02a8 	movw	r2, #14504	@ 0x38a8
 8013a58:	fb02 f303 	mul.w	r3, r2, r3
 8013a5c:	3308      	adds	r3, #8
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	4413      	add	r3, r2
    }
 8013a62:	4618      	mov	r0, r3
 8013a64:	370c      	adds	r7, #12
 8013a66:	46bd      	mov	sp, r7
 8013a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6c:	4770      	bx	lr

08013a6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013a6e:	b480      	push	{r7}
 8013a70:	b083      	sub	sp, #12
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
 8013a76:	460b      	mov	r3, r1
 8013a78:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013a7a:	887b      	ldrh	r3, [r7, #2]
 8013a7c:	f643 02a8 	movw	r2, #14504	@ 0x38a8
 8013a80:	fb02 f303 	mul.w	r3, r2, r3
 8013a84:	3308      	adds	r3, #8
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	4413      	add	r3, r2
    }
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	370c      	adds	r7, #12
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr

08013a96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013a96:	b480      	push	{r7}
 8013a98:	b083      	sub	sp, #12
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013a9e:	2301      	movs	r3, #1
    }
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	370c      	adds	r7, #12
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr

08013aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013aac:	b480      	push	{r7}
 8013aae:	b083      	sub	sp, #12
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013ab4:	2310      	movs	r3, #16
    }
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	370c      	adds	r7, #12
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr

08013ac2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013ac2:	b480      	push	{r7}
 8013ac4:	b083      	sub	sp, #12
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
 8013aca:	460b      	mov	r3, r1
 8013acc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013ace:	887b      	ldrh	r3, [r7, #2]
 8013ad0:	011b      	lsls	r3, r3, #4
 8013ad2:	3308      	adds	r3, #8
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	4413      	add	r3, r2
    }
 8013ad8:	4618      	mov	r0, r3
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	460b      	mov	r3, r1
 8013aee:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013af0:	887b      	ldrh	r3, [r7, #2]
 8013af2:	011b      	lsls	r3, r3, #4
 8013af4:	3308      	adds	r3, #8
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	4413      	add	r3, r2
    }
 8013afa:	4618      	mov	r0, r3
 8013afc:	370c      	adds	r7, #12
 8013afe:	46bd      	mov	sp, r7
 8013b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b04:	4770      	bx	lr

08013b06 <_GLOBAL__sub_I_touchgfx_init>:
 8013b06:	b580      	push	{r7, lr}
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	f7ff fee9 	bl	80138e0 <_Z41__static_initialization_and_destruction_0v>
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <_GLOBAL__sub_D_touchgfx_init>:
 8013b10:	b580      	push	{r7, lr}
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	f7ff ff2a 	bl	801396c <_Z41__static_initialization_and_destruction_1v>
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b082      	sub	sp, #8
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	3320      	adds	r3, #32
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	4798      	blx	r3
    }
 8013b2e:	bf00      	nop
 8013b30:	3708      	adds	r7, #8
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}

08013b36 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013b36:	b480      	push	{r7}
 8013b38:	b083      	sub	sp, #12
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013b44:	3301      	adds	r3, #1
 8013b46:	b2da      	uxtb	r2, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8013b4e:	bf00      	nop
 8013b50:	370c      	adds	r7, #12
 8013b52:	46bd      	mov	sp, r7
 8013b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b58:	4770      	bx	lr
	...

08013b5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	460b      	mov	r3, r1
 8013b66:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013b68:	78fb      	ldrb	r3, [r7, #3]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d002      	beq.n	8013b74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013b6e:	78fb      	ldrb	r3, [r7, #3]
 8013b70:	2b02      	cmp	r3, #2
 8013b72:	d105      	bne.n	8013b80 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	78fa      	ldrb	r2, [r7, #3]
 8013b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e027      	b.n	8013bd0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013b80:	78fb      	ldrb	r3, [r7, #3]
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d123      	bne.n	8013bce <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d014      	beq.n	8013bb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	339c      	adds	r3, #156	@ 0x9c
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	4798      	blx	r3
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d008      	beq.n	8013bb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8013bd8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	f083 0301 	eor.w	r3, r3, #1
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d001      	beq.n	8013bb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	e000      	b.n	8013bba <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d005      	beq.n	8013bca <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	78fa      	ldrb	r2, [r7, #3]
 8013bc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e002      	b.n	8013bd0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	e000      	b.n	8013bd0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013bce:	2300      	movs	r3, #0
    }
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3708      	adds	r7, #8
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}
 8013bd8:	200122c2 	.word	0x200122c2

08013bdc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8013bec:	bf00      	nop
 8013bee:	370c      	adds	r7, #12
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr

08013bf8 <__NVIC_EnableIRQ>:
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	4603      	mov	r3, r0
 8013c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	db0b      	blt.n	8013c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013c0a:	79fb      	ldrb	r3, [r7, #7]
 8013c0c:	f003 021f 	and.w	r2, r3, #31
 8013c10:	4907      	ldr	r1, [pc, #28]	@ (8013c30 <__NVIC_EnableIRQ+0x38>)
 8013c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c16:	095b      	lsrs	r3, r3, #5
 8013c18:	2001      	movs	r0, #1
 8013c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8013c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013c22:	bf00      	nop
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr
 8013c2e:	bf00      	nop
 8013c30:	e000e100 	.word	0xe000e100

08013c34 <__NVIC_DisableIRQ>:
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	db12      	blt.n	8013c6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013c46:	79fb      	ldrb	r3, [r7, #7]
 8013c48:	f003 021f 	and.w	r2, r3, #31
 8013c4c:	490a      	ldr	r1, [pc, #40]	@ (8013c78 <__NVIC_DisableIRQ+0x44>)
 8013c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c52:	095b      	lsrs	r3, r3, #5
 8013c54:	2001      	movs	r0, #1
 8013c56:	fa00 f202 	lsl.w	r2, r0, r2
 8013c5a:	3320      	adds	r3, #32
 8013c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013c60:	f3bf 8f4f 	dsb	sy
}
 8013c64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013c66:	f3bf 8f6f 	isb	sy
}
 8013c6a:	bf00      	nop
}
 8013c6c:	bf00      	nop
 8013c6e:	370c      	adds	r7, #12
 8013c70:	46bd      	mov	sp, r7
 8013c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c76:	4770      	bx	lr
 8013c78:	e000e100 	.word	0xe000e100

08013c7c <__NVIC_SetPriority>:
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	4603      	mov	r3, r0
 8013c84:	6039      	str	r1, [r7, #0]
 8013c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	db0a      	blt.n	8013ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	b2da      	uxtb	r2, r3
 8013c94:	490c      	ldr	r1, [pc, #48]	@ (8013cc8 <__NVIC_SetPriority+0x4c>)
 8013c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c9a:	0112      	lsls	r2, r2, #4
 8013c9c:	b2d2      	uxtb	r2, r2
 8013c9e:	440b      	add	r3, r1
 8013ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013ca4:	e00a      	b.n	8013cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	4908      	ldr	r1, [pc, #32]	@ (8013ccc <__NVIC_SetPriority+0x50>)
 8013cac:	79fb      	ldrb	r3, [r7, #7]
 8013cae:	f003 030f 	and.w	r3, r3, #15
 8013cb2:	3b04      	subs	r3, #4
 8013cb4:	0112      	lsls	r2, r2, #4
 8013cb6:	b2d2      	uxtb	r2, r2
 8013cb8:	440b      	add	r3, r1
 8013cba:	761a      	strb	r2, [r3, #24]
}
 8013cbc:	bf00      	nop
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr
 8013cc8:	e000e100 	.word	0xe000e100
 8013ccc:	e000ed00 	.word	0xe000ed00

08013cd0 <SCB_CleanInvalidateDCache>:
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	b085      	sub	sp, #20
 8013cd4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013cd6:	4b20      	ldr	r3, [pc, #128]	@ (8013d58 <SCB_CleanInvalidateDCache+0x88>)
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013cde:	f3bf 8f4f 	dsb	sy
}
 8013ce2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8013ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8013d58 <SCB_CleanInvalidateDCache+0x88>)
 8013ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cea:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	0b5b      	lsrs	r3, r3, #13
 8013cf0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013cf4:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	08db      	lsrs	r3, r3, #3
 8013cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013cfe:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	015a      	lsls	r2, r3, #5
 8013d04:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8013d08:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8013d0a:	68ba      	ldr	r2, [r7, #8]
 8013d0c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013d0e:	4912      	ldr	r1, [pc, #72]	@ (8013d58 <SCB_CleanInvalidateDCache+0x88>)
 8013d10:	4313      	orrs	r3, r2
 8013d12:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	1e5a      	subs	r2, r3, #1
 8013d1a:	60ba      	str	r2, [r7, #8]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	bf14      	ite	ne
 8013d20:	2301      	movne	r3, #1
 8013d22:	2300      	moveq	r3, #0
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d1ea      	bne.n	8013d00 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	1e5a      	subs	r2, r3, #1
 8013d2e:	60fa      	str	r2, [r7, #12]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	bf14      	ite	ne
 8013d34:	2301      	movne	r3, #1
 8013d36:	2300      	moveq	r3, #0
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d1db      	bne.n	8013cf6 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013d3e:	f3bf 8f4f 	dsb	sy
}
 8013d42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013d44:	f3bf 8f6f 	isb	sy
}
 8013d48:	bf00      	nop
}
 8013d4a:	bf00      	nop
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	e000ed00 	.word	0xe000ed00

08013d5c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013d5c:	b5b0      	push	{r4, r5, r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	4618      	mov	r0, r3
 8013d68:	f001 facb 	bl	8015302 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013d6c:	687d      	ldr	r5, [r7, #4]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	3364      	adds	r3, #100	@ 0x64
 8013d74:	681c      	ldr	r4, [r3, #0]
 8013d76:	f007 f90d 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	4628      	mov	r0, r5
 8013d80:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	490b      	ldr	r1, [pc, #44]	@ (8013db4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ff ff28 	bl	8013bdc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2101      	movs	r1, #1
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff fee3 	bl	8013b5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	3388      	adds	r3, #136	@ 0x88
 8013d9e:	681c      	ldr	r4, [r3, #0]
 8013da0:	2300      	movs	r3, #0
 8013da2:	2200      	movs	r2, #0
 8013da4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8013da8:	47a0      	blx	r4
}
 8013daa:	bf00      	nop
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bdb0      	pop	{r4, r5, r7, pc}
 8013db2:	bf00      	nop
 8013db4:	080125c1 	.word	0x080125c1

08013db8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013dc0:	2109      	movs	r1, #9
 8013dc2:	205a      	movs	r0, #90	@ 0x5a
 8013dc4:	f7ff ff5a 	bl	8013c7c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013dc8:	2109      	movs	r1, #9
 8013dca:	2058      	movs	r0, #88	@ 0x58
 8013dcc:	f7ff ff56 	bl	8013c7c <__NVIC_SetPriority>
}
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013de0:	205a      	movs	r0, #90	@ 0x5a
 8013de2:	f7ff ff09 	bl	8013bf8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013de6:	2058      	movs	r0, #88	@ 0x58
 8013de8:	f7ff ff06 	bl	8013bf8 <__NVIC_EnableIRQ>
}
 8013dec:	bf00      	nop
 8013dee:	3708      	adds	r7, #8
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013dfc:	205a      	movs	r0, #90	@ 0x5a
 8013dfe:	f7ff ff19 	bl	8013c34 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013e02:	2058      	movs	r0, #88	@ 0x58
 8013e04:	f7ff ff16 	bl	8013c34 <__NVIC_DisableIRQ>
}
 8013e08:	bf00      	nop
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013e10:	b480      	push	{r7}
 8013e12:	b083      	sub	sp, #12
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013e18:	4b11      	ldr	r3, [pc, #68]	@ (8013e60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	3b01      	subs	r3, #1
 8013e26:	b29a      	uxth	r2, r3
 8013e28:	4b0e      	ldr	r3, [pc, #56]	@ (8013e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013e2a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8013e68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013e3e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013e40:	4b08      	ldr	r3, [pc, #32]	@ (8013e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013e42:	881a      	ldrh	r2, [r3, #0]
 8013e44:	4b06      	ldr	r3, [pc, #24]	@ (8013e60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e46:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013e48:	4b05      	ldr	r3, [pc, #20]	@ (8013e60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e4c:	4a04      	ldr	r2, [pc, #16]	@ (8013e60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e4e:	f043 0301 	orr.w	r3, r3, #1
 8013e52:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8013e54:	bf00      	nop
 8013e56:	370c      	adds	r7, #12
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr
 8013e60:	40016800 	.word	0x40016800
 8013e64:	200122b4 	.word	0x200122b4
 8013e68:	200122b6 	.word	0x200122b6

08013e6c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f001 fa2a 	bl	80152d0 <_ZN8touchgfx3HAL10beginFrameEv>
 8013e7c:	4603      	mov	r3, r0
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b082      	sub	sp, #8
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f001 fa29 	bl	80152e8 <_ZN8touchgfx3HAL8endFrameEv>
}
 8013e96:	bf00      	nop
 8013e98:	3708      	adds	r7, #8
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
	...

08013ea0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b083      	sub	sp, #12
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013ea8:	4b03      	ldr	r3, [pc, #12]	@ (8013eb8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	370c      	adds	r7, #12
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr
 8013eb8:	40016884 	.word	0x40016884

08013ebc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013ec6:	4a06      	ldr	r2, [pc, #24]	@ (8013ee0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013ecc:	4b05      	ldr	r3, [pc, #20]	@ (8013ee4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013ece:	2201      	movs	r2, #1
 8013ed0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8013ed2:	bf00      	nop
 8013ed4:	370c      	adds	r7, #12
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	40016884 	.word	0x40016884
 8013ee4:	40016800 	.word	0x40016800

08013ee8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6839      	ldr	r1, [r7, #0]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f001 f9b4 	bl	8015264 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013efc:	bf00      	nop
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	68b9      	ldr	r1, [r7, #8]
 8013f1a:	f001 fb14 	bl	8015546 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013f1e:	4603      	mov	r3, r0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b085      	sub	sp, #20
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013f30:	4b0d      	ldr	r3, [pc, #52]	@ (8013f68 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f34:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013f36:	4b0c      	ldr	r3, [pc, #48]	@ (8013f68 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013f38:	68db      	ldr	r3, [r3, #12]
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	3301      	adds	r3, #1
 8013f44:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8013f46:	89fa      	ldrh	r2, [r7, #14]
 8013f48:	89bb      	ldrh	r3, [r7, #12]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d304      	bcc.n	8013f58 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8013f4e:	89fa      	ldrh	r2, [r7, #14]
 8013f50:	89bb      	ldrh	r3, [r7, #12]
 8013f52:	1ad3      	subs	r3, r2, r3
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	e000      	b.n	8013f5a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8013f58:	2300      	movs	r3, #0
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3714      	adds	r7, #20
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	40016800 	.word	0x40016800

08013f6c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013f74:	4b08      	ldr	r3, [pc, #32]	@ (8013f98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8013f76:	695b      	ldr	r3, [r3, #20]
 8013f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	bf14      	ite	ne
 8013f80:	2301      	movne	r3, #1
 8013f82:	2300      	moveq	r3, #0
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d001      	beq.n	8013f8e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8013f8a:	f7ff fea1 	bl	8013cd0 <SCB_CleanInvalidateDCache>
    }
}
 8013f8e:	bf00      	nop
 8013f90:	3708      	adds	r7, #8
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	e000ed00 	.word	0xe000ed00

08013f9c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013fa4:	4b08      	ldr	r3, [pc, #32]	@ (8013fc8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8013fa6:	695b      	ldr	r3, [r3, #20]
 8013fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	bf14      	ite	ne
 8013fb0:	2301      	movne	r3, #1
 8013fb2:	2300      	moveq	r3, #0
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d001      	beq.n	8013fbe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8013fba:	f7ff fe89 	bl	8013cd0 <SCB_CleanInvalidateDCache>
    }
}
 8013fbe:	bf00      	nop
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	e000ed00 	.word	0xe000ed00

08013fcc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8013fd4:	f7f6 fdb0 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	bf0c      	ite	eq
 8013fde:	2301      	moveq	r3, #1
 8013fe0:	2300      	movne	r3, #0
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d132      	bne.n	801404e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8013fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8014058 <HAL_LTDC_LineEventCallback+0x8c>)
 8013fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fec:	4a1b      	ldr	r2, [pc, #108]	@ (801405c <HAL_LTDC_LineEventCallback+0x90>)
 8013fee:	8812      	ldrh	r2, [r2, #0]
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	bf0c      	ite	eq
 8013ff4:	2301      	moveq	r3, #1
 8013ff6:	2300      	movne	r3, #0
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d017      	beq.n	801402e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8013ffe:	4b18      	ldr	r3, [pc, #96]	@ (8014060 <HAL_LTDC_LineEventCallback+0x94>)
 8014000:	881b      	ldrh	r3, [r3, #0]
 8014002:	4619      	mov	r1, r3
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f7f0 f82b 	bl	8004060 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801400a:	f7f6 fd95 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 801400e:	4603      	mov	r3, r0
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff fd90 	bl	8013b36 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014016:	f7fe fab3 	bl	8012580 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801401a:	f7f6 fd8d 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 801401e:	4603      	mov	r3, r0
 8014020:	4618      	mov	r0, r3
 8014022:	f001 febb 	bl	8015d9c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014026:	2000      	movs	r0, #0
 8014028:	f7fd ffb2 	bl	8011f90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801402c:	e010      	b.n	8014050 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801402e:	4b0b      	ldr	r3, [pc, #44]	@ (801405c <HAL_LTDC_LineEventCallback+0x90>)
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	4619      	mov	r1, r3
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f7f0 f813 	bl	8004060 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801403a:	f7f6 fd7d 	bl	800ab38 <_ZN8touchgfx3HAL11getInstanceEv>
 801403e:	4603      	mov	r3, r0
 8014040:	4618      	mov	r0, r3
 8014042:	f7ff fd6a 	bl	8013b1a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014046:	2000      	movs	r0, #0
 8014048:	f7fd ffbe 	bl	8011fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801404c:	e000      	b.n	8014050 <HAL_LTDC_LineEventCallback+0x84>
            return;
 801404e:	bf00      	nop
        }
    }
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}
 8014056:	bf00      	nop
 8014058:	40016800 	.word	0x40016800
 801405c:	200122b4 	.word	0x200122b4
 8014060:	200122b6 	.word	0x200122b6

08014064 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014064:	8880      	ldrh	r0, [r0, #4]
 8014066:	4770      	bx	lr

08014068 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014068:	b570      	push	{r4, r5, r6, lr}
 801406a:	6803      	ldr	r3, [r0, #0]
 801406c:	460c      	mov	r4, r1
 801406e:	2100      	movs	r1, #0
 8014070:	4605      	mov	r5, r0
 8014072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014074:	4798      	blx	r3
 8014076:	4606      	mov	r6, r0
 8014078:	682b      	ldr	r3, [r5, #0]
 801407a:	4628      	mov	r0, r5
 801407c:	1ba4      	subs	r4, r4, r6
 801407e:	6a1b      	ldr	r3, [r3, #32]
 8014080:	b2a4      	uxth	r4, r4
 8014082:	4798      	blx	r3
 8014084:	fbb4 f0f0 	udiv	r0, r4, r0
 8014088:	bd70      	pop	{r4, r5, r6, pc}

0801408a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801408a:	2300      	movs	r3, #0
 801408c:	8083      	strh	r3, [r0, #4]
 801408e:	4770      	bx	lr

08014090 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014090:	b510      	push	{r4, lr}
 8014092:	6803      	ldr	r3, [r0, #0]
 8014094:	4604      	mov	r4, r0
 8014096:	8881      	ldrh	r1, [r0, #4]
 8014098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801409a:	4798      	blx	r3
 801409c:	88a3      	ldrh	r3, [r4, #4]
 801409e:	3301      	adds	r3, #1
 80140a0:	80a3      	strh	r3, [r4, #4]
 80140a2:	bd10      	pop	{r4, pc}

080140a4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80140a4:	6803      	ldr	r3, [r0, #0]
 80140a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140a8:	4718      	bx	r3

080140aa <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80140aa:	4770      	bx	lr

080140ac <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80140ac:	4a02      	ldr	r2, [pc, #8]	@ (80140b8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80140ae:	6002      	str	r2, [r0, #0]
 80140b0:	2200      	movs	r2, #0
 80140b2:	8082      	strh	r2, [r0, #4]
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	08030f3c 	.word	0x08030f3c

080140bc <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 80140bc:	b510      	push	{r4, lr}
 80140be:	6803      	ldr	r3, [r0, #0]
 80140c0:	4604      	mov	r4, r0
 80140c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80140c6:	4798      	blx	r3
 80140c8:	b110      	cbz	r0, 80140d0 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7f6 fae2 	bl	800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80140d0:	bd10      	pop	{r4, pc}

080140d2 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 80140d2:	30dc      	adds	r0, #220	@ 0xdc
 80140d4:	4770      	bx	lr

080140d6 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 80140d6:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 80140da:	4770      	bx	lr

080140dc <_ZNK8touchgfx12TextProgress8getColorEv>:
 80140dc:	f8d0 00e4 	ldr.w	r0, [r0, #228]	@ 0xe4
 80140e0:	4770      	bx	lr

080140e2 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 80140e2:	2902      	cmp	r1, #2
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	bf28      	it	cs
 80140e8:	2102      	movcs	r1, #2
 80140ea:	6803      	ldr	r3, [r0, #0]
 80140ec:	4604      	mov	r4, r0
 80140ee:	f8a0 1112 	strh.w	r1, [r0, #274]	@ 0x112
 80140f2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 80140f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80140fa:	4798      	blx	r3
 80140fc:	462b      	mov	r3, r5
 80140fe:	4601      	mov	r1, r0
 8014100:	4620      	mov	r0, r4
 8014102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014106:	4718      	bx	r3

08014108 <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 8014108:	f8b0 0112 	ldrh.w	r0, [r0, #274]	@ 0x112
 801410c:	4770      	bx	lr

0801410e <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 801410e:	30b4      	adds	r0, #180	@ 0xb4
 8014110:	f004 ba26 	b.w	8018560 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

08014114 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 8014114:	b538      	push	{r3, r4, r5, lr}
 8014116:	4604      	mov	r4, r0
 8014118:	460d      	mov	r5, r1
 801411a:	f000 fa27 	bl	801456c <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801411e:	f884 50ea 	strb.w	r5, [r4, #234]	@ 0xea
 8014122:	bd38      	pop	{r3, r4, r5, pc}

08014124 <_ZN8touchgfx12TextProgress8setValueEi>:
 8014124:	b570      	push	{r4, r5, r6, lr}
 8014126:	f100 05b4 	add.w	r5, r0, #180	@ 0xb4
 801412a:	4604      	mov	r4, r0
 801412c:	460e      	mov	r6, r1
 801412e:	b086      	sub	sp, #24
 8014130:	4628      	mov	r0, r5
 8014132:	f7f6 faaf 	bl	800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8014136:	4631      	mov	r1, r6
 8014138:	4620      	mov	r0, r4
 801413a:	f504 7680 	add.w	r6, r4, #256	@ 0x100
 801413e:	f000 fa60 	bl	8014602 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014142:	4b1b      	ldr	r3, [pc, #108]	@ (80141b0 <_ZN8touchgfx12TextProgress8setValueEi+0x8c>)
 8014144:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014148:	ab06      	add	r3, sp, #24
 801414a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 801414e:	f8b4 3112 	ldrh.w	r3, [r4, #274]	@ 0x112
 8014152:	aa06      	add	r2, sp, #24
 8014154:	4620      	mov	r0, r4
 8014156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801415a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801415e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014162:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014166:	0089      	lsls	r1, r1, #2
 8014168:	b289      	uxth	r1, r1
 801416a:	f000 fa6c 	bl	8014646 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801416e:	f8b4 1112 	ldrh.w	r1, [r4, #274]	@ 0x112
 8014172:	b1b1      	cbz	r1, 80141a2 <_ZN8touchgfx12TextProgress8setValueEi+0x7e>
 8014174:	ab06      	add	r3, sp, #24
 8014176:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801417a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 801417e:	fb90 f3f2 	sdiv	r3, r0, r2
 8014182:	fb02 0213 	mls	r2, r2, r3, r0
 8014186:	4630      	mov	r0, r6
 8014188:	e9cd 1200 	strd	r1, r2, [sp]
 801418c:	4a09      	ldr	r2, [pc, #36]	@ (80141b4 <_ZN8touchgfx12TextProgress8setValueEi+0x90>)
 801418e:	2108      	movs	r1, #8
 8014190:	f00a f86a 	bl	801e268 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014194:	4628      	mov	r0, r5
 8014196:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
 801419a:	f7f6 fa7b 	bl	800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801419e:	b006      	add	sp, #24
 80141a0:	bd70      	pop	{r4, r5, r6, pc}
 80141a2:	4603      	mov	r3, r0
 80141a4:	4a04      	ldr	r2, [pc, #16]	@ (80141b8 <_ZN8touchgfx12TextProgress8setValueEi+0x94>)
 80141a6:	2108      	movs	r1, #8
 80141a8:	4630      	mov	r0, r6
 80141aa:	f00a f85d 	bl	801e268 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80141ae:	e7f1      	b.n	8014194 <_ZN8touchgfx12TextProgress8setValueEi+0x70>
 80141b0:	0802fd88 	.word	0x0802fd88
 80141b4:	08030f68 	.word	0x08030f68
 80141b8:	08030f70 	.word	0x08030f70

080141bc <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 80141bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141c0:	461d      	mov	r5, r3
 80141c2:	f100 07b4 	add.w	r7, r0, #180	@ 0xb4
 80141c6:	2300      	movs	r3, #0
 80141c8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80141cc:	4691      	mov	r9, r2
 80141ce:	4604      	mov	r4, r0
 80141d0:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 80141d4:	4688      	mov	r8, r1
 80141d6:	4638      	mov	r0, r7
 80141d8:	4629      	mov	r1, r5
 80141da:	f7fb ffe2 	bl	80101a2 <_ZN8touchgfx8TextArea8setWidthEs>
 80141de:	4631      	mov	r1, r6
 80141e0:	4638      	mov	r0, r7
 80141e2:	f7fb fffe 	bl	80101e2 <_ZN8touchgfx8TextArea9setHeightEs>
 80141e6:	9608      	str	r6, [sp, #32]
 80141e8:	462b      	mov	r3, r5
 80141ea:	464a      	mov	r2, r9
 80141ec:	4641      	mov	r1, r8
 80141ee:	4620      	mov	r0, r4
 80141f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141f4:	f000 ba81 	b.w	80146fa <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080141f8 <_ZN8touchgfx12TextProgressC1Ev>:
 80141f8:	b510      	push	{r4, lr}
 80141fa:	4604      	mov	r4, r0
 80141fc:	f000 faaa 	bl	8014754 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014200:	2201      	movs	r2, #1
 8014202:	4b25      	ldr	r3, [pc, #148]	@ (8014298 <_ZN8touchgfx12TextProgressC1Ev+0xa0>)
 8014204:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 8014208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801420c:	f884 20d9 	strb.w	r2, [r4, #217]	@ 0xd9
 8014210:	4a22      	ldr	r2, [pc, #136]	@ (801429c <_ZN8touchgfx12TextProgressC1Ev+0xa4>)
 8014212:	6023      	str	r3, [r4, #0]
 8014214:	2300      	movs	r3, #0
 8014216:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
 801421a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801421e:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 8014222:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 8014226:	f8a4 20e0 	strh.w	r2, [r4, #224]	@ 0xe0
 801422a:	f8a4 20f4 	strh.w	r2, [r4, #244]	@ 0xf4
 801422e:	f8a4 20f6 	strh.w	r2, [r4, #246]	@ 0xf6
 8014232:	4a1b      	ldr	r2, [pc, #108]	@ (80142a0 <_ZN8touchgfx12TextProgressC1Ev+0xa8>)
 8014234:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 8014238:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
 801423c:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8014240:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8014244:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8014248:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 801424c:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8014250:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8014254:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8014258:	f8a4 30d4 	strh.w	r3, [r4, #212]	@ 0xd4
 801425c:	f8a4 30d6 	strh.w	r3, [r4, #214]	@ 0xd6
 8014260:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
 8014264:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 8014268:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 801426c:	f884 30ed 	strb.w	r3, [r4, #237]	@ 0xed
 8014270:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
 8014274:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 8014278:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 801427c:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
 8014280:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
 8014284:	f8a4 3112 	strh.w	r3, [r4, #274]	@ 0x112
 8014288:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 801428c:	e9c4 3332 	strd	r3, r3, [r4, #200]	@ 0xc8
 8014290:	f000 fac0 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014294:	4620      	mov	r0, r4
 8014296:	bd10      	pop	{r4, pc}
 8014298:	08030fec 	.word	0x08030fec
 801429c:	0802fe1c 	.word	0x0802fe1c
 80142a0:	080307d4 	.word	0x080307d4

080142a4 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80142a4:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
 80142a8:	4770      	bx	lr

080142aa <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80142aa:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
 80142ae:	4770      	bx	lr

080142b0 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80142b0:	b538      	push	{r3, r4, r5, lr}
 80142b2:	4604      	mov	r4, r0
 80142b4:	460d      	mov	r5, r1
 80142b6:	f000 f959 	bl	801456c <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80142ba:	f884 50de 	strb.w	r5, [r4, #222]	@ 0xde
 80142be:	bd38      	pop	{r3, r4, r5, pc}

080142c0 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80142c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80142c4:	4617      	mov	r7, r2
 80142c6:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80142ca:	2200      	movs	r2, #0
 80142cc:	4604      	mov	r4, r0
 80142ce:	460e      	mov	r6, r1
 80142d0:	4698      	mov	r8, r3
 80142d2:	4611      	mov	r1, r2
 80142d4:	9500      	str	r5, [sp, #0]
 80142d6:	30b8      	adds	r0, #184	@ 0xb8
 80142d8:	f7f6 fa06 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80142dc:	4643      	mov	r3, r8
 80142de:	463a      	mov	r2, r7
 80142e0:	4631      	mov	r1, r6
 80142e2:	4620      	mov	r0, r4
 80142e4:	9508      	str	r5, [sp, #32]
 80142e6:	b002      	add	sp, #8
 80142e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142ec:	f000 ba05 	b.w	80146fa <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080142f0 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80142f0:	b530      	push	{r4, r5, lr}
 80142f2:	4604      	mov	r4, r0
 80142f4:	b085      	sub	sp, #20
 80142f6:	f000 f984 	bl	8014602 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80142fa:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 80142fe:	2b03      	cmp	r3, #3
 8014300:	d814      	bhi.n	801432c <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8014302:	e8df f003 	tbb	[pc, r3]
 8014306:	0202      	.short	0x0202
 8014308:	1010      	.short	0x1010
 801430a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801430e:	4620      	mov	r0, r4
 8014310:	f000 f999 	bl	8014646 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014314:	b200      	sxth	r0, r0
 8014316:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 801431a:	2b03      	cmp	r3, #3
 801431c:	d830      	bhi.n	8014380 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 801431e:	e8df f003 	tbb	[pc, r3]
 8014322:	3107      	.short	0x3107
 8014324:	6442      	.short	0x6442
 8014326:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 801432a:	e7f0      	b.n	801430e <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 801432c:	2000      	movs	r0, #0
 801432e:	e7f2      	b.n	8014316 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014330:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8014334:	2200      	movs	r2, #0
 8014336:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 801433a:	9300      	str	r3, [sp, #0]
 801433c:	4611      	mov	r1, r2
 801433e:	4603      	mov	r3, r0
 8014340:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8014344:	f7f6 f9d0 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014348:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 801434c:	4629      	mov	r1, r5
 801434e:	429d      	cmp	r5, r3
 8014350:	eba5 0503 	sub.w	r5, r5, r3
 8014354:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 8014358:	bfa8      	it	ge
 801435a:	4619      	movge	r1, r3
 801435c:	2d00      	cmp	r5, #0
 801435e:	f8ad 200e 	strh.w	r2, [sp, #14]
 8014362:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014366:	f04f 0100 	mov.w	r1, #0
 801436a:	bfb8      	it	lt
 801436c:	426d      	neglt	r5, r5
 801436e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8014372:	f8ad 500c 	strh.w	r5, [sp, #12]
 8014376:	a902      	add	r1, sp, #8
 8014378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801437c:	f007 ff46 	bl	801c20c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8014380:	b005      	add	sp, #20
 8014382:	bd30      	pop	{r4, r5, pc}
 8014384:	8921      	ldrh	r1, [r4, #8]
 8014386:	2200      	movs	r2, #0
 8014388:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 801438c:	1a09      	subs	r1, r1, r0
 801438e:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	@ 0xbc
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	4603      	mov	r3, r0
 8014396:	b209      	sxth	r1, r1
 8014398:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 801439c:	f7f6 f9a4 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80143a0:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 80143a4:	e7d2      	b.n	801434c <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 80143a6:	2200      	movs	r2, #0
 80143a8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80143ac:	9000      	str	r0, [sp, #0]
 80143ae:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80143b2:	4611      	mov	r1, r2
 80143b4:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
 80143b8:	f7f6 f996 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80143bc:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 80143c0:	2100      	movs	r1, #0
 80143c2:	429d      	cmp	r5, r3
 80143c4:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 80143c8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80143cc:	4629      	mov	r1, r5
 80143ce:	eba5 0503 	sub.w	r5, r5, r3
 80143d2:	bfa8      	it	ge
 80143d4:	4619      	movge	r1, r3
 80143d6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80143da:	2d00      	cmp	r5, #0
 80143dc:	f8ad 100a 	strh.w	r1, [sp, #10]
 80143e0:	bfb8      	it	lt
 80143e2:	426d      	neglt	r5, r5
 80143e4:	f8ad 500e 	strh.w	r5, [sp, #14]
 80143e8:	e7c5      	b.n	8014376 <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 80143ea:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 80143ee:	2100      	movs	r1, #0
 80143f0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80143f4:	1a12      	subs	r2, r2, r0
 80143f6:	9000      	str	r0, [sp, #0]
 80143f8:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80143fc:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	@ 0xbe
 8014400:	b212      	sxth	r2, r2
 8014402:	f7f6 f971 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014406:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 801440a:	e7d9      	b.n	80143c0 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

0801440c <_ZN8touchgfx11BoxProgressC1Ev>:
 801440c:	b510      	push	{r4, lr}
 801440e:	4604      	mov	r4, r0
 8014410:	f000 f852 	bl	80144b8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014414:	2201      	movs	r2, #1
 8014416:	4b17      	ldr	r3, [pc, #92]	@ (8014474 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801441c:	f104 01b8 	add.w	r1, r4, #184	@ 0xb8
 8014420:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
 8014424:	4a14      	ldr	r2, [pc, #80]	@ (8014478 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 8014426:	6023      	str	r3, [r4, #0]
 8014428:	2300      	movs	r3, #0
 801442a:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 801442e:	22ff      	movs	r2, #255	@ 0xff
 8014430:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8014434:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8014438:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 801443c:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8014440:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8014444:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8014448:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 801444c:	f8a4 30ca 	strh.w	r3, [r4, #202]	@ 0xca
 8014450:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8014454:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 8014458:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
 801445c:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
 8014460:	f884 20de 	strb.w	r2, [r4, #222]	@ 0xde
 8014464:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8014468:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 801446c:	f000 f9d2 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014470:	4620      	mov	r0, r4
 8014472:	bd10      	pop	{r4, pc}
 8014474:	080310d8 	.word	0x080310d8
 8014478:	08031fb8 	.word	0x08031fb8

0801447c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801447c:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 8014480:	4770      	bx	lr

08014482 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 8014482:	b570      	push	{r4, r5, r6, lr}
 8014484:	4604      	mov	r4, r0
 8014486:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 801448a:	3058      	adds	r0, #88	@ 0x58
 801448c:	f007 fe6d 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	4620      	mov	r0, r4
 8014494:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8014498:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801449c:	4798      	blx	r3
 801449e:	462b      	mov	r3, r5
 80144a0:	4601      	mov	r1, r0
 80144a2:	4620      	mov	r0, r4
 80144a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144a8:	4718      	bx	r3

080144aa <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80144aa:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 80144ae:	428b      	cmp	r3, r1
 80144b0:	d001      	beq.n	80144b6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 80144b2:	f7ff bfe6 	b.w	8014482 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 80144b6:	4770      	bx	lr

080144b8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80144b8:	b510      	push	{r4, lr}
 80144ba:	4604      	mov	r4, r0
 80144bc:	f000 f94a 	bl	8014754 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80144c0:	4b03      	ldr	r3, [pc, #12]	@ (80144d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80144c2:	4620      	mov	r0, r4
 80144c4:	6023      	str	r3, [r4, #0]
 80144c6:	2300      	movs	r3, #0
 80144c8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80144cc:	bd10      	pop	{r4, pc}
 80144ce:	bf00      	nop
 80144d0:	080311bc 	.word	0x080311bc

080144d4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80144d4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 80144d8:	4770      	bx	lr

080144da <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80144da:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 80144de:	4770      	bx	lr

080144e0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80144e0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 80144e4:	4770      	bx	lr

080144e6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80144e6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 80144ea:	4770      	bx	lr

080144ec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 80144ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ee:	461e      	mov	r6, r3
 80144f0:	6803      	ldr	r3, [r0, #0]
 80144f2:	460f      	mov	r7, r1
 80144f4:	4604      	mov	r4, r0
 80144f6:	4615      	mov	r5, r2
 80144f8:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 80144fc:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 8014500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014504:	4798      	blx	r3
 8014506:	b93e      	cbnz	r6, 8014518 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8014508:	1bed      	subs	r5, r5, r7
 801450a:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 801450e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8014512:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 8014516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014518:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 801451c:	e7f7      	b.n	801450e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0801451e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 801451e:	b510      	push	{r4, lr}
 8014520:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8014524:	600c      	str	r4, [r1, #0]
 8014526:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 801452a:	6011      	str	r1, [r2, #0]
 801452c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8014530:	801a      	strh	r2, [r3, #0]
 8014532:	9b02      	ldr	r3, [sp, #8]
 8014534:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 8014538:	801a      	strh	r2, [r3, #0]
 801453a:	bd10      	pop	{r4, pc}

0801453c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801453c:	b510      	push	{r4, lr}
 801453e:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8014542:	600c      	str	r4, [r1, #0]
 8014544:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8014548:	6011      	str	r1, [r2, #0]
 801454a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801454e:	801a      	strh	r2, [r3, #0]
 8014550:	bd10      	pop	{r4, pc}

08014552 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8014552:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8014556:	600b      	str	r3, [r1, #0]
 8014558:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801455c:	6013      	str	r3, [r2, #0]
 801455e:	4770      	bx	lr

08014560 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8014560:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8014564:	4770      	bx	lr

08014566 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8014566:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 801456a:	4770      	bx	lr

0801456c <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 801456c:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 8014570:	4770      	bx	lr

08014572 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8014572:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 8014576:	4770      	bx	lr

08014578 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8014578:	b570      	push	{r4, r5, r6, lr}
 801457a:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 801457e:	4604      	mov	r4, r0
 8014580:	4616      	mov	r6, r2
 8014582:	428d      	cmp	r5, r1
 8014584:	bfb8      	it	lt
 8014586:	460d      	movlt	r5, r1
 8014588:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 801458c:	428d      	cmp	r5, r1
 801458e:	bfa8      	it	ge
 8014590:	460d      	movge	r5, r1
 8014592:	b99a      	cbnz	r2, 80145bc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8014594:	6803      	ldr	r3, [r0, #0]
 8014596:	4629      	mov	r1, r5
 8014598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801459c:	4798      	blx	r3
 801459e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80145a2:	b368      	cbz	r0, 8014600 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80145a4:	6803      	ldr	r3, [r0, #0]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	4798      	blx	r3
 80145aa:	b348      	cbz	r0, 8014600 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80145ac:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80145b0:	4621      	mov	r1, r4
 80145b2:	6803      	ldr	r3, [r0, #0]
 80145b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145b8:	689b      	ldr	r3, [r3, #8]
 80145ba:	4718      	bx	r3
 80145bc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	dd08      	ble.n	80145d6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 80145c4:	f006 fce6 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80145c8:	4621      	mov	r1, r4
 80145ca:	3004      	adds	r0, #4
 80145cc:	f006 fd2f 	bl	801b02e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80145d0:	2300      	movs	r3, #0
 80145d2:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 80145d6:	6823      	ldr	r3, [r4, #0]
 80145d8:	4620      	mov	r0, r4
 80145da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80145de:	4798      	blx	r3
 80145e0:	2300      	movs	r3, #0
 80145e2:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 80145e6:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 80145ea:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 80145ee:	f006 fcd1 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80145f2:	4621      	mov	r1, r4
 80145f4:	3004      	adds	r0, #4
 80145f6:	f006 fdc3 	bl	801b180 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80145fa:	2301      	movs	r3, #1
 80145fc:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8014600:	bd70      	pop	{r4, r5, r6, pc}

08014602 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8014602:	b510      	push	{r4, lr}
 8014604:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8014608:	4604      	mov	r4, r0
 801460a:	4299      	cmp	r1, r3
 801460c:	bfb8      	it	lt
 801460e:	4619      	movlt	r1, r3
 8014610:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8014614:	4299      	cmp	r1, r3
 8014616:	bfa8      	it	ge
 8014618:	4619      	movge	r1, r3
 801461a:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 801461e:	428b      	cmp	r3, r1
 8014620:	d010      	beq.n	8014644 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8014622:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8014626:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 801462a:	b158      	cbz	r0, 8014644 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801462c:	6803      	ldr	r3, [r0, #0]
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	4798      	blx	r3
 8014632:	b138      	cbz	r0, 8014644 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8014634:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8014638:	4621      	mov	r1, r4
 801463a:	6803      	ldr	r3, [r0, #0]
 801463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	4718      	bx	r3
 8014644:	bd10      	pop	{r4, pc}

08014646 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8014646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014648:	4604      	mov	r4, r0
 801464a:	460d      	mov	r5, r1
 801464c:	b1a9      	cbz	r1, 801467a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 801464e:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 8014652:	ab01      	add	r3, sp, #4
 8014654:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 8014658:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 801465c:	1b89      	subs	r1, r1, r6
 801465e:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 8014662:	1a12      	subs	r2, r2, r0
 8014664:	1a38      	subs	r0, r7, r0
 8014666:	f007 ff2b 	bl	801c4c0 <_ZN8touchgfx6muldivElllRl>
 801466a:	4629      	mov	r1, r5
 801466c:	ab01      	add	r3, sp, #4
 801466e:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 8014672:	4430      	add	r0, r6
 8014674:	f007 ff24 	bl	801c4c0 <_ZN8touchgfx6muldivElllRl>
 8014678:	b285      	uxth	r5, r0
 801467a:	4628      	mov	r0, r5
 801467c:	b003      	add	sp, #12
 801467e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014680 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8014680:	b570      	push	{r4, r5, r6, lr}
 8014682:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8014686:	4604      	mov	r4, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d035      	beq.n	80146f8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 801468c:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 8014690:	2100      	movs	r1, #0
 8014692:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8014696:	3001      	adds	r0, #1
 8014698:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 801469c:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 80146a0:	b280      	uxth	r0, r0
 80146a2:	1ad2      	subs	r2, r2, r3
 80146a4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80146a8:	b212      	sxth	r2, r2
 80146aa:	47a8      	blx	r5
 80146ac:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80146b0:	6823      	ldr	r3, [r4, #0]
 80146b2:	4401      	add	r1, r0
 80146b4:	4620      	mov	r0, r4
 80146b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80146ba:	4798      	blx	r3
 80146bc:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 80146c0:	429a      	cmp	r2, r3
 80146c2:	db19      	blt.n	80146f8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80146c4:	2500      	movs	r5, #0
 80146c6:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 80146ca:	f006 fc63 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80146ce:	4621      	mov	r1, r4
 80146d0:	3004      	adds	r0, #4
 80146d2:	f006 fcac 	bl	801b02e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80146d6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80146da:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80146de:	b158      	cbz	r0, 80146f8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80146e0:	6803      	ldr	r3, [r0, #0]
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	4798      	blx	r3
 80146e6:	b138      	cbz	r0, 80146f8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80146e8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80146ec:	4621      	mov	r1, r4
 80146ee:	6803      	ldr	r3, [r0, #0]
 80146f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146f4:	689b      	ldr	r3, [r3, #8]
 80146f6:	4718      	bx	r3
 80146f8:	bd70      	pop	{r4, r5, r6, pc}

080146fa <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80146fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146fe:	4604      	mov	r4, r0
 8014700:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8014704:	4698      	mov	r8, r3
 8014706:	460e      	mov	r6, r1
 8014708:	4615      	mov	r5, r2
 801470a:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 801470e:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8014712:	4619      	mov	r1, r3
 8014714:	463a      	mov	r2, r7
 8014716:	3058      	adds	r0, #88	@ 0x58
 8014718:	f7f6 f89b 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801471c:	4446      	add	r6, r8
 801471e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014722:	443d      	add	r5, r7
 8014724:	42b3      	cmp	r3, r6
 8014726:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801472a:	bfb8      	it	lt
 801472c:	8126      	strhlt	r6, [r4, #8]
 801472e:	42ab      	cmp	r3, r5
 8014730:	bfb8      	it	lt
 8014732:	8165      	strhlt	r5, [r4, #10]
 8014734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014738 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8014738:	b510      	push	{r4, lr}
 801473a:	4604      	mov	r4, r0
 801473c:	302c      	adds	r0, #44	@ 0x2c
 801473e:	f004 f881 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014742:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8014746:	4620      	mov	r0, r4
 8014748:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 801474c:	f7f6 f881 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014750:	bd10      	pop	{r4, pc}
	...

08014754 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8014754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014756:	4604      	mov	r4, r0
 8014758:	2500      	movs	r5, #0
 801475a:	f7f5 ff4b 	bl	800a5f4 <_ZN8touchgfx8DrawableC1Ev>
 801475e:	4b24      	ldr	r3, [pc, #144]	@ (80147f0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8014760:	4626      	mov	r6, r4
 8014762:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8014766:	2226      	movs	r2, #38	@ 0x26
 8014768:	4629      	mov	r1, r5
 801476a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801476c:	f846 3b2c 	str.w	r3, [r6], #44
 8014770:	4630      	mov	r0, r6
 8014772:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014776:	f019 fbe3 	bl	802df40 <memset>
 801477a:	4630      	mov	r0, r6
 801477c:	f7f5 ff3a 	bl	800a5f4 <_ZN8touchgfx8DrawableC1Ev>
 8014780:	a902      	add	r1, sp, #8
 8014782:	4b1c      	ldr	r3, [pc, #112]	@ (80147f4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8014784:	4630      	mov	r0, r6
 8014786:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 801478a:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 801478e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014790:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8014794:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8014798:	f004 f854 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801479c:	4638      	mov	r0, r7
 801479e:	f7f5 ff29 	bl	800a5f4 <_ZN8touchgfx8DrawableC1Ev>
 80147a2:	4b15      	ldr	r3, [pc, #84]	@ (80147f8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 80147a4:	4629      	mov	r1, r5
 80147a6:	4630      	mov	r0, r6
 80147a8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80147aa:	2364      	movs	r3, #100	@ 0x64
 80147ac:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80147b0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80147b4:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 80147b8:	4b10      	ldr	r3, [pc, #64]	@ (80147fc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 80147ba:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 80147be:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80147c2:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 80147c6:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 80147ca:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 80147ce:	f7f5 ffc6 	bl	800a75e <_ZN8touchgfx8Drawable4setXEs>
 80147d2:	4629      	mov	r1, r5
 80147d4:	4630      	mov	r0, r6
 80147d6:	f7f5 ffd1 	bl	800a77c <_ZN8touchgfx8Drawable4setYEs>
 80147da:	4631      	mov	r1, r6
 80147dc:	4620      	mov	r0, r4
 80147de:	f000 f819 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80147e2:	4620      	mov	r0, r4
 80147e4:	4639      	mov	r1, r7
 80147e6:	f000 f815 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80147ea:	4620      	mov	r0, r4
 80147ec:	b003      	add	sp, #12
 80147ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147f0:	08031298 	.word	0x08031298
 80147f4:	08032124 	.word	0x08032124
 80147f8:	0803136c 	.word	0x0803136c
 80147fc:	0801cc0f 	.word	0x0801cc0f

08014800 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014800:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014802:	2000      	movs	r0, #0
 8014804:	b12b      	cbz	r3, 8014812 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014806:	b920      	cbnz	r0, 8014812 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014808:	1a5a      	subs	r2, r3, r1
 801480a:	699b      	ldr	r3, [r3, #24]
 801480c:	4250      	negs	r0, r2
 801480e:	4150      	adcs	r0, r2
 8014810:	e7f8      	b.n	8014804 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014812:	4770      	bx	lr

08014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014814:	2300      	movs	r3, #0
 8014816:	6148      	str	r0, [r1, #20]
 8014818:	618b      	str	r3, [r1, #24]
 801481a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801481c:	b913      	cbnz	r3, 8014824 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801481e:	6281      	str	r1, [r0, #40]	@ 0x28
 8014820:	4770      	bx	lr
 8014822:	4613      	mov	r3, r2
 8014824:	699a      	ldr	r2, [r3, #24]
 8014826:	2a00      	cmp	r2, #0
 8014828:	d1fb      	bne.n	8014822 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801482a:	6199      	str	r1, [r3, #24]
 801482c:	4770      	bx	lr

0801482e <_ZN8touchgfx9Container9removeAllEv>:
 801482e:	2200      	movs	r2, #0
 8014830:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014832:	b123      	cbz	r3, 801483e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014834:	6999      	ldr	r1, [r3, #24]
 8014836:	6281      	str	r1, [r0, #40]	@ 0x28
 8014838:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801483c:	e7f8      	b.n	8014830 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801483e:	4770      	bx	lr

08014840 <_ZN8touchgfx9Container6unlinkEv>:
 8014840:	2300      	movs	r3, #0
 8014842:	6283      	str	r3, [r0, #40]	@ 0x28
 8014844:	4770      	bx	lr

08014846 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014846:	2200      	movs	r2, #0
 8014848:	8002      	strh	r2, [r0, #0]
 801484a:	8042      	strh	r2, [r0, #2]
 801484c:	8082      	strh	r2, [r0, #4]
 801484e:	80c2      	strh	r2, [r0, #6]
 8014850:	4770      	bx	lr

08014852 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014852:	b570      	push	{r4, r5, r6, lr}
 8014854:	460d      	mov	r5, r1
 8014856:	4616      	mov	r6, r2
 8014858:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801485a:	b13c      	cbz	r4, 801486c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801485c:	6823      	ldr	r3, [r4, #0]
 801485e:	4620      	mov	r0, r4
 8014860:	4632      	mov	r2, r6
 8014862:	4629      	mov	r1, r5
 8014864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014866:	4798      	blx	r3
 8014868:	69a4      	ldr	r4, [r4, #24]
 801486a:	e7f6      	b.n	801485a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801486c:	bd70      	pop	{r4, r5, r6, pc}

0801486e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801486e:	b538      	push	{r3, r4, r5, lr}
 8014870:	460d      	mov	r5, r1
 8014872:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014874:	b134      	cbz	r4, 8014884 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014876:	682b      	ldr	r3, [r5, #0]
 8014878:	4621      	mov	r1, r4
 801487a:	4628      	mov	r0, r5
 801487c:	689b      	ldr	r3, [r3, #8]
 801487e:	4798      	blx	r3
 8014880:	69a4      	ldr	r4, [r4, #24]
 8014882:	e7f7      	b.n	8014874 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014884:	bd38      	pop	{r3, r4, r5, pc}

08014886 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014886:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014888:	b19b      	cbz	r3, 80148b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801488a:	428b      	cmp	r3, r1
 801488c:	d109      	bne.n	80148a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801488e:	699a      	ldr	r2, [r3, #24]
 8014890:	2100      	movs	r1, #0
 8014892:	6159      	str	r1, [r3, #20]
 8014894:	6282      	str	r2, [r0, #40]	@ 0x28
 8014896:	b902      	cbnz	r2, 801489a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014898:	4770      	bx	lr
 801489a:	6199      	str	r1, [r3, #24]
 801489c:	4770      	bx	lr
 801489e:	4613      	mov	r3, r2
 80148a0:	b13a      	cbz	r2, 80148b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80148a2:	699a      	ldr	r2, [r3, #24]
 80148a4:	428a      	cmp	r2, r1
 80148a6:	d1fa      	bne.n	801489e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80148a8:	698a      	ldr	r2, [r1, #24]
 80148aa:	619a      	str	r2, [r3, #24]
 80148ac:	2300      	movs	r3, #0
 80148ae:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80148b2:	4770      	bx	lr

080148b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80148b4:	b410      	push	{r4}
 80148b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80148b8:	4604      	mov	r4, r0
 80148ba:	b92b      	cbnz	r3, 80148c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80148bc:	6803      	ldr	r3, [r0, #0]
 80148be:	4611      	mov	r1, r2
 80148c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80148c6:	4718      	bx	r3
 80148c8:	b941      	cbnz	r1, 80148dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80148ca:	6193      	str	r3, [r2, #24]
 80148cc:	6282      	str	r2, [r0, #40]	@ 0x28
 80148ce:	6154      	str	r4, [r2, #20]
 80148d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148d4:	4770      	bx	lr
 80148d6:	4603      	mov	r3, r0
 80148d8:	2800      	cmp	r0, #0
 80148da:	d0f9      	beq.n	80148d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80148dc:	4299      	cmp	r1, r3
 80148de:	6998      	ldr	r0, [r3, #24]
 80148e0:	d1f9      	bne.n	80148d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80148e2:	6190      	str	r0, [r2, #24]
 80148e4:	618a      	str	r2, [r1, #24]
 80148e6:	e7f2      	b.n	80148ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080148e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80148e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ec:	461f      	mov	r7, r3
 80148ee:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80148f2:	460d      	mov	r5, r1
 80148f4:	4616      	mov	r6, r2
 80148f6:	b103      	cbz	r3, 80148fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80148f8:	6038      	str	r0, [r7, #0]
 80148fa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80148fc:	b314      	cbz	r4, 8014944 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80148fe:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014902:	b1eb      	cbz	r3, 8014940 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014904:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014908:	428d      	cmp	r5, r1
 801490a:	db19      	blt.n	8014940 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801490c:	b289      	uxth	r1, r1
 801490e:	8923      	ldrh	r3, [r4, #8]
 8014910:	440b      	add	r3, r1
 8014912:	b21b      	sxth	r3, r3
 8014914:	429d      	cmp	r5, r3
 8014916:	da13      	bge.n	8014940 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014918:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801491c:	4296      	cmp	r6, r2
 801491e:	db0f      	blt.n	8014940 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014920:	b292      	uxth	r2, r2
 8014922:	8963      	ldrh	r3, [r4, #10]
 8014924:	4413      	add	r3, r2
 8014926:	b21b      	sxth	r3, r3
 8014928:	429e      	cmp	r6, r3
 801492a:	da09      	bge.n	8014940 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801492c:	6823      	ldr	r3, [r4, #0]
 801492e:	1ab2      	subs	r2, r6, r2
 8014930:	1a69      	subs	r1, r5, r1
 8014932:	4620      	mov	r0, r4
 8014934:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8014938:	b212      	sxth	r2, r2
 801493a:	463b      	mov	r3, r7
 801493c:	b209      	sxth	r1, r1
 801493e:	47c0      	blx	r8
 8014940:	69a4      	ldr	r4, [r4, #24]
 8014942:	e7db      	b.n	80148fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014948 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801494c:	4c6d      	ldr	r4, [pc, #436]	@ (8014b04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801494e:	b0a1      	sub	sp, #132	@ 0x84
 8014950:	4606      	mov	r6, r0
 8014952:	6824      	ldr	r4, [r4, #0]
 8014954:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014956:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 801495a:	2400      	movs	r4, #0
 801495c:	9303      	str	r3, [sp, #12]
 801495e:	802c      	strh	r4, [r5, #0]
 8014960:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8014962:	802c      	strh	r4, [r5, #0]
 8014964:	601c      	str	r4, [r3, #0]
 8014966:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801496a:	f7ff ffbd 	bl	80148e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801496e:	f1b9 0f03 	cmp.w	r9, #3
 8014972:	f340 80c1 	ble.w	8014af8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014976:	4631      	mov	r1, r6
 8014978:	a80c      	add	r0, sp, #48	@ 0x30
 801497a:	f007 fc91 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801497e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8014982:	9306      	str	r3, [sp, #24]
 8014984:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014988:	9307      	str	r3, [sp, #28]
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	f8d3 a000 	ldr.w	sl, [r3]
 8014990:	f1ba 0f00 	cmp.w	sl, #0
 8014994:	f000 80b3 	beq.w	8014afe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014998:	4651      	mov	r1, sl
 801499a:	a810      	add	r0, sp, #64	@ 0x40
 801499c:	f007 fc80 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80149a0:	2002      	movs	r0, #2
 80149a2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80149a6:	9b01      	ldr	r3, [sp, #4]
 80149a8:	9a06      	ldr	r2, [sp, #24]
 80149aa:	fb91 f1f0 	sdiv	r1, r1, r0
 80149ae:	189d      	adds	r5, r3, r2
 80149b0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80149b4:	9a07      	ldr	r2, [sp, #28]
 80149b6:	4419      	add	r1, r3
 80149b8:	9b02      	ldr	r3, [sp, #8]
 80149ba:	4413      	add	r3, r2
 80149bc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80149c0:	1a6d      	subs	r5, r5, r1
 80149c2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80149c6:	fb92 f2f0 	sdiv	r2, r2, r0
 80149ca:	440a      	add	r2, r1
 80149cc:	1a9b      	subs	r3, r3, r2
 80149ce:	435b      	muls	r3, r3
 80149d0:	fb05 3505 	mla	r5, r5, r5, r3
 80149d4:	4f4c      	ldr	r7, [pc, #304]	@ (8014b08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80149d6:	ac10      	add	r4, sp, #64	@ 0x40
 80149d8:	f1b9 0f0c 	cmp.w	r9, #12
 80149dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80149de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80149e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80149e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149e8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80149ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80149f0:	f04f 0303 	mov.w	r3, #3
 80149f4:	bfd8      	it	le
 80149f6:	f109 32ff 	addle.w	r2, r9, #4294967295
 80149fa:	f04f 0400 	mov.w	r4, #0
 80149fe:	f8cd 9000 	str.w	r9, [sp]
 8014a02:	bfcc      	ite	gt
 8014a04:	4698      	movgt	r8, r3
 8014a06:	fb92 f8f3 	sdivle	r8, r2, r3
 8014a0a:	1c63      	adds	r3, r4, #1
 8014a0c:	aa10      	add	r2, sp, #64	@ 0x40
 8014a0e:	f004 0401 	and.w	r4, r4, #1
 8014a12:	f04f 0b00 	mov.w	fp, #0
 8014a16:	9308      	str	r3, [sp, #32]
 8014a18:	9b00      	ldr	r3, [sp, #0]
 8014a1a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014a1e:	fb93 f3f8 	sdiv	r3, r3, r8
 8014a22:	3404      	adds	r4, #4
 8014a24:	b29b      	uxth	r3, r3
 8014a26:	9304      	str	r3, [sp, #16]
 8014a28:	9a04      	ldr	r2, [sp, #16]
 8014a2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014a2e:	fb13 f302 	smulbb	r3, r3, r2
 8014a32:	9a01      	ldr	r2, [sp, #4]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	1899      	adds	r1, r3, r2
 8014a38:	9305      	str	r3, [sp, #20]
 8014a3a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014a3e:	b209      	sxth	r1, r1
 8014a40:	4299      	cmp	r1, r3
 8014a42:	db4d      	blt.n	8014ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014a44:	8932      	ldrh	r2, [r6, #8]
 8014a46:	4413      	add	r3, r2
 8014a48:	b21b      	sxth	r3, r3
 8014a4a:	4299      	cmp	r1, r3
 8014a4c:	da48      	bge.n	8014ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014a4e:	9b04      	ldr	r3, [sp, #16]
 8014a50:	6827      	ldr	r7, [r4, #0]
 8014a52:	fb17 f703 	smulbb	r7, r7, r3
 8014a56:	9b02      	ldr	r3, [sp, #8]
 8014a58:	b2bf      	uxth	r7, r7
 8014a5a:	18fa      	adds	r2, r7, r3
 8014a5c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014a60:	b212      	sxth	r2, r2
 8014a62:	429a      	cmp	r2, r3
 8014a64:	db3c      	blt.n	8014ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014a66:	8970      	ldrh	r0, [r6, #10]
 8014a68:	4403      	add	r3, r0
 8014a6a:	b21b      	sxth	r3, r3
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	da37      	bge.n	8014ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014a70:	2300      	movs	r3, #0
 8014a72:	4630      	mov	r0, r6
 8014a74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a76:	ab0b      	add	r3, sp, #44	@ 0x2c
 8014a78:	f7ff ff36 	bl	80148e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014a7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a7e:	b37a      	cbz	r2, 8014ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014a80:	4552      	cmp	r2, sl
 8014a82:	d02d      	beq.n	8014ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014a84:	4611      	mov	r1, r2
 8014a86:	a80e      	add	r0, sp, #56	@ 0x38
 8014a88:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a8a:	f007 fc09 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a8e:	f04f 0e02 	mov.w	lr, #2
 8014a92:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8014a96:	9a06      	ldr	r2, [sp, #24]
 8014a98:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8014a9c:	9b01      	ldr	r3, [sp, #4]
 8014a9e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8014aa2:	4413      	add	r3, r2
 8014aa4:	9a07      	ldr	r2, [sp, #28]
 8014aa6:	fb91 f1fe 	sdiv	r1, r1, lr
 8014aaa:	fb9c fcfe 	sdiv	ip, ip, lr
 8014aae:	4401      	add	r1, r0
 8014ab0:	1a58      	subs	r0, r3, r1
 8014ab2:	9b02      	ldr	r3, [sp, #8]
 8014ab4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8014ab8:	4413      	add	r3, r2
 8014aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014abc:	448c      	add	ip, r1
 8014abe:	eba3 030c 	sub.w	r3, r3, ip
 8014ac2:	435b      	muls	r3, r3
 8014ac4:	fb00 3300 	mla	r3, r0, r0, r3
 8014ac8:	42ab      	cmp	r3, r5
 8014aca:	d208      	bcs.n	8014ade <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8014acc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014ace:	461d      	mov	r5, r3
 8014ad0:	9803      	ldr	r0, [sp, #12]
 8014ad2:	6001      	str	r1, [r0, #0]
 8014ad4:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8014ad6:	9805      	ldr	r0, [sp, #20]
 8014ad8:	8008      	strh	r0, [r1, #0]
 8014ada:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014adc:	800f      	strh	r7, [r1, #0]
 8014ade:	4692      	mov	sl, r2
 8014ae0:	f10b 0b01 	add.w	fp, fp, #1
 8014ae4:	3408      	adds	r4, #8
 8014ae6:	f1bb 0f04 	cmp.w	fp, #4
 8014aea:	d19d      	bne.n	8014a28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8014aec:	9b00      	ldr	r3, [sp, #0]
 8014aee:	9c08      	ldr	r4, [sp, #32]
 8014af0:	444b      	add	r3, r9
 8014af2:	4544      	cmp	r4, r8
 8014af4:	9300      	str	r3, [sp, #0]
 8014af6:	d188      	bne.n	8014a0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8014af8:	b021      	add	sp, #132	@ 0x84
 8014afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014afe:	f04f 35ff 	mov.w	r5, #4294967295
 8014b02:	e767      	b.n	80149d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014b04:	200122c4 	.word	0x200122c4
 8014b08:	0802fd94 	.word	0x0802fd94

08014b0c <_ZN8touchgfx4RectaNERKS0_>:
 8014b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b10:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014b14:	888c      	ldrh	r4, [r1, #4]
 8014b16:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014b1a:	443c      	add	r4, r7
 8014b1c:	b2a4      	uxth	r4, r4
 8014b1e:	fa0f f884 	sxth.w	r8, r4
 8014b22:	45c1      	cmp	r9, r8
 8014b24:	da2f      	bge.n	8014b86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014b26:	8882      	ldrh	r2, [r0, #4]
 8014b28:	444a      	add	r2, r9
 8014b2a:	b292      	uxth	r2, r2
 8014b2c:	fa0f fe82 	sxth.w	lr, r2
 8014b30:	4577      	cmp	r7, lr
 8014b32:	da28      	bge.n	8014b86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014b34:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014b38:	88cb      	ldrh	r3, [r1, #6]
 8014b3a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014b3e:	442b      	add	r3, r5
 8014b40:	b21b      	sxth	r3, r3
 8014b42:	429e      	cmp	r6, r3
 8014b44:	da1f      	bge.n	8014b86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014b46:	88c3      	ldrh	r3, [r0, #6]
 8014b48:	4433      	add	r3, r6
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	fa0f fc83 	sxth.w	ip, r3
 8014b50:	4565      	cmp	r5, ip
 8014b52:	da18      	bge.n	8014b86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014b54:	454f      	cmp	r7, r9
 8014b56:	bfb8      	it	lt
 8014b58:	464f      	movlt	r7, r9
 8014b5a:	42b5      	cmp	r5, r6
 8014b5c:	bfb8      	it	lt
 8014b5e:	4635      	movlt	r5, r6
 8014b60:	45f0      	cmp	r8, lr
 8014b62:	bfd8      	it	le
 8014b64:	4622      	movle	r2, r4
 8014b66:	1bd2      	subs	r2, r2, r7
 8014b68:	8082      	strh	r2, [r0, #4]
 8014b6a:	884a      	ldrh	r2, [r1, #2]
 8014b6c:	88c9      	ldrh	r1, [r1, #6]
 8014b6e:	8007      	strh	r7, [r0, #0]
 8014b70:	440a      	add	r2, r1
 8014b72:	8045      	strh	r5, [r0, #2]
 8014b74:	b292      	uxth	r2, r2
 8014b76:	b211      	sxth	r1, r2
 8014b78:	458c      	cmp	ip, r1
 8014b7a:	bfa8      	it	ge
 8014b7c:	4613      	movge	r3, r2
 8014b7e:	1b5b      	subs	r3, r3, r5
 8014b80:	80c3      	strh	r3, [r0, #6]
 8014b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b86:	2300      	movs	r3, #0
 8014b88:	8003      	strh	r3, [r0, #0]
 8014b8a:	8043      	strh	r3, [r0, #2]
 8014b8c:	8083      	strh	r3, [r0, #4]
 8014b8e:	80c3      	strh	r3, [r0, #6]
 8014b90:	e7f7      	b.n	8014b82 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014b92 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014b92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	dd06      	ble.n	8014ba8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014b9a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	bfcc      	ite	gt
 8014ba2:	2000      	movgt	r0, #0
 8014ba4:	2001      	movle	r0, #1
 8014ba6:	4770      	bx	lr
 8014ba8:	2001      	movs	r0, #1
 8014baa:	4770      	bx	lr

08014bac <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	4604      	mov	r4, r0
 8014bb4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014bb6:	8003      	strh	r3, [r0, #0]
 8014bb8:	8043      	strh	r3, [r0, #2]
 8014bba:	8083      	strh	r3, [r0, #4]
 8014bbc:	80c3      	strh	r3, [r0, #6]
 8014bbe:	2d00      	cmp	r5, #0
 8014bc0:	d040      	beq.n	8014c44 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014bc2:	1d28      	adds	r0, r5, #4
 8014bc4:	f7ff ffe5 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014bc8:	b988      	cbnz	r0, 8014bee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f7ff ffe1 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014bd0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014bd4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014bd8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014bdc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014be0:	b138      	cbz	r0, 8014bf2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014be2:	8022      	strh	r2, [r4, #0]
 8014be4:	8063      	strh	r3, [r4, #2]
 8014be6:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014bea:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014bee:	69ad      	ldr	r5, [r5, #24]
 8014bf0:	e7e5      	b.n	8014bbe <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014bf2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014bf6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014bfa:	4290      	cmp	r0, r2
 8014bfc:	4607      	mov	r7, r0
 8014bfe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014c02:	460e      	mov	r6, r1
 8014c04:	bfa8      	it	ge
 8014c06:	4617      	movge	r7, r2
 8014c08:	4299      	cmp	r1, r3
 8014c0a:	4472      	add	r2, lr
 8014c0c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014c10:	bfa8      	it	ge
 8014c12:	461e      	movge	r6, r3
 8014c14:	4440      	add	r0, r8
 8014c16:	4471      	add	r1, lr
 8014c18:	4463      	add	r3, ip
 8014c1a:	b200      	sxth	r0, r0
 8014c1c:	8027      	strh	r7, [r4, #0]
 8014c1e:	b212      	sxth	r2, r2
 8014c20:	8066      	strh	r6, [r4, #2]
 8014c22:	b209      	sxth	r1, r1
 8014c24:	b21b      	sxth	r3, r3
 8014c26:	4290      	cmp	r0, r2
 8014c28:	bfac      	ite	ge
 8014c2a:	ebc7 0200 	rsbge	r2, r7, r0
 8014c2e:	ebc7 0202 	rsblt	r2, r7, r2
 8014c32:	4299      	cmp	r1, r3
 8014c34:	bfac      	ite	ge
 8014c36:	ebc6 0301 	rsbge	r3, r6, r1
 8014c3a:	ebc6 0303 	rsblt	r3, r6, r3
 8014c3e:	80a2      	strh	r2, [r4, #4]
 8014c40:	80e3      	strh	r3, [r4, #6]
 8014c42:	e7d4      	b.n	8014bee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014c44:	4620      	mov	r0, r4
 8014c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014c4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014c4e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014c52:	b383      	cbz	r3, 8014cb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014c54:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014c56:	b374      	cbz	r4, 8014cb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014c58:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014c5c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014c60:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014c64:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014c68:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014c6c:	b303      	cbz	r3, 8014cb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014c6e:	4668      	mov	r0, sp
 8014c70:	1d21      	adds	r1, r4, #4
 8014c72:	f8ad 5000 	strh.w	r5, [sp]
 8014c76:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014c7a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014c7e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014c82:	f7ff ff43 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8014c86:	4668      	mov	r0, sp
 8014c88:	f7ff ff83 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c8c:	b980      	cbnz	r0, 8014cb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014c8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c92:	4669      	mov	r1, sp
 8014c94:	88a2      	ldrh	r2, [r4, #4]
 8014c96:	4620      	mov	r0, r4
 8014c98:	1a9b      	subs	r3, r3, r2
 8014c9a:	88e2      	ldrh	r2, [r4, #6]
 8014c9c:	f8ad 3000 	strh.w	r3, [sp]
 8014ca0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014ca4:	1a9b      	subs	r3, r3, r2
 8014ca6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	689b      	ldr	r3, [r3, #8]
 8014cae:	4798      	blx	r3
 8014cb0:	69a4      	ldr	r4, [r4, #24]
 8014cb2:	2c00      	cmp	r4, #0
 8014cb4:	d1d8      	bne.n	8014c68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014cb6:	b002      	add	sp, #8
 8014cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014cbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014cbe:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014cc2:	460d      	mov	r5, r1
 8014cc4:	4616      	mov	r6, r2
 8014cc6:	b323      	cbz	r3, 8014d12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014cc8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014cca:	b314      	cbz	r4, 8014d12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014ccc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014cd0:	b1eb      	cbz	r3, 8014d0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014cd2:	6828      	ldr	r0, [r5, #0]
 8014cd4:	466b      	mov	r3, sp
 8014cd6:	6869      	ldr	r1, [r5, #4]
 8014cd8:	c303      	stmia	r3!, {r0, r1}
 8014cda:	4668      	mov	r0, sp
 8014cdc:	1d21      	adds	r1, r4, #4
 8014cde:	f7ff ff15 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8014ce2:	4668      	mov	r0, sp
 8014ce4:	f7ff ff55 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014ce8:	b988      	cbnz	r0, 8014d0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014cea:	f8bd 3000 	ldrh.w	r3, [sp]
 8014cee:	4669      	mov	r1, sp
 8014cf0:	88a2      	ldrh	r2, [r4, #4]
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	1a9b      	subs	r3, r3, r2
 8014cf6:	88e2      	ldrh	r2, [r4, #6]
 8014cf8:	f8ad 3000 	strh.w	r3, [sp]
 8014cfc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014d00:	1a9b      	subs	r3, r3, r2
 8014d02:	4632      	mov	r2, r6
 8014d04:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014d08:	6823      	ldr	r3, [r4, #0]
 8014d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d0c:	4798      	blx	r3
 8014d0e:	69a4      	ldr	r4, [r4, #24]
 8014d10:	e7db      	b.n	8014cca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014d12:	b002      	add	sp, #8
 8014d14:	bd70      	pop	{r4, r5, r6, pc}

08014d16 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8014d16:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 8014d1a:	4770      	bx	lr

08014d1c <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8014d1c:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	@ 0xe6
 8014d20:	4770      	bx	lr

08014d22 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8014d22:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 8014d26:	4770      	bx	lr

08014d28 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8014d28:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 8014d2c:	4770      	bx	lr

08014d2e <_ZN8touchgfx6Slider8setValueEs>:
 8014d2e:	b570      	push	{r4, r5, r6, lr}
 8014d30:	6803      	ldr	r3, [r0, #0]
 8014d32:	4604      	mov	r4, r0
 8014d34:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	@ 0xac
 8014d38:	4798      	blx	r3
 8014d3a:	4601      	mov	r1, r0
 8014d3c:	462b      	mov	r3, r5
 8014d3e:	4620      	mov	r0, r4
 8014d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d44:	4718      	bx	r3

08014d46 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8014d46:	b570      	push	{r4, r5, r6, lr}
 8014d48:	6803      	ldr	r3, [r0, #0]
 8014d4a:	4604      	mov	r4, r0
 8014d4c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014d50:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 8014d54:	b95a      	cbnz	r2, 8014d6e <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 8014d56:	894d      	ldrh	r5, [r1, #10]
 8014d58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	4798      	blx	r3
 8014d60:	1a29      	subs	r1, r5, r0
 8014d62:	4633      	mov	r3, r6
 8014d64:	4620      	mov	r0, r4
 8014d66:	b209      	sxth	r1, r1
 8014d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d6c:	4718      	bx	r3
 8014d6e:	898d      	ldrh	r5, [r1, #12]
 8014d70:	e7f2      	b.n	8014d58 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

08014d72 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8014d72:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014d76:	2302      	movs	r3, #2
 8014d78:	b922      	cbnz	r2, 8014d84 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 8014d7a:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	@ 0x94
 8014d7e:	fb90 f0f3 	sdiv	r0, r0, r3
 8014d82:	4770      	bx	lr
 8014d84:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	@ 0x96
 8014d88:	e7f9      	b.n	8014d7e <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08014d8a <_ZN8touchgfx6Slider13setValueRangeEsss>:
 8014d8a:	8642      	strh	r2, [r0, #50]	@ 0x32
 8014d8c:	6802      	ldr	r2, [r0, #0]
 8014d8e:	8601      	strh	r1, [r0, #48]	@ 0x30
 8014d90:	4619      	mov	r1, r3
 8014d92:	b410      	push	{r4}
 8014d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d98:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8014d9c:	4710      	bx	r2

08014d9e <_ZN8touchgfx6Slider13setValueRangeEss>:
 8014d9e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8014da2:	428b      	cmp	r3, r1
 8014da4:	b410      	push	{r4}
 8014da6:	db09      	blt.n	8014dbc <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 8014da8:	4293      	cmp	r3, r2
 8014daa:	bfa8      	it	ge
 8014dac:	4613      	movge	r3, r2
 8014dae:	6804      	ldr	r4, [r0, #0]
 8014db0:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
 8014db4:	46a4      	mov	ip, r4
 8014db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dba:	4760      	bx	ip
 8014dbc:	460b      	mov	r3, r1
 8014dbe:	e7f6      	b.n	8014dae <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

08014dc0 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8014dc0:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	@ 0xe6
 8014dc4:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 8014dc8:	1a10      	subs	r0, r2, r0
 8014dca:	4770      	bx	lr

08014dcc <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8014dcc:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 8014dd0:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 8014dd4:	1a10      	subs	r0, r2, r0
 8014dd6:	4770      	bx	lr

08014dd8 <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8014dd8:	b570      	push	{r4, r5, r6, lr}
 8014dda:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	@ 0x32
 8014dde:	4604      	mov	r4, r0
 8014de0:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 8014de4:	428d      	cmp	r5, r1
 8014de6:	bfa8      	it	ge
 8014de8:	460d      	movge	r5, r1
 8014dea:	429d      	cmp	r5, r3
 8014dec:	bfac      	ite	ge
 8014dee:	ebc3 0505 	rsbge	r5, r3, r5
 8014df2:	ebc3 0503 	rsblt	r5, r3, r3
 8014df6:	6803      	ldr	r3, [r0, #0]
 8014df8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014dfc:	4798      	blx	r3
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	4606      	mov	r6, r0
 8014e02:	4620      	mov	r0, r4
 8014e04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014e08:	4798      	blx	r3
 8014e0a:	4631      	mov	r1, r6
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f007 fb75 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 8014e14:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	bf0b      	itete	eq
 8014e1c:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	@ 0xe6
 8014e20:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	@ 0xe4
 8014e24:	1a18      	subeq	r0, r3, r0
 8014e26:	18c0      	addne	r0, r0, r3
 8014e28:	b200      	sxth	r0, r0
 8014e2a:	bd70      	pop	{r4, r5, r6, pc}

08014e2c <_ZNK8touchgfx6Slider15positionToValueEs>:
 8014e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e2e:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	@ 0xe6
 8014e32:	4605      	mov	r5, r0
 8014e34:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	@ 0xe4
 8014e38:	4299      	cmp	r1, r3
 8014e3a:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014e3e:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	@ 0x30
 8014e42:	bfa8      	it	ge
 8014e44:	4619      	movge	r1, r3
 8014e46:	42a1      	cmp	r1, r4
 8014e48:	bfb8      	it	lt
 8014e4a:	4621      	movlt	r1, r4
 8014e4c:	2a01      	cmp	r2, #1
 8014e4e:	b289      	uxth	r1, r1
 8014e50:	bf08      	it	eq
 8014e52:	1a5c      	subeq	r4, r3, r1
 8014e54:	6803      	ldr	r3, [r0, #0]
 8014e56:	bf18      	it	ne
 8014e58:	1b0c      	subne	r4, r1, r4
 8014e5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014e5e:	4798      	blx	r3
 8014e60:	682b      	ldr	r3, [r5, #0]
 8014e62:	4607      	mov	r7, r0
 8014e64:	b224      	sxth	r4, r4
 8014e66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	4798      	blx	r3
 8014e6e:	4639      	mov	r1, r7
 8014e70:	4602      	mov	r2, r0
 8014e72:	4620      	mov	r0, r4
 8014e74:	f007 fb43 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 8014e78:	4430      	add	r0, r6
 8014e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e7c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8014e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e80:	790b      	ldrb	r3, [r1, #4]
 8014e82:	4604      	mov	r4, r0
 8014e84:	460d      	mov	r5, r1
 8014e86:	b32b      	cbz	r3, 8014ed4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d137      	bne.n	8014efc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014e8c:	6823      	ldr	r3, [r4, #0]
 8014e8e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014e92:	f8d3 70ac 	ldr.w	r7, [r3, #172]	@ 0xac
 8014e96:	2a00      	cmp	r2, #0
 8014e98:	d12e      	bne.n	8014ef8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014e9a:	88ee      	ldrh	r6, [r5, #6]
 8014e9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	4798      	blx	r3
 8014ea4:	1a31      	subs	r1, r6, r0
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	b209      	sxth	r1, r1
 8014eaa:	47b8      	blx	r7
 8014eac:	792b      	ldrb	r3, [r5, #4]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d124      	bne.n	8014efc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014eb2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8014eb6:	b308      	cbz	r0, 8014efc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014eb8:	6803      	ldr	r3, [r0, #0]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	4798      	blx	r3
 8014ebe:	b1e8      	cbz	r0, 8014efc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014ec0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8014ec4:	4621      	mov	r1, r4
 8014ec6:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8014eca:	6803      	ldr	r3, [r0, #0]
 8014ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed0:	689b      	ldr	r3, [r3, #8]
 8014ed2:	4718      	bx	r3
 8014ed4:	f8d0 00e8 	ldr.w	r0, [r0, #232]	@ 0xe8
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d0d7      	beq.n	8014e8c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014edc:	6803      	ldr	r3, [r0, #0]
 8014ede:	68db      	ldr	r3, [r3, #12]
 8014ee0:	4798      	blx	r3
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d0d2      	beq.n	8014e8c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014ee6:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 8014eea:	4621      	mov	r1, r4
 8014eec:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8014ef0:	6803      	ldr	r3, [r0, #0]
 8014ef2:	689b      	ldr	r3, [r3, #8]
 8014ef4:	4798      	blx	r3
 8014ef6:	e7c9      	b.n	8014e8c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014ef8:	892e      	ldrh	r6, [r5, #8]
 8014efa:	e7cf      	b.n	8014e9c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 8014efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f00 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8014f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f04:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	@ 0xe4
 8014f08:	4604      	mov	r4, r0
 8014f0a:	308c      	adds	r0, #140	@ 0x8c
 8014f0c:	4588      	cmp	r8, r1
 8014f0e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014f12:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 8014f16:	bfb8      	it	lt
 8014f18:	4688      	movlt	r8, r1
 8014f1a:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 8014f1e:	4588      	cmp	r8, r1
 8014f20:	bfa8      	it	ge
 8014f22:	4688      	movge	r8, r1
 8014f24:	fa1f f788 	uxth.w	r7, r8
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d130      	bne.n	8014f8e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 8014f2c:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	@ 0x92
 8014f30:	4641      	mov	r1, r8
 8014f32:	f7f5 fcdb 	bl	800a8ec <_ZN8touchgfx8Drawable6moveToEss>
 8014f36:	4630      	mov	r0, r6
 8014f38:	f007 f917 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f3c:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8014f40:	6823      	ldr	r3, [r4, #0]
 8014f42:	4620      	mov	r0, r4
 8014f44:	1abf      	subs	r7, r7, r2
 8014f46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014f4a:	b2bf      	uxth	r7, r7
 8014f4c:	4798      	blx	r3
 8014f4e:	4407      	add	r7, r0
 8014f50:	f8a4 70c0 	strh.w	r7, [r4, #192]	@ 0xc0
 8014f54:	4630      	mov	r0, r6
 8014f56:	f007 f908 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f5a:	6823      	ldr	r3, [r4, #0]
 8014f5c:	4641      	mov	r1, r8
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014f64:	4798      	blx	r3
 8014f66:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 8014f68:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	d03c      	beq.n	8014fea <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 8014f70:	6803      	ldr	r3, [r0, #0]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	4798      	blx	r3
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d037      	beq.n	8014fea <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 8014f7a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8014f7e:	4621      	mov	r1, r4
 8014f80:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8014f84:	6803      	ldr	r3, [r0, #0]
 8014f86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f8a:	689b      	ldr	r3, [r3, #8]
 8014f8c:	4718      	bx	r3
 8014f8e:	4642      	mov	r2, r8
 8014f90:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	@ 0x90
 8014f94:	f7f5 fcaa 	bl	800a8ec <_ZN8touchgfx8Drawable6moveToEss>
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f007 f8e6 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f9e:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 8014fa0:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
 8014fa2:	6823      	ldr	r3, [r4, #0]
 8014fa4:	4405      	add	r5, r0
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014fac:	b2ad      	uxth	r5, r5
 8014fae:	4798      	blx	r3
 8014fb0:	6823      	ldr	r3, [r4, #0]
 8014fb2:	1bed      	subs	r5, r5, r7
 8014fb4:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	@ 0xbc
 8014fb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014fbc:	1a2d      	subs	r5, r5, r0
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	4798      	blx	r3
 8014fc2:	4438      	add	r0, r7
 8014fc4:	b2ad      	uxth	r5, r5
 8014fc6:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	@ 0xc0
 8014fca:	b202      	sxth	r2, r0
 8014fcc:	4651      	mov	r1, sl
 8014fce:	4630      	mov	r0, r6
 8014fd0:	f7f5 fbe3 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	b22a      	sxth	r2, r5
 8014fd8:	4649      	mov	r1, r9
 8014fda:	f7f5 fc3a 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014fde:	f8b4 006a 	ldrh.w	r0, [r4, #106]	@ 0x6a
 8014fe2:	1a2d      	subs	r5, r5, r0
 8014fe4:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
 8014fe8:	e7b4      	b.n	8014f54 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 8014fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014fee <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 8014fee:	b570      	push	{r4, r5, r6, lr}
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8014ff6:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 8014ffa:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8014ffe:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8015002:	f7f5 fbca 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 8015006:	4632      	mov	r2, r6
 8015008:	4629      	mov	r1, r5
 801500a:	4620      	mov	r0, r4
 801500c:	f7f5 fc21 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015010:	bd70      	pop	{r4, r5, r6, pc}

08015012 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 8015012:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015016:	f04f 0a00 	mov.w	sl, #0
 801501a:	f100 0b34 	add.w	fp, r0, #52	@ 0x34
 801501e:	4604      	mov	r4, r0
 8015020:	461d      	mov	r5, r3
 8015022:	f880 a02c 	strb.w	sl, [r0, #44]	@ 0x2c
 8015026:	4658      	mov	r0, fp
 8015028:	4690      	mov	r8, r2
 801502a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801502e:	4689      	mov	r9, r1
 8015030:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8015034:	f7f5 fbb1 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 8015038:	4659      	mov	r1, fp
 801503a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 801503e:	f7ff ffd6 	bl	8014fee <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8015042:	4652      	mov	r2, sl
 8015044:	4651      	mov	r1, sl
 8015046:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 801504a:	f7f5 fba6 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 801504e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015050:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8015052:	4620      	mov	r0, r4
 8015054:	4490      	add	r8, r2
 8015056:	f8b4 2096 	ldrh.w	r2, [r4, #150]	@ 0x96
 801505a:	f8a4 5092 	strh.w	r5, [r4, #146]	@ 0x92
 801505e:	4489      	add	r9, r1
 8015060:	4415      	add	r5, r2
 8015062:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 8015066:	fa0f f288 	sxth.w	r2, r8
 801506a:	f8a4 70e4 	strh.w	r7, [r4, #228]	@ 0xe4
 801506e:	1873      	adds	r3, r6, r1
 8015070:	b22d      	sxth	r5, r5
 8015072:	fa0f f989 	sxth.w	r9, r9
 8015076:	f8a4 60e6 	strh.w	r6, [r4, #230]	@ 0xe6
 801507a:	b219      	sxth	r1, r3
 801507c:	42aa      	cmp	r2, r5
 801507e:	bfb8      	it	lt
 8015080:	462a      	movlt	r2, r5
 8015082:	4549      	cmp	r1, r9
 8015084:	bfb8      	it	lt
 8015086:	4649      	movlt	r1, r9
 8015088:	f7f5 fbe3 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801508c:	6823      	ldr	r3, [r4, #0]
 801508e:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8015092:	4620      	mov	r0, r4
 8015094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015098:	b001      	add	sp, #4
 801509a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509e:	4718      	bx	r3

080150a0 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 80150a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150a4:	461d      	mov	r5, r3
 80150a6:	f100 0a34 	add.w	sl, r0, #52	@ 0x34
 80150aa:	2301      	movs	r3, #1
 80150ac:	4604      	mov	r4, r0
 80150ae:	4617      	mov	r7, r2
 80150b0:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80150b4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80150b8:	4650      	mov	r0, sl
 80150ba:	460e      	mov	r6, r1
 80150bc:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 80150c0:	f7f5 fb6b 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 80150c4:	4651      	mov	r1, sl
 80150c6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80150ca:	f7ff ff90 	bl	8014fee <_ZN8touchgfx8Drawable11setPositionERKS0_>
 80150ce:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80150d0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80150d2:	4620      	mov	r0, r4
 80150d4:	f8b4 3096 	ldrh.w	r3, [r4, #150]	@ 0x96
 80150d8:	440e      	add	r6, r1
 80150da:	443a      	add	r2, r7
 80150dc:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 80150e0:	4443      	add	r3, r8
 80150e2:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 80150e6:	b212      	sxth	r2, r2
 80150e8:	440d      	add	r5, r1
 80150ea:	b21b      	sxth	r3, r3
 80150ec:	f8a4 90e4 	strh.w	r9, [r4, #228]	@ 0xe4
 80150f0:	b231      	sxth	r1, r6
 80150f2:	f8a4 80e6 	strh.w	r8, [r4, #230]	@ 0xe6
 80150f6:	429a      	cmp	r2, r3
 80150f8:	b22d      	sxth	r5, r5
 80150fa:	bfb8      	it	lt
 80150fc:	461a      	movlt	r2, r3
 80150fe:	42a9      	cmp	r1, r5
 8015100:	bfb8      	it	lt
 8015102:	4629      	movlt	r1, r5
 8015104:	f7f5 fba5 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015108:	6823      	ldr	r3, [r4, #0]
 801510a:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 801510e:	4620      	mov	r0, r4
 8015110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015114:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015118:	4718      	bx	r3
	...

0801511c <_ZN8touchgfx6SliderC1Ev>:
 801511c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015120:	4604      	mov	r4, r0
 8015122:	f7f5 fa67 	bl	800a5f4 <_ZN8touchgfx8DrawableC1Ev>
 8015126:	4b28      	ldr	r3, [pc, #160]	@ (80151c8 <_ZN8touchgfx6SliderC1Ev+0xac>)
 8015128:	2500      	movs	r5, #0
 801512a:	ae02      	add	r6, sp, #8
 801512c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015130:	6023      	str	r3, [r4, #0]
 8015132:	f104 0934 	add.w	r9, r4, #52	@ 0x34
 8015136:	2364      	movs	r3, #100	@ 0x64
 8015138:	f104 0a60 	add.w	sl, r4, #96	@ 0x60
 801513c:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8015140:	4648      	mov	r0, r9
 8015142:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015144:	4631      	mov	r1, r6
 8015146:	62a5      	str	r5, [r4, #40]	@ 0x28
 8015148:	f104 088c 	add.w	r8, r4, #140	@ 0x8c
 801514c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8015150:	85e5      	strh	r5, [r4, #46]	@ 0x2e
 8015152:	8625      	strh	r5, [r4, #48]	@ 0x30
 8015154:	f7f7 fd44 	bl	800cbe0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015158:	4631      	mov	r1, r6
 801515a:	4650      	mov	r0, sl
 801515c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015160:	f7f7 fd3e 	bl	800cbe0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015164:	4631      	mov	r1, r6
 8015166:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 801516a:	4640      	mov	r0, r8
 801516c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015170:	f7f7 fd36 	bl	800cbe0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015174:	4630      	mov	r0, r6
 8015176:	f7f5 fa3d 	bl	800a5f4 <_ZN8touchgfx8DrawableC1Ev>
 801517a:	4b14      	ldr	r3, [pc, #80]	@ (80151cc <_ZN8touchgfx6SliderC1Ev+0xb0>)
 801517c:	4651      	mov	r1, sl
 801517e:	4630      	mov	r0, r6
 8015180:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8015184:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015188:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 801518c:	e9c4 3539 	strd	r3, r5, [r4, #228]	@ 0xe4
 8015190:	2301      	movs	r3, #1
 8015192:	e9c4 553b 	strd	r5, r5, [r4, #236]	@ 0xec
 8015196:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801519a:	f7ff fb3b 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801519e:	4649      	mov	r1, r9
 80151a0:	4620      	mov	r0, r4
 80151a2:	f7ff fb37 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80151a6:	4631      	mov	r1, r6
 80151a8:	4620      	mov	r0, r4
 80151aa:	f7ff fb33 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80151ae:	4641      	mov	r1, r8
 80151b0:	4620      	mov	r0, r4
 80151b2:	f7ff fb2f 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80151b6:	4620      	mov	r0, r4
 80151b8:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	@ 0xe4
 80151bc:	f7ff fea0 	bl	8014f00 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 80151c0:	4620      	mov	r0, r4
 80151c2:	b002      	add	sp, #8
 80151c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151c8:	080313fc 	.word	0x080313fc
 80151cc:	0803136c 	.word	0x0803136c

080151d0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80151d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151d4:	4604      	mov	r4, r0
 80151d6:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 80151da:	4689      	mov	r9, r1
 80151dc:	461f      	mov	r7, r3
 80151de:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
 80151e2:	4630      	mov	r0, r6
 80151e4:	4690      	mov	r8, r2
 80151e6:	f006 ffc0 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 80151ea:	4628      	mov	r0, r5
 80151ec:	f006 ffbd 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 80151f0:	4649      	mov	r1, r9
 80151f2:	4630      	mov	r0, r6
 80151f4:	f003 fb26 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80151f8:	4641      	mov	r1, r8
 80151fa:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80151fe:	f003 fb21 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015202:	4639      	mov	r1, r7
 8015204:	4628      	mov	r0, r5
 8015206:	f003 fb1d 	bl	8018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801520a:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	@ 0x6a
 801520e:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	@ 0x68
 8015212:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8015216:	f7f5 fb1c 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801521a:	6823      	ldr	r3, [r4, #0]
 801521c:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8015220:	4620      	mov	r0, r4
 8015222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015226:	4798      	blx	r3
 8015228:	4630      	mov	r0, r6
 801522a:	f006 ff9e 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 801522e:	4628      	mov	r0, r5
 8015230:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015234:	f006 bf99 	b.w	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>

08015238 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015238:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801523c:	4770      	bx	lr

0801523e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801523e:	4770      	bx	lr

08015240 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015240:	4770      	bx	lr

08015242 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015242:	6803      	ldr	r3, [r0, #0]
 8015244:	b513      	push	{r0, r1, r4, lr}
 8015246:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 801524a:	2300      	movs	r3, #0
 801524c:	e9cd 3300 	strd	r3, r3, [sp]
 8015250:	466b      	mov	r3, sp
 8015252:	47a0      	blx	r4
 8015254:	b002      	add	sp, #8
 8015256:	bd10      	pop	{r4, pc}

08015258 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015258:	2301      	movs	r3, #1
 801525a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801525e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8015262:	4770      	bx	lr

08015264 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015264:	2301      	movs	r3, #1
 8015266:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801526a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801526e:	4770      	bx	lr

08015270 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015270:	6843      	ldr	r3, [r0, #4]
 8015272:	2201      	movs	r2, #1
 8015274:	725a      	strb	r2, [r3, #9]
 8015276:	6840      	ldr	r0, [r0, #4]
 8015278:	6803      	ldr	r3, [r0, #0]
 801527a:	691b      	ldr	r3, [r3, #16]
 801527c:	4718      	bx	r3

0801527e <_ZN8touchgfx3HAL8flushDMAEv>:
 801527e:	6840      	ldr	r0, [r0, #4]
 8015280:	6803      	ldr	r3, [r0, #0]
 8015282:	689b      	ldr	r3, [r3, #8]
 8015284:	4718      	bx	r3

08015286 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015286:	b530      	push	{r4, r5, lr}
 8015288:	b08b      	sub	sp, #44	@ 0x2c
 801528a:	6804      	ldr	r4, [r0, #0]
 801528c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8015290:	9509      	str	r5, [sp, #36]	@ 0x24
 8015292:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8015296:	9508      	str	r5, [sp, #32]
 8015298:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 801529c:	9507      	str	r5, [sp, #28]
 801529e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80152a2:	9506      	str	r5, [sp, #24]
 80152a4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80152a8:	9505      	str	r5, [sp, #20]
 80152aa:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80152ae:	9504      	str	r5, [sp, #16]
 80152b0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80152b4:	9503      	str	r5, [sp, #12]
 80152b6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80152ba:	9502      	str	r5, [sp, #8]
 80152bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80152c0:	e9cd 3500 	strd	r3, r5, [sp]
 80152c4:	4613      	mov	r3, r2
 80152c6:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80152c8:	2200      	movs	r2, #0
 80152ca:	47a0      	blx	r4
 80152cc:	b00b      	add	sp, #44	@ 0x2c
 80152ce:	bd30      	pop	{r4, r5, pc}

080152d0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80152d0:	4b04      	ldr	r3, [pc, #16]	@ (80152e4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	b123      	cbz	r3, 80152e0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80152d6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80152da:	f080 0001 	eor.w	r0, r0, #1
 80152de:	4770      	bx	lr
 80152e0:	2001      	movs	r0, #1
 80152e2:	4770      	bx	lr
 80152e4:	200122c2 	.word	0x200122c2

080152e8 <_ZN8touchgfx3HAL8endFrameEv>:
 80152e8:	b510      	push	{r4, lr}
 80152ea:	4604      	mov	r4, r0
 80152ec:	6840      	ldr	r0, [r0, #4]
 80152ee:	6803      	ldr	r3, [r0, #0]
 80152f0:	689b      	ldr	r3, [r3, #8]
 80152f2:	4798      	blx	r3
 80152f4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80152f8:	b113      	cbz	r3, 8015300 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80152fa:	2301      	movs	r3, #1
 80152fc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015300:	bd10      	pop	{r4, pc}

08015302 <_ZN8touchgfx3HAL10initializeEv>:
 8015302:	b510      	push	{r4, lr}
 8015304:	4604      	mov	r4, r0
 8015306:	f7fd f8d3 	bl	80124b0 <_ZN8touchgfx10OSWrappers10initializeEv>
 801530a:	f7fc fe39 	bl	8011f80 <_ZN8touchgfx4GPIO4initEv>
 801530e:	6860      	ldr	r0, [r4, #4]
 8015310:	6803      	ldr	r3, [r0, #0]
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	4798      	blx	r3
 8015316:	68e0      	ldr	r0, [r4, #12]
 8015318:	6803      	ldr	r3, [r0, #0]
 801531a:	689b      	ldr	r3, [r3, #8]
 801531c:	4798      	blx	r3
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	4620      	mov	r0, r4
 8015322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015328:	4718      	bx	r3

0801532a <_ZN8touchgfx3HAL9taskEntryEv>:
 801532a:	b508      	push	{r3, lr}
 801532c:	6803      	ldr	r3, [r0, #0]
 801532e:	4604      	mov	r4, r0
 8015330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015334:	4798      	blx	r3
 8015336:	6823      	ldr	r3, [r4, #0]
 8015338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801533a:	4620      	mov	r0, r4
 801533c:	4798      	blx	r3
 801533e:	f7fd f92b 	bl	8012598 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015346:	e7f8      	b.n	801533a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015348 <_ZN8touchgfx3HAL4tickEv>:
 8015348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801534a:	6803      	ldr	r3, [r0, #0]
 801534c:	4604      	mov	r4, r0
 801534e:	4d5b      	ldr	r5, [pc, #364]	@ (80154bc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8015350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015354:	4798      	blx	r3
 8015356:	2800      	cmp	r0, #0
 8015358:	f000 8095 	beq.w	8015486 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801535c:	2001      	movs	r0, #1
 801535e:	2600      	movs	r6, #0
 8015360:	f7fc fe16 	bl	8011f90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015364:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8015368:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 801536c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8015370:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8015374:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8015378:	b133      	cbz	r3, 8015388 <_ZN8touchgfx3HAL4tickEv+0x40>
 801537a:	6823      	ldr	r3, [r4, #0]
 801537c:	4620      	mov	r0, r4
 801537e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8015382:	4798      	blx	r3
 8015384:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8015388:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 801538c:	2601      	movs	r6, #1
 801538e:	6862      	ldr	r2, [r4, #4]
 8015390:	f083 0301 	eor.w	r3, r3, #1
 8015394:	702e      	strb	r6, [r5, #0]
 8015396:	7253      	strb	r3, [r2, #9]
 8015398:	f005 fdfc 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 801539c:	6803      	ldr	r3, [r0, #0]
 801539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153a0:	4798      	blx	r3
 80153a2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80153a6:	b90b      	cbnz	r3, 80153ac <_ZN8touchgfx3HAL4tickEv+0x64>
 80153a8:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80153ac:	f005 fdf2 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80153b0:	6803      	ldr	r3, [r0, #0]
 80153b2:	695b      	ldr	r3, [r3, #20]
 80153b4:	4798      	blx	r3
 80153b6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80153b8:	6803      	ldr	r3, [r0, #0]
 80153ba:	691b      	ldr	r3, [r3, #16]
 80153bc:	4798      	blx	r3
 80153be:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80153c2:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80153c6:	3b01      	subs	r3, #1
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80153ce:	b10a      	cbz	r2, 80153d4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1eb      	bne.n	80153ac <_ZN8touchgfx3HAL4tickEv+0x64>
 80153d4:	4a3a      	ldr	r2, [pc, #232]	@ (80154c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80153d6:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80153da:	7813      	ldrb	r3, [r2, #0]
 80153dc:	3301      	adds	r3, #1
 80153de:	b25b      	sxtb	r3, r3
 80153e0:	4299      	cmp	r1, r3
 80153e2:	7013      	strb	r3, [r2, #0]
 80153e4:	dc10      	bgt.n	8015408 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80153e6:	2300      	movs	r3, #0
 80153e8:	68e0      	ldr	r0, [r4, #12]
 80153ea:	a902      	add	r1, sp, #8
 80153ec:	7013      	strb	r3, [r2, #0]
 80153ee:	aa03      	add	r2, sp, #12
 80153f0:	6803      	ldr	r3, [r0, #0]
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	4798      	blx	r3
 80153f6:	6823      	ldr	r3, [r4, #0]
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d050      	beq.n	801549e <_ZN8touchgfx3HAL4tickEv+0x156>
 80153fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015400:	4620      	mov	r0, r4
 8015402:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015406:	4798      	blx	r3
 8015408:	2300      	movs	r3, #0
 801540a:	6960      	ldr	r0, [r4, #20]
 801540c:	f88d 3007 	strb.w	r3, [sp, #7]
 8015410:	b158      	cbz	r0, 801542a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015412:	6803      	ldr	r3, [r0, #0]
 8015414:	f10d 0107 	add.w	r1, sp, #7
 8015418:	68db      	ldr	r3, [r3, #12]
 801541a:	4798      	blx	r3
 801541c:	b128      	cbz	r0, 801542a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801541e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015420:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015424:	6803      	ldr	r3, [r0, #0]
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	4798      	blx	r3
 801542a:	f104 001c 	add.w	r0, r4, #28
 801542e:	f017 f971 	bl	802c714 <_ZN8touchgfx8Gestures4tickEv>
 8015432:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8015436:	b30b      	cbz	r3, 801547c <_ZN8touchgfx3HAL4tickEv+0x134>
 8015438:	6920      	ldr	r0, [r4, #16]
 801543a:	6803      	ldr	r3, [r0, #0]
 801543c:	691b      	ldr	r3, [r3, #16]
 801543e:	4798      	blx	r3
 8015440:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015442:	4606      	mov	r6, r0
 8015444:	b903      	cbnz	r3, 8015448 <_ZN8touchgfx3HAL4tickEv+0x100>
 8015446:	6760      	str	r0, [r4, #116]	@ 0x74
 8015448:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801544a:	4a1e      	ldr	r2, [pc, #120]	@ (80154c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801544c:	1af3      	subs	r3, r6, r3
 801544e:	4293      	cmp	r3, r2
 8015450:	d914      	bls.n	801547c <_ZN8touchgfx3HAL4tickEv+0x134>
 8015452:	6920      	ldr	r0, [r4, #16]
 8015454:	6803      	ldr	r3, [r0, #0]
 8015456:	699b      	ldr	r3, [r3, #24]
 8015458:	4798      	blx	r3
 801545a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801545c:	2264      	movs	r2, #100	@ 0x64
 801545e:	1af3      	subs	r3, r6, r3
 8015460:	fbb3 f3f2 	udiv	r3, r3, r2
 8015464:	fbb0 f0f3 	udiv	r0, r0, r3
 8015468:	2800      	cmp	r0, #0
 801546a:	dc1d      	bgt.n	80154a8 <_ZN8touchgfx3HAL4tickEv+0x160>
 801546c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8015470:	6920      	ldr	r0, [r4, #16]
 8015472:	2100      	movs	r1, #0
 8015474:	6803      	ldr	r3, [r0, #0]
 8015476:	69db      	ldr	r3, [r3, #28]
 8015478:	4798      	blx	r3
 801547a:	6766      	str	r6, [r4, #116]	@ 0x74
 801547c:	f005 fd8a 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8015480:	6803      	ldr	r3, [r0, #0]
 8015482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015484:	4798      	blx	r3
 8015486:	6823      	ldr	r3, [r4, #0]
 8015488:	4620      	mov	r0, r4
 801548a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801548e:	4798      	blx	r3
 8015490:	2001      	movs	r0, #1
 8015492:	f7fc fd99 	bl	8011fc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015496:	2300      	movs	r3, #0
 8015498:	702b      	strb	r3, [r5, #0]
 801549a:	b004      	add	sp, #16
 801549c:	bd70      	pop	{r4, r5, r6, pc}
 801549e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80154a2:	4620      	mov	r0, r4
 80154a4:	4798      	blx	r3
 80154a6:	e7af      	b.n	8015408 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80154a8:	2863      	cmp	r0, #99	@ 0x63
 80154aa:	bfcb      	itete	gt
 80154ac:	2300      	movgt	r3, #0
 80154ae:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80154b2:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80154b6:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80154ba:	e7d9      	b.n	8015470 <_ZN8touchgfx3HAL4tickEv+0x128>
 80154bc:	200122c8 	.word	0x200122c8
 80154c0:	200122c9 	.word	0x200122c9
 80154c4:	05f5e100 	.word	0x05f5e100

080154c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80154c8:	b510      	push	{r4, lr}
 80154ca:	4604      	mov	r4, r0
 80154cc:	f7fd f834 	bl	8012538 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80154d0:	2200      	movs	r2, #0
 80154d2:	6863      	ldr	r3, [r4, #4]
 80154d4:	729a      	strb	r2, [r3, #10]
 80154d6:	bd10      	pop	{r4, pc}

080154d8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80154d8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80154da:	301c      	adds	r0, #28
 80154dc:	f017 b918 	b.w	802c710 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080154e0 <_ZN8touchgfx3HAL5touchEll>:
 80154e0:	b530      	push	{r4, r5, lr}
 80154e2:	b087      	sub	sp, #28
 80154e4:	4604      	mov	r4, r0
 80154e6:	a804      	add	r0, sp, #16
 80154e8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80154ec:	f005 fb8a 	bl	801ac04 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80154f0:	9b04      	ldr	r3, [sp, #16]
 80154f2:	a906      	add	r1, sp, #24
 80154f4:	a803      	add	r0, sp, #12
 80154f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80154fa:	9b05      	ldr	r3, [sp, #20]
 80154fc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015500:	f005 fbd2 	bl	801aca8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015504:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8015508:	f104 001c 	add.w	r0, r4, #28
 801550c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015510:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015514:	b189      	cbz	r1, 801553a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015516:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 801551a:	9300      	str	r3, [sp, #0]
 801551c:	4613      	mov	r3, r2
 801551e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8015522:	462a      	mov	r2, r5
 8015524:	f017 f904 	bl	802c730 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015528:	b128      	cbz	r0, 8015536 <_ZN8touchgfx3HAL5touchEll+0x56>
 801552a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801552e:	6623      	str	r3, [r4, #96]	@ 0x60
 8015530:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015534:	6663      	str	r3, [r4, #100]	@ 0x64
 8015536:	b007      	add	sp, #28
 8015538:	bd30      	pop	{r4, r5, pc}
 801553a:	f017 f939 	bl	802c7b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801553e:	2301      	movs	r3, #1
 8015540:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015544:	e7f1      	b.n	801552a <_ZN8touchgfx3HAL5touchEll+0x4a>

08015546 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015546:	b510      	push	{r4, lr}
 8015548:	2b00      	cmp	r3, #0
 801554a:	d046      	beq.n	80155da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801554c:	ea81 0002 	eor.w	r0, r1, r2
 8015550:	07c4      	lsls	r4, r0, #31
 8015552:	d508      	bpl.n	8015566 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015554:	440b      	add	r3, r1
 8015556:	3a01      	subs	r2, #1
 8015558:	428b      	cmp	r3, r1
 801555a:	d93e      	bls.n	80155da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801555c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015560:	f801 0b01 	strb.w	r0, [r1], #1
 8015564:	e7f8      	b.n	8015558 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015566:	07d0      	lsls	r0, r2, #31
 8015568:	bf42      	ittt	mi
 801556a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801556e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015572:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015576:	2b01      	cmp	r3, #1
 8015578:	d911      	bls.n	801559e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801557a:	ea81 0402 	eor.w	r4, r1, r2
 801557e:	4610      	mov	r0, r2
 8015580:	07a4      	lsls	r4, r4, #30
 8015582:	d022      	beq.n	80155ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015584:	f023 0401 	bic.w	r4, r3, #1
 8015588:	440c      	add	r4, r1
 801558a:	428c      	cmp	r4, r1
 801558c:	4602      	mov	r2, r0
 801558e:	d904      	bls.n	801559a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015590:	8812      	ldrh	r2, [r2, #0]
 8015592:	3002      	adds	r0, #2
 8015594:	f821 2b02 	strh.w	r2, [r1], #2
 8015598:	e7f7      	b.n	801558a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801559a:	f003 0301 	and.w	r3, r3, #1
 801559e:	f023 0003 	bic.w	r0, r3, #3
 80155a2:	4408      	add	r0, r1
 80155a4:	4288      	cmp	r0, r1
 80155a6:	4614      	mov	r4, r2
 80155a8:	d904      	bls.n	80155b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80155aa:	6824      	ldr	r4, [r4, #0]
 80155ac:	3204      	adds	r2, #4
 80155ae:	f841 4b04 	str.w	r4, [r1], #4
 80155b2:	e7f7      	b.n	80155a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80155b4:	f003 0303 	and.w	r3, r3, #3
 80155b8:	3a01      	subs	r2, #1
 80155ba:	440b      	add	r3, r1
 80155bc:	428b      	cmp	r3, r1
 80155be:	d90c      	bls.n	80155da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80155c0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80155c4:	f801 0b01 	strb.w	r0, [r1], #1
 80155c8:	e7f8      	b.n	80155bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80155ca:	0790      	lsls	r0, r2, #30
 80155cc:	d0e7      	beq.n	801559e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80155ce:	f832 0b02 	ldrh.w	r0, [r2], #2
 80155d2:	3b02      	subs	r3, #2
 80155d4:	f821 0b02 	strh.w	r0, [r1], #2
 80155d8:	e7e1      	b.n	801559e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80155da:	2001      	movs	r0, #1
 80155dc:	bd10      	pop	{r4, pc}

080155de <_ZN8touchgfx3HAL7noTouchEv>:
 80155de:	b510      	push	{r4, lr}
 80155e0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80155e4:	4604      	mov	r4, r0
 80155e6:	b153      	cbz	r3, 80155fe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80155e8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80155ec:	2101      	movs	r1, #1
 80155ee:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80155f2:	301c      	adds	r0, #28
 80155f4:	f017 f8dc 	bl	802c7b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80155f8:	2300      	movs	r3, #0
 80155fa:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80155fe:	bd10      	pop	{r4, pc}

08015600 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015604:	b085      	sub	sp, #20
 8015606:	4604      	mov	r4, r0
 8015608:	2000      	movs	r0, #0
 801560a:	4699      	mov	r9, r3
 801560c:	ad04      	add	r5, sp, #16
 801560e:	460f      	mov	r7, r1
 8015610:	4690      	mov	r8, r2
 8015612:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015616:	69a0      	ldr	r0, [r4, #24]
 8015618:	6806      	ldr	r6, [r0, #0]
 801561a:	9501      	str	r5, [sp, #4]
 801561c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015620:	9500      	str	r5, [sp, #0]
 8015622:	6835      	ldr	r5, [r6, #0]
 8015624:	47a8      	blx	r5
 8015626:	4d10      	ldr	r5, [pc, #64]	@ (8015668 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015628:	4606      	mov	r6, r0
 801562a:	f8a5 9000 	strh.w	r9, [r5]
 801562e:	f7f5 fa8f 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015636:	4798      	blx	r3
 8015638:	b128      	cbz	r0, 8015646 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801563a:	2801      	cmp	r0, #1
 801563c:	d00b      	beq.n	8015656 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801563e:	4630      	mov	r0, r6
 8015640:	b005      	add	sp, #20
 8015642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015646:	882b      	ldrh	r3, [r5, #0]
 8015648:	fb08 7203 	mla	r2, r8, r3, r7
 801564c:	9b03      	ldr	r3, [sp, #12]
 801564e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015652:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015654:	e7f3      	b.n	801563e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015656:	882a      	ldrh	r2, [r5, #0]
 8015658:	9b03      	ldr	r3, [sp, #12]
 801565a:	fb08 7202 	mla	r2, r8, r2, r7
 801565e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015662:	1a9a      	subs	r2, r3, r2
 8015664:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8015666:	e7ea      	b.n	801563e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015668:	200122be 	.word	0x200122be

0801566c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801566e:	b08b      	sub	sp, #44	@ 0x2c
 8015670:	4617      	mov	r7, r2
 8015672:	4604      	mov	r4, r0
 8015674:	460e      	mov	r6, r1
 8015676:	461d      	mov	r5, r3
 8015678:	f7f5 fa6a 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 801567c:	6803      	ldr	r3, [r0, #0]
 801567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015680:	4798      	blx	r3
 8015682:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8015686:	9007      	str	r0, [sp, #28]
 8015688:	4631      	mov	r1, r6
 801568a:	6822      	ldr	r2, [r4, #0]
 801568c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015690:	4b0c      	ldr	r3, [pc, #48]	@ (80156c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015692:	4620      	mov	r0, r4
 8015694:	881b      	ldrh	r3, [r3, #0]
 8015696:	9306      	str	r3, [sp, #24]
 8015698:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801569c:	9305      	str	r3, [sp, #20]
 801569e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80156a2:	9304      	str	r3, [sp, #16]
 80156a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80156a8:	9303      	str	r3, [sp, #12]
 80156aa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80156ae:	9302      	str	r3, [sp, #8]
 80156b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80156b4:	e9cd 5300 	strd	r5, r3, [sp]
 80156b8:	463b      	mov	r3, r7
 80156ba:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80156bc:	2200      	movs	r2, #0
 80156be:	47a8      	blx	r5
 80156c0:	b00b      	add	sp, #44	@ 0x2c
 80156c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c4:	200122be 	.word	0x200122be

080156c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80156c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156cc:	4698      	mov	r8, r3
 80156ce:	6803      	ldr	r3, [r0, #0]
 80156d0:	b08b      	sub	sp, #44	@ 0x2c
 80156d2:	4617      	mov	r7, r2
 80156d4:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80156d6:	460e      	mov	r6, r1
 80156d8:	4b13      	ldr	r3, [pc, #76]	@ (8015728 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80156da:	4604      	mov	r4, r0
 80156dc:	f8b3 9000 	ldrh.w	r9, [r3]
 80156e0:	f7f5 fa36 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 80156e4:	6803      	ldr	r3, [r0, #0]
 80156e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156e8:	4798      	blx	r3
 80156ea:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80156ee:	2200      	movs	r2, #0
 80156f0:	4631      	mov	r1, r6
 80156f2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80156f6:	2302      	movs	r3, #2
 80156f8:	4620      	mov	r0, r4
 80156fa:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80156fe:	2301      	movs	r3, #1
 8015700:	9305      	str	r3, [sp, #20]
 8015702:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8015706:	9304      	str	r3, [sp, #16]
 8015708:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801570c:	9303      	str	r3, [sp, #12]
 801570e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015712:	9302      	str	r3, [sp, #8]
 8015714:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015718:	e9cd 8300 	strd	r8, r3, [sp]
 801571c:	463b      	mov	r3, r7
 801571e:	47a8      	blx	r5
 8015720:	b00b      	add	sp, #44	@ 0x2c
 8015722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015726:	bf00      	nop
 8015728:	200122be 	.word	0x200122be

0801572c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801572c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015730:	4698      	mov	r8, r3
 8015732:	6803      	ldr	r3, [r0, #0]
 8015734:	b087      	sub	sp, #28
 8015736:	460e      	mov	r6, r1
 8015738:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 801573a:	4617      	mov	r7, r2
 801573c:	4b0f      	ldr	r3, [pc, #60]	@ (801577c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801573e:	4604      	mov	r4, r0
 8015740:	f8b3 9000 	ldrh.w	r9, [r3]
 8015744:	f7f5 fa04 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8015748:	6803      	ldr	r3, [r0, #0]
 801574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801574c:	4798      	blx	r3
 801574e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8015752:	463a      	mov	r2, r7
 8015754:	4631      	mov	r1, r6
 8015756:	f8cd 900c 	str.w	r9, [sp, #12]
 801575a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801575e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8015762:	4620      	mov	r0, r4
 8015764:	9302      	str	r3, [sp, #8]
 8015766:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801576a:	9301      	str	r3, [sp, #4]
 801576c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015770:	9300      	str	r3, [sp, #0]
 8015772:	4643      	mov	r3, r8
 8015774:	47a8      	blx	r5
 8015776:	b007      	add	sp, #28
 8015778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801577c:	200122be 	.word	0x200122be

08015780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015784:	4604      	mov	r4, r0
 8015786:	b08f      	sub	sp, #60	@ 0x3c
 8015788:	4610      	mov	r0, r2
 801578a:	460d      	mov	r5, r1
 801578c:	4691      	mov	r9, r2
 801578e:	461e      	mov	r6, r3
 8015790:	f008 fd90 	bl	801e2b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015794:	2800      	cmp	r0, #0
 8015796:	f000 809d 	beq.w	80158d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801579a:	6823      	ldr	r3, [r4, #0]
 801579c:	4620      	mov	r0, r4
 801579e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8015938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80157a2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80157a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157a8:	4798      	blx	r3
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	4620      	mov	r0, r4
 80157ae:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 801593c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80157b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157b4:	4798      	blx	r3
 80157b6:	f8bb 3000 	ldrh.w	r3, [fp]
 80157ba:	4f5c      	ldr	r7, [pc, #368]	@ (801592c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80157bc:	9301      	str	r3, [sp, #4]
 80157be:	f8ba 3000 	ldrh.w	r3, [sl]
 80157c2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80157c6:	4640      	mov	r0, r8
 80157c8:	9302      	str	r3, [sp, #8]
 80157ca:	883b      	ldrh	r3, [r7, #0]
 80157cc:	9303      	str	r3, [sp, #12]
 80157ce:	4b58      	ldr	r3, [pc, #352]	@ (8015930 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80157d0:	881a      	ldrh	r2, [r3, #0]
 80157d2:	9305      	str	r3, [sp, #20]
 80157d4:	9204      	str	r2, [sp, #16]
 80157d6:	f008 febd 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80157da:	8038      	strh	r0, [r7, #0]
 80157dc:	4640      	mov	r0, r8
 80157de:	f008 feed 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80157e2:	9b05      	ldr	r3, [sp, #20]
 80157e4:	b280      	uxth	r0, r0
 80157e6:	8018      	strh	r0, [r3, #0]
 80157e8:	4b52      	ldr	r3, [pc, #328]	@ (8015934 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d174      	bne.n	80158da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80157f0:	883b      	ldrh	r3, [r7, #0]
 80157f2:	f8aa 0000 	strh.w	r0, [sl]
 80157f6:	f8ab 3000 	strh.w	r3, [fp]
 80157fa:	4648      	mov	r0, r9
 80157fc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8015800:	f008 fd58 	bl	801e2b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015804:	2200      	movs	r2, #0
 8015806:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801580a:	4611      	mov	r1, r2
 801580c:	4628      	mov	r0, r5
 801580e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015812:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015816:	f7f4 ffc0 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 801581a:	2301      	movs	r3, #1
 801581c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8015820:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8015824:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	dd5c      	ble.n	80158e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801582c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015830:	2b00      	cmp	r3, #0
 8015832:	dd58      	ble.n	80158e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015834:	462a      	mov	r2, r5
 8015836:	ab0a      	add	r3, sp, #40	@ 0x28
 8015838:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801583c:	6851      	ldr	r1, [r2, #4]
 801583e:	c303      	stmia	r3!, {r0, r1}
 8015840:	4631      	mov	r1, r6
 8015842:	a80a      	add	r0, sp, #40	@ 0x28
 8015844:	f7ff f962 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8015848:	4b38      	ldr	r3, [pc, #224]	@ (801592c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801584a:	2100      	movs	r1, #0
 801584c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015850:	4b37      	ldr	r3, [pc, #220]	@ (8015930 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015852:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015856:	aa0a      	add	r2, sp, #40	@ 0x28
 8015858:	f9b3 3000 	ldrsh.w	r3, [r3]
 801585c:	910c      	str	r1, [sp, #48]	@ 0x30
 801585e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015862:	ab08      	add	r3, sp, #32
 8015864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015868:	e883 0003 	stmia.w	r3, {r0, r1}
 801586c:	4618      	mov	r0, r3
 801586e:	a90c      	add	r1, sp, #48	@ 0x30
 8015870:	f7ff f94c 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8015874:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015876:	2b00      	cmp	r3, #0
 8015878:	d13c      	bne.n	80158f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801587a:	2000      	movs	r0, #0
 801587c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8015880:	2600      	movs	r6, #0
 8015882:	696b      	ldr	r3, [r5, #20]
 8015884:	a908      	add	r1, sp, #32
 8015886:	682a      	ldr	r2, [r5, #0]
 8015888:	4628      	mov	r0, r5
 801588a:	9305      	str	r3, [sp, #20]
 801588c:	616e      	str	r6, [r5, #20]
 801588e:	6892      	ldr	r2, [r2, #8]
 8015890:	4790      	blx	r2
 8015892:	9b05      	ldr	r3, [sp, #20]
 8015894:	4652      	mov	r2, sl
 8015896:	4649      	mov	r1, r9
 8015898:	616b      	str	r3, [r5, #20]
 801589a:	4628      	mov	r0, r5
 801589c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80158a0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80158a4:	f7f4 ff79 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 80158a8:	9a01      	ldr	r2, [sp, #4]
 80158aa:	4b23      	ldr	r3, [pc, #140]	@ (8015938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80158ac:	4620      	mov	r0, r4
 80158ae:	801a      	strh	r2, [r3, #0]
 80158b0:	9a02      	ldr	r2, [sp, #8]
 80158b2:	4b22      	ldr	r3, [pc, #136]	@ (801593c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80158b4:	801a      	strh	r2, [r3, #0]
 80158b6:	9a03      	ldr	r2, [sp, #12]
 80158b8:	4b1c      	ldr	r3, [pc, #112]	@ (801592c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80158ba:	801a      	strh	r2, [r3, #0]
 80158bc:	4b1c      	ldr	r3, [pc, #112]	@ (8015930 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80158be:	9a04      	ldr	r2, [sp, #16]
 80158c0:	801a      	strh	r2, [r3, #0]
 80158c2:	6823      	ldr	r3, [r4, #0]
 80158c4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80158c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158ca:	4798      	blx	r3
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	4620      	mov	r0, r4
 80158d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158d2:	4798      	blx	r3
 80158d4:	b00f      	add	sp, #60	@ 0x3c
 80158d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158da:	883b      	ldrh	r3, [r7, #0]
 80158dc:	f8ab 0000 	strh.w	r0, [fp]
 80158e0:	f8aa 3000 	strh.w	r3, [sl]
 80158e4:	e789      	b.n	80157fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80158e6:	462a      	mov	r2, r5
 80158e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80158ea:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80158ee:	6851      	ldr	r1, [r2, #4]
 80158f0:	c303      	stmia	r3!, {r0, r1}
 80158f2:	e7a9      	b.n	8015848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80158f4:	a807      	add	r0, sp, #28
 80158f6:	f008 ffa3 	bl	801e840 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80158fa:	4606      	mov	r6, r0
 80158fc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015902:	4798      	blx	r3
 8015904:	4286      	cmp	r6, r0
 8015906:	d1b8      	bne.n	801587a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015908:	f7f5 f922 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 801590c:	6803      	ldr	r3, [r0, #0]
 801590e:	4606      	mov	r6, r0
 8015910:	a807      	add	r0, sp, #28
 8015912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015914:	9305      	str	r3, [sp, #20]
 8015916:	f008 ff93 	bl	801e840 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801591a:	9b05      	ldr	r3, [sp, #20]
 801591c:	4601      	mov	r1, r0
 801591e:	4630      	mov	r0, r6
 8015920:	4798      	blx	r3
 8015922:	f080 0001 	eor.w	r0, r0, #1
 8015926:	b2c0      	uxtb	r0, r0
 8015928:	e7a8      	b.n	801587c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801592a:	bf00      	nop
 801592c:	200122b8 	.word	0x200122b8
 8015930:	200122ba 	.word	0x200122ba
 8015934:	200122bc 	.word	0x200122bc
 8015938:	200122be 	.word	0x200122be
 801593c:	200122c0 	.word	0x200122c0

08015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015940:	4b07      	ldr	r3, [pc, #28]	@ (8015960 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015942:	b510      	push	{r4, lr}
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	4604      	mov	r4, r0
 8015948:	b13b      	cbz	r3, 801595a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801594a:	6803      	ldr	r3, [r0, #0]
 801594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801594e:	4798      	blx	r3
 8015950:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015952:	4283      	cmp	r3, r0
 8015954:	d101      	bne.n	801595a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015956:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8015958:	bd10      	pop	{r4, pc}
 801595a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801595c:	e7fc      	b.n	8015958 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801595e:	bf00      	nop
 8015960:	200122c2 	.word	0x200122c2

08015964 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015968:	461d      	mov	r5, r3
 801596a:	b08a      	sub	sp, #40	@ 0x28
 801596c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015970:	4690      	mov	r8, r2
 8015972:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8015976:	2400      	movs	r4, #0
 8015978:	4607      	mov	r7, r0
 801597a:	fb06 8505 	mla	r5, r6, r5, r8
 801597e:	9404      	str	r4, [sp, #16]
 8015980:	f88d 4020 	strb.w	r4, [sp, #32]
 8015984:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015988:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801598c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015990:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015994:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015998:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801599c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80159a0:	f7ff ffce 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80159a4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f8ad 601e 	strh.w	r6, [sp, #30]
 80159ae:	a901      	add	r1, sp, #4
 80159b0:	9505      	str	r5, [sp, #20]
 80159b2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80159b6:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80159ba:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80159be:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80159c2:	6803      	ldr	r3, [r0, #0]
 80159c4:	685b      	ldr	r3, [r3, #4]
 80159c6:	4798      	blx	r3
 80159c8:	b00a      	add	sp, #40	@ 0x28
 80159ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159ce <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80159ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159d2:	b08b      	sub	sp, #44	@ 0x2c
 80159d4:	2400      	movs	r4, #0
 80159d6:	4691      	mov	r9, r2
 80159d8:	461d      	mov	r5, r3
 80159da:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80159de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80159e2:	4688      	mov	r8, r1
 80159e4:	4607      	mov	r7, r0
 80159e6:	9404      	str	r4, [sp, #16]
 80159e8:	fb06 9505 	mla	r5, r6, r5, r9
 80159ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159f0:	f7ff ffa6 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80159f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80159f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015a02:	a901      	add	r1, sp, #4
 8015a04:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015a08:	9505      	str	r5, [sp, #20]
 8015a0a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015a0e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015a12:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015a16:	f8cd 8010 	str.w	r8, [sp, #16]
 8015a1a:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015a1e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015a22:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015a26:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015a2a:	6803      	ldr	r3, [r0, #0]
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	4798      	blx	r3
 8015a30:	b00b      	add	sp, #44	@ 0x2c
 8015a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a3c:	b08a      	sub	sp, #40	@ 0x28
 8015a3e:	4698      	mov	r8, r3
 8015a40:	2300      	movs	r3, #0
 8015a42:	4606      	mov	r6, r0
 8015a44:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015a48:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8015a4c:	2d0b      	cmp	r5, #11
 8015a4e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8015a52:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8015a56:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8015a5a:	9304      	str	r3, [sp, #16]
 8015a5c:	d137      	bne.n	8015ace <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015a5e:	2380      	movs	r3, #128	@ 0x80
 8015a60:	f88d 0020 	strb.w	r0, [sp, #32]
 8015a64:	4630      	mov	r0, r6
 8015a66:	9203      	str	r2, [sp, #12]
 8015a68:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015a6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015a70:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015a74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015a78:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015a7c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015a80:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015a84:	f7ff ff5c 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a88:	2c0b      	cmp	r4, #11
 8015a8a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015a8e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015a92:	bf94      	ite	ls
 8015a94:	4b19      	ldrls	r3, [pc, #100]	@ (8015afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015a96:	2100      	movhi	r1, #0
 8015a98:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015a9c:	bf98      	it	ls
 8015a9e:	5d19      	ldrbls	r1, [r3, r4]
 8015aa0:	fb02 8307 	mla	r3, r2, r7, r8
 8015aa4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015aa8:	10c9      	asrs	r1, r1, #3
 8015aaa:	fb01 0003 	mla	r0, r1, r3, r0
 8015aae:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8015ab2:	a901      	add	r1, sp, #4
 8015ab4:	9005      	str	r0, [sp, #20]
 8015ab6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015aba:	2300      	movs	r3, #0
 8015abc:	6870      	ldr	r0, [r6, #4]
 8015abe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015ac2:	6803      	ldr	r3, [r0, #0]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	4798      	blx	r3
 8015ac8:	b00a      	add	sp, #40	@ 0x28
 8015aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ace:	2d02      	cmp	r5, #2
 8015ad0:	d109      	bne.n	8015ae6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015ad2:	28ff      	cmp	r0, #255	@ 0xff
 8015ad4:	d105      	bne.n	8015ae2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015ad6:	f1bc 0f00 	cmp.w	ip, #0
 8015ada:	bf14      	ite	ne
 8015adc:	2340      	movne	r3, #64	@ 0x40
 8015ade:	2320      	moveq	r3, #32
 8015ae0:	e7be      	b.n	8015a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ae2:	2340      	movs	r3, #64	@ 0x40
 8015ae4:	e7bc      	b.n	8015a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ae6:	28ff      	cmp	r0, #255	@ 0xff
 8015ae8:	d105      	bne.n	8015af6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015aea:	f1bc 0f00 	cmp.w	ip, #0
 8015aee:	bf14      	ite	ne
 8015af0:	2304      	movne	r3, #4
 8015af2:	2301      	moveq	r3, #1
 8015af4:	e7b4      	b.n	8015a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015af6:	2304      	movs	r3, #4
 8015af8:	e7b2      	b.n	8015a60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015afa:	bf00      	nop
 8015afc:	080314c0 	.word	0x080314c0

08015b00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b04:	b08b      	sub	sp, #44	@ 0x2c
 8015b06:	461d      	mov	r5, r3
 8015b08:	2400      	movs	r4, #0
 8015b0a:	4688      	mov	r8, r1
 8015b0c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8015b10:	4693      	mov	fp, r2
 8015b12:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8015b16:	4607      	mov	r7, r0
 8015b18:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015b1c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8015b20:	9404      	str	r4, [sp, #16]
 8015b22:	bf14      	ite	ne
 8015b24:	2308      	movne	r3, #8
 8015b26:	2302      	moveq	r3, #2
 8015b28:	fb05 b50a 	mla	r5, r5, sl, fp
 8015b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b30:	f7ff ff06 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b34:	2e0b      	cmp	r6, #11
 8015b36:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015b3a:	a901      	add	r1, sp, #4
 8015b3c:	bf98      	it	ls
 8015b3e:	4b13      	ldrls	r3, [pc, #76]	@ (8015b8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015b40:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015b44:	bf98      	it	ls
 8015b46:	5d9c      	ldrbls	r4, [r3, r6]
 8015b48:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015b4c:	10e4      	asrs	r4, r4, #3
 8015b4e:	f8cd 8010 	str.w	r8, [sp, #16]
 8015b52:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015b56:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015b5a:	fb04 0405 	mla	r4, r4, r5, r0
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015b64:	2300      	movs	r3, #0
 8015b66:	9405      	str	r4, [sp, #20]
 8015b68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b6c:	f88d 9020 	strb.w	r9, [sp, #32]
 8015b70:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8015b74:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015b78:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015b7c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8015b80:	6803      	ldr	r3, [r0, #0]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	4798      	blx	r3
 8015b86:	b00b      	add	sp, #44	@ 0x2c
 8015b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b8c:	080314c0 	.word	0x080314c0

08015b90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b94:	461e      	mov	r6, r3
 8015b96:	4b0a      	ldr	r3, [pc, #40]	@ (8015bc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015b98:	460f      	mov	r7, r1
 8015b9a:	4690      	mov	r8, r2
 8015b9c:	881d      	ldrh	r5, [r3, #0]
 8015b9e:	f7f4 ffd7 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8015ba2:	6803      	ldr	r3, [r0, #0]
 8015ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ba6:	4798      	blx	r3
 8015ba8:	280b      	cmp	r0, #11
 8015baa:	bf96      	itet	ls
 8015bac:	4b05      	ldrls	r3, [pc, #20]	@ (8015bc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015bae:	2400      	movhi	r4, #0
 8015bb0:	5c1c      	ldrbls	r4, [r3, r0]
 8015bb2:	fb08 7005 	mla	r0, r8, r5, r7
 8015bb6:	10e4      	asrs	r4, r4, #3
 8015bb8:	fb04 6000 	mla	r0, r4, r0, r6
 8015bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bc0:	200122be 	.word	0x200122be
 8015bc4:	080314c0 	.word	0x080314c0

08015bc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bca:	b08b      	sub	sp, #44	@ 0x2c
 8015bcc:	461f      	mov	r7, r3
 8015bce:	4604      	mov	r4, r0
 8015bd0:	4616      	mov	r6, r2
 8015bd2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015bd6:	2500      	movs	r5, #0
 8015bd8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015bdc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015be0:	9504      	str	r5, [sp, #16]
 8015be2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015be6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015bea:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015bee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015bf2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015bf6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015bfa:	f88d 3020 	strb.w	r3, [sp, #32]
 8015bfe:	f7ff fe9f 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c02:	463a      	mov	r2, r7
 8015c04:	4631      	mov	r1, r6
 8015c06:	4603      	mov	r3, r0
 8015c08:	4620      	mov	r0, r4
 8015c0a:	f7ff ffc1 	bl	8015b90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8015c48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015c10:	9005      	str	r0, [sp, #20]
 8015c12:	881b      	ldrh	r3, [r3, #0]
 8015c14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015c18:	f7f4 ff9a 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8015c1c:	6803      	ldr	r3, [r0, #0]
 8015c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c20:	4798      	blx	r3
 8015c22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015c24:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8015c28:	a901      	add	r1, sp, #4
 8015c2a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015c2e:	9304      	str	r3, [sp, #16]
 8015c30:	6860      	ldr	r0, [r4, #4]
 8015c32:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015c36:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8015c3a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015c3e:	6803      	ldr	r3, [r0, #0]
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	4798      	blx	r3
 8015c44:	b00b      	add	sp, #44	@ 0x2c
 8015c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c48:	200122be 	.word	0x200122be

08015c4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c4e:	b08d      	sub	sp, #52	@ 0x34
 8015c50:	2501      	movs	r5, #1
 8015c52:	4604      	mov	r4, r0
 8015c54:	466b      	mov	r3, sp
 8015c56:	9503      	str	r5, [sp, #12]
 8015c58:	e883 0006 	stmia.w	r3, {r1, r2}
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	f8bd 6000 	ldrh.w	r6, [sp]
 8015c62:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015c66:	9306      	str	r3, [sp, #24]
 8015c68:	6803      	ldr	r3, [r0, #0]
 8015c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c6c:	4798      	blx	r3
 8015c6e:	463a      	mov	r2, r7
 8015c70:	4631      	mov	r1, r6
 8015c72:	4603      	mov	r3, r0
 8015c74:	4620      	mov	r0, r4
 8015c76:	f7ff ff8b 	bl	8015b90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015c7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015c7c:	9004      	str	r0, [sp, #16]
 8015c7e:	9307      	str	r3, [sp, #28]
 8015c80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015c84:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015c88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015c8c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015c90:	4b0e      	ldr	r3, [pc, #56]	@ (8015ccc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015c92:	881b      	ldrh	r3, [r3, #0]
 8015c94:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015c98:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015c9c:	f7f4 ff58 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8015ca0:	6803      	ldr	r3, [r0, #0]
 8015ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ca4:	4798      	blx	r3
 8015ca6:	23ff      	movs	r3, #255	@ 0xff
 8015ca8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015cac:	a903      	add	r1, sp, #12
 8015cae:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015cb2:	6860      	ldr	r0, [r4, #4]
 8015cb4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015cb8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015cbc:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015cc0:	6803      	ldr	r3, [r0, #0]
 8015cc2:	685b      	ldr	r3, [r3, #4]
 8015cc4:	4798      	blx	r3
 8015cc6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015cc8:	b00d      	add	sp, #52	@ 0x34
 8015cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ccc:	200122be 	.word	0x200122be

08015cd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cd4:	b08c      	sub	sp, #48	@ 0x30
 8015cd6:	461e      	mov	r6, r3
 8015cd8:	2300      	movs	r3, #0
 8015cda:	4604      	mov	r4, r0
 8015cdc:	466d      	mov	r5, sp
 8015cde:	9306      	str	r3, [sp, #24]
 8015ce0:	6803      	ldr	r3, [r0, #0]
 8015ce2:	e885 0006 	stmia.w	r5, {r1, r2}
 8015ce6:	2501      	movs	r5, #1
 8015ce8:	f8bd 7000 	ldrh.w	r7, [sp]
 8015cec:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015cf0:	9503      	str	r5, [sp, #12]
 8015cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015cf4:	4798      	blx	r3
 8015cf6:	4642      	mov	r2, r8
 8015cf8:	4639      	mov	r1, r7
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f7ff ff47 	bl	8015b90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015d02:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015d06:	9004      	str	r0, [sp, #16]
 8015d08:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015d0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015d10:	9607      	str	r6, [sp, #28]
 8015d12:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015d16:	4b10      	ldr	r3, [pc, #64]	@ (8015d58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015d1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015d20:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015d24:	f7f4 ff14 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d2c:	4798      	blx	r3
 8015d2e:	23ff      	movs	r3, #255	@ 0xff
 8015d30:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015d34:	a903      	add	r1, sp, #12
 8015d36:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015d3a:	6860      	ldr	r0, [r4, #4]
 8015d3c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015d40:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015d44:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015d48:	6803      	ldr	r3, [r0, #0]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	4798      	blx	r3
 8015d4e:	4630      	mov	r0, r6
 8015d50:	b00c      	add	sp, #48	@ 0x30
 8015d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d56:	bf00      	nop
 8015d58:	200122be 	.word	0x200122be

08015d5c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d5e:	b085      	sub	sp, #20
 8015d60:	4605      	mov	r5, r0
 8015d62:	ac02      	add	r4, sp, #8
 8015d64:	e884 0006 	stmia.w	r4, {r1, r2}
 8015d68:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015d6c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015d70:	f7ff fde6 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015d74:	4631      	mov	r1, r6
 8015d76:	4603      	mov	r3, r0
 8015d78:	463a      	mov	r2, r7
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	f7ff ff08 	bl	8015b90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015d80:	4a05      	ldr	r2, [pc, #20]	@ (8015d98 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015d82:	682b      	ldr	r3, [r5, #0]
 8015d84:	8812      	ldrh	r2, [r2, #0]
 8015d86:	9200      	str	r2, [sp, #0]
 8015d88:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015d92:	47b0      	blx	r6
 8015d94:	b005      	add	sp, #20
 8015d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d98:	200122be 	.word	0x200122be

08015d9c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8015da2:	4604      	mov	r4, r0
 8015da4:	b19b      	cbz	r3, 8015dce <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015da6:	2002      	movs	r0, #2
 8015da8:	f7fc f92a 	bl	8012000 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015dac:	2300      	movs	r3, #0
 8015dae:	4620      	mov	r0, r4
 8015db0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015db4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8015dbe:	f7ff fdbf 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015dc2:	4601      	mov	r1, r0
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	462b      	mov	r3, r5
 8015dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dcc:	4718      	bx	r3
 8015dce:	bd70      	pop	{r4, r5, r6, pc}

08015dd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015dd0:	b538      	push	{r3, r4, r5, lr}
 8015dd2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	460d      	mov	r5, r1
 8015dda:	428b      	cmp	r3, r1
 8015ddc:	d006      	beq.n	8015dec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8015dde:	6803      	ldr	r3, [r0, #0]
 8015de0:	b929      	cbnz	r1, 8015dee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015de2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8015de6:	4798      	blx	r3
 8015de8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8015dec:	bd38      	pop	{r3, r4, r5, pc}
 8015dee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8015df2:	e7f8      	b.n	8015de6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015df4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015df4:	4b0d      	ldr	r3, [pc, #52]	@ (8015e2c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015df6:	b510      	push	{r4, lr}
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	b95b      	cbnz	r3, 8015e16 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015dfe:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015e02:	2b02      	cmp	r3, #2
 8015e04:	d007      	beq.n	8015e16 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015e06:	6840      	ldr	r0, [r0, #4]
 8015e08:	f000 f928 	bl	801605c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015e0c:	b118      	cbz	r0, 8015e16 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015e0e:	6862      	ldr	r2, [r4, #4]
 8015e10:	7a53      	ldrb	r3, [r2, #9]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d0fc      	beq.n	8015e10 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015e16:	f7fc fb81 	bl	801251c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015e1a:	4620      	mov	r0, r4
 8015e1c:	2100      	movs	r1, #0
 8015e1e:	f7ff ffd7 	bl	8015dd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015e22:	4620      	mov	r0, r4
 8015e24:	f7ff fd8c 	bl	8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e28:	bd10      	pop	{r4, pc}
 8015e2a:	bf00      	nop
 8015e2c:	200122c2 	.word	0x200122c2

08015e30 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8015e30:	b570      	push	{r4, r5, r6, lr}
 8015e32:	4604      	mov	r4, r0
 8015e34:	6803      	ldr	r3, [r0, #0]
 8015e36:	b919      	cbnz	r1, 8015e40 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e3e:	4718      	bx	r3
 8015e40:	2200      	movs	r2, #0
 8015e42:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8015e46:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8015e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e4c:	4798      	blx	r3
 8015e4e:	6863      	ldr	r3, [r4, #4]
 8015e50:	2101      	movs	r1, #1
 8015e52:	4605      	mov	r5, r0
 8015e54:	4620      	mov	r0, r4
 8015e56:	7299      	strb	r1, [r3, #10]
 8015e58:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015e5c:	f7ff ffb8 	bl	8015dd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015e60:	4628      	mov	r0, r5
 8015e62:	bd70      	pop	{r4, r5, r6, pc}

08015e64 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015e64:	4770      	bx	lr

08015e66 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015e66:	2000      	movs	r0, #0
 8015e68:	4770      	bx	lr

08015e6a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015e6a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015e6e:	1a13      	subs	r3, r2, r0
 8015e70:	4258      	negs	r0, r3
 8015e72:	4158      	adcs	r0, r3
 8015e74:	4770      	bx	lr

08015e76 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015e76:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015e7a:	1a9b      	subs	r3, r3, r2
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	bfdc      	itt	le
 8015e80:	6882      	ldrle	r2, [r0, #8]
 8015e82:	189b      	addle	r3, r3, r2
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	bfcc      	ite	gt
 8015e88:	2000      	movgt	r0, #0
 8015e8a:	2001      	movle	r0, #1
 8015e8c:	4770      	bx	lr

08015e8e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015e8e:	6902      	ldr	r2, [r0, #16]
 8015e90:	6843      	ldr	r3, [r0, #4]
 8015e92:	2024      	movs	r0, #36	@ 0x24
 8015e94:	fb00 3002 	mla	r0, r0, r2, r3
 8015e98:	4770      	bx	lr

08015e9a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015e9a:	6803      	ldr	r3, [r0, #0]
 8015e9c:	691b      	ldr	r3, [r3, #16]
 8015e9e:	4718      	bx	r3

08015ea0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	b570      	push	{r4, r5, r6, lr}
 8015ea4:	7203      	strb	r3, [r0, #8]
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	6840      	ldr	r0, [r0, #4]
 8015eaa:	6803      	ldr	r3, [r0, #0]
 8015eac:	699b      	ldr	r3, [r3, #24]
 8015eae:	4798      	blx	r3
 8015eb0:	6803      	ldr	r3, [r0, #0]
 8015eb2:	4605      	mov	r5, r0
 8015eb4:	2b40      	cmp	r3, #64	@ 0x40
 8015eb6:	d00c      	beq.n	8015ed2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015eb8:	d810      	bhi.n	8015edc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015eba:	2b04      	cmp	r3, #4
 8015ebc:	d01d      	beq.n	8015efa <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015ebe:	d804      	bhi.n	8015eca <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d006      	beq.n	8015ed2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ec4:	2b02      	cmp	r3, #2
 8015ec6:	d02c      	beq.n	8015f22 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015ec8:	bd70      	pop	{r4, r5, r6, pc}
 8015eca:	2b08      	cmp	r3, #8
 8015ecc:	d01d      	beq.n	8015f0a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015ece:	2b20      	cmp	r3, #32
 8015ed0:	d1fa      	bne.n	8015ec8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015ed2:	6823      	ldr	r3, [r4, #0]
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ed8:	4798      	blx	r3
 8015eda:	e013      	b.n	8015f04 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ee0:	d0f7      	beq.n	8015ed2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ee2:	d804      	bhi.n	8015eee <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015ee4:	2b80      	cmp	r3, #128	@ 0x80
 8015ee6:	d0f4      	beq.n	8015ed2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015eec:	e7f0      	b.n	8015ed0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015ef2:	d0ee      	beq.n	8015ed2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015ef8:	e7e5      	b.n	8015ec6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015efa:	6823      	ldr	r3, [r4, #0]
 8015efc:	7f01      	ldrb	r1, [r0, #28]
 8015efe:	4620      	mov	r0, r4
 8015f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f02:	4798      	blx	r3
 8015f04:	6823      	ldr	r3, [r4, #0]
 8015f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f08:	e006      	b.n	8015f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015f0a:	6823      	ldr	r3, [r4, #0]
 8015f0c:	7f01      	ldrb	r1, [r0, #28]
 8015f0e:	4620      	mov	r0, r4
 8015f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f12:	4798      	blx	r3
 8015f14:	6823      	ldr	r3, [r4, #0]
 8015f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f18:	4629      	mov	r1, r5
 8015f1a:	4620      	mov	r0, r4
 8015f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f20:	4718      	bx	r3
 8015f22:	6823      	ldr	r3, [r4, #0]
 8015f24:	4620      	mov	r0, r4
 8015f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f28:	4798      	blx	r3
 8015f2a:	e7f3      	b.n	8015f14 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015f2c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015f2c:	4770      	bx	lr

08015f2e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015f2e:	4770      	bx	lr

08015f30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015f30:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015f34:	b510      	push	{r4, lr}
 8015f36:	1ad2      	subs	r2, r2, r3
 8015f38:	2a00      	cmp	r2, #0
 8015f3a:	bfdc      	itt	le
 8015f3c:	6884      	ldrle	r4, [r0, #8]
 8015f3e:	1912      	addle	r2, r2, r4
 8015f40:	2a01      	cmp	r2, #1
 8015f42:	dd16      	ble.n	8015f72 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015f44:	6842      	ldr	r2, [r0, #4]
 8015f46:	2424      	movs	r4, #36	@ 0x24
 8015f48:	fb04 2303 	mla	r3, r4, r3, r2
 8015f4c:	f101 0220 	add.w	r2, r1, #32
 8015f50:	f851 4b04 	ldr.w	r4, [r1], #4
 8015f54:	4291      	cmp	r1, r2
 8015f56:	f843 4b04 	str.w	r4, [r3], #4
 8015f5a:	d1f9      	bne.n	8015f50 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015f5c:	780a      	ldrb	r2, [r1, #0]
 8015f5e:	701a      	strb	r2, [r3, #0]
 8015f60:	68c3      	ldr	r3, [r0, #12]
 8015f62:	6882      	ldr	r2, [r0, #8]
 8015f64:	f3bf 8f5b 	dmb	ish
 8015f68:	3301      	adds	r3, #1
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	bfd8      	it	le
 8015f6e:	1a9b      	suble	r3, r3, r2
 8015f70:	60c3      	str	r3, [r0, #12]
 8015f72:	bd10      	pop	{r4, pc}

08015f74 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015f74:	6903      	ldr	r3, [r0, #16]
 8015f76:	6882      	ldr	r2, [r0, #8]
 8015f78:	f3bf 8f5b 	dmb	ish
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	bfd8      	it	le
 8015f82:	1a9b      	suble	r3, r3, r2
 8015f84:	6103      	str	r3, [r0, #16]
 8015f86:	4770      	bx	lr

08015f88 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015f88:	b570      	push	{r4, r5, r6, lr}
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	460e      	mov	r6, r1
 8015f8e:	6860      	ldr	r0, [r4, #4]
 8015f90:	6803      	ldr	r3, [r0, #0]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	4798      	blx	r3
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d1f9      	bne.n	8015f8e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8015fd0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015f9c:	6828      	ldr	r0, [r5, #0]
 8015f9e:	6803      	ldr	r3, [r0, #0]
 8015fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015fa2:	4798      	blx	r3
 8015fa4:	f7fc fad4 	bl	8012550 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015fa8:	6828      	ldr	r0, [r5, #0]
 8015faa:	2101      	movs	r1, #1
 8015fac:	f7ff ff10 	bl	8015dd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015fb0:	6860      	ldr	r0, [r4, #4]
 8015fb2:	4631      	mov	r1, r6
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	689b      	ldr	r3, [r3, #8]
 8015fb8:	4798      	blx	r3
 8015fba:	6823      	ldr	r3, [r4, #0]
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fc0:	4798      	blx	r3
 8015fc2:	6828      	ldr	r0, [r5, #0]
 8015fc4:	6803      	ldr	r3, [r0, #0]
 8015fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fcc:	4718      	bx	r3
 8015fce:	bf00      	nop
 8015fd0:	200122c4 	.word	0x200122c4

08015fd4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015fd4:	b508      	push	{r3, lr}
 8015fd6:	f7fc faa1 	bl	801251c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015fde:	f7fc baab 	b.w	8012538 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015fe2 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015fe2:	b510      	push	{r4, lr}
 8015fe4:	4604      	mov	r4, r0
 8015fe6:	6840      	ldr	r0, [r0, #4]
 8015fe8:	6803      	ldr	r3, [r0, #0]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4798      	blx	r3
 8015fee:	b948      	cbnz	r0, 8016004 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015ff0:	7a63      	ldrb	r3, [r4, #9]
 8015ff2:	b13b      	cbz	r3, 8016004 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015ff4:	7a23      	ldrb	r3, [r4, #8]
 8015ff6:	b92b      	cbnz	r3, 8016004 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015ff8:	6823      	ldr	r3, [r4, #0]
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016002:	4718      	bx	r3
 8016004:	bd10      	pop	{r4, pc}

08016006 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016006:	b570      	push	{r4, r5, r6, lr}
 8016008:	4604      	mov	r4, r0
 801600a:	6840      	ldr	r0, [r0, #4]
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4798      	blx	r3
 8016012:	4605      	mov	r5, r0
 8016014:	b930      	cbnz	r0, 8016024 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016016:	7a23      	ldrb	r3, [r4, #8]
 8016018:	b123      	cbz	r3, 8016024 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801601a:	6860      	ldr	r0, [r4, #4]
 801601c:	6803      	ldr	r3, [r0, #0]
 801601e:	695b      	ldr	r3, [r3, #20]
 8016020:	4798      	blx	r3
 8016022:	7225      	strb	r5, [r4, #8]
 8016024:	6860      	ldr	r0, [r4, #4]
 8016026:	6803      	ldr	r3, [r0, #0]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	4798      	blx	r3
 801602c:	b928      	cbnz	r0, 801603a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801602e:	6823      	ldr	r3, [r4, #0]
 8016030:	4620      	mov	r0, r4
 8016032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016038:	4718      	bx	r3
 801603a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801603e:	f7fc ba93 	b.w	8012568 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08016044 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016044:	b510      	push	{r4, lr}
 8016046:	6082      	str	r2, [r0, #8]
 8016048:	2200      	movs	r2, #0
 801604a:	4c03      	ldr	r4, [pc, #12]	@ (8016058 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801604c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016050:	e9c0 4100 	strd	r4, r1, [r0]
 8016054:	bd10      	pop	{r4, pc}
 8016056:	bf00      	nop
 8016058:	080315fc 	.word	0x080315fc

0801605c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801605c:	6840      	ldr	r0, [r0, #4]
 801605e:	6803      	ldr	r3, [r0, #0]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	4718      	bx	r3

08016064 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 8016064:	b410      	push	{r4}
 8016066:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 801606a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801606e:	68c2      	ldr	r2, [r0, #12]
 8016070:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8016074:	4620      	mov	r0, r4
 8016076:	f85d 4b04 	ldr.w	r4, [sp], #4
 801607a:	f7fc bf9d 	b.w	8012fb8 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>

0801607e <_ZNK8touchgfx15PainterARGB88888tearDownEv>:
 801607e:	f7fc bf69 	b.w	8012f54 <_ZN8touchgfx5paint8tearDownEv>
	...

08016084 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016086:	6803      	ldr	r3, [r0, #0]
 8016088:	460d      	mov	r5, r1
 801608a:	4604      	mov	r4, r0
 801608c:	4601      	mov	r1, r0
 801608e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016090:	a802      	add	r0, sp, #8
 8016092:	4798      	blx	r3
 8016094:	6828      	ldr	r0, [r5, #0]
 8016096:	6869      	ldr	r1, [r5, #4]
 8016098:	466b      	mov	r3, sp
 801609a:	c303      	stmia	r3!, {r0, r1}
 801609c:	4668      	mov	r0, sp
 801609e:	4619      	mov	r1, r3
 80160a0:	f7fe fd34 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 80160a4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80160a6:	b188      	cbz	r0, 80160cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80160a8:	6803      	ldr	r3, [r0, #0]
 80160aa:	1d21      	adds	r1, r4, #4
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	4798      	blx	r3
 80160b0:	b160      	cbz	r0, 80160cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80160b2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	dd08      	ble.n	80160cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80160ba:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80160be:	2d00      	cmp	r5, #0
 80160c0:	dd04      	ble.n	80160cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80160c2:	4a2b      	ldr	r2, [pc, #172]	@ (8016170 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80160c4:	7812      	ldrb	r2, [r2, #0]
 80160c6:	b11a      	cbz	r2, 80160d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80160c8:	2a01      	cmp	r2, #1
 80160ca:	d029      	beq.n	8016120 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80160cc:	b004      	add	sp, #16
 80160ce:	bd70      	pop	{r4, r5, r6, pc}
 80160d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80160d4:	441d      	add	r5, r3
 80160d6:	b2ad      	uxth	r5, r5
 80160d8:	b22e      	sxth	r6, r5
 80160da:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80160de:	42b3      	cmp	r3, r6
 80160e0:	daf4      	bge.n	80160cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80160e2:	6823      	ldr	r3, [r4, #0]
 80160e4:	4669      	mov	r1, sp
 80160e6:	4620      	mov	r0, r4
 80160e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160ea:	4798      	blx	r3
 80160ec:	b940      	cbnz	r0, 8016100 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80160ee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80160f2:	2b01      	cmp	r3, #1
 80160f4:	d004      	beq.n	8016100 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80160f6:	3301      	adds	r3, #1
 80160f8:	105b      	asrs	r3, r3, #1
 80160fa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80160fe:	e7f0      	b.n	80160e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016100:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016104:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016108:	4413      	add	r3, r2
 801610a:	b29b      	uxth	r3, r3
 801610c:	441a      	add	r2, r3
 801610e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016112:	b212      	sxth	r2, r2
 8016114:	4296      	cmp	r6, r2
 8016116:	dae0      	bge.n	80160da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016118:	1aeb      	subs	r3, r5, r3
 801611a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801611e:	e7dc      	b.n	80160da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016120:	f8bd 5000 	ldrh.w	r5, [sp]
 8016124:	441d      	add	r5, r3
 8016126:	b2ad      	uxth	r5, r5
 8016128:	b22e      	sxth	r6, r5
 801612a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801612e:	42b3      	cmp	r3, r6
 8016130:	dacc      	bge.n	80160cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016132:	6823      	ldr	r3, [r4, #0]
 8016134:	4669      	mov	r1, sp
 8016136:	4620      	mov	r0, r4
 8016138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801613a:	4798      	blx	r3
 801613c:	b940      	cbnz	r0, 8016150 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801613e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016142:	2b01      	cmp	r3, #1
 8016144:	d004      	beq.n	8016150 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8016146:	3301      	adds	r3, #1
 8016148:	105b      	asrs	r3, r3, #1
 801614a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801614e:	e7f0      	b.n	8016132 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8016150:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016154:	f8bd 3000 	ldrh.w	r3, [sp]
 8016158:	4413      	add	r3, r2
 801615a:	b29b      	uxth	r3, r3
 801615c:	441a      	add	r2, r3
 801615e:	f8ad 3000 	strh.w	r3, [sp]
 8016162:	b212      	sxth	r2, r2
 8016164:	4296      	cmp	r6, r2
 8016166:	dae0      	bge.n	801612a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016168:	1aeb      	subs	r3, r5, r3
 801616a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801616e:	e7dc      	b.n	801612a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016170:	200122bc 	.word	0x200122bc

08016174 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016176:	6803      	ldr	r3, [r0, #0]
 8016178:	4604      	mov	r4, r0
 801617a:	4601      	mov	r1, r0
 801617c:	4668      	mov	r0, sp
 801617e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016180:	4798      	blx	r3
 8016182:	2100      	movs	r1, #0
 8016184:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016188:	4668      	mov	r0, sp
 801618a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801618e:	9102      	str	r1, [sp, #8]
 8016190:	a902      	add	r1, sp, #8
 8016192:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016196:	f8ad 300e 	strh.w	r3, [sp, #14]
 801619a:	f7fe fcb7 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801619e:	6823      	ldr	r3, [r4, #0]
 80161a0:	4669      	mov	r1, sp
 80161a2:	4620      	mov	r0, r4
 80161a4:	691b      	ldr	r3, [r3, #16]
 80161a6:	4798      	blx	r3
 80161a8:	b004      	add	sp, #16
 80161aa:	bd10      	pop	{r4, pc}

080161ac <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80161ac:	2101      	movs	r1, #1
 80161ae:	2200      	movs	r2, #0
 80161b0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80161b4:	490a      	ldr	r1, [pc, #40]	@ (80161e0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80161b6:	8082      	strh	r2, [r0, #4]
 80161b8:	6001      	str	r1, [r0, #0]
 80161ba:	21ff      	movs	r1, #255	@ 0xff
 80161bc:	80c2      	strh	r2, [r0, #6]
 80161be:	8102      	strh	r2, [r0, #8]
 80161c0:	8142      	strh	r2, [r0, #10]
 80161c2:	8182      	strh	r2, [r0, #12]
 80161c4:	81c2      	strh	r2, [r0, #14]
 80161c6:	8202      	strh	r2, [r0, #16]
 80161c8:	8242      	strh	r2, [r0, #18]
 80161ca:	61c2      	str	r2, [r0, #28]
 80161cc:	8402      	strh	r2, [r0, #32]
 80161ce:	8442      	strh	r2, [r0, #34]	@ 0x22
 80161d0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80161d4:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80161d8:	6282      	str	r2, [r0, #40]	@ 0x28
 80161da:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80161de:	4770      	bx	lr
 80161e0:	08031658 	.word	0x08031658

080161e4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 80161e4:	6301      	str	r1, [r0, #48]	@ 0x30
 80161e6:	4770      	bx	lr

080161e8 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 80161e8:	6341      	str	r1, [r0, #52]	@ 0x34
 80161ea:	4770      	bx	lr

080161ec <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 80161ec:	4770      	bx	lr

080161ee <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 80161ee:	4608      	mov	r0, r1
 80161f0:	4770      	bx	lr

080161f2 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 80161f2:	4608      	mov	r0, r1
 80161f4:	4770      	bx	lr

080161f6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80161f6:	b530      	push	{r4, r5, lr}
 80161f8:	460d      	mov	r5, r1
 80161fa:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80161fc:	8949      	ldrh	r1, [r1, #10]
 80161fe:	b085      	sub	sp, #20
 8016200:	4604      	mov	r4, r0
 8016202:	1ac9      	subs	r1, r1, r3
 8016204:	6803      	ldr	r3, [r0, #0]
 8016206:	f10d 0206 	add.w	r2, sp, #6
 801620a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801620e:	b209      	sxth	r1, r1
 8016210:	4798      	blx	r3
 8016212:	b1a0      	cbz	r0, 801623e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016214:	792b      	ldrb	r3, [r5, #4]
 8016216:	b993      	cbnz	r3, 801623e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016218:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 801621c:	b178      	cbz	r0, 801623e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	4798      	blx	r3
 8016224:	b158      	cbz	r0, 801623e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016226:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801622a:	aa02      	add	r2, sp, #8
 801622c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8016230:	4621      	mov	r1, r4
 8016232:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016236:	9503      	str	r5, [sp, #12]
 8016238:	6803      	ldr	r3, [r0, #0]
 801623a:	689b      	ldr	r3, [r3, #8]
 801623c:	4798      	blx	r3
 801623e:	b005      	add	sp, #20
 8016240:	bd30      	pop	{r4, r5, pc}

08016242 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8016242:	428a      	cmp	r2, r1
 8016244:	bfbc      	itt	lt
 8016246:	460b      	movlt	r3, r1
 8016248:	4611      	movlt	r1, r2
 801624a:	b510      	push	{r4, lr}
 801624c:	bfb8      	it	lt
 801624e:	461a      	movlt	r2, r3
 8016250:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8016254:	4604      	mov	r4, r0
 8016256:	428b      	cmp	r3, r1
 8016258:	d103      	bne.n	8016262 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 801625a:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 801625e:	4293      	cmp	r3, r2
 8016260:	d011      	beq.n	8016286 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8016262:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8016266:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801626a:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 801626e:	f005 ff7c 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8016272:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016276:	f005 ff78 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 801627a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 801627e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016282:	f005 bf72 	b.w	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8016286:	bd10      	pop	{r4, pc}

08016288 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8016288:	428a      	cmp	r2, r1
 801628a:	bfbc      	itt	lt
 801628c:	460b      	movlt	r3, r1
 801628e:	4611      	movlt	r1, r2
 8016290:	b510      	push	{r4, lr}
 8016292:	bfb8      	it	lt
 8016294:	461a      	movlt	r2, r3
 8016296:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 801629a:	4604      	mov	r4, r0
 801629c:	428b      	cmp	r3, r1
 801629e:	d103      	bne.n	80162a8 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 80162a0:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 80162a4:	4293      	cmp	r3, r2
 80162a6:	d011      	beq.n	80162cc <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 80162a8:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 80162ac:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80162b0:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 80162b4:	f005 ff59 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 80162b8:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80162bc:	f005 ff55 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 80162c0:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80162c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162c8:	f005 bf4f 	b.w	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 80162cc:	bd10      	pop	{r4, pc}

080162ce <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 80162ce:	2300      	movs	r3, #0
 80162d0:	3038      	adds	r0, #56	@ 0x38
 80162d2:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 80162d6:	f005 bf48 	b.w	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>

080162da <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 80162da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162de:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80162e2:	4605      	mov	r5, r0
 80162e4:	460f      	mov	r7, r1
 80162e6:	4616      	mov	r6, r2
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d03d      	beq.n	8016368 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80162ec:	6803      	ldr	r3, [r0, #0]
 80162ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80162f2:	4798      	blx	r3
 80162f4:	682b      	ldr	r3, [r5, #0]
 80162f6:	b204      	sxth	r4, r0
 80162f8:	4628      	mov	r0, r5
 80162fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80162fe:	4798      	blx	r3
 8016300:	b203      	sxth	r3, r0
 8016302:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 8016306:	429c      	cmp	r4, r3
 8016308:	bfc4      	itt	gt
 801630a:	4622      	movgt	r2, r4
 801630c:	461c      	movgt	r4, r3
 801630e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016312:	bfc8      	it	gt
 8016314:	4613      	movgt	r3, r2
 8016316:	4284      	cmp	r4, r0
 8016318:	da26      	bge.n	8016368 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 801631a:	4298      	cmp	r0, r3
 801631c:	bfa8      	it	ge
 801631e:	4618      	movge	r0, r3
 8016320:	2800      	cmp	r0, #0
 8016322:	db21      	blt.n	8016368 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016324:	b9ef      	cbnz	r7, 8016362 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 8016326:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 801632a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801632e:	4619      	mov	r1, r3
 8016330:	42a0      	cmp	r0, r4
 8016332:	dd0b      	ble.n	801634c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 8016334:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 8016338:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801633c:	3401      	adds	r4, #1
 801633e:	4291      	cmp	r1, r2
 8016340:	bfa8      	it	ge
 8016342:	4611      	movge	r1, r2
 8016344:	4293      	cmp	r3, r2
 8016346:	bfb8      	it	lt
 8016348:	4613      	movlt	r3, r2
 801634a:	e7f1      	b.n	8016330 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 801634c:	1b89      	subs	r1, r1, r6
 801634e:	18f2      	adds	r2, r6, r3
 8016350:	4291      	cmp	r1, r2
 8016352:	d009      	beq.n	8016368 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016354:	682b      	ldr	r3, [r5, #0]
 8016356:	4628      	mov	r0, r5
 8016358:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801635c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016360:	4718      	bx	r3
 8016362:	4273      	negs	r3, r6
 8016364:	4631      	mov	r1, r6
 8016366:	e7e3      	b.n	8016330 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8016368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801636c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 801636c:	b530      	push	{r4, r5, lr}
 801636e:	790b      	ldrb	r3, [r1, #4]
 8016370:	b085      	sub	sp, #20
 8016372:	4604      	mov	r4, r0
 8016374:	460d      	mov	r5, r1
 8016376:	2b02      	cmp	r3, #2
 8016378:	d020      	beq.n	80163bc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801637a:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 801637c:	f10d 0206 	add.w	r2, sp, #6
 8016380:	88c9      	ldrh	r1, [r1, #6]
 8016382:	1ac9      	subs	r1, r1, r3
 8016384:	6803      	ldr	r3, [r0, #0]
 8016386:	b209      	sxth	r1, r1
 8016388:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801638c:	4798      	blx	r3
 801638e:	b1a8      	cbz	r0, 80163bc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016390:	792b      	ldrb	r3, [r5, #4]
 8016392:	2b01      	cmp	r3, #1
 8016394:	d812      	bhi.n	80163bc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016396:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801639a:	b178      	cbz	r0, 80163bc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801639c:	6803      	ldr	r3, [r0, #0]
 801639e:	68db      	ldr	r3, [r3, #12]
 80163a0:	4798      	blx	r3
 80163a2:	b158      	cbz	r0, 80163bc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80163a4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80163a8:	aa02      	add	r2, sp, #8
 80163aa:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 80163ae:	4621      	mov	r1, r4
 80163b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80163b4:	9503      	str	r5, [sp, #12]
 80163b6:	6803      	ldr	r3, [r0, #0]
 80163b8:	689b      	ldr	r3, [r3, #8]
 80163ba:	4798      	blx	r3
 80163bc:	b005      	add	sp, #20
 80163be:	bd30      	pop	{r4, r5, pc}

080163c0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 80163c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c4:	4604      	mov	r4, r0
 80163c6:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 80163ca:	4690      	mov	r8, r2
 80163cc:	461f      	mov	r7, r3
 80163ce:	9e06      	ldr	r6, [sp, #24]
 80163d0:	b928      	cbnz	r0, 80163de <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 80163d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163d6:	8033      	strh	r3, [r6, #0]
 80163d8:	803b      	strh	r3, [r7, #0]
 80163da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163de:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80163e2:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 80163e6:	1883      	adds	r3, r0, r2
 80163e8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80163ec:	1ad2      	subs	r2, r2, r3
 80163ee:	b212      	sxth	r2, r2
 80163f0:	2a01      	cmp	r2, #1
 80163f2:	dc07      	bgt.n	8016404 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80163f4:	2300      	movs	r3, #0
 80163f6:	803b      	strh	r3, [r7, #0]
 80163f8:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 80163fc:	3b01      	subs	r3, #1
 80163fe:	8033      	strh	r3, [r6, #0]
 8016400:	2001      	movs	r0, #1
 8016402:	e7ea      	b.n	80163da <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016404:	1a08      	subs	r0, r1, r0
 8016406:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 801640a:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 801640e:	0140      	lsls	r0, r0, #5
 8016410:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016412:	1a5b      	subs	r3, r3, r1
 8016414:	d459      	bmi.n	80164ca <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8016416:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801641a:	fb93 f1f5 	sdiv	r1, r3, r5
 801641e:	2302      	movs	r3, #2
 8016420:	fb91 f1f3 	sdiv	r1, r1, r3
 8016424:	3a01      	subs	r2, #1
 8016426:	f006 f86a 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 801642a:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 801642e:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8016432:	2900      	cmp	r1, #0
 8016434:	db55      	blt.n	80164e2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8016436:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 801643a:	2502      	movs	r5, #2
 801643c:	fb93 f3fc 	sdiv	r3, r3, ip
 8016440:	fb93 f3f5 	sdiv	r3, r3, r5
 8016444:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016448:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 801644c:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8016450:	1a52      	subs	r2, r2, r1
 8016452:	eba8 0003 	sub.w	r0, r8, r3
 8016456:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801645a:	d44e      	bmi.n	80164fa <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 801645c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8016460:	fb92 f1fc 	sdiv	r1, r2, ip
 8016464:	2202      	movs	r2, #2
 8016466:	fb91 f1f2 	sdiv	r1, r1, r2
 801646a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 801646e:	4413      	add	r3, r2
 8016470:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016474:	1ad2      	subs	r2, r2, r3
 8016476:	b212      	sxth	r2, r2
 8016478:	3a01      	subs	r2, #1
 801647a:	f006 f840 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 801647e:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8016482:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016484:	2b00      	cmp	r3, #0
 8016486:	db44      	blt.n	8016512 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8016488:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801648c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016490:	2202      	movs	r2, #2
 8016492:	fb93 f3f2 	sdiv	r3, r3, r2
 8016496:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801649a:	2020      	movs	r0, #32
 801649c:	429d      	cmp	r5, r3
 801649e:	bfde      	ittt	le
 80164a0:	461a      	movle	r2, r3
 80164a2:	462b      	movle	r3, r5
 80164a4:	4615      	movle	r5, r2
 80164a6:	b21b      	sxth	r3, r3
 80164a8:	2d00      	cmp	r5, #0
 80164aa:	bfaa      	itet	ge
 80164ac:	351f      	addge	r5, #31
 80164ae:	fb95 f5f0 	sdivlt	r5, r5, r0
 80164b2:	116d      	asrge	r5, r5, #5
 80164b4:	fb93 f3f0 	sdiv	r3, r3, r0
 80164b8:	b22d      	sxth	r5, r5
 80164ba:	803b      	strh	r3, [r7, #0]
 80164bc:	2d00      	cmp	r5, #0
 80164be:	8035      	strh	r5, [r6, #0]
 80164c0:	da33      	bge.n	801652a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 80164c2:	2000      	movs	r0, #0
 80164c4:	8030      	strh	r0, [r6, #0]
 80164c6:	8038      	strh	r0, [r7, #0]
 80164c8:	e787      	b.n	80163da <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80164ca:	f06f 0101 	mvn.w	r1, #1
 80164ce:	fb01 5303 	mla	r3, r1, r3, r5
 80164d2:	1e59      	subs	r1, r3, #1
 80164d4:	2302      	movs	r3, #2
 80164d6:	fb91 f1f5 	sdiv	r1, r1, r5
 80164da:	fb91 f1f3 	sdiv	r1, r1, r3
 80164de:	4249      	negs	r1, r1
 80164e0:	e7a0      	b.n	8016424 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 80164e2:	f06f 0301 	mvn.w	r3, #1
 80164e6:	2502      	movs	r5, #2
 80164e8:	fb03 c301 	mla	r3, r3, r1, ip
 80164ec:	3b01      	subs	r3, #1
 80164ee:	fb93 f3fc 	sdiv	r3, r3, ip
 80164f2:	fb93 f3f5 	sdiv	r3, r3, r5
 80164f6:	425b      	negs	r3, r3
 80164f8:	e7a4      	b.n	8016444 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 80164fa:	f06f 0101 	mvn.w	r1, #1
 80164fe:	fb01 c202 	mla	r2, r1, r2, ip
 8016502:	1e51      	subs	r1, r2, #1
 8016504:	2202      	movs	r2, #2
 8016506:	fb91 f1fc 	sdiv	r1, r1, ip
 801650a:	fb91 f1f2 	sdiv	r1, r1, r2
 801650e:	4249      	negs	r1, r1
 8016510:	e7ab      	b.n	801646a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8016512:	f06f 0101 	mvn.w	r1, #1
 8016516:	fb01 2303 	mla	r3, r1, r3, r2
 801651a:	3b01      	subs	r3, #1
 801651c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016520:	2202      	movs	r2, #2
 8016522:	fb93 f3f2 	sdiv	r3, r3, r2
 8016526:	425b      	negs	r3, r3
 8016528:	e7b5      	b.n	8016496 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 801652a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801652e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016532:	4293      	cmp	r3, r2
 8016534:	dc05      	bgt.n	8016542 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 8016536:	3b01      	subs	r3, #1
 8016538:	2000      	movs	r0, #0
 801653a:	b21b      	sxth	r3, r3
 801653c:	8033      	strh	r3, [r6, #0]
 801653e:	803b      	strh	r3, [r7, #0]
 8016540:	e74b      	b.n	80163da <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016542:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8016546:	803a      	strh	r2, [r7, #0]
 8016548:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801654c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016550:	4293      	cmp	r3, r2
 8016552:	bfdc      	itt	le
 8016554:	f103 33ff 	addle.w	r3, r3, #4294967295
 8016558:	b21a      	sxthle	r2, r3
 801655a:	8032      	strh	r2, [r6, #0]
 801655c:	e750      	b.n	8016400 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08016560 <_ZN8touchgfx9ContainerC1Ev>:
 8016560:	2101      	movs	r1, #1
 8016562:	2200      	movs	r2, #0
 8016564:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016568:	4909      	ldr	r1, [pc, #36]	@ (8016590 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 801656a:	8082      	strh	r2, [r0, #4]
 801656c:	80c2      	strh	r2, [r0, #6]
 801656e:	8102      	strh	r2, [r0, #8]
 8016570:	8142      	strh	r2, [r0, #10]
 8016572:	8182      	strh	r2, [r0, #12]
 8016574:	81c2      	strh	r2, [r0, #14]
 8016576:	8202      	strh	r2, [r0, #16]
 8016578:	8242      	strh	r2, [r0, #18]
 801657a:	61c2      	str	r2, [r0, #28]
 801657c:	8402      	strh	r2, [r0, #32]
 801657e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016580:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016584:	6001      	str	r1, [r0, #0]
 8016586:	6282      	str	r2, [r0, #40]	@ 0x28
 8016588:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801658c:	4770      	bx	lr
 801658e:	bf00      	nop
 8016590:	0803136c 	.word	0x0803136c

08016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8016594:	6800      	ldr	r0, [r0, #0]
 8016596:	2800      	cmp	r0, #0
 8016598:	bfbd      	ittte	lt
 801659a:	380f      	sublt	r0, #15
 801659c:	2320      	movlt	r3, #32
 801659e:	fb90 f0f3 	sdivlt	r0, r0, r3
 80165a2:	3010      	addge	r0, #16
 80165a4:	bfa8      	it	ge
 80165a6:	1140      	asrge	r0, r0, #5
 80165a8:	4770      	bx	lr

080165aa <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 80165aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ae:	4605      	mov	r5, r0
 80165b0:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 80165b4:	4688      	mov	r8, r1
 80165b6:	4691      	mov	r9, r2
 80165b8:	469a      	mov	sl, r3
 80165ba:	b360      	cbz	r0, 8016616 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 80165bc:	2700      	movs	r7, #0
 80165be:	f04f 3bff 	mov.w	fp, #4294967295
 80165c2:	b23e      	sxth	r6, r7
 80165c4:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 80165c8:	42b3      	cmp	r3, r6
 80165ca:	dd23      	ble.n	8016614 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 80165cc:	682b      	ldr	r3, [r5, #0]
 80165ce:	4631      	mov	r1, r6
 80165d0:	4628      	mov	r0, r5
 80165d2:	3701      	adds	r7, #1
 80165d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80165d8:	4798      	blx	r3
 80165da:	9001      	str	r0, [sp, #4]
 80165dc:	a801      	add	r0, sp, #4
 80165de:	f7ff ffd9 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80165e2:	682b      	ldr	r3, [r5, #0]
 80165e4:	eba0 0008 	sub.w	r0, r0, r8
 80165e8:	4631      	mov	r1, r6
 80165ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80165ee:	b204      	sxth	r4, r0
 80165f0:	4628      	mov	r0, r5
 80165f2:	4798      	blx	r3
 80165f4:	9001      	str	r0, [sp, #4]
 80165f6:	a801      	add	r0, sp, #4
 80165f8:	f7ff ffcc 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80165fc:	eba0 0009 	sub.w	r0, r0, r9
 8016600:	fb10 f000 	smulbb	r0, r0, r0
 8016604:	fb04 0404 	mla	r4, r4, r4, r0
 8016608:	455c      	cmp	r4, fp
 801660a:	bf3c      	itt	cc
 801660c:	f8aa 6000 	strhcc.w	r6, [sl]
 8016610:	46a3      	movcc	fp, r4
 8016612:	e7d6      	b.n	80165c2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8016614:	2001      	movs	r0, #1
 8016616:	b003      	add	sp, #12
 8016618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801661c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 801661c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016620:	460e      	mov	r6, r1
 8016622:	2100      	movs	r1, #0
 8016624:	4605      	mov	r5, r0
 8016626:	4617      	mov	r7, r2
 8016628:	8011      	strh	r1, [r2, #0]
 801662a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801662e:	b36b      	cbz	r3, 801668c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8016630:	6803      	ldr	r3, [r0, #0]
 8016632:	f10d 0808 	add.w	r8, sp, #8
 8016636:	2401      	movs	r4, #1
 8016638:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801663c:	4798      	blx	r3
 801663e:	f848 0d04 	str.w	r0, [r8, #-4]!
 8016642:	4640      	mov	r0, r8
 8016644:	f7ff ffa6 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016648:	b200      	sxth	r0, r0
 801664a:	1b80      	subs	r0, r0, r6
 801664c:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8016650:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8016654:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8016658:	42a3      	cmp	r3, r4
 801665a:	dd1b      	ble.n	8016694 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 801665c:	682b      	ldr	r3, [r5, #0]
 801665e:	4621      	mov	r1, r4
 8016660:	4628      	mov	r0, r5
 8016662:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016666:	4798      	blx	r3
 8016668:	9001      	str	r0, [sp, #4]
 801666a:	4640      	mov	r0, r8
 801666c:	f7ff ff92 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016670:	b200      	sxth	r0, r0
 8016672:	1b80      	subs	r0, r0, r6
 8016674:	2800      	cmp	r0, #0
 8016676:	bfb8      	it	lt
 8016678:	4240      	neglt	r0, r0
 801667a:	4548      	cmp	r0, r9
 801667c:	bf38      	it	cc
 801667e:	803c      	strhcc	r4, [r7, #0]
 8016680:	f104 0401 	add.w	r4, r4, #1
 8016684:	bf38      	it	cc
 8016686:	4681      	movcc	r9, r0
 8016688:	b224      	sxth	r4, r4
 801668a:	e7e3      	b.n	8016654 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 801668c:	4618      	mov	r0, r3
 801668e:	b003      	add	sp, #12
 8016690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016694:	2001      	movs	r0, #1
 8016696:	e7fa      	b.n	801668e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08016698 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8016698:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 801669c:	f9bd 3000 	ldrsh.w	r3, [sp]
 80166a0:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 80166a4:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 80166a8:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 80166ac:	4770      	bx	lr

080166ae <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 80166ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166b0:	4604      	mov	r4, r0
 80166b2:	3038      	adds	r0, #56	@ 0x38
 80166b4:	460d      	mov	r5, r1
 80166b6:	f7fe f8ad 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80166ba:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80166be:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80166c2:	4628      	mov	r0, r5
 80166c4:	9200      	str	r2, [sp, #0]
 80166c6:	2200      	movs	r2, #0
 80166c8:	4611      	mov	r1, r2
 80166ca:	f7f4 f80d 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80166ce:	b003      	add	sp, #12
 80166d0:	bd30      	pop	{r4, r5, pc}

080166d2 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 80166d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166d4:	4604      	mov	r4, r0
 80166d6:	3064      	adds	r0, #100	@ 0x64
 80166d8:	460d      	mov	r5, r1
 80166da:	f7fe f89b 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80166de:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 80166e2:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 80166e6:	4628      	mov	r0, r5
 80166e8:	9200      	str	r2, [sp, #0]
 80166ea:	2200      	movs	r2, #0
 80166ec:	4611      	mov	r1, r2
 80166ee:	f7f3 fffb 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80166f2:	b003      	add	sp, #12
 80166f4:	bd30      	pop	{r4, r5, pc}

080166f6 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 80166f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166f8:	4604      	mov	r4, r0
 80166fa:	30e8      	adds	r0, #232	@ 0xe8
 80166fc:	460d      	mov	r5, r1
 80166fe:	f7fe f889 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016702:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8016706:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801670a:	4628      	mov	r0, r5
 801670c:	9200      	str	r2, [sp, #0]
 801670e:	2200      	movs	r2, #0
 8016710:	4611      	mov	r1, r2
 8016712:	f7f3 ffe9 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016716:	b003      	add	sp, #12
 8016718:	bd30      	pop	{r4, r5, pc}

0801671a <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 801671a:	b538      	push	{r3, r4, r5, lr}
 801671c:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016720:	460d      	mov	r5, r1
 8016722:	428b      	cmp	r3, r1
 8016724:	dd08      	ble.n	8016738 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8016726:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8016728:	b134      	cbz	r4, 8016738 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801672a:	6823      	ldr	r3, [r4, #0]
 801672c:	4620      	mov	r0, r4
 801672e:	4629      	mov	r1, r5
 8016730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016732:	4798      	blx	r3
 8016734:	69a4      	ldr	r4, [r4, #24]
 8016736:	e7f7      	b.n	8016728 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8016738:	bd38      	pop	{r3, r4, r5, pc}

0801673a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 801673a:	b570      	push	{r4, r5, r6, lr}
 801673c:	4606      	mov	r6, r0
 801673e:	460d      	mov	r5, r1
 8016740:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8016744:	b134      	cbz	r4, 8016754 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8016746:	6823      	ldr	r3, [r4, #0]
 8016748:	4620      	mov	r0, r4
 801674a:	4629      	mov	r1, r5
 801674c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801674e:	4798      	blx	r3
 8016750:	69a4      	ldr	r4, [r4, #24]
 8016752:	e7f7      	b.n	8016744 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8016754:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8016758:	b134      	cbz	r4, 8016768 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 801675a:	6823      	ldr	r3, [r4, #0]
 801675c:	4620      	mov	r0, r4
 801675e:	4629      	mov	r1, r5
 8016760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016762:	4798      	blx	r3
 8016764:	69a4      	ldr	r4, [r4, #24]
 8016766:	e7f7      	b.n	8016758 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8016768:	bd70      	pop	{r4, r5, r6, pc}

0801676a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 801676a:	b538      	push	{r3, r4, r5, lr}
 801676c:	4604      	mov	r4, r0
 801676e:	2500      	movs	r5, #0
 8016770:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016774:	42ab      	cmp	r3, r5
 8016776:	db05      	blt.n	8016784 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8016778:	b229      	sxth	r1, r5
 801677a:	4620      	mov	r0, r4
 801677c:	f7ff ffdd 	bl	801673a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016780:	3501      	adds	r5, #1
 8016782:	e7f5      	b.n	8016770 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8016784:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016788:	f005 fcef 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 801678c:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016794:	f005 bce9 	b.w	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>

08016798 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8016798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801679a:	4604      	mov	r4, r0
 801679c:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 801679e:	b15d      	cbz	r5, 80167b8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80167a0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80167a4:	4628      	mov	r0, r5
 80167a6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80167aa:	9200      	str	r2, [sp, #0]
 80167ac:	2200      	movs	r2, #0
 80167ae:	4611      	mov	r1, r2
 80167b0:	f7f3 ff9a 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80167b4:	69ad      	ldr	r5, [r5, #24]
 80167b6:	e7f2      	b.n	801679e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80167b8:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 80167bc:	b15d      	cbz	r5, 80167d6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80167be:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 80167c2:	4628      	mov	r0, r5
 80167c4:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 80167c8:	9200      	str	r2, [sp, #0]
 80167ca:	2200      	movs	r2, #0
 80167cc:	4611      	mov	r1, r2
 80167ce:	f7f3 ff8b 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80167d2:	69ad      	ldr	r5, [r5, #24]
 80167d4:	e7f2      	b.n	80167bc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 80167d6:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 80167da:	b15d      	cbz	r5, 80167f4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 80167dc:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 80167e0:	4628      	mov	r0, r5
 80167e2:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 80167e6:	9200      	str	r2, [sp, #0]
 80167e8:	2200      	movs	r2, #0
 80167ea:	4611      	mov	r1, r2
 80167ec:	f7f3 ff7c 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80167f0:	69ad      	ldr	r5, [r5, #24]
 80167f2:	e7f2      	b.n	80167da <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 80167f4:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 80167f8:	b15d      	cbz	r5, 8016812 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 80167fa:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 80167fe:	4628      	mov	r0, r5
 8016800:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8016804:	9200      	str	r2, [sp, #0]
 8016806:	2200      	movs	r2, #0
 8016808:	4611      	mov	r1, r2
 801680a:	f7f3 ff6d 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801680e:	69ad      	ldr	r5, [r5, #24]
 8016810:	e7f2      	b.n	80167f8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8016812:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8016816:	b15d      	cbz	r5, 8016830 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8016818:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 801681c:	4628      	mov	r0, r5
 801681e:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8016822:	9200      	str	r2, [sp, #0]
 8016824:	2200      	movs	r2, #0
 8016826:	4611      	mov	r1, r2
 8016828:	f7f3 ff5e 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801682c:	69ad      	ldr	r5, [r5, #24]
 801682e:	e7f2      	b.n	8016816 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8016830:	6823      	ldr	r3, [r4, #0]
 8016832:	4620      	mov	r0, r4
 8016834:	695b      	ldr	r3, [r3, #20]
 8016836:	b003      	add	sp, #12
 8016838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801683c:	4718      	bx	r3

0801683e <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 801683e:	b430      	push	{r4, r5}
 8016840:	b28a      	uxth	r2, r1
 8016842:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8016846:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 801684a:	1b15      	subs	r5, r2, r4
 801684c:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8016850:	8101      	strh	r1, [r0, #8]
 8016852:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8016856:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 801685a:	442c      	add	r4, r5
 801685c:	1b12      	subs	r2, r2, r4
 801685e:	bc30      	pop	{r4, r5}
 8016860:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016864:	f7ff bf98 	b.w	8016798 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016868 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8016868:	b430      	push	{r4, r5}
 801686a:	b28a      	uxth	r2, r1
 801686c:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8016870:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8016874:	1b15      	subs	r5, r2, r4
 8016876:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 801687a:	8141      	strh	r1, [r0, #10]
 801687c:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8016880:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8016884:	442c      	add	r4, r5
 8016886:	1b12      	subs	r2, r2, r4
 8016888:	bc30      	pop	{r4, r5}
 801688a:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 801688e:	f7ff bf83 	b.w	8016798 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016892 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8016892:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016896:	fa1f fa83 	uxth.w	sl, r3
 801689a:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 801689e:	4615      	mov	r5, r2
 80168a0:	4699      	mov	r9, r3
 80168a2:	fa1f f887 	uxth.w	r8, r7
 80168a6:	8903      	ldrh	r3, [r0, #8]
 80168a8:	4452      	add	r2, sl
 80168aa:	4604      	mov	r4, r0
 80168ac:	8940      	ldrh	r0, [r0, #10]
 80168ae:	460e      	mov	r6, r1
 80168b0:	1a9b      	subs	r3, r3, r2
 80168b2:	eb08 0201 	add.w	r2, r8, r1
 80168b6:	1a80      	subs	r0, r0, r2
 80168b8:	b21b      	sxth	r3, r3
 80168ba:	460a      	mov	r2, r1
 80168bc:	4629      	mov	r1, r5
 80168be:	b200      	sxth	r0, r0
 80168c0:	9000      	str	r0, [sp, #0]
 80168c2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80168c6:	f7f3 ff0f 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168ca:	2200      	movs	r2, #0
 80168cc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80168d0:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80168d4:	4611      	mov	r1, r2
 80168d6:	9600      	str	r6, [sp, #0]
 80168d8:	f7f3 ff06 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168dc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80168e0:	2200      	movs	r2, #0
 80168e2:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80168e6:	9300      	str	r3, [sp, #0]
 80168e8:	462b      	mov	r3, r5
 80168ea:	4611      	mov	r1, r2
 80168ec:	f7f3 fefc 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168f0:	8921      	ldrh	r1, [r4, #8]
 80168f2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80168f6:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80168fa:	eba1 010a 	sub.w	r1, r1, sl
 80168fe:	2200      	movs	r2, #0
 8016900:	9300      	str	r3, [sp, #0]
 8016902:	464b      	mov	r3, r9
 8016904:	b209      	sxth	r1, r1
 8016906:	f7f3 feef 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801690a:	8962      	ldrh	r2, [r4, #10]
 801690c:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016910:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016914:	eba2 0208 	sub.w	r2, r2, r8
 8016918:	9700      	str	r7, [sp, #0]
 801691a:	2100      	movs	r1, #0
 801691c:	b212      	sxth	r2, r2
 801691e:	f7f3 fee3 	bl	800a6e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016922:	4620      	mov	r0, r4
 8016924:	b002      	add	sp, #8
 8016926:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801692a:	f7ff bf35 	b.w	8016798 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08016930 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8016930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016934:	b085      	sub	sp, #20
 8016936:	4604      	mov	r4, r0
 8016938:	2601      	movs	r6, #1
 801693a:	2500      	movs	r5, #0
 801693c:	9103      	str	r1, [sp, #12]
 801693e:	f7ff fe0f 	bl	8016560 <_ZN8touchgfx9ContainerC1Ev>
 8016942:	4b2c      	ldr	r3, [pc, #176]	@ (80169f4 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8016944:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8016948:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 801694c:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8016950:	6023      	str	r3, [r4, #0]
 8016952:	23ff      	movs	r3, #255	@ 0xff
 8016954:	4658      	mov	r0, fp
 8016956:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 801695a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801695e:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8016962:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016966:	f7ff fdfb 	bl	8016560 <_ZN8touchgfx9ContainerC1Ev>
 801696a:	4648      	mov	r0, r9
 801696c:	f7ff fdf8 	bl	8016560 <_ZN8touchgfx9ContainerC1Ev>
 8016970:	4640      	mov	r0, r8
 8016972:	f7ff fdf5 	bl	8016560 <_ZN8touchgfx9ContainerC1Ev>
 8016976:	4650      	mov	r0, sl
 8016978:	f7ff fdf2 	bl	8016560 <_ZN8touchgfx9ContainerC1Ev>
 801697c:	4638      	mov	r0, r7
 801697e:	f7ff fdef 	bl	8016560 <_ZN8touchgfx9ContainerC1Ev>
 8016982:	9903      	ldr	r1, [sp, #12]
 8016984:	4620      	mov	r0, r4
 8016986:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 801698a:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 801698e:	4659      	mov	r1, fp
 8016990:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8016994:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8016998:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 801699c:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 80169a0:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 80169a4:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 80169a8:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80169ac:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80169b0:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 80169b4:	f7fd ff2e 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80169b8:	4651      	mov	r1, sl
 80169ba:	4620      	mov	r0, r4
 80169bc:	f7fd ff2a 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80169c0:	4649      	mov	r1, r9
 80169c2:	4620      	mov	r0, r4
 80169c4:	f7fd ff26 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80169c8:	4641      	mov	r1, r8
 80169ca:	4620      	mov	r0, r4
 80169cc:	f7fd ff22 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80169d0:	4639      	mov	r1, r7
 80169d2:	4620      	mov	r0, r4
 80169d4:	f7fd ff1e 	bl	8014814 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80169d8:	4620      	mov	r0, r4
 80169da:	9500      	str	r5, [sp, #0]
 80169dc:	462b      	mov	r3, r5
 80169de:	462a      	mov	r2, r5
 80169e0:	4629      	mov	r1, r5
 80169e2:	f7ff ff56 	bl	8016892 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 80169e6:	4620      	mov	r0, r4
 80169e8:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 80169ec:	b005      	add	sp, #20
 80169ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169f2:	bf00      	nop
 80169f4:	08031868 	.word	0x08031868

080169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 80169f8:	4291      	cmp	r1, r2
 80169fa:	4613      	mov	r3, r2
 80169fc:	d003      	beq.n	8016a06 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 80169fe:	460a      	mov	r2, r1
 8016a00:	4619      	mov	r1, r3
 8016a02:	f005 bd7c 	b.w	801c4fe <_ZN8touchgfx6muldivElll>
 8016a06:	4770      	bx	lr

08016a08 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8016a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a0c:	6803      	ldr	r3, [r0, #0]
 8016a0e:	460d      	mov	r5, r1
 8016a10:	4604      	mov	r4, r0
 8016a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016a16:	4798      	blx	r3
 8016a18:	42a8      	cmp	r0, r5
 8016a1a:	4606      	mov	r6, r0
 8016a1c:	d024      	beq.n	8016a68 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8016a1e:	6823      	ldr	r3, [r4, #0]
 8016a20:	4601      	mov	r1, r0
 8016a22:	462a      	mov	r2, r5
 8016a24:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8016a28:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8016a2c:	f7ff ffe4 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016a30:	4680      	mov	r8, r0
 8016a32:	462a      	mov	r2, r5
 8016a34:	4631      	mov	r1, r6
 8016a36:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8016a3a:	f7ff ffdd 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016a3e:	4641      	mov	r1, r8
 8016a40:	4602      	mov	r2, r0
 8016a42:	4620      	mov	r0, r4
 8016a44:	47b8      	blx	r7
 8016a46:	462a      	mov	r2, r5
 8016a48:	4631      	mov	r1, r6
 8016a4a:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8016a4e:	f7ff ffd3 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016a52:	462a      	mov	r2, r5
 8016a54:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8016a58:	4631      	mov	r1, r6
 8016a5a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8016a5e:	f7ff ffcb 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016a62:	6325      	str	r5, [r4, #48]	@ 0x30
 8016a64:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8016a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a6c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8016a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a70:	4604      	mov	r4, r0
 8016a72:	460f      	mov	r7, r1
 8016a74:	b1b2      	cbz	r2, 8016aa4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8016a76:	6803      	ldr	r3, [r0, #0]
 8016a78:	2600      	movs	r6, #0
 8016a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016a7e:	4798      	blx	r3
 8016a80:	4681      	mov	r9, r0
 8016a82:	b235      	sxth	r5, r6
 8016a84:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016a88:	3601      	adds	r6, #1
 8016a8a:	42ab      	cmp	r3, r5
 8016a8c:	dd0a      	ble.n	8016aa4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8016a8e:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8016a92:	463a      	mov	r2, r7
 8016a94:	4649      	mov	r1, r9
 8016a96:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8016a9a:	f7ff ffad 	bl	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016a9e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8016aa2:	e7ee      	b.n	8016a82 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8016aa4:	6367      	str	r7, [r4, #52]	@ 0x34
 8016aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aac:	4604      	mov	r4, r0
 8016aae:	4608      	mov	r0, r1
 8016ab0:	460d      	mov	r5, r1
 8016ab2:	f7fe f86e 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ab6:	b978      	cbnz	r0, 8016ad8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f7fe f86a 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016abe:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016ac2:	b150      	cbz	r0, 8016ada <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016ac4:	8026      	strh	r6, [r4, #0]
 8016ac6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016aca:	8063      	strh	r3, [r4, #2]
 8016acc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016ad0:	80a3      	strh	r3, [r4, #4]
 8016ad2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016ad6:	80e3      	strh	r3, [r4, #6]
 8016ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ada:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016ade:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016ae2:	42b1      	cmp	r1, r6
 8016ae4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016ae8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016aec:	460f      	mov	r7, r1
 8016aee:	88ed      	ldrh	r5, [r5, #6]
 8016af0:	bfa8      	it	ge
 8016af2:	4637      	movge	r7, r6
 8016af4:	4293      	cmp	r3, r2
 8016af6:	4618      	mov	r0, r3
 8016af8:	4466      	add	r6, ip
 8016afa:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016afe:	bfa8      	it	ge
 8016b00:	4610      	movge	r0, r2
 8016b02:	442a      	add	r2, r5
 8016b04:	88e5      	ldrh	r5, [r4, #6]
 8016b06:	4461      	add	r1, ip
 8016b08:	b236      	sxth	r6, r6
 8016b0a:	8027      	strh	r7, [r4, #0]
 8016b0c:	442b      	add	r3, r5
 8016b0e:	b209      	sxth	r1, r1
 8016b10:	b212      	sxth	r2, r2
 8016b12:	8060      	strh	r0, [r4, #2]
 8016b14:	b21b      	sxth	r3, r3
 8016b16:	428e      	cmp	r6, r1
 8016b18:	bfac      	ite	ge
 8016b1a:	ebc7 0106 	rsbge	r1, r7, r6
 8016b1e:	ebc7 0101 	rsblt	r1, r7, r1
 8016b22:	429a      	cmp	r2, r3
 8016b24:	bfac      	ite	ge
 8016b26:	ebc0 0202 	rsbge	r2, r0, r2
 8016b2a:	ebc0 0203 	rsblt	r2, r0, r3
 8016b2e:	80a1      	strh	r1, [r4, #4]
 8016b30:	80e2      	strh	r2, [r4, #6]
 8016b32:	e7d1      	b.n	8016ad8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08016b34 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8016b34:	6800      	ldr	r0, [r0, #0]
 8016b36:	2800      	cmp	r0, #0
 8016b38:	bfb9      	ittee	lt
 8016b3a:	2320      	movlt	r3, #32
 8016b3c:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016b40:	301f      	addge	r0, #31
 8016b42:	1140      	asrge	r0, r0, #5
 8016b44:	4770      	bx	lr

08016b46 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8016b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b4a:	6803      	ldr	r3, [r0, #0]
 8016b4c:	b093      	sub	sp, #76	@ 0x4c
 8016b4e:	6945      	ldr	r5, [r0, #20]
 8016b50:	4604      	mov	r4, r0
 8016b52:	460f      	mov	r7, r1
 8016b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016b56:	2d00      	cmp	r5, #0
 8016b58:	f000 81ad 	beq.w	8016eb6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 8016b5c:	696d      	ldr	r5, [r5, #20]
 8016b5e:	4798      	blx	r3
 8016b60:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d077      	beq.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016b68:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016b6c:	fb13 f000 	smulbb	r0, r3, r0
 8016b70:	b283      	uxth	r3, r0
 8016b72:	1c58      	adds	r0, r3, #1
 8016b74:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016b78:	1200      	asrs	r0, r0, #8
 8016b7a:	d06d      	beq.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016b7c:	b2c3      	uxtb	r3, r0
 8016b7e:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8016b82:	462a      	mov	r2, r5
 8016b84:	4621      	mov	r1, r4
 8016b86:	9308      	str	r3, [sp, #32]
 8016b88:	4640      	mov	r0, r8
 8016b8a:	6823      	ldr	r3, [r4, #0]
 8016b8c:	ae0e      	add	r6, sp, #56	@ 0x38
 8016b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b92:	4798      	blx	r3
 8016b94:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016b98:	e886 0003 	stmia.w	r6, {r0, r1}
 8016b9c:	4639      	mov	r1, r7
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f7fd ffb4 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	4620      	mov	r0, r4
 8016baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016bae:	4798      	blx	r3
 8016bb0:	6823      	ldr	r3, [r4, #0]
 8016bb2:	4607      	mov	r7, r0
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016bba:	4620      	mov	r0, r4
 8016bbc:	4798      	blx	r3
 8016bbe:	4681      	mov	r9, r0
 8016bc0:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 8016bc4:	4629      	mov	r1, r5
 8016bc6:	0103      	lsls	r3, r0, #4
 8016bc8:	4620      	mov	r0, r4
 8016bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bcc:	6823      	ldr	r3, [r4, #0]
 8016bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016bd2:	4798      	blx	r3
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	b203      	sxth	r3, r0
 8016bd8:	4620      	mov	r0, r4
 8016bda:	9306      	str	r3, [sp, #24]
 8016bdc:	6823      	ldr	r3, [r4, #0]
 8016bde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016be2:	4798      	blx	r3
 8016be4:	2f00      	cmp	r7, #0
 8016be6:	b203      	sxth	r3, r0
 8016be8:	9307      	str	r3, [sp, #28]
 8016bea:	d138      	bne.n	8016c5e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8016bec:	f1b9 0f00 	cmp.w	r9, #0
 8016bf0:	d132      	bne.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016bf2:	6823      	ldr	r3, [r4, #0]
 8016bf4:	464a      	mov	r2, r9
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016bfe:	4798      	blx	r3
 8016c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c02:	1ac0      	subs	r0, r0, r3
 8016c04:	9010      	str	r0, [sp, #64]	@ 0x40
 8016c06:	4640      	mov	r0, r8
 8016c08:	f7ff fcc4 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016c0c:	6823      	ldr	r3, [r4, #0]
 8016c0e:	4607      	mov	r7, r0
 8016c10:	4629      	mov	r1, r5
 8016c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016c16:	4620      	mov	r0, r4
 8016c18:	4798      	blx	r3
 8016c1a:	1a38      	subs	r0, r7, r0
 8016c1c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016c20:	fa0f f880 	sxth.w	r8, r0
 8016c24:	eb13 0f08 	cmn.w	r3, r8
 8016c28:	d416      	bmi.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	4629      	mov	r1, r5
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016c34:	4798      	blx	r3
 8016c36:	4580      	cmp	r8, r0
 8016c38:	da0e      	bge.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016c3a:	9a08      	ldr	r2, [sp, #32]
 8016c3c:	b23f      	sxth	r7, r7
 8016c3e:	6823      	ldr	r3, [r4, #0]
 8016c40:	4631      	mov	r1, r6
 8016c42:	9202      	str	r2, [sp, #8]
 8016c44:	4620      	mov	r0, r4
 8016c46:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8016c4a:	9700      	str	r7, [sp, #0]
 8016c4c:	9201      	str	r2, [sp, #4]
 8016c4e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8016c52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c56:	47a8      	blx	r5
 8016c58:	b013      	add	sp, #76	@ 0x4c
 8016c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5e:	ddfb      	ble.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016c60:	6823      	ldr	r3, [r4, #0]
 8016c62:	4629      	mov	r1, r5
 8016c64:	4620      	mov	r0, r4
 8016c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016c6a:	4798      	blx	r3
 8016c6c:	6823      	ldr	r3, [r4, #0]
 8016c6e:	4683      	mov	fp, r0
 8016c70:	4629      	mov	r1, r5
 8016c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016c76:	4620      	mov	r0, r4
 8016c78:	4798      	blx	r3
 8016c7a:	eba0 030b 	sub.w	r3, r0, fp
 8016c7e:	4680      	mov	r8, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	bfb8      	it	lt
 8016c84:	425b      	neglt	r3, r3
 8016c86:	fb93 f3f7 	sdiv	r3, r3, r7
 8016c8a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8016c8e:	dce3      	bgt.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	465a      	mov	r2, fp
 8016c94:	4629      	mov	r1, r5
 8016c96:	4620      	mov	r0, r4
 8016c98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016c9c:	4798      	blx	r3
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	4606      	mov	r6, r0
 8016ca2:	4642      	mov	r2, r8
 8016ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016ca8:	4629      	mov	r1, r5
 8016caa:	4620      	mov	r0, r4
 8016cac:	4798      	blx	r3
 8016cae:	42b0      	cmp	r0, r6
 8016cb0:	bfa2      	ittt	ge
 8016cb2:	4643      	movge	r3, r8
 8016cb4:	46d8      	movge	r8, fp
 8016cb6:	469b      	movge	fp, r3
 8016cb8:	fb98 f6f7 	sdiv	r6, r8, r7
 8016cbc:	fb9b f2f7 	sdiv	r2, fp, r7
 8016cc0:	45d8      	cmp	r8, fp
 8016cc2:	bfac      	ite	ge
 8016cc4:	f04f 33ff 	movge.w	r3, #4294967295
 8016cc8:	2301      	movlt	r3, #1
 8016cca:	1af6      	subs	r6, r6, r3
 8016ccc:	441a      	add	r2, r3
 8016cce:	4296      	cmp	r6, r2
 8016cd0:	bfac      	ite	ge
 8016cd2:	f04f 3aff 	movge.w	sl, #4294967295
 8016cd6:	f04f 0a01 	movlt.w	sl, #1
 8016cda:	f1b9 0f00 	cmp.w	r9, #0
 8016cde:	d13e      	bne.n	8016d5e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8016ce0:	fb07 fb0a 	mul.w	fp, r7, sl
 8016ce4:	eb0a 0802 	add.w	r8, sl, r2
 8016ce8:	4377      	muls	r7, r6
 8016cea:	45b0      	cmp	r8, r6
 8016cec:	d0b4      	beq.n	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016cee:	6823      	ldr	r3, [r4, #0]
 8016cf0:	463a      	mov	r2, r7
 8016cf2:	4629      	mov	r1, r5
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016cfa:	4798      	blx	r3
 8016cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cfe:	1ac0      	subs	r0, r0, r3
 8016d00:	9010      	str	r0, [sp, #64]	@ 0x40
 8016d02:	a810      	add	r0, sp, #64	@ 0x40
 8016d04:	f7ff fc46 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016d08:	6823      	ldr	r3, [r4, #0]
 8016d0a:	4681      	mov	r9, r0
 8016d0c:	4629      	mov	r1, r5
 8016d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016d12:	4620      	mov	r0, r4
 8016d14:	4798      	blx	r3
 8016d16:	eba9 0000 	sub.w	r0, r9, r0
 8016d1a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8016d1e:	b203      	sxth	r3, r0
 8016d20:	42da      	cmn	r2, r3
 8016d22:	9304      	str	r3, [sp, #16]
 8016d24:	d418      	bmi.n	8016d58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8016d26:	6822      	ldr	r2, [r4, #0]
 8016d28:	4629      	mov	r1, r5
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8016d30:	4790      	blx	r2
 8016d32:	9b04      	ldr	r3, [sp, #16]
 8016d34:	4283      	cmp	r3, r0
 8016d36:	da0f      	bge.n	8016d58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8016d38:	9b08      	ldr	r3, [sp, #32]
 8016d3a:	a90e      	add	r1, sp, #56	@ 0x38
 8016d3c:	6822      	ldr	r2, [r4, #0]
 8016d3e:	4620      	mov	r0, r4
 8016d40:	9302      	str	r3, [sp, #8]
 8016d42:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016d46:	9301      	str	r3, [sp, #4]
 8016d48:	fa0f f389 	sxth.w	r3, r9
 8016d4c:	9300      	str	r3, [sp, #0]
 8016d4e:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 8016d52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d56:	47c8      	blx	r9
 8016d58:	4456      	add	r6, sl
 8016d5a:	445f      	add	r7, fp
 8016d5c:	e7c5      	b.n	8016cea <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8016d5e:	fb98 f8f9 	sdiv	r8, r8, r9
 8016d62:	eba8 0203 	sub.w	r2, r8, r3
 8016d66:	4629      	mov	r1, r5
 8016d68:	4620      	mov	r0, r4
 8016d6a:	9204      	str	r2, [sp, #16]
 8016d6c:	fb9b f8f9 	sdiv	r8, fp, r9
 8016d70:	4498      	add	r8, r3
 8016d72:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8016d76:	4542      	cmp	r2, r8
 8016d78:	bfac      	ite	ge
 8016d7a:	f04f 33ff 	movge.w	r3, #4294967295
 8016d7e:	2301      	movlt	r3, #1
 8016d80:	fb02 f209 	mul.w	r2, r2, r9
 8016d84:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d86:	6823      	ldr	r3, [r4, #0]
 8016d88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016d8c:	4798      	blx	r3
 8016d8e:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8016d92:	4658      	mov	r0, fp
 8016d94:	f7ff fbfe 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016d98:	fb06 f207 	mul.w	r2, r6, r7
 8016d9c:	b203      	sxth	r3, r0
 8016d9e:	4629      	mov	r1, r5
 8016da0:	4620      	mov	r0, r4
 8016da2:	9305      	str	r3, [sp, #20]
 8016da4:	6823      	ldr	r3, [r4, #0]
 8016da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016daa:	4798      	blx	r3
 8016dac:	9010      	str	r0, [sp, #64]	@ 0x40
 8016dae:	4658      	mov	r0, fp
 8016db0:	f7ff fbf0 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016db4:	fb07 f20a 	mul.w	r2, r7, sl
 8016db8:	b203      	sxth	r3, r0
 8016dba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016dbe:	4442      	add	r2, r8
 8016dc0:	920c      	str	r2, [sp, #48]	@ 0x30
 8016dc2:	9a05      	ldr	r2, [sp, #20]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	dc16      	bgt.n	8016df6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8016dc8:	eb06 080a 	add.w	r8, r6, sl
 8016dcc:	fb07 f808 	mul.w	r8, r7, r8
 8016dd0:	9a05      	ldr	r2, [sp, #20]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	db54      	blt.n	8016e80 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8016dd6:	6823      	ldr	r3, [r4, #0]
 8016dd8:	4642      	mov	r2, r8
 8016dda:	4629      	mov	r1, r5
 8016ddc:	4620      	mov	r0, r4
 8016dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016de2:	4456      	add	r6, sl
 8016de4:	4798      	blx	r3
 8016de6:	9010      	str	r0, [sp, #64]	@ 0x40
 8016de8:	4658      	mov	r0, fp
 8016dea:	f7ff fbd3 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016dee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016df0:	b203      	sxth	r3, r0
 8016df2:	4490      	add	r8, r2
 8016df4:	e7ec      	b.n	8016dd0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8016df6:	6823      	ldr	r3, [r4, #0]
 8016df8:	fb07 f206 	mul.w	r2, r7, r6
 8016dfc:	4629      	mov	r1, r5
 8016dfe:	4620      	mov	r0, r4
 8016e00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016e04:	4798      	blx	r3
 8016e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e08:	1ac0      	subs	r0, r0, r3
 8016e0a:	9010      	str	r0, [sp, #64]	@ 0x40
 8016e0c:	4658      	mov	r0, fp
 8016e0e:	f7ff fbc1 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e12:	6823      	ldr	r3, [r4, #0]
 8016e14:	4680      	mov	r8, r0
 8016e16:	4629      	mov	r1, r5
 8016e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	4798      	blx	r3
 8016e20:	eba8 0000 	sub.w	r0, r8, r0
 8016e24:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8016e28:	b203      	sxth	r3, r0
 8016e2a:	42da      	cmn	r2, r3
 8016e2c:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e2e:	d418      	bmi.n	8016e62 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8016e30:	6822      	ldr	r2, [r4, #0]
 8016e32:	4629      	mov	r1, r5
 8016e34:	4620      	mov	r0, r4
 8016e36:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8016e3a:	4790      	blx	r2
 8016e3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e3e:	4283      	cmp	r3, r0
 8016e40:	da0f      	bge.n	8016e62 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8016e42:	9b08      	ldr	r3, [sp, #32]
 8016e44:	a90e      	add	r1, sp, #56	@ 0x38
 8016e46:	6822      	ldr	r2, [r4, #0]
 8016e48:	4620      	mov	r0, r4
 8016e4a:	9302      	str	r3, [sp, #8]
 8016e4c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016e50:	9301      	str	r3, [sp, #4]
 8016e52:	fa0f f388 	sxth.w	r3, r8
 8016e56:	9300      	str	r3, [sp, #0]
 8016e58:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 8016e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e60:	47c0      	blx	r8
 8016e62:	6823      	ldr	r3, [r4, #0]
 8016e64:	4456      	add	r6, sl
 8016e66:	4629      	mov	r1, r5
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016e6e:	fb06 f207 	mul.w	r2, r6, r7
 8016e72:	4798      	blx	r3
 8016e74:	9010      	str	r0, [sp, #64]	@ 0x40
 8016e76:	4658      	mov	r0, fp
 8016e78:	f7ff fb8c 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e7c:	b203      	sxth	r3, r0
 8016e7e:	e7a0      	b.n	8016dc2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8016e80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e82:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e84:	9b04      	ldr	r3, [sp, #16]
 8016e86:	4413      	add	r3, r2
 8016e88:	9304      	str	r3, [sp, #16]
 8016e8a:	9a04      	ldr	r2, [sp, #16]
 8016e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	f43f aee2 	beq.w	8016c58 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016e94:	9b04      	ldr	r3, [sp, #16]
 8016e96:	4629      	mov	r1, r5
 8016e98:	6822      	ldr	r2, [r4, #0]
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 8016ea0:	fb03 f209 	mul.w	r2, r3, r9
 8016ea4:	47c0      	blx	r8
 8016ea6:	9010      	str	r0, [sp, #64]	@ 0x40
 8016ea8:	4658      	mov	r0, fp
 8016eaa:	f7ff fb73 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016eae:	b203      	sxth	r3, r0
 8016eb0:	9305      	str	r3, [sp, #20]
 8016eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016eb4:	e785      	b.n	8016dc2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8016eb6:	4798      	blx	r3
 8016eb8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016ebc:	deff      	udf	#255	@ 0xff

08016ebe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016ebe:	b510      	push	{r4, lr}
 8016ec0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016ec4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016ec8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016ecc:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016ed0:	139b      	asrs	r3, r3, #14
 8016ed2:	13a4      	asrs	r4, r4, #14
 8016ed4:	429c      	cmp	r4, r3
 8016ed6:	bfb8      	it	lt
 8016ed8:	461c      	movlt	r4, r3
 8016eda:	2c01      	cmp	r4, #1
 8016edc:	dd07      	ble.n	8016eee <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016ede:	fb91 f1f4 	sdiv	r1, r1, r4
 8016ee2:	fb90 f0f4 	sdiv	r0, r0, r4
 8016ee6:	f7ff ffea 	bl	8016ebe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016eea:	4360      	muls	r0, r4
 8016eec:	bd10      	pop	{r4, pc}
 8016eee:	4340      	muls	r0, r0
 8016ef0:	fb01 0101 	mla	r1, r1, r1, r0
 8016ef4:	2000      	movs	r0, #0
 8016ef6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8016efa:	bfb4      	ite	lt
 8016efc:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8016f00:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8016f04:	18c2      	adds	r2, r0, r3
 8016f06:	428a      	cmp	r2, r1
 8016f08:	bf9c      	itt	ls
 8016f0a:	1898      	addls	r0, r3, r2
 8016f0c:	1a89      	subls	r1, r1, r2
 8016f0e:	089b      	lsrs	r3, r3, #2
 8016f10:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8016f14:	d1f6      	bne.n	8016f04 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8016f16:	e7e9      	b.n	8016eec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08016f18 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8016f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f1a:	9906      	ldr	r1, [sp, #24]
 8016f1c:	4606      	mov	r6, r0
 8016f1e:	461c      	mov	r4, r3
 8016f20:	2020      	movs	r0, #32
 8016f22:	4291      	cmp	r1, r2
 8016f24:	bfbc      	itt	lt
 8016f26:	9206      	strlt	r2, [sp, #24]
 8016f28:	460a      	movlt	r2, r1
 8016f2a:	9907      	ldr	r1, [sp, #28]
 8016f2c:	428b      	cmp	r3, r1
 8016f2e:	bfc4      	itt	gt
 8016f30:	460c      	movgt	r4, r1
 8016f32:	9307      	strgt	r3, [sp, #28]
 8016f34:	fb92 f5f0 	sdiv	r5, r2, r0
 8016f38:	fb94 f4f0 	sdiv	r4, r4, r0
 8016f3c:	a806      	add	r0, sp, #24
 8016f3e:	f7ff fdf9 	bl	8016b34 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016f42:	4607      	mov	r7, r0
 8016f44:	a807      	add	r0, sp, #28
 8016f46:	f7ff fdf5 	bl	8016b34 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016f4a:	1b7a      	subs	r2, r7, r5
 8016f4c:	1b00      	subs	r0, r0, r4
 8016f4e:	8035      	strh	r5, [r6, #0]
 8016f50:	8074      	strh	r4, [r6, #2]
 8016f52:	80f0      	strh	r0, [r6, #6]
 8016f54:	4630      	mov	r0, r6
 8016f56:	80b2      	strh	r2, [r6, #4]
 8016f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016f5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8016f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f5c:	9c08      	ldr	r4, [sp, #32]
 8016f5e:	2602      	movs	r6, #2
 8016f60:	4605      	mov	r5, r0
 8016f62:	3401      	adds	r4, #1
 8016f64:	fb94 f4f6 	sdiv	r4, r4, r6
 8016f68:	18a6      	adds	r6, r4, r2
 8016f6a:	191f      	adds	r7, r3, r4
 8016f6c:	1b12      	subs	r2, r2, r4
 8016f6e:	1b1b      	subs	r3, r3, r4
 8016f70:	e9cd 6700 	strd	r6, r7, [sp]
 8016f74:	f7ff ffd0 	bl	8016f18 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8016f78:	4628      	mov	r0, r5
 8016f7a:	b003      	add	sp, #12
 8016f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f7e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8016f7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f82:	6943      	ldr	r3, [r0, #20]
 8016f84:	b087      	sub	sp, #28
 8016f86:	4606      	mov	r6, r0
 8016f88:	460d      	mov	r5, r1
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d072      	beq.n	8017074 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8016f8e:	695c      	ldr	r4, [r3, #20]
 8016f90:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8016f94:	6823      	ldr	r3, [r4, #0]
 8016f96:	4620      	mov	r0, r4
 8016f98:	017f      	lsls	r7, r7, #5
 8016f9a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016f9e:	4798      	blx	r3
 8016fa0:	6823      	ldr	r3, [r4, #0]
 8016fa2:	4680      	mov	r8, r0
 8016fa4:	4629      	mov	r1, r5
 8016fa6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016faa:	4620      	mov	r0, r4
 8016fac:	4798      	blx	r3
 8016fae:	9700      	str	r7, [sp, #0]
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	4642      	mov	r2, r8
 8016fb4:	4631      	mov	r1, r6
 8016fb6:	a802      	add	r0, sp, #8
 8016fb8:	f7ff ffcf 	bl	8016f5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8016fbc:	2d00      	cmp	r5, #0
 8016fbe:	dd1b      	ble.n	8016ff8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8016fc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8016fc4:	6823      	ldr	r3, [r4, #0]
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	fa0f f888 	sxth.w	r8, r8
 8016fcc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016fd0:	4641      	mov	r1, r8
 8016fd2:	4798      	blx	r3
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	4681      	mov	r9, r0
 8016fd8:	4641      	mov	r1, r8
 8016fda:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016fde:	4620      	mov	r0, r4
 8016fe0:	4798      	blx	r3
 8016fe2:	4631      	mov	r1, r6
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	9700      	str	r7, [sp, #0]
 8016fe8:	a804      	add	r0, sp, #16
 8016fea:	464a      	mov	r2, r9
 8016fec:	f7ff ffb5 	bl	8016f5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8016ff0:	a904      	add	r1, sp, #16
 8016ff2:	a802      	add	r0, sp, #8
 8016ff4:	f7ff fd59 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016ff8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016ffc:	3b01      	subs	r3, #1
 8016ffe:	429d      	cmp	r5, r3
 8017000:	da19      	bge.n	8017036 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8017002:	3501      	adds	r5, #1
 8017004:	6823      	ldr	r3, [r4, #0]
 8017006:	4620      	mov	r0, r4
 8017008:	b22d      	sxth	r5, r5
 801700a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801700e:	4629      	mov	r1, r5
 8017010:	4798      	blx	r3
 8017012:	6823      	ldr	r3, [r4, #0]
 8017014:	4680      	mov	r8, r0
 8017016:	4629      	mov	r1, r5
 8017018:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801701c:	4620      	mov	r0, r4
 801701e:	4798      	blx	r3
 8017020:	4631      	mov	r1, r6
 8017022:	4603      	mov	r3, r0
 8017024:	9700      	str	r7, [sp, #0]
 8017026:	a804      	add	r0, sp, #16
 8017028:	4642      	mov	r2, r8
 801702a:	f7ff ff96 	bl	8016f5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801702e:	a904      	add	r1, sp, #16
 8017030:	a802      	add	r0, sp, #8
 8017032:	f7ff fd3a 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017036:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 801703a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 801703e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8017042:	18ca      	adds	r2, r1, r3
 8017044:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8017048:	f8ad 1012 	strh.w	r1, [sp, #18]
 801704c:	a904      	add	r1, sp, #16
 801704e:	1a9b      	subs	r3, r3, r2
 8017050:	2200      	movs	r2, #0
 8017052:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017056:	a802      	add	r0, sp, #8
 8017058:	f8ad 2010 	strh.w	r2, [sp, #16]
 801705c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017060:	f7fd fd54 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8017064:	6833      	ldr	r3, [r6, #0]
 8017066:	a902      	add	r1, sp, #8
 8017068:	4630      	mov	r0, r6
 801706a:	691b      	ldr	r3, [r3, #16]
 801706c:	4798      	blx	r3
 801706e:	b007      	add	sp, #28
 8017070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	deff      	udf	#255	@ 0xff

08017078 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8017078:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	da05      	bge.n	801708c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8017080:	b29b      	uxth	r3, r3
 8017082:	880a      	ldrh	r2, [r1, #0]
 8017084:	441a      	add	r2, r3
 8017086:	425b      	negs	r3, r3
 8017088:	800a      	strh	r2, [r1, #0]
 801708a:	808b      	strh	r3, [r1, #4]
 801708c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017090:	2b00      	cmp	r3, #0
 8017092:	da05      	bge.n	80170a0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8017094:	b29b      	uxth	r3, r3
 8017096:	884a      	ldrh	r2, [r1, #2]
 8017098:	441a      	add	r2, r3
 801709a:	425b      	negs	r3, r3
 801709c:	804a      	strh	r2, [r1, #2]
 801709e:	80cb      	strh	r3, [r1, #6]
 80170a0:	4770      	bx	lr

080170a2 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 80170a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80170a4:	4604      	mov	r4, r0
 80170a6:	460d      	mov	r5, r1
 80170a8:	6801      	ldr	r1, [r0, #0]
 80170aa:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 80170ae:	9001      	str	r0, [sp, #4]
 80170b0:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80170b4:	9000      	str	r0, [sp, #0]
 80170b6:	a802      	add	r0, sp, #8
 80170b8:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 80170bc:	4621      	mov	r1, r4
 80170be:	47b0      	blx	r6
 80170c0:	a902      	add	r1, sp, #8
 80170c2:	4620      	mov	r0, r4
 80170c4:	f7ff ffd8 	bl	8017078 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 80170c8:	a802      	add	r0, sp, #8
 80170ca:	4629      	mov	r1, r5
 80170cc:	f7fd fd1e 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 80170d0:	a802      	add	r0, sp, #8
 80170d2:	f7fd fd5e 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 80170d6:	b968      	cbnz	r0, 80170f4 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 80170d8:	6823      	ldr	r3, [r4, #0]
 80170da:	a902      	add	r1, sp, #8
 80170dc:	4620      	mov	r0, r4
 80170de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170e0:	4798      	blx	r3
 80170e2:	f7f3 fd35 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 80170e6:	6803      	ldr	r3, [r0, #0]
 80170e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80170ea:	a902      	add	r1, sp, #8
 80170ec:	6a1d      	ldr	r5, [r3, #32]
 80170ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80170f2:	47a8      	blx	r5
 80170f4:	b004      	add	sp, #16
 80170f6:	bd70      	pop	{r4, r5, r6, pc}

080170f8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 80170f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170fc:	b08b      	sub	sp, #44	@ 0x2c
 80170fe:	461e      	mov	r6, r3
 8017100:	460f      	mov	r7, r1
 8017102:	4615      	mov	r5, r2
 8017104:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8017108:	429e      	cmp	r6, r3
 801710a:	9304      	str	r3, [sp, #16]
 801710c:	d074      	beq.n	80171f8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 801710e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8017112:	4631      	mov	r1, r6
 8017114:	4610      	mov	r0, r2
 8017116:	4634      	mov	r4, r6
 8017118:	015b      	lsls	r3, r3, #5
 801711a:	9303      	str	r3, [sp, #12]
 801711c:	6813      	ldr	r3, [r2, #0]
 801711e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017122:	4798      	blx	r3
 8017124:	ab0a      	add	r3, sp, #40	@ 0x28
 8017126:	f843 0d10 	str.w	r0, [r3, #-16]!
 801712a:	4618      	mov	r0, r3
 801712c:	f7ff fa32 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017130:	682b      	ldr	r3, [r5, #0]
 8017132:	4631      	mov	r1, r6
 8017134:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017138:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801713c:	4628      	mov	r0, r5
 801713e:	4798      	blx	r3
 8017140:	ab0a      	add	r3, sp, #40	@ 0x28
 8017142:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8017146:	4618      	mov	r0, r3
 8017148:	f7ff fa24 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801714c:	4641      	mov	r1, r8
 801714e:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8017152:	4638      	mov	r0, r7
 8017154:	464a      	mov	r2, r9
 8017156:	f015 fdc5 	bl	802cce4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801715a:	2301      	movs	r3, #1
 801715c:	9300      	str	r3, [sp, #0]
 801715e:	4628      	mov	r0, r5
 8017160:	9b00      	ldr	r3, [sp, #0]
 8017162:	441c      	add	r4, r3
 8017164:	682b      	ldr	r3, [r5, #0]
 8017166:	b224      	sxth	r4, r4
 8017168:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801716c:	4621      	mov	r1, r4
 801716e:	4798      	blx	r3
 8017170:	9008      	str	r0, [sp, #32]
 8017172:	a808      	add	r0, sp, #32
 8017174:	f7ff fa0e 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017178:	4621      	mov	r1, r4
 801717a:	0143      	lsls	r3, r0, #5
 801717c:	4628      	mov	r0, r5
 801717e:	9301      	str	r3, [sp, #4]
 8017180:	682b      	ldr	r3, [r5, #0]
 8017182:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017186:	4798      	blx	r3
 8017188:	9009      	str	r0, [sp, #36]	@ 0x24
 801718a:	a809      	add	r0, sp, #36	@ 0x24
 801718c:	f7ff fa02 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017190:	0143      	lsls	r3, r0, #5
 8017192:	9302      	str	r3, [sp, #8]
 8017194:	9b01      	ldr	r3, [sp, #4]
 8017196:	eba3 0b08 	sub.w	fp, r3, r8
 801719a:	9b02      	ldr	r3, [sp, #8]
 801719c:	eba3 0a09 	sub.w	sl, r3, r9
 80171a0:	4658      	mov	r0, fp
 80171a2:	4651      	mov	r1, sl
 80171a4:	f7ff fe8b 	bl	8016ebe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80171a8:	b320      	cbz	r0, 80171f4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 80171aa:	4602      	mov	r2, r0
 80171ac:	4651      	mov	r1, sl
 80171ae:	9005      	str	r0, [sp, #20]
 80171b0:	9803      	ldr	r0, [sp, #12]
 80171b2:	f005 f9a4 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 80171b6:	2302      	movs	r3, #2
 80171b8:	4659      	mov	r1, fp
 80171ba:	fb90 faf3 	sdiv	sl, r0, r3
 80171be:	9b05      	ldr	r3, [sp, #20]
 80171c0:	9803      	ldr	r0, [sp, #12]
 80171c2:	461a      	mov	r2, r3
 80171c4:	f005 f99b 	bl	801c4fe <_ZN8touchgfx6muldivElll>
 80171c8:	2302      	movs	r3, #2
 80171ca:	eba8 010a 	sub.w	r1, r8, sl
 80171ce:	fb90 fbf3 	sdiv	fp, r0, r3
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	eb0b 0209 	add.w	r2, fp, r9
 80171d8:	4638      	mov	r0, r7
 80171da:	689b      	ldr	r3, [r3, #8]
 80171dc:	4798      	blx	r3
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	9a02      	ldr	r2, [sp, #8]
 80171e2:	4638      	mov	r0, r7
 80171e4:	9901      	ldr	r1, [sp, #4]
 80171e6:	689b      	ldr	r3, [r3, #8]
 80171e8:	445a      	add	r2, fp
 80171ea:	eba1 010a 	sub.w	r1, r1, sl
 80171ee:	4798      	blx	r3
 80171f0:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 80171f4:	42a6      	cmp	r6, r4
 80171f6:	db02      	blt.n	80171fe <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 80171f8:	b00b      	add	sp, #44	@ 0x2c
 80171fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fe:	9b00      	ldr	r3, [sp, #0]
 8017200:	9a04      	ldr	r2, [sp, #16]
 8017202:	42a2      	cmp	r2, r4
 8017204:	bf08      	it	eq
 8017206:	f04f 33ff 	moveq.w	r3, #4294967295
 801720a:	e7a7      	b.n	801715c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0801720c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017210:	6943      	ldr	r3, [r0, #20]
 8017212:	b0a4      	sub	sp, #144	@ 0x90
 8017214:	4605      	mov	r5, r0
 8017216:	460f      	mov	r7, r1
 8017218:	2b00      	cmp	r3, #0
 801721a:	d077      	beq.n	801730c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 801721c:	695c      	ldr	r4, [r3, #20]
 801721e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8017222:	2b01      	cmp	r3, #1
 8017224:	dc04      	bgt.n	8017230 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8017226:	2401      	movs	r4, #1
 8017228:	4620      	mov	r0, r4
 801722a:	b024      	add	sp, #144	@ 0x90
 801722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017230:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8017234:	ae24      	add	r6, sp, #144	@ 0x90
 8017236:	011b      	lsls	r3, r3, #4
 8017238:	f846 3d74 	str.w	r3, [r6, #-116]!
 801723c:	4630      	mov	r0, r6
 801723e:	f7ff fc79 	bl	8016b34 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017242:	8839      	ldrh	r1, [r7, #0]
 8017244:	88ba      	ldrh	r2, [r7, #4]
 8017246:	b280      	uxth	r0, r0
 8017248:	6823      	ldr	r3, [r4, #0]
 801724a:	440a      	add	r2, r1
 801724c:	1a09      	subs	r1, r1, r0
 801724e:	4402      	add	r2, r0
 8017250:	f10d 000a 	add.w	r0, sp, #10
 8017254:	b209      	sxth	r1, r1
 8017256:	9000      	str	r0, [sp, #0]
 8017258:	b212      	sxth	r2, r2
 801725a:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 801725e:	4620      	mov	r0, r4
 8017260:	ab02      	add	r3, sp, #8
 8017262:	47c0      	blx	r8
 8017264:	2800      	cmp	r0, #0
 8017266:	d0de      	beq.n	8017226 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8017268:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 801726c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8017270:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8017274:	18ca      	adds	r2, r1, r3
 8017276:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 801727a:	f8ad 100e 	strh.w	r1, [sp, #14]
 801727e:	4639      	mov	r1, r7
 8017280:	1a9b      	subs	r3, r3, r2
 8017282:	2200      	movs	r2, #0
 8017284:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017288:	a803      	add	r0, sp, #12
 801728a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801728e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017292:	f7fd fc3b 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8017296:	4629      	mov	r1, r5
 8017298:	a805      	add	r0, sp, #20
 801729a:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 801729c:	f005 f800 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80172a0:	682b      	ldr	r3, [r5, #0]
 80172a2:	4628      	mov	r0, r5
 80172a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80172a6:	4798      	blx	r3
 80172a8:	ab03      	add	r3, sp, #12
 80172aa:	9000      	str	r0, [sp, #0]
 80172ac:	aa05      	add	r2, sp, #20
 80172ae:	4639      	mov	r1, r7
 80172b0:	4630      	mov	r0, r6
 80172b2:	f015 fbcb 	bl	802ca4c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80172b6:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 80172ba:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80172be:	2f00      	cmp	r7, #0
 80172c0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80172c4:	dd03      	ble.n	80172ce <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 80172c6:	42bb      	cmp	r3, r7
 80172c8:	da01      	bge.n	80172ce <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 80172ca:	42ba      	cmp	r2, r7
 80172cc:	da11      	bge.n	80172f2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 80172ce:	9200      	str	r2, [sp, #0]
 80172d0:	4622      	mov	r2, r4
 80172d2:	4631      	mov	r1, r6
 80172d4:	4628      	mov	r0, r5
 80172d6:	f7ff ff0f 	bl	80170f8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80172da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80172de:	4630      	mov	r0, r6
 80172e0:	f015 fc48 	bl	802cb74 <_ZN8touchgfx6Canvas6renderEh>
 80172e4:	4b0b      	ldr	r3, [pc, #44]	@ (8017314 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 80172e6:	4604      	mov	r4, r0
 80172e8:	a80c      	add	r0, sp, #48	@ 0x30
 80172ea:	9307      	str	r3, [sp, #28]
 80172ec:	f001 fb20 	bl	8018930 <_ZN8touchgfx7OutlineD1Ev>
 80172f0:	e79a      	b.n	8017228 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 80172f2:	1e7a      	subs	r2, r7, #1
 80172f4:	4631      	mov	r1, r6
 80172f6:	4628      	mov	r0, r5
 80172f8:	b212      	sxth	r2, r2
 80172fa:	9200      	str	r2, [sp, #0]
 80172fc:	4622      	mov	r2, r4
 80172fe:	f7ff fefb 	bl	80170f8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8017302:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017306:	9300      	str	r3, [sp, #0]
 8017308:	463b      	mov	r3, r7
 801730a:	e7e1      	b.n	80172d0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 801730c:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8017310:	deff      	udf	#255	@ 0xff
 8017312:	bf00      	nop
 8017314:	08032684 	.word	0x08032684

08017318 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8017318:	4770      	bx	lr

0801731a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 801731a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801731c:	b118      	cbz	r0, 8017326 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 801731e:	6803      	ldr	r3, [r0, #0]
 8017320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017324:	4718      	bx	r3
 8017326:	4770      	bx	lr

08017328 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8017328:	680b      	ldr	r3, [r1, #0]
 801732a:	4608      	mov	r0, r1
 801732c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8017330:	4718      	bx	r3

08017332 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8017332:	680b      	ldr	r3, [r1, #0]
 8017334:	4608      	mov	r0, r1
 8017336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801733a:	4718      	bx	r3

0801733c <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 801733c:	680b      	ldr	r3, [r1, #0]
 801733e:	4608      	mov	r0, r1
 8017340:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8017344:	4718      	bx	r3

08017346 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8017346:	680b      	ldr	r3, [r1, #0]
 8017348:	4608      	mov	r0, r1
 801734a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801734e:	4718      	bx	r3

08017350 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8017350:	4a38      	ldr	r2, [pc, #224]	@ (8017434 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8017352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017356:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8017358:	b087      	sub	sp, #28
 801735a:	8812      	ldrh	r2, [r2, #0]
 801735c:	4604      	mov	r4, r0
 801735e:	4689      	mov	r9, r1
 8017360:	429a      	cmp	r2, r3
 8017362:	d937      	bls.n	80173d4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8017364:	4a34      	ldr	r2, [pc, #208]	@ (8017438 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8017366:	6812      	ldr	r2, [r2, #0]
 8017368:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801736c:	4b33      	ldr	r3, [pc, #204]	@ (801743c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8017374:	f1b8 0f00 	cmp.w	r8, #0
 8017378:	d02c      	beq.n	80173d4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801737a:	6803      	ldr	r3, [r0, #0]
 801737c:	6945      	ldr	r5, [r0, #20]
 801737e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017380:	2d00      	cmp	r5, #0
 8017382:	d052      	beq.n	801742a <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8017384:	696f      	ldr	r7, [r5, #20]
 8017386:	4798      	blx	r3
 8017388:	f897 502c 	ldrb.w	r5, [r7, #44]	@ 0x2c
 801738c:	fb15 f000 	smulbb	r0, r5, r0
 8017390:	b280      	uxth	r0, r0
 8017392:	1c45      	adds	r5, r0, #1
 8017394:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017398:	122d      	asrs	r5, r5, #8
 801739a:	d01b      	beq.n	80173d4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801739c:	6823      	ldr	r3, [r4, #0]
 801739e:	4639      	mov	r1, r7
 80173a0:	4620      	mov	r0, r4
 80173a2:	b2ed      	uxtb	r5, r5
 80173a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80173a8:	4798      	blx	r3
 80173aa:	6823      	ldr	r3, [r4, #0]
 80173ac:	4606      	mov	r6, r0
 80173ae:	4639      	mov	r1, r7
 80173b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80173b4:	4620      	mov	r0, r4
 80173b6:	4798      	blx	r3
 80173b8:	4683      	mov	fp, r0
 80173ba:	b970      	cbnz	r0, 80173da <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 80173bc:	b96e      	cbnz	r6, 80173da <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	4642      	mov	r2, r8
 80173c2:	9600      	str	r6, [sp, #0]
 80173c4:	4649      	mov	r1, r9
 80173c6:	4620      	mov	r0, r4
 80173c8:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80173cc:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 80173d0:	463b      	mov	r3, r7
 80173d2:	47a8      	blx	r5
 80173d4:	b007      	add	sp, #28
 80173d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173da:	2e00      	cmp	r6, #0
 80173dc:	ddfa      	ble.n	80173d4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80173de:	6823      	ldr	r3, [r4, #0]
 80173e0:	4639      	mov	r1, r7
 80173e2:	4620      	mov	r0, r4
 80173e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80173e8:	4798      	blx	r3
 80173ea:	6823      	ldr	r3, [r4, #0]
 80173ec:	4682      	mov	sl, r0
 80173ee:	4639      	mov	r1, r7
 80173f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80173f4:	4620      	mov	r0, r4
 80173f6:	4798      	blx	r3
 80173f8:	4582      	cmp	sl, r0
 80173fa:	bfde      	ittt	le
 80173fc:	4603      	movle	r3, r0
 80173fe:	4650      	movle	r0, sl
 8017400:	469a      	movle	sl, r3
 8017402:	ebaa 0300 	sub.w	r3, sl, r0
 8017406:	fb93 f3f6 	sdiv	r3, r3, r6
 801740a:	2b64      	cmp	r3, #100	@ 0x64
 801740c:	dce2      	bgt.n	80173d4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801740e:	6823      	ldr	r3, [r4, #0]
 8017410:	4642      	mov	r2, r8
 8017412:	9000      	str	r0, [sp, #0]
 8017414:	4649      	mov	r1, r9
 8017416:	4620      	mov	r0, r4
 8017418:	e9cd b503 	strd	fp, r5, [sp, #12]
 801741c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8017420:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8017424:	463b      	mov	r3, r7
 8017426:	47a8      	blx	r5
 8017428:	e7d4      	b.n	80173d4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801742a:	4798      	blx	r3
 801742c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017430:	deff      	udf	#255	@ 0xff
 8017432:	bf00      	nop
 8017434:	20012320 	.word	0x20012320
 8017438:	2001231c 	.word	0x2001231c
 801743c:	20012324 	.word	0x20012324

08017440 <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	680a      	ldr	r2, [r1, #0]
 8017444:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8017448:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 801744c:	4608      	mov	r0, r1
 801744e:	4790      	blx	r2
 8017450:	4629      	mov	r1, r5
 8017452:	4602      	mov	r2, r0
 8017454:	4620      	mov	r0, r4
 8017456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801745a:	f7ff bacd 	b.w	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0801745e <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801745e:	b538      	push	{r3, r4, r5, lr}
 8017460:	680a      	ldr	r2, [r1, #0]
 8017462:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8017466:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 801746a:	4608      	mov	r0, r1
 801746c:	4790      	blx	r2
 801746e:	4629      	mov	r1, r5
 8017470:	4602      	mov	r2, r0
 8017472:	4620      	mov	r0, r4
 8017474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017478:	f7ff babe 	b.w	80169f8 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0801747c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 801747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017480:	b08d      	sub	sp, #52	@ 0x34
 8017482:	4606      	mov	r6, r0
 8017484:	9309      	str	r3, [sp, #36]	@ 0x24
 8017486:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 801748a:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	@ 0x60
 801748e:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8017492:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	@ 0x58
 8017496:	930a      	str	r3, [sp, #40]	@ 0x28
 8017498:	f1b9 0f00 	cmp.w	r9, #0
 801749c:	d117      	bne.n	80174ce <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 801749e:	2f00      	cmp	r7, #0
 80174a0:	dc7c      	bgt.n	801759c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 80174a2:	f1b8 0f00 	cmp.w	r8, #0
 80174a6:	da01      	bge.n	80174ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80174a8:	2f00      	cmp	r7, #0
 80174aa:	d17a      	bne.n	80175a2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80174ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80174ae:	4630      	mov	r0, r6
 80174b0:	6832      	ldr	r2, [r6, #0]
 80174b2:	9318      	str	r3, [sp, #96]	@ 0x60
 80174b4:	2300      	movs	r3, #0
 80174b6:	9907      	ldr	r1, [sp, #28]
 80174b8:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 80174bc:	f8d2 408c 	ldr.w	r4, [r2, #140]	@ 0x8c
 80174c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80174c4:	46a4      	mov	ip, r4
 80174c6:	b00d      	add	sp, #52	@ 0x34
 80174c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174cc:	4760      	bx	ip
 80174ce:	fb97 f4f9 	sdiv	r4, r7, r9
 80174d2:	1e63      	subs	r3, r4, #1
 80174d4:	9305      	str	r3, [sp, #20]
 80174d6:	f1ba 0f00 	cmp.w	sl, #0
 80174da:	d122      	bne.n	8017522 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 80174dc:	fb03 f509 	mul.w	r5, r3, r9
 80174e0:	fb98 faf9 	sdiv	sl, r8, r9
 80174e4:	f10a 0a02 	add.w	sl, sl, #2
 80174e8:	9b05      	ldr	r3, [sp, #20]
 80174ea:	459a      	cmp	sl, r3
 80174ec:	d059      	beq.n	80175a2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80174ee:	42af      	cmp	r7, r5
 80174f0:	dc5a      	bgt.n	80175a8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 80174f2:	45a8      	cmp	r8, r5
 80174f4:	da01      	bge.n	80174fa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 80174f6:	42af      	cmp	r7, r5
 80174f8:	db0e      	blt.n	8017518 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80174fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80174fc:	4630      	mov	r0, r6
 80174fe:	9905      	ldr	r1, [sp, #20]
 8017500:	9302      	str	r3, [sp, #8]
 8017502:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8017504:	6832      	ldr	r2, [r6, #0]
 8017506:	434b      	muls	r3, r1
 8017508:	9907      	ldr	r1, [sp, #28]
 801750a:	e9cd 5300 	strd	r5, r3, [sp]
 801750e:	f8d2 b08c 	ldr.w	fp, [r2, #140]	@ 0x8c
 8017512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017516:	47d8      	blx	fp
 8017518:	9b05      	ldr	r3, [sp, #20]
 801751a:	444d      	add	r5, r9
 801751c:	3301      	adds	r3, #1
 801751e:	9305      	str	r3, [sp, #20]
 8017520:	e7e2      	b.n	80174e8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8017522:	fb97 f3fa 	sdiv	r3, r7, sl
 8017526:	3b01      	subs	r3, #1
 8017528:	9306      	str	r3, [sp, #24]
 801752a:	9a06      	ldr	r2, [sp, #24]
 801752c:	fb98 f3fa 	sdiv	r3, r8, sl
 8017530:	fb02 fb0a 	mul.w	fp, r2, sl
 8017534:	9a05      	ldr	r2, [sp, #20]
 8017536:	3302      	adds	r3, #2
 8017538:	fb02 f509 	mul.w	r5, r2, r9
 801753c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801753e:	45ab      	cmp	fp, r5
 8017540:	dd1d      	ble.n	801757e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8017542:	42af      	cmp	r7, r5
 8017544:	dc08      	bgt.n	8017558 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8017546:	45a8      	cmp	r8, r5
 8017548:	da08      	bge.n	801755c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 801754a:	42af      	cmp	r7, r5
 801754c:	da06      	bge.n	801755c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 801754e:	9b05      	ldr	r3, [sp, #20]
 8017550:	444d      	add	r5, r9
 8017552:	3301      	adds	r3, #1
 8017554:	9305      	str	r3, [sp, #20]
 8017556:	e7f2      	b.n	801753e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8017558:	45a8      	cmp	r8, r5
 801755a:	dcf8      	bgt.n	801754e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 801755c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801755e:	4630      	mov	r0, r6
 8017560:	9905      	ldr	r1, [sp, #20]
 8017562:	9302      	str	r3, [sp, #8]
 8017564:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8017566:	6832      	ldr	r2, [r6, #0]
 8017568:	434b      	muls	r3, r1
 801756a:	9907      	ldr	r1, [sp, #28]
 801756c:	e9cd 5300 	strd	r5, r3, [sp]
 8017570:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8017574:	461c      	mov	r4, r3
 8017576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801757a:	47a0      	blx	r4
 801757c:	e7e7      	b.n	801754e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 801757e:	45ab      	cmp	fp, r5
 8017580:	db04      	blt.n	801758c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 8017582:	9b05      	ldr	r3, [sp, #20]
 8017584:	444d      	add	r5, r9
 8017586:	3301      	adds	r3, #1
 8017588:	9305      	str	r3, [sp, #20]
 801758a:	e7f8      	b.n	801757e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 801758c:	9b06      	ldr	r3, [sp, #24]
 801758e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017590:	3301      	adds	r3, #1
 8017592:	4293      	cmp	r3, r2
 8017594:	9306      	str	r3, [sp, #24]
 8017596:	d004      	beq.n	80175a2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8017598:	44d3      	add	fp, sl
 801759a:	e7d0      	b.n	801753e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 801759c:	f1b8 0f00 	cmp.w	r8, #0
 80175a0:	dd84      	ble.n	80174ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80175a2:	b00d      	add	sp, #52	@ 0x34
 80175a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a8:	45a8      	cmp	r8, r5
 80175aa:	dcb5      	bgt.n	8017518 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80175ac:	e7a5      	b.n	80174fa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

080175ae <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 80175ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b2:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	@ 0x120
 80175b6:	b089      	sub	sp, #36	@ 0x24
 80175b8:	468a      	mov	sl, r1
 80175ba:	4693      	mov	fp, r2
 80175bc:	2c00      	cmp	r4, #0
 80175be:	9007      	str	r0, [sp, #28]
 80175c0:	461d      	mov	r5, r3
 80175c2:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80175c6:	e9dd c612 	ldrd	ip, r6, [sp, #72]	@ 0x48
 80175ca:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	@ 0x50
 80175ce:	dd03      	ble.n	80175d8 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 80175d0:	4564      	cmp	r4, ip
 80175d2:	dd01      	ble.n	80175d8 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 80175d4:	42b4      	cmp	r4, r6
 80175d6:	dd0e      	ble.n	80175f6 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 80175d8:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 80175dc:	e9cd 8915 	strd	r8, r9, [sp, #84]	@ 0x54
 80175e0:	e9cd 6713 	strd	r6, r7, [sp, #76]	@ 0x4c
 80175e4:	462b      	mov	r3, r5
 80175e6:	465a      	mov	r2, fp
 80175e8:	4651      	mov	r1, sl
 80175ea:	9807      	ldr	r0, [sp, #28]
 80175ec:	b009      	add	sp, #36	@ 0x24
 80175ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f2:	f7ff bf43 	b.w	801747c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 80175f6:	f104 3eff 	add.w	lr, r4, #4294967295
 80175fa:	9702      	str	r7, [sp, #8]
 80175fc:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8017600:	e9cd ce00 	strd	ip, lr, [sp]
 8017604:	f7ff ff3a 	bl	801747c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 8017608:	9412      	str	r4, [sp, #72]	@ 0x48
 801760a:	e9cd 8915 	strd	r8, r9, [sp, #84]	@ 0x54
 801760e:	e9cd 6713 	strd	r6, r7, [sp, #76]	@ 0x4c
 8017612:	e7e7      	b.n	80175e4 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

08017614 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 8017614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017618:	f1b3 0900 	subs.w	r9, r3, #0
 801761c:	460d      	mov	r5, r1
 801761e:	4690      	mov	r8, r2
 8017620:	9f08      	ldr	r7, [sp, #32]
 8017622:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8017626:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017628:	da18      	bge.n	801765c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 801762a:	2a01      	cmp	r2, #1
 801762c:	dd16      	ble.n	801765c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 801762e:	232d      	movs	r3, #45	@ 0x2d
 8017630:	f1c9 0900 	rsb	r9, r9, #0
 8017634:	2001      	movs	r0, #1
 8017636:	800b      	strh	r3, [r1, #0]
 8017638:	2f00      	cmp	r7, #0
 801763a:	d111      	bne.n	8017660 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 801763c:	2302      	movs	r3, #2
 801763e:	eba8 0100 	sub.w	r1, r8, r0
 8017642:	4a26      	ldr	r2, [pc, #152]	@ (80176dc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8017644:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8017648:	b289      	uxth	r1, r1
 801764a:	fb96 f3f3 	sdiv	r3, r6, r3
 801764e:	444b      	add	r3, r9
 8017650:	fb93 f3f6 	sdiv	r3, r3, r6
 8017654:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017658:	f006 be06 	b.w	801e268 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801765c:	2000      	movs	r0, #0
 801765e:	e7eb      	b.n	8017638 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8017660:	dd39      	ble.n	80176d6 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8017662:	eba8 0100 	sub.w	r1, r8, r0
 8017666:	4a1d      	ldr	r2, [pc, #116]	@ (80176dc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8017668:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801766c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017670:	b289      	uxth	r1, r1
 8017672:	fb99 f4f6 	sdiv	r4, r9, r6
 8017676:	4623      	mov	r3, r4
 8017678:	f006 fdf6 	bl	801e268 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801767c:	4628      	mov	r0, r5
 801767e:	f006 fa87 	bl	801db90 <_ZN8touchgfx7Unicode6strlenEPKt>
 8017682:	4580      	cmp	r8, r0
 8017684:	dd27      	ble.n	80176d6 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8017686:	f04f 0e02 	mov.w	lr, #2
 801768a:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 801768e:	fb06 9314 	mls	r3, r6, r4, r9
 8017692:	3001      	adds	r0, #1
 8017694:	2200      	movs	r2, #0
 8017696:	f04f 090a 	mov.w	r9, #10
 801769a:	f107 3aff 	add.w	sl, r7, #4294967295
 801769e:	fb96 fefe 	sdiv	lr, r6, lr
 80176a2:	4580      	cmp	r8, r0
 80176a4:	4684      	mov	ip, r0
 80176a6:	dd13      	ble.n	80176d0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 80176a8:	fb09 f303 	mul.w	r3, r9, r3
 80176ac:	4592      	cmp	sl, r2
 80176ae:	f102 0201 	add.w	r2, r2, #1
 80176b2:	f100 0c01 	add.w	ip, r0, #1
 80176b6:	bf08      	it	eq
 80176b8:	4473      	addeq	r3, lr
 80176ba:	4297      	cmp	r7, r2
 80176bc:	fb93 f4f6 	sdiv	r4, r3, r6
 80176c0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80176c4:	fb06 3314 	mls	r3, r6, r4, r3
 80176c8:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 80176cc:	4660      	mov	r0, ip
 80176ce:	d1e8      	bne.n	80176a2 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 80176d0:	2300      	movs	r3, #0
 80176d2:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 80176d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176da:	bf00      	nop
 80176dc:	08030f70 	.word	0x08030f70

080176e0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 80176e0:	4a69      	ldr	r2, [pc, #420]	@ (8017888 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 80176e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176e6:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80176e8:	b093      	sub	sp, #76	@ 0x4c
 80176ea:	8812      	ldrh	r2, [r2, #0]
 80176ec:	4604      	mov	r4, r0
 80176ee:	460e      	mov	r6, r1
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d93a      	bls.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80176f4:	4a65      	ldr	r2, [pc, #404]	@ (801788c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 80176f6:	6812      	ldr	r2, [r2, #0]
 80176f8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80176fc:	4b64      	ldr	r3, [pc, #400]	@ (8017890 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8017704:	f1b8 0f00 	cmp.w	r8, #0
 8017708:	d02f      	beq.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801770a:	6803      	ldr	r3, [r0, #0]
 801770c:	6945      	ldr	r5, [r0, #20]
 801770e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017710:	2d00      	cmp	r5, #0
 8017712:	f000 80b5 	beq.w	8017880 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 8017716:	696f      	ldr	r7, [r5, #20]
 8017718:	4798      	blx	r3
 801771a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801771e:	fb13 f000 	smulbb	r0, r3, r0
 8017722:	b280      	uxth	r0, r0
 8017724:	1c43      	adds	r3, r0, #1
 8017726:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801772a:	0a03      	lsrs	r3, r0, #8
 801772c:	d01d      	beq.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801772e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017730:	4620      	mov	r0, r4
 8017732:	6823      	ldr	r3, [r4, #0]
 8017734:	434e      	muls	r6, r1
 8017736:	4639      	mov	r1, r7
 8017738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801773c:	4798      	blx	r3
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	4605      	mov	r5, r0
 8017742:	4639      	mov	r1, r7
 8017744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017748:	4620      	mov	r0, r4
 801774a:	4798      	blx	r3
 801774c:	2d00      	cmp	r5, #0
 801774e:	dd0f      	ble.n	8017770 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 8017750:	fb96 f3f5 	sdiv	r3, r6, r5
 8017754:	436b      	muls	r3, r5
 8017756:	1b9a      	subs	r2, r3, r6
 8017758:	4253      	negs	r3, r2
 801775a:	4153      	adcs	r3, r2
 801775c:	2800      	cmp	r0, #0
 801775e:	dd09      	ble.n	8017774 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 8017760:	fb96 f2f0 	sdiv	r2, r6, r0
 8017764:	4350      	muls	r0, r2
 8017766:	42b0      	cmp	r0, r6
 8017768:	d10d      	bne.n	8017786 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 801776a:	b013      	add	sp, #76	@ 0x4c
 801776c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017770:	2300      	movs	r3, #0
 8017772:	e7f3      	b.n	801775c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 8017774:	d107      	bne.n	8017786 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8017776:	2d00      	cmp	r5, #0
 8017778:	d17f      	bne.n	801787a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 801777a:	2e00      	cmp	r6, #0
 801777c:	d063      	beq.n	8017846 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 801777e:	2b00      	cmp	r3, #0
 8017780:	d0f3      	beq.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8017782:	462a      	mov	r2, r5
 8017784:	e007      	b.n	8017796 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8017786:	2b00      	cmp	r3, #0
 8017788:	d0ef      	beq.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801778a:	2d00      	cmp	r5, #0
 801778c:	d0f9      	beq.n	8017782 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 801778e:	fb96 f2f5 	sdiv	r2, r6, r5
 8017792:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8017794:	436a      	muls	r2, r5
 8017796:	683b      	ldr	r3, [r7, #0]
 8017798:	4631      	mov	r1, r6
 801779a:	4638      	mov	r0, r7
 801779c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80177a0:	4798      	blx	r3
 80177a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177a4:	2214      	movs	r2, #20
 80177a6:	a908      	add	r1, sp, #32
 80177a8:	9302      	str	r3, [sp, #8]
 80177aa:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 80177ae:	9301      	str	r3, [sp, #4]
 80177b0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80177b4:	9300      	str	r3, [sp, #0]
 80177b6:	4603      	mov	r3, r0
 80177b8:	4620      	mov	r0, r4
 80177ba:	f7ff ff2b 	bl	8017614 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80177be:	4b35      	ldr	r3, [pc, #212]	@ (8017894 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 80177c0:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80177c2:	6818      	ldr	r0, [r3, #0]
 80177c4:	f7f9 ff58 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 80177c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80177cc:	4681      	mov	r9, r0
 80177ce:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80177d2:	f8d8 3000 	ldr.w	r3, [r8]
 80177d6:	d138      	bne.n	801784a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 80177d8:	4601      	mov	r1, r0
 80177da:	699b      	ldr	r3, [r3, #24]
 80177dc:	aa08      	add	r2, sp, #32
 80177de:	4640      	mov	r0, r8
 80177e0:	4798      	blx	r3
 80177e2:	b205      	sxth	r5, r0
 80177e4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80177e8:	2002      	movs	r0, #2
 80177ea:	4631      	mov	r1, r6
 80177ec:	f8b7 906c 	ldrh.w	r9, [r7, #108]	@ 0x6c
 80177f0:	2b01      	cmp	r3, #1
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	bf88      	it	hi
 80177f6:	f105 0801 	addhi.w	r8, r5, #1
 80177fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80177fe:	bf8c      	ite	hi
 8017800:	fb98 f8f0 	sdivhi	r8, r8, r0
 8017804:	fb95 f8f0 	sdivls	r8, r5, r0
 8017808:	4638      	mov	r0, r7
 801780a:	bf88      	it	hi
 801780c:	fa0f f888 	sxthhi.w	r8, r8
 8017810:	4798      	blx	r3
 8017812:	ab12      	add	r3, sp, #72	@ 0x48
 8017814:	f843 0d34 	str.w	r0, [r3, #-52]!
 8017818:	4618      	mov	r0, r3
 801781a:	f7fe febb 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801781e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017822:	4448      	add	r0, r9
 8017824:	2200      	movs	r2, #0
 8017826:	f8ad 301e 	strh.w	r3, [sp, #30]
 801782a:	a906      	add	r1, sp, #24
 801782c:	eba0 0808 	sub.w	r8, r0, r8
 8017830:	6823      	ldr	r3, [r4, #0]
 8017832:	f8ad 201a 	strh.w	r2, [sp, #26]
 8017836:	4620      	mov	r0, r4
 8017838:	f8ad 8018 	strh.w	r8, [sp, #24]
 801783c:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017840:	691b      	ldr	r3, [r3, #16]
 8017842:	4798      	blx	r3
 8017844:	e791      	b.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8017846:	4632      	mov	r2, r6
 8017848:	e7a5      	b.n	8017796 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 801784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801784c:	4640      	mov	r0, r8
 801784e:	4798      	blx	r3
 8017850:	f8d8 3000 	ldr.w	r3, [r8]
 8017854:	4605      	mov	r5, r0
 8017856:	aa08      	add	r2, sp, #32
 8017858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801785a:	4649      	mov	r1, r9
 801785c:	4640      	mov	r0, r8
 801785e:	4798      	blx	r3
 8017860:	fb15 f500 	smulbb	r5, r5, r0
 8017864:	f8d8 3000 	ldr.w	r3, [r8]
 8017868:	aa08      	add	r2, sp, #32
 801786a:	b2ad      	uxth	r5, r5
 801786c:	4649      	mov	r1, r9
 801786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017870:	4640      	mov	r0, r8
 8017872:	4798      	blx	r3
 8017874:	4405      	add	r5, r0
 8017876:	b22d      	sxth	r5, r5
 8017878:	e7b4      	b.n	80177e4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 801787a:	2b00      	cmp	r3, #0
 801787c:	d187      	bne.n	801778e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 801787e:	e774      	b.n	801776a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8017880:	4798      	blx	r3
 8017882:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017886:	deff      	udf	#255	@ 0xff
 8017888:	20012320 	.word	0x20012320
 801788c:	2001231c 	.word	0x2001231c
 8017890:	20012324 	.word	0x20012324
 8017894:	20012328 	.word	0x20012328

08017898 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8017898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801789c:	b09b      	sub	sp, #108	@ 0x6c
 801789e:	461e      	mov	r6, r3
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4604      	mov	r4, r0
 80178a4:	af1a      	add	r7, sp, #104	@ 0x68
 80178a6:	9104      	str	r1, [sp, #16]
 80178a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80178ac:	4630      	mov	r0, r6
 80178ae:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80178b0:	4690      	mov	r8, r2
 80178b2:	4798      	blx	r3
 80178b4:	f847 0d28 	str.w	r0, [r7, #-40]!
 80178b8:	4638      	mov	r0, r7
 80178ba:	f7fe fe6b 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80178be:	f8b6 3116 	ldrh.w	r3, [r6, #278]	@ 0x116
 80178c2:	1ac0      	subs	r0, r0, r3
 80178c4:	b200      	sxth	r0, r0
 80178c6:	2800      	cmp	r0, #0
 80178c8:	f2c0 80b8 	blt.w	8017a3c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 80178cc:	f8b6 2118 	ldrh.w	r2, [r6, #280]	@ 0x118
 80178d0:	441a      	add	r2, r3
 80178d2:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
 80178d6:	1a9b      	subs	r3, r3, r2
 80178d8:	b21b      	sxth	r3, r3
 80178da:	4298      	cmp	r0, r3
 80178dc:	f280 80ae 	bge.w	8017a3c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 80178e0:	6833      	ldr	r3, [r6, #0]
 80178e2:	4630      	mov	r0, r6
 80178e4:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	@ 0x90
 80178e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80178ec:	4798      	blx	r3
 80178ee:	6833      	ldr	r3, [r6, #0]
 80178f0:	f8b4 9042 	ldrh.w	r9, [r4, #66]	@ 0x42
 80178f4:	4605      	mov	r5, r0
 80178f6:	f8b4 b044 	ldrh.w	fp, [r4, #68]	@ 0x44
 80178fa:	4630      	mov	r0, r6
 80178fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017900:	4798      	blx	r3
 8017902:	f8cd 9000 	str.w	r9, [sp]
 8017906:	462b      	mov	r3, r5
 8017908:	2214      	movs	r2, #20
 801790a:	4639      	mov	r1, r7
 801790c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8017910:	4620      	mov	r0, r4
 8017912:	f7ff fe7f 	bl	8017614 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8017916:	4b57      	ldr	r3, [pc, #348]	@ (8017a74 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 8017918:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 801791a:	6818      	ldr	r0, [r3, #0]
 801791c:	f7f9 feac 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 8017920:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017924:	4681      	mov	r9, r0
 8017926:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801792a:	f8d8 3000 	ldr.w	r3, [r8]
 801792e:	f040 8088 	bne.w	8017a42 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 8017932:	4601      	mov	r1, r0
 8017934:	699b      	ldr	r3, [r3, #24]
 8017936:	463a      	mov	r2, r7
 8017938:	4640      	mov	r0, r8
 801793a:	4798      	blx	r3
 801793c:	b205      	sxth	r5, r0
 801793e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017942:	2002      	movs	r0, #2
 8017944:	6832      	ldr	r2, [r6, #0]
 8017946:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 801794a:	2b01      	cmp	r3, #1
 801794c:	f8b6 306c 	ldrh.w	r3, [r6, #108]	@ 0x6c
 8017950:	f8d2 2114 	ldr.w	r2, [r2, #276]	@ 0x114
 8017954:	bf88      	it	hi
 8017956:	f105 0b01 	addhi.w	fp, r5, #1
 801795a:	9305      	str	r3, [sp, #20]
 801795c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801795e:	bf8c      	ite	hi
 8017960:	fb9b fbf0 	sdivhi	fp, fp, r0
 8017964:	fb95 fbf0 	sdivls	fp, r5, r0
 8017968:	4630      	mov	r0, r6
 801796a:	bf88      	it	hi
 801796c:	fa0f fb8b 	sxthhi.w	fp, fp
 8017970:	4790      	blx	r2
 8017972:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8017976:	4650      	mov	r0, sl
 8017978:	2600      	movs	r6, #0
 801797a:	f7fe fe0b 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801797e:	9b05      	ldr	r3, [sp, #20]
 8017980:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017984:	4418      	add	r0, r3
 8017986:	f8ad 5020 	strh.w	r5, [sp, #32]
 801798a:	ad07      	add	r5, sp, #28
 801798c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017990:	eba0 0b0b 	sub.w	fp, r0, fp
 8017994:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8017998:	f8ad b01c 	strh.w	fp, [sp, #28]
 801799c:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 80179a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80179a4:	e88b 0003 	stmia.w	fp, {r0, r1}
 80179a8:	9904      	ldr	r1, [sp, #16]
 80179aa:	4658      	mov	r0, fp
 80179ac:	f7fd f8ae 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 80179b0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80179b4:	42b3      	cmp	r3, r6
 80179b6:	dd41      	ble.n	8017a3c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 80179b8:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80179bc:	42b3      	cmp	r3, r6
 80179be:	dd3d      	ble.n	8017a3c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 80179c0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 80179c4:	4620      	mov	r0, r4
 80179c6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80179ca:	1a5b      	subs	r3, r3, r1
 80179cc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80179d0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80179d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80179d8:	1a5b      	subs	r3, r3, r1
 80179da:	4629      	mov	r1, r5
 80179dc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80179e0:	6823      	ldr	r3, [r4, #0]
 80179e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179e4:	4798      	blx	r3
 80179e6:	4b24      	ldr	r3, [pc, #144]	@ (8017a78 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 80179e8:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80179f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80179f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80179f6:	785b      	ldrb	r3, [r3, #1]
 80179f8:	910d      	str	r1, [sp, #52]	@ 0x34
 80179fa:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 80179fe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017a02:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8017a06:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8017a0a:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8017a0e:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 8017a12:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017a16:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8017a1a:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
 8017a1e:	f88d 603b 	strb.w	r6, [sp, #59]	@ 0x3b
 8017a22:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8017a26:	f7f3 f893 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8017a2a:	465b      	mov	r3, fp
 8017a2c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8017a30:	e9cd a900 	strd	sl, r9, [sp]
 8017a34:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017a38:	f7f9 fdaf 	bl	801159a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017a3c:	b01b      	add	sp, #108	@ 0x6c
 8017a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a44:	4640      	mov	r0, r8
 8017a46:	4798      	blx	r3
 8017a48:	f8d8 3000 	ldr.w	r3, [r8]
 8017a4c:	4605      	mov	r5, r0
 8017a4e:	463a      	mov	r2, r7
 8017a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a52:	4649      	mov	r1, r9
 8017a54:	4640      	mov	r0, r8
 8017a56:	4798      	blx	r3
 8017a58:	fb15 f500 	smulbb	r5, r5, r0
 8017a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8017a60:	463a      	mov	r2, r7
 8017a62:	b2ad      	uxth	r5, r5
 8017a64:	4649      	mov	r1, r9
 8017a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a68:	4640      	mov	r0, r8
 8017a6a:	4798      	blx	r3
 8017a6c:	4405      	add	r5, r0
 8017a6e:	b22d      	sxth	r5, r5
 8017a70:	e765      	b.n	801793e <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 8017a72:	bf00      	nop
 8017a74:	20012328 	.word	0x20012328
 8017a78:	2001231c 	.word	0x2001231c

08017a7c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8017a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a80:	b09b      	sub	sp, #108	@ 0x6c
 8017a82:	4698      	mov	r8, r3
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	4604      	mov	r4, r0
 8017a88:	ae1a      	add	r6, sp, #104	@ 0x68
 8017a8a:	9104      	str	r1, [sp, #16]
 8017a8c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017a90:	4640      	mov	r0, r8
 8017a92:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8017a94:	4617      	mov	r7, r2
 8017a96:	4798      	blx	r3
 8017a98:	f846 0d28 	str.w	r0, [r6, #-40]!
 8017a9c:	4630      	mov	r0, r6
 8017a9e:	f7fe fd79 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017aa2:	f8b8 3114 	ldrh.w	r3, [r8, #276]	@ 0x114
 8017aa6:	1ac0      	subs	r0, r0, r3
 8017aa8:	b200      	sxth	r0, r0
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	f2c0 80ba 	blt.w	8017c24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017ab0:	f8b8 211a 	ldrh.w	r2, [r8, #282]	@ 0x11a
 8017ab4:	441a      	add	r2, r3
 8017ab6:	f8b8 3042 	ldrh.w	r3, [r8, #66]	@ 0x42
 8017aba:	1a9b      	subs	r3, r3, r2
 8017abc:	b21b      	sxth	r3, r3
 8017abe:	4298      	cmp	r0, r3
 8017ac0:	f280 80b0 	bge.w	8017c24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017ac4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ac6:	2214      	movs	r2, #20
 8017ac8:	4631      	mov	r1, r6
 8017aca:	4620      	mov	r0, r4
 8017acc:	9302      	str	r3, [sp, #8]
 8017ace:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8017ad2:	9301      	str	r3, [sp, #4]
 8017ad4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8017ad8:	9300      	str	r3, [sp, #0]
 8017ada:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8017adc:	f7ff fd9a 	bl	8017614 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8017ae0:	4b55      	ldr	r3, [pc, #340]	@ (8017c38 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 8017ae2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017ae4:	6818      	ldr	r0, [r3, #0]
 8017ae6:	f7f9 fdc7 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 8017aea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017aee:	4681      	mov	r9, r0
 8017af0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	f040 8098 	bne.w	8017c2a <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8017afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017afc:	4638      	mov	r0, r7
 8017afe:	4798      	blx	r3
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	4605      	mov	r5, r0
 8017b04:	4632      	mov	r2, r6
 8017b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b08:	4649      	mov	r1, r9
 8017b0a:	4638      	mov	r0, r7
 8017b0c:	4798      	blx	r3
 8017b0e:	fb15 f500 	smulbb	r5, r5, r0
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	4632      	mov	r2, r6
 8017b16:	b2ad      	uxth	r5, r5
 8017b18:	4649      	mov	r1, r9
 8017b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b1c:	4638      	mov	r0, r7
 8017b1e:	4798      	blx	r3
 8017b20:	4405      	add	r5, r0
 8017b22:	b22d      	sxth	r5, r5
 8017b24:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017b28:	2002      	movs	r0, #2
 8017b2a:	f8d8 2000 	ldr.w	r2, [r8]
 8017b2e:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 8017b32:	2b01      	cmp	r3, #1
 8017b34:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	@ 0xc6
 8017b38:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8017b3c:	bf88      	it	hi
 8017b3e:	f105 0b01 	addhi.w	fp, r5, #1
 8017b42:	9305      	str	r3, [sp, #20]
 8017b44:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8017b46:	bf8c      	ite	hi
 8017b48:	fb9b fbf0 	sdivhi	fp, fp, r0
 8017b4c:	fb95 fbf0 	sdivls	fp, r5, r0
 8017b50:	4640      	mov	r0, r8
 8017b52:	bf88      	it	hi
 8017b54:	fa0f fb8b 	sxthhi.w	fp, fp
 8017b58:	4790      	blx	r2
 8017b5a:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8017b5e:	4650      	mov	r0, sl
 8017b60:	f04f 0800 	mov.w	r8, #0
 8017b64:	f7fe fd16 	bl	8016594 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017b68:	9b05      	ldr	r3, [sp, #20]
 8017b6a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017b6e:	4418      	add	r0, r3
 8017b70:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
 8017b74:	ad07      	add	r5, sp, #28
 8017b76:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017b7a:	eba0 0b0b 	sub.w	fp, r0, fp
 8017b7e:	f8ad 1020 	strh.w	r1, [sp, #32]
 8017b82:	f8ad b01e 	strh.w	fp, [sp, #30]
 8017b86:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8017b8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017b8e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8017b92:	9904      	ldr	r1, [sp, #16]
 8017b94:	4658      	mov	r0, fp
 8017b96:	f7fc ffb9 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8017b9a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8017b9e:	4543      	cmp	r3, r8
 8017ba0:	dd40      	ble.n	8017c24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017ba2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8017ba6:	4543      	cmp	r3, r8
 8017ba8:	dd3c      	ble.n	8017c24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017baa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8017bae:	4620      	mov	r0, r4
 8017bb0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017bb4:	1a5b      	subs	r3, r3, r1
 8017bb6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8017bba:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8017bbe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8017bc2:	1a5b      	subs	r3, r3, r1
 8017bc4:	4629      	mov	r1, r5
 8017bc6:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8017bca:	6823      	ldr	r3, [r4, #0]
 8017bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bce:	4798      	blx	r3
 8017bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8017c3c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 8017bd2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8017bda:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017bde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017be0:	785b      	ldrb	r3, [r3, #1]
 8017be2:	910d      	str	r1, [sp, #52]	@ 0x34
 8017be4:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8017be8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017bec:	970b      	str	r7, [sp, #44]	@ 0x2c
 8017bee:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8017bf2:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8017bf6:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 8017bfa:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017bfe:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8017c02:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 8017c06:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 8017c0a:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 8017c0e:	f7f2 ff9f 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8017c12:	465b      	mov	r3, fp
 8017c14:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8017c18:	e9cd a900 	strd	sl, r9, [sp]
 8017c1c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017c20:	f7f9 fcbb 	bl	801159a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017c24:	b01b      	add	sp, #108	@ 0x6c
 8017c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c2a:	4601      	mov	r1, r0
 8017c2c:	699b      	ldr	r3, [r3, #24]
 8017c2e:	4632      	mov	r2, r6
 8017c30:	4638      	mov	r0, r7
 8017c32:	4798      	blx	r3
 8017c34:	b205      	sxth	r5, r0
 8017c36:	e775      	b.n	8017b24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8017c38:	20012328 	.word	0x20012328
 8017c3c:	2001231c 	.word	0x2001231c

08017c40 <_ZN8touchgfx15GraphScrollData5clearEv>:
 8017c40:	b510      	push	{r4, lr}
 8017c42:	4604      	mov	r4, r0
 8017c44:	f7fe fb43 	bl	80162ce <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8017c48:	2300      	movs	r3, #0
 8017c4a:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8017c4e:	bd10      	pop	{r4, pc}

08017c50 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 8017c50:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8017c54:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	@ 0x11c
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d101      	bne.n	8017c60 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 8017c5c:	f7fe bd85 	b.w	801676a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017c60:	4770      	bx	lr

08017c62 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 8017c62:	b538      	push	{r3, r4, r5, lr}
 8017c64:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	@ 0x11c
 8017c68:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8017c6c:	42a5      	cmp	r5, r4
 8017c6e:	da04      	bge.n	8017c7a <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8017c70:	6803      	ldr	r3, [r0, #0]
 8017c72:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017c76:	4798      	blx	r3
 8017c78:	bd38      	pop	{r3, r4, r5, pc}
 8017c7a:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8017c7e:	4408      	add	r0, r1
 8017c80:	1b00      	subs	r0, r0, r4
 8017c82:	e7f9      	b.n	8017c78 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

08017c84 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 8017c84:	b570      	push	{r4, r5, r6, lr}
 8017c86:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8017c90:	1c6b      	adds	r3, r5, #1
 8017c92:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	@ 0x11e
 8017c96:	b21b      	sxth	r3, r3
 8017c98:	42ae      	cmp	r6, r5
 8017c9a:	fb93 f0f2 	sdiv	r0, r3, r2
 8017c9e:	bf08      	it	eq
 8017ca0:	f8a4 311e 	strheq.w	r3, [r4, #286]	@ 0x11e
 8017ca4:	4296      	cmp	r6, r2
 8017ca6:	fb02 3010 	mls	r0, r2, r0, r3
 8017caa:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 8017cae:	f8a4 014c 	strh.w	r0, [r4, #332]	@ 0x14c
 8017cb2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017cb6:	d108      	bne.n	8017cca <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8017cb8:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8017cbc:	f004 fa55 	bl	801c16a <_ZNK8touchgfx8Drawable10invalidateEv>
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f7fe fd52 	bl	801676a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	bd70      	pop	{r4, r5, r6, pc}
 8017cca:	4629      	mov	r1, r5
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f7fe fd24 	bl	801671a <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8017cd2:	e7f8      	b.n	8017cc6 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08017cd4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017cd4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8017cd8:	4770      	bx	lr

08017cda <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8017cda:	b510      	push	{r4, lr}
 8017cdc:	4604      	mov	r4, r0
 8017cde:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017ce0:	b150      	cbz	r0, 8017cf8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017ce2:	6803      	ldr	r3, [r0, #0]
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	4798      	blx	r3
 8017ce8:	b130      	cbz	r0, 8017cf8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017cea:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017cec:	4621      	mov	r1, r4
 8017cee:	6803      	ldr	r3, [r0, #0]
 8017cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cf4:	689b      	ldr	r3, [r3, #8]
 8017cf6:	4718      	bx	r3
 8017cf8:	bd10      	pop	{r4, pc}

08017cfa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017cfa:	790b      	ldrb	r3, [r1, #4]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	bf0c      	ite	eq
 8017d00:	2301      	moveq	r3, #1
 8017d02:	2300      	movne	r3, #0
 8017d04:	b570      	push	{r4, r5, r6, lr}
 8017d06:	4604      	mov	r4, r0
 8017d08:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017d0c:	460e      	mov	r6, r1
 8017d0e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8017d12:	d109      	bne.n	8017d28 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8017d14:	b14d      	cbz	r5, 8017d2a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8017d16:	7933      	ldrb	r3, [r6, #4]
 8017d18:	2b01      	cmp	r3, #1
 8017d1a:	d10c      	bne.n	8017d36 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017d1c:	6823      	ldr	r3, [r4, #0]
 8017d1e:	4620      	mov	r0, r4
 8017d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d26:	4718      	bx	r3
 8017d28:	b12d      	cbz	r5, 8017d36 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017d2a:	6823      	ldr	r3, [r4, #0]
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	695b      	ldr	r3, [r3, #20]
 8017d30:	4798      	blx	r3
 8017d32:	2d00      	cmp	r5, #0
 8017d34:	d1ef      	bne.n	8017d16 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8017d36:	bd70      	pop	{r4, r5, r6, pc}

08017d38 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8017d38:	b508      	push	{r3, lr}
 8017d3a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8017d3e:	b10b      	cbz	r3, 8017d44 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8017d40:	f7f2 fca8 	bl	800a694 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8017d44:	bd08      	pop	{r3, pc}

08017d46 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8017d46:	6803      	ldr	r3, [r0, #0]
 8017d48:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8017d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017d4e:	4718      	bx	r3

08017d50 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8017d50:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017d54:	2bff      	cmp	r3, #255	@ 0xff
 8017d56:	b510      	push	{r4, lr}
 8017d58:	d104      	bne.n	8017d64 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8017d5a:	8cca      	ldrh	r2, [r1, #38]	@ 0x26
 8017d5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d60:	429a      	cmp	r2, r3
 8017d62:	d105      	bne.n	8017d70 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8017d64:	2300      	movs	r3, #0
 8017d66:	8003      	strh	r3, [r0, #0]
 8017d68:	8043      	strh	r3, [r0, #2]
 8017d6a:	8083      	strh	r3, [r0, #4]
 8017d6c:	80c3      	strh	r3, [r0, #6]
 8017d6e:	bd10      	pop	{r4, pc}
 8017d70:	2300      	movs	r3, #0
 8017d72:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017d76:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017d7a:	8003      	strh	r3, [r0, #0]
 8017d7c:	8043      	strh	r3, [r0, #2]
 8017d7e:	8084      	strh	r4, [r0, #4]
 8017d80:	80c2      	strh	r2, [r0, #6]
 8017d82:	e7f4      	b.n	8017d6e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08017d84 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8017d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d88:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8017d8c:	b087      	sub	sp, #28
 8017d8e:	4604      	mov	r4, r0
 8017d90:	4689      	mov	r9, r1
 8017d92:	b363      	cbz	r3, 8017dee <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017d94:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8017d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d027      	beq.n	8017dee <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017d9e:	ad06      	add	r5, sp, #24
 8017da0:	2700      	movs	r7, #0
 8017da2:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8017da6:	4628      	mov	r0, r5
 8017da8:	f006 fbd4 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017dac:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017db0:	a904      	add	r1, sp, #16
 8017db2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017db6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017dba:	4620      	mov	r0, r4
 8017dbc:	6823      	ldr	r3, [r4, #0]
 8017dbe:	9704      	str	r7, [sp, #16]
 8017dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dc2:	4798      	blx	r3
 8017dc4:	f7f2 fec4 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8017dc8:	6803      	ldr	r3, [r0, #0]
 8017dca:	4606      	mov	r6, r0
 8017dcc:	4628      	mov	r0, r5
 8017dce:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8017dd2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8017dd4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017dd8:	f006 fcae 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017ddc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017de0:	4601      	mov	r1, r0
 8017de2:	9701      	str	r7, [sp, #4]
 8017de4:	aa04      	add	r2, sp, #16
 8017de6:	9300      	str	r3, [sp, #0]
 8017de8:	4630      	mov	r0, r6
 8017dea:	464b      	mov	r3, r9
 8017dec:	47c0      	blx	r8
 8017dee:	b007      	add	sp, #28
 8017df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017df4 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8017df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017df6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017dfa:	460d      	mov	r5, r1
 8017dfc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017e00:	2100      	movs	r1, #0
 8017e02:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017e06:	4604      	mov	r4, r0
 8017e08:	6803      	ldr	r3, [r0, #0]
 8017e0a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e10:	9100      	str	r1, [sp, #0]
 8017e12:	4669      	mov	r1, sp
 8017e14:	4798      	blx	r3
 8017e16:	4621      	mov	r1, r4
 8017e18:	a802      	add	r0, sp, #8
 8017e1a:	f004 fa41 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e1e:	f7f2 fe97 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 8017e22:	6803      	ldr	r3, [r0, #0]
 8017e24:	aa02      	add	r2, sp, #8
 8017e26:	4669      	mov	r1, sp
 8017e28:	695e      	ldr	r6, [r3, #20]
 8017e2a:	462b      	mov	r3, r5
 8017e2c:	47b0      	blx	r6
 8017e2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017e32:	2800      	cmp	r0, #0
 8017e34:	bf08      	it	eq
 8017e36:	461d      	moveq	r5, r3
 8017e38:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8017e3a:	b004      	add	sp, #16
 8017e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017e40 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8017e40:	2200      	movs	r2, #0
 8017e42:	8082      	strh	r2, [r0, #4]
 8017e44:	80c2      	strh	r2, [r0, #6]
 8017e46:	8102      	strh	r2, [r0, #8]
 8017e48:	8142      	strh	r2, [r0, #10]
 8017e4a:	8182      	strh	r2, [r0, #12]
 8017e4c:	81c2      	strh	r2, [r0, #14]
 8017e4e:	8202      	strh	r2, [r0, #16]
 8017e50:	8242      	strh	r2, [r0, #18]
 8017e52:	61c2      	str	r2, [r0, #28]
 8017e54:	8402      	strh	r2, [r0, #32]
 8017e56:	8442      	strh	r2, [r0, #34]	@ 0x22
 8017e58:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8017e5c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017e60:	2201      	movs	r2, #1
 8017e62:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8017e66:	4a04      	ldr	r2, [pc, #16]	@ (8017e78 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8017e68:	6002      	str	r2, [r0, #0]
 8017e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e6e:	84c2      	strh	r2, [r0, #38]	@ 0x26
 8017e70:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 8017e74:	4770      	bx	lr
 8017e76:	bf00      	nop
 8017e78:	08031eb8 	.word	0x08031eb8

08017e7c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	4770      	bx	lr

08017e80 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017e80:	4b07      	ldr	r3, [pc, #28]	@ (8017ea0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017e82:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017e84:	881b      	ldrh	r3, [r3, #0]
 8017e86:	4293      	cmp	r3, r2
 8017e88:	bf81      	itttt	hi
 8017e8a:	4b06      	ldrhi	r3, [pc, #24]	@ (8017ea4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017e8c:	681b      	ldrhi	r3, [r3, #0]
 8017e8e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017e92:	7858      	ldrbhi	r0, [r3, #1]
 8017e94:	bf8c      	ite	hi
 8017e96:	f000 0003 	andhi.w	r0, r0, #3
 8017e9a:	2000      	movls	r0, #0
 8017e9c:	4770      	bx	lr
 8017e9e:	bf00      	nop
 8017ea0:	20012320 	.word	0x20012320
 8017ea4:	2001231c 	.word	0x2001231c

08017ea8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017ea8:	4b11      	ldr	r3, [pc, #68]	@ (8017ef0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eae:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017eb0:	4604      	mov	r4, r0
 8017eb2:	881b      	ldrh	r3, [r3, #0]
 8017eb4:	428b      	cmp	r3, r1
 8017eb6:	d918      	bls.n	8017eea <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017eb8:	6803      	ldr	r3, [r0, #0]
 8017eba:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8017ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8017ef4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017ebe:	6818      	ldr	r0, [r3, #0]
 8017ec0:	f7f9 fbda 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 8017ec4:	6823      	ldr	r3, [r4, #0]
 8017ec6:	4606      	mov	r6, r0
 8017ec8:	4620      	mov	r0, r4
 8017eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017ecc:	4798      	blx	r3
 8017ece:	6823      	ldr	r3, [r4, #0]
 8017ed0:	4607      	mov	r7, r0
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ed8:	4798      	blx	r3
 8017eda:	463a      	mov	r2, r7
 8017edc:	4603      	mov	r3, r0
 8017ede:	4631      	mov	r1, r6
 8017ee0:	4620      	mov	r0, r4
 8017ee2:	46ac      	mov	ip, r5
 8017ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ee8:	4760      	bx	ip
 8017eea:	2000      	movs	r0, #0
 8017eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ef0:	20012320 	.word	0x20012320
 8017ef4:	20012328 	.word	0x20012328

08017ef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017ef8:	4b18      	ldr	r3, [pc, #96]	@ (8017f5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017efa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017efe:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017f00:	4604      	mov	r4, r0
 8017f02:	881b      	ldrh	r3, [r3, #0]
 8017f04:	428b      	cmp	r3, r1
 8017f06:	d926      	bls.n	8017f56 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017f08:	4b15      	ldr	r3, [pc, #84]	@ (8017f60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017f10:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017f14:	4b13      	ldr	r3, [pc, #76]	@ (8017f64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017f16:	7855      	ldrb	r5, [r2, #1]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017f1e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017f22:	6833      	ldr	r3, [r6, #0]
 8017f24:	69df      	ldr	r7, [r3, #28]
 8017f26:	4b10      	ldr	r3, [pc, #64]	@ (8017f68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017f28:	6818      	ldr	r0, [r3, #0]
 8017f2a:	f7f9 fba5 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 8017f2e:	6823      	ldr	r3, [r4, #0]
 8017f30:	4680      	mov	r8, r0
 8017f32:	4620      	mov	r0, r4
 8017f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017f36:	4798      	blx	r3
 8017f38:	6823      	ldr	r3, [r4, #0]
 8017f3a:	4681      	mov	r9, r0
 8017f3c:	4620      	mov	r0, r4
 8017f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f42:	4798      	blx	r3
 8017f44:	464b      	mov	r3, r9
 8017f46:	9000      	str	r0, [sp, #0]
 8017f48:	4642      	mov	r2, r8
 8017f4a:	4629      	mov	r1, r5
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	47b8      	blx	r7
 8017f50:	b003      	add	sp, #12
 8017f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f56:	2000      	movs	r0, #0
 8017f58:	e7fa      	b.n	8017f50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017f5a:	bf00      	nop
 8017f5c:	20012320 	.word	0x20012320
 8017f60:	2001231c 	.word	0x2001231c
 8017f64:	20012324 	.word	0x20012324
 8017f68:	20012328 	.word	0x20012328

08017f6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017f6c:	b40e      	push	{r1, r2, r3}
 8017f6e:	4b30      	ldr	r3, [pc, #192]	@ (8018030 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f74:	881a      	ldrh	r2, [r3, #0]
 8017f76:	b09d      	sub	sp, #116	@ 0x74
 8017f78:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8017f7a:	4604      	mov	r4, r0
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d954      	bls.n	801802a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017f80:	aa26      	add	r2, sp, #152	@ 0x98
 8017f82:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8018034 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017f86:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8018038 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017f8a:	9202      	str	r2, [sp, #8]
 8017f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8017f90:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017f94:	f8d8 3000 	ldr.w	r3, [r8]
 8017f98:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017f9c:	682b      	ldr	r3, [r5, #0]
 8017f9e:	4628      	mov	r0, r5
 8017fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017fa2:	4798      	blx	r3
 8017fa4:	4606      	mov	r6, r0
 8017fa6:	b207      	sxth	r7, r0
 8017fa8:	a803      	add	r0, sp, #12
 8017faa:	f004 fe5d 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 8017fae:	682b      	ldr	r3, [r5, #0]
 8017fb0:	4628      	mov	r0, r5
 8017fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017fb4:	4798      	blx	r3
 8017fb6:	682b      	ldr	r3, [r5, #0]
 8017fb8:	4682      	mov	sl, r0
 8017fba:	4628      	mov	r0, r5
 8017fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017fbe:	4798      	blx	r3
 8017fc0:	4653      	mov	r3, sl
 8017fc2:	9000      	str	r0, [sp, #0]
 8017fc4:	a803      	add	r0, sp, #12
 8017fc6:	9a02      	ldr	r2, [sp, #8]
 8017fc8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8017fca:	f004 fea8 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017fce:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017fd0:	f8d9 3000 	ldr.w	r3, [r9]
 8017fd4:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8017fd8:	8925      	ldrh	r5, [r4, #8]
 8017fda:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017fde:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017fe2:	eba5 050c 	sub.w	r5, r5, ip
 8017fe6:	784a      	ldrb	r2, [r1, #1]
 8017fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8017fec:	b22d      	sxth	r5, r5
 8017fee:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8017ff2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017ff6:	9500      	str	r5, [sp, #0]
 8017ff8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017ffc:	a803      	add	r0, sp, #12
 8017ffe:	f002 fb87 	bl	801a710 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018002:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8018006:	b203      	sxth	r3, r0
 8018008:	18b9      	adds	r1, r7, r2
 801800a:	2900      	cmp	r1, #0
 801800c:	dd0b      	ble.n	8018026 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801800e:	3b01      	subs	r3, #1
 8018010:	fb13 f302 	smulbb	r3, r3, r2
 8018014:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018018:	b21f      	sxth	r7, r3
 801801a:	4638      	mov	r0, r7
 801801c:	b01d      	add	sp, #116	@ 0x74
 801801e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018022:	b003      	add	sp, #12
 8018024:	4770      	bx	lr
 8018026:	2b00      	cmp	r3, #0
 8018028:	dcf7      	bgt.n	801801a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801802a:	2700      	movs	r7, #0
 801802c:	e7f5      	b.n	801801a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801802e:	bf00      	nop
 8018030:	20012320 	.word	0x20012320
 8018034:	2001231c 	.word	0x2001231c
 8018038:	20012324 	.word	0x20012324

0801803c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801803c:	4bbd      	ldr	r3, [pc, #756]	@ (8018334 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801803e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018042:	460c      	mov	r4, r1
 8018044:	881b      	ldrh	r3, [r3, #0]
 8018046:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8018048:	b0a9      	sub	sp, #164	@ 0xa4
 801804a:	4680      	mov	r8, r0
 801804c:	428b      	cmp	r3, r1
 801804e:	d809      	bhi.n	8018064 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8018050:	2300      	movs	r3, #0
 8018052:	f04f 32ff 	mov.w	r2, #4294967295
 8018056:	6083      	str	r3, [r0, #8]
 8018058:	e9c0 3200 	strd	r3, r2, [r0]
 801805c:	4640      	mov	r0, r8
 801805e:	b029      	add	sp, #164	@ 0xa4
 8018060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018064:	4eb4      	ldr	r6, [pc, #720]	@ (8018338 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8018066:	6833      	ldr	r3, [r6, #0]
 8018068:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801806c:	4bb3      	ldr	r3, [pc, #716]	@ (801833c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018074:	4bb2      	ldr	r3, [pc, #712]	@ (8018340 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8018076:	6818      	ldr	r0, [r3, #0]
 8018078:	f7f9 fafe 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 801807c:	682b      	ldr	r3, [r5, #0]
 801807e:	4681      	mov	r9, r0
 8018080:	4628      	mov	r0, r5
 8018082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018084:	4798      	blx	r3
 8018086:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8018088:	b203      	sxth	r3, r0
 801808a:	4682      	mov	sl, r0
 801808c:	4407      	add	r7, r0
 801808e:	a80f      	add	r0, sp, #60	@ 0x3c
 8018090:	9304      	str	r3, [sp, #16]
 8018092:	b2bb      	uxth	r3, r7
 8018094:	9303      	str	r3, [sp, #12]
 8018096:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801809a:	2b00      	cmp	r3, #0
 801809c:	f040 80a5 	bne.w	80181ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80180a0:	f004 fde2 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 80180a4:	682b      	ldr	r3, [r5, #0]
 80180a6:	4628      	mov	r0, r5
 80180a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80180aa:	4798      	blx	r3
 80180ac:	682b      	ldr	r3, [r5, #0]
 80180ae:	4606      	mov	r6, r0
 80180b0:	4628      	mov	r0, r5
 80180b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80180b4:	4798      	blx	r3
 80180b6:	6823      	ldr	r3, [r4, #0]
 80180b8:	4607      	mov	r7, r0
 80180ba:	4620      	mov	r0, r4
 80180bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80180be:	4798      	blx	r3
 80180c0:	6823      	ldr	r3, [r4, #0]
 80180c2:	4683      	mov	fp, r0
 80180c4:	4620      	mov	r0, r4
 80180c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180ca:	4798      	blx	r3
 80180cc:	463b      	mov	r3, r7
 80180ce:	4649      	mov	r1, r9
 80180d0:	4632      	mov	r2, r6
 80180d2:	2600      	movs	r6, #0
 80180d4:	e9cd b000 	strd	fp, r0, [sp]
 80180d8:	a80f      	add	r0, sp, #60	@ 0x3c
 80180da:	4637      	mov	r7, r6
 80180dc:	f004 fe34 	bl	801cd48 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80180e0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80180e4:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8018338 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80180e8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80180ec:	bf0c      	ite	eq
 80180ee:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80180f2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80180f6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80180f8:	4629      	mov	r1, r5
 80180fa:	f8db 3000 	ldr.w	r3, [fp]
 80180fe:	a80f      	add	r0, sp, #60	@ 0x3c
 8018100:	3701      	adds	r7, #1
 8018102:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018106:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801810a:	b2bf      	uxth	r7, r7
 801810c:	785b      	ldrb	r3, [r3, #1]
 801810e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018112:	f002 f804 	bl	801a11e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018116:	9b03      	ldr	r3, [sp, #12]
 8018118:	4286      	cmp	r6, r0
 801811a:	eba9 0903 	sub.w	r9, r9, r3
 801811e:	bfb8      	it	lt
 8018120:	4606      	movlt	r6, r0
 8018122:	a80f      	add	r0, sp, #60	@ 0x3c
 8018124:	fa0f f989 	sxth.w	r9, r9
 8018128:	b236      	sxth	r6, r6
 801812a:	f004 fdc4 	bl	801ccb6 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801812e:	b918      	cbnz	r0, 8018138 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018130:	7a2b      	ldrb	r3, [r5, #8]
 8018132:	444b      	add	r3, r9
 8018134:	2b00      	cmp	r3, #0
 8018136:	dcde      	bgt.n	80180f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8018138:	9b03      	ldr	r3, [sp, #12]
 801813a:	4620      	mov	r0, r4
 801813c:	9a04      	ldr	r2, [sp, #16]
 801813e:	fb13 f707 	smulbb	r7, r3, r7
 8018142:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018144:	f895 9009 	ldrb.w	r9, [r5, #9]
 8018148:	1aff      	subs	r7, r7, r3
 801814a:	b2bf      	uxth	r7, r7
 801814c:	b23b      	sxth	r3, r7
 801814e:	429a      	cmp	r2, r3
 8018150:	bfa8      	it	ge
 8018152:	4657      	movge	r7, sl
 8018154:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018158:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801815c:	6823      	ldr	r3, [r4, #0]
 801815e:	444f      	add	r7, r9
 8018160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018162:	bf08      	it	eq
 8018164:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8018168:	fa1f f987 	uxth.w	r9, r7
 801816c:	bf18      	it	ne
 801816e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8018172:	4798      	blx	r3
 8018174:	2801      	cmp	r0, #1
 8018176:	fa0f f789 	sxth.w	r7, r9
 801817a:	b2b3      	uxth	r3, r6
 801817c:	f000 80e2 	beq.w	8018344 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8018180:	2802      	cmp	r0, #2
 8018182:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8018186:	f000 80e3 	beq.w	8018350 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801818a:	7aea      	ldrb	r2, [r5, #11]
 801818c:	b236      	sxth	r6, r6
 801818e:	7b2d      	ldrb	r5, [r5, #12]
 8018190:	1ab6      	subs	r6, r6, r2
 8018192:	442a      	add	r2, r5
 8018194:	fa1f fa86 	uxth.w	sl, r6
 8018198:	4413      	add	r3, r2
 801819a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801819e:	fa0f fb8a 	sxth.w	fp, sl
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	2a02      	cmp	r2, #2
 80181a6:	b21e      	sxth	r6, r3
 80181a8:	f000 80d6 	beq.w	8018358 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80181ac:	2a03      	cmp	r2, #3
 80181ae:	f000 80de 	beq.w	801836e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80181b2:	2a01      	cmp	r2, #1
 80181b4:	f040 80e6 	bne.w	8018384 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80181b8:	8925      	ldrh	r5, [r4, #8]
 80181ba:	4633      	mov	r3, r6
 80181bc:	463e      	mov	r6, r7
 80181be:	eba5 0909 	sub.w	r9, r5, r9
 80181c2:	461f      	mov	r7, r3
 80181c4:	465d      	mov	r5, fp
 80181c6:	fa0f fb89 	sxth.w	fp, r9
 80181ca:	4b5d      	ldr	r3, [pc, #372]	@ (8018340 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80181cc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80181ce:	6818      	ldr	r0, [r3, #0]
 80181d0:	f7f9 fa52 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 80181d4:	f8a8 b000 	strh.w	fp, [r8]
 80181d8:	f8a8 5002 	strh.w	r5, [r8, #2]
 80181dc:	f8a8 6004 	strh.w	r6, [r8, #4]
 80181e0:	f8a8 7006 	strh.w	r7, [r8, #6]
 80181e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80181e8:	e738      	b.n	801805c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80181ea:	f004 fd3d 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 80181ee:	682b      	ldr	r3, [r5, #0]
 80181f0:	4628      	mov	r0, r5
 80181f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80181f4:	4798      	blx	r3
 80181f6:	682b      	ldr	r3, [r5, #0]
 80181f8:	4607      	mov	r7, r0
 80181fa:	4628      	mov	r0, r5
 80181fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80181fe:	4798      	blx	r3
 8018200:	6823      	ldr	r3, [r4, #0]
 8018202:	4683      	mov	fp, r0
 8018204:	4620      	mov	r0, r4
 8018206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018208:	4798      	blx	r3
 801820a:	6822      	ldr	r2, [r4, #0]
 801820c:	9005      	str	r0, [sp, #20]
 801820e:	4620      	mov	r0, r4
 8018210:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8018214:	4790      	blx	r2
 8018216:	9b05      	ldr	r3, [sp, #20]
 8018218:	463a      	mov	r2, r7
 801821a:	4649      	mov	r1, r9
 801821c:	9001      	str	r0, [sp, #4]
 801821e:	a80f      	add	r0, sp, #60	@ 0x3c
 8018220:	9300      	str	r3, [sp, #0]
 8018222:	465b      	mov	r3, fp
 8018224:	f004 fd90 	bl	801cd48 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018228:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801822c:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8018230:	af0f      	add	r7, sp, #60	@ 0x3c
 8018232:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018236:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801823a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801823c:	bf0a      	itet	eq
 801823e:	464a      	moveq	r2, r9
 8018240:	461a      	movne	r2, r3
 8018242:	4699      	moveq	r9, r3
 8018244:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8018248:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 801824c:	1ad2      	subs	r2, r2, r3
 801824e:	6833      	ldr	r3, [r6, #0]
 8018250:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8018254:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018258:	7859      	ldrb	r1, [r3, #1]
 801825a:	2300      	movs	r3, #0
 801825c:	9707      	str	r7, [sp, #28]
 801825e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8018262:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018266:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801826a:	f88d 1020 	strb.w	r1, [sp, #32]
 801826e:	9509      	str	r5, [sp, #36]	@ 0x24
 8018270:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018274:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8018278:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 801827c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8018280:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8018284:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018288:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801828c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018290:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018294:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8018298:	b350      	cbz	r0, 80182f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801829a:	682b      	ldr	r3, [r5, #0]
 801829c:	4628      	mov	r0, r5
 801829e:	695b      	ldr	r3, [r3, #20]
 80182a0:	4798      	blx	r3
 80182a2:	4607      	mov	r7, r0
 80182a4:	b320      	cbz	r0, 80182f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80182a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80182a8:	4639      	mov	r1, r7
 80182aa:	6803      	ldr	r3, [r0, #0]
 80182ac:	68db      	ldr	r3, [r3, #12]
 80182ae:	4798      	blx	r3
 80182b0:	4606      	mov	r6, r0
 80182b2:	b1e8      	cbz	r0, 80182f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80182b4:	7b43      	ldrb	r3, [r0, #13]
 80182b6:	7a82      	ldrb	r2, [r0, #10]
 80182b8:	005b      	lsls	r3, r3, #1
 80182ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182be:	4313      	orrs	r3, r2
 80182c0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80182c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80182c8:	2b06      	cmp	r3, #6
 80182ca:	d111      	bne.n	80182f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80182cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80182ce:	4632      	mov	r2, r6
 80182d0:	4639      	mov	r1, r7
 80182d2:	6803      	ldr	r3, [r0, #0]
 80182d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80182d6:	4798      	blx	r3
 80182d8:	7b73      	ldrb	r3, [r6, #13]
 80182da:	005b      	lsls	r3, r3, #1
 80182dc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80182e0:	7ab3      	ldrb	r3, [r6, #10]
 80182e2:	4313      	orrs	r3, r2
 80182e4:	4418      	add	r0, r3
 80182e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80182ea:	4418      	add	r0, r3
 80182ec:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80182f0:	2600      	movs	r6, #0
 80182f2:	4637      	mov	r7, r6
 80182f4:	a806      	add	r0, sp, #24
 80182f6:	3701      	adds	r7, #1
 80182f8:	f002 f907 	bl	801a50a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80182fc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8018300:	9b03      	ldr	r3, [sp, #12]
 8018302:	b2bf      	uxth	r7, r7
 8018304:	4286      	cmp	r6, r0
 8018306:	eba9 0903 	sub.w	r9, r9, r3
 801830a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801830e:	bfb8      	it	lt
 8018310:	4606      	movlt	r6, r0
 8018312:	fa0f f989 	sxth.w	r9, r9
 8018316:	b236      	sxth	r6, r6
 8018318:	2b00      	cmp	r3, #0
 801831a:	f43f af0d 	beq.w	8018138 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801831e:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8018322:	2b00      	cmp	r3, #0
 8018324:	f47f af08 	bne.w	8018138 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018328:	7a2b      	ldrb	r3, [r5, #8]
 801832a:	444b      	add	r3, r9
 801832c:	2b00      	cmp	r3, #0
 801832e:	dce1      	bgt.n	80182f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8018330:	e702      	b.n	8018138 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018332:	bf00      	nop
 8018334:	20012320 	.word	0x20012320
 8018338:	2001231c 	.word	0x2001231c
 801833c:	20012324 	.word	0x20012324
 8018340:	20012328 	.word	0x20012328
 8018344:	ebaa 0606 	sub.w	r6, sl, r6
 8018348:	2002      	movs	r0, #2
 801834a:	fb96 f6f0 	sdiv	r6, r6, r0
 801834e:	e71c      	b.n	801818a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018350:	441e      	add	r6, r3
 8018352:	ebaa 0606 	sub.w	r6, sl, r6
 8018356:	e718      	b.n	801818a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018358:	8925      	ldrh	r5, [r4, #8]
 801835a:	1aed      	subs	r5, r5, r3
 801835c:	eba5 050a 	sub.w	r5, r5, sl
 8018360:	fa0f fb85 	sxth.w	fp, r5
 8018364:	8965      	ldrh	r5, [r4, #10]
 8018366:	eba5 0509 	sub.w	r5, r5, r9
 801836a:	b22d      	sxth	r5, r5
 801836c:	e72d      	b.n	80181ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801836e:	8965      	ldrh	r5, [r4, #10]
 8018370:	f04f 0b00 	mov.w	fp, #0
 8018374:	1aed      	subs	r5, r5, r3
 8018376:	4633      	mov	r3, r6
 8018378:	463e      	mov	r6, r7
 801837a:	eba5 050a 	sub.w	r5, r5, sl
 801837e:	461f      	mov	r7, r3
 8018380:	b22d      	sxth	r5, r5
 8018382:	e722      	b.n	80181ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018384:	2500      	movs	r5, #0
 8018386:	e720      	b.n	80181ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08018388 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8018388:	b513      	push	{r0, r1, r4, lr}
 801838a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801838e:	4604      	mov	r4, r0
 8018390:	b1fb      	cbz	r3, 80183d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018392:	4b16      	ldr	r3, [pc, #88]	@ (80183ec <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8018394:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8018396:	881b      	ldrh	r3, [r3, #0]
 8018398:	428b      	cmp	r3, r1
 801839a:	d91a      	bls.n	80183d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801839c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	dd16      	ble.n	80183d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80183a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	dd12      	ble.n	80183d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80183ac:	4b10      	ldr	r3, [pc, #64]	@ (80183f0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80183ae:	6818      	ldr	r0, [r3, #0]
 80183b0:	f7f9 f962 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 80183b4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80183b8:	6822      	ldr	r2, [r4, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	db06      	blt.n	80183cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80183be:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	db02      	blt.n	80183cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80183c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80183c8:	4298      	cmp	r0, r3
 80183ca:	d004      	beq.n	80183d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80183cc:	6953      	ldr	r3, [r2, #20]
 80183ce:	4620      	mov	r0, r4
 80183d0:	4798      	blx	r3
 80183d2:	b002      	add	sp, #8
 80183d4:	bd10      	pop	{r4, pc}
 80183d6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80183da:	466b      	mov	r3, sp
 80183dc:	6912      	ldr	r2, [r2, #16]
 80183de:	c903      	ldmia	r1, {r0, r1}
 80183e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80183e4:	4619      	mov	r1, r3
 80183e6:	4620      	mov	r0, r4
 80183e8:	4790      	blx	r2
 80183ea:	e7f2      	b.n	80183d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80183ec:	20012320 	.word	0x20012320
 80183f0:	20012328 	.word	0x20012328

080183f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80183f4:	4b45      	ldr	r3, [pc, #276]	@ (801850c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80183f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183fa:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80183fc:	b08e      	sub	sp, #56	@ 0x38
 80183fe:	881b      	ldrh	r3, [r3, #0]
 8018400:	4604      	mov	r4, r0
 8018402:	4293      	cmp	r3, r2
 8018404:	d97e      	bls.n	8018504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018406:	6808      	ldr	r0, [r1, #0]
 8018408:	ab05      	add	r3, sp, #20
 801840a:	6849      	ldr	r1, [r1, #4]
 801840c:	4d40      	ldr	r5, [pc, #256]	@ (8018510 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801840e:	c303      	stmia	r3!, {r0, r1}
 8018410:	4611      	mov	r1, r2
 8018412:	6828      	ldr	r0, [r5, #0]
 8018414:	f7f9 f930 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 8018418:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 801841c:	2b00      	cmp	r3, #0
 801841e:	db11      	blt.n	8018444 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018420:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8018424:	2b00      	cmp	r3, #0
 8018426:	db0d      	blt.n	8018444 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018428:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801842a:	4298      	cmp	r0, r3
 801842c:	d10a      	bne.n	8018444 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801842e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8018432:	ab09      	add	r3, sp, #36	@ 0x24
 8018434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018438:	e883 0003 	stmia.w	r3, {r0, r1}
 801843c:	4619      	mov	r1, r3
 801843e:	a805      	add	r0, sp, #20
 8018440:	f7fc fb64 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8018444:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018448:	2b00      	cmp	r3, #0
 801844a:	dd5b      	ble.n	8018504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801844c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018450:	2b00      	cmp	r3, #0
 8018452:	dd57      	ble.n	8018504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018454:	4f2f      	ldr	r7, [pc, #188]	@ (8018514 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8018456:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801845e:	4b2e      	ldr	r3, [pc, #184]	@ (8018518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018466:	2e00      	cmp	r6, #0
 8018468:	d04c      	beq.n	8018504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801846a:	6823      	ldr	r3, [r4, #0]
 801846c:	4620      	mov	r0, r4
 801846e:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8018472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018474:	4798      	blx	r3
 8018476:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801847e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018482:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8018486:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 801848a:	785b      	ldrb	r3, [r3, #1]
 801848c:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8018490:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018494:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018496:	9609      	str	r6, [sp, #36]	@ 0x24
 8018498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801849c:	4b1f      	ldr	r3, [pc, #124]	@ (801851c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801849e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80184a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80184aa:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80184ae:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80184b2:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80184b6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80184ba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80184be:	b10a      	cbz	r2, 80184c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80184c0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80184c2:	b906      	cbnz	r6, 80184c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80184c4:	689e      	ldr	r6, [r3, #8]
 80184c6:	af07      	add	r7, sp, #28
 80184c8:	4621      	mov	r1, r4
 80184ca:	4638      	mov	r0, r7
 80184cc:	f003 fee8 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184d0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80184d2:	6828      	ldr	r0, [r5, #0]
 80184d4:	f7f9 f8d0 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 80184d8:	6823      	ldr	r3, [r4, #0]
 80184da:	4605      	mov	r5, r0
 80184dc:	4620      	mov	r0, r4
 80184de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80184e0:	4798      	blx	r3
 80184e2:	6823      	ldr	r3, [r4, #0]
 80184e4:	4680      	mov	r8, r0
 80184e6:	4620      	mov	r0, r4
 80184e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184ec:	4798      	blx	r3
 80184ee:	ab09      	add	r3, sp, #36	@ 0x24
 80184f0:	9501      	str	r5, [sp, #4]
 80184f2:	9300      	str	r3, [sp, #0]
 80184f4:	ab05      	add	r3, sp, #20
 80184f6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80184fa:	4630      	mov	r0, r6
 80184fc:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018500:	f7f9 f84b 	bl	801159a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018504:	b00e      	add	sp, #56	@ 0x38
 8018506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801850a:	bf00      	nop
 801850c:	20012320 	.word	0x20012320
 8018510:	20012328 	.word	0x20012328
 8018514:	2001231c 	.word	0x2001231c
 8018518:	20012324 	.word	0x20012324
 801851c:	200122c4 	.word	0x200122c4

08018520 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018520:	b538      	push	{r3, r4, r5, lr}
 8018522:	4b0e      	ldr	r3, [pc, #56]	@ (801855c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8018524:	4604      	mov	r4, r0
 8018526:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018528:	881b      	ldrh	r3, [r3, #0]
 801852a:	429a      	cmp	r2, r3
 801852c:	d214      	bcs.n	8018558 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801852e:	6803      	ldr	r3, [r0, #0]
 8018530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018532:	4798      	blx	r3
 8018534:	6823      	ldr	r3, [r4, #0]
 8018536:	4605      	mov	r5, r0
 8018538:	4620      	mov	r0, r4
 801853a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801853c:	4798      	blx	r3
 801853e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018542:	b22d      	sxth	r5, r5
 8018544:	4601      	mov	r1, r0
 8018546:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801854a:	bf06      	itte	eq
 801854c:	4602      	moveq	r2, r0
 801854e:	4629      	moveq	r1, r5
 8018550:	462a      	movne	r2, r5
 8018552:	4620      	mov	r0, r4
 8018554:	f7f2 f97d 	bl	800a852 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018558:	bd38      	pop	{r3, r4, r5, pc}
 801855a:	bf00      	nop
 801855c:	20012320 	.word	0x20012320

08018560 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018560:	b530      	push	{r4, r5, lr}
 8018562:	888b      	ldrh	r3, [r1, #4]
 8018564:	b085      	sub	sp, #20
 8018566:	4604      	mov	r4, r0
 8018568:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801856a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801856e:	b923      	cbnz	r3, 801857a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018570:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018574:	b90b      	cbnz	r3, 801857a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018576:	f7ff ffd3 	bl	8018520 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	466d      	mov	r5, sp
 801857e:	4621      	mov	r1, r4
 8018580:	343c      	adds	r4, #60	@ 0x3c
 8018582:	4628      	mov	r0, r5
 8018584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018588:	4798      	blx	r3
 801858a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801858e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018592:	b005      	add	sp, #20
 8018594:	bd30      	pop	{r4, r5, pc}

08018596 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018596:	2300      	movs	r3, #0
 8018598:	8083      	strh	r3, [r0, #4]
 801859a:	80c3      	strh	r3, [r0, #6]
 801859c:	8003      	strh	r3, [r0, #0]
 801859e:	8043      	strh	r3, [r0, #2]
 80185a0:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80185a4:	2bff      	cmp	r3, #255	@ 0xff
 80185a6:	bf01      	itttt	eq
 80185a8:	890b      	ldrheq	r3, [r1, #8]
 80185aa:	8083      	strheq	r3, [r0, #4]
 80185ac:	894b      	ldrheq	r3, [r1, #10]
 80185ae:	80c3      	strheq	r3, [r0, #6]
 80185b0:	4770      	bx	lr
	...

080185b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80185b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185b6:	4604      	mov	r4, r0
 80185b8:	466b      	mov	r3, sp
 80185ba:	6808      	ldr	r0, [r1, #0]
 80185bc:	6849      	ldr	r1, [r1, #4]
 80185be:	c303      	stmia	r3!, {r0, r1}
 80185c0:	6823      	ldr	r3, [r4, #0]
 80185c2:	4669      	mov	r1, sp
 80185c4:	4620      	mov	r0, r4
 80185c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185c8:	4798      	blx	r3
 80185ca:	4b08      	ldr	r3, [pc, #32]	@ (80185ec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80185d2:	b10a      	cbz	r2, 80185d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80185d4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80185d6:	b900      	cbnz	r0, 80185da <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80185d8:	6898      	ldr	r0, [r3, #8]
 80185da:	6803      	ldr	r3, [r0, #0]
 80185dc:	4669      	mov	r1, sp
 80185de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80185e0:	6a1d      	ldr	r5, [r3, #32]
 80185e2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80185e6:	47a8      	blx	r5
 80185e8:	b003      	add	sp, #12
 80185ea:	bd30      	pop	{r4, r5, pc}
 80185ec:	200122c4 	.word	0x200122c4

080185f0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80185f0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80185f4:	b12a      	cbz	r2, 8018602 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80185f6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80185fa:	b112      	cbz	r2, 8018602 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80185fc:	6803      	ldr	r3, [r0, #0]
 80185fe:	695b      	ldr	r3, [r3, #20]
 8018600:	4718      	bx	r3
 8018602:	4770      	bx	lr

08018604 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018604:	b570      	push	{r4, r5, r6, lr}
 8018606:	880b      	ldrh	r3, [r1, #0]
 8018608:	4605      	mov	r5, r0
 801860a:	4604      	mov	r4, r0
 801860c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801860e:	8813      	ldrh	r3, [r2, #0]
 8018610:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018614:	4628      	mov	r0, r5
 8018616:	f005 ff9d 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801861a:	4606      	mov	r6, r0
 801861c:	4628      	mov	r0, r5
 801861e:	f005 ffcd 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018622:	6823      	ldr	r3, [r4, #0]
 8018624:	4605      	mov	r5, r0
 8018626:	4631      	mov	r1, r6
 8018628:	4620      	mov	r0, r4
 801862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801862c:	4798      	blx	r3
 801862e:	6823      	ldr	r3, [r4, #0]
 8018630:	4629      	mov	r1, r5
 8018632:	4620      	mov	r0, r4
 8018634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801863a:	4718      	bx	r3

0801863c <_ZNK8touchgfx6Button12getSolidRectEv>:
 801863c:	b510      	push	{r4, lr}
 801863e:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8018642:	4604      	mov	r4, r0
 8018644:	2bff      	cmp	r3, #255	@ 0xff
 8018646:	d006      	beq.n	8018656 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8018648:	2300      	movs	r3, #0
 801864a:	8003      	strh	r3, [r0, #0]
 801864c:	8043      	strh	r3, [r0, #2]
 801864e:	8083      	strh	r3, [r0, #4]
 8018650:	80c3      	strh	r3, [r0, #6]
 8018652:	4620      	mov	r0, r4
 8018654:	bd10      	pop	{r4, pc}
 8018656:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801865a:	b11b      	cbz	r3, 8018664 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801865c:	3130      	adds	r1, #48	@ 0x30
 801865e:	f005 ffe1 	bl	801e624 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018662:	e7f6      	b.n	8018652 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018664:	312e      	adds	r1, #46	@ 0x2e
 8018666:	e7fa      	b.n	801865e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08018668 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801866c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8018670:	b08a      	sub	sp, #40	@ 0x28
 8018672:	4604      	mov	r4, r0
 8018674:	4688      	mov	r8, r1
 8018676:	2b00      	cmp	r3, #0
 8018678:	d066      	beq.n	8018748 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801867a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801867c:	a805      	add	r0, sp, #20
 801867e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018682:	f005 ff67 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018686:	4607      	mov	r7, r0
 8018688:	a805      	add	r0, sp, #20
 801868a:	f005 ff97 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801868e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8018692:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8018696:	2300      	movs	r3, #0
 8018698:	4432      	add	r2, r6
 801869a:	9306      	str	r3, [sp, #24]
 801869c:	b292      	uxth	r2, r2
 801869e:	fa0f fc82 	sxth.w	ip, r2
 80186a2:	459c      	cmp	ip, r3
 80186a4:	dd52      	ble.n	801874c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80186a6:	42b7      	cmp	r7, r6
 80186a8:	dd50      	ble.n	801874c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80186aa:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80186ae:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80186b2:	442b      	add	r3, r5
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	b219      	sxth	r1, r3
 80186b8:	2900      	cmp	r1, #0
 80186ba:	dd47      	ble.n	801874c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80186bc:	42a8      	cmp	r0, r5
 80186be:	dd45      	ble.n	801874c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80186c0:	4567      	cmp	r7, ip
 80186c2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80186c6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80186ca:	bfb8      	it	lt
 80186cc:	b2ba      	uxthlt	r2, r7
 80186ce:	4288      	cmp	r0, r1
 80186d0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80186d4:	bfb8      	it	lt
 80186d6:	b283      	uxthlt	r3, r0
 80186d8:	1b92      	subs	r2, r2, r6
 80186da:	f8ad 501a 	strh.w	r5, [sp, #26]
 80186de:	1b5b      	subs	r3, r3, r5
 80186e0:	f8ad 201c 	strh.w	r2, [sp, #28]
 80186e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80186e8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80186ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d026      	beq.n	8018742 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80186f4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	dd22      	ble.n	8018742 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80186fc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018700:	2b00      	cmp	r3, #0
 8018702:	dd1e      	ble.n	8018742 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018704:	2300      	movs	r3, #0
 8018706:	a908      	add	r1, sp, #32
 8018708:	4620      	mov	r0, r4
 801870a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801870e:	6823      	ldr	r3, [r4, #0]
 8018710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018712:	4798      	blx	r3
 8018714:	4b0f      	ldr	r3, [pc, #60]	@ (8018754 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801871c:	b10a      	cbz	r2, 8018722 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801871e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018720:	b900      	cbnz	r0, 8018724 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8018722:	6898      	ldr	r0, [r3, #8]
 8018724:	2501      	movs	r5, #1
 8018726:	6801      	ldr	r1, [r0, #0]
 8018728:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801872c:	9502      	str	r5, [sp, #8]
 801872e:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8018732:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018736:	9401      	str	r4, [sp, #4]
 8018738:	ac06      	add	r4, sp, #24
 801873a:	9400      	str	r4, [sp, #0]
 801873c:	688c      	ldr	r4, [r1, #8]
 801873e:	a905      	add	r1, sp, #20
 8018740:	47a0      	blx	r4
 8018742:	b00a      	add	sp, #40	@ 0x28
 8018744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018748:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801874a:	e797      	b.n	801867c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801874c:	2300      	movs	r3, #0
 801874e:	9307      	str	r3, [sp, #28]
 8018750:	e7ca      	b.n	80186e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8018752:	bf00      	nop
 8018754:	200122c4 	.word	0x200122c4

08018758 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8018758:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 801875c:	b12a      	cbz	r2, 801876a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801875e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8018762:	b112      	cbz	r2, 801876a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018764:	6803      	ldr	r3, [r0, #0]
 8018766:	695b      	ldr	r3, [r3, #20]
 8018768:	4718      	bx	r3
 801876a:	4770      	bx	lr

0801876c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801876c:	4b30      	ldr	r3, [pc, #192]	@ (8018830 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801876e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018772:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018774:	b08d      	sub	sp, #52	@ 0x34
 8018776:	881b      	ldrh	r3, [r3, #0]
 8018778:	4604      	mov	r4, r0
 801877a:	460f      	mov	r7, r1
 801877c:	4293      	cmp	r3, r2
 801877e:	d954      	bls.n	801882a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018780:	4b2c      	ldr	r3, [pc, #176]	@ (8018834 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8018782:	6819      	ldr	r1, [r3, #0]
 8018784:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8018788:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801878c:	4a2a      	ldr	r2, [pc, #168]	@ (8018838 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801878e:	6812      	ldr	r2, [r2, #0]
 8018790:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8018794:	2900      	cmp	r1, #0
 8018796:	d048      	beq.n	801882a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018798:	785a      	ldrb	r2, [r3, #1]
 801879a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801879e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80187a2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80187a6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80187aa:	4b24      	ldr	r3, [pc, #144]	@ (801883c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80187ac:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 80187b6:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 80187ba:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 80187be:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80187c0:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80187c4:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80187c8:	9107      	str	r1, [sp, #28]
 80187ca:	f88d 8020 	strb.w	r8, [sp, #32]
 80187ce:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80187d2:	9609      	str	r6, [sp, #36]	@ 0x24
 80187d4:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80187d8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80187dc:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80187e0:	b10b      	cbz	r3, 80187e6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80187e2:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80187e4:	b905      	cbnz	r5, 80187e8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80187e6:	6895      	ldr	r5, [r2, #8]
 80187e8:	ae05      	add	r6, sp, #20
 80187ea:	4621      	mov	r1, r4
 80187ec:	4630      	mov	r0, r6
 80187ee:	f003 fd57 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187f2:	4b13      	ldr	r3, [pc, #76]	@ (8018840 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80187f4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80187f6:	6818      	ldr	r0, [r3, #0]
 80187f8:	f7f8 ff3e 	bl	8011678 <_ZNK8touchgfx5Texts7getTextEt>
 80187fc:	6823      	ldr	r3, [r4, #0]
 80187fe:	4680      	mov	r8, r0
 8018800:	4620      	mov	r0, r4
 8018802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018804:	4798      	blx	r3
 8018806:	6823      	ldr	r3, [r4, #0]
 8018808:	4681      	mov	r9, r0
 801880a:	4620      	mov	r0, r4
 801880c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018810:	4798      	blx	r3
 8018812:	ab07      	add	r3, sp, #28
 8018814:	f8cd 8004 	str.w	r8, [sp, #4]
 8018818:	9300      	str	r3, [sp, #0]
 801881a:	463b      	mov	r3, r7
 801881c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8018820:	4628      	mov	r0, r5
 8018822:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018826:	f7f8 feb8 	bl	801159a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801882a:	b00d      	add	sp, #52	@ 0x34
 801882c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018830:	20012320 	.word	0x20012320
 8018834:	2001231c 	.word	0x2001231c
 8018838:	20012324 	.word	0x20012324
 801883c:	200122c4 	.word	0x200122c4
 8018840:	20012328 	.word	0x20012328

08018844 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018844:	b570      	push	{r4, r5, r6, lr}
 8018846:	880b      	ldrh	r3, [r1, #0]
 8018848:	460d      	mov	r5, r1
 801884a:	4604      	mov	r4, r0
 801884c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801884e:	4608      	mov	r0, r1
 8018850:	f005 fe80 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018854:	4606      	mov	r6, r0
 8018856:	4628      	mov	r0, r5
 8018858:	f005 feb0 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801885c:	6823      	ldr	r3, [r4, #0]
 801885e:	4605      	mov	r5, r0
 8018860:	4631      	mov	r1, r6
 8018862:	4620      	mov	r0, r4
 8018864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018866:	4798      	blx	r3
 8018868:	6823      	ldr	r3, [r4, #0]
 801886a:	4629      	mov	r1, r5
 801886c:	4620      	mov	r0, r4
 801886e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018874:	4718      	bx	r3

08018876 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018876:	b510      	push	{r4, lr}
 8018878:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801887c:	4604      	mov	r4, r0
 801887e:	2bff      	cmp	r3, #255	@ 0xff
 8018880:	d006      	beq.n	8018890 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018882:	2300      	movs	r3, #0
 8018884:	8003      	strh	r3, [r0, #0]
 8018886:	8043      	strh	r3, [r0, #2]
 8018888:	8083      	strh	r3, [r0, #4]
 801888a:	80c3      	strh	r3, [r0, #6]
 801888c:	4620      	mov	r0, r4
 801888e:	bd10      	pop	{r4, pc}
 8018890:	3126      	adds	r1, #38	@ 0x26
 8018892:	f005 fec7 	bl	801e624 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018896:	e7f9      	b.n	801888c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018898 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8018898:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 801889c:	b12a      	cbz	r2, 80188aa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801889e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80188a2:	b112      	cbz	r2, 80188aa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80188a4:	6803      	ldr	r3, [r0, #0]
 80188a6:	695b      	ldr	r3, [r3, #20]
 80188a8:	4718      	bx	r3
 80188aa:	4770      	bx	lr

080188ac <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80188ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b0:	4604      	mov	r4, r0
 80188b2:	b088      	sub	sp, #32
 80188b4:	2500      	movs	r5, #0
 80188b6:	460f      	mov	r7, r1
 80188b8:	f854 3b26 	ldr.w	r3, [r4], #38
 80188bc:	a904      	add	r1, sp, #16
 80188be:	4606      	mov	r6, r0
 80188c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80188c6:	4798      	blx	r3
 80188c8:	4620      	mov	r0, r4
 80188ca:	f005 fe43 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188ce:	4680      	mov	r8, r0
 80188d0:	4620      	mov	r0, r4
 80188d2:	f005 fe73 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188d6:	9506      	str	r5, [sp, #24]
 80188d8:	ad06      	add	r5, sp, #24
 80188da:	f8ad 001e 	strh.w	r0, [sp, #30]
 80188de:	4639      	mov	r1, r7
 80188e0:	f8ad 801c 	strh.w	r8, [sp, #28]
 80188e4:	4628      	mov	r0, r5
 80188e6:	f7fc f911 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 80188ea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	dd19      	ble.n	8018926 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80188f2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	dd15      	ble.n	8018926 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80188fa:	4b0c      	ldr	r3, [pc, #48]	@ (801892c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018902:	b10a      	cbz	r2, 8018908 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018904:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018906:	b900      	cbnz	r0, 801890a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018908:	6898      	ldr	r0, [r3, #8]
 801890a:	2701      	movs	r7, #1
 801890c:	6801      	ldr	r1, [r0, #0]
 801890e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018912:	9702      	str	r7, [sp, #8]
 8018914:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8018918:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801891c:	e9cd 5600 	strd	r5, r6, [sp]
 8018920:	688d      	ldr	r5, [r1, #8]
 8018922:	4621      	mov	r1, r4
 8018924:	47a8      	blx	r5
 8018926:	b008      	add	sp, #32
 8018928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801892c:	200122c4 	.word	0x200122c4

08018930 <_ZN8touchgfx7OutlineD1Ev>:
 8018930:	4770      	bx	lr

08018932 <_ZN8touchgfx7OutlineD0Ev>:
 8018932:	b510      	push	{r4, lr}
 8018934:	4604      	mov	r4, r0
 8018936:	2130      	movs	r1, #48	@ 0x30
 8018938:	f014 fa95 	bl	802ce66 <_ZdlPvj>
 801893c:	4620      	mov	r0, r4
 801893e:	bd10      	pop	{r4, pc}

08018940 <_ZN8touchgfx7Outline5resetEv>:
 8018940:	b510      	push	{r4, lr}
 8018942:	4604      	mov	r4, r0
 8018944:	f000 fe86 	bl	8019654 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8018948:	60e0      	str	r0, [r4, #12]
 801894a:	f000 fe89 	bl	8019660 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801894e:	68e3      	ldr	r3, [r4, #12]
 8018950:	08c0      	lsrs	r0, r0, #3
 8018952:	2200      	movs	r2, #0
 8018954:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018958:	6123      	str	r3, [r4, #16]
 801895a:	3801      	subs	r0, #1
 801895c:	60a2      	str	r2, [r4, #8]
 801895e:	6060      	str	r0, [r4, #4]
 8018960:	8019      	strh	r1, [r3, #0]
 8018962:	8059      	strh	r1, [r3, #2]
 8018964:	809a      	strh	r2, [r3, #4]
 8018966:	80da      	strh	r2, [r3, #6]
 8018968:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801896a:	f023 0301 	bic.w	r3, r3, #1
 801896e:	f043 0302 	orr.w	r3, r3, #2
 8018972:	6263      	str	r3, [r4, #36]	@ 0x24
 8018974:	bd10      	pop	{r4, pc}
	...

08018978 <_ZN8touchgfx7OutlineC1Ev>:
 8018978:	4b0a      	ldr	r3, [pc, #40]	@ (80189a4 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801897a:	b510      	push	{r4, lr}
 801897c:	6003      	str	r3, [r0, #0]
 801897e:	2300      	movs	r3, #0
 8018980:	4604      	mov	r4, r0
 8018982:	6243      	str	r3, [r0, #36]	@ 0x24
 8018984:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8018988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801898c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8018990:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8018994:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018998:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801899c:	f7ff ffd0 	bl	8018940 <_ZN8touchgfx7Outline5resetEv>
 80189a0:	4620      	mov	r0, r4
 80189a2:	bd10      	pop	{r4, pc}
 80189a4:	08032190 	.word	0x08032190

080189a8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80189a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ac:	b093      	sub	sp, #76	@ 0x4c
 80189ae:	1156      	asrs	r6, r2, #5
 80189b0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80189b2:	9305      	str	r3, [sp, #20]
 80189b4:	1153      	asrs	r3, r2, #5
 80189b6:	f004 051f 	and.w	r5, r4, #31
 80189ba:	9303      	str	r3, [sp, #12]
 80189bc:	1163      	asrs	r3, r4, #5
 80189be:	9504      	str	r5, [sp, #16]
 80189c0:	1165      	asrs	r5, r4, #5
 80189c2:	9306      	str	r3, [sp, #24]
 80189c4:	f002 031f 	and.w	r3, r2, #31
 80189c8:	42ae      	cmp	r6, r5
 80189ca:	f040 80f4 	bne.w	8018bb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80189ce:	9c04      	ldr	r4, [sp, #16]
 80189d0:	9a05      	ldr	r2, [sp, #20]
 80189d2:	42a3      	cmp	r3, r4
 80189d4:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80189d8:	6902      	ldr	r2, [r0, #16]
 80189da:	d125      	bne.n	8018a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80189dc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80189e0:	459e      	cmp	lr, r3
 80189e2:	d103      	bne.n	80189ec <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80189e4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80189e8:	429e      	cmp	r6, r3
 80189ea:	d035      	beq.n	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80189ec:	88d1      	ldrh	r1, [r2, #6]
 80189ee:	8893      	ldrh	r3, [r2, #4]
 80189f0:	430b      	orrs	r3, r1
 80189f2:	d010      	beq.n	8018a16 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80189f4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	db0c      	blt.n	8018a16 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80189fc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80189fe:	428b      	cmp	r3, r1
 8018a00:	da09      	bge.n	8018a16 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018a02:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018a06:	428b      	cmp	r3, r1
 8018a08:	f103 0301 	add.w	r3, r3, #1
 8018a0c:	bf38      	it	cc
 8018a0e:	3208      	addcc	r2, #8
 8018a10:	6083      	str	r3, [r0, #8]
 8018a12:	bf38      	it	cc
 8018a14:	6102      	strcc	r2, [r0, #16]
 8018a16:	6903      	ldr	r3, [r0, #16]
 8018a18:	9a03      	ldr	r2, [sp, #12]
 8018a1a:	f8a3 e000 	strh.w	lr, [r3]
 8018a1e:	805a      	strh	r2, [r3, #2]
 8018a20:	2200      	movs	r2, #0
 8018a22:	809a      	strh	r2, [r3, #4]
 8018a24:	80da      	strh	r2, [r3, #6]
 8018a26:	e017      	b.n	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018a28:	9c05      	ldr	r4, [sp, #20]
 8018a2a:	114e      	asrs	r6, r1, #5
 8018a2c:	f001 0c1f 	and.w	ip, r1, #31
 8018a30:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018a34:	f004 041f 	and.w	r4, r4, #31
 8018a38:	4576      	cmp	r6, lr
 8018a3a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8018a3e:	9402      	str	r4, [sp, #8]
 8018a40:	9c04      	ldr	r4, [sp, #16]
 8018a42:	eba4 0403 	sub.w	r4, r4, r3
 8018a46:	d10a      	bne.n	8018a5e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8018a48:	9b02      	ldr	r3, [sp, #8]
 8018a4a:	44a0      	add	r8, r4
 8018a4c:	449c      	add	ip, r3
 8018a4e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018a52:	fb04 a40c 	mla	r4, r4, ip, sl
 8018a56:	80d4      	strh	r4, [r2, #6]
 8018a58:	b013      	add	sp, #76	@ 0x4c
 8018a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5e:	9d05      	ldr	r5, [sp, #20]
 8018a60:	1a69      	subs	r1, r5, r1
 8018a62:	bf51      	iteee	pl
 8018a64:	f1cc 0520 	rsbpl	r5, ip, #32
 8018a68:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018a6c:	4249      	negmi	r1, r1
 8018a6e:	2500      	movmi	r5, #0
 8018a70:	bf5d      	ittte	pl
 8018a72:	436c      	mulpl	r4, r5
 8018a74:	2520      	movpl	r5, #32
 8018a76:	f04f 0901 	movpl.w	r9, #1
 8018a7a:	f04f 39ff 	movmi.w	r9, #4294967295
 8018a7e:	9501      	str	r5, [sp, #4]
 8018a80:	9f01      	ldr	r7, [sp, #4]
 8018a82:	444e      	add	r6, r9
 8018a84:	fb94 f5f1 	sdiv	r5, r4, r1
 8018a88:	fb01 4415 	mls	r4, r1, r5, r4
 8018a8c:	44bc      	add	ip, r7
 8018a8e:	2c00      	cmp	r4, #0
 8018a90:	bfbc      	itt	lt
 8018a92:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018a96:	1864      	addlt	r4, r4, r1
 8018a98:	44a8      	add	r8, r5
 8018a9a:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018a9e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018aa2:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018aa6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018aaa:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018aae:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8018ab2:	ea58 0202 	orrs.w	r2, r8, r2
 8018ab6:	d011      	beq.n	8018adc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018ab8:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018abc:	f1b8 0f00 	cmp.w	r8, #0
 8018ac0:	db0c      	blt.n	8018adc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018ac2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018ac4:	4590      	cmp	r8, r2
 8018ac6:	da09      	bge.n	8018adc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018ac8:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018acc:	4590      	cmp	r8, r2
 8018ace:	bf3c      	itt	cc
 8018ad0:	f10c 0208 	addcc.w	r2, ip, #8
 8018ad4:	6102      	strcc	r2, [r0, #16]
 8018ad6:	f108 0201 	add.w	r2, r8, #1
 8018ada:	6082      	str	r2, [r0, #8]
 8018adc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018ae0:	2700      	movs	r7, #0
 8018ae2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018ae6:	45b6      	cmp	lr, r6
 8018ae8:	f8ac 6000 	strh.w	r6, [ip]
 8018aec:	442b      	add	r3, r5
 8018aee:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018af2:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018af6:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018afa:	d04b      	beq.n	8018b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018afc:	9f04      	ldr	r7, [sp, #16]
 8018afe:	1a64      	subs	r4, r4, r1
 8018b00:	f04f 0a00 	mov.w	sl, #0
 8018b04:	1aff      	subs	r7, r7, r3
 8018b06:	443d      	add	r5, r7
 8018b08:	016d      	lsls	r5, r5, #5
 8018b0a:	fb95 f8f1 	sdiv	r8, r5, r1
 8018b0e:	fb01 5518 	mls	r5, r1, r8, r5
 8018b12:	2d00      	cmp	r5, #0
 8018b14:	bfbc      	itt	lt
 8018b16:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018b1a:	186d      	addlt	r5, r5, r1
 8018b1c:	f108 0701 	add.w	r7, r8, #1
 8018b20:	9703      	str	r7, [sp, #12]
 8018b22:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018b26:	1964      	adds	r4, r4, r5
 8018b28:	444e      	add	r6, r9
 8018b2a:	bf54      	ite	pl
 8018b2c:	9f03      	ldrpl	r7, [sp, #12]
 8018b2e:	4647      	movmi	r7, r8
 8018b30:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018b34:	bf58      	it	pl
 8018b36:	1a64      	subpl	r4, r4, r1
 8018b38:	443b      	add	r3, r7
 8018b3a:	44bb      	add	fp, r7
 8018b3c:	f8ac b004 	strh.w	fp, [ip, #4]
 8018b40:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018b44:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018b48:	f8ac b006 	strh.w	fp, [ip, #6]
 8018b4c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018b50:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018b54:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018b58:	ea5b 0707 	orrs.w	r7, fp, r7
 8018b5c:	d011      	beq.n	8018b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018b5e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018b62:	f1bb 0f00 	cmp.w	fp, #0
 8018b66:	db0c      	blt.n	8018b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018b68:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018b6a:	45bb      	cmp	fp, r7
 8018b6c:	da09      	bge.n	8018b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018b6e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018b72:	45bb      	cmp	fp, r7
 8018b74:	bf3c      	itt	cc
 8018b76:	f10c 0708 	addcc.w	r7, ip, #8
 8018b7a:	6107      	strcc	r7, [r0, #16]
 8018b7c:	f10b 0701 	add.w	r7, fp, #1
 8018b80:	6087      	str	r7, [r0, #8]
 8018b82:	6907      	ldr	r7, [r0, #16]
 8018b84:	45b6      	cmp	lr, r6
 8018b86:	803e      	strh	r6, [r7, #0]
 8018b88:	807a      	strh	r2, [r7, #2]
 8018b8a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018b8e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018b92:	d1c6      	bne.n	8018b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8018b94:	9a04      	ldr	r2, [sp, #16]
 8018b96:	1ad3      	subs	r3, r2, r3
 8018b98:	6902      	ldr	r2, [r0, #16]
 8018b9a:	8891      	ldrh	r1, [r2, #4]
 8018b9c:	88d6      	ldrh	r6, [r2, #6]
 8018b9e:	4419      	add	r1, r3
 8018ba0:	8091      	strh	r1, [r2, #4]
 8018ba2:	9902      	ldr	r1, [sp, #8]
 8018ba4:	f101 0c20 	add.w	ip, r1, #32
 8018ba8:	9901      	ldr	r1, [sp, #4]
 8018baa:	ebac 0c01 	sub.w	ip, ip, r1
 8018bae:	fb03 630c 	mla	r3, r3, ip, r6
 8018bb2:	80d3      	strh	r3, [r2, #6]
 8018bb4:	e750      	b.n	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018bb6:	9d05      	ldr	r5, [sp, #20]
 8018bb8:	1aa2      	subs	r2, r4, r2
 8018bba:	eba5 0501 	sub.w	r5, r5, r1
 8018bbe:	9202      	str	r2, [sp, #8]
 8018bc0:	9508      	str	r5, [sp, #32]
 8018bc2:	f140 8128 	bpl.w	8018e16 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018bc6:	9a03      	ldr	r2, [sp, #12]
 8018bc8:	2a00      	cmp	r2, #0
 8018bca:	f6ff af45 	blt.w	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018bce:	9a02      	ldr	r2, [sp, #8]
 8018bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8018bd4:	4252      	negs	r2, r2
 8018bd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018bd8:	2400      	movs	r4, #0
 8018bda:	9202      	str	r2, [sp, #8]
 8018bdc:	9a06      	ldr	r2, [sp, #24]
 8018bde:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018be2:	9206      	str	r2, [sp, #24]
 8018be4:	462a      	mov	r2, r5
 8018be6:	435a      	muls	r2, r3
 8018be8:	9401      	str	r4, [sp, #4]
 8018bea:	9c02      	ldr	r4, [sp, #8]
 8018bec:	9d02      	ldr	r5, [sp, #8]
 8018bee:	fb92 f4f4 	sdiv	r4, r2, r4
 8018bf2:	fb05 2214 	mls	r2, r5, r4, r2
 8018bf6:	2a00      	cmp	r2, #0
 8018bf8:	9207      	str	r2, [sp, #28]
 8018bfa:	bfbc      	itt	lt
 8018bfc:	1952      	addlt	r2, r2, r5
 8018bfe:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018c02:	6905      	ldr	r5, [r0, #16]
 8018c04:	bfb8      	it	lt
 8018c06:	9207      	strlt	r2, [sp, #28]
 8018c08:	eb04 0901 	add.w	r9, r4, r1
 8018c0c:	9a01      	ldr	r2, [sp, #4]
 8018c0e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018c12:	429a      	cmp	r2, r3
 8018c14:	f040 8111 	bne.w	8018e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018c18:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018c1c:	429e      	cmp	r6, r3
 8018c1e:	d104      	bne.n	8018c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8018c20:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018c24:	9a03      	ldr	r2, [sp, #12]
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d01b      	beq.n	8018c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018c2a:	88ea      	ldrh	r2, [r5, #6]
 8018c2c:	88ab      	ldrh	r3, [r5, #4]
 8018c2e:	4313      	orrs	r3, r2
 8018c30:	d010      	beq.n	8018c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018c32:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018c36:	2a00      	cmp	r2, #0
 8018c38:	db0c      	blt.n	8018c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018c3a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	da09      	bge.n	8018c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018c40:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018c44:	429a      	cmp	r2, r3
 8018c46:	f102 0201 	add.w	r2, r2, #1
 8018c4a:	bf38      	it	cc
 8018c4c:	3508      	addcc	r5, #8
 8018c4e:	6082      	str	r2, [r0, #8]
 8018c50:	bf38      	it	cc
 8018c52:	6105      	strcc	r5, [r0, #16]
 8018c54:	6903      	ldr	r3, [r0, #16]
 8018c56:	9a03      	ldr	r2, [sp, #12]
 8018c58:	801e      	strh	r6, [r3, #0]
 8018c5a:	805a      	strh	r2, [r3, #2]
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	809a      	strh	r2, [r3, #4]
 8018c60:	80da      	strh	r2, [r3, #6]
 8018c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c64:	9a03      	ldr	r2, [sp, #12]
 8018c66:	6901      	ldr	r1, [r0, #16]
 8018c68:	441a      	add	r2, r3
 8018c6a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018c6e:	42b3      	cmp	r3, r6
 8018c70:	d103      	bne.n	8018c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8018c72:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d01a      	beq.n	8018cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8018c7a:	88cc      	ldrh	r4, [r1, #6]
 8018c7c:	888b      	ldrh	r3, [r1, #4]
 8018c7e:	4323      	orrs	r3, r4
 8018c80:	d010      	beq.n	8018ca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018c82:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018c86:	2c00      	cmp	r4, #0
 8018c88:	db0c      	blt.n	8018ca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018c8a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018c8c:	429c      	cmp	r4, r3
 8018c8e:	da09      	bge.n	8018ca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018c90:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018c94:	429c      	cmp	r4, r3
 8018c96:	f104 0401 	add.w	r4, r4, #1
 8018c9a:	bf38      	it	cc
 8018c9c:	3108      	addcc	r1, #8
 8018c9e:	6084      	str	r4, [r0, #8]
 8018ca0:	bf38      	it	cc
 8018ca2:	6101      	strcc	r1, [r0, #16]
 8018ca4:	6903      	ldr	r3, [r0, #16]
 8018ca6:	2100      	movs	r1, #0
 8018ca8:	801e      	strh	r6, [r3, #0]
 8018caa:	805a      	strh	r2, [r3, #2]
 8018cac:	8099      	strh	r1, [r3, #4]
 8018cae:	80d9      	strh	r1, [r3, #6]
 8018cb0:	9b06      	ldr	r3, [sp, #24]
 8018cb2:	4293      	cmp	r3, r2
 8018cb4:	f000 8082 	beq.w	8018dbc <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018cb8:	9b08      	ldr	r3, [sp, #32]
 8018cba:	9902      	ldr	r1, [sp, #8]
 8018cbc:	015b      	lsls	r3, r3, #5
 8018cbe:	9c02      	ldr	r4, [sp, #8]
 8018cc0:	fb93 f1f1 	sdiv	r1, r3, r1
 8018cc4:	fb04 3311 	mls	r3, r4, r1, r3
 8018cc8:	9103      	str	r1, [sp, #12]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	9308      	str	r3, [sp, #32]
 8018cce:	da04      	bge.n	8018cda <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8018cd0:	1e4b      	subs	r3, r1, #1
 8018cd2:	9303      	str	r3, [sp, #12]
 8018cd4:	9b08      	ldr	r3, [sp, #32]
 8018cd6:	4423      	add	r3, r4
 8018cd8:	9308      	str	r3, [sp, #32]
 8018cda:	9b07      	ldr	r3, [sp, #28]
 8018cdc:	464f      	mov	r7, r9
 8018cde:	9902      	ldr	r1, [sp, #8]
 8018ce0:	2600      	movs	r6, #0
 8018ce2:	1a5b      	subs	r3, r3, r1
 8018ce4:	9307      	str	r3, [sp, #28]
 8018ce6:	9b01      	ldr	r3, [sp, #4]
 8018ce8:	f1c3 0320 	rsb	r3, r3, #32
 8018cec:	930e      	str	r3, [sp, #56]	@ 0x38
 8018cee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018cf0:	9b01      	ldr	r3, [sp, #4]
 8018cf2:	1a5b      	subs	r3, r3, r1
 8018cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8018cf6:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018cfa:	185b      	adds	r3, r3, r1
 8018cfc:	bf58      	it	pl
 8018cfe:	9902      	ldrpl	r1, [sp, #8]
 8018d00:	9307      	str	r3, [sp, #28]
 8018d02:	bf57      	itett	pl
 8018d04:	1a5b      	subpl	r3, r3, r1
 8018d06:	9903      	ldrmi	r1, [sp, #12]
 8018d08:	9307      	strpl	r3, [sp, #28]
 8018d0a:	9b03      	ldrpl	r3, [sp, #12]
 8018d0c:	bf58      	it	pl
 8018d0e:	1c59      	addpl	r1, r3, #1
 8018d10:	2a00      	cmp	r2, #0
 8018d12:	4489      	add	r9, r1
 8018d14:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018d18:	db2e      	blt.n	8018d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018d1a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	dd2b      	ble.n	8018d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018d20:	9c01      	ldr	r4, [sp, #4]
 8018d22:	6905      	ldr	r5, [r0, #16]
 8018d24:	46a0      	mov	r8, r4
 8018d26:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018d28:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018d2c:	45a0      	cmp	r8, r4
 8018d2e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018d32:	f040 814c 	bne.w	8018fce <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8018d36:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018d3a:	4551      	cmp	r1, sl
 8018d3c:	d103      	bne.n	8018d46 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8018d3e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018d42:	4291      	cmp	r1, r2
 8018d44:	d018      	beq.n	8018d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018d46:	ea5c 010e 	orrs.w	r1, ip, lr
 8018d4a:	d00f      	beq.n	8018d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018d4c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018d50:	2900      	cmp	r1, #0
 8018d52:	db0b      	blt.n	8018d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018d54:	428b      	cmp	r3, r1
 8018d56:	dd09      	ble.n	8018d6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018d58:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018d5c:	4299      	cmp	r1, r3
 8018d5e:	f101 0101 	add.w	r1, r1, #1
 8018d62:	bf38      	it	cc
 8018d64:	3508      	addcc	r5, #8
 8018d66:	6081      	str	r1, [r0, #8]
 8018d68:	bf38      	it	cc
 8018d6a:	6105      	strcc	r5, [r0, #16]
 8018d6c:	6903      	ldr	r3, [r0, #16]
 8018d6e:	f8a3 a000 	strh.w	sl, [r3]
 8018d72:	805a      	strh	r2, [r3, #2]
 8018d74:	809e      	strh	r6, [r3, #4]
 8018d76:	80de      	strh	r6, [r3, #6]
 8018d78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d7a:	6901      	ldr	r1, [r0, #16]
 8018d7c:	441a      	add	r2, r3
 8018d7e:	88cc      	ldrh	r4, [r1, #6]
 8018d80:	888b      	ldrh	r3, [r1, #4]
 8018d82:	4323      	orrs	r3, r4
 8018d84:	d010      	beq.n	8018da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018d86:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018d8a:	2c00      	cmp	r4, #0
 8018d8c:	db0c      	blt.n	8018da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018d8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018d90:	429c      	cmp	r4, r3
 8018d92:	da09      	bge.n	8018da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018d94:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018d98:	429c      	cmp	r4, r3
 8018d9a:	f104 0401 	add.w	r4, r4, #1
 8018d9e:	bf38      	it	cc
 8018da0:	3108      	addcc	r1, #8
 8018da2:	6084      	str	r4, [r0, #8]
 8018da4:	bf38      	it	cc
 8018da6:	6101      	strcc	r1, [r0, #16]
 8018da8:	6903      	ldr	r3, [r0, #16]
 8018daa:	464f      	mov	r7, r9
 8018dac:	f8a3 a000 	strh.w	sl, [r3]
 8018db0:	805a      	strh	r2, [r3, #2]
 8018db2:	809e      	strh	r6, [r3, #4]
 8018db4:	80de      	strh	r6, [r3, #6]
 8018db6:	9b06      	ldr	r3, [sp, #24]
 8018db8:	4293      	cmp	r3, r2
 8018dba:	d19c      	bne.n	8018cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018dbc:	9b01      	ldr	r3, [sp, #4]
 8018dbe:	6907      	ldr	r7, [r0, #16]
 8018dc0:	f1c3 0620 	rsb	r6, r3, #32
 8018dc4:	9b05      	ldr	r3, [sp, #20]
 8018dc6:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018dca:	9b04      	ldr	r3, [sp, #16]
 8018dcc:	429e      	cmp	r6, r3
 8018dce:	f040 81c7 	bne.w	8019160 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8018dd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018dd6:	459e      	cmp	lr, r3
 8018dd8:	d104      	bne.n	8018de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018dda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018dde:	429a      	cmp	r2, r3
 8018de0:	f43f ae3a 	beq.w	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018de4:	88f9      	ldrh	r1, [r7, #6]
 8018de6:	88bb      	ldrh	r3, [r7, #4]
 8018de8:	430b      	orrs	r3, r1
 8018dea:	d010      	beq.n	8018e0e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018dec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	db0c      	blt.n	8018e0e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018df4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018df6:	428b      	cmp	r3, r1
 8018df8:	da09      	bge.n	8018e0e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018dfa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018dfe:	428b      	cmp	r3, r1
 8018e00:	f103 0301 	add.w	r3, r3, #1
 8018e04:	bf38      	it	cc
 8018e06:	3708      	addcc	r7, #8
 8018e08:	6083      	str	r3, [r0, #8]
 8018e0a:	bf38      	it	cc
 8018e0c:	6107      	strcc	r7, [r0, #16]
 8018e0e:	6903      	ldr	r3, [r0, #16]
 8018e10:	f8a3 e000 	strh.w	lr, [r3]
 8018e14:	e603      	b.n	8018a1e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018e16:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018e18:	9c03      	ldr	r4, [sp, #12]
 8018e1a:	42a2      	cmp	r2, r4
 8018e1c:	f6ff ae1c 	blt.w	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018e20:	9c06      	ldr	r4, [sp, #24]
 8018e22:	42a2      	cmp	r2, r4
 8018e24:	9c08      	ldr	r4, [sp, #32]
 8018e26:	bfbc      	itt	lt
 8018e28:	3201      	addlt	r2, #1
 8018e2a:	9206      	strlt	r2, [sp, #24]
 8018e2c:	f1c3 0220 	rsb	r2, r3, #32
 8018e30:	4362      	muls	r2, r4
 8018e32:	2401      	movs	r4, #1
 8018e34:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018e36:	2420      	movs	r4, #32
 8018e38:	e6d6      	b.n	8018be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8018e3a:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018e3e:	f009 021f 	and.w	r2, r9, #31
 8018e42:	f001 011f 	and.w	r1, r1, #31
 8018e46:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018e4a:	920c      	str	r2, [sp, #48]	@ 0x30
 8018e4c:	45b0      	cmp	r8, r6
 8018e4e:	9a01      	ldr	r2, [sp, #4]
 8018e50:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018e54:	eba2 0203 	sub.w	r2, r2, r3
 8018e58:	d108      	bne.n	8018e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8018e5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e5c:	4496      	add	lr, r2
 8018e5e:	4419      	add	r1, r3
 8018e60:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018e64:	fb02 a101 	mla	r1, r2, r1, sl
 8018e68:	80e9      	strh	r1, [r5, #6]
 8018e6a:	e6fa      	b.n	8018c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018e6c:	2c00      	cmp	r4, #0
 8018e6e:	f2c0 80a7 	blt.w	8018fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8018e72:	2701      	movs	r7, #1
 8018e74:	f1c1 0c20 	rsb	ip, r1, #32
 8018e78:	970a      	str	r7, [sp, #40]	@ 0x28
 8018e7a:	2720      	movs	r7, #32
 8018e7c:	fb02 f20c 	mul.w	r2, r2, ip
 8018e80:	9709      	str	r7, [sp, #36]	@ 0x24
 8018e82:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018e84:	fb92 fcf4 	sdiv	ip, r2, r4
 8018e88:	fb04 221c 	mls	r2, r4, ip, r2
 8018e8c:	4439      	add	r1, r7
 8018e8e:	2a00      	cmp	r2, #0
 8018e90:	bfbc      	itt	lt
 8018e92:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018e96:	1912      	addlt	r2, r2, r4
 8018e98:	fb0c a101 	mla	r1, ip, r1, sl
 8018e9c:	44e6      	add	lr, ip
 8018e9e:	80e9      	strh	r1, [r5, #6]
 8018ea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018ea2:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018ea6:	eb08 0501 	add.w	r5, r8, r1
 8018eaa:	6901      	ldr	r1, [r0, #16]
 8018eac:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8018eb0:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018eb4:	ea58 070e 	orrs.w	r7, r8, lr
 8018eb8:	d010      	beq.n	8018edc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018eba:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8018ebe:	f1be 0f00 	cmp.w	lr, #0
 8018ec2:	db0b      	blt.n	8018edc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018ec4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018ec6:	45be      	cmp	lr, r7
 8018ec8:	da08      	bge.n	8018edc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018eca:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018ece:	45be      	cmp	lr, r7
 8018ed0:	bf3c      	itt	cc
 8018ed2:	3108      	addcc	r1, #8
 8018ed4:	6101      	strcc	r1, [r0, #16]
 8018ed6:	f10e 0101 	add.w	r1, lr, #1
 8018eda:	6081      	str	r1, [r0, #8]
 8018edc:	6901      	ldr	r1, [r0, #16]
 8018ede:	f04f 0e00 	mov.w	lr, #0
 8018ee2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018ee6:	42ae      	cmp	r6, r5
 8018ee8:	800d      	strh	r5, [r1, #0]
 8018eea:	4463      	add	r3, ip
 8018eec:	f8a1 8002 	strh.w	r8, [r1, #2]
 8018ef0:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018ef4:	f8a1 e006 	strh.w	lr, [r1, #6]
 8018ef8:	d053      	beq.n	8018fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8018efa:	9901      	ldr	r1, [sp, #4]
 8018efc:	1b12      	subs	r2, r2, r4
 8018efe:	1ac9      	subs	r1, r1, r3
 8018f00:	4461      	add	r1, ip
 8018f02:	0149      	lsls	r1, r1, #5
 8018f04:	fb91 fef4 	sdiv	lr, r1, r4
 8018f08:	fb04 111e 	mls	r1, r4, lr, r1
 8018f0c:	2900      	cmp	r1, #0
 8018f0e:	bfbc      	itt	lt
 8018f10:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018f14:	1909      	addlt	r1, r1, r4
 8018f16:	f10e 0701 	add.w	r7, lr, #1
 8018f1a:	970d      	str	r7, [sp, #52]	@ 0x34
 8018f1c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8018f20:	1852      	adds	r2, r2, r1
 8018f22:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018f24:	bf54      	ite	pl
 8018f26:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8018f2a:	46f4      	movmi	ip, lr
 8018f2c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8018f30:	bf58      	it	pl
 8018f32:	1b12      	subpl	r2, r2, r4
 8018f34:	4463      	add	r3, ip
 8018f36:	443d      	add	r5, r7
 8018f38:	44e3      	add	fp, ip
 8018f3a:	f8aa b004 	strh.w	fp, [sl, #4]
 8018f3e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8018f42:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8018f46:	f8aa b006 	strh.w	fp, [sl, #6]
 8018f4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018f4e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018f52:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8018f56:	ea5b 070a 	orrs.w	r7, fp, sl
 8018f5a:	d014      	beq.n	8018f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018f5c:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8018f60:	f1ba 0f00 	cmp.w	sl, #0
 8018f64:	db0f      	blt.n	8018f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018f66:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018f68:	45ba      	cmp	sl, r7
 8018f6a:	da0c      	bge.n	8018f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018f6c:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8018f70:	45ba      	cmp	sl, r7
 8018f72:	f10a 0a01 	add.w	sl, sl, #1
 8018f76:	bf38      	it	cc
 8018f78:	f10c 0c08 	addcc.w	ip, ip, #8
 8018f7c:	f8c0 a008 	str.w	sl, [r0, #8]
 8018f80:	bf38      	it	cc
 8018f82:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8018f86:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018f8a:	f04f 0700 	mov.w	r7, #0
 8018f8e:	42ae      	cmp	r6, r5
 8018f90:	f8ac 5000 	strh.w	r5, [ip]
 8018f94:	f8ac 8002 	strh.w	r8, [ip, #2]
 8018f98:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018f9c:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018fa0:	d1bc      	bne.n	8018f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8018fa2:	6904      	ldr	r4, [r0, #16]
 8018fa4:	9a01      	ldr	r2, [sp, #4]
 8018fa6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018fa8:	1ad3      	subs	r3, r2, r3
 8018faa:	88a2      	ldrh	r2, [r4, #4]
 8018fac:	3120      	adds	r1, #32
 8018fae:	441a      	add	r2, r3
 8018fb0:	80a2      	strh	r2, [r4, #4]
 8018fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018fb4:	1a89      	subs	r1, r1, r2
 8018fb6:	88e2      	ldrh	r2, [r4, #6]
 8018fb8:	fb03 2301 	mla	r3, r3, r1, r2
 8018fbc:	80e3      	strh	r3, [r4, #6]
 8018fbe:	e650      	b.n	8018c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8018fc4:	434a      	muls	r2, r1
 8018fc6:	4264      	negs	r4, r4
 8018fc8:	970a      	str	r7, [sp, #40]	@ 0x28
 8018fca:	2700      	movs	r7, #0
 8018fcc:	e758      	b.n	8018e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8018fce:	ea4f 1867 	mov.w	r8, r7, asr #5
 8018fd2:	f009 031f 	and.w	r3, r9, #31
 8018fd6:	f007 071f 	and.w	r7, r7, #31
 8018fda:	fa1f fc8c 	uxth.w	ip, ip
 8018fde:	45d0      	cmp	r8, sl
 8018fe0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018fe2:	fa1f fe8e 	uxth.w	lr, lr
 8018fe6:	d10a      	bne.n	8018ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8018fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fea:	449c      	add	ip, r3
 8018fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fee:	441f      	add	r7, r3
 8018ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ff2:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018ff6:	fb03 e707 	mla	r7, r3, r7, lr
 8018ffa:	80ef      	strh	r7, [r5, #6]
 8018ffc:	e6bc      	b.n	8018d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018ffe:	2900      	cmp	r1, #0
 8019000:	f2c0 80a6 	blt.w	8019150 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8019004:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019006:	f1c7 0320 	rsb	r3, r7, #32
 801900a:	4363      	muls	r3, r4
 801900c:	2401      	movs	r4, #1
 801900e:	940d      	str	r4, [sp, #52]	@ 0x34
 8019010:	2420      	movs	r4, #32
 8019012:	940c      	str	r4, [sp, #48]	@ 0x30
 8019014:	fb93 f4f1 	sdiv	r4, r3, r1
 8019018:	fb01 3b14 	mls	fp, r1, r4, r3
 801901c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801901e:	f1bb 0f00 	cmp.w	fp, #0
 8019022:	441f      	add	r7, r3
 8019024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019026:	bfbc      	itt	lt
 8019028:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801902c:	448b      	addlt	fp, r1
 801902e:	fb04 e707 	mla	r7, r4, r7, lr
 8019032:	44a4      	add	ip, r4
 8019034:	80ef      	strh	r7, [r5, #6]
 8019036:	f8a5 c004 	strh.w	ip, [r5, #4]
 801903a:	eb08 0503 	add.w	r5, r8, r3
 801903e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019042:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8019046:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801904a:	ea5e 0307 	orrs.w	r3, lr, r7
 801904e:	d011      	beq.n	8019074 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019050:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8019054:	f1be 0f00 	cmp.w	lr, #0
 8019058:	db0c      	blt.n	8019074 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801905a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801905c:	45be      	cmp	lr, r7
 801905e:	da09      	bge.n	8019074 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019060:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019064:	45be      	cmp	lr, r7
 8019066:	bf3c      	itt	cc
 8019068:	f10c 0708 	addcc.w	r7, ip, #8
 801906c:	6107      	strcc	r7, [r0, #16]
 801906e:	f10e 0701 	add.w	r7, lr, #1
 8019072:	6087      	str	r7, [r0, #8]
 8019074:	6907      	ldr	r7, [r0, #16]
 8019076:	b213      	sxth	r3, r2
 8019078:	4555      	cmp	r5, sl
 801907a:	9310      	str	r3, [sp, #64]	@ 0x40
 801907c:	807b      	strh	r3, [r7, #2]
 801907e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019080:	803d      	strh	r5, [r7, #0]
 8019082:	80be      	strh	r6, [r7, #4]
 8019084:	eb04 0c03 	add.w	ip, r4, r3
 8019088:	80fe      	strh	r6, [r7, #6]
 801908a:	d050      	beq.n	801912e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801908c:	9b01      	ldr	r3, [sp, #4]
 801908e:	eba3 070c 	sub.w	r7, r3, ip
 8019092:	ebab 0301 	sub.w	r3, fp, r1
 8019096:	443c      	add	r4, r7
 8019098:	9309      	str	r3, [sp, #36]	@ 0x24
 801909a:	0164      	lsls	r4, r4, #5
 801909c:	fb94 f8f1 	sdiv	r8, r4, r1
 80190a0:	fb01 4418 	mls	r4, r1, r8, r4
 80190a4:	2c00      	cmp	r4, #0
 80190a6:	bfbc      	itt	lt
 80190a8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80190ac:	1864      	addlt	r4, r4, r1
 80190ae:	f108 0701 	add.w	r7, r8, #1
 80190b2:	9711      	str	r7, [sp, #68]	@ 0x44
 80190b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190b6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80190ba:	191b      	adds	r3, r3, r4
 80190bc:	f8be b004 	ldrh.w	fp, [lr, #4]
 80190c0:	bf54      	ite	pl
 80190c2:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80190c4:	4647      	movmi	r7, r8
 80190c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80190c8:	bf58      	it	pl
 80190ca:	1a5b      	subpl	r3, r3, r1
 80190cc:	44bb      	add	fp, r7
 80190ce:	44bc      	add	ip, r7
 80190d0:	bf58      	it	pl
 80190d2:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80190d4:	f8ae b004 	strh.w	fp, [lr, #4]
 80190d8:	f8be b006 	ldrh.w	fp, [lr, #6]
 80190dc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80190e0:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80190e2:	f8ae b006 	strh.w	fp, [lr, #6]
 80190e6:	443d      	add	r5, r7
 80190e8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80190ec:	f8be b006 	ldrh.w	fp, [lr, #6]
 80190f0:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80190f4:	ea5b 0307 	orrs.w	r3, fp, r7
 80190f8:	d011      	beq.n	801911e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80190fa:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80190fe:	f1bb 0f00 	cmp.w	fp, #0
 8019102:	db0c      	blt.n	801911e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019104:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019106:	45bb      	cmp	fp, r7
 8019108:	da09      	bge.n	801911e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801910a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801910e:	45bb      	cmp	fp, r7
 8019110:	bf3c      	itt	cc
 8019112:	f10e 0708 	addcc.w	r7, lr, #8
 8019116:	6107      	strcc	r7, [r0, #16]
 8019118:	f10b 0701 	add.w	r7, fp, #1
 801911c:	6087      	str	r7, [r0, #8]
 801911e:	6907      	ldr	r7, [r0, #16]
 8019120:	4555      	cmp	r5, sl
 8019122:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019124:	803d      	strh	r5, [r7, #0]
 8019126:	807b      	strh	r3, [r7, #2]
 8019128:	80be      	strh	r6, [r7, #4]
 801912a:	80fe      	strh	r6, [r7, #6]
 801912c:	d1c2      	bne.n	80190b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801912e:	9b01      	ldr	r3, [sp, #4]
 8019130:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019132:	eba3 0c0c 	sub.w	ip, r3, ip
 8019136:	6903      	ldr	r3, [r0, #16]
 8019138:	3720      	adds	r7, #32
 801913a:	8899      	ldrh	r1, [r3, #4]
 801913c:	4461      	add	r1, ip
 801913e:	8099      	strh	r1, [r3, #4]
 8019140:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019142:	1a7f      	subs	r7, r7, r1
 8019144:	88d9      	ldrh	r1, [r3, #6]
 8019146:	fb0c 1c07 	mla	ip, ip, r7, r1
 801914a:	f8a3 c006 	strh.w	ip, [r3, #6]
 801914e:	e613      	b.n	8018d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019150:	f04f 34ff 	mov.w	r4, #4294967295
 8019154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019156:	4249      	negs	r1, r1
 8019158:	940d      	str	r4, [sp, #52]	@ 0x34
 801915a:	2400      	movs	r4, #0
 801915c:	437b      	muls	r3, r7
 801915e:	e758      	b.n	8019012 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8019160:	9905      	ldr	r1, [sp, #20]
 8019162:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8019166:	f009 0c1f 	and.w	ip, r9, #31
 801916a:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801916e:	f001 011f 	and.w	r1, r1, #31
 8019172:	45f3      	cmp	fp, lr
 8019174:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8019178:	9102      	str	r1, [sp, #8]
 801917a:	9904      	ldr	r1, [sp, #16]
 801917c:	eba1 0406 	sub.w	r4, r1, r6
 8019180:	d108      	bne.n	8019194 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8019182:	9b02      	ldr	r3, [sp, #8]
 8019184:	44a0      	add	r8, r4
 8019186:	449c      	add	ip, r3
 8019188:	f8a7 8004 	strh.w	r8, [r7, #4]
 801918c:	fb04 a40c 	mla	r4, r4, ip, sl
 8019190:	80fc      	strh	r4, [r7, #6]
 8019192:	e461      	b.n	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019194:	9905      	ldr	r1, [sp, #20]
 8019196:	ebb1 0109 	subs.w	r1, r1, r9
 801919a:	bf51      	iteee	pl
 801919c:	f1cc 0520 	rsbpl	r5, ip, #32
 80191a0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80191a4:	4249      	negmi	r1, r1
 80191a6:	2500      	movmi	r5, #0
 80191a8:	bf5d      	ittte	pl
 80191aa:	436c      	mulpl	r4, r5
 80191ac:	2520      	movpl	r5, #32
 80191ae:	f04f 0901 	movpl.w	r9, #1
 80191b2:	f04f 39ff 	movmi.w	r9, #4294967295
 80191b6:	9501      	str	r5, [sp, #4]
 80191b8:	9b01      	ldr	r3, [sp, #4]
 80191ba:	fb94 f5f1 	sdiv	r5, r4, r1
 80191be:	fb01 4415 	mls	r4, r1, r5, r4
 80191c2:	449c      	add	ip, r3
 80191c4:	eb0b 0309 	add.w	r3, fp, r9
 80191c8:	2c00      	cmp	r4, #0
 80191ca:	bfbc      	itt	lt
 80191cc:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80191d0:	1864      	addlt	r4, r4, r1
 80191d2:	44a8      	add	r8, r5
 80191d4:	fb05 ac0c 	mla	ip, r5, ip, sl
 80191d8:	f8a7 8004 	strh.w	r8, [r7, #4]
 80191dc:	f8a7 c006 	strh.w	ip, [r7, #6]
 80191e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80191e4:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80191e8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80191ec:	ea58 0707 	orrs.w	r7, r8, r7
 80191f0:	d011      	beq.n	8019216 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80191f2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80191f6:	f1b8 0f00 	cmp.w	r8, #0
 80191fa:	db0c      	blt.n	8019216 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80191fc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80191fe:	45b8      	cmp	r8, r7
 8019200:	da09      	bge.n	8019216 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019202:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8019206:	45b8      	cmp	r8, r7
 8019208:	bf3c      	itt	cc
 801920a:	f10c 0708 	addcc.w	r7, ip, #8
 801920e:	6107      	strcc	r7, [r0, #16]
 8019210:	f108 0701 	add.w	r7, r8, #1
 8019214:	6087      	str	r7, [r0, #8]
 8019216:	6907      	ldr	r7, [r0, #16]
 8019218:	f04f 0c00 	mov.w	ip, #0
 801921c:	b212      	sxth	r2, r2
 801921e:	459e      	cmp	lr, r3
 8019220:	803b      	strh	r3, [r7, #0]
 8019222:	442e      	add	r6, r5
 8019224:	807a      	strh	r2, [r7, #2]
 8019226:	f8a7 c004 	strh.w	ip, [r7, #4]
 801922a:	f8a7 c006 	strh.w	ip, [r7, #6]
 801922e:	d04b      	beq.n	80192c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8019230:	9f04      	ldr	r7, [sp, #16]
 8019232:	1a64      	subs	r4, r4, r1
 8019234:	f04f 0a00 	mov.w	sl, #0
 8019238:	1bbf      	subs	r7, r7, r6
 801923a:	443d      	add	r5, r7
 801923c:	016d      	lsls	r5, r5, #5
 801923e:	fb95 f8f1 	sdiv	r8, r5, r1
 8019242:	fb01 5518 	mls	r5, r1, r8, r5
 8019246:	4565      	cmp	r5, ip
 8019248:	bfbc      	itt	lt
 801924a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801924e:	186d      	addlt	r5, r5, r1
 8019250:	f108 0701 	add.w	r7, r8, #1
 8019254:	9703      	str	r7, [sp, #12]
 8019256:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801925a:	1964      	adds	r4, r4, r5
 801925c:	444b      	add	r3, r9
 801925e:	bf54      	ite	pl
 8019260:	9f03      	ldrpl	r7, [sp, #12]
 8019262:	4647      	movmi	r7, r8
 8019264:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019268:	bf58      	it	pl
 801926a:	1a64      	subpl	r4, r4, r1
 801926c:	443e      	add	r6, r7
 801926e:	44bb      	add	fp, r7
 8019270:	f8ac b004 	strh.w	fp, [ip, #4]
 8019274:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019278:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801927c:	f8ac b006 	strh.w	fp, [ip, #6]
 8019280:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019284:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019288:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801928c:	ea5b 0707 	orrs.w	r7, fp, r7
 8019290:	d011      	beq.n	80192b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8019292:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019296:	f1bb 0f00 	cmp.w	fp, #0
 801929a:	db0c      	blt.n	80192b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801929c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801929e:	45bb      	cmp	fp, r7
 80192a0:	da09      	bge.n	80192b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80192a2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80192a6:	45bb      	cmp	fp, r7
 80192a8:	bf3c      	itt	cc
 80192aa:	f10c 0708 	addcc.w	r7, ip, #8
 80192ae:	6107      	strcc	r7, [r0, #16]
 80192b0:	f10b 0701 	add.w	r7, fp, #1
 80192b4:	6087      	str	r7, [r0, #8]
 80192b6:	6907      	ldr	r7, [r0, #16]
 80192b8:	459e      	cmp	lr, r3
 80192ba:	803b      	strh	r3, [r7, #0]
 80192bc:	807a      	strh	r2, [r7, #2]
 80192be:	f8a7 a004 	strh.w	sl, [r7, #4]
 80192c2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80192c6:	d1c6      	bne.n	8019256 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80192c8:	9b04      	ldr	r3, [sp, #16]
 80192ca:	1b9e      	subs	r6, r3, r6
 80192cc:	6903      	ldr	r3, [r0, #16]
 80192ce:	889a      	ldrh	r2, [r3, #4]
 80192d0:	4432      	add	r2, r6
 80192d2:	809a      	strh	r2, [r3, #4]
 80192d4:	9a02      	ldr	r2, [sp, #8]
 80192d6:	f102 0c20 	add.w	ip, r2, #32
 80192da:	9a01      	ldr	r2, [sp, #4]
 80192dc:	ebac 0c02 	sub.w	ip, ip, r2
 80192e0:	88da      	ldrh	r2, [r3, #6]
 80192e2:	fb06 260c 	mla	r6, r6, ip, r2
 80192e6:	80de      	strh	r6, [r3, #6]
 80192e8:	f7ff bbb6 	b.w	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080192ec <_ZN8touchgfx7Outline6lineToEii>:
 80192ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80192ee:	079b      	lsls	r3, r3, #30
 80192f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192f2:	460e      	mov	r6, r1
 80192f4:	4615      	mov	r5, r2
 80192f6:	d511      	bpl.n	801931c <_ZN8touchgfx7Outline6lineToEii+0x30>
 80192f8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80192fc:	ea86 0701 	eor.w	r7, r6, r1
 8019300:	ea85 0302 	eor.w	r3, r5, r2
 8019304:	433b      	orrs	r3, r7
 8019306:	d009      	beq.n	801931c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019308:	4633      	mov	r3, r6
 801930a:	9500      	str	r5, [sp, #0]
 801930c:	f7ff fb4c 	bl	80189a8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8019310:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019312:	f043 0301 	orr.w	r3, r3, #1
 8019316:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801931a:	6243      	str	r3, [r0, #36]	@ 0x24
 801931c:	b003      	add	sp, #12
 801931e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019320 <_ZN8touchgfx7Outline6moveToEii>:
 8019320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019322:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019324:	4615      	mov	r5, r2
 8019326:	4604      	mov	r4, r0
 8019328:	460e      	mov	r6, r1
 801932a:	079a      	lsls	r2, r3, #30
 801932c:	d401      	bmi.n	8019332 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801932e:	f7ff fb07 	bl	8018940 <_ZN8touchgfx7Outline5resetEv>
 8019332:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019334:	07db      	lsls	r3, r3, #31
 8019336:	d504      	bpl.n	8019342 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8019338:	4620      	mov	r0, r4
 801933a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801933e:	f7ff ffd5 	bl	80192ec <_ZN8touchgfx7Outline6lineToEii>
 8019342:	6923      	ldr	r3, [r4, #16]
 8019344:	1170      	asrs	r0, r6, #5
 8019346:	1169      	asrs	r1, r5, #5
 8019348:	f9b3 2000 	ldrsh.w	r2, [r3]
 801934c:	4290      	cmp	r0, r2
 801934e:	d103      	bne.n	8019358 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8019350:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019354:	4291      	cmp	r1, r2
 8019356:	d01a      	beq.n	801938e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8019358:	88df      	ldrh	r7, [r3, #6]
 801935a:	889a      	ldrh	r2, [r3, #4]
 801935c:	433a      	orrs	r2, r7
 801935e:	d010      	beq.n	8019382 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019360:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019364:	2a00      	cmp	r2, #0
 8019366:	db0c      	blt.n	8019382 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019368:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801936a:	42ba      	cmp	r2, r7
 801936c:	da09      	bge.n	8019382 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801936e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8019372:	42ba      	cmp	r2, r7
 8019374:	f102 0201 	add.w	r2, r2, #1
 8019378:	bf38      	it	cc
 801937a:	3308      	addcc	r3, #8
 801937c:	60a2      	str	r2, [r4, #8]
 801937e:	bf38      	it	cc
 8019380:	6123      	strcc	r3, [r4, #16]
 8019382:	6923      	ldr	r3, [r4, #16]
 8019384:	2200      	movs	r2, #0
 8019386:	8018      	strh	r0, [r3, #0]
 8019388:	8059      	strh	r1, [r3, #2]
 801938a:	809a      	strh	r2, [r3, #4]
 801938c:	80da      	strh	r2, [r3, #6]
 801938e:	6166      	str	r6, [r4, #20]
 8019390:	6225      	str	r5, [r4, #32]
 8019392:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019398 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8019398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801939c:	b0d0      	sub	sp, #320	@ 0x140
 801939e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80193a2:	466c      	mov	r4, sp
 80193a4:	4627      	mov	r7, r4
 80193a6:	1a0d      	subs	r5, r1, r0
 80193a8:	f100 0308 	add.w	r3, r0, #8
 80193ac:	2d48      	cmp	r5, #72	@ 0x48
 80193ae:	f340 80d5 	ble.w	801955c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80193b2:	112d      	asrs	r5, r5, #4
 80193b4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80193b8:	f9b0 9000 	ldrsh.w	r9, [r0]
 80193bc:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80193c0:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80193c4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80193c8:	6816      	ldr	r6, [r2, #0]
 80193ca:	6006      	str	r6, [r0, #0]
 80193cc:	6856      	ldr	r6, [r2, #4]
 80193ce:	6046      	str	r6, [r0, #4]
 80193d0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80193d4:	f8a2 8002 	strh.w	r8, [r2, #2]
 80193d8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80193dc:	f8a2 c006 	strh.w	ip, [r2, #6]
 80193e0:	f1a1 0208 	sub.w	r2, r1, #8
 80193e4:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80193e8:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80193ec:	4565      	cmp	r5, ip
 80193ee:	db06      	blt.n	80193fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80193f0:	d119      	bne.n	8019426 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80193f2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80193f6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80193fa:	42ae      	cmp	r6, r5
 80193fc:	dd13      	ble.n	8019426 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80193fe:	460e      	mov	r6, r1
 8019400:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8019404:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8019408:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801940c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019410:	601d      	str	r5, [r3, #0]
 8019412:	6875      	ldr	r5, [r6, #4]
 8019414:	605d      	str	r5, [r3, #4]
 8019416:	f821 9c08 	strh.w	r9, [r1, #-8]
 801941a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801941e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8019422:	f821 ec02 	strh.w	lr, [r1, #-2]
 8019426:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801942a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801942e:	42ae      	cmp	r6, r5
 8019430:	db06      	blt.n	8019440 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8019432:	d116      	bne.n	8019462 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019434:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019438:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801943c:	45ac      	cmp	ip, r5
 801943e:	da10      	bge.n	8019462 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019440:	681d      	ldr	r5, [r3, #0]
 8019442:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019446:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801944a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801944e:	6005      	str	r5, [r0, #0]
 8019450:	685d      	ldr	r5, [r3, #4]
 8019452:	f8a0 8008 	strh.w	r8, [r0, #8]
 8019456:	6045      	str	r5, [r0, #4]
 8019458:	8146      	strh	r6, [r0, #10]
 801945a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801945e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019462:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019466:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801946a:	4565      	cmp	r5, ip
 801946c:	db06      	blt.n	801947c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801946e:	d119      	bne.n	80194a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019470:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8019474:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019478:	42ae      	cmp	r6, r5
 801947a:	da13      	bge.n	80194a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801947c:	460e      	mov	r6, r1
 801947e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019482:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8019486:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801948a:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801948e:	6005      	str	r5, [r0, #0]
 8019490:	6875      	ldr	r5, [r6, #4]
 8019492:	6045      	str	r5, [r0, #4]
 8019494:	f821 9c08 	strh.w	r9, [r1, #-8]
 8019498:	f821 cc06 	strh.w	ip, [r1, #-6]
 801949c:	f821 8c04 	strh.w	r8, [r1, #-4]
 80194a0:	f821 ec02 	strh.w	lr, [r1, #-2]
 80194a4:	3308      	adds	r3, #8
 80194a6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80194aa:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80194ae:	45e6      	cmp	lr, ip
 80194b0:	dbf8      	blt.n	80194a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80194b2:	d105      	bne.n	80194c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80194b4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80194b8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80194bc:	42ae      	cmp	r6, r5
 80194be:	dbf1      	blt.n	80194a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80194c0:	4615      	mov	r5, r2
 80194c2:	3a08      	subs	r2, #8
 80194c4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80194c8:	45b4      	cmp	ip, r6
 80194ca:	dbf9      	blt.n	80194c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80194cc:	d105      	bne.n	80194da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80194ce:	f9b0 8000 	ldrsh.w	r8, [r0]
 80194d2:	f9b2 6000 	ldrsh.w	r6, [r2]
 80194d6:	45b0      	cmp	r8, r6
 80194d8:	dbf2      	blt.n	80194c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80194da:	4293      	cmp	r3, r2
 80194dc:	f1a5 0608 	sub.w	r6, r5, #8
 80194e0:	d816      	bhi.n	8019510 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80194e2:	f8d6 c000 	ldr.w	ip, [r6]
 80194e6:	f9b3 a000 	ldrsh.w	sl, [r3]
 80194ea:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80194ee:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80194f2:	f8c3 c000 	str.w	ip, [r3]
 80194f6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80194fa:	f8c3 c004 	str.w	ip, [r3, #4]
 80194fe:	f825 ac08 	strh.w	sl, [r5, #-8]
 8019502:	f825 ec06 	strh.w	lr, [r5, #-6]
 8019506:	f825 9c04 	strh.w	r9, [r5, #-4]
 801950a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801950e:	e7c9      	b.n	80194a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019510:	f8d6 e000 	ldr.w	lr, [r6]
 8019514:	f9b0 a000 	ldrsh.w	sl, [r0]
 8019518:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801951c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8019520:	f8c0 e000 	str.w	lr, [r0]
 8019524:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8019528:	1a16      	subs	r6, r2, r0
 801952a:	f8c0 e004 	str.w	lr, [r0, #4]
 801952e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8019532:	f825 cc06 	strh.w	ip, [r5, #-6]
 8019536:	f825 9c04 	strh.w	r9, [r5, #-4]
 801953a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801953e:	1acd      	subs	r5, r1, r3
 8019540:	10ed      	asrs	r5, r5, #3
 8019542:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8019546:	bfb5      	itete	lt
 8019548:	e9c4 0200 	strdlt	r0, r2, [r4]
 801954c:	e9c4 3100 	strdge	r3, r1, [r4]
 8019550:	460a      	movlt	r2, r1
 8019552:	4603      	movge	r3, r0
 8019554:	3408      	adds	r4, #8
 8019556:	4618      	mov	r0, r3
 8019558:	4611      	mov	r1, r2
 801955a:	e724      	b.n	80193a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801955c:	4299      	cmp	r1, r3
 801955e:	d927      	bls.n	80195b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8019560:	f1a3 0210 	sub.w	r2, r3, #16
 8019564:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8019568:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801956c:	45ac      	cmp	ip, r5
 801956e:	db06      	blt.n	801957e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8019570:	d11c      	bne.n	80195ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8019572:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8019576:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801957a:	42ae      	cmp	r6, r5
 801957c:	da16      	bge.n	80195ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801957e:	4615      	mov	r5, r2
 8019580:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8019584:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8019588:	3a08      	subs	r2, #8
 801958a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801958e:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8019592:	6196      	str	r6, [r2, #24]
 8019594:	42a8      	cmp	r0, r5
 8019596:	686e      	ldr	r6, [r5, #4]
 8019598:	f8a2 9010 	strh.w	r9, [r2, #16]
 801959c:	61d6      	str	r6, [r2, #28]
 801959e:	f8a2 c012 	strh.w	ip, [r2, #18]
 80195a2:	f8a2 8014 	strh.w	r8, [r2, #20]
 80195a6:	f8a2 e016 	strh.w	lr, [r2, #22]
 80195aa:	d1db      	bne.n	8019564 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80195ac:	3308      	adds	r3, #8
 80195ae:	e7d5      	b.n	801955c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80195b0:	42bc      	cmp	r4, r7
 80195b2:	d903      	bls.n	80195bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80195b4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80195b8:	3c08      	subs	r4, #8
 80195ba:	e6f4      	b.n	80193a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80195bc:	b050      	add	sp, #320	@ 0x140
 80195be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080195c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80195c2:	b510      	push	{r4, lr}
 80195c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80195c6:	4604      	mov	r4, r0
 80195c8:	07da      	lsls	r2, r3, #31
 80195ca:	d507      	bpl.n	80195dc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80195cc:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80195d0:	f7ff fe8c 	bl	80192ec <_ZN8touchgfx7Outline6lineToEii>
 80195d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80195d6:	f023 0301 	bic.w	r3, r3, #1
 80195da:	6243      	str	r3, [r0, #36]	@ 0x24
 80195dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80195de:	079b      	lsls	r3, r3, #30
 80195e0:	d521      	bpl.n	8019626 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80195e2:	6923      	ldr	r3, [r4, #16]
 80195e4:	88d9      	ldrh	r1, [r3, #6]
 80195e6:	889a      	ldrh	r2, [r3, #4]
 80195e8:	430a      	orrs	r2, r1
 80195ea:	d010      	beq.n	801960e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80195ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80195f0:	2a00      	cmp	r2, #0
 80195f2:	db0c      	blt.n	801960e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80195f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80195f6:	428a      	cmp	r2, r1
 80195f8:	da09      	bge.n	801960e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80195fa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80195fe:	4291      	cmp	r1, r2
 8019600:	f102 0201 	add.w	r2, r2, #1
 8019604:	bf88      	it	hi
 8019606:	3308      	addhi	r3, #8
 8019608:	60a2      	str	r2, [r4, #8]
 801960a:	bf88      	it	hi
 801960c:	6123      	strhi	r3, [r4, #16]
 801960e:	68a1      	ldr	r1, [r4, #8]
 8019610:	b129      	cbz	r1, 801961e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019612:	6863      	ldr	r3, [r4, #4]
 8019614:	4299      	cmp	r1, r3
 8019616:	d802      	bhi.n	801961e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019618:	68e0      	ldr	r0, [r4, #12]
 801961a:	f7ff febd 	bl	8019398 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801961e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019620:	f023 0302 	bic.w	r3, r3, #2
 8019624:	6263      	str	r3, [r4, #36]	@ 0x24
 8019626:	68e0      	ldr	r0, [r4, #12]
 8019628:	bd10      	pop	{r4, pc}
	...

0801962c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801962c:	4b02      	ldr	r3, [pc, #8]	@ (8019638 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801962e:	6018      	str	r0, [r3, #0]
 8019630:	4b02      	ldr	r3, [pc, #8]	@ (801963c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8019632:	6019      	str	r1, [r3, #0]
 8019634:	4770      	bx	lr
 8019636:	bf00      	nop
 8019638:	200122cc 	.word	0x200122cc
 801963c:	200122d0 	.word	0x200122d0

08019640 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8019640:	2300      	movs	r3, #0
 8019642:	4a02      	ldr	r2, [pc, #8]	@ (801964c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8019644:	6013      	str	r3, [r2, #0]
 8019646:	4a02      	ldr	r2, [pc, #8]	@ (8019650 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8019648:	6013      	str	r3, [r2, #0]
 801964a:	4770      	bx	lr
 801964c:	200122cc 	.word	0x200122cc
 8019650:	200122d0 	.word	0x200122d0

08019654 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8019654:	4b01      	ldr	r3, [pc, #4]	@ (801965c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8019656:	6818      	ldr	r0, [r3, #0]
 8019658:	4770      	bx	lr
 801965a:	bf00      	nop
 801965c:	200122cc 	.word	0x200122cc

08019660 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019660:	4b01      	ldr	r3, [pc, #4]	@ (8019668 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8019662:	6818      	ldr	r0, [r3, #0]
 8019664:	4770      	bx	lr
 8019666:	bf00      	nop
 8019668:	200122d0 	.word	0x200122d0

0801966c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801966c:	b510      	push	{r4, lr}
 801966e:	6803      	ldr	r3, [r0, #0]
 8019670:	460c      	mov	r4, r1
 8019672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019674:	4798      	blx	r3
 8019676:	1b03      	subs	r3, r0, r4
 8019678:	4258      	negs	r0, r3
 801967a:	4158      	adcs	r0, r3
 801967c:	bd10      	pop	{r4, pc}
	...

08019680 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019680:	4b01      	ldr	r3, [pc, #4]	@ (8019688 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019682:	6019      	str	r1, [r3, #0]
 8019684:	4770      	bx	lr
 8019686:	bf00      	nop
 8019688:	200122d4 	.word	0x200122d4

0801968c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019690:	4696      	mov	lr, r2
 8019692:	b097      	sub	sp, #92	@ 0x5c
 8019694:	4605      	mov	r5, r0
 8019696:	4614      	mov	r4, r2
 8019698:	460e      	mov	r6, r1
 801969a:	461f      	mov	r7, r3
 801969c:	f10d 0c1c 	add.w	ip, sp, #28
 80196a0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80196a4:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80196a8:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80196ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196b4:	f8de 3000 	ldr.w	r3, [lr]
 80196b8:	f104 0e14 	add.w	lr, r4, #20
 80196bc:	f8cc 3000 	str.w	r3, [ip]
 80196c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80196c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196cc:	f8de 3000 	ldr.w	r3, [lr]
 80196d0:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80196d4:	f8cc 3000 	str.w	r3, [ip]
 80196d8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80196dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196e4:	f8de 3000 	ldr.w	r3, [lr]
 80196e8:	4631      	mov	r1, r6
 80196ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80196ec:	4628      	mov	r0, r5
 80196ee:	f8cc 3000 	str.w	r3, [ip]
 80196f2:	682b      	ldr	r3, [r5, #0]
 80196f4:	9201      	str	r2, [sp, #4]
 80196f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80196f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80196fc:	9200      	str	r2, [sp, #0]
 80196fe:	aa07      	add	r2, sp, #28
 8019700:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019704:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8019708:	463b      	mov	r3, r7
 801970a:	47d8      	blx	fp
 801970c:	46a6      	mov	lr, r4
 801970e:	f10d 0c1c 	add.w	ip, sp, #28
 8019712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801971a:	f8de 3000 	ldr.w	r3, [lr]
 801971e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8019722:	343c      	adds	r4, #60	@ 0x3c
 8019724:	f8cc 3000 	str.w	r3, [ip]
 8019728:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801972c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019730:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019734:	f8de 3000 	ldr.w	r3, [lr]
 8019738:	f8cc 3000 	str.w	r3, [ip]
 801973c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019746:	6823      	ldr	r3, [r4, #0]
 8019748:	4631      	mov	r1, r6
 801974a:	4628      	mov	r0, r5
 801974c:	f8cc 3000 	str.w	r3, [ip]
 8019750:	682b      	ldr	r3, [r5, #0]
 8019752:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019756:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019758:	f8cd 8008 	str.w	r8, [sp, #8]
 801975c:	9201      	str	r2, [sp, #4]
 801975e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019760:	9200      	str	r2, [sp, #0]
 8019762:	aa07      	add	r2, sp, #28
 8019764:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8019766:	463b      	mov	r3, r7
 8019768:	47a0      	blx	r4
 801976a:	b017      	add	sp, #92	@ 0x5c
 801976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019770 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019770:	2000      	movs	r0, #0
 8019772:	4770      	bx	lr

08019774 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019778:	b08d      	sub	sp, #52	@ 0x34
 801977a:	4688      	mov	r8, r1
 801977c:	f8d3 c000 	ldr.w	ip, [r3]
 8019780:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8019782:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8019786:	680f      	ldr	r7, [r1, #0]
 8019788:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801978c:	eba7 070c 	sub.w	r7, r7, ip
 8019790:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8019794:	edd3 6a07 	vldr	s13, [r3, #28]
 8019798:	42bc      	cmp	r4, r7
 801979a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801979c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80197a0:	bfa8      	it	ge
 80197a2:	463c      	movge	r4, r7
 80197a4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80197a8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80197ac:	ee07 4a90 	vmov	s15, r4
 80197b0:	eb09 0e0c 	add.w	lr, r9, ip
 80197b4:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80197b8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80197bc:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80197c0:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80197c4:	4571      	cmp	r1, lr
 80197c6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80197ca:	ee65 4a24 	vmul.f32	s9, s10, s9
 80197ce:	ee25 5a27 	vmul.f32	s10, s10, s15
 80197d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80197d6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80197da:	ee32 1a05 	vadd.f32	s2, s4, s10
 80197de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80197e2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80197e6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80197ea:	ee22 2a07 	vmul.f32	s4, s4, s14
 80197ee:	f340 808c 	ble.w	801990a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80197f2:	eba1 060e 	sub.w	r6, r1, lr
 80197f6:	fb96 f5f4 	sdiv	r5, r6, r4
 80197fa:	ee07 5a10 	vmov	s14, r5
 80197fe:	2d00      	cmp	r5, #0
 8019800:	fb04 6615 	mls	r6, r4, r5, r6
 8019804:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019808:	eea7 0a04 	vfma.f32	s0, s14, s8
 801980c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019810:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019814:	dd12      	ble.n	801983c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019816:	ee70 6a44 	vsub.f32	s13, s0, s8
 801981a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801981e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019822:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801982a:	bf14      	ite	ne
 801982c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019830:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019834:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019838:	ee22 2a07 	vmul.f32	s4, s4, s14
 801983c:	fb05 f204 	mul.w	r2, r5, r4
 8019840:	1abf      	subs	r7, r7, r2
 8019842:	4494      	add	ip, r2
 8019844:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019848:	4411      	add	r1, r2
 801984a:	eb09 020c 	add.w	r2, r9, ip
 801984e:	b209      	sxth	r1, r1
 8019850:	443a      	add	r2, r7
 8019852:	428a      	cmp	r2, r1
 8019854:	bfc4      	itt	gt
 8019856:	eba1 0209 	subgt.w	r2, r1, r9
 801985a:	eba2 070c 	subgt.w	r7, r2, ip
 801985e:	2f00      	cmp	r7, #0
 8019860:	dd50      	ble.n	8019904 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019862:	fb97 f1f4 	sdiv	r1, r7, r4
 8019866:	fb04 7211 	mls	r2, r4, r1, r7
 801986a:	b90a      	cbnz	r2, 8019870 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801986c:	3901      	subs	r1, #1
 801986e:	4622      	mov	r2, r4
 8019870:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019874:	6840      	ldr	r0, [r0, #4]
 8019876:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801987a:	44b6      	add	lr, r6
 801987c:	f8d0 a000 	ldr.w	sl, [r0]
 8019880:	2900      	cmp	r1, #0
 8019882:	bfcc      	ite	gt
 8019884:	46a1      	movgt	r9, r4
 8019886:	4691      	movle	r9, r2
 8019888:	900b      	str	r0, [sp, #44]	@ 0x2c
 801988a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801988c:	fb04 e505 	mla	r5, r4, r5, lr
 8019890:	eef0 6a42 	vmov.f32	s13, s4
 8019894:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019898:	9008      	str	r0, [sp, #32]
 801989a:	eeb0 7a61 	vmov.f32	s14, s3
 801989e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80198a0:	695b      	ldr	r3, [r3, #20]
 80198a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198a6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80198aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80198ae:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80198b0:	445b      	add	r3, fp
 80198b2:	9307      	str	r3, [sp, #28]
 80198b4:	ee16 3a90 	vmov	r3, s13
 80198b8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80198bc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80198c0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80198c4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80198c8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80198cc:	ee17 7a90 	vmov	r7, s15
 80198d0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80198d4:	fb97 f7f4 	sdiv	r7, r7, r4
 80198d8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80198dc:	ee17 ca90 	vmov	ip, s15
 80198e0:	fb9c fcf4 	sdiv	ip, ip, r4
 80198e4:	fb0c 3306 	mla	r3, ip, r6, r3
 80198e8:	9302      	str	r3, [sp, #8]
 80198ea:	ee17 3a10 	vmov	r3, s14
 80198ee:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80198f2:	fb07 3706 	mla	r7, r7, r6, r3
 80198f6:	eba9 0306 	sub.w	r3, r9, r6
 80198fa:	e9cd 4700 	strd	r4, r7, [sp]
 80198fe:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019902:	47a0      	blx	r4
 8019904:	b00d      	add	sp, #52	@ 0x34
 8019906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801990a:	2500      	movs	r5, #0
 801990c:	462e      	mov	r6, r5
 801990e:	e799      	b.n	8019844 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019914:	b0db      	sub	sp, #364	@ 0x16c
 8019916:	461d      	mov	r5, r3
 8019918:	4614      	mov	r4, r2
 801991a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801991e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019920:	4629      	mov	r1, r5
 8019922:	930a      	str	r3, [sp, #40]	@ 0x28
 8019924:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019928:	9009      	str	r0, [sp, #36]	@ 0x24
 801992a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801992c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019930:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019934:	9310      	str	r3, [sp, #64]	@ 0x40
 8019936:	6803      	ldr	r3, [r0, #0]
 8019938:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801993a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801993e:	47b8      	blx	r7
 8019940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019942:	6058      	str	r0, [r3, #4]
 8019944:	2800      	cmp	r0, #0
 8019946:	f000 83a1 	beq.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801994a:	682b      	ldr	r3, [r5, #0]
 801994c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019950:	ed94 7a02 	vldr	s14, [r4, #8]
 8019954:	9314      	str	r3, [sp, #80]	@ 0x50
 8019956:	686b      	ldr	r3, [r5, #4]
 8019958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801995c:	9315      	str	r3, [sp, #84]	@ 0x54
 801995e:	4bc1      	ldr	r3, [pc, #772]	@ (8019c64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019960:	7819      	ldrb	r1, [r3, #0]
 8019962:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019966:	2900      	cmp	r1, #0
 8019968:	bf16      	itet	ne
 801996a:	4619      	movne	r1, r3
 801996c:	4611      	moveq	r1, r2
 801996e:	4613      	movne	r3, r2
 8019970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019974:	9116      	str	r1, [sp, #88]	@ 0x58
 8019976:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801997a:	f240 8387 	bls.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801997e:	ed94 7a07 	vldr	s14, [r4, #28]
 8019982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801998a:	f240 837f 	bls.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801998e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8019992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801999a:	f240 8377 	bls.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801999e:	6822      	ldr	r2, [r4, #0]
 80199a0:	4bb1      	ldr	r3, [pc, #708]	@ (8019c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80199a2:	429a      	cmp	r2, r3
 80199a4:	f2c0 8372 	blt.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199a8:	49b0      	ldr	r1, [pc, #704]	@ (8019c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80199aa:	6963      	ldr	r3, [r4, #20]
 80199ac:	428a      	cmp	r2, r1
 80199ae:	f300 836d 	bgt.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199b2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80199b6:	48ae      	ldr	r0, [pc, #696]	@ (8019c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80199b8:	33ff      	adds	r3, #255	@ 0xff
 80199ba:	4283      	cmp	r3, r0
 80199bc:	f200 8366 	bhi.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80199c2:	4dac      	ldr	r5, [pc, #688]	@ (8019c74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80199c4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80199c8:	33ff      	adds	r3, #255	@ 0xff
 80199ca:	42ab      	cmp	r3, r5
 80199cc:	f200 835e 	bhi.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199d0:	6862      	ldr	r2, [r4, #4]
 80199d2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80199d6:	33ff      	adds	r3, #255	@ 0xff
 80199d8:	4283      	cmp	r3, r0
 80199da:	f200 8357 	bhi.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199de:	69a1      	ldr	r1, [r4, #24]
 80199e0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80199e4:	33ff      	adds	r3, #255	@ 0xff
 80199e6:	4283      	cmp	r3, r0
 80199e8:	f200 8350 	bhi.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80199ee:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80199f2:	30ff      	adds	r0, #255	@ 0xff
 80199f4:	42a8      	cmp	r0, r5
 80199f6:	f200 8349 	bhi.w	801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80199fa:	428a      	cmp	r2, r1
 80199fc:	f280 8110 	bge.w	8019c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019a00:	429a      	cmp	r2, r3
 8019a02:	f300 8119 	bgt.w	8019c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019a06:	4299      	cmp	r1, r3
 8019a08:	f280 811d 	bge.w	8019c46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019a0c:	2502      	movs	r5, #2
 8019a0e:	2701      	movs	r7, #1
 8019a10:	46a9      	mov	r9, r5
 8019a12:	46b8      	mov	r8, r7
 8019a14:	f04f 0a00 	mov.w	sl, #0
 8019a18:	4621      	mov	r1, r4
 8019a1a:	a849      	add	r0, sp, #292	@ 0x124
 8019a1c:	f003 fe9c 	bl	801d758 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019a20:	4622      	mov	r2, r4
 8019a22:	4653      	mov	r3, sl
 8019a24:	a949      	add	r1, sp, #292	@ 0x124
 8019a26:	f8cd 9000 	str.w	r9, [sp]
 8019a2a:	a819      	add	r0, sp, #100	@ 0x64
 8019a2c:	f003 ffc4 	bl	801d9b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019a30:	4622      	mov	r2, r4
 8019a32:	4653      	mov	r3, sl
 8019a34:	a949      	add	r1, sp, #292	@ 0x124
 8019a36:	f8cd 8000 	str.w	r8, [sp]
 8019a3a:	a829      	add	r0, sp, #164	@ 0xa4
 8019a3c:	f003 ffbc 	bl	801d9b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019a40:	4643      	mov	r3, r8
 8019a42:	4622      	mov	r2, r4
 8019a44:	a949      	add	r1, sp, #292	@ 0x124
 8019a46:	f8cd 9000 	str.w	r9, [sp]
 8019a4a:	a839      	add	r0, sp, #228	@ 0xe4
 8019a4c:	f003 ffb4 	bl	801d9b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019a50:	42af      	cmp	r7, r5
 8019a52:	af12      	add	r7, sp, #72	@ 0x48
 8019a54:	bfb7      	itett	lt
 8019a56:	2300      	movlt	r3, #0
 8019a58:	2301      	movge	r3, #1
 8019a5a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8019a5c:	ac19      	addlt	r4, sp, #100	@ 0x64
 8019a5e:	bfb1      	iteee	lt
 8019a60:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019a62:	ad19      	addge	r5, sp, #100	@ 0x64
 8019a64:	930e      	strge	r3, [sp, #56]	@ 0x38
 8019a66:	ac29      	addge	r4, sp, #164	@ 0xa4
 8019a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a6e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019a72:	b928      	cbnz	r0, 8019a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019a74:	4b80      	ldr	r3, [pc, #512]	@ (8019c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019a76:	6818      	ldr	r0, [r3, #0]
 8019a78:	6803      	ldr	r3, [r0, #0]
 8019a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a7c:	4798      	blx	r3
 8019a7e:	6038      	str	r0, [r7, #0]
 8019a80:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019a82:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019a86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019a8a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8019a8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8019a8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019a90:	6963      	ldr	r3, [r4, #20]
 8019a92:	440b      	add	r3, r1
 8019a94:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019a98:	4408      	add	r0, r1
 8019a9a:	b200      	sxth	r0, r0
 8019a9c:	4283      	cmp	r3, r0
 8019a9e:	900d      	str	r0, [sp, #52]	@ 0x34
 8019aa0:	f280 80dd 	bge.w	8019c5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019aa4:	428b      	cmp	r3, r1
 8019aa6:	da08      	bge.n	8019aba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019aa8:	2a00      	cmp	r2, #0
 8019aaa:	dd06      	ble.n	8019aba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019aac:	1acb      	subs	r3, r1, r3
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	f2c0 80e4 	blt.w	8019c7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	f300 80e2 	bgt.w	8019c7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019aba:	6967      	ldr	r7, [r4, #20]
 8019abc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ac2:	443b      	add	r3, r7
 8019ac4:	461f      	mov	r7, r3
 8019ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019ac8:	1bdf      	subs	r7, r3, r7
 8019aca:	4297      	cmp	r7, r2
 8019acc:	bfa8      	it	ge
 8019ace:	4617      	movge	r7, r2
 8019ad0:	2f00      	cmp	r7, #0
 8019ad2:	f340 8166 	ble.w	8019da2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019ad6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019ad8:	6829      	ldr	r1, [r5, #0]
 8019ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ade:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019ae2:	4411      	add	r1, r2
 8019ae4:	6820      	ldr	r0, [r4, #0]
 8019ae6:	4299      	cmp	r1, r3
 8019ae8:	dd1a      	ble.n	8019b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019aea:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019aee:	4402      	add	r2, r0
 8019af0:	440b      	add	r3, r1
 8019af2:	b21b      	sxth	r3, r3
 8019af4:	429a      	cmp	r2, r3
 8019af6:	dc13      	bgt.n	8019b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019af8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019afa:	a912      	add	r1, sp, #72	@ 0x48
 8019afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	9206      	str	r2, [sp, #24]
 8019b04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019b06:	9500      	str	r5, [sp, #0]
 8019b08:	9205      	str	r2, [sp, #20]
 8019b0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019b0c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019b10:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019b12:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019b16:	aa49      	add	r2, sp, #292	@ 0x124
 8019b18:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019b1c:	4623      	mov	r3, r4
 8019b1e:	47c8      	blx	r9
 8019b20:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019b24:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019b28:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019b30:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019b34:	68a1      	ldr	r1, [r4, #8]
 8019b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b3a:	ed94 6a08 	vldr	s12, [r4, #32]
 8019b3e:	edd4 6a07 	vldr	s13, [r4, #28]
 8019b42:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019b46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019b4a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019b52:	edc4 6a07 	vstr	s13, [r4, #28]
 8019b56:	441a      	add	r2, r3
 8019b58:	6963      	ldr	r3, [r4, #20]
 8019b5a:	3301      	adds	r3, #1
 8019b5c:	6022      	str	r2, [r4, #0]
 8019b5e:	6163      	str	r3, [r4, #20]
 8019b60:	69a3      	ldr	r3, [r4, #24]
 8019b62:	3b01      	subs	r3, #1
 8019b64:	61a3      	str	r3, [r4, #24]
 8019b66:	6923      	ldr	r3, [r4, #16]
 8019b68:	440b      	add	r3, r1
 8019b6a:	68e1      	ldr	r1, [r4, #12]
 8019b6c:	428b      	cmp	r3, r1
 8019b6e:	6123      	str	r3, [r4, #16]
 8019b70:	db15      	blt.n	8019b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019b72:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019b76:	3201      	adds	r2, #1
 8019b78:	1a5b      	subs	r3, r3, r1
 8019b7a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019b7e:	6022      	str	r2, [r4, #0]
 8019b80:	6123      	str	r3, [r4, #16]
 8019b82:	edc4 6a07 	vstr	s13, [r4, #28]
 8019b86:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019b8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019b8e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019b92:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b9a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019b9e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019ba2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019ba6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019bae:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019bb2:	68a9      	ldr	r1, [r5, #8]
 8019bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019bb8:	ed95 6a08 	vldr	s12, [r5, #32]
 8019bbc:	edd5 6a07 	vldr	s13, [r5, #28]
 8019bc0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019bc4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019bc8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019bcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019bd0:	edc5 6a07 	vstr	s13, [r5, #28]
 8019bd4:	441a      	add	r2, r3
 8019bd6:	696b      	ldr	r3, [r5, #20]
 8019bd8:	3301      	adds	r3, #1
 8019bda:	602a      	str	r2, [r5, #0]
 8019bdc:	616b      	str	r3, [r5, #20]
 8019bde:	69ab      	ldr	r3, [r5, #24]
 8019be0:	3b01      	subs	r3, #1
 8019be2:	61ab      	str	r3, [r5, #24]
 8019be4:	692b      	ldr	r3, [r5, #16]
 8019be6:	440b      	add	r3, r1
 8019be8:	68e9      	ldr	r1, [r5, #12]
 8019bea:	428b      	cmp	r3, r1
 8019bec:	612b      	str	r3, [r5, #16]
 8019bee:	db15      	blt.n	8019c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019bf0:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019bf4:	3201      	adds	r2, #1
 8019bf6:	1a5b      	subs	r3, r3, r1
 8019bf8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019bfc:	602a      	str	r2, [r5, #0]
 8019bfe:	612b      	str	r3, [r5, #16]
 8019c00:	edc5 6a07 	vstr	s13, [r5, #28]
 8019c04:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019c08:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c0c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019c10:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c18:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019c1c:	3f01      	subs	r7, #1
 8019c1e:	e757      	b.n	8019ad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019c20:	4299      	cmp	r1, r3
 8019c22:	dc13      	bgt.n	8019c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019c24:	429a      	cmp	r2, r3
 8019c26:	da14      	bge.n	8019c52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019c28:	2502      	movs	r5, #2
 8019c2a:	2703      	movs	r7, #3
 8019c2c:	f04f 0800 	mov.w	r8, #0
 8019c30:	46a9      	mov	r9, r5
 8019c32:	f04f 0a01 	mov.w	sl, #1
 8019c36:	e6ef      	b.n	8019a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019c38:	2501      	movs	r5, #1
 8019c3a:	2700      	movs	r7, #0
 8019c3c:	46a9      	mov	r9, r5
 8019c3e:	46b8      	mov	r8, r7
 8019c40:	f04f 0a02 	mov.w	sl, #2
 8019c44:	e6e8      	b.n	8019a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019c46:	2501      	movs	r5, #1
 8019c48:	2702      	movs	r7, #2
 8019c4a:	e6e1      	b.n	8019a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019c4c:	2500      	movs	r5, #0
 8019c4e:	2701      	movs	r7, #1
 8019c50:	e7f4      	b.n	8019c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019c52:	2702      	movs	r7, #2
 8019c54:	2503      	movs	r5, #3
 8019c56:	f04f 0900 	mov.w	r9, #0
 8019c5a:	46b8      	mov	r8, r7
 8019c5c:	e7e9      	b.n	8019c32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019c5e:	4613      	mov	r3, r2
 8019c60:	e728      	b.n	8019ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019c62:	bf00      	nop
 8019c64:	200122bc 	.word	0x200122bc
 8019c68:	fffd8f01 	.word	0xfffd8f01
 8019c6c:	00027100 	.word	0x00027100
 8019c70:	0004e1ff 	.word	0x0004e1ff
 8019c74:	0004e1fe 	.word	0x0004e1fe
 8019c78:	200122c4 	.word	0x200122c4
 8019c7c:	4613      	mov	r3, r2
 8019c7e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8019c80:	469e      	mov	lr, r3
 8019c82:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8019c84:	469c      	mov	ip, r3
 8019c86:	9111      	str	r1, [sp, #68]	@ 0x44
 8019c88:	f04f 0900 	mov.w	r9, #0
 8019c8c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8019c90:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8019c94:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8019c98:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8019c9c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8019ca0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019ca4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8019ca8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8019cac:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8019cb0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8019cb4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8019cb8:	f1bc 0f00 	cmp.w	ip, #0
 8019cbc:	d147      	bne.n	8019d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019cbe:	eb03 0c07 	add.w	ip, r3, r7
 8019cc2:	1ad7      	subs	r7, r2, r3
 8019cc4:	f1b9 0f00 	cmp.w	r9, #0
 8019cc8:	d009      	beq.n	8019cde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019cca:	9029      	str	r0, [sp, #164]	@ 0xa4
 8019ccc:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8019cd0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8019cd4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8019cd8:	912d      	str	r1, [sp, #180]	@ 0xb4
 8019cda:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8019cde:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019ce0:	f04f 0800 	mov.w	r8, #0
 8019ce4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019ce8:	9111      	str	r1, [sp, #68]	@ 0x44
 8019cea:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019cee:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019cf2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019cf6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019cfa:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019cfe:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019d02:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019d06:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019d0a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019d0e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019d12:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019d16:	f1be 0f00 	cmp.w	lr, #0
 8019d1a:	d031      	beq.n	8019d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019d1c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019d1e:	4450      	add	r0, sl
 8019d20:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019d24:	4431      	add	r1, r6
 8019d26:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019d2a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019d2e:	4549      	cmp	r1, r9
 8019d30:	db08      	blt.n	8019d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019d32:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019d36:	3001      	adds	r0, #1
 8019d38:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019d3c:	eba1 0109 	sub.w	r1, r1, r9
 8019d40:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019d44:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019d48:	f04f 0801 	mov.w	r8, #1
 8019d4c:	e7e3      	b.n	8019d16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019d4e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019d50:	4450      	add	r0, sl
 8019d52:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019d56:	4431      	add	r1, r6
 8019d58:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019d5c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019d60:	4541      	cmp	r1, r8
 8019d62:	db08      	blt.n	8019d76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019d64:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019d68:	3001      	adds	r0, #1
 8019d6a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019d6e:	eba1 0108 	sub.w	r1, r1, r8
 8019d72:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019d76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019d7a:	f04f 0901 	mov.w	r9, #1
 8019d7e:	e79b      	b.n	8019cb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019d80:	449c      	add	ip, r3
 8019d82:	1aff      	subs	r7, r7, r3
 8019d84:	f1b8 0f00 	cmp.w	r8, #0
 8019d88:	d009      	beq.n	8019d9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019d8a:	9019      	str	r0, [sp, #100]	@ 0x64
 8019d8c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019d90:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019d94:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019d98:	911d      	str	r1, [sp, #116]	@ 0x74
 8019d9a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019d9e:	1ad2      	subs	r2, r2, r3
 8019da0:	e68b      	b.n	8019aba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019da4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	f000 80d1 	beq.w	8019f4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019dac:	ad19      	add	r5, sp, #100	@ 0x64
 8019dae:	ac39      	add	r4, sp, #228	@ 0xe4
 8019db0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019db2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019db6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019dba:	930c      	str	r3, [sp, #48]	@ 0x30
 8019dbc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019dbe:	6963      	ldr	r3, [r4, #20]
 8019dc0:	440b      	add	r3, r1
 8019dc2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019dc6:	4408      	add	r0, r1
 8019dc8:	b200      	sxth	r0, r0
 8019dca:	4283      	cmp	r3, r0
 8019dcc:	900d      	str	r0, [sp, #52]	@ 0x34
 8019dce:	f280 80c1 	bge.w	8019f54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019dd2:	428b      	cmp	r3, r1
 8019dd4:	da08      	bge.n	8019de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019dd6:	2a00      	cmp	r2, #0
 8019dd8:	dd06      	ble.n	8019de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019dda:	1acb      	subs	r3, r1, r3
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	f2c0 80bb 	blt.w	8019f58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	f300 80b9 	bgt.w	8019f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019de8:	6967      	ldr	r7, [r4, #20]
 8019dea:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019dee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019df0:	443b      	add	r3, r7
 8019df2:	461f      	mov	r7, r3
 8019df4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019df6:	1bdf      	subs	r7, r3, r7
 8019df8:	4297      	cmp	r7, r2
 8019dfa:	bfa8      	it	ge
 8019dfc:	4617      	movge	r7, r2
 8019dfe:	2f00      	cmp	r7, #0
 8019e00:	f340 813c 	ble.w	801a07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019e04:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019e06:	6829      	ldr	r1, [r5, #0]
 8019e08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e0c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019e10:	4411      	add	r1, r2
 8019e12:	6820      	ldr	r0, [r4, #0]
 8019e14:	4299      	cmp	r1, r3
 8019e16:	dd1a      	ble.n	8019e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019e18:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019e1c:	4402      	add	r2, r0
 8019e1e:	440b      	add	r3, r1
 8019e20:	b21b      	sxth	r3, r3
 8019e22:	429a      	cmp	r2, r3
 8019e24:	dc13      	bgt.n	8019e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019e26:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019e28:	a912      	add	r1, sp, #72	@ 0x48
 8019e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	9206      	str	r2, [sp, #24]
 8019e32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019e34:	9500      	str	r5, [sp, #0]
 8019e36:	9205      	str	r2, [sp, #20]
 8019e38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019e3a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019e3e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019e40:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019e44:	aa49      	add	r2, sp, #292	@ 0x124
 8019e46:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019e4a:	4623      	mov	r3, r4
 8019e4c:	47c8      	blx	r9
 8019e4e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019e52:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019e56:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e5e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019e62:	68a1      	ldr	r1, [r4, #8]
 8019e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019e68:	ed94 6a08 	vldr	s12, [r4, #32]
 8019e6c:	edd4 6a07 	vldr	s13, [r4, #28]
 8019e70:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019e74:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019e78:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019e7c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019e80:	edc4 6a07 	vstr	s13, [r4, #28]
 8019e84:	441a      	add	r2, r3
 8019e86:	6963      	ldr	r3, [r4, #20]
 8019e88:	3301      	adds	r3, #1
 8019e8a:	6022      	str	r2, [r4, #0]
 8019e8c:	6163      	str	r3, [r4, #20]
 8019e8e:	69a3      	ldr	r3, [r4, #24]
 8019e90:	3b01      	subs	r3, #1
 8019e92:	61a3      	str	r3, [r4, #24]
 8019e94:	6923      	ldr	r3, [r4, #16]
 8019e96:	440b      	add	r3, r1
 8019e98:	68e1      	ldr	r1, [r4, #12]
 8019e9a:	428b      	cmp	r3, r1
 8019e9c:	6123      	str	r3, [r4, #16]
 8019e9e:	db15      	blt.n	8019ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019ea0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019ea4:	3201      	adds	r2, #1
 8019ea6:	1a5b      	subs	r3, r3, r1
 8019ea8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019eac:	6022      	str	r2, [r4, #0]
 8019eae:	6123      	str	r3, [r4, #16]
 8019eb0:	edc4 6a07 	vstr	s13, [r4, #28]
 8019eb4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019eb8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ebc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019ec0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ec8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019ecc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019ed0:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019ed4:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019edc:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019ee0:	68a9      	ldr	r1, [r5, #8]
 8019ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ee6:	ed95 6a08 	vldr	s12, [r5, #32]
 8019eea:	edd5 6a07 	vldr	s13, [r5, #28]
 8019eee:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019ef2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019ef6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019efa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019efe:	edc5 6a07 	vstr	s13, [r5, #28]
 8019f02:	441a      	add	r2, r3
 8019f04:	696b      	ldr	r3, [r5, #20]
 8019f06:	3301      	adds	r3, #1
 8019f08:	602a      	str	r2, [r5, #0]
 8019f0a:	616b      	str	r3, [r5, #20]
 8019f0c:	69ab      	ldr	r3, [r5, #24]
 8019f0e:	3b01      	subs	r3, #1
 8019f10:	61ab      	str	r3, [r5, #24]
 8019f12:	692b      	ldr	r3, [r5, #16]
 8019f14:	440b      	add	r3, r1
 8019f16:	68e9      	ldr	r1, [r5, #12]
 8019f18:	428b      	cmp	r3, r1
 8019f1a:	612b      	str	r3, [r5, #16]
 8019f1c:	db15      	blt.n	8019f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019f1e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019f22:	3201      	adds	r2, #1
 8019f24:	1a5b      	subs	r3, r3, r1
 8019f26:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019f2a:	602a      	str	r2, [r5, #0]
 8019f2c:	612b      	str	r3, [r5, #16]
 8019f2e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019f32:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019f36:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019f3a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019f3e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f46:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019f4a:	3f01      	subs	r7, #1
 8019f4c:	e757      	b.n	8019dfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019f4e:	ad39      	add	r5, sp, #228	@ 0xe4
 8019f50:	ac19      	add	r4, sp, #100	@ 0x64
 8019f52:	e72d      	b.n	8019db0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019f54:	4613      	mov	r3, r2
 8019f56:	e744      	b.n	8019de2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019f58:	4613      	mov	r3, r2
 8019f5a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8019f5c:	469e      	mov	lr, r3
 8019f5e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8019f62:	461f      	mov	r7, r3
 8019f64:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8019f68:	f04f 0900 	mov.w	r9, #0
 8019f6c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8019f70:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8019f74:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8019f78:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8019f7c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8019f80:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8019f82:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8019f86:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8019f8a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8019f8e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8019f92:	960e      	str	r6, [sp, #56]	@ 0x38
 8019f94:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8019f98:	2f00      	cmp	r7, #0
 8019f9a:	d146      	bne.n	801a02a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019f9c:	449c      	add	ip, r3
 8019f9e:	1ad7      	subs	r7, r2, r3
 8019fa0:	f1b9 0f00 	cmp.w	r9, #0
 8019fa4:	d009      	beq.n	8019fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019fa6:	9039      	str	r0, [sp, #228]	@ 0xe4
 8019fa8:	913d      	str	r1, [sp, #244]	@ 0xf4
 8019faa:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8019fae:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8019fb2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8019fb6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8019fba:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019fbc:	f04f 0800 	mov.w	r8, #0
 8019fc0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019fc4:	910e      	str	r1, [sp, #56]	@ 0x38
 8019fc6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019fca:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019fce:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019fd2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019fd6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019fda:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019fde:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019fe2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019fe6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019fea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019fee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019ff2:	f1be 0f00 	cmp.w	lr, #0
 8019ff6:	d030      	beq.n	801a05a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019ff8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019ffa:	4450      	add	r0, sl
 8019ffc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a000:	4431      	add	r1, r6
 801a002:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a006:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a00a:	4549      	cmp	r1, r9
 801a00c:	db08      	blt.n	801a020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a00e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a012:	3001      	adds	r0, #1
 801a014:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a018:	eba1 0109 	sub.w	r1, r1, r9
 801a01c:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a020:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a024:	f04f 0801 	mov.w	r8, #1
 801a028:	e7e3      	b.n	8019ff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a02a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a02c:	4450      	add	r0, sl
 801a02e:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a032:	4431      	add	r1, r6
 801a034:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a038:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a03c:	4541      	cmp	r1, r8
 801a03e:	db08      	blt.n	801a052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a040:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a044:	3001      	adds	r0, #1
 801a046:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a04a:	eba1 0108 	sub.w	r1, r1, r8
 801a04e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a052:	3f01      	subs	r7, #1
 801a054:	f04f 0901 	mov.w	r9, #1
 801a058:	e79e      	b.n	8019f98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a05a:	449c      	add	ip, r3
 801a05c:	1aff      	subs	r7, r7, r3
 801a05e:	f1b8 0f00 	cmp.w	r8, #0
 801a062:	d009      	beq.n	801a078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a064:	9019      	str	r0, [sp, #100]	@ 0x64
 801a066:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a06a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a06e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a072:	911d      	str	r1, [sp, #116]	@ 0x74
 801a074:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a078:	1ad2      	subs	r2, r2, r3
 801a07a:	e6b5      	b.n	8019de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	b923      	cbnz	r3, 801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a082:	4b04      	ldr	r3, [pc, #16]	@ (801a094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a084:	6818      	ldr	r0, [r3, #0]
 801a086:	6803      	ldr	r3, [r0, #0]
 801a088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a08a:	4798      	blx	r3
 801a08c:	b05b      	add	sp, #364	@ 0x16c
 801a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a092:	bf00      	nop
 801a094:	200122c4 	.word	0x200122c4

0801a098 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801a098:	b570      	push	{r4, r5, r6, lr}
 801a09a:	4604      	mov	r4, r0
 801a09c:	2500      	movs	r5, #0
 801a09e:	9805      	ldr	r0, [sp, #20]
 801a0a0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801a0a4:	6061      	str	r1, [r4, #4]
 801a0a6:	8263      	strh	r3, [r4, #18]
 801a0a8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801a0ac:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a0b0:	8025      	strh	r5, [r4, #0]
 801a0b2:	7221      	strb	r1, [r4, #8]
 801a0b4:	7266      	strb	r6, [r4, #9]
 801a0b6:	60e0      	str	r0, [r4, #12]
 801a0b8:	8222      	strh	r2, [r4, #16]
 801a0ba:	82a3      	strh	r3, [r4, #20]
 801a0bc:	82e5      	strh	r5, [r4, #22]
 801a0be:	8325      	strh	r5, [r4, #24]
 801a0c0:	8365      	strh	r5, [r4, #26]
 801a0c2:	83a5      	strh	r5, [r4, #28]
 801a0c4:	83e5      	strh	r5, [r4, #30]
 801a0c6:	8425      	strh	r5, [r4, #32]
 801a0c8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 801a0cc:	b32e      	cbz	r6, 801a11a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a0ce:	6803      	ldr	r3, [r0, #0]
 801a0d0:	695b      	ldr	r3, [r3, #20]
 801a0d2:	4798      	blx	r3
 801a0d4:	4606      	mov	r6, r0
 801a0d6:	b300      	cbz	r0, 801a11a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a0d8:	68e0      	ldr	r0, [r4, #12]
 801a0da:	4631      	mov	r1, r6
 801a0dc:	6803      	ldr	r3, [r0, #0]
 801a0de:	68db      	ldr	r3, [r3, #12]
 801a0e0:	4798      	blx	r3
 801a0e2:	4605      	mov	r5, r0
 801a0e4:	b1c8      	cbz	r0, 801a11a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a0e6:	7b43      	ldrb	r3, [r0, #13]
 801a0e8:	7a82      	ldrb	r2, [r0, #10]
 801a0ea:	005b      	lsls	r3, r3, #1
 801a0ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a0f0:	4313      	orrs	r3, r2
 801a0f2:	8423      	strh	r3, [r4, #32]
 801a0f4:	7a63      	ldrb	r3, [r4, #9]
 801a0f6:	2b06      	cmp	r3, #6
 801a0f8:	d10f      	bne.n	801a11a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a0fa:	68e0      	ldr	r0, [r4, #12]
 801a0fc:	462a      	mov	r2, r5
 801a0fe:	4631      	mov	r1, r6
 801a100:	6803      	ldr	r3, [r0, #0]
 801a102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a104:	4798      	blx	r3
 801a106:	7b6b      	ldrb	r3, [r5, #13]
 801a108:	005b      	lsls	r3, r3, #1
 801a10a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a10e:	7aab      	ldrb	r3, [r5, #10]
 801a110:	4313      	orrs	r3, r2
 801a112:	4418      	add	r0, r3
 801a114:	8c23      	ldrh	r3, [r4, #32]
 801a116:	4418      	add	r0, r3
 801a118:	8420      	strh	r0, [r4, #32]
 801a11a:	4620      	mov	r0, r4
 801a11c:	bd70      	pop	{r4, r5, r6, pc}

0801a11e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a11e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a122:	2400      	movs	r4, #0
 801a124:	b085      	sub	sp, #20
 801a126:	4681      	mov	r9, r0
 801a128:	4688      	mov	r8, r1
 801a12a:	4692      	mov	sl, r2
 801a12c:	469b      	mov	fp, r3
 801a12e:	4627      	mov	r7, r4
 801a130:	4625      	mov	r5, r4
 801a132:	4626      	mov	r6, r4
 801a134:	4554      	cmp	r4, sl
 801a136:	da2a      	bge.n	801a18e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a138:	2300      	movs	r3, #0
 801a13a:	9303      	str	r3, [sp, #12]
 801a13c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a140:	429d      	cmp	r5, r3
 801a142:	d004      	beq.n	801a14e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a144:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a148:	429d      	cmp	r5, r3
 801a14a:	bf18      	it	ne
 801a14c:	462f      	movne	r7, r5
 801a14e:	ab03      	add	r3, sp, #12
 801a150:	4642      	mov	r2, r8
 801a152:	4659      	mov	r1, fp
 801a154:	4648      	mov	r0, r9
 801a156:	f003 f915 	bl	801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a15a:	4605      	mov	r5, r0
 801a15c:	b1b8      	cbz	r0, 801a18e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a15e:	280a      	cmp	r0, #10
 801a160:	d015      	beq.n	801a18e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a162:	9a03      	ldr	r2, [sp, #12]
 801a164:	b18a      	cbz	r2, 801a18a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a166:	7b50      	ldrb	r0, [r2, #13]
 801a168:	4639      	mov	r1, r7
 801a16a:	7a93      	ldrb	r3, [r2, #10]
 801a16c:	0040      	lsls	r0, r0, #1
 801a16e:	8895      	ldrh	r5, [r2, #4]
 801a170:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a174:	4303      	orrs	r3, r0
 801a176:	4640      	mov	r0, r8
 801a178:	9301      	str	r3, [sp, #4]
 801a17a:	f8d8 3000 	ldr.w	r3, [r8]
 801a17e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a180:	4798      	blx	r3
 801a182:	9b01      	ldr	r3, [sp, #4]
 801a184:	4418      	add	r0, r3
 801a186:	4406      	add	r6, r0
 801a188:	b2b6      	uxth	r6, r6
 801a18a:	3401      	adds	r4, #1
 801a18c:	e7d2      	b.n	801a134 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a18e:	4630      	mov	r0, r6
 801a190:	b005      	add	sp, #20
 801a192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a196 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a196:	2a02      	cmp	r2, #2
 801a198:	b530      	push	{r4, r5, lr}
 801a19a:	d011      	beq.n	801a1c0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a19c:	2a03      	cmp	r2, #3
 801a19e:	d01c      	beq.n	801a1da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a1a0:	2a01      	cmp	r2, #1
 801a1a2:	d10c      	bne.n	801a1be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a1a4:	888b      	ldrh	r3, [r1, #4]
 801a1a6:	8801      	ldrh	r1, [r0, #0]
 801a1a8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a1ac:	1a5b      	subs	r3, r3, r1
 801a1ae:	8844      	ldrh	r4, [r0, #2]
 801a1b0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a1b4:	1a9b      	subs	r3, r3, r2
 801a1b6:	8004      	strh	r4, [r0, #0]
 801a1b8:	8081      	strh	r1, [r0, #4]
 801a1ba:	8043      	strh	r3, [r0, #2]
 801a1bc:	80c2      	strh	r2, [r0, #6]
 801a1be:	bd30      	pop	{r4, r5, pc}
 801a1c0:	88cb      	ldrh	r3, [r1, #6]
 801a1c2:	8842      	ldrh	r2, [r0, #2]
 801a1c4:	1a9b      	subs	r3, r3, r2
 801a1c6:	88c2      	ldrh	r2, [r0, #6]
 801a1c8:	1a9b      	subs	r3, r3, r2
 801a1ca:	888a      	ldrh	r2, [r1, #4]
 801a1cc:	8801      	ldrh	r1, [r0, #0]
 801a1ce:	8043      	strh	r3, [r0, #2]
 801a1d0:	1a52      	subs	r2, r2, r1
 801a1d2:	8881      	ldrh	r1, [r0, #4]
 801a1d4:	1a52      	subs	r2, r2, r1
 801a1d6:	8002      	strh	r2, [r0, #0]
 801a1d8:	e7f1      	b.n	801a1be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a1da:	88cb      	ldrh	r3, [r1, #6]
 801a1dc:	8841      	ldrh	r1, [r0, #2]
 801a1de:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a1e2:	1a5b      	subs	r3, r3, r1
 801a1e4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a1e8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a1ec:	1a9b      	subs	r3, r3, r2
 801a1ee:	8045      	strh	r5, [r0, #2]
 801a1f0:	8082      	strh	r2, [r0, #4]
 801a1f2:	8003      	strh	r3, [r0, #0]
 801a1f4:	80c4      	strh	r4, [r0, #6]
 801a1f6:	e7e2      	b.n	801a1be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a1f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1fc:	b09f      	sub	sp, #124	@ 0x7c
 801a1fe:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a200:	9312      	str	r3, [sp, #72]	@ 0x48
 801a202:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a204:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a206:	8812      	ldrh	r2, [r2, #0]
 801a208:	889b      	ldrh	r3, [r3, #4]
 801a20a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801a20c:	4413      	add	r3, r2
 801a20e:	900e      	str	r0, [sp, #56]	@ 0x38
 801a210:	6828      	ldr	r0, [r5, #0]
 801a212:	b21b      	sxth	r3, r3
 801a214:	9117      	str	r1, [sp, #92]	@ 0x5c
 801a216:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801a21a:	9311      	str	r3, [sp, #68]	@ 0x44
 801a21c:	6803      	ldr	r3, [r0, #0]
 801a21e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801a222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a224:	4798      	blx	r3
 801a226:	682b      	ldr	r3, [r5, #0]
 801a228:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a22a:	7b1a      	ldrb	r2, [r3, #12]
 801a22c:	7adb      	ldrb	r3, [r3, #11]
 801a22e:	9215      	str	r2, [sp, #84]	@ 0x54
 801a230:	9316      	str	r3, [sp, #88]	@ 0x58
 801a232:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801a236:	2c00      	cmp	r4, #0
 801a238:	d067      	beq.n	801a30a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a23a:	7c2b      	ldrb	r3, [r5, #16]
 801a23c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801a23e:	2b06      	cmp	r3, #6
 801a240:	bf14      	ite	ne
 801a242:	2301      	movne	r3, #1
 801a244:	2302      	moveq	r3, #2
 801a246:	4413      	add	r3, r2
 801a248:	f04f 0900 	mov.w	r9, #0
 801a24c:	9310      	str	r3, [sp, #64]	@ 0x40
 801a24e:	464c      	mov	r4, r9
 801a250:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801a254:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801a258:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a25a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a25c:	4293      	cmp	r3, r2
 801a25e:	f280 808b 	bge.w	801a378 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a262:	2300      	movs	r3, #0
 801a264:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801a268:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 801a26c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a270:	429c      	cmp	r4, r3
 801a272:	d006      	beq.n	801a282 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801a274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a276:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a27a:	4294      	cmp	r4, r2
 801a27c:	bf18      	it	ne
 801a27e:	4623      	movne	r3, r4
 801a280:	930c      	str	r3, [sp, #48]	@ 0x30
 801a282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a284:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801a286:	682a      	ldr	r2, [r5, #0]
 801a288:	428b      	cmp	r3, r1
 801a28a:	db40      	blt.n	801a30e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a28c:	6813      	ldr	r3, [r2, #0]
 801a28e:	4610      	mov	r0, r2
 801a290:	695b      	ldr	r3, [r3, #20]
 801a292:	4798      	blx	r3
 801a294:	4604      	mov	r4, r0
 801a296:	6828      	ldr	r0, [r5, #0]
 801a298:	aa1d      	add	r2, sp, #116	@ 0x74
 801a29a:	4621      	mov	r1, r4
 801a29c:	6803      	ldr	r3, [r0, #0]
 801a29e:	689f      	ldr	r7, [r3, #8]
 801a2a0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a2a4:	47b8      	blx	r7
 801a2a6:	901c      	str	r0, [sp, #112]	@ 0x70
 801a2a8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a2ac:	429c      	cmp	r4, r3
 801a2ae:	f000 80eb 	beq.w	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a2b2:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a2b6:	429c      	cmp	r4, r3
 801a2b8:	f000 80e6 	beq.w	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a2bc:	2c00      	cmp	r4, #0
 801a2be:	f000 810d 	beq.w	801a4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a2c2:	2c0a      	cmp	r4, #10
 801a2c4:	d05e      	beq.n	801a384 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a2c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a2c8:	b36a      	cbz	r2, 801a326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a2ca:	8894      	ldrh	r4, [r2, #4]
 801a2cc:	f1bb 0f00 	cmp.w	fp, #0
 801a2d0:	d03a      	beq.n	801a348 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a2d2:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a2d6:	f1bb 0f01 	cmp.w	fp, #1
 801a2da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a2de:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801a2e2:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a2e6:	ea49 0903 	orr.w	r9, r9, r3
 801a2ea:	d133      	bne.n	801a354 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801a2ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2ee:	eba6 0609 	sub.w	r6, r6, r9
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d14d      	bne.n	801a392 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a2f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a2f8:	eb09 0306 	add.w	r3, r9, r6
 801a2fc:	4413      	add	r3, r2
 801a2fe:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a300:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a304:	4293      	cmp	r3, r2
 801a306:	da4e      	bge.n	801a3a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a308:	e036      	b.n	801a378 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a30a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a30c:	e79c      	b.n	801a248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801a30e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a312:	4659      	mov	r1, fp
 801a314:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a316:	9301      	str	r3, [sp, #4]
 801a318:	ab1d      	add	r3, sp, #116	@ 0x74
 801a31a:	9300      	str	r3, [sp, #0]
 801a31c:	ab1c      	add	r3, sp, #112	@ 0x70
 801a31e:	f003 f87a 	bl	801d416 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a322:	4604      	mov	r4, r0
 801a324:	e7c0      	b.n	801a2a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a326:	6828      	ldr	r0, [r5, #0]
 801a328:	6803      	ldr	r3, [r0, #0]
 801a32a:	691b      	ldr	r3, [r3, #16]
 801a32c:	4798      	blx	r3
 801a32e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a332:	4298      	cmp	r0, r3
 801a334:	f000 80a8 	beq.w	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a338:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a33c:	4298      	cmp	r0, r3
 801a33e:	f000 80a3 	beq.w	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a342:	f1bb 0f00 	cmp.w	fp, #0
 801a346:	d100      	bne.n	801a34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a348:	444e      	add	r6, r9
 801a34a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a34c:	2a00      	cmp	r2, #0
 801a34e:	d1c0      	bne.n	801a2d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a350:	4691      	mov	r9, r2
 801a352:	e099      	b.n	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a356:	2b00      	cmp	r3, #0
 801a358:	f000 80c2 	beq.w	801a4e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 801a35c:	f1bb 0f00 	cmp.w	fp, #0
 801a360:	d117      	bne.n	801a392 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a362:	6828      	ldr	r0, [r5, #0]
 801a364:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a366:	6803      	ldr	r3, [r0, #0]
 801a368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a36a:	4798      	blx	r3
 801a36c:	4406      	add	r6, r0
 801a36e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a370:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a372:	1af3      	subs	r3, r6, r3
 801a374:	4293      	cmp	r3, r2
 801a376:	dd16      	ble.n	801a3a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a378:	2c00      	cmp	r4, #0
 801a37a:	f000 80af 	beq.w	801a4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a37e:	2c0a      	cmp	r4, #10
 801a380:	f040 809d 	bne.w	801a4be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801a384:	240a      	movs	r4, #10
 801a386:	fab4 f084 	clz	r0, r4
 801a38a:	0940      	lsrs	r0, r0, #5
 801a38c:	b01f      	add	sp, #124	@ 0x7c
 801a38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a392:	6828      	ldr	r0, [r5, #0]
 801a394:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a396:	6803      	ldr	r3, [r0, #0]
 801a398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a39a:	4798      	blx	r3
 801a39c:	f1bb 0f01 	cmp.w	fp, #1
 801a3a0:	eba6 0600 	sub.w	r6, r6, r0
 801a3a4:	d0a7      	beq.n	801a2f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a3a6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a3a8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a3aa:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a3ae:	f9b3 8000 	ldrsh.w	r8, [r3]
 801a3b2:	7b43      	ldrb	r3, [r0, #13]
 801a3b4:	4431      	add	r1, r6
 801a3b6:	015b      	lsls	r3, r3, #5
 801a3b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a3bc:	7983      	ldrb	r3, [r0, #6]
 801a3be:	4313      	orrs	r3, r2
 801a3c0:	440b      	add	r3, r1
 801a3c2:	4543      	cmp	r3, r8
 801a3c4:	db60      	blt.n	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a3c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a3c8:	4299      	cmp	r1, r3
 801a3ca:	da5d      	bge.n	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a3cc:	6828      	ldr	r0, [r5, #0]
 801a3ce:	45b0      	cmp	r8, r6
 801a3d0:	6803      	ldr	r3, [r0, #0]
 801a3d2:	bfcc      	ite	gt
 801a3d4:	eba8 0806 	subgt.w	r8, r8, r6
 801a3d8:	f04f 0800 	movle.w	r8, #0
 801a3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a3de:	bfc8      	it	gt
 801a3e0:	fa1f f888 	uxthgt.w	r8, r8
 801a3e4:	4798      	blx	r3
 801a3e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a3e8:	7b53      	ldrb	r3, [r2, #13]
 801a3ea:	00d9      	lsls	r1, r3, #3
 801a3ec:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801a3f0:	7a11      	ldrb	r1, [r2, #8]
 801a3f2:	4339      	orrs	r1, r7
 801a3f4:	065f      	lsls	r7, r3, #25
 801a3f6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801a3f8:	bf48      	it	mi
 801a3fa:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801a3fe:	4407      	add	r7, r0
 801a400:	bf48      	it	mi
 801a402:	b209      	sxthmi	r1, r1
 801a404:	1a7f      	subs	r7, r7, r1
 801a406:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801a408:	b2bf      	uxth	r7, r7
 801a40a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a40e:	fa0f fa87 	sxth.w	sl, r7
 801a412:	4551      	cmp	r1, sl
 801a414:	dd3c      	ble.n	801a490 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a416:	011b      	lsls	r3, r3, #4
 801a418:	79d0      	ldrb	r0, [r2, #7]
 801a41a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a41e:	4303      	orrs	r3, r0
 801a420:	449a      	add	sl, r3
 801a422:	4551      	cmp	r1, sl
 801a424:	dc30      	bgt.n	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a426:	1bcf      	subs	r7, r1, r7
 801a428:	468a      	mov	sl, r1
 801a42a:	b23f      	sxth	r7, r7
 801a42c:	9219      	str	r2, [sp, #100]	@ 0x64
 801a42e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a430:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a432:	6828      	ldr	r0, [r5, #0]
 801a434:	2a00      	cmp	r2, #0
 801a436:	d12d      	bne.n	801a494 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801a438:	9318      	str	r3, [sp, #96]	@ 0x60
 801a43a:	b2bf      	uxth	r7, r7
 801a43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a43e:	6819      	ldr	r1, [r3, #0]
 801a440:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801a442:	6801      	ldr	r1, [r0, #0]
 801a444:	9314      	str	r3, [sp, #80]	@ 0x50
 801a446:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801a448:	4788      	blx	r1
 801a44a:	79a9      	ldrb	r1, [r5, #6]
 801a44c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a44e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a450:	7ba9      	ldrb	r1, [r5, #14]
 801a452:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a454:	910a      	str	r1, [sp, #40]	@ 0x28
 801a456:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801a45a:	9109      	str	r1, [sp, #36]	@ 0x24
 801a45c:	68a9      	ldr	r1, [r5, #8]
 801a45e:	9306      	str	r3, [sp, #24]
 801a460:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a462:	9205      	str	r2, [sp, #20]
 801a464:	9304      	str	r3, [sp, #16]
 801a466:	f8cd a004 	str.w	sl, [sp, #4]
 801a46a:	e9cd 8702 	strd	r8, r7, [sp, #8]
 801a46e:	44b0      	add	r8, r6
 801a470:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801a472:	fa0f f388 	sxth.w	r3, r8
 801a476:	9300      	str	r3, [sp, #0]
 801a478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a47a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a47e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a484:	685b      	ldr	r3, [r3, #4]
 801a486:	47b8      	blx	r7
 801a488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a48a:	3301      	adds	r3, #1
 801a48c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a48e:	e6e3      	b.n	801a258 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801a490:	2700      	movs	r7, #0
 801a492:	e7cb      	b.n	801a42c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801a494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a496:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801a49a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a49c:	f8dc 1000 	ldr.w	r1, [ip]
 801a4a0:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801a4a4:	79aa      	ldrb	r2, [r5, #6]
 801a4a6:	9203      	str	r2, [sp, #12]
 801a4a8:	7baa      	ldrb	r2, [r5, #14]
 801a4aa:	9202      	str	r2, [sp, #8]
 801a4ac:	68aa      	ldr	r2, [r5, #8]
 801a4ae:	e9cd 0200 	strd	r0, r2, [sp]
 801a4b2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a4b4:	4660      	mov	r0, ip
 801a4b6:	688f      	ldr	r7, [r1, #8]
 801a4b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a4ba:	47b8      	blx	r7
 801a4bc:	e7e4      	b.n	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a4be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a4c0:	3501      	adds	r5, #1
 801a4c2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a4c4:	429d      	cmp	r5, r3
 801a4c6:	f6bf af5e 	bge.w	801a386 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a4ca:	4659      	mov	r1, fp
 801a4cc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a4ce:	f7f6 ffb3 	bl	8011438 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a4d2:	4604      	mov	r4, r0
 801a4d4:	b110      	cbz	r0, 801a4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a4d6:	280a      	cmp	r0, #10
 801a4d8:	d1f2      	bne.n	801a4c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801a4da:	e753      	b.n	801a384 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a4dc:	2400      	movs	r4, #0
 801a4de:	e752      	b.n	801a386 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a4e0:	f1bb 0f00 	cmp.w	fp, #0
 801a4e4:	f43f af43 	beq.w	801a36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a4e8:	e75d      	b.n	801a3a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801a4ea <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a4ea:	b530      	push	{r4, r5, lr}
 801a4ec:	8ac4      	ldrh	r4, [r0, #22]
 801a4ee:	8b45      	ldrh	r5, [r0, #26]
 801a4f0:	8343      	strh	r3, [r0, #26]
 801a4f2:	442c      	add	r4, r5
 801a4f4:	1ae4      	subs	r4, r4, r3
 801a4f6:	8b83      	ldrh	r3, [r0, #28]
 801a4f8:	82c4      	strh	r4, [r0, #22]
 801a4fa:	8b04      	ldrh	r4, [r0, #24]
 801a4fc:	4422      	add	r2, r4
 801a4fe:	440c      	add	r4, r1
 801a500:	1a59      	subs	r1, r3, r1
 801a502:	83c2      	strh	r2, [r0, #30]
 801a504:	8304      	strh	r4, [r0, #24]
 801a506:	8381      	strh	r1, [r0, #28]
 801a508:	bd30      	pop	{r4, r5, pc}

0801a50a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801a50a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a50e:	4604      	mov	r4, r0
 801a510:	8a47      	ldrh	r7, [r0, #18]
 801a512:	68c0      	ldr	r0, [r0, #12]
 801a514:	b085      	sub	sp, #20
 801a516:	6803      	ldr	r3, [r0, #0]
 801a518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a51a:	4798      	blx	r3
 801a51c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801a520:	7a63      	ldrb	r3, [r4, #9]
 801a522:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a526:	3b01      	subs	r3, #1
 801a528:	42b7      	cmp	r7, r6
 801a52a:	bfac      	ite	ge
 801a52c:	f04f 0900 	movge.w	r9, #0
 801a530:	f04f 0901 	movlt.w	r9, #1
 801a534:	2b05      	cmp	r3, #5
 801a536:	d804      	bhi.n	801a542 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801a538:	e8df f003 	tbb	[pc, r3]
 801a53c:	470f0854 	.word	0x470f0854
 801a540:	4c4c      	.short	0x4c4c
 801a542:	2500      	movs	r5, #0
 801a544:	46a9      	mov	r9, r5
 801a546:	462e      	mov	r6, r5
 801a548:	462f      	mov	r7, r5
 801a54a:	e00e      	b.n	801a56a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a54c:	42b7      	cmp	r7, r6
 801a54e:	f04f 0500 	mov.w	r5, #0
 801a552:	bfb4      	ite	lt
 801a554:	2600      	movlt	r6, #0
 801a556:	2601      	movge	r6, #1
 801a558:	e7f6      	b.n	801a548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a55a:	42b7      	cmp	r7, r6
 801a55c:	464d      	mov	r5, r9
 801a55e:	f04f 0900 	mov.w	r9, #0
 801a562:	bfb4      	ite	lt
 801a564:	2600      	movlt	r6, #0
 801a566:	2601      	movge	r6, #1
 801a568:	464f      	mov	r7, r9
 801a56a:	f04f 0800 	mov.w	r8, #0
 801a56e:	f8a4 8016 	strh.w	r8, [r4, #22]
 801a572:	f8a4 8018 	strh.w	r8, [r4, #24]
 801a576:	f8cd 8004 	str.w	r8, [sp, #4]
 801a57a:	2300      	movs	r3, #0
 801a57c:	9303      	str	r3, [sp, #12]
 801a57e:	8823      	ldrh	r3, [r4, #0]
 801a580:	2b20      	cmp	r3, #32
 801a582:	d033      	beq.n	801a5ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801a584:	f242 010b 	movw	r1, #8203	@ 0x200b
 801a588:	1a5a      	subs	r2, r3, r1
 801a58a:	f1d2 0a00 	rsbs	sl, r2, #0
 801a58e:	eb4a 0a02 	adc.w	sl, sl, r2
 801a592:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a596:	4293      	cmp	r3, r2
 801a598:	d008      	beq.n	801a5ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a59a:	428b      	cmp	r3, r1
 801a59c:	9a01      	ldr	r2, [sp, #4]
 801a59e:	bf0e      	itee	eq
 801a5a0:	f04f 0a01 	moveq.w	sl, #1
 801a5a4:	461a      	movne	r2, r3
 801a5a6:	f04f 0a00 	movne.w	sl, #0
 801a5aa:	9201      	str	r2, [sp, #4]
 801a5ac:	ab03      	add	r3, sp, #12
 801a5ae:	68e2      	ldr	r2, [r4, #12]
 801a5b0:	7a21      	ldrb	r1, [r4, #8]
 801a5b2:	6860      	ldr	r0, [r4, #4]
 801a5b4:	f002 fee6 	bl	801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a5b8:	8020      	strh	r0, [r4, #0]
 801a5ba:	b9d8      	cbnz	r0, 801a5f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801a5bc:	8ba2      	ldrh	r2, [r4, #28]
 801a5be:	2300      	movs	r3, #0
 801a5c0:	4611      	mov	r1, r2
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f7ff ff91 	bl	801a4ea <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a5c8:	e06e      	b.n	801a6a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a5ca:	2500      	movs	r5, #0
 801a5cc:	2701      	movs	r7, #1
 801a5ce:	46a9      	mov	r9, r5
 801a5d0:	462e      	mov	r6, r5
 801a5d2:	e7ca      	b.n	801a56a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a5d4:	42b7      	cmp	r7, r6
 801a5d6:	f04f 0500 	mov.w	r5, #0
 801a5da:	bfb4      	ite	lt
 801a5dc:	2700      	movlt	r7, #0
 801a5de:	2701      	movge	r7, #1
 801a5e0:	462e      	mov	r6, r5
 801a5e2:	e7c2      	b.n	801a56a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a5e4:	2500      	movs	r5, #0
 801a5e6:	2601      	movs	r6, #1
 801a5e8:	46a9      	mov	r9, r5
 801a5ea:	e7ad      	b.n	801a548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a5ec:	9301      	str	r3, [sp, #4]
 801a5ee:	f04f 0a01 	mov.w	sl, #1
 801a5f2:	e7db      	b.n	801a5ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a5f4:	8b63      	ldrh	r3, [r4, #26]
 801a5f6:	280a      	cmp	r0, #10
 801a5f8:	f103 0301 	add.w	r3, r3, #1
 801a5fc:	8363      	strh	r3, [r4, #26]
 801a5fe:	d0dd      	beq.n	801a5bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801a600:	9a03      	ldr	r2, [sp, #12]
 801a602:	bb62      	cbnz	r2, 801a65e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801a604:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a608:	4298      	cmp	r0, r3
 801a60a:	d003      	beq.n	801a614 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a60c:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a610:	4298      	cmp	r0, r3
 801a612:	d1b2      	bne.n	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a614:	8823      	ldrh	r3, [r4, #0]
 801a616:	8ba1      	ldrh	r1, [r4, #28]
 801a618:	2b20      	cmp	r3, #32
 801a61a:	d003      	beq.n	801a624 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801a61c:	f242 000b 	movw	r0, #8203	@ 0x200b
 801a620:	4283      	cmp	r3, r0
 801a622:	d131      	bne.n	801a688 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801a624:	f1ba 0f00 	cmp.w	sl, #0
 801a628:	bf0a      	itet	eq
 801a62a:	4688      	moveq	r8, r1
 801a62c:	4650      	movne	r0, sl
 801a62e:	2001      	moveq	r0, #1
 801a630:	440a      	add	r2, r1
 801a632:	8b23      	ldrh	r3, [r4, #24]
 801a634:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a638:	b292      	uxth	r2, r2
 801a63a:	83a2      	strh	r2, [r4, #28]
 801a63c:	4413      	add	r3, r2
 801a63e:	f1b9 0f00 	cmp.w	r9, #0
 801a642:	d102      	bne.n	801a64a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801a644:	2d00      	cmp	r5, #0
 801a646:	d042      	beq.n	801a6ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801a648:	b300      	cbz	r0, 801a68c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801a64a:	8c21      	ldrh	r1, [r4, #32]
 801a64c:	4419      	add	r1, r3
 801a64e:	458c      	cmp	ip, r1
 801a650:	da37      	bge.n	801a6c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a652:	8ae1      	ldrh	r1, [r4, #22]
 801a654:	2900      	cmp	r1, #0
 801a656:	d034      	beq.n	801a6c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a658:	4563      	cmp	r3, ip
 801a65a:	dd8e      	ble.n	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a65c:	e01d      	b.n	801a69a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801a65e:	8893      	ldrh	r3, [r2, #4]
 801a660:	9901      	ldr	r1, [sp, #4]
 801a662:	8023      	strh	r3, [r4, #0]
 801a664:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801a668:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801a66c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801a670:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a674:	ea4b 0b00 	orr.w	fp, fp, r0
 801a678:	68e0      	ldr	r0, [r4, #12]
 801a67a:	6803      	ldr	r3, [r0, #0]
 801a67c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a67e:	4798      	blx	r3
 801a680:	eb0b 0200 	add.w	r2, fp, r0
 801a684:	b292      	uxth	r2, r2
 801a686:	e7c5      	b.n	801a614 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a688:	2000      	movs	r0, #0
 801a68a:	e7d1      	b.n	801a630 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801a68c:	4563      	cmp	r3, ip
 801a68e:	f77f af74 	ble.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a692:	8ae3      	ldrh	r3, [r4, #22]
 801a694:	2b00      	cmp	r3, #0
 801a696:	f43f af70 	beq.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a69a:	2301      	movs	r3, #1
 801a69c:	8c22      	ldrh	r2, [r4, #32]
 801a69e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801a6a2:	8be3      	ldrh	r3, [r4, #30]
 801a6a4:	4413      	add	r3, r2
 801a6a6:	83e3      	strh	r3, [r4, #30]
 801a6a8:	68e0      	ldr	r0, [r4, #12]
 801a6aa:	6803      	ldr	r3, [r0, #0]
 801a6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6ae:	4798      	blx	r3
 801a6b0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a6b4:	4418      	add	r0, r3
 801a6b6:	8a63      	ldrh	r3, [r4, #18]
 801a6b8:	1a18      	subs	r0, r3, r0
 801a6ba:	8260      	strh	r0, [r4, #18]
 801a6bc:	b005      	add	sp, #20
 801a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	4611      	mov	r1, r2
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	f7ff ff0f 	bl	801a4ea <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a6cc:	e755      	b.n	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a6ce:	4563      	cmp	r3, ip
 801a6d0:	dd14      	ble.n	801a6fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a6d2:	b117      	cbz	r7, 801a6da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a6d4:	2301      	movs	r3, #1
 801a6d6:	460a      	mov	r2, r1
 801a6d8:	e772      	b.n	801a5c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a6da:	2e00      	cmp	r6, #0
 801a6dc:	f43f af4d 	beq.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a6e0:	2800      	cmp	r0, #0
 801a6e2:	f47f af4a 	bne.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a6e6:	f1ba 0f00 	cmp.w	sl, #0
 801a6ea:	d002      	beq.n	801a6f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	4642      	mov	r2, r8
 801a6f0:	e767      	b.n	801a5c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a6f2:	8ae3      	ldrh	r3, [r4, #22]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	f43f af40 	beq.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a6fa:	e7d5      	b.n	801a6a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	f47f af3c 	bne.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a702:	f1ba 0f00 	cmp.w	sl, #0
 801a706:	f43f af38 	beq.w	801a57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a70a:	2301      	movs	r3, #1
 801a70c:	4642      	mov	r2, r8
 801a70e:	e7da      	b.n	801a6c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a710 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a712:	4605      	mov	r5, r0
 801a714:	b08f      	sub	sp, #60	@ 0x3c
 801a716:	4617      	mov	r7, r2
 801a718:	461c      	mov	r4, r3
 801a71a:	460e      	mov	r6, r1
 801a71c:	b1d1      	cbz	r1, 801a754 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	4620      	mov	r0, r4
 801a722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a724:	4798      	blx	r3
 801a726:	4240      	negs	r0, r0
 801a728:	9603      	str	r6, [sp, #12]
 801a72a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a72e:	b200      	sxth	r0, r0
 801a730:	9700      	str	r7, [sp, #0]
 801a732:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a736:	4629      	mov	r1, r5
 801a738:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a73c:	2401      	movs	r4, #1
 801a73e:	a805      	add	r0, sp, #20
 801a740:	f7ff fcaa 	bl	801a098 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a744:	a805      	add	r0, sp, #20
 801a746:	f7ff fee0 	bl	801a50a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a74a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a74e:	b163      	cbz	r3, 801a76a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a750:	3401      	adds	r4, #1
 801a752:	e7f7      	b.n	801a744 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a754:	2401      	movs	r4, #1
 801a756:	f002 fee1 	bl	801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a75a:	280a      	cmp	r0, #10
 801a75c:	4628      	mov	r0, r5
 801a75e:	bf08      	it	eq
 801a760:	3401      	addeq	r4, #1
 801a762:	f002 fedb 	bl	801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a766:	2800      	cmp	r0, #0
 801a768:	d1f7      	bne.n	801a75a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a76a:	b2a0      	uxth	r0, r4
 801a76c:	b00f      	add	sp, #60	@ 0x3c
 801a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a774:	b0e3      	sub	sp, #396	@ 0x18c
 801a776:	461c      	mov	r4, r3
 801a778:	4683      	mov	fp, r0
 801a77a:	4688      	mov	r8, r1
 801a77c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801a77e:	2b00      	cmp	r3, #0
 801a780:	f000 8112 	beq.w	801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a784:	6823      	ldr	r3, [r4, #0]
 801a786:	2b00      	cmp	r3, #0
 801a788:	f000 810e 	beq.w	801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a78c:	7ba3      	ldrb	r3, [r4, #14]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	f000 810a 	beq.w	801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a794:	ad0a      	add	r5, sp, #40	@ 0x28
 801a796:	6810      	ldr	r0, [r2, #0]
 801a798:	6851      	ldr	r1, [r2, #4]
 801a79a:	462b      	mov	r3, r5
 801a79c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a7a0:	c303      	stmia	r3!, {r0, r1}
 801a7a2:	2100      	movs	r1, #0
 801a7a4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a7a8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a7ac:	4628      	mov	r0, r5
 801a7ae:	910c      	str	r1, [sp, #48]	@ 0x30
 801a7b0:	a90c      	add	r1, sp, #48	@ 0x30
 801a7b2:	79a2      	ldrb	r2, [r4, #6]
 801a7b4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a7b8:	f7ff fced 	bl	801a196 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a7bc:	a90c      	add	r1, sp, #48	@ 0x30
 801a7be:	79a2      	ldrb	r2, [r4, #6]
 801a7c0:	4608      	mov	r0, r1
 801a7c2:	f7ff fce8 	bl	801a196 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a7c6:	a817      	add	r0, sp, #92	@ 0x5c
 801a7c8:	f002 fa4e 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 801a7cc:	6820      	ldr	r0, [r4, #0]
 801a7ce:	6803      	ldr	r3, [r0, #0]
 801a7d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a7d2:	4798      	blx	r3
 801a7d4:	4606      	mov	r6, r0
 801a7d6:	6820      	ldr	r0, [r4, #0]
 801a7d8:	6803      	ldr	r3, [r0, #0]
 801a7da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a7dc:	4798      	blx	r3
 801a7de:	4633      	mov	r3, r6
 801a7e0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a7e2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a7e4:	9000      	str	r0, [sp, #0]
 801a7e6:	a817      	add	r0, sp, #92	@ 0x5c
 801a7e8:	f002 fa99 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a7ec:	6820      	ldr	r0, [r4, #0]
 801a7ee:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a7f2:	6803      	ldr	r3, [r0, #0]
 801a7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a7f6:	4798      	blx	r3
 801a7f8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a7fc:	6823      	ldr	r3, [r4, #0]
 801a7fe:	4607      	mov	r7, r0
 801a800:	4406      	add	r6, r0
 801a802:	a830      	add	r0, sp, #192	@ 0xc0
 801a804:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a808:	f002 fa2e 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 801a80c:	7c23      	ldrb	r3, [r4, #16]
 801a80e:	b17b      	cbz	r3, 801a830 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a810:	6820      	ldr	r0, [r4, #0]
 801a812:	6803      	ldr	r3, [r0, #0]
 801a814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a816:	4798      	blx	r3
 801a818:	9009      	str	r0, [sp, #36]	@ 0x24
 801a81a:	6820      	ldr	r0, [r4, #0]
 801a81c:	6802      	ldr	r2, [r0, #0]
 801a81e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801a820:	4790      	blx	r2
 801a822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a824:	9000      	str	r0, [sp, #0]
 801a826:	a830      	add	r0, sp, #192	@ 0xc0
 801a828:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a82a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a82c:	f002 fa77 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a830:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a834:	a80e      	add	r0, sp, #56	@ 0x38
 801a836:	7be2      	ldrb	r2, [r4, #15]
 801a838:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a83c:	1a8a      	subs	r2, r1, r2
 801a83e:	7c21      	ldrb	r1, [r4, #16]
 801a840:	9103      	str	r1, [sp, #12]
 801a842:	b292      	uxth	r2, r2
 801a844:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a848:	9102      	str	r1, [sp, #8]
 801a84a:	6821      	ldr	r1, [r4, #0]
 801a84c:	9101      	str	r1, [sp, #4]
 801a84e:	7961      	ldrb	r1, [r4, #5]
 801a850:	9100      	str	r1, [sp, #0]
 801a852:	a930      	add	r1, sp, #192	@ 0xc0
 801a854:	f7ff fc20 	bl	801a098 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a858:	2e00      	cmp	r6, #0
 801a85a:	dc5b      	bgt.n	801a914 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a85c:	af17      	add	r7, sp, #92	@ 0x5c
 801a85e:	f04f 0900 	mov.w	r9, #0
 801a862:	7c23      	ldrb	r3, [r4, #16]
 801a864:	2b00      	cmp	r3, #0
 801a866:	f000 80b1 	beq.w	801a9cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a86a:	a80e      	add	r0, sp, #56	@ 0x38
 801a86c:	f7ff fe4d 	bl	801a50a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a870:	f1ba 0f00 	cmp.w	sl, #0
 801a874:	f000 80a5 	beq.w	801a9c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a878:	7c23      	ldrb	r3, [r4, #16]
 801a87a:	2264      	movs	r2, #100	@ 0x64
 801a87c:	4639      	mov	r1, r7
 801a87e:	a849      	add	r0, sp, #292	@ 0x124
 801a880:	9309      	str	r3, [sp, #36]	@ 0x24
 801a882:	f013 fc8a 	bl	802e19a <memcpy>
 801a886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f000 80a7 	beq.w	801a9dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a88e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801a892:	7922      	ldrb	r2, [r4, #4]
 801a894:	2a01      	cmp	r2, #1
 801a896:	f040 808a 	bne.w	801a9ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a89a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801a89e:	1ac0      	subs	r0, r0, r3
 801a8a0:	2302      	movs	r3, #2
 801a8a2:	fb90 f0f3 	sdiv	r0, r0, r3
 801a8a6:	b200      	sxth	r0, r0
 801a8a8:	7c23      	ldrb	r3, [r4, #16]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	f000 808b 	beq.w	801a9c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a8b0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801a8b4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801a8b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a8bc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a8c0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a8c4:	2100      	movs	r1, #0
 801a8c6:	4410      	add	r0, r2
 801a8c8:	4642      	mov	r2, r8
 801a8ca:	b200      	sxth	r0, r0
 801a8cc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a8d0:	9000      	str	r0, [sp, #0]
 801a8d2:	4658      	mov	r0, fp
 801a8d4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a8d8:	f7ff fc8e 	bl	801a1f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a8dc:	2800      	cmp	r0, #0
 801a8de:	d163      	bne.n	801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a8e0:	b2b2      	uxth	r2, r6
 801a8e2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a8e6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a8ea:	4413      	add	r3, r2
 801a8ec:	1a8a      	subs	r2, r1, r2
 801a8ee:	b21b      	sxth	r3, r3
 801a8f0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a8f4:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801a8f8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a8fc:	2a00      	cmp	r2, #0
 801a8fe:	d153      	bne.n	801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a900:	6822      	ldr	r2, [r4, #0]
 801a902:	8869      	ldrh	r1, [r5, #2]
 801a904:	7a12      	ldrb	r2, [r2, #8]
 801a906:	1a9b      	subs	r3, r3, r2
 801a908:	88ea      	ldrh	r2, [r5, #6]
 801a90a:	440a      	add	r2, r1
 801a90c:	b212      	sxth	r2, r2
 801a90e:	4293      	cmp	r3, r2
 801a910:	dda7      	ble.n	801a862 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a912:	e049      	b.n	801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a914:	7c23      	ldrb	r3, [r4, #16]
 801a916:	444f      	add	r7, r9
 801a918:	b1c3      	cbz	r3, 801a94c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801a91a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801a91e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a922:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a926:	443b      	add	r3, r7
 801a928:	4293      	cmp	r3, r2
 801a92a:	da97      	bge.n	801a85c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a92c:	a80e      	add	r0, sp, #56	@ 0x38
 801a92e:	f7ff fdec 	bl	801a50a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a932:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801a936:	3b01      	subs	r3, #1
 801a938:	b29b      	uxth	r3, r3
 801a93a:	454b      	cmp	r3, r9
 801a93c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a93e:	d021      	beq.n	801a984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801a940:	7961      	ldrb	r1, [r4, #5]
 801a942:	a817      	add	r0, sp, #92	@ 0x5c
 801a944:	f7f6 fd78 	bl	8011438 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a94a:	e7f4      	b.n	801a936 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801a94c:	fa1f f986 	uxth.w	r9, r6
 801a950:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a954:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a958:	443b      	add	r3, r7
 801a95a:	4293      	cmp	r3, r2
 801a95c:	f6bf af7e 	bge.w	801a85c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a960:	a817      	add	r0, sp, #92	@ 0x5c
 801a962:	f002 fddb 	bl	801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a966:	b1f8      	cbz	r0, 801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a968:	280a      	cmp	r0, #10
 801a96a:	d1f1      	bne.n	801a950 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a96c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a970:	444b      	add	r3, r9
 801a972:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a976:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a97a:	eba3 0309 	sub.w	r3, r3, r9
 801a97e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a982:	e7e5      	b.n	801a950 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a984:	b2b3      	uxth	r3, r6
 801a986:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a98a:	441a      	add	r2, r3
 801a98c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a990:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a994:	1ad3      	subs	r3, r2, r3
 801a996:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a99a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a99e:	b11b      	cbz	r3, 801a9a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a9a0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d0ba      	beq.n	801a91e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a9a8:	b063      	add	sp, #396	@ 0x18c
 801a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ae:	2a02      	cmp	r2, #2
 801a9b0:	d105      	bne.n	801a9be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a9b2:	7be2      	ldrb	r2, [r4, #15]
 801a9b4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a9b8:	1a80      	subs	r0, r0, r2
 801a9ba:	1ac0      	subs	r0, r0, r3
 801a9bc:	e773      	b.n	801a8a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801a9be:	2000      	movs	r0, #0
 801a9c0:	e772      	b.n	801a8a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a9c2:	7be0      	ldrb	r0, [r4, #15]
 801a9c4:	e770      	b.n	801a8a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a9c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a9ca:	e773      	b.n	801a8b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a9cc:	f1ba 0f00 	cmp.w	sl, #0
 801a9d0:	d0f7      	beq.n	801a9c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a9d2:	2264      	movs	r2, #100	@ 0x64
 801a9d4:	4639      	mov	r1, r7
 801a9d6:	a849      	add	r0, sp, #292	@ 0x124
 801a9d8:	f013 fbdf 	bl	802e19a <memcpy>
 801a9dc:	2300      	movs	r3, #0
 801a9de:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a9e2:	6821      	ldr	r1, [r4, #0]
 801a9e4:	a849      	add	r0, sp, #292	@ 0x124
 801a9e6:	f7ff fb9a 	bl	801a11e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a9ea:	b203      	sxth	r3, r0
 801a9ec:	e751      	b.n	801a892 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801a9ee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a9ee:	2b03      	cmp	r3, #3
 801a9f0:	d818      	bhi.n	801aa24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a9f2:	e8df f003 	tbb	[pc, r3]
 801a9f6:	0602      	.short	0x0602
 801a9f8:	130d      	.short	0x130d
 801a9fa:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a9fe:	1850      	adds	r0, r2, r1
 801aa00:	4770      	bx	lr
 801aa02:	8803      	ldrh	r3, [r0, #0]
 801aa04:	8880      	ldrh	r0, [r0, #4]
 801aa06:	4418      	add	r0, r3
 801aa08:	b200      	sxth	r0, r0
 801aa0a:	1a80      	subs	r0, r0, r2
 801aa0c:	3801      	subs	r0, #1
 801aa0e:	4770      	bx	lr
 801aa10:	8803      	ldrh	r3, [r0, #0]
 801aa12:	8880      	ldrh	r0, [r0, #4]
 801aa14:	4418      	add	r0, r3
 801aa16:	b200      	sxth	r0, r0
 801aa18:	1a40      	subs	r0, r0, r1
 801aa1a:	e7f7      	b.n	801aa0c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801aa1c:	f9b0 0000 	ldrsh.w	r0, [r0]
 801aa20:	4410      	add	r0, r2
 801aa22:	4770      	bx	lr
 801aa24:	2000      	movs	r0, #0
 801aa26:	4770      	bx	lr

0801aa28 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801aa28:	2b03      	cmp	r3, #3
 801aa2a:	d817      	bhi.n	801aa5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801aa2c:	e8df f003 	tbb	[pc, r3]
 801aa30:	10090602 	.word	0x10090602
 801aa34:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801aa38:	1850      	adds	r0, r2, r1
 801aa3a:	4770      	bx	lr
 801aa3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801aa40:	e7fa      	b.n	801aa38 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801aa42:	8843      	ldrh	r3, [r0, #2]
 801aa44:	88c0      	ldrh	r0, [r0, #6]
 801aa46:	4418      	add	r0, r3
 801aa48:	b200      	sxth	r0, r0
 801aa4a:	1a80      	subs	r0, r0, r2
 801aa4c:	3801      	subs	r0, #1
 801aa4e:	4770      	bx	lr
 801aa50:	8843      	ldrh	r3, [r0, #2]
 801aa52:	88c0      	ldrh	r0, [r0, #6]
 801aa54:	4418      	add	r0, r3
 801aa56:	b200      	sxth	r0, r0
 801aa58:	1a40      	subs	r0, r0, r1
 801aa5a:	e7f7      	b.n	801aa4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801aa5c:	2000      	movs	r0, #0
 801aa5e:	4770      	bx	lr

0801aa60 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801aa60:	4b01      	ldr	r3, [pc, #4]	@ (801aa68 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801aa62:	2200      	movs	r2, #0
 801aa64:	601a      	str	r2, [r3, #0]
 801aa66:	4770      	bx	lr
 801aa68:	200122d4 	.word	0x200122d4

0801aa6c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	b1c8      	cbz	r0, 801aaa4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801aa70:	0c02      	lsrs	r2, r0, #16
 801aa72:	0412      	lsls	r2, r2, #16
 801aa74:	b9a2      	cbnz	r2, 801aaa0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801aa76:	0403      	lsls	r3, r0, #16
 801aa78:	2010      	movs	r0, #16
 801aa7a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801aa7e:	bf04      	itt	eq
 801aa80:	021b      	lsleq	r3, r3, #8
 801aa82:	3008      	addeq	r0, #8
 801aa84:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801aa88:	bf04      	itt	eq
 801aa8a:	011b      	lsleq	r3, r3, #4
 801aa8c:	3004      	addeq	r0, #4
 801aa8e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801aa92:	bf04      	itt	eq
 801aa94:	009b      	lsleq	r3, r3, #2
 801aa96:	3002      	addeq	r0, #2
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	db04      	blt.n	801aaa6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801aa9c:	3001      	adds	r0, #1
 801aa9e:	4770      	bx	lr
 801aaa0:	2000      	movs	r0, #0
 801aaa2:	e7ea      	b.n	801aa7a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801aaa4:	2020      	movs	r0, #32
 801aaa6:	4770      	bx	lr

0801aaa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaac:	b087      	sub	sp, #28
 801aaae:	460d      	mov	r5, r1
 801aab0:	4616      	mov	r6, r2
 801aab2:	4698      	mov	r8, r3
 801aab4:	4601      	mov	r1, r0
 801aab6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801aaba:	b120      	cbz	r0, 801aac6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801aabc:	b11a      	cbz	r2, 801aac6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801aabe:	2d1f      	cmp	r5, #31
 801aac0:	d801      	bhi.n	801aac6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801aac2:	2b1f      	cmp	r3, #31
 801aac4:	d904      	bls.n	801aad0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801aac6:	2000      	movs	r0, #0
 801aac8:	6038      	str	r0, [r7, #0]
 801aaca:	b007      	add	sp, #28
 801aacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aad0:	b97d      	cbnz	r5, 801aaf2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801aad2:	b143      	cbz	r3, 801aae6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801aad4:	4602      	mov	r2, r0
 801aad6:	462b      	mov	r3, r5
 801aad8:	4641      	mov	r1, r8
 801aada:	4630      	mov	r0, r6
 801aadc:	e9cd 4700 	strd	r4, r7, [sp]
 801aae0:	f7ff ffe2 	bl	801aaa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aae4:	e7f1      	b.n	801aaca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801aae6:	f04f 33ff 	mov.w	r3, #4294967295
 801aaea:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801aaee:	603b      	str	r3, [r7, #0]
 801aaf0:	e7eb      	b.n	801aaca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801aaf2:	fa32 fa05 	lsrs.w	sl, r2, r5
 801aaf6:	d106      	bne.n	801ab06 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801aaf8:	4346      	muls	r6, r0
 801aafa:	fbb6 f0f4 	udiv	r0, r6, r4
 801aafe:	fb04 6610 	mls	r6, r4, r0, r6
 801ab02:	603e      	str	r6, [r7, #0]
 801ab04:	e7e1      	b.n	801aaca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ab06:	2201      	movs	r2, #1
 801ab08:	fa00 fb05 	lsl.w	fp, r0, r5
 801ab0c:	40aa      	lsls	r2, r5
 801ab0e:	fbbb f9f4 	udiv	r9, fp, r4
 801ab12:	3a01      	subs	r2, #1
 801ab14:	fb0a f309 	mul.w	r3, sl, r9
 801ab18:	fb04 b919 	mls	r9, r4, r9, fp
 801ab1c:	4016      	ands	r6, r2
 801ab1e:	9303      	str	r3, [sp, #12]
 801ab20:	4630      	mov	r0, r6
 801ab22:	f7ff ffa3 	bl	801aa6c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ab26:	462b      	mov	r3, r5
 801ab28:	460a      	mov	r2, r1
 801ab2a:	4601      	mov	r1, r0
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	e9cd 4700 	strd	r4, r7, [sp]
 801ab32:	f7ff ffb9 	bl	801aaa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ab36:	4606      	mov	r6, r0
 801ab38:	4648      	mov	r0, r9
 801ab3a:	eb05 0108 	add.w	r1, r5, r8
 801ab3e:	f7ff ff95 	bl	801aa6c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ab42:	ab05      	add	r3, sp, #20
 801ab44:	464a      	mov	r2, r9
 801ab46:	e9cd 4300 	strd	r4, r3, [sp]
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	4650      	mov	r0, sl
 801ab4e:	f7ff ffab 	bl	801aaa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ab52:	6839      	ldr	r1, [r7, #0]
 801ab54:	9a05      	ldr	r2, [sp, #20]
 801ab56:	9b03      	ldr	r3, [sp, #12]
 801ab58:	4411      	add	r1, r2
 801ab5a:	fbb1 f2f4 	udiv	r2, r1, r4
 801ab5e:	18d3      	adds	r3, r2, r3
 801ab60:	fb04 1412 	mls	r4, r4, r2, r1
 801ab64:	441e      	add	r6, r3
 801ab66:	603c      	str	r4, [r7, #0]
 801ab68:	4430      	add	r0, r6
 801ab6a:	e7ae      	b.n	801aaca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801ab6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ab6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab70:	b085      	sub	sp, #20
 801ab72:	f1b0 0900 	subs.w	r9, r0, #0
 801ab76:	461d      	mov	r5, r3
 801ab78:	4617      	mov	r7, r2
 801ab7a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ab7c:	bfbb      	ittet	lt
 801ab7e:	f1c9 0900 	rsblt	r9, r9, #0
 801ab82:	f04f 36ff 	movlt.w	r6, #4294967295
 801ab86:	2601      	movge	r6, #1
 801ab88:	6823      	ldrlt	r3, [r4, #0]
 801ab8a:	bfbc      	itt	lt
 801ab8c:	425b      	neglt	r3, r3
 801ab8e:	6023      	strlt	r3, [r4, #0]
 801ab90:	2a00      	cmp	r2, #0
 801ab92:	da04      	bge.n	801ab9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ab94:	6823      	ldr	r3, [r4, #0]
 801ab96:	4257      	negs	r7, r2
 801ab98:	4276      	negs	r6, r6
 801ab9a:	425b      	negs	r3, r3
 801ab9c:	6023      	str	r3, [r4, #0]
 801ab9e:	2d00      	cmp	r5, #0
 801aba0:	4638      	mov	r0, r7
 801aba2:	bfba      	itte	lt
 801aba4:	426d      	neglt	r5, r5
 801aba6:	f04f 38ff 	movlt.w	r8, #4294967295
 801abaa:	f04f 0801 	movge.w	r8, #1
 801abae:	f7ff ff5d 	bl	801aa6c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801abb2:	ab03      	add	r3, sp, #12
 801abb4:	463a      	mov	r2, r7
 801abb6:	e9cd 5300 	strd	r5, r3, [sp]
 801abba:	4603      	mov	r3, r0
 801abbc:	4648      	mov	r0, r9
 801abbe:	f7ff ff73 	bl	801aaa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801abc2:	6823      	ldr	r3, [r4, #0]
 801abc4:	9a03      	ldr	r2, [sp, #12]
 801abc6:	4546      	cmp	r6, r8
 801abc8:	441a      	add	r2, r3
 801abca:	fb92 f3f5 	sdiv	r3, r2, r5
 801abce:	4418      	add	r0, r3
 801abd0:	fb05 2313 	mls	r3, r5, r3, r2
 801abd4:	bf18      	it	ne
 801abd6:	4240      	negne	r0, r0
 801abd8:	1c72      	adds	r2, r6, #1
 801abda:	6023      	str	r3, [r4, #0]
 801abdc:	d105      	bne.n	801abea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801abde:	2b00      	cmp	r3, #0
 801abe0:	f1c3 0200 	rsb	r2, r3, #0
 801abe4:	db0b      	blt.n	801abfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801abe6:	6022      	str	r2, [r4, #0]
 801abe8:	e006      	b.n	801abf8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801abea:	2e01      	cmp	r6, #1
 801abec:	d104      	bne.n	801abf8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801abee:	2b00      	cmp	r3, #0
 801abf0:	da02      	bge.n	801abf8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801abf2:	442b      	add	r3, r5
 801abf4:	3801      	subs	r0, #1
 801abf6:	6023      	str	r3, [r4, #0]
 801abf8:	b005      	add	sp, #20
 801abfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abfe:	3801      	subs	r0, #1
 801ac00:	1b52      	subs	r2, r2, r5
 801ac02:	e7f0      	b.n	801abe6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801ac04 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ac04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ac08:	4c1c      	ldr	r4, [pc, #112]	@ (801ac7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ac0a:	4605      	mov	r5, r0
 801ac0c:	6807      	ldr	r7, [r0, #0]
 801ac0e:	69a3      	ldr	r3, [r4, #24]
 801ac10:	b92b      	cbnz	r3, 801ac1e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801ac12:	6840      	ldr	r0, [r0, #4]
 801ac14:	e9c5 7000 	strd	r7, r0, [r5]
 801ac18:	b004      	add	sp, #16
 801ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac1e:	f04f 0802 	mov.w	r8, #2
 801ac22:	68a2      	ldr	r2, [r4, #8]
 801ac24:	ae04      	add	r6, sp, #16
 801ac26:	6820      	ldr	r0, [r4, #0]
 801ac28:	fb93 f1f8 	sdiv	r1, r3, r8
 801ac2c:	440a      	add	r2, r1
 801ac2e:	69e1      	ldr	r1, [r4, #28]
 801ac30:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ac34:	463a      	mov	r2, r7
 801ac36:	9600      	str	r6, [sp, #0]
 801ac38:	f7ff ff98 	bl	801ab6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ac3c:	69a3      	ldr	r3, [r4, #24]
 801ac3e:	4607      	mov	r7, r0
 801ac40:	686a      	ldr	r2, [r5, #4]
 801ac42:	6a21      	ldr	r1, [r4, #32]
 801ac44:	9600      	str	r6, [sp, #0]
 801ac46:	6860      	ldr	r0, [r4, #4]
 801ac48:	f7ff ff90 	bl	801ab6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ac4c:	69a3      	ldr	r3, [r4, #24]
 801ac4e:	6962      	ldr	r2, [r4, #20]
 801ac50:	4407      	add	r7, r0
 801ac52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ac54:	9600      	str	r6, [sp, #0]
 801ac56:	68e0      	ldr	r0, [r4, #12]
 801ac58:	fb93 f8f8 	sdiv	r8, r3, r8
 801ac5c:	4442      	add	r2, r8
 801ac5e:	9203      	str	r2, [sp, #12]
 801ac60:	682a      	ldr	r2, [r5, #0]
 801ac62:	f7ff ff83 	bl	801ab6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ac66:	4680      	mov	r8, r0
 801ac68:	9600      	str	r6, [sp, #0]
 801ac6a:	69a3      	ldr	r3, [r4, #24]
 801ac6c:	686a      	ldr	r2, [r5, #4]
 801ac6e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ac70:	6920      	ldr	r0, [r4, #16]
 801ac72:	f7ff ff7b 	bl	801ab6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ac76:	4440      	add	r0, r8
 801ac78:	e7cc      	b.n	801ac14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801ac7a:	bf00      	nop
 801ac7c:	200122d8 	.word	0x200122d8

0801ac80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ac80:	4b07      	ldr	r3, [pc, #28]	@ (801aca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801ac82:	781b      	ldrb	r3, [r3, #0]
 801ac84:	2b01      	cmp	r3, #1
 801ac86:	d109      	bne.n	801ac9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801ac88:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ac8c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ac90:	8003      	strh	r3, [r0, #0]
 801ac92:	4b04      	ldr	r3, [pc, #16]	@ (801aca4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ac94:	881b      	ldrh	r3, [r3, #0]
 801ac96:	3b01      	subs	r3, #1
 801ac98:	1a9b      	subs	r3, r3, r2
 801ac9a:	800b      	strh	r3, [r1, #0]
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop
 801aca0:	200122bc 	.word	0x200122bc
 801aca4:	200122b8 	.word	0x200122b8

0801aca8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801aca8:	4b07      	ldr	r3, [pc, #28]	@ (801acc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801acaa:	b510      	push	{r4, lr}
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	2b01      	cmp	r3, #1
 801acb0:	d108      	bne.n	801acc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801acb2:	4b06      	ldr	r3, [pc, #24]	@ (801accc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801acb4:	880c      	ldrh	r4, [r1, #0]
 801acb6:	881b      	ldrh	r3, [r3, #0]
 801acb8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801acbc:	3b01      	subs	r3, #1
 801acbe:	1b1b      	subs	r3, r3, r4
 801acc0:	8003      	strh	r3, [r0, #0]
 801acc2:	800a      	strh	r2, [r1, #0]
 801acc4:	bd10      	pop	{r4, pc}
 801acc6:	bf00      	nop
 801acc8:	200122bc 	.word	0x200122bc
 801accc:	200122b8 	.word	0x200122b8

0801acd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801acd0:	4b0a      	ldr	r3, [pc, #40]	@ (801acfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801acd2:	b510      	push	{r4, lr}
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	2b01      	cmp	r3, #1
 801acd8:	d10e      	bne.n	801acf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801acda:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801acde:	8843      	ldrh	r3, [r0, #2]
 801ace0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ace4:	18ca      	adds	r2, r1, r3
 801ace6:	4b06      	ldr	r3, [pc, #24]	@ (801ad00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ace8:	8044      	strh	r4, [r0, #2]
 801acea:	881b      	ldrh	r3, [r3, #0]
 801acec:	1a9b      	subs	r3, r3, r2
 801acee:	8003      	strh	r3, [r0, #0]
 801acf0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801acf4:	8081      	strh	r1, [r0, #4]
 801acf6:	80c3      	strh	r3, [r0, #6]
 801acf8:	bd10      	pop	{r4, pc}
 801acfa:	bf00      	nop
 801acfc:	200122bc 	.word	0x200122bc
 801ad00:	200122b8 	.word	0x200122b8

0801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ad04:	4b08      	ldr	r3, [pc, #32]	@ (801ad28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ad06:	781b      	ldrb	r3, [r3, #0]
 801ad08:	2b01      	cmp	r3, #1
 801ad0a:	d10c      	bne.n	801ad26 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ad0c:	8803      	ldrh	r3, [r0, #0]
 801ad0e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ad12:	8842      	ldrh	r2, [r0, #2]
 801ad14:	8002      	strh	r2, [r0, #0]
 801ad16:	185a      	adds	r2, r3, r1
 801ad18:	4b04      	ldr	r3, [pc, #16]	@ (801ad2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ad1a:	881b      	ldrh	r3, [r3, #0]
 801ad1c:	1a9b      	subs	r3, r3, r2
 801ad1e:	8043      	strh	r3, [r0, #2]
 801ad20:	88c3      	ldrh	r3, [r0, #6]
 801ad22:	80c1      	strh	r1, [r0, #6]
 801ad24:	8083      	strh	r3, [r0, #4]
 801ad26:	4770      	bx	lr
 801ad28:	200122bc 	.word	0x200122bc
 801ad2c:	200122b8 	.word	0x200122b8

0801ad30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ad30:	4b07      	ldr	r3, [pc, #28]	@ (801ad50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ad32:	b510      	push	{r4, lr}
 801ad34:	781b      	ldrb	r3, [r3, #0]
 801ad36:	2b01      	cmp	r3, #1
 801ad38:	d108      	bne.n	801ad4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ad3a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ad3e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ad42:	8003      	strh	r3, [r0, #0]
 801ad44:	8893      	ldrh	r3, [r2, #4]
 801ad46:	3b01      	subs	r3, #1
 801ad48:	1b1b      	subs	r3, r3, r4
 801ad4a:	800b      	strh	r3, [r1, #0]
 801ad4c:	bd10      	pop	{r4, pc}
 801ad4e:	bf00      	nop
 801ad50:	200122bc 	.word	0x200122bc

0801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ad54:	4b0a      	ldr	r3, [pc, #40]	@ (801ad80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ad56:	460a      	mov	r2, r1
 801ad58:	b510      	push	{r4, lr}
 801ad5a:	781b      	ldrb	r3, [r3, #0]
 801ad5c:	2b01      	cmp	r3, #1
 801ad5e:	d10d      	bne.n	801ad7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ad60:	8881      	ldrh	r1, [r0, #4]
 801ad62:	8803      	ldrh	r3, [r0, #0]
 801ad64:	440b      	add	r3, r1
 801ad66:	4601      	mov	r1, r0
 801ad68:	3b01      	subs	r3, #1
 801ad6a:	f821 3b02 	strh.w	r3, [r1], #2
 801ad6e:	f7ff ffdf 	bl	801ad30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ad72:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ad76:	88c2      	ldrh	r2, [r0, #6]
 801ad78:	80c3      	strh	r3, [r0, #6]
 801ad7a:	8082      	strh	r2, [r0, #4]
 801ad7c:	bd10      	pop	{r4, pc}
 801ad7e:	bf00      	nop
 801ad80:	200122bc 	.word	0x200122bc

0801ad84 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ad84:	4b06      	ldr	r3, [pc, #24]	@ (801ada0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ad86:	2100      	movs	r1, #0
 801ad88:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ad8c:	4b05      	ldr	r3, [pc, #20]	@ (801ada4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ad8e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801ad92:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad96:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801ad9a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801ad9e:	4770      	bx	lr
 801ada0:	200122b8 	.word	0x200122b8
 801ada4:	200122ba 	.word	0x200122ba

0801ada8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ada8:	4b03      	ldr	r3, [pc, #12]	@ (801adb8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801adaa:	6818      	ldr	r0, [r3, #0]
 801adac:	b110      	cbz	r0, 801adb4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801adae:	6803      	ldr	r3, [r0, #0]
 801adb0:	699b      	ldr	r3, [r3, #24]
 801adb2:	4718      	bx	r3
 801adb4:	4770      	bx	lr
 801adb6:	bf00      	nop
 801adb8:	20012308 	.word	0x20012308

0801adbc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801adbc:	4770      	bx	lr
	...

0801adc0 <_ZN8touchgfx11Application4drawEv>:
 801adc0:	4b09      	ldr	r3, [pc, #36]	@ (801ade8 <_ZN8touchgfx11Application4drawEv+0x28>)
 801adc2:	b507      	push	{r0, r1, r2, lr}
 801adc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801adc8:	2100      	movs	r1, #0
 801adca:	4b08      	ldr	r3, [pc, #32]	@ (801adec <_ZN8touchgfx11Application4drawEv+0x2c>)
 801adcc:	9100      	str	r1, [sp, #0]
 801adce:	4669      	mov	r1, sp
 801add0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801add4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801add8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801addc:	6803      	ldr	r3, [r0, #0]
 801adde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ade0:	4798      	blx	r3
 801ade2:	b003      	add	sp, #12
 801ade4:	f85d fb04 	ldr.w	pc, [sp], #4
 801ade8:	200122b8 	.word	0x200122b8
 801adec:	200122ba 	.word	0x200122ba

0801adf0 <_ZN8touchgfx11Application10invalidateEv>:
 801adf0:	4b09      	ldr	r3, [pc, #36]	@ (801ae18 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801adf2:	b082      	sub	sp, #8
 801adf4:	2100      	movs	r1, #0
 801adf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801adfa:	4b08      	ldr	r3, [pc, #32]	@ (801ae1c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801adfc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ae00:	aa02      	add	r2, sp, #8
 801ae02:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae06:	9100      	str	r1, [sp, #0]
 801ae08:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ae0c:	6803      	ldr	r3, [r0, #0]
 801ae0e:	e912 0006 	ldmdb	r2, {r1, r2}
 801ae12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ae14:	b002      	add	sp, #8
 801ae16:	4718      	bx	r3
 801ae18:	200122b8 	.word	0x200122b8
 801ae1c:	200122ba 	.word	0x200122ba

0801ae20 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ae20:	4b03      	ldr	r3, [pc, #12]	@ (801ae30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ae22:	6818      	ldr	r0, [r3, #0]
 801ae24:	b110      	cbz	r0, 801ae2c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ae26:	6803      	ldr	r3, [r0, #0]
 801ae28:	69db      	ldr	r3, [r3, #28]
 801ae2a:	4718      	bx	r3
 801ae2c:	4770      	bx	lr
 801ae2e:	bf00      	nop
 801ae30:	20012308 	.word	0x20012308

0801ae34 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ae34:	4b03      	ldr	r3, [pc, #12]	@ (801ae44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ae36:	6818      	ldr	r0, [r3, #0]
 801ae38:	b110      	cbz	r0, 801ae40 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ae3a:	6803      	ldr	r3, [r0, #0]
 801ae3c:	6a1b      	ldr	r3, [r3, #32]
 801ae3e:	4718      	bx	r3
 801ae40:	4770      	bx	lr
 801ae42:	bf00      	nop
 801ae44:	20012308 	.word	0x20012308

0801ae48 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801ae48:	2300      	movs	r3, #0
 801ae4a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801ae4e:	4770      	bx	lr

0801ae50 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ae50:	4b03      	ldr	r3, [pc, #12]	@ (801ae60 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ae52:	6818      	ldr	r0, [r3, #0]
 801ae54:	b110      	cbz	r0, 801ae5c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ae56:	6803      	ldr	r3, [r0, #0]
 801ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae5a:	4718      	bx	r3
 801ae5c:	4770      	bx	lr
 801ae5e:	bf00      	nop
 801ae60:	20012308 	.word	0x20012308

0801ae64 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801ae64:	b510      	push	{r4, lr}
 801ae66:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ae6a:	888a      	ldrh	r2, [r1, #4]
 801ae6c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ae70:	4422      	add	r2, r4
 801ae72:	b212      	sxth	r2, r2
 801ae74:	4293      	cmp	r3, r2
 801ae76:	da15      	bge.n	801aea4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae78:	8882      	ldrh	r2, [r0, #4]
 801ae7a:	4413      	add	r3, r2
 801ae7c:	b21b      	sxth	r3, r3
 801ae7e:	429c      	cmp	r4, r3
 801ae80:	da10      	bge.n	801aea4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae82:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ae86:	88c9      	ldrh	r1, [r1, #6]
 801ae88:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ae8c:	4419      	add	r1, r3
 801ae8e:	b209      	sxth	r1, r1
 801ae90:	428a      	cmp	r2, r1
 801ae92:	da07      	bge.n	801aea4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae94:	88c0      	ldrh	r0, [r0, #6]
 801ae96:	4410      	add	r0, r2
 801ae98:	b200      	sxth	r0, r0
 801ae9a:	4283      	cmp	r3, r0
 801ae9c:	bfac      	ite	ge
 801ae9e:	2000      	movge	r0, #0
 801aea0:	2001      	movlt	r0, #1
 801aea2:	bd10      	pop	{r4, pc}
 801aea4:	2000      	movs	r0, #0
 801aea6:	e7fc      	b.n	801aea2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801aea8 <_ZN8touchgfx4Rect10restrictToEss>:
 801aea8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	b510      	push	{r4, lr}
 801aeb0:	da04      	bge.n	801aebc <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801aeb2:	8884      	ldrh	r4, [r0, #4]
 801aeb4:	4423      	add	r3, r4
 801aeb6:	8083      	strh	r3, [r0, #4]
 801aeb8:	2300      	movs	r3, #0
 801aeba:	8003      	strh	r3, [r0, #0]
 801aebc:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aec0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aec4:	1b09      	subs	r1, r1, r4
 801aec6:	428b      	cmp	r3, r1
 801aec8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801aecc:	bfc8      	it	gt
 801aece:	8081      	strhgt	r1, [r0, #4]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	da04      	bge.n	801aede <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801aed4:	88c1      	ldrh	r1, [r0, #6]
 801aed6:	440b      	add	r3, r1
 801aed8:	80c3      	strh	r3, [r0, #6]
 801aeda:	2300      	movs	r3, #0
 801aedc:	8043      	strh	r3, [r0, #2]
 801aede:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801aee2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801aee6:	1a52      	subs	r2, r2, r1
 801aee8:	4293      	cmp	r3, r2
 801aeea:	bfc8      	it	gt
 801aeec:	80c2      	strhgt	r2, [r0, #6]
 801aeee:	bd10      	pop	{r4, pc}

0801aef0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801aef0:	4b10      	ldr	r3, [pc, #64]	@ (801af34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801aef2:	b510      	push	{r4, lr}
 801aef4:	460c      	mov	r4, r1
 801aef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aefa:	4b0f      	ldr	r3, [pc, #60]	@ (801af38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801aefc:	4620      	mov	r0, r4
 801aefe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801af02:	f7ff ffd1 	bl	801aea8 <_ZN8touchgfx4Rect10restrictToEss>
 801af06:	4b0d      	ldr	r3, [pc, #52]	@ (801af3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801af08:	6818      	ldr	r0, [r3, #0]
 801af0a:	b190      	cbz	r0, 801af32 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801af0c:	6803      	ldr	r3, [r0, #0]
 801af0e:	4621      	mov	r1, r4
 801af10:	689b      	ldr	r3, [r3, #8]
 801af12:	4798      	blx	r3
 801af14:	4b0a      	ldr	r3, [pc, #40]	@ (801af40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801af16:	6818      	ldr	r0, [r3, #0]
 801af18:	b118      	cbz	r0, 801af22 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801af1a:	6803      	ldr	r3, [r0, #0]
 801af1c:	4621      	mov	r1, r4
 801af1e:	689b      	ldr	r3, [r3, #8]
 801af20:	4798      	blx	r3
 801af22:	4b08      	ldr	r3, [pc, #32]	@ (801af44 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801af24:	4621      	mov	r1, r4
 801af26:	6818      	ldr	r0, [r3, #0]
 801af28:	6803      	ldr	r3, [r0, #0]
 801af2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af2e:	69db      	ldr	r3, [r3, #28]
 801af30:	4718      	bx	r3
 801af32:	bd10      	pop	{r4, pc}
 801af34:	200122ba 	.word	0x200122ba
 801af38:	200122b8 	.word	0x200122b8
 801af3c:	20012308 	.word	0x20012308
 801af40:	20012304 	.word	0x20012304
 801af44:	200122c4 	.word	0x200122c4

0801af48 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af4a:	4606      	mov	r6, r0
 801af4c:	4608      	mov	r0, r1
 801af4e:	460f      	mov	r7, r1
 801af50:	f7f9 fe1f 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801af54:	b9e8      	cbnz	r0, 801af92 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af56:	f9b7 5000 	ldrsh.w	r5, [r7]
 801af5a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801af5e:	42a5      	cmp	r5, r4
 801af60:	db17      	blt.n	801af92 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af62:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801af66:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801af6a:	429a      	cmp	r2, r3
 801af6c:	db11      	blt.n	801af92 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af6e:	88b9      	ldrh	r1, [r7, #4]
 801af70:	440d      	add	r5, r1
 801af72:	88b1      	ldrh	r1, [r6, #4]
 801af74:	440c      	add	r4, r1
 801af76:	b22d      	sxth	r5, r5
 801af78:	b224      	sxth	r4, r4
 801af7a:	42a5      	cmp	r5, r4
 801af7c:	dc09      	bgt.n	801af92 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af7e:	88f8      	ldrh	r0, [r7, #6]
 801af80:	4410      	add	r0, r2
 801af82:	88f2      	ldrh	r2, [r6, #6]
 801af84:	4413      	add	r3, r2
 801af86:	b200      	sxth	r0, r0
 801af88:	b21b      	sxth	r3, r3
 801af8a:	4298      	cmp	r0, r3
 801af8c:	bfcc      	ite	gt
 801af8e:	2000      	movgt	r0, #0
 801af90:	2001      	movle	r0, #1
 801af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af94 <_ZN8touchgfx11Application11getInstanceEv>:
 801af94:	4b01      	ldr	r3, [pc, #4]	@ (801af9c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801af96:	6818      	ldr	r0, [r3, #0]
 801af98:	4770      	bx	lr
 801af9a:	bf00      	nop
 801af9c:	20012318 	.word	0x20012318

0801afa0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 801afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afa2:	4b10      	ldr	r3, [pc, #64]	@ (801afe4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801afa4:	4605      	mov	r5, r0
 801afa6:	781b      	ldrb	r3, [r3, #0]
 801afa8:	b1d3      	cbz	r3, 801afe0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801afaa:	4b0f      	ldr	r3, [pc, #60]	@ (801afe8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801afac:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 801afb0:	4f0e      	ldr	r7, [pc, #56]	@ (801afec <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801afb2:	881c      	ldrh	r4, [r3, #0]
 801afb4:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 801afb8:	42a3      	cmp	r3, r4
 801afba:	d90e      	bls.n	801afda <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801afbc:	683b      	ldr	r3, [r7, #0]
 801afbe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801afc2:	b10a      	cbz	r2, 801afc8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801afc4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801afc6:	b900      	cbnz	r0, 801afca <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 801afc8:	6898      	ldr	r0, [r3, #8]
 801afca:	6803      	ldr	r3, [r0, #0]
 801afcc:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 801afd0:	3401      	adds	r4, #1
 801afd2:	69db      	ldr	r3, [r3, #28]
 801afd4:	4798      	blx	r3
 801afd6:	b2a4      	uxth	r4, r4
 801afd8:	e7ec      	b.n	801afb4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801afda:	2300      	movs	r3, #0
 801afdc:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 801afe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afe2:	bf00      	nop
 801afe4:	200122c2 	.word	0x200122c2
 801afe8:	20000018 	.word	0x20000018
 801afec:	200122c4 	.word	0x200122c4

0801aff0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801aff0:	2300      	movs	r3, #0
 801aff2:	b510      	push	{r4, lr}
 801aff4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801aff8:	4604      	mov	r4, r0
 801affa:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801affe:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b002:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801b006:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801b00a:	429a      	cmp	r2, r3
 801b00c:	d90e      	bls.n	801b02c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801b00e:	18e2      	adds	r2, r4, r3
 801b010:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801b014:	b122      	cbz	r2, 801b020 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801b016:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b01a:	6803      	ldr	r3, [r0, #0]
 801b01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b01e:	4798      	blx	r3
 801b020:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801b024:	3301      	adds	r3, #1
 801b026:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b02a:	e7ea      	b.n	801b002 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801b02c:	bd10      	pop	{r4, pc}

0801b02e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801b02e:	b530      	push	{r4, r5, lr}
 801b030:	2200      	movs	r2, #0
 801b032:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801b036:	b293      	uxth	r3, r2
 801b038:	429d      	cmp	r5, r3
 801b03a:	d90e      	bls.n	801b05a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b03c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801b040:	428b      	cmp	r3, r1
 801b042:	d10b      	bne.n	801b05c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b044:	1884      	adds	r4, r0, r2
 801b046:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801b04a:	b13b      	cbz	r3, 801b05c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b04c:	3b01      	subs	r3, #1
 801b04e:	b2db      	uxtb	r3, r3
 801b050:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801b054:	b90b      	cbnz	r3, 801b05a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b056:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b05a:	bd30      	pop	{r4, r5, pc}
 801b05c:	3201      	adds	r2, #1
 801b05e:	e7ea      	b.n	801b036 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801b060 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b060:	2300      	movs	r3, #0
 801b062:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801b066:	30a4      	adds	r0, #164	@ 0xa4
 801b068:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b06c:	f802 3b01 	strb.w	r3, [r2], #1
 801b070:	4282      	cmp	r2, r0
 801b072:	d1fb      	bne.n	801b06c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b074:	4770      	bx	lr
	...

0801b078 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b078:	b570      	push	{r4, r5, r6, lr}
 801b07a:	4c0b      	ldr	r4, [pc, #44]	@ (801b0a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b07c:	4605      	mov	r5, r0
 801b07e:	460e      	mov	r6, r1
 801b080:	6820      	ldr	r0, [r4, #0]
 801b082:	b110      	cbz	r0, 801b08a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b084:	6803      	ldr	r3, [r0, #0]
 801b086:	695b      	ldr	r3, [r3, #20]
 801b088:	4798      	blx	r3
 801b08a:	1d28      	adds	r0, r5, #4
 801b08c:	f7ff ffe8 	bl	801b060 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b090:	6026      	str	r6, [r4, #0]
 801b092:	6833      	ldr	r3, [r6, #0]
 801b094:	4630      	mov	r0, r6
 801b096:	68db      	ldr	r3, [r3, #12]
 801b098:	4798      	blx	r3
 801b09a:	682b      	ldr	r3, [r5, #0]
 801b09c:	4628      	mov	r0, r5
 801b09e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0a4:	4718      	bx	r3
 801b0a6:	bf00      	nop
 801b0a8:	20012308 	.word	0x20012308

0801b0ac <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801b0b2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801b0b6:	461a      	mov	r2, r3
 801b0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0ba:	461c      	mov	r4, r3
 801b0bc:	461d      	mov	r5, r3
 801b0be:	459c      	cmp	ip, r3
 801b0c0:	dd1a      	ble.n	801b0f8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b0c2:	18c6      	adds	r6, r0, r3
 801b0c4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801b0c8:	b16e      	cbz	r6, 801b0e6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d008      	beq.n	801b0e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b0ce:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b0d2:	fa1f fe82 	uxth.w	lr, r2
 801b0d6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b0da:	1887      	adds	r7, r0, r2
 801b0dc:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801b0e0:	3201      	adds	r2, #1
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	e7eb      	b.n	801b0be <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b0e6:	4299      	cmp	r1, r3
 801b0e8:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801b0ec:	bfa8      	it	ge
 801b0ee:	3501      	addge	r5, #1
 801b0f0:	429e      	cmp	r6, r3
 801b0f2:	bfc8      	it	gt
 801b0f4:	3401      	addgt	r4, #1
 801b0f6:	e7f4      	b.n	801b0e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b0f8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801b0fc:	1b49      	subs	r1, r1, r5
 801b0fe:	1b1b      	subs	r3, r3, r4
 801b100:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801b104:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b108:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b10c:	4293      	cmp	r3, r2
 801b10e:	dd03      	ble.n	801b118 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b110:	3b01      	subs	r3, #1
 801b112:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801b116:	e7f7      	b.n	801b108 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b11c <_ZN8touchgfx11Application15handleTickEventEv>:
 801b11c:	b570      	push	{r4, r5, r6, lr}
 801b11e:	4d16      	ldr	r5, [pc, #88]	@ (801b178 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b120:	4604      	mov	r4, r0
 801b122:	6828      	ldr	r0, [r5, #0]
 801b124:	b140      	cbz	r0, 801b138 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b126:	7a03      	ldrb	r3, [r0, #8]
 801b128:	b933      	cbnz	r3, 801b138 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b12a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b12e:	6803      	ldr	r3, [r0, #0]
 801b130:	689b      	ldr	r3, [r3, #8]
 801b132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b136:	4718      	bx	r3
 801b138:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801b13c:	4e0f      	ldr	r6, [pc, #60]	@ (801b17c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b13e:	b973      	cbnz	r3, 801b15e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b140:	b168      	cbz	r0, 801b15e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b142:	7a03      	ldrb	r3, [r0, #8]
 801b144:	b15b      	cbz	r3, 801b15e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b146:	6830      	ldr	r0, [r6, #0]
 801b148:	b110      	cbz	r0, 801b150 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b14a:	6803      	ldr	r3, [r0, #0]
 801b14c:	691b      	ldr	r3, [r3, #16]
 801b14e:	4798      	blx	r3
 801b150:	6828      	ldr	r0, [r5, #0]
 801b152:	6803      	ldr	r3, [r0, #0]
 801b154:	68db      	ldr	r3, [r3, #12]
 801b156:	4798      	blx	r3
 801b158:	2301      	movs	r3, #1
 801b15a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b15e:	3404      	adds	r4, #4
 801b160:	4620      	mov	r0, r4
 801b162:	f7ff ff45 	bl	801aff0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b166:	4620      	mov	r0, r4
 801b168:	f7ff ffa0 	bl	801b0ac <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b16c:	6830      	ldr	r0, [r6, #0]
 801b16e:	b110      	cbz	r0, 801b176 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b170:	6803      	ldr	r3, [r0, #0]
 801b172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b174:	e7dd      	b.n	801b132 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b176:	bd70      	pop	{r4, r5, r6, pc}
 801b178:	2001230c 	.word	0x2001230c
 801b17c:	20012308 	.word	0x20012308

0801b180 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b182:	2300      	movs	r3, #0
 801b184:	4604      	mov	r4, r0
 801b186:	460d      	mov	r5, r1
 801b188:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801b18c:	4618      	mov	r0, r3
 801b18e:	b29a      	uxth	r2, r3
 801b190:	4291      	cmp	r1, r2
 801b192:	d912      	bls.n	801b1ba <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801b194:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801b198:	18e6      	adds	r6, r4, r3
 801b19a:	42af      	cmp	r7, r5
 801b19c:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801b1a0:	d105      	bne.n	801b1ae <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801b1a2:	2aff      	cmp	r2, #255	@ 0xff
 801b1a4:	d002      	beq.n	801b1ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b1a6:	3201      	adds	r2, #1
 801b1a8:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801b1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ae:	2a00      	cmp	r2, #0
 801b1b0:	f103 0301 	add.w	r3, r3, #1
 801b1b4:	bf08      	it	eq
 801b1b6:	2001      	moveq	r0, #1
 801b1b8:	e7e9      	b.n	801b18e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801b1ba:	b120      	cbz	r0, 801b1c6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b1bc:	2920      	cmp	r1, #32
 801b1be:	d102      	bne.n	801b1c6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	f7ff ff73 	bl	801b0ac <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b1c6:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801b1ca:	2b1f      	cmp	r3, #31
 801b1cc:	d8ee      	bhi.n	801b1ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b1ce:	18e2      	adds	r2, r4, r3
 801b1d0:	2101      	movs	r1, #1
 801b1d2:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801b1d6:	185a      	adds	r2, r3, r1
 801b1d8:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801b1dc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b1e0:	e7e4      	b.n	801b1ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801b1e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	801a      	strh	r2, [r3, #0]
 801b1ec:	3308      	adds	r3, #8
 801b1ee:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b1f2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b1f6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b1fa:	428b      	cmp	r3, r1
 801b1fc:	d1f5      	bne.n	801b1ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b1fe:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801b202:	4770      	bx	lr

0801b204 <_ZN8touchgfx11ApplicationC1Ev>:
 801b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b206:	4b1d      	ldr	r3, [pc, #116]	@ (801b27c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b208:	4606      	mov	r6, r0
 801b20a:	4604      	mov	r4, r0
 801b20c:	2500      	movs	r5, #0
 801b20e:	f846 3b04 	str.w	r3, [r6], #4
 801b212:	22a8      	movs	r2, #168	@ 0xa8
 801b214:	2100      	movs	r1, #0
 801b216:	4630      	mov	r0, r6
 801b218:	f012 fe92 	bl	802df40 <memset>
 801b21c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801b220:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b224:	4f16      	ldr	r7, [pc, #88]	@ (801b280 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b226:	f7ff ffdc 	bl	801b1e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b22a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801b22e:	f7ff ffd8 	bl	801b1e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b232:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801b236:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801b23a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801b23e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801b242:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801b246:	490f      	ldr	r1, [pc, #60]	@ (801b284 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b248:	480f      	ldr	r0, [pc, #60]	@ (801b288 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b24a:	f011 f9ef 	bl	802c62c <CRC_Lock>
 801b24e:	4b0f      	ldr	r3, [pc, #60]	@ (801b28c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b250:	b158      	cbz	r0, 801b26a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b252:	801d      	strh	r5, [r3, #0]
 801b254:	2300      	movs	r3, #0
 801b256:	4a0e      	ldr	r2, [pc, #56]	@ (801b290 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b258:	4630      	mov	r0, r6
 801b25a:	6013      	str	r3, [r2, #0]
 801b25c:	4a0d      	ldr	r2, [pc, #52]	@ (801b294 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b25e:	603b      	str	r3, [r7, #0]
 801b260:	6013      	str	r3, [r2, #0]
 801b262:	f7ff fefd 	bl	801b060 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b266:	4620      	mov	r0, r4
 801b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b26a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b26e:	2002      	movs	r0, #2
 801b270:	801a      	strh	r2, [r3, #0]
 801b272:	6038      	str	r0, [r7, #0]
 801b274:	f001 fb1e 	bl	801c8b4 <_ZN8touchgfx6Screen4drawEv>
 801b278:	e7ec      	b.n	801b254 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b27a:	bf00      	nop
 801b27c:	080321f8 	.word	0x080321f8
 801b280:	20012308 	.word	0x20012308
 801b284:	b5e8b5cd 	.word	0xb5e8b5cd
 801b288:	f407a5c2 	.word	0xf407a5c2
 801b28c:	20000018 	.word	0x20000018
 801b290:	20012318 	.word	0x20012318
 801b294:	2001230c 	.word	0x2001230c

0801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b298:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801b29c:	3b01      	subs	r3, #1
 801b29e:	b29b      	uxth	r3, r3
 801b2a0:	428b      	cmp	r3, r1
 801b2a2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801b2a6:	b510      	push	{r4, lr}
 801b2a8:	d908      	bls.n	801b2bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b2aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b2ae:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b2b2:	681a      	ldr	r2, [r3, #0]
 801b2b4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b2b8:	685a      	ldr	r2, [r3, #4]
 801b2ba:	6062      	str	r2, [r4, #4]
 801b2bc:	bd10      	pop	{r4, pc}
	...

0801b2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c4:	b08f      	sub	sp, #60	@ 0x3c
 801b2c6:	4b8f      	ldr	r3, [pc, #572]	@ (801b504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b2c8:	4683      	mov	fp, r0
 801b2ca:	ac0a      	add	r4, sp, #40	@ 0x28
 801b2cc:	e884 0006 	stmia.w	r4, {r1, r2}
 801b2d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	4b8c      	ldr	r3, [pc, #560]	@ (801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b2d8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b2dc:	f7ff fde4 	bl	801aea8 <_ZN8touchgfx4Rect10restrictToEss>
 801b2e0:	4620      	mov	r0, r4
 801b2e2:	f7f9 fc56 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b2e6:	2800      	cmp	r0, #0
 801b2e8:	d16a      	bne.n	801b3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b2ea:	9403      	str	r4, [sp, #12]
 801b2ec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b2f0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b2f4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b2f8:	9301      	str	r3, [sp, #4]
 801b2fa:	35a4      	adds	r5, #164	@ 0xa4
 801b2fc:	b15c      	cbz	r4, 801b316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b2fe:	4629      	mov	r1, r5
 801b300:	9803      	ldr	r0, [sp, #12]
 801b302:	f7ff fe21 	bl	801af48 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b306:	3c01      	subs	r4, #1
 801b308:	b118      	cbz	r0, 801b312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b30a:	b2a1      	uxth	r1, r4
 801b30c:	9801      	ldr	r0, [sp, #4]
 801b30e:	f7ff ffc3 	bl	801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b312:	3d08      	subs	r5, #8
 801b314:	e7f2      	b.n	801b2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b316:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801b31a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b31e:	f8cd a010 	str.w	sl, [sp, #16]
 801b322:	9302      	str	r3, [sp, #8]
 801b324:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b328:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801b32c:	9306      	str	r3, [sp, #24]
 801b32e:	445c      	add	r4, fp
 801b330:	2500      	movs	r5, #0
 801b332:	4626      	mov	r6, r4
 801b334:	f8cd a014 	str.w	sl, [sp, #20]
 801b338:	462f      	mov	r7, r5
 801b33a:	9b05      	ldr	r3, [sp, #20]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d073      	beq.n	801b428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b340:	9903      	ldr	r1, [sp, #12]
 801b342:	4630      	mov	r0, r6
 801b344:	f7ff fd8e 	bl	801ae64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b348:	b350      	cbz	r0, 801b3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b34a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801b34e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b352:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801b356:	45e6      	cmp	lr, ip
 801b358:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b35c:	db33      	blt.n	801b3c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b35e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b362:	88b3      	ldrh	r3, [r6, #4]
 801b364:	4472      	add	r2, lr
 801b366:	4463      	add	r3, ip
 801b368:	b212      	sxth	r2, r2
 801b36a:	b21b      	sxth	r3, r3
 801b36c:	429a      	cmp	r2, r3
 801b36e:	dc2a      	bgt.n	801b3c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b370:	fa1f f289 	uxth.w	r2, r9
 801b374:	88f3      	ldrh	r3, [r6, #6]
 801b376:	45c8      	cmp	r8, r9
 801b378:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b37c:	4413      	add	r3, r2
 801b37e:	fa1f fc88 	uxth.w	ip, r8
 801b382:	b29b      	uxth	r3, r3
 801b384:	fa0f fe83 	sxth.w	lr, r3
 801b388:	db0f      	blt.n	801b3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b38a:	eba3 030c 	sub.w	r3, r3, ip
 801b38e:	1ac9      	subs	r1, r1, r3
 801b390:	b209      	sxth	r1, r1
 801b392:	2900      	cmp	r1, #0
 801b394:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b398:	dd12      	ble.n	801b3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b39a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801b39e:	4605      	mov	r5, r0
 801b3a0:	9b05      	ldr	r3, [sp, #20]
 801b3a2:	3e08      	subs	r6, #8
 801b3a4:	3b01      	subs	r3, #1
 801b3a6:	9305      	str	r3, [sp, #20]
 801b3a8:	e7c7      	b.n	801b33a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b3aa:	4461      	add	r1, ip
 801b3ac:	b209      	sxth	r1, r1
 801b3ae:	4571      	cmp	r1, lr
 801b3b0:	dc38      	bgt.n	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b3b2:	eba2 020c 	sub.w	r2, r2, ip
 801b3b6:	b212      	sxth	r2, r2
 801b3b8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801b3bc:	2a00      	cmp	r2, #0
 801b3be:	dcee      	bgt.n	801b39e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b3c0:	b00f      	add	sp, #60	@ 0x3c
 801b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c6:	45c8      	cmp	r8, r9
 801b3c8:	db2c      	blt.n	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b3ca:	88f3      	ldrh	r3, [r6, #6]
 801b3cc:	4499      	add	r9, r3
 801b3ce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801b3d2:	4498      	add	r8, r3
 801b3d4:	fa0f f989 	sxth.w	r9, r9
 801b3d8:	fa0f f888 	sxth.w	r8, r8
 801b3dc:	45c1      	cmp	r9, r8
 801b3de:	db21      	blt.n	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b3e0:	fa1f f28c 	uxth.w	r2, ip
 801b3e4:	88b3      	ldrh	r3, [r6, #4]
 801b3e6:	45e6      	cmp	lr, ip
 801b3e8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b3ec:	4413      	add	r3, r2
 801b3ee:	fa1f f88e 	uxth.w	r8, lr
 801b3f2:	b29b      	uxth	r3, r3
 801b3f4:	fa0f f983 	sxth.w	r9, r3
 801b3f8:	db0a      	blt.n	801b410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801b3fa:	eba3 0308 	sub.w	r3, r3, r8
 801b3fe:	1ac9      	subs	r1, r1, r3
 801b400:	b209      	sxth	r1, r1
 801b402:	2900      	cmp	r1, #0
 801b404:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801b408:	ddda      	ble.n	801b3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b40a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b40e:	e7c6      	b.n	801b39e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b410:	4441      	add	r1, r8
 801b412:	b209      	sxth	r1, r1
 801b414:	4549      	cmp	r1, r9
 801b416:	dc05      	bgt.n	801b424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b418:	eba2 0208 	sub.w	r2, r2, r8
 801b41c:	b212      	sxth	r2, r2
 801b41e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801b422:	e7cb      	b.n	801b3bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b424:	4607      	mov	r7, r0
 801b426:	e7bb      	b.n	801b3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b428:	2d00      	cmp	r5, #0
 801b42a:	d181      	bne.n	801b330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801b42c:	2f00      	cmp	r7, #0
 801b42e:	f000 81dd 	beq.w	801b7ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b432:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801b436:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801b43a:	b2b3      	uxth	r3, r6
 801b43c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801b440:	9305      	str	r3, [sp, #20]
 801b442:	9a05      	ldr	r2, [sp, #20]
 801b444:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b448:	4413      	add	r3, r2
 801b44a:	b2ba      	uxth	r2, r7
 801b44c:	4492      	add	sl, r2
 801b44e:	b29b      	uxth	r3, r3
 801b450:	fa1f fa8a 	uxth.w	sl, sl
 801b454:	fa0f f883 	sxth.w	r8, r3
 801b458:	fa0f f98a 	sxth.w	r9, sl
 801b45c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b460:	9b04      	ldr	r3, [sp, #16]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d052      	beq.n	801b50c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b466:	9903      	ldr	r1, [sp, #12]
 801b468:	4620      	mov	r0, r4
 801b46a:	f7ff fcfb 	bl	801ae64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b46e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b472:	b1c0      	cbz	r0, 801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b474:	f9b4 e000 	ldrsh.w	lr, [r4]
 801b478:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b47c:	4576      	cmp	r6, lr
 801b47e:	dc22      	bgt.n	801b4c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b480:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b484:	44f4      	add	ip, lr
 801b486:	fa0f fc8c 	sxth.w	ip, ip
 801b48a:	45e0      	cmp	r8, ip
 801b48c:	db1b      	blt.n	801b4c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b48e:	428f      	cmp	r7, r1
 801b490:	fa1f fc81 	uxth.w	ip, r1
 801b494:	88e1      	ldrh	r1, [r4, #6]
 801b496:	dc0d      	bgt.n	801b4b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801b498:	ebaa 0c0c 	sub.w	ip, sl, ip
 801b49c:	f8a4 9002 	strh.w	r9, [r4, #2]
 801b4a0:	eba1 010c 	sub.w	r1, r1, ip
 801b4a4:	80e1      	strh	r1, [r4, #6]
 801b4a6:	4628      	mov	r0, r5
 801b4a8:	9904      	ldr	r1, [sp, #16]
 801b4aa:	3c08      	subs	r4, #8
 801b4ac:	4605      	mov	r5, r0
 801b4ae:	3901      	subs	r1, #1
 801b4b0:	9104      	str	r1, [sp, #16]
 801b4b2:	e7d3      	b.n	801b45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801b4b4:	4461      	add	r1, ip
 801b4b6:	b209      	sxth	r1, r1
 801b4b8:	4549      	cmp	r1, r9
 801b4ba:	dcf5      	bgt.n	801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b4bc:	eba2 0c0c 	sub.w	ip, r2, ip
 801b4c0:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b4c4:	e7ef      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b4c6:	428f      	cmp	r7, r1
 801b4c8:	dcee      	bgt.n	801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b4ca:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801b4ce:	4461      	add	r1, ip
 801b4d0:	b209      	sxth	r1, r1
 801b4d2:	4589      	cmp	r9, r1
 801b4d4:	dbe8      	blt.n	801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b4d6:	4576      	cmp	r6, lr
 801b4d8:	fa1f fc8e 	uxth.w	ip, lr
 801b4dc:	88a1      	ldrh	r1, [r4, #4]
 801b4de:	dc07      	bgt.n	801b4f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801b4e0:	eba3 0c0c 	sub.w	ip, r3, ip
 801b4e4:	f8a4 8000 	strh.w	r8, [r4]
 801b4e8:	eba1 010c 	sub.w	r1, r1, ip
 801b4ec:	80a1      	strh	r1, [r4, #4]
 801b4ee:	e7da      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b4f0:	4461      	add	r1, ip
 801b4f2:	b209      	sxth	r1, r1
 801b4f4:	4588      	cmp	r8, r1
 801b4f6:	dbd7      	blt.n	801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b4f8:	9905      	ldr	r1, [sp, #20]
 801b4fa:	eba1 0c0c 	sub.w	ip, r1, ip
 801b4fe:	f8a4 c004 	strh.w	ip, [r4, #4]
 801b502:	e7d0      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b504:	200122ba 	.word	0x200122ba
 801b508:	200122b8 	.word	0x200122b8
 801b50c:	2d00      	cmp	r5, #0
 801b50e:	f000 816d 	beq.w	801b7ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b512:	9b06      	ldr	r3, [sp, #24]
 801b514:	445b      	add	r3, fp
 801b516:	461c      	mov	r4, r3
 801b518:	9b02      	ldr	r3, [sp, #8]
 801b51a:	3301      	adds	r3, #1
 801b51c:	f000 8166 	beq.w	801b7ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b520:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801b524:	9803      	ldr	r0, [sp, #12]
 801b526:	4629      	mov	r1, r5
 801b528:	f7ff fd0e 	bl	801af48 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b52c:	b120      	cbz	r0, 801b538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b52e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b532:	9801      	ldr	r0, [sp, #4]
 801b534:	f7ff feb0 	bl	801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b538:	9903      	ldr	r1, [sp, #12]
 801b53a:	4628      	mov	r0, r5
 801b53c:	f7ff fc92 	bl	801ae64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b540:	2800      	cmp	r0, #0
 801b542:	f000 809c 	beq.w	801b67e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b546:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801b54a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b54e:	fa1f f189 	uxth.w	r1, r9
 801b552:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b556:	9309      	str	r3, [sp, #36]	@ 0x24
 801b558:	eb01 0c03 	add.w	ip, r1, r3
 801b55c:	b283      	uxth	r3, r0
 801b55e:	4548      	cmp	r0, r9
 801b560:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801b564:	fa1f fa8c 	uxth.w	sl, ip
 801b568:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801b56c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801b570:	eb03 050c 	add.w	r5, r3, ip
 801b574:	b2ad      	uxth	r5, r5
 801b576:	9505      	str	r5, [sp, #20]
 801b578:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b57c:	9504      	str	r5, [sp, #16]
 801b57e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801b582:	f340 8099 	ble.w	801b6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b586:	1a5b      	subs	r3, r3, r1
 801b588:	4596      	cmp	lr, r2
 801b58a:	fa0f f08a 	sxth.w	r0, sl
 801b58e:	b29b      	uxth	r3, r3
 801b590:	b21e      	sxth	r6, r3
 801b592:	dd2e      	ble.n	801b5f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b594:	9f02      	ldr	r7, [sp, #8]
 801b596:	fa1f fe8e 	uxth.w	lr, lr
 801b59a:	b292      	uxth	r2, r2
 801b59c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801b5a0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b5a4:	9f04      	ldr	r7, [sp, #16]
 801b5a6:	ebae 0102 	sub.w	r1, lr, r2
 801b5aa:	44a6      	add	lr, r4
 801b5ac:	1a3f      	subs	r7, r7, r0
 801b5ae:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801b5b2:	b289      	uxth	r1, r1
 801b5b4:	4402      	add	r2, r0
 801b5b6:	fa0f fe8e 	sxth.w	lr, lr
 801b5ba:	b20d      	sxth	r5, r1
 801b5bc:	b212      	sxth	r2, r2
 801b5be:	436f      	muls	r7, r5
 801b5c0:	ebae 0202 	sub.w	r2, lr, r2
 801b5c4:	4372      	muls	r2, r6
 801b5c6:	4297      	cmp	r7, r2
 801b5c8:	db09      	blt.n	801b5de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b5ca:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801b5ce:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801b5d2:	449c      	add	ip, r3
 801b5d4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b5d8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b5dc:	e686      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b5de:	4421      	add	r1, r4
 801b5e0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801b5e4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801b5e8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b5ec:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b5f0:	e67c      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b5f2:	9f04      	ldr	r7, [sp, #16]
 801b5f4:	42b8      	cmp	r0, r7
 801b5f6:	da27      	bge.n	801b648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b5f8:	9902      	ldr	r1, [sp, #8]
 801b5fa:	1a3f      	subs	r7, r7, r0
 801b5fc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801b600:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b604:	eb05 010e 	add.w	r1, r5, lr
 801b608:	fa1f f881 	uxth.w	r8, r1
 801b60c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801b610:	4411      	add	r1, r2
 801b612:	fa0f f988 	sxth.w	r9, r8
 801b616:	eba2 020e 	sub.w	r2, r2, lr
 801b61a:	eba1 0108 	sub.w	r1, r1, r8
 801b61e:	4372      	muls	r2, r6
 801b620:	b289      	uxth	r1, r1
 801b622:	fa0f f881 	sxth.w	r8, r1
 801b626:	fb08 f707 	mul.w	r7, r8, r7
 801b62a:	42ba      	cmp	r2, r7
 801b62c:	dc06      	bgt.n	801b63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b62e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801b632:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801b636:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801b63a:	e7ca      	b.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b63c:	4429      	add	r1, r5
 801b63e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801b642:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b646:	e651      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b648:	9805      	ldr	r0, [sp, #20]
 801b64a:	2d06      	cmp	r5, #6
 801b64c:	ebaa 0000 	sub.w	r0, sl, r0
 801b650:	b280      	uxth	r0, r0
 801b652:	fa0f fe80 	sxth.w	lr, r0
 801b656:	d817      	bhi.n	801b688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b658:	9b04      	ldr	r3, [sp, #16]
 801b65a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801b65e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b662:	1c6b      	adds	r3, r5, #1
 801b664:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801b668:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b66c:	9b01      	ldr	r3, [sp, #4]
 801b66e:	9801      	ldr	r0, [sp, #4]
 801b670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b674:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b678:	805a      	strh	r2, [r3, #2]
 801b67a:	809e      	strh	r6, [r3, #4]
 801b67c:	80d9      	strh	r1, [r3, #6]
 801b67e:	9b02      	ldr	r3, [sp, #8]
 801b680:	3c08      	subs	r4, #8
 801b682:	3b01      	subs	r3, #1
 801b684:	9302      	str	r3, [sp, #8]
 801b686:	e747      	b.n	801b518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b688:	9a02      	ldr	r2, [sp, #8]
 801b68a:	45b6      	cmp	lr, r6
 801b68c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b690:	db0d      	blt.n	801b6ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b692:	449c      	add	ip, r3
 801b694:	445a      	add	r2, fp
 801b696:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b69a:	fa1f fc8c 	uxth.w	ip, ip
 801b69e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801b6a2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b6a6:	448c      	add	ip, r1
 801b6a8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801b6ac:	e61e      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b6ae:	445a      	add	r2, fp
 801b6b0:	4484      	add	ip, r0
 801b6b2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801b6b6:	e78f      	b.n	801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b6b8:	fa1f f18e 	uxth.w	r1, lr
 801b6bc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801b6c0:	b293      	uxth	r3, r2
 801b6c2:	4596      	cmp	lr, r2
 801b6c4:	eb01 0806 	add.w	r8, r1, r6
 801b6c8:	9306      	str	r3, [sp, #24]
 801b6ca:	fa1f f888 	uxth.w	r8, r8
 801b6ce:	9f06      	ldr	r7, [sp, #24]
 801b6d0:	fa0f f388 	sxth.w	r3, r8
 801b6d4:	9307      	str	r3, [sp, #28]
 801b6d6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b6da:	443b      	add	r3, r7
 801b6dc:	b29b      	uxth	r3, r3
 801b6de:	9308      	str	r3, [sp, #32]
 801b6e0:	da24      	bge.n	801b72c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b6e2:	9905      	ldr	r1, [sp, #20]
 801b6e4:	eba3 0308 	sub.w	r3, r3, r8
 801b6e8:	eba2 020e 	sub.w	r2, r2, lr
 801b6ec:	eba9 0000 	sub.w	r0, r9, r0
 801b6f0:	ebaa 0401 	sub.w	r4, sl, r1
 801b6f4:	b29b      	uxth	r3, r3
 801b6f6:	b2a4      	uxth	r4, r4
 801b6f8:	b219      	sxth	r1, r3
 801b6fa:	b225      	sxth	r5, r4
 801b6fc:	4348      	muls	r0, r1
 801b6fe:	436a      	muls	r2, r5
 801b700:	4282      	cmp	r2, r0
 801b702:	9a02      	ldr	r2, [sp, #8]
 801b704:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b708:	445a      	add	r2, fp
 801b70a:	dc06      	bgt.n	801b71a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b70c:	9b07      	ldr	r3, [sp, #28]
 801b70e:	44a4      	add	ip, r4
 801b710:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801b714:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801b718:	e75e      	b.n	801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b71a:	9904      	ldr	r1, [sp, #16]
 801b71c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801b720:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801b724:	4433      	add	r3, r6
 801b726:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b72a:	e5df      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b72c:	9f06      	ldr	r7, [sp, #24]
 801b72e:	9b04      	ldr	r3, [sp, #16]
 801b730:	1bc9      	subs	r1, r1, r7
 801b732:	fa0f f78a 	sxth.w	r7, sl
 801b736:	b289      	uxth	r1, r1
 801b738:	429f      	cmp	r7, r3
 801b73a:	fa0f fe81 	sxth.w	lr, r1
 801b73e:	dd23      	ble.n	801b788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b740:	9a05      	ldr	r2, [sp, #20]
 801b742:	eba9 0000 	sub.w	r0, r9, r0
 801b746:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b74a:	ebaa 0202 	sub.w	r2, sl, r2
 801b74e:	9d07      	ldr	r5, [sp, #28]
 801b750:	fb0e f000 	mul.w	r0, lr, r0
 801b754:	b292      	uxth	r2, r2
 801b756:	eba5 0a03 	sub.w	sl, r5, r3
 801b75a:	9b02      	ldr	r3, [sp, #8]
 801b75c:	b214      	sxth	r4, r2
 801b75e:	00db      	lsls	r3, r3, #3
 801b760:	fb04 fa0a 	mul.w	sl, r4, sl
 801b764:	445b      	add	r3, fp
 801b766:	4550      	cmp	r0, sl
 801b768:	db03      	blt.n	801b772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b76a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801b76e:	4494      	add	ip, r2
 801b770:	e732      	b.n	801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b772:	9a04      	ldr	r2, [sp, #16]
 801b774:	4431      	add	r1, r6
 801b776:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801b77a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801b77e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801b782:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b786:	e75c      	b.n	801b642 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b788:	9b08      	ldr	r3, [sp, #32]
 801b78a:	2d06      	cmp	r5, #6
 801b78c:	eba3 0308 	sub.w	r3, r3, r8
 801b790:	b29b      	uxth	r3, r3
 801b792:	b218      	sxth	r0, r3
 801b794:	d813      	bhi.n	801b7be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b796:	9b07      	ldr	r3, [sp, #28]
 801b798:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801b79c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801b7a0:	1c6b      	adds	r3, r5, #1
 801b7a2:	9901      	ldr	r1, [sp, #4]
 801b7a4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b7a8:	9b01      	ldr	r3, [sp, #4]
 801b7aa:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b7ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b7b2:	805a      	strh	r2, [r3, #2]
 801b7b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b7b6:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b7ba:	809a      	strh	r2, [r3, #4]
 801b7bc:	e75f      	b.n	801b67e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b7be:	9c02      	ldr	r4, [sp, #8]
 801b7c0:	4570      	cmp	r0, lr
 801b7c2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b7c6:	db0d      	blt.n	801b7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b7c8:	4431      	add	r1, r6
 801b7ca:	9b06      	ldr	r3, [sp, #24]
 801b7cc:	445c      	add	r4, fp
 801b7ce:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801b7d2:	b289      	uxth	r1, r1
 801b7d4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801b7d8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b7dc:	4419      	add	r1, r3
 801b7de:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801b7e2:	e583      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b7e4:	445c      	add	r4, fp
 801b7e6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801b7ea:	e79b      	b.n	801b724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b7ec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b7f0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801b7f4:	1e65      	subs	r5, r4, #1
 801b7f6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b7fa:	b2ad      	uxth	r5, r5
 801b7fc:	42b5      	cmp	r5, r6
 801b7fe:	d044      	beq.n	801b88a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b800:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b804:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b808:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b80c:	4282      	cmp	r2, r0
 801b80e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b812:	d11f      	bne.n	801b854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b814:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b818:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b81c:	459c      	cmp	ip, r3
 801b81e:	d119      	bne.n	801b854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b820:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b824:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b828:	19d8      	adds	r0, r3, r7
 801b82a:	b200      	sxth	r0, r0
 801b82c:	4288      	cmp	r0, r1
 801b82e:	d109      	bne.n	801b844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b830:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b834:	4413      	add	r3, r2
 801b836:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b83a:	4629      	mov	r1, r5
 801b83c:	9801      	ldr	r0, [sp, #4]
 801b83e:	f7ff fd2b 	bl	801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b842:	e003      	b.n	801b84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b844:	4411      	add	r1, r2
 801b846:	b209      	sxth	r1, r1
 801b848:	42b9      	cmp	r1, r7
 801b84a:	d0f3      	beq.n	801b834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b84c:	3d01      	subs	r5, #1
 801b84e:	3c08      	subs	r4, #8
 801b850:	b2ad      	uxth	r5, r5
 801b852:	e7d3      	b.n	801b7fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b854:	42b9      	cmp	r1, r7
 801b856:	d1f9      	bne.n	801b84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b858:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b85c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b860:	4299      	cmp	r1, r3
 801b862:	d1f3      	bne.n	801b84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b864:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b868:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b86c:	181f      	adds	r7, r3, r0
 801b86e:	b23f      	sxth	r7, r7
 801b870:	42ba      	cmp	r2, r7
 801b872:	d105      	bne.n	801b880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b874:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b878:	440b      	add	r3, r1
 801b87a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b87e:	e7dc      	b.n	801b83a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b880:	440a      	add	r2, r1
 801b882:	b212      	sxth	r2, r2
 801b884:	4290      	cmp	r0, r2
 801b886:	d1e1      	bne.n	801b84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b888:	e7f6      	b.n	801b878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b88a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b88e:	2e07      	cmp	r6, #7
 801b890:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b894:	d812      	bhi.n	801b8bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b896:	1c75      	adds	r5, r6, #1
 801b898:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b89c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b8a0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b8a4:	9d01      	ldr	r5, [sp, #4]
 801b8a6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b8aa:	442c      	add	r4, r5
 801b8ac:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b8b0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b8b4:	8061      	strh	r1, [r4, #2]
 801b8b6:	80a2      	strh	r2, [r4, #4]
 801b8b8:	80e3      	strh	r3, [r4, #6]
 801b8ba:	e581      	b.n	801b3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b8bc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b8c0:	3e01      	subs	r6, #1
 801b8c2:	445c      	add	r4, fp
 801b8c4:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b8c8:	f04f 37ff 	mov.w	r7, #4294967295
 801b8cc:	2500      	movs	r5, #0
 801b8ce:	9305      	str	r3, [sp, #20]
 801b8d0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b8d4:	1e72      	subs	r2, r6, #1
 801b8d6:	9302      	str	r3, [sp, #8]
 801b8d8:	4691      	mov	r9, r2
 801b8da:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b8de:	9304      	str	r3, [sp, #16]
 801b8e0:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b8e4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b8e8:	6818      	ldr	r0, [r3, #0]
 801b8ea:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b8ee:	9207      	str	r2, [sp, #28]
 801b8f0:	bf16      	itet	ne
 801b8f2:	9905      	ldrne	r1, [sp, #20]
 801b8f4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b8f8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b8fc:	9306      	str	r3, [sp, #24]
 801b8fe:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b902:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b906:	fb18 f801 	smulbb	r8, r8, r1
 801b90a:	6859      	ldr	r1, [r3, #4]
 801b90c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b910:	4671      	mov	r1, lr
 801b912:	a80c      	add	r0, sp, #48	@ 0x30
 801b914:	f7fb f8c9 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b918:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801b91c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801b920:	f04f 0c08 	mov.w	ip, #8
 801b924:	9b04      	ldr	r3, [sp, #16]
 801b926:	9a02      	ldr	r2, [sp, #8]
 801b928:	fb10 f001 	smulbb	r0, r0, r1
 801b92c:	fb02 8803 	mla	r8, r2, r3, r8
 801b930:	eba0 0108 	sub.w	r1, r0, r8
 801b934:	fb90 f0fc 	sdiv	r0, r0, ip
 801b938:	4288      	cmp	r0, r1
 801b93a:	dc20      	bgt.n	801b97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b93c:	4551      	cmp	r1, sl
 801b93e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b942:	da03      	bge.n	801b94c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801b944:	b1d9      	cbz	r1, 801b97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b946:	468a      	mov	sl, r1
 801b948:	464f      	mov	r7, r9
 801b94a:	4635      	mov	r5, r6
 801b94c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b950:	f119 0f02 	cmn.w	r9, #2
 801b954:	d1c6      	bne.n	801b8e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b956:	4616      	mov	r6, r2
 801b958:	3201      	adds	r2, #1
 801b95a:	f1a4 0408 	sub.w	r4, r4, #8
 801b95e:	d1b7      	bne.n	801b8d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b960:	9b01      	ldr	r3, [sp, #4]
 801b962:	b2ac      	uxth	r4, r5
 801b964:	00ed      	lsls	r5, r5, #3
 801b966:	1958      	adds	r0, r3, r5
 801b968:	1c7b      	adds	r3, r7, #1
 801b96a:	d10b      	bne.n	801b984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801b96c:	4601      	mov	r1, r0
 801b96e:	9803      	ldr	r0, [sp, #12]
 801b970:	f7fb f89b 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b974:	4621      	mov	r1, r4
 801b976:	9801      	ldr	r0, [sp, #4]
 801b978:	f7ff fc8e 	bl	801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b97c:	e4b6      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b97e:	464f      	mov	r7, r9
 801b980:	4635      	mov	r5, r6
 801b982:	e7ed      	b.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801b984:	9b01      	ldr	r3, [sp, #4]
 801b986:	00ff      	lsls	r7, r7, #3
 801b988:	445d      	add	r5, fp
 801b98a:	19d9      	adds	r1, r3, r7
 801b98c:	445f      	add	r7, fp
 801b98e:	f7fb f88c 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b992:	9b03      	ldr	r3, [sp, #12]
 801b994:	cb03      	ldmia	r3!, {r0, r1}
 801b996:	9b03      	ldr	r3, [sp, #12]
 801b998:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801b99c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801b9a0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b9a4:	6869      	ldr	r1, [r5, #4]
 801b9a6:	c303      	stmia	r3!, {r0, r1}
 801b9a8:	e7e4      	b.n	801b974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801b9aa:	bf00      	nop

0801b9ac <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801b9b4:	b09b      	sub	sp, #108	@ 0x6c
 801b9b6:	4604      	mov	r4, r0
 801b9b8:	4630      	mov	r0, r6
 801b9ba:	f7f9 f8ea 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b9be:	4605      	mov	r5, r0
 801b9c0:	b948      	cbnz	r0, 801b9d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b9c2:	6823      	ldr	r3, [r4, #0]
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b9c8:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b9cc:	4798      	blx	r3
 801b9ce:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801b9d2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801b9d6:	4bc5      	ldr	r3, [pc, #788]	@ (801bcec <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d03f      	beq.n	801ba5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b9de:	4dc4      	ldr	r5, [pc, #784]	@ (801bcf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801b9e0:	4628      	mov	r0, r5
 801b9e2:	f7f9 f8d6 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b9e6:	4606      	mov	r6, r0
 801b9e8:	2800      	cmp	r0, #0
 801b9ea:	d138      	bne.n	801ba5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b9ec:	4628      	mov	r0, r5
 801b9ee:	f7ff f96f 	bl	801acd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b9f2:	6823      	ldr	r3, [r4, #0]
 801b9f4:	6829      	ldr	r1, [r5, #0]
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b9fa:	686a      	ldr	r2, [r5, #4]
 801b9fc:	4798      	blx	r3
 801b9fe:	802e      	strh	r6, [r5, #0]
 801ba00:	806e      	strh	r6, [r5, #2]
 801ba02:	80ae      	strh	r6, [r5, #4]
 801ba04:	80ee      	strh	r6, [r5, #6]
 801ba06:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801ba0a:	4dba      	ldr	r5, [pc, #744]	@ (801bcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801ba0c:	4640      	mov	r0, r8
 801ba0e:	f7ff fbe8 	bl	801b1e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ba12:	882e      	ldrh	r6, [r5, #0]
 801ba14:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801ba18:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801ba1c:	4633      	mov	r3, r6
 801ba1e:	42bb      	cmp	r3, r7
 801ba20:	d224      	bcs.n	801ba6c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801ba22:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801ba26:	2907      	cmp	r1, #7
 801ba28:	d816      	bhi.n	801ba58 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801ba2a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801ba2e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801ba32:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801ba36:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801ba3a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801ba3e:	1c4a      	adds	r2, r1, #1
 801ba40:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801ba44:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801ba48:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801ba4c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801ba50:	f8a2 e004 	strh.w	lr, [r2, #4]
 801ba54:	f8a2 c006 	strh.w	ip, [r2, #6]
 801ba58:	3301      	adds	r3, #1
 801ba5a:	b29b      	uxth	r3, r3
 801ba5c:	e7df      	b.n	801ba1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801ba5e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d1cf      	bne.n	801ba06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801ba66:	b01b      	add	sp, #108	@ 0x6c
 801ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba6c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801ba70:	42b3      	cmp	r3, r6
 801ba72:	d90c      	bls.n	801ba8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801ba74:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ba78:	6822      	ldr	r2, [r4, #0]
 801ba7a:	3601      	adds	r6, #1
 801ba7c:	4620      	mov	r0, r4
 801ba7e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801ba80:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801ba84:	b2b6      	uxth	r6, r6
 801ba86:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801ba8a:	47b8      	blx	r7
 801ba8c:	e7ee      	b.n	801ba6c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801ba8e:	4a9a      	ldr	r2, [pc, #616]	@ (801bcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ba90:	6813      	ldr	r3, [r2, #0]
 801ba92:	4691      	mov	r9, r2
 801ba94:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801ba98:	2b01      	cmp	r3, #1
 801ba9a:	f040 80e0 	bne.w	801bc5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801ba9e:	8829      	ldrh	r1, [r5, #0]
 801baa0:	2600      	movs	r6, #0
 801baa2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801baa6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801baaa:	33ae      	adds	r3, #174	@ 0xae
 801baac:	428f      	cmp	r7, r1
 801baae:	f103 0308 	add.w	r3, r3, #8
 801bab2:	dd0a      	ble.n	801baca <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801bab4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801bab8:	3101      	adds	r1, #1
 801baba:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801babe:	4402      	add	r2, r0
 801bac0:	b212      	sxth	r2, r2
 801bac2:	4296      	cmp	r6, r2
 801bac4:	bfb8      	it	lt
 801bac6:	4616      	movlt	r6, r2
 801bac8:	e7f0      	b.n	801baac <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801baca:	4b8c      	ldr	r3, [pc, #560]	@ (801bcfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bacc:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801bcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801bad0:	881b      	ldrh	r3, [r3, #0]
 801bad2:	2b0f      	cmp	r3, #15
 801bad4:	bf8c      	ite	hi
 801bad6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801bada:	f04f 0b01 	movls.w	fp, #1
 801bade:	2300      	movs	r3, #0
 801bae0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bae4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801bae8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801baec:	4b82      	ldr	r3, [pc, #520]	@ (801bcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801baee:	4438      	add	r0, r7
 801baf0:	b207      	sxth	r7, r0
 801baf2:	6818      	ldr	r0, [r3, #0]
 801baf4:	42b7      	cmp	r7, r6
 801baf6:	6803      	ldr	r3, [r0, #0]
 801baf8:	f280 8083 	bge.w	801bc02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801bafc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801bb00:	4798      	blx	r3
 801bb02:	eb07 030b 	add.w	r3, r7, fp
 801bb06:	4298      	cmp	r0, r3
 801bb08:	da07      	bge.n	801bb1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bb0a:	42b0      	cmp	r0, r6
 801bb0c:	da05      	bge.n	801bb1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bb0e:	4287      	cmp	r7, r0
 801bb10:	dd6c      	ble.n	801bbec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bb12:	2f00      	cmp	r7, #0
 801bb14:	dd6a      	ble.n	801bbec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bb16:	4630      	mov	r0, r6
 801bb18:	e004      	b.n	801bb24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801bb1a:	4287      	cmp	r7, r0
 801bb1c:	dcfb      	bgt.n	801bb16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801bb1e:	42b0      	cmp	r0, r6
 801bb20:	bfa8      	it	ge
 801bb22:	4630      	movge	r0, r6
 801bb24:	4b76      	ldr	r3, [pc, #472]	@ (801bd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bb26:	1bc0      	subs	r0, r0, r7
 801bb28:	2200      	movs	r2, #0
 801bb2a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bb2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb32:	882f      	ldrh	r7, [r5, #0]
 801bb34:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bb38:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bb3c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bb40:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bb44:	42bb      	cmp	r3, r7
 801bb46:	d9cd      	bls.n	801bae4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bb48:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801bb4c:	ab07      	add	r3, sp, #28
 801bb4e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bb52:	6851      	ldr	r1, [r2, #4]
 801bb54:	c303      	stmia	r3!, {r0, r1}
 801bb56:	a905      	add	r1, sp, #20
 801bb58:	a807      	add	r0, sp, #28
 801bb5a:	f7ff f983 	bl	801ae64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bb5e:	2800      	cmp	r0, #0
 801bb60:	d04c      	beq.n	801bbfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801bb62:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bb66:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801bb6a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801bb6e:	4686      	mov	lr, r0
 801bb70:	4290      	cmp	r0, r2
 801bb72:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bb76:	4450      	add	r0, sl
 801bb78:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801bb7c:	bfb8      	it	lt
 801bb7e:	4696      	movlt	lr, r2
 801bb80:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bb84:	4452      	add	r2, sl
 801bb86:	b280      	uxth	r0, r0
 801bb88:	4299      	cmp	r1, r3
 801bb8a:	468c      	mov	ip, r1
 801bb8c:	b292      	uxth	r2, r2
 801bb8e:	9302      	str	r3, [sp, #8]
 801bb90:	bfb8      	it	lt
 801bb92:	469c      	movlt	ip, r3
 801bb94:	b203      	sxth	r3, r0
 801bb96:	fa0f fa82 	sxth.w	sl, r2
 801bb9a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801bb9e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bba2:	4553      	cmp	r3, sl
 801bba4:	bfb8      	it	lt
 801bba6:	4602      	movlt	r2, r0
 801bba8:	9b02      	ldr	r3, [sp, #8]
 801bbaa:	eba2 020e 	sub.w	r2, r2, lr
 801bbae:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bbb2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801bbb6:	4411      	add	r1, r2
 801bbb8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	b289      	uxth	r1, r1
 801bbc0:	b29b      	uxth	r3, r3
 801bbc2:	b208      	sxth	r0, r1
 801bbc4:	b21a      	sxth	r2, r3
 801bbc6:	4290      	cmp	r0, r2
 801bbc8:	bfb8      	it	lt
 801bbca:	460b      	movlt	r3, r1
 801bbcc:	eba3 030c 	sub.w	r3, r3, ip
 801bbd0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bbd4:	a807      	add	r0, sp, #28
 801bbd6:	f7f8 ffdc 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbda:	b920      	cbnz	r0, 801bbe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801bbdc:	6823      	ldr	r3, [r4, #0]
 801bbde:	a907      	add	r1, sp, #28
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bbe4:	4798      	blx	r3
 801bbe6:	3701      	adds	r7, #1
 801bbe8:	b2bf      	uxth	r7, r7
 801bbea:	e7a9      	b.n	801bb40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801bbec:	f8d9 0000 	ldr.w	r0, [r9]
 801bbf0:	2101      	movs	r1, #1
 801bbf2:	6803      	ldr	r3, [r0, #0]
 801bbf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801bbf8:	4798      	blx	r3
 801bbfa:	e773      	b.n	801bae4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bbfc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bc00:	e7e8      	b.n	801bbd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801bc02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc04:	4798      	blx	r3
 801bc06:	4b3f      	ldr	r3, [pc, #252]	@ (801bd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bc08:	781b      	ldrb	r3, [r3, #0]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	f43f af2b 	beq.w	801ba66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bc10:	2300      	movs	r3, #0
 801bc12:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801bc16:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801bc1a:	882b      	ldrh	r3, [r5, #0]
 801bc1c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801bc20:	42ab      	cmp	r3, r5
 801bc22:	f4bf af20 	bcs.w	801ba66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bc26:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801bc2a:	2907      	cmp	r1, #7
 801bc2c:	d814      	bhi.n	801bc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801bc2e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801bc32:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801bc36:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801bc3a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801bc3e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801bc42:	1c4a      	adds	r2, r1, #1
 801bc44:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801bc48:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801bc4c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801bc50:	f8a2 c002 	strh.w	ip, [r2, #2]
 801bc54:	8097      	strh	r7, [r2, #4]
 801bc56:	80d6      	strh	r6, [r2, #6]
 801bc58:	3301      	adds	r3, #1
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	e7e0      	b.n	801bc20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801bc5e:	2b02      	cmp	r3, #2
 801bc60:	f040 8133 	bne.w	801beca <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801bc64:	4b28      	ldr	r3, [pc, #160]	@ (801bd08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bc66:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801bc6a:	781b      	ldrb	r3, [r3, #0]
 801bc6c:	2b01      	cmp	r3, #1
 801bc6e:	f000 8098 	beq.w	801bda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bc72:	882a      	ldrh	r2, [r5, #0]
 801bc74:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801bc78:	3201      	adds	r2, #1
 801bc7a:	b292      	uxth	r2, r2
 801bc7c:	2900      	cmp	r1, #0
 801bc7e:	d0c2      	beq.n	801bc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bc80:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801bc84:	4694      	mov	ip, r2
 801bc86:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801bc8a:	f04f 0900 	mov.w	r9, #0
 801bc8e:	441e      	add	r6, r3
 801bc90:	b236      	sxth	r6, r6
 801bc92:	fa1f f38c 	uxth.w	r3, ip
 801bc96:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801bc9a:	4299      	cmp	r1, r3
 801bc9c:	f240 80be 	bls.w	801be1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801bca0:	4427      	add	r7, r4
 801bca2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801bca6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801bcaa:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801bcae:	4283      	cmp	r3, r0
 801bcb0:	f340 80a0 	ble.w	801bdf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801bcb4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801bcb8:	46e1      	mov	r9, ip
 801bcba:	4406      	add	r6, r0
 801bcbc:	b236      	sxth	r6, r6
 801bcbe:	429e      	cmp	r6, r3
 801bcc0:	bfa8      	it	ge
 801bcc2:	461e      	movge	r6, r3
 801bcc4:	f10c 0c01 	add.w	ip, ip, #1
 801bcc8:	e7e3      	b.n	801bc92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801bcca:	d10a      	bne.n	801bce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801bccc:	4562      	cmp	r2, ip
 801bcce:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801bcd2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801bcd6:	bfb8      	it	lt
 801bcd8:	4662      	movlt	r2, ip
 801bcda:	4288      	cmp	r0, r1
 801bcdc:	bfb8      	it	lt
 801bcde:	461f      	movlt	r7, r3
 801bce0:	e086      	b.n	801bdf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bce2:	428a      	cmp	r2, r1
 801bce4:	bfb8      	it	lt
 801bce6:	460a      	movlt	r2, r1
 801bce8:	e082      	b.n	801bdf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bcea:	bf00      	nop
 801bcec:	20012304 	.word	0x20012304
 801bcf0:	20012310 	.word	0x20012310
 801bcf4:	20000018 	.word	0x20000018
 801bcf8:	200122c4 	.word	0x200122c4
 801bcfc:	200122ba 	.word	0x200122ba
 801bd00:	200122b8 	.word	0x200122b8
 801bd04:	200122c2 	.word	0x200122c2
 801bd08:	200122bc 	.word	0x200122bc
 801bd0c:	19a1      	adds	r1, r4, r6
 801bd0e:	ab07      	add	r3, sp, #28
 801bd10:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801bd14:	6849      	ldr	r1, [r1, #4]
 801bd16:	c303      	stmia	r3!, {r0, r1}
 801bd18:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bd1c:	a807      	add	r0, sp, #28
 801bd1e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bd22:	2b13      	cmp	r3, #19
 801bd24:	440b      	add	r3, r1
 801bd26:	bfd8      	it	le
 801bd28:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bd2c:	1a9b      	subs	r3, r3, r2
 801bd2e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bd32:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bd36:	f7fe ffe5 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd3a:	a807      	add	r0, sp, #28
 801bd3c:	f7f8 ff29 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd40:	bb78      	cbnz	r0, 801bda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bd42:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801bd46:	4426      	add	r6, r4
 801bd48:	f8d9 0000 	ldr.w	r0, [r9]
 801bd4c:	f1bc 0f14 	cmp.w	ip, #20
 801bd50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bd54:	f8d0 e000 	ldr.w	lr, [r0]
 801bd58:	bfa8      	it	ge
 801bd5a:	f04f 0c14 	movge.w	ip, #20
 801bd5e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801bd62:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bd66:	fa1f fc8c 	uxth.w	ip, ip
 801bd6a:	f8cd c000 	str.w	ip, [sp]
 801bd6e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801bd72:	47d8      	blx	fp
 801bd74:	4683      	mov	fp, r0
 801bd76:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bd7a:	a807      	add	r0, sp, #28
 801bd7c:	f7fe ffa8 	bl	801acd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bd80:	6823      	ldr	r3, [r4, #0]
 801bd82:	4620      	mov	r0, r4
 801bd84:	a907      	add	r1, sp, #28
 801bd86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bd88:	4798      	blx	r3
 801bd8a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801bd8e:	eba0 000b 	sub.w	r0, r0, fp
 801bd92:	b200      	sxth	r0, r0
 801bd94:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801bd98:	b918      	cbnz	r0, 801bda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bd9a:	b2b9      	uxth	r1, r7
 801bd9c:	4650      	mov	r0, sl
 801bd9e:	f7ff fa7b 	bl	801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bda2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801bda6:	f1bb 0f00 	cmp.w	fp, #0
 801bdaa:	f43f af2c 	beq.w	801bc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bdae:	882b      	ldrh	r3, [r5, #0]
 801bdb0:	2700      	movs	r7, #0
 801bdb2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801bdb6:	3301      	adds	r3, #1
 801bdb8:	b29b      	uxth	r3, r3
 801bdba:	b299      	uxth	r1, r3
 801bdbc:	00fe      	lsls	r6, r7, #3
 801bdbe:	458b      	cmp	fp, r1
 801bdc0:	d9a4      	bls.n	801bd0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801bdc2:	4426      	add	r6, r4
 801bdc4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801bdc8:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801bdcc:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801bdd0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801bdd4:	4408      	add	r0, r1
 801bdd6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801bdda:	4461      	add	r1, ip
 801bddc:	b200      	sxth	r0, r0
 801bdde:	b209      	sxth	r1, r1
 801bde0:	4288      	cmp	r0, r1
 801bde2:	f6bf af72 	bge.w	801bcca <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801bde6:	4584      	cmp	ip, r0
 801bde8:	4662      	mov	r2, ip
 801bdea:	461f      	mov	r7, r3
 801bdec:	bfb8      	it	lt
 801bdee:	4602      	movlt	r2, r0
 801bdf0:	3301      	adds	r3, #1
 801bdf2:	e7e2      	b.n	801bdba <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801bdf4:	d10e      	bne.n	801be14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801bdf6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801bdfa:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801bdfe:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801be02:	4473      	add	r3, lr
 801be04:	b21b      	sxth	r3, r3
 801be06:	429e      	cmp	r6, r3
 801be08:	bfa8      	it	ge
 801be0a:	461e      	movge	r6, r3
 801be0c:	4287      	cmp	r7, r0
 801be0e:	bfb8      	it	lt
 801be10:	46e1      	movlt	r9, ip
 801be12:	e757      	b.n	801bcc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801be14:	4286      	cmp	r6, r0
 801be16:	bfa8      	it	ge
 801be18:	4606      	movge	r6, r0
 801be1a:	e753      	b.n	801bcc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801be1c:	eb0a 0007 	add.w	r0, sl, r7
 801be20:	4427      	add	r7, r4
 801be22:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801be26:	f1bb 0f13 	cmp.w	fp, #19
 801be2a:	bfdc      	itt	le
 801be2c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801be30:	445e      	addle	r6, fp
 801be32:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801be36:	bfd8      	it	le
 801be38:	b236      	sxthle	r6, r6
 801be3a:	f7f8 feaa 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801be42:	2800      	cmp	r0, #0
 801be44:	f47f af1a 	bne.w	801bc7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801be48:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801be4c:	fa1f fb8b 	uxth.w	fp, fp
 801be50:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801be54:	1ab6      	subs	r6, r6, r2
 801be56:	4829      	ldr	r0, [pc, #164]	@ (801befc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801be58:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801be5c:	2e14      	cmp	r6, #20
 801be5e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801be62:	6800      	ldr	r0, [r0, #0]
 801be64:	bfa8      	it	ge
 801be66:	2614      	movge	r6, #20
 801be68:	f8ad 101c 	strh.w	r1, [sp, #28]
 801be6c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801be70:	b289      	uxth	r1, r1
 801be72:	f8ad 3020 	strh.w	r3, [sp, #32]
 801be76:	b2b6      	uxth	r6, r6
 801be78:	f8d0 c000 	ldr.w	ip, [r0]
 801be7c:	b292      	uxth	r2, r2
 801be7e:	455e      	cmp	r6, fp
 801be80:	bf94      	ite	ls
 801be82:	9600      	strls	r6, [sp, #0]
 801be84:	f8cd b000 	strhi.w	fp, [sp]
 801be88:	b29b      	uxth	r3, r3
 801be8a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801be8e:	47b0      	blx	r6
 801be90:	6823      	ldr	r3, [r4, #0]
 801be92:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801be96:	a907      	add	r1, sp, #28
 801be98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be9a:	4620      	mov	r0, r4
 801be9c:	4798      	blx	r3
 801be9e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801bea2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801bea6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801beaa:	1a5b      	subs	r3, r3, r1
 801beac:	440a      	add	r2, r1
 801beae:	b21b      	sxth	r3, r3
 801beb0:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801beb4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801beb8:	2b00      	cmp	r3, #0
 801beba:	f47f aeda 	bne.w	801bc72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801bebe:	fa1f f189 	uxth.w	r1, r9
 801bec2:	4650      	mov	r0, sl
 801bec4:	f7ff f9e8 	bl	801b298 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bec8:	e6d3      	b.n	801bc72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801beca:	882e      	ldrh	r6, [r5, #0]
 801becc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bed0:	42b3      	cmp	r3, r6
 801bed2:	f67f ae98 	bls.w	801bc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bed6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801beda:	ab07      	add	r3, sp, #28
 801bedc:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bee0:	6851      	ldr	r1, [r2, #4]
 801bee2:	c303      	stmia	r3!, {r0, r1}
 801bee4:	a807      	add	r0, sp, #28
 801bee6:	f7f8 fe54 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801beea:	b920      	cbnz	r0, 801bef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801beec:	6823      	ldr	r3, [r4, #0]
 801beee:	a907      	add	r1, sp, #28
 801bef0:	4620      	mov	r0, r4
 801bef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bef4:	4798      	blx	r3
 801bef6:	3601      	adds	r6, #1
 801bef8:	b2b6      	uxth	r6, r6
 801befa:	e7e7      	b.n	801becc <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801befc:	200122c4 	.word	0x200122c4

0801bf00 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801bf00:	4b03      	ldr	r3, [pc, #12]	@ (801bf10 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801bf02:	2200      	movs	r2, #0
 801bf04:	801a      	strh	r2, [r3, #0]
 801bf06:	805a      	strh	r2, [r3, #2]
 801bf08:	809a      	strh	r2, [r3, #4]
 801bf0a:	80da      	strh	r2, [r3, #6]
 801bf0c:	4770      	bx	lr
 801bf0e:	bf00      	nop
 801bf10:	20012310 	.word	0x20012310

0801bf14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf18:	b09d      	sub	sp, #116	@ 0x74
 801bf1a:	4606      	mov	r6, r0
 801bf1c:	4614      	mov	r4, r2
 801bf1e:	468a      	mov	sl, r1
 801bf20:	a803      	add	r0, sp, #12
 801bf22:	461d      	mov	r5, r3
 801bf24:	f000 fea0 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 801bf28:	6833      	ldr	r3, [r6, #0]
 801bf2a:	4630      	mov	r0, r6
 801bf2c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801bf30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf32:	4798      	blx	r3
 801bf34:	6833      	ldr	r3, [r6, #0]
 801bf36:	4607      	mov	r7, r0
 801bf38:	4630      	mov	r0, r6
 801bf3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf3c:	4798      	blx	r3
 801bf3e:	462a      	mov	r2, r5
 801bf40:	2500      	movs	r5, #0
 801bf42:	4621      	mov	r1, r4
 801bf44:	9000      	str	r0, [sp, #0]
 801bf46:	463b      	mov	r3, r7
 801bf48:	462c      	mov	r4, r5
 801bf4a:	46a9      	mov	r9, r5
 801bf4c:	46a8      	mov	r8, r5
 801bf4e:	a803      	add	r0, sp, #12
 801bf50:	f000 fee5 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bf54:	2300      	movs	r3, #0
 801bf56:	9302      	str	r3, [sp, #8]
 801bf58:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801bf5c:	429c      	cmp	r4, r3
 801bf5e:	d002      	beq.n	801bf66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801bf60:	455c      	cmp	r4, fp
 801bf62:	bf18      	it	ne
 801bf64:	4625      	movne	r5, r4
 801bf66:	ab02      	add	r3, sp, #8
 801bf68:	4632      	mov	r2, r6
 801bf6a:	4651      	mov	r1, sl
 801bf6c:	a803      	add	r0, sp, #12
 801bf6e:	f001 fa09 	bl	801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bf72:	4604      	mov	r4, r0
 801bf74:	b108      	cbz	r0, 801bf7a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801bf76:	280a      	cmp	r0, #10
 801bf78:	d10a      	bne.n	801bf90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801bf7a:	45c1      	cmp	r9, r8
 801bf7c:	bf38      	it	cc
 801bf7e:	46c1      	movcc	r9, r8
 801bf80:	f04f 0800 	mov.w	r8, #0
 801bf84:	2c00      	cmp	r4, #0
 801bf86:	d1e5      	bne.n	801bf54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bf88:	4648      	mov	r0, r9
 801bf8a:	b01d      	add	sp, #116	@ 0x74
 801bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf90:	9a02      	ldr	r2, [sp, #8]
 801bf92:	2a00      	cmp	r2, #0
 801bf94:	d0de      	beq.n	801bf54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bf96:	7b57      	ldrb	r7, [r2, #13]
 801bf98:	4629      	mov	r1, r5
 801bf9a:	6833      	ldr	r3, [r6, #0]
 801bf9c:	007f      	lsls	r7, r7, #1
 801bf9e:	8894      	ldrh	r4, [r2, #4]
 801bfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bfa2:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801bfa6:	7a97      	ldrb	r7, [r2, #10]
 801bfa8:	4307      	orrs	r7, r0
 801bfaa:	4630      	mov	r0, r6
 801bfac:	4798      	blx	r3
 801bfae:	4438      	add	r0, r7
 801bfb0:	4480      	add	r8, r0
 801bfb2:	fa1f f888 	uxth.w	r8, r8
 801bfb6:	e7e5      	b.n	801bf84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801bfb8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801bfb8:	b508      	push	{r3, lr}
 801bfba:	6803      	ldr	r3, [r0, #0]
 801bfbc:	68db      	ldr	r3, [r3, #12]
 801bfbe:	4798      	blx	r3
 801bfc0:	b128      	cbz	r0, 801bfce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801bfc2:	7b43      	ldrb	r3, [r0, #13]
 801bfc4:	7a80      	ldrb	r0, [r0, #10]
 801bfc6:	005b      	lsls	r3, r3, #1
 801bfc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bfcc:	4318      	orrs	r0, r3
 801bfce:	bd08      	pop	{r3, pc}

0801bfd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801bfd0:	b40e      	push	{r1, r2, r3}
 801bfd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfd4:	b09e      	sub	sp, #120	@ 0x78
 801bfd6:	4605      	mov	r5, r0
 801bfd8:	ab23      	add	r3, sp, #140	@ 0x8c
 801bfda:	a805      	add	r0, sp, #20
 801bfdc:	f853 4b04 	ldr.w	r4, [r3], #4
 801bfe0:	9303      	str	r3, [sp, #12]
 801bfe2:	f000 fe41 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 801bfe6:	682b      	ldr	r3, [r5, #0]
 801bfe8:	4628      	mov	r0, r5
 801bfea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfec:	4798      	blx	r3
 801bfee:	682b      	ldr	r3, [r5, #0]
 801bff0:	4606      	mov	r6, r0
 801bff2:	4628      	mov	r0, r5
 801bff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bff6:	4798      	blx	r3
 801bff8:	4633      	mov	r3, r6
 801bffa:	4621      	mov	r1, r4
 801bffc:	ae1e      	add	r6, sp, #120	@ 0x78
 801bffe:	2400      	movs	r4, #0
 801c000:	9000      	str	r0, [sp, #0]
 801c002:	9a03      	ldr	r2, [sp, #12]
 801c004:	a805      	add	r0, sp, #20
 801c006:	f000 fe8a 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c00a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c00e:	462a      	mov	r2, r5
 801c010:	4633      	mov	r3, r6
 801c012:	4621      	mov	r1, r4
 801c014:	a805      	add	r0, sp, #20
 801c016:	f001 f9b5 	bl	801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c01a:	b300      	cbz	r0, 801c05e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c01c:	280a      	cmp	r0, #10
 801c01e:	d01a      	beq.n	801c056 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c020:	9f04      	ldr	r7, [sp, #16]
 801c022:	b1c7      	cbz	r7, 801c056 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c024:	7b78      	ldrb	r0, [r7, #13]
 801c026:	7a3b      	ldrb	r3, [r7, #8]
 801c028:	00c1      	lsls	r1, r0, #3
 801c02a:	88ea      	ldrh	r2, [r5, #6]
 801c02c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c030:	4319      	orrs	r1, r3
 801c032:	0643      	lsls	r3, r0, #25
 801c034:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c038:	bf48      	it	mi
 801c03a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801c03e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c042:	bf48      	it	mi
 801c044:	b219      	sxthmi	r1, r3
 801c046:	79fb      	ldrb	r3, [r7, #7]
 801c048:	4303      	orrs	r3, r0
 801c04a:	4413      	add	r3, r2
 801c04c:	1a5b      	subs	r3, r3, r1
 801c04e:	b21b      	sxth	r3, r3
 801c050:	429c      	cmp	r4, r3
 801c052:	bfb8      	it	lt
 801c054:	461c      	movlt	r4, r3
 801c056:	4633      	mov	r3, r6
 801c058:	462a      	mov	r2, r5
 801c05a:	2100      	movs	r1, #0
 801c05c:	e7da      	b.n	801c014 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c05e:	b2a0      	uxth	r0, r4
 801c060:	b01e      	add	sp, #120	@ 0x78
 801c062:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c066:	b003      	add	sp, #12
 801c068:	4770      	bx	lr

0801c06a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c06a:	7a43      	ldrb	r3, [r0, #9]
 801c06c:	8880      	ldrh	r0, [r0, #4]
 801c06e:	4418      	add	r0, r3
 801c070:	b280      	uxth	r0, r0
 801c072:	4770      	bx	lr

0801c074 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c074:	6803      	ldr	r3, [r0, #0]
 801c076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c078:	4718      	bx	r3

0801c07a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c07a:	b40e      	push	{r1, r2, r3}
 801c07c:	b570      	push	{r4, r5, r6, lr}
 801c07e:	b09d      	sub	sp, #116	@ 0x74
 801c080:	4604      	mov	r4, r0
 801c082:	ab21      	add	r3, sp, #132	@ 0x84
 801c084:	a803      	add	r0, sp, #12
 801c086:	f853 5b04 	ldr.w	r5, [r3], #4
 801c08a:	9302      	str	r3, [sp, #8]
 801c08c:	f000 fdec 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 801c090:	6823      	ldr	r3, [r4, #0]
 801c092:	4620      	mov	r0, r4
 801c094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c096:	4798      	blx	r3
 801c098:	6823      	ldr	r3, [r4, #0]
 801c09a:	4606      	mov	r6, r0
 801c09c:	4620      	mov	r0, r4
 801c09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c0a0:	2401      	movs	r4, #1
 801c0a2:	4798      	blx	r3
 801c0a4:	4633      	mov	r3, r6
 801c0a6:	9000      	str	r0, [sp, #0]
 801c0a8:	4629      	mov	r1, r5
 801c0aa:	9a02      	ldr	r2, [sp, #8]
 801c0ac:	a803      	add	r0, sp, #12
 801c0ae:	f000 fe36 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c0b2:	a803      	add	r0, sp, #12
 801c0b4:	f001 fa32 	bl	801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c0b8:	b2a3      	uxth	r3, r4
 801c0ba:	b138      	cbz	r0, 801c0cc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c0bc:	280a      	cmp	r0, #10
 801c0be:	a803      	add	r0, sp, #12
 801c0c0:	bf04      	itt	eq
 801c0c2:	3301      	addeq	r3, #1
 801c0c4:	b21c      	sxtheq	r4, r3
 801c0c6:	f001 fa29 	bl	801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c0ca:	e7f5      	b.n	801c0b8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	b01d      	add	sp, #116	@ 0x74
 801c0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0d4:	b003      	add	sp, #12
 801c0d6:	4770      	bx	lr

0801c0d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c0d8:	b40e      	push	{r1, r2, r3}
 801c0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0dc:	b09e      	sub	sp, #120	@ 0x78
 801c0de:	4604      	mov	r4, r0
 801c0e0:	ab23      	add	r3, sp, #140	@ 0x8c
 801c0e2:	a805      	add	r0, sp, #20
 801c0e4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c0e8:	9303      	str	r3, [sp, #12]
 801c0ea:	f000 fdbd 	bl	801cc68 <_ZN8touchgfx12TextProviderC1Ev>
 801c0ee:	6823      	ldr	r3, [r4, #0]
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0f4:	4798      	blx	r3
 801c0f6:	6823      	ldr	r3, [r4, #0]
 801c0f8:	4606      	mov	r6, r0
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c0fe:	4798      	blx	r3
 801c100:	4633      	mov	r3, r6
 801c102:	4629      	mov	r1, r5
 801c104:	9000      	str	r0, [sp, #0]
 801c106:	9a03      	ldr	r2, [sp, #12]
 801c108:	a805      	add	r0, sp, #20
 801c10a:	f000 fe08 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c10e:	ad1e      	add	r5, sp, #120	@ 0x78
 801c110:	2100      	movs	r1, #0
 801c112:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801c116:	4622      	mov	r2, r4
 801c118:	a805      	add	r0, sp, #20
 801c11a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c11e:	462b      	mov	r3, r5
 801c120:	f001 f930 	bl	801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c124:	b1d8      	cbz	r0, 801c15e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c126:	280a      	cmp	r0, #10
 801c128:	d012      	beq.n	801c150 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c12a:	9804      	ldr	r0, [sp, #16]
 801c12c:	b180      	cbz	r0, 801c150 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c12e:	7b47      	ldrb	r7, [r0, #13]
 801c130:	88e2      	ldrh	r2, [r4, #6]
 801c132:	00fb      	lsls	r3, r7, #3
 801c134:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c138:	7a03      	ldrb	r3, [r0, #8]
 801c13a:	430b      	orrs	r3, r1
 801c13c:	0679      	lsls	r1, r7, #25
 801c13e:	bf44      	itt	mi
 801c140:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c144:	b21b      	sxthmi	r3, r3
 801c146:	1ad3      	subs	r3, r2, r3
 801c148:	b21b      	sxth	r3, r3
 801c14a:	429e      	cmp	r6, r3
 801c14c:	bfa8      	it	ge
 801c14e:	461e      	movge	r6, r3
 801c150:	462b      	mov	r3, r5
 801c152:	4622      	mov	r2, r4
 801c154:	2100      	movs	r1, #0
 801c156:	a805      	add	r0, sp, #20
 801c158:	f001 f914 	bl	801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c15c:	e7e2      	b.n	801c124 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c15e:	4630      	mov	r0, r6
 801c160:	b01e      	add	sp, #120	@ 0x78
 801c162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c166:	b003      	add	sp, #12
 801c168:	4770      	bx	lr

0801c16a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c16a:	b513      	push	{r0, r1, r4, lr}
 801c16c:	6803      	ldr	r3, [r0, #0]
 801c16e:	2400      	movs	r4, #0
 801c170:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c174:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c178:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c17c:	4669      	mov	r1, sp
 801c17e:	691b      	ldr	r3, [r3, #16]
 801c180:	9400      	str	r4, [sp, #0]
 801c182:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c186:	4798      	blx	r3
 801c188:	b002      	add	sp, #8
 801c18a:	bd10      	pop	{r4, pc}

0801c18c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c18c:	b538      	push	{r3, r4, r5, lr}
 801c18e:	680b      	ldr	r3, [r1, #0]
 801c190:	460c      	mov	r4, r1
 801c192:	4605      	mov	r5, r0
 801c194:	68db      	ldr	r3, [r3, #12]
 801c196:	4798      	blx	r3
 801c198:	6823      	ldr	r3, [r4, #0]
 801c19a:	4620      	mov	r0, r4
 801c19c:	4629      	mov	r1, r5
 801c19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1a0:	4798      	blx	r3
 801c1a2:	4628      	mov	r0, r5
 801c1a4:	bd38      	pop	{r3, r4, r5, pc}

0801c1a6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c1a6:	b410      	push	{r4}
 801c1a8:	880a      	ldrh	r2, [r1, #0]
 801c1aa:	8884      	ldrh	r4, [r0, #4]
 801c1ac:	4422      	add	r2, r4
 801c1ae:	800a      	strh	r2, [r1, #0]
 801c1b0:	884a      	ldrh	r2, [r1, #2]
 801c1b2:	88c4      	ldrh	r4, [r0, #6]
 801c1b4:	4422      	add	r2, r4
 801c1b6:	804a      	strh	r2, [r1, #2]
 801c1b8:	6940      	ldr	r0, [r0, #20]
 801c1ba:	b120      	cbz	r0, 801c1c6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c1bc:	6803      	ldr	r3, [r0, #0]
 801c1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1c4:	4718      	bx	r3
 801c1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1ca:	4770      	bx	lr

0801c1cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c1cc:	b570      	push	{r4, r5, r6, lr}
 801c1ce:	8882      	ldrh	r2, [r0, #4]
 801c1d0:	460c      	mov	r4, r1
 801c1d2:	880b      	ldrh	r3, [r1, #0]
 801c1d4:	4605      	mov	r5, r0
 801c1d6:	4413      	add	r3, r2
 801c1d8:	800b      	strh	r3, [r1, #0]
 801c1da:	884b      	ldrh	r3, [r1, #2]
 801c1dc:	88c2      	ldrh	r2, [r0, #6]
 801c1de:	4413      	add	r3, r2
 801c1e0:	804b      	strh	r3, [r1, #2]
 801c1e2:	1d01      	adds	r1, r0, #4
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	f7f8 fc91 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801c1ea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	dd0b      	ble.n	801c20a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c1f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	dd07      	ble.n	801c20a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c1fa:	6968      	ldr	r0, [r5, #20]
 801c1fc:	b128      	cbz	r0, 801c20a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c1fe:	6803      	ldr	r3, [r0, #0]
 801c200:	4621      	mov	r1, r4
 801c202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c208:	4718      	bx	r3
 801c20a:	bd70      	pop	{r4, r5, r6, pc}

0801c20c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c20c:	b570      	push	{r4, r5, r6, lr}
 801c20e:	8882      	ldrh	r2, [r0, #4]
 801c210:	460c      	mov	r4, r1
 801c212:	880b      	ldrh	r3, [r1, #0]
 801c214:	4605      	mov	r5, r0
 801c216:	4413      	add	r3, r2
 801c218:	800b      	strh	r3, [r1, #0]
 801c21a:	884b      	ldrh	r3, [r1, #2]
 801c21c:	88c2      	ldrh	r2, [r0, #6]
 801c21e:	4413      	add	r3, r2
 801c220:	804b      	strh	r3, [r1, #2]
 801c222:	1d01      	adds	r1, r0, #4
 801c224:	4620      	mov	r0, r4
 801c226:	f7f8 fc71 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801c22a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	dd19      	ble.n	801c266 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c232:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c236:	2b00      	cmp	r3, #0
 801c238:	dd15      	ble.n	801c266 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c23a:	6968      	ldr	r0, [r5, #20]
 801c23c:	b128      	cbz	r0, 801c24a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c23e:	6803      	ldr	r3, [r0, #0]
 801c240:	4621      	mov	r1, r4
 801c242:	691b      	ldr	r3, [r3, #16]
 801c244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c248:	4718      	bx	r3
 801c24a:	4b07      	ldr	r3, [pc, #28]	@ (801c268 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	3304      	adds	r3, #4
 801c250:	429d      	cmp	r5, r3
 801c252:	d108      	bne.n	801c266 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c254:	f7fe fe9e 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 801c258:	6803      	ldr	r3, [r0, #0]
 801c25a:	6821      	ldr	r1, [r4, #0]
 801c25c:	6862      	ldr	r2, [r4, #4]
 801c25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c264:	4718      	bx	r3
 801c266:	bd70      	pop	{r4, r5, r6, pc}
 801c268:	20012308 	.word	0x20012308

0801c26c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c26c:	b570      	push	{r4, r5, r6, lr}
 801c26e:	4604      	mov	r4, r0
 801c270:	4616      	mov	r6, r2
 801c272:	460d      	mov	r5, r1
 801c274:	b901      	cbnz	r1, 801c278 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c276:	b192      	cbz	r2, 801c29e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c278:	6823      	ldr	r3, [r4, #0]
 801c27a:	4620      	mov	r0, r4
 801c27c:	699b      	ldr	r3, [r3, #24]
 801c27e:	4798      	blx	r3
 801c280:	88e2      	ldrh	r2, [r4, #6]
 801c282:	88a1      	ldrh	r1, [r4, #4]
 801c284:	4620      	mov	r0, r4
 801c286:	4432      	add	r2, r6
 801c288:	4429      	add	r1, r5
 801c28a:	b212      	sxth	r2, r2
 801c28c:	b209      	sxth	r1, r1
 801c28e:	f7ee fa84 	bl	800a79a <_ZN8touchgfx8Drawable5setXYEss>
 801c292:	6823      	ldr	r3, [r4, #0]
 801c294:	4620      	mov	r0, r4
 801c296:	699b      	ldr	r3, [r3, #24]
 801c298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c29c:	4718      	bx	r3
 801c29e:	bd70      	pop	{r4, r5, r6, pc}

0801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c2a0:	b510      	push	{r4, lr}
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	4608      	mov	r0, r1
 801c2a8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c2ac:	8023      	strh	r3, [r4, #0]
 801c2ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c2b2:	8063      	strh	r3, [r4, #2]
 801c2b4:	6803      	ldr	r3, [r0, #0]
 801c2b6:	80a1      	strh	r1, [r4, #4]
 801c2b8:	4621      	mov	r1, r4
 801c2ba:	80e2      	strh	r2, [r4, #6]
 801c2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2be:	4798      	blx	r3
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	bd10      	pop	{r4, pc}

0801c2c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c2c4:	b530      	push	{r4, r5, lr}
 801c2c6:	8083      	strh	r3, [r0, #4]
 801c2c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c2cc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c2d0:	80c3      	strh	r3, [r0, #6]
 801c2d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c2d6:	6141      	str	r1, [r0, #20]
 801c2d8:	7203      	strb	r3, [r0, #8]
 801c2da:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c2de:	8302      	strh	r2, [r0, #24]
 801c2e0:	7243      	strb	r3, [r0, #9]
 801c2e2:	7a83      	ldrb	r3, [r0, #10]
 801c2e4:	f365 0306 	bfi	r3, r5, #0, #7
 801c2e8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c2ec:	f365 13c7 	bfi	r3, r5, #7, #1
 801c2f0:	7283      	strb	r3, [r0, #10]
 801c2f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c2f6:	72c3      	strb	r3, [r0, #11]
 801c2f8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c2fc:	7303      	strb	r3, [r0, #12]
 801c2fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c302:	81c3      	strh	r3, [r0, #14]
 801c304:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c308:	8203      	strh	r3, [r0, #16]
 801c30a:	4b01      	ldr	r3, [pc, #4]	@ (801c310 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c30c:	6003      	str	r3, [r0, #0]
 801c30e:	bd30      	pop	{r4, r5, pc}
 801c310:	080322b4 	.word	0x080322b4

0801c314 <_ZNK8touchgfx9ConstFont4findEt>:
 801c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c316:	6944      	ldr	r4, [r0, #20]
 801c318:	b3bc      	cbz	r4, 801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c31a:	88a3      	ldrh	r3, [r4, #4]
 801c31c:	8b02      	ldrh	r2, [r0, #24]
 801c31e:	1acb      	subs	r3, r1, r3
 801c320:	f102 32ff 	add.w	r2, r2, #4294967295
 801c324:	d431      	bmi.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c326:	4293      	cmp	r3, r2
 801c328:	dd0c      	ble.n	801c344 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c32a:	230e      	movs	r3, #14
 801c32c:	fb03 4302 	mla	r3, r3, r2, r4
 801c330:	889b      	ldrh	r3, [r3, #4]
 801c332:	1a5b      	subs	r3, r3, r1
 801c334:	1ad3      	subs	r3, r2, r3
 801c336:	429a      	cmp	r2, r3
 801c338:	db27      	blt.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	bfbc      	itt	lt
 801c33e:	2302      	movlt	r3, #2
 801c340:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c344:	2500      	movs	r5, #0
 801c346:	260e      	movs	r6, #14
 801c348:	4295      	cmp	r5, r2
 801c34a:	dc1e      	bgt.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c34c:	fb06 4003 	mla	r0, r6, r3, r4
 801c350:	8887      	ldrh	r7, [r0, #4]
 801c352:	42b9      	cmp	r1, r7
 801c354:	d01a      	beq.n	801c38c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c356:	d20d      	bcs.n	801c374 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c358:	1e5a      	subs	r2, r3, #1
 801c35a:	4295      	cmp	r5, r2
 801c35c:	dc15      	bgt.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c35e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c362:	1a5b      	subs	r3, r3, r1
 801c364:	1ad3      	subs	r3, r2, r3
 801c366:	429a      	cmp	r2, r3
 801c368:	db0f      	blt.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c36a:	429d      	cmp	r5, r3
 801c36c:	ddec      	ble.n	801c348 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c36e:	1953      	adds	r3, r2, r5
 801c370:	105b      	asrs	r3, r3, #1
 801c372:	e7e9      	b.n	801c348 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c374:	1c5d      	adds	r5, r3, #1
 801c376:	42aa      	cmp	r2, r5
 801c378:	db07      	blt.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c37a:	8a43      	ldrh	r3, [r0, #18]
 801c37c:	1acb      	subs	r3, r1, r3
 801c37e:	442b      	add	r3, r5
 801c380:	429d      	cmp	r5, r3
 801c382:	dc02      	bgt.n	801c38a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c384:	429a      	cmp	r2, r3
 801c386:	dadf      	bge.n	801c348 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c388:	e7f1      	b.n	801c36e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c38a:	2000      	movs	r0, #0
 801c38c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c38e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c390:	4604      	mov	r4, r0
 801c392:	4617      	mov	r7, r2
 801c394:	461e      	mov	r6, r3
 801c396:	b911      	cbnz	r1, 801c39e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c398:	2500      	movs	r5, #0
 801c39a:	4628      	mov	r0, r5
 801c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c39e:	290a      	cmp	r1, #10
 801c3a0:	d0fa      	beq.n	801c398 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c3a2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801c3a6:	4291      	cmp	r1, r2
 801c3a8:	d0f6      	beq.n	801c398 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c3aa:	f242 020b 	movw	r2, #8203	@ 0x200b
 801c3ae:	4291      	cmp	r1, r2
 801c3b0:	d0f2      	beq.n	801c398 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c3b2:	f7ff ffaf 	bl	801c314 <_ZNK8touchgfx9ConstFont4findEt>
 801c3b6:	4605      	mov	r5, r0
 801c3b8:	b950      	cbnz	r0, 801c3d0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c3ba:	6823      	ldr	r3, [r4, #0]
 801c3bc:	4620      	mov	r0, r4
 801c3be:	691b      	ldr	r3, [r3, #16]
 801c3c0:	4798      	blx	r3
 801c3c2:	4601      	mov	r1, r0
 801c3c4:	4620      	mov	r0, r4
 801c3c6:	f7ff ffa5 	bl	801c314 <_ZNK8touchgfx9ConstFont4findEt>
 801c3ca:	4605      	mov	r5, r0
 801c3cc:	2800      	cmp	r0, #0
 801c3ce:	d0e3      	beq.n	801c398 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c3d0:	6823      	ldr	r3, [r4, #0]
 801c3d2:	4629      	mov	r1, r5
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c3d8:	4798      	blx	r3
 801c3da:	6038      	str	r0, [r7, #0]
 801c3dc:	6823      	ldr	r3, [r4, #0]
 801c3de:	4620      	mov	r0, r4
 801c3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c3e2:	4798      	blx	r3
 801c3e4:	7030      	strb	r0, [r6, #0]
 801c3e6:	e7d8      	b.n	801c39a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c3e8 <_ZN8touchgfx4clzuEm>:
 801c3e8:	4603      	mov	r3, r0
 801c3ea:	b1c8      	cbz	r0, 801c420 <_ZN8touchgfx4clzuEm+0x38>
 801c3ec:	0c02      	lsrs	r2, r0, #16
 801c3ee:	0412      	lsls	r2, r2, #16
 801c3f0:	b9a2      	cbnz	r2, 801c41c <_ZN8touchgfx4clzuEm+0x34>
 801c3f2:	0403      	lsls	r3, r0, #16
 801c3f4:	2010      	movs	r0, #16
 801c3f6:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801c3fa:	bf04      	itt	eq
 801c3fc:	021b      	lsleq	r3, r3, #8
 801c3fe:	3008      	addeq	r0, #8
 801c400:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801c404:	bf04      	itt	eq
 801c406:	011b      	lsleq	r3, r3, #4
 801c408:	3004      	addeq	r0, #4
 801c40a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801c40e:	bf04      	itt	eq
 801c410:	009b      	lsleq	r3, r3, #2
 801c412:	3002      	addeq	r0, #2
 801c414:	2b00      	cmp	r3, #0
 801c416:	db04      	blt.n	801c422 <_ZN8touchgfx4clzuEm+0x3a>
 801c418:	3001      	adds	r0, #1
 801c41a:	4770      	bx	lr
 801c41c:	2000      	movs	r0, #0
 801c41e:	e7ea      	b.n	801c3f6 <_ZN8touchgfx4clzuEm+0xe>
 801c420:	2020      	movs	r0, #32
 801c422:	4770      	bx	lr

0801c424 <_ZN8touchgfx7muldivuEmmmRm>:
 801c424:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c428:	460f      	mov	r7, r1
 801c42a:	4615      	mov	r5, r2
 801c42c:	461e      	mov	r6, r3
 801c42e:	4601      	mov	r1, r0
 801c430:	b100      	cbz	r0, 801c434 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801c432:	b927      	cbnz	r7, 801c43e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801c434:	2000      	movs	r0, #0
 801c436:	6030      	str	r0, [r6, #0]
 801c438:	b002      	add	sp, #8
 801c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c43e:	f7ff ffd3 	bl	801c3e8 <_ZN8touchgfx4clzuEm>
 801c442:	b980      	cbnz	r0, 801c466 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801c444:	4638      	mov	r0, r7
 801c446:	f7ff ffcf 	bl	801c3e8 <_ZN8touchgfx4clzuEm>
 801c44a:	2800      	cmp	r0, #0
 801c44c:	dd05      	ble.n	801c45a <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801c44e:	4633      	mov	r3, r6
 801c450:	462a      	mov	r2, r5
 801c452:	4638      	mov	r0, r7
 801c454:	f7ff ffe6 	bl	801c424 <_ZN8touchgfx7muldivuEmmmRm>
 801c458:	e7ee      	b.n	801c438 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c45a:	f04f 33ff 	mov.w	r3, #4294967295
 801c45e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c462:	6033      	str	r3, [r6, #0]
 801c464:	e7e8      	b.n	801c438 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c466:	fa37 f800 	lsrs.w	r8, r7, r0
 801c46a:	fb07 f301 	mul.w	r3, r7, r1
 801c46e:	d105      	bne.n	801c47c <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801c470:	fbb3 f0f5 	udiv	r0, r3, r5
 801c474:	fb05 3510 	mls	r5, r5, r0, r3
 801c478:	6035      	str	r5, [r6, #0]
 801c47a:	e7dd      	b.n	801c438 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c47c:	2301      	movs	r3, #1
 801c47e:	fa01 fa00 	lsl.w	sl, r1, r0
 801c482:	462a      	mov	r2, r5
 801c484:	fa03 f000 	lsl.w	r0, r3, r0
 801c488:	4633      	mov	r3, r6
 801c48a:	fbba f9f5 	udiv	r9, sl, r5
 801c48e:	3801      	subs	r0, #1
 801c490:	fb08 f409 	mul.w	r4, r8, r9
 801c494:	4038      	ands	r0, r7
 801c496:	f7ff ffc5 	bl	801c424 <_ZN8touchgfx7muldivuEmmmRm>
 801c49a:	462a      	mov	r2, r5
 801c49c:	4607      	mov	r7, r0
 801c49e:	ab01      	add	r3, sp, #4
 801c4a0:	fb05 a119 	mls	r1, r5, r9, sl
 801c4a4:	4640      	mov	r0, r8
 801c4a6:	f7ff ffbd 	bl	801c424 <_ZN8touchgfx7muldivuEmmmRm>
 801c4aa:	9b01      	ldr	r3, [sp, #4]
 801c4ac:	6832      	ldr	r2, [r6, #0]
 801c4ae:	441a      	add	r2, r3
 801c4b0:	fbb2 f3f5 	udiv	r3, r2, r5
 801c4b4:	441c      	add	r4, r3
 801c4b6:	fb05 2513 	mls	r5, r5, r3, r2
 801c4ba:	443c      	add	r4, r7
 801c4bc:	4420      	add	r0, r4
 801c4be:	e7db      	b.n	801c478 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801c4c0 <_ZN8touchgfx6muldivElllRl>:
 801c4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c4c2:	2800      	cmp	r0, #0
 801c4c4:	461e      	mov	r6, r3
 801c4c6:	bfba      	itte	lt
 801c4c8:	4240      	neglt	r0, r0
 801c4ca:	f04f 34ff 	movlt.w	r4, #4294967295
 801c4ce:	2401      	movge	r4, #1
 801c4d0:	2900      	cmp	r1, #0
 801c4d2:	bfbc      	itt	lt
 801c4d4:	4249      	neglt	r1, r1
 801c4d6:	4264      	neglt	r4, r4
 801c4d8:	2a00      	cmp	r2, #0
 801c4da:	bfb6      	itet	lt
 801c4dc:	4265      	neglt	r5, r4
 801c4de:	4625      	movge	r5, r4
 801c4e0:	4252      	neglt	r2, r2
 801c4e2:	4288      	cmp	r0, r1
 801c4e4:	bfc2      	ittt	gt
 801c4e6:	4603      	movgt	r3, r0
 801c4e8:	4608      	movgt	r0, r1
 801c4ea:	4619      	movgt	r1, r3
 801c4ec:	ab01      	add	r3, sp, #4
 801c4ee:	f7ff ff99 	bl	801c424 <_ZN8touchgfx7muldivuEmmmRm>
 801c4f2:	9b01      	ldr	r3, [sp, #4]
 801c4f4:	4368      	muls	r0, r5
 801c4f6:	435c      	muls	r4, r3
 801c4f8:	6034      	str	r4, [r6, #0]
 801c4fa:	b002      	add	sp, #8
 801c4fc:	bd70      	pop	{r4, r5, r6, pc}

0801c4fe <_ZN8touchgfx6muldivElll>:
 801c4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c500:	4606      	mov	r6, r0
 801c502:	ab01      	add	r3, sp, #4
 801c504:	460d      	mov	r5, r1
 801c506:	4614      	mov	r4, r2
 801c508:	f7ff ffda 	bl	801c4c0 <_ZN8touchgfx6muldivElllRl>
 801c50c:	2e00      	cmp	r6, #0
 801c50e:	db20      	blt.n	801c552 <_ZN8touchgfx6muldivElll+0x54>
 801c510:	bf14      	ite	ne
 801c512:	2301      	movne	r3, #1
 801c514:	2300      	moveq	r3, #0
 801c516:	2d00      	cmp	r5, #0
 801c518:	db1e      	blt.n	801c558 <_ZN8touchgfx6muldivElll+0x5a>
 801c51a:	bf14      	ite	ne
 801c51c:	2201      	movne	r2, #1
 801c51e:	2200      	moveq	r2, #0
 801c520:	2c00      	cmp	r4, #0
 801c522:	fb03 f202 	mul.w	r2, r3, r2
 801c526:	db1a      	blt.n	801c55e <_ZN8touchgfx6muldivElll+0x60>
 801c528:	bf14      	ite	ne
 801c52a:	2301      	movne	r3, #1
 801c52c:	2300      	moveq	r3, #0
 801c52e:	4353      	muls	r3, r2
 801c530:	2b01      	cmp	r3, #1
 801c532:	d117      	bne.n	801c564 <_ZN8touchgfx6muldivElll+0x66>
 801c534:	2c00      	cmp	r4, #0
 801c536:	9b01      	ldr	r3, [sp, #4]
 801c538:	bfb8      	it	lt
 801c53a:	4264      	neglt	r4, r4
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	f104 0401 	add.w	r4, r4, #1
 801c542:	bfb8      	it	lt
 801c544:	425b      	neglt	r3, r3
 801c546:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c54a:	db00      	blt.n	801c54e <_ZN8touchgfx6muldivElll+0x50>
 801c54c:	3001      	adds	r0, #1
 801c54e:	b002      	add	sp, #8
 801c550:	bd70      	pop	{r4, r5, r6, pc}
 801c552:	f04f 33ff 	mov.w	r3, #4294967295
 801c556:	e7de      	b.n	801c516 <_ZN8touchgfx6muldivElll+0x18>
 801c558:	f04f 32ff 	mov.w	r2, #4294967295
 801c55c:	e7e0      	b.n	801c520 <_ZN8touchgfx6muldivElll+0x22>
 801c55e:	f04f 33ff 	mov.w	r3, #4294967295
 801c562:	e7e4      	b.n	801c52e <_ZN8touchgfx6muldivElll+0x30>
 801c564:	3301      	adds	r3, #1
 801c566:	d1f2      	bne.n	801c54e <_ZN8touchgfx6muldivElll+0x50>
 801c568:	9b01      	ldr	r3, [sp, #4]
 801c56a:	2c00      	cmp	r4, #0
 801c56c:	bfb8      	it	lt
 801c56e:	4264      	neglt	r4, r4
 801c570:	2b00      	cmp	r3, #0
 801c572:	bfb8      	it	lt
 801c574:	425b      	neglt	r3, r3
 801c576:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c57a:	bfc8      	it	gt
 801c57c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801c580:	e7e5      	b.n	801c54e <_ZN8touchgfx6muldivElll+0x50>

0801c582 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c582:	2000      	movs	r0, #0
 801c584:	4770      	bx	lr

0801c586 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c586:	2001      	movs	r0, #1
 801c588:	4770      	bx	lr

0801c58a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c58a:	2002      	movs	r0, #2
 801c58c:	4770      	bx	lr

0801c58e <_ZN8touchgfx12GestureEventD1Ev>:
 801c58e:	4770      	bx	lr

0801c590 <_ZN8touchgfx9DragEventD1Ev>:
 801c590:	4770      	bx	lr

0801c592 <_ZN8touchgfx10ClickEventD1Ev>:
 801c592:	4770      	bx	lr

0801c594 <_ZN8touchgfx10ClickEventD0Ev>:
 801c594:	b510      	push	{r4, lr}
 801c596:	4604      	mov	r4, r0
 801c598:	210c      	movs	r1, #12
 801c59a:	f010 fc64 	bl	802ce66 <_ZdlPvj>
 801c59e:	4620      	mov	r0, r4
 801c5a0:	bd10      	pop	{r4, pc}

0801c5a2 <_ZN8touchgfx9DragEventD0Ev>:
 801c5a2:	b510      	push	{r4, lr}
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	2110      	movs	r1, #16
 801c5a8:	f010 fc5d 	bl	802ce66 <_ZdlPvj>
 801c5ac:	4620      	mov	r0, r4
 801c5ae:	bd10      	pop	{r4, pc}

0801c5b0 <_ZN8touchgfx12GestureEventD0Ev>:
 801c5b0:	b510      	push	{r4, lr}
 801c5b2:	4604      	mov	r4, r0
 801c5b4:	210c      	movs	r1, #12
 801c5b6:	f010 fc56 	bl	802ce66 <_ZdlPvj>
 801c5ba:	4620      	mov	r0, r4
 801c5bc:	bd10      	pop	{r4, pc}
	...

0801c5c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c5c0:	b530      	push	{r4, r5, lr}
 801c5c2:	460d      	mov	r5, r1
 801c5c4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c5c6:	b087      	sub	sp, #28
 801c5c8:	4604      	mov	r4, r0
 801c5ca:	b301      	cbz	r1, 801c60e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c5cc:	a801      	add	r0, sp, #4
 801c5ce:	f7ff fe67 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5d2:	892a      	ldrh	r2, [r5, #8]
 801c5d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c5d8:	7928      	ldrb	r0, [r5, #4]
 801c5da:	1ad2      	subs	r2, r2, r3
 801c5dc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801c5de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c5e2:	441a      	add	r2, r3
 801c5e4:	896b      	ldrh	r3, [r5, #10]
 801c5e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c5ea:	f88d 0010 	strb.w	r0, [sp, #16]
 801c5ee:	1b5b      	subs	r3, r3, r5
 801c5f0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801c5f2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c5f4:	442b      	add	r3, r5
 801c5f6:	4d07      	ldr	r5, [pc, #28]	@ (801c614 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c5f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c5fc:	a903      	add	r1, sp, #12
 801c5fe:	9503      	str	r5, [sp, #12]
 801c600:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c604:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c608:	6803      	ldr	r3, [r0, #0]
 801c60a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c60c:	4798      	blx	r3
 801c60e:	b007      	add	sp, #28
 801c610:	bd30      	pop	{r4, r5, pc}
 801c612:	bf00      	nop
 801c614:	08032344 	.word	0x08032344

0801c618 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c61c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c61e:	b08a      	sub	sp, #40	@ 0x28
 801c620:	4604      	mov	r4, r0
 801c622:	460d      	mov	r5, r1
 801c624:	b113      	cbz	r3, 801c62c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c626:	790b      	ldrb	r3, [r1, #4]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d044      	beq.n	801c6b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c62c:	f104 0804 	add.w	r8, r4, #4
 801c630:	a803      	add	r0, sp, #12
 801c632:	4641      	mov	r1, r8
 801c634:	f7ff fe34 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c638:	792b      	ldrb	r3, [r5, #4]
 801c63a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c63e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c642:	b983      	cbnz	r3, 801c666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c644:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801c648:	892a      	ldrh	r2, [r5, #8]
 801c64a:	88e9      	ldrh	r1, [r5, #6]
 801c64c:	4640      	mov	r0, r8
 801c64e:	1b92      	subs	r2, r2, r6
 801c650:	9301      	str	r3, [sp, #4]
 801c652:	1bc9      	subs	r1, r1, r7
 801c654:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801c658:	b212      	sxth	r2, r2
 801c65a:	9300      	str	r3, [sp, #0]
 801c65c:	b209      	sxth	r1, r1
 801c65e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801c662:	f7f8 f971 	bl	8014948 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c666:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c668:	b329      	cbz	r1, 801c6b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c66a:	a805      	add	r0, sp, #20
 801c66c:	f7ff fe18 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c670:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c674:	792b      	ldrb	r3, [r5, #4]
 801c676:	a907      	add	r1, sp, #28
 801c678:	1abf      	subs	r7, r7, r2
 801c67a:	88ea      	ldrh	r2, [r5, #6]
 801c67c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c67e:	4417      	add	r7, r2
 801c680:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801c682:	f88d 3020 	strb.w	r3, [sp, #32]
 801c686:	4417      	add	r7, r2
 801c688:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c68c:	1ab6      	subs	r6, r6, r2
 801c68e:	892a      	ldrh	r2, [r5, #8]
 801c690:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801c694:	4416      	add	r6, r2
 801c696:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c698:	4416      	add	r6, r2
 801c69a:	4a08      	ldr	r2, [pc, #32]	@ (801c6bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c69c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801c6a0:	2600      	movs	r6, #0
 801c6a2:	9207      	str	r2, [sp, #28]
 801c6a4:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801c6a8:	6803      	ldr	r3, [r0, #0]
 801c6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c6ac:	4798      	blx	r3
 801c6ae:	792b      	ldrb	r3, [r5, #4]
 801c6b0:	b10b      	cbz	r3, 801c6b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c6b2:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801c6b6:	b00a      	add	sp, #40	@ 0x28
 801c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6bc:	0803231c 	.word	0x0803231c

0801c6c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6c4:	460c      	mov	r4, r1
 801c6c6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c6c8:	b088      	sub	sp, #32
 801c6ca:	4605      	mov	r5, r0
 801c6cc:	2900      	cmp	r1, #0
 801c6ce:	d06d      	beq.n	801c7ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c6d0:	4668      	mov	r0, sp
 801c6d2:	f7ff fde5 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6d6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801c6d8:	88e3      	ldrh	r3, [r4, #6]
 801c6da:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c6de:	440b      	add	r3, r1
 801c6e0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c6e4:	b21b      	sxth	r3, r3
 801c6e6:	4543      	cmp	r3, r8
 801c6e8:	db31      	blt.n	801c74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c6ea:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c6ee:	44c4      	add	ip, r8
 801c6f0:	fa0f fc8c 	sxth.w	ip, ip
 801c6f4:	4563      	cmp	r3, ip
 801c6f6:	da2a      	bge.n	801c74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c6f8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801c6fa:	8926      	ldrh	r6, [r4, #8]
 801c6fc:	4416      	add	r6, r2
 801c6fe:	b236      	sxth	r6, r6
 801c700:	42be      	cmp	r6, r7
 801c702:	db24      	blt.n	801c74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c704:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c708:	4438      	add	r0, r7
 801c70a:	b200      	sxth	r0, r0
 801c70c:	4286      	cmp	r6, r0
 801c70e:	da1e      	bge.n	801c74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c710:	8963      	ldrh	r3, [r4, #10]
 801c712:	4419      	add	r1, r3
 801c714:	b209      	sxth	r1, r1
 801c716:	4541      	cmp	r1, r8
 801c718:	db08      	blt.n	801c72c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c71a:	4561      	cmp	r1, ip
 801c71c:	da06      	bge.n	801c72c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c71e:	89a3      	ldrh	r3, [r4, #12]
 801c720:	441a      	add	r2, r3
 801c722:	b212      	sxth	r2, r2
 801c724:	42ba      	cmp	r2, r7
 801c726:	db01      	blt.n	801c72c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c728:	4282      	cmp	r2, r0
 801c72a:	db10      	blt.n	801c74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c72c:	4b21      	ldr	r3, [pc, #132]	@ (801c7b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c72e:	a904      	add	r1, sp, #16
 801c730:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c732:	9304      	str	r3, [sp, #16]
 801c734:	2302      	movs	r3, #2
 801c736:	f88d 3014 	strb.w	r3, [sp, #20]
 801c73a:	2300      	movs	r3, #0
 801c73c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c740:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c744:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c748:	6803      	ldr	r3, [r0, #0]
 801c74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c74c:	4798      	blx	r3
 801c74e:	1d29      	adds	r1, r5, #4
 801c750:	a802      	add	r0, sp, #8
 801c752:	f7ff fda5 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c756:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c75a:	88e0      	ldrh	r0, [r4, #6]
 801c75c:	eba3 0808 	sub.w	r8, r3, r8
 801c760:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c764:	7921      	ldrb	r1, [r4, #4]
 801c766:	fa1f f888 	uxth.w	r8, r8
 801c76a:	1bdf      	subs	r7, r3, r7
 801c76c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801c770:	b2bb      	uxth	r3, r7
 801c772:	4440      	add	r0, r8
 801c774:	8922      	ldrh	r2, [r4, #8]
 801c776:	8967      	ldrh	r7, [r4, #10]
 801c778:	4460      	add	r0, ip
 801c77a:	89a4      	ldrh	r4, [r4, #12]
 801c77c:	441a      	add	r2, r3
 801c77e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801c780:	44b8      	add	r8, r7
 801c782:	4423      	add	r3, r4
 801c784:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c788:	4432      	add	r2, r6
 801c78a:	44e0      	add	r8, ip
 801c78c:	4433      	add	r3, r6
 801c78e:	4c0a      	ldr	r4, [pc, #40]	@ (801c7b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c790:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c792:	f88d 1014 	strb.w	r1, [sp, #20]
 801c796:	a904      	add	r1, sp, #16
 801c798:	9404      	str	r4, [sp, #16]
 801c79a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c79e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c7a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c7a6:	6803      	ldr	r3, [r0, #0]
 801c7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c7aa:	4798      	blx	r3
 801c7ac:	b008      	add	sp, #32
 801c7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7b2:	bf00      	nop
 801c7b4:	0803231c 	.word	0x0803231c
 801c7b8:	08032330 	.word	0x08032330

0801c7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c7be:	4604      	mov	r4, r0
 801c7c0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c7c4:	3201      	adds	r2, #1
 801c7c6:	d112      	bne.n	801c7ee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c7c8:	2500      	movs	r5, #0
 801c7ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c7ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c7d2:	6803      	ldr	r3, [r0, #0]
 801c7d4:	9500      	str	r5, [sp, #0]
 801c7d6:	466d      	mov	r5, sp
 801c7d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c7dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c7e0:	4629      	mov	r1, r5
 801c7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7e4:	4798      	blx	r3
 801c7e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c7ea:	e884 0003 	stmia.w	r4, {r0, r1}
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	b003      	add	sp, #12
 801c7f2:	bd30      	pop	{r4, r5, pc}

0801c7f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c7f4:	b513      	push	{r0, r1, r4, lr}
 801c7f6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c7fa:	4604      	mov	r4, r0
 801c7fc:	3301      	adds	r3, #1
 801c7fe:	d109      	bne.n	801c814 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c800:	4601      	mov	r1, r0
 801c802:	4668      	mov	r0, sp
 801c804:	f7ff fd4c 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c808:	f8bd 3000 	ldrh.w	r3, [sp]
 801c80c:	8423      	strh	r3, [r4, #32]
 801c80e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c812:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c814:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c818:	b002      	add	sp, #8
 801c81a:	bd10      	pop	{r4, pc}

0801c81c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c81c:	b513      	push	{r0, r1, r4, lr}
 801c81e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801c822:	4604      	mov	r4, r0
 801c824:	3301      	adds	r3, #1
 801c826:	d109      	bne.n	801c83c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c828:	4601      	mov	r1, r0
 801c82a:	4668      	mov	r0, sp
 801c82c:	f7ff fd38 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c830:	f8bd 3000 	ldrh.w	r3, [sp]
 801c834:	8423      	strh	r3, [r4, #32]
 801c836:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c83a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c83c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801c840:	b002      	add	sp, #8
 801c842:	bd10      	pop	{r4, pc}

0801c844 <_ZN8touchgfx6ScreenC1Ev>:
 801c844:	b570      	push	{r4, r5, r6, lr}
 801c846:	4b17      	ldr	r3, [pc, #92]	@ (801c8a4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c848:	4605      	mov	r5, r0
 801c84a:	4a17      	ldr	r2, [pc, #92]	@ (801c8a8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c84c:	2101      	movs	r1, #1
 801c84e:	f845 3b04 	str.w	r3, [r5], #4
 801c852:	2300      	movs	r3, #0
 801c854:	6042      	str	r2, [r0, #4]
 801c856:	4604      	mov	r4, r0
 801c858:	8103      	strh	r3, [r0, #8]
 801c85a:	8143      	strh	r3, [r0, #10]
 801c85c:	8183      	strh	r3, [r0, #12]
 801c85e:	81c3      	strh	r3, [r0, #14]
 801c860:	8203      	strh	r3, [r0, #16]
 801c862:	8243      	strh	r3, [r0, #18]
 801c864:	8283      	strh	r3, [r0, #20]
 801c866:	82c3      	strh	r3, [r0, #22]
 801c868:	6203      	str	r3, [r0, #32]
 801c86a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801c86c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801c86e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801c872:	6343      	str	r3, [r0, #52]	@ 0x34
 801c874:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801c878:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801c87c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c880:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801c884:	4b09      	ldr	r3, [pc, #36]	@ (801c8ac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c886:	4628      	mov	r0, r5
 801c888:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c88c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801c88e:	4a08      	ldr	r2, [pc, #32]	@ (801c8b0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c890:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c894:	4798      	blx	r3
 801c896:	6863      	ldr	r3, [r4, #4]
 801c898:	4628      	mov	r0, r5
 801c89a:	4631      	mov	r1, r6
 801c89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c89e:	4798      	blx	r3
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	bd70      	pop	{r4, r5, r6, pc}
 801c8a4:	08032358 	.word	0x08032358
 801c8a8:	0803136c 	.word	0x0803136c
 801c8ac:	200122ba 	.word	0x200122ba
 801c8b0:	200122b8 	.word	0x200122b8

0801c8b4 <_ZN8touchgfx6Screen4drawEv>:
 801c8b4:	4b09      	ldr	r3, [pc, #36]	@ (801c8dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c8b6:	b507      	push	{r0, r1, r2, lr}
 801c8b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c8bc:	2100      	movs	r1, #0
 801c8be:	4b08      	ldr	r3, [pc, #32]	@ (801c8e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c8c0:	9100      	str	r1, [sp, #0]
 801c8c2:	4669      	mov	r1, sp
 801c8c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c8c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c8cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c8d0:	6803      	ldr	r3, [r0, #0]
 801c8d2:	689b      	ldr	r3, [r3, #8]
 801c8d4:	4798      	blx	r3
 801c8d6:	b003      	add	sp, #12
 801c8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8dc:	200122b8 	.word	0x200122b8
 801c8e0:	200122ba 	.word	0x200122ba

0801c8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c8ec:	b089      	sub	sp, #36	@ 0x24
 801c8ee:	4680      	mov	r8, r0
 801c8f0:	460c      	mov	r4, r1
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	4615      	mov	r5, r2
 801c8f6:	dd0e      	ble.n	801c916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c8f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	dd0a      	ble.n	801c916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c900:	4628      	mov	r0, r5
 801c902:	f7ff ff5b 	bl	801c7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c906:	4621      	mov	r1, r4
 801c908:	f7fe faac 	bl	801ae64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c90c:	69eb      	ldr	r3, [r5, #28]
 801c90e:	b928      	cbnz	r0, 801c91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c910:	461d      	mov	r5, r3
 801c912:	2b00      	cmp	r3, #0
 801c914:	d1f4      	bne.n	801c900 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c916:	b009      	add	sp, #36	@ 0x24
 801c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c91c:	ae04      	add	r6, sp, #16
 801c91e:	2b00      	cmp	r3, #0
 801c920:	f000 80b5 	beq.w	801ca8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c924:	682b      	ldr	r3, [r5, #0]
 801c926:	4629      	mov	r1, r5
 801c928:	a802      	add	r0, sp, #8
 801c92a:	68db      	ldr	r3, [r3, #12]
 801c92c:	4798      	blx	r3
 801c92e:	4628      	mov	r0, r5
 801c930:	f7ff ff60 	bl	801c7f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c934:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c938:	4407      	add	r7, r0
 801c93a:	4628      	mov	r0, r5
 801c93c:	f7ff ff6e 	bl	801c81c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c940:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c944:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c948:	b23f      	sxth	r7, r7
 801c94a:	4418      	add	r0, r3
 801c94c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c950:	4621      	mov	r1, r4
 801c952:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c956:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c95a:	4630      	mov	r0, r6
 801c95c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c960:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c964:	f7f8 f8d2 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801c968:	4628      	mov	r0, r5
 801c96a:	f7ff ff27 	bl	801c7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c96e:	ab06      	add	r3, sp, #24
 801c970:	4602      	mov	r2, r0
 801c972:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c976:	e883 0003 	stmia.w	r3, {r0, r1}
 801c97a:	4611      	mov	r1, r2
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7f8 f8c5 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801c982:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c986:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c98a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c98e:	4299      	cmp	r1, r3
 801c990:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c994:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c998:	d10b      	bne.n	801c9b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c99a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c99e:	4552      	cmp	r2, sl
 801c9a0:	d107      	bne.n	801c9b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c9a6:	455a      	cmp	r2, fp
 801c9a8:	d103      	bne.n	801c9b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c9ae:	454a      	cmp	r2, r9
 801c9b0:	d06d      	beq.n	801ca8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c9b2:	f1bb 0f00 	cmp.w	fp, #0
 801c9b6:	dd65      	ble.n	801ca84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c9b8:	f1b9 0f00 	cmp.w	r9, #0
 801c9bc:	dd62      	ble.n	801ca84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c9be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c9c2:	fa1f f08a 	uxth.w	r0, sl
 801c9c6:	4552      	cmp	r2, sl
 801c9c8:	9000      	str	r0, [sp, #0]
 801c9ca:	da12      	bge.n	801c9f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c9cc:	9301      	str	r3, [sp, #4]
 801c9ce:	9b00      	ldr	r3, [sp, #0]
 801c9d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c9d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c9d8:	1a9a      	subs	r2, r3, r2
 801c9da:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c9de:	4631      	mov	r1, r6
 801c9e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c9e4:	4640      	mov	r0, r8
 801c9e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c9ea:	69ea      	ldr	r2, [r5, #28]
 801c9ec:	f7ff ff7a 	bl	801c8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c9f0:	9b01      	ldr	r3, [sp, #4]
 801c9f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c9f6:	b29f      	uxth	r7, r3
 801c9f8:	429a      	cmp	r2, r3
 801c9fa:	da0d      	bge.n	801ca18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c9fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca00:	1aba      	subs	r2, r7, r2
 801ca02:	f8ad a012 	strh.w	sl, [sp, #18]
 801ca06:	4631      	mov	r1, r6
 801ca08:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ca0c:	4640      	mov	r0, r8
 801ca0e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ca12:	69ea      	ldr	r2, [r5, #28]
 801ca14:	f7ff ff66 	bl	801c8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca18:	8822      	ldrh	r2, [r4, #0]
 801ca1a:	445f      	add	r7, fp
 801ca1c:	88a3      	ldrh	r3, [r4, #4]
 801ca1e:	b2bf      	uxth	r7, r7
 801ca20:	4413      	add	r3, r2
 801ca22:	b23a      	sxth	r2, r7
 801ca24:	b29b      	uxth	r3, r3
 801ca26:	b219      	sxth	r1, r3
 801ca28:	4291      	cmp	r1, r2
 801ca2a:	dd0d      	ble.n	801ca48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ca2c:	1bdb      	subs	r3, r3, r7
 801ca2e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca32:	f8ad a012 	strh.w	sl, [sp, #18]
 801ca36:	4631      	mov	r1, r6
 801ca38:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ca3c:	4640      	mov	r0, r8
 801ca3e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ca42:	69ea      	ldr	r2, [r5, #28]
 801ca44:	f7ff ff4e 	bl	801c8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca48:	88e2      	ldrh	r2, [r4, #6]
 801ca4a:	8863      	ldrh	r3, [r4, #2]
 801ca4c:	4413      	add	r3, r2
 801ca4e:	9a00      	ldr	r2, [sp, #0]
 801ca50:	444a      	add	r2, r9
 801ca52:	b29b      	uxth	r3, r3
 801ca54:	fa1f f982 	uxth.w	r9, r2
 801ca58:	b219      	sxth	r1, r3
 801ca5a:	fa0f f289 	sxth.w	r2, r9
 801ca5e:	428a      	cmp	r2, r1
 801ca60:	da15      	bge.n	801ca8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ca62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ca66:	eba3 0309 	sub.w	r3, r3, r9
 801ca6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ca6e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ca72:	4631      	mov	r1, r6
 801ca74:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ca78:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ca7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca80:	69ea      	ldr	r2, [r5, #28]
 801ca82:	e001      	b.n	801ca88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ca84:	69ea      	ldr	r2, [r5, #28]
 801ca86:	4621      	mov	r1, r4
 801ca88:	4640      	mov	r0, r8
 801ca8a:	f7ff ff2b 	bl	801c8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca8e:	4628      	mov	r0, r5
 801ca90:	f7ff fe94 	bl	801c7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ca94:	6861      	ldr	r1, [r4, #4]
 801ca96:	4602      	mov	r2, r0
 801ca98:	4633      	mov	r3, r6
 801ca9a:	6820      	ldr	r0, [r4, #0]
 801ca9c:	c303      	stmia	r3!, {r0, r1}
 801ca9e:	4611      	mov	r1, r2
 801caa0:	4630      	mov	r0, r6
 801caa2:	f7f8 f833 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801caa6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	f77f af33 	ble.w	801c916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cab0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	f77f af2e 	ble.w	801c916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801caba:	4628      	mov	r0, r5
 801cabc:	f7ff fe9a 	bl	801c7f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cac0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cac4:	1a18      	subs	r0, r3, r0
 801cac6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801caca:	4628      	mov	r0, r5
 801cacc:	f7ff fea6 	bl	801c81c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cad0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cad4:	4631      	mov	r1, r6
 801cad6:	1a18      	subs	r0, r3, r0
 801cad8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cadc:	4628      	mov	r0, r5
 801cade:	682b      	ldr	r3, [r5, #0]
 801cae0:	689b      	ldr	r3, [r3, #8]
 801cae2:	4798      	blx	r3
 801cae4:	e717      	b.n	801c916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801cae6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cae6:	b570      	push	{r4, r5, r6, lr}
 801cae8:	1d06      	adds	r6, r0, #4
 801caea:	b086      	sub	sp, #24
 801caec:	460c      	mov	r4, r1
 801caee:	2300      	movs	r3, #0
 801caf0:	4631      	mov	r1, r6
 801caf2:	4605      	mov	r5, r0
 801caf4:	a802      	add	r0, sp, #8
 801caf6:	9301      	str	r3, [sp, #4]
 801caf8:	f7ff fbd2 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cafc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cb00:	8822      	ldrh	r2, [r4, #0]
 801cb02:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cb06:	1ad2      	subs	r2, r2, r3
 801cb08:	8863      	ldrh	r3, [r4, #2]
 801cb0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cb0e:	1a5b      	subs	r3, r3, r1
 801cb10:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cb14:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cb18:	aa01      	add	r2, sp, #4
 801cb1a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cb1e:	4630      	mov	r0, r6
 801cb20:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cb24:	a904      	add	r1, sp, #16
 801cb26:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cb2a:	f7f8 f8c7 	bl	8014cbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cb2e:	9a01      	ldr	r2, [sp, #4]
 801cb30:	b11a      	cbz	r2, 801cb3a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cb32:	4621      	mov	r1, r4
 801cb34:	4628      	mov	r0, r5
 801cb36:	f7ff fed5 	bl	801c8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cb3a:	b006      	add	sp, #24
 801cb3c:	bd70      	pop	{r4, r5, r6, pc}

0801cb3e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cb3e:	4602      	mov	r2, r0
 801cb40:	b530      	push	{r4, r5, lr}
 801cb42:	4604      	mov	r4, r0
 801cb44:	b085      	sub	sp, #20
 801cb46:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cb4a:	460d      	mov	r5, r1
 801cb4c:	466b      	mov	r3, sp
 801cb4e:	6851      	ldr	r1, [r2, #4]
 801cb50:	c303      	stmia	r3!, {r0, r1}
 801cb52:	4629      	mov	r1, r5
 801cb54:	4668      	mov	r0, sp
 801cb56:	f7f7 ffd9 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 801cb5a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801cb5e:	b12b      	cbz	r3, 801cb6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cb60:	4669      	mov	r1, sp
 801cb62:	4620      	mov	r0, r4
 801cb64:	f7ff ffbf 	bl	801cae6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cb68:	b005      	add	sp, #20
 801cb6a:	bd30      	pop	{r4, r5, pc}
 801cb6c:	3404      	adds	r4, #4
 801cb6e:	a802      	add	r0, sp, #8
 801cb70:	4621      	mov	r1, r4
 801cb72:	f7ff fb95 	bl	801c2a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb76:	f8bd 3000 	ldrh.w	r3, [sp]
 801cb7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cb7e:	4669      	mov	r1, sp
 801cb80:	4620      	mov	r0, r4
 801cb82:	1a9b      	subs	r3, r3, r2
 801cb84:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cb88:	f8ad 3000 	strh.w	r3, [sp]
 801cb8c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cb90:	1a9b      	subs	r3, r3, r2
 801cb92:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cb96:	f7f8 f858 	bl	8014c4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cb9a:	e7e5      	b.n	801cb68 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cb9c:	460b      	mov	r3, r1
 801cb9e:	680a      	ldr	r2, [r1, #0]
 801cba0:	1d01      	adds	r1, r0, #4
 801cba2:	6992      	ldr	r2, [r2, #24]
 801cba4:	4618      	mov	r0, r3
 801cba6:	4710      	bx	r2

0801cba8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cba8:	4298      	cmp	r0, r3
 801cbaa:	d200      	bcs.n	801cbae <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cbac:	b913      	cbnz	r3, 801cbb4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cbae:	440a      	add	r2, r1
 801cbb0:	b210      	sxth	r0, r2
 801cbb2:	4770      	bx	lr
 801cbb4:	ee07 0a90 	vmov	s15, r0
 801cbb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cbbc:	ee07 3a90 	vmov	s15, r3
 801cbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cbc8:	ee07 2a90 	vmov	s15, r2
 801cbcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cbd0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cbd4:	ee07 1a90 	vmov	s15, r1
 801cbd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbdc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cbe0:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cbe4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cbe8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cbec:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cbf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbf8:	bfcc      	ite	gt
 801cbfa:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cbfe:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cc02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc06:	ee17 3a90 	vmov	r3, s15
 801cc0a:	b218      	sxth	r0, r3
 801cc0c:	4770      	bx	lr

0801cc0e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801cc0e:	4298      	cmp	r0, r3
 801cc10:	d200      	bcs.n	801cc14 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801cc12:	b913      	cbnz	r3, 801cc1a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801cc14:	440a      	add	r2, r1
 801cc16:	b210      	sxth	r0, r2
 801cc18:	4770      	bx	lr
 801cc1a:	ee07 2a90 	vmov	s15, r2
 801cc1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cc22:	ee07 0a90 	vmov	s15, r0
 801cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cc2e:	ee07 3a10 	vmov	s14, r3
 801cc32:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801cc36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cc3a:	ee07 1a90 	vmov	s15, r1
 801cc3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc42:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cc46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cc4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc52:	bfcc      	ite	gt
 801cc54:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cc58:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cc5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc60:	ee17 3a90 	vmov	r3, s15
 801cc64:	b218      	sxth	r0, r3
 801cc66:	4770      	bx	lr

0801cc68 <_ZN8touchgfx12TextProviderC1Ev>:
 801cc68:	b538      	push	{r3, r4, r5, lr}
 801cc6a:	2500      	movs	r5, #0
 801cc6c:	2302      	movs	r3, #2
 801cc6e:	4604      	mov	r4, r0
 801cc70:	220e      	movs	r2, #14
 801cc72:	7403      	strb	r3, [r0, #16]
 801cc74:	4629      	mov	r1, r5
 801cc76:	6145      	str	r5, [r0, #20]
 801cc78:	7605      	strb	r5, [r0, #24]
 801cc7a:	83c5      	strh	r5, [r0, #30]
 801cc7c:	8405      	strh	r5, [r0, #32]
 801cc7e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801cc80:	8705      	strh	r5, [r0, #56]	@ 0x38
 801cc82:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801cc84:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801cc88:	e9c0 5500 	strd	r5, r5, [r0]
 801cc8c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801cc90:	304c      	adds	r0, #76	@ 0x4c
 801cc92:	f011 f955 	bl	802df40 <memset>
 801cc96:	2301      	movs	r3, #1
 801cc98:	4620      	mov	r0, r4
 801cc9a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801cc9e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801cca2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801cca6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801ccaa:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801ccae:	f7f4 fc69 	bl	8011584 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ccb2:	4620      	mov	r0, r4
 801ccb4:	bd38      	pop	{r3, r4, r5, pc}

0801ccb6 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801ccb6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ccb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ccbc:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801ccbe:	fab0 f080 	clz	r0, r0
 801ccc2:	0940      	lsrs	r0, r0, #5
 801ccc4:	4770      	bx	lr

0801ccc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ccc6:	b530      	push	{r4, r5, lr}
 801ccc8:	2500      	movs	r5, #0
 801ccca:	2401      	movs	r4, #1
 801cccc:	6843      	ldr	r3, [r0, #4]
 801ccce:	b913      	cbnz	r3, 801ccd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ccd0:	6803      	ldr	r3, [r0, #0]
 801ccd2:	b313      	cbz	r3, 801cd1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ccd4:	6043      	str	r3, [r0, #4]
 801ccd6:	7e03      	ldrb	r3, [r0, #24]
 801ccd8:	b143      	cbz	r3, 801ccec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ccda:	6943      	ldr	r3, [r0, #20]
 801ccdc:	b12b      	cbz	r3, 801ccea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ccde:	881a      	ldrh	r2, [r3, #0]
 801cce0:	b11a      	cbz	r2, 801ccea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cce2:	1c9a      	adds	r2, r3, #2
 801cce4:	6142      	str	r2, [r0, #20]
 801cce6:	8818      	ldrh	r0, [r3, #0]
 801cce8:	bd30      	pop	{r4, r5, pc}
 801ccea:	7605      	strb	r5, [r0, #24]
 801ccec:	6843      	ldr	r3, [r0, #4]
 801ccee:	8819      	ldrh	r1, [r3, #0]
 801ccf0:	b199      	cbz	r1, 801cd1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ccf2:	1c9a      	adds	r2, r3, #2
 801ccf4:	2902      	cmp	r1, #2
 801ccf6:	6042      	str	r2, [r0, #4]
 801ccf8:	d1f5      	bne.n	801cce6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ccfa:	7c03      	ldrb	r3, [r0, #16]
 801ccfc:	2b01      	cmp	r3, #1
 801ccfe:	d8e5      	bhi.n	801cccc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cd00:	1c5a      	adds	r2, r3, #1
 801cd02:	3302      	adds	r3, #2
 801cd04:	7402      	strb	r2, [r0, #16]
 801cd06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cd0a:	6143      	str	r3, [r0, #20]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d0dd      	beq.n	801cccc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cd10:	881b      	ldrh	r3, [r3, #0]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d0da      	beq.n	801cccc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cd16:	7604      	strb	r4, [r0, #24]
 801cd18:	e7d8      	b.n	801cccc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cd1a:	2000      	movs	r0, #0
 801cd1c:	e7e4      	b.n	801cce8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801cd1e:	6001      	str	r1, [r0, #0]
 801cd20:	2100      	movs	r1, #0
 801cd22:	b430      	push	{r4, r5}
 801cd24:	6041      	str	r1, [r0, #4]
 801cd26:	6815      	ldr	r5, [r2, #0]
 801cd28:	6085      	str	r5, [r0, #8]
 801cd2a:	6852      	ldr	r2, [r2, #4]
 801cd2c:	6443      	str	r3, [r0, #68]	@ 0x44
 801cd2e:	9b02      	ldr	r3, [sp, #8]
 801cd30:	60c2      	str	r2, [r0, #12]
 801cd32:	7401      	strb	r1, [r0, #16]
 801cd34:	6141      	str	r1, [r0, #20]
 801cd36:	7601      	strb	r1, [r0, #24]
 801cd38:	8701      	strh	r1, [r0, #56]	@ 0x38
 801cd3a:	8401      	strh	r1, [r0, #32]
 801cd3c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801cd40:	6483      	str	r3, [r0, #72]	@ 0x48
 801cd42:	bc30      	pop	{r4, r5}
 801cd44:	f7f4 bc1e 	b.w	8011584 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cd48 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801cd48:	b408      	push	{r3}
 801cd4a:	b510      	push	{r4, lr}
 801cd4c:	b085      	sub	sp, #20
 801cd4e:	ac07      	add	r4, sp, #28
 801cd50:	f854 3b04 	ldr.w	r3, [r4], #4
 801cd54:	9300      	str	r3, [sp, #0]
 801cd56:	4613      	mov	r3, r2
 801cd58:	4622      	mov	r2, r4
 801cd5a:	9403      	str	r4, [sp, #12]
 801cd5c:	f7ff ffdf 	bl	801cd1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cd60:	b005      	add	sp, #20
 801cd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd66:	b001      	add	sp, #4
 801cd68:	4770      	bx	lr

0801cd6a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cd6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd6c:	4605      	mov	r5, r0
 801cd6e:	4608      	mov	r0, r1
 801cd70:	b1f1      	cbz	r1, 801cdb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801cd72:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801cd76:	460b      	mov	r3, r1
 801cd78:	f101 0708 	add.w	r7, r1, #8
 801cd7c:	4622      	mov	r2, r4
 801cd7e:	6818      	ldr	r0, [r3, #0]
 801cd80:	3308      	adds	r3, #8
 801cd82:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cd86:	4626      	mov	r6, r4
 801cd88:	42bb      	cmp	r3, r7
 801cd8a:	c603      	stmia	r6!, {r0, r1}
 801cd8c:	4634      	mov	r4, r6
 801cd8e:	d1f6      	bne.n	801cd7e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cd90:	6818      	ldr	r0, [r3, #0]
 801cd92:	6030      	str	r0, [r6, #0]
 801cd94:	4610      	mov	r0, r2
 801cd96:	889b      	ldrh	r3, [r3, #4]
 801cd98:	80b3      	strh	r3, [r6, #4]
 801cd9a:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801cd9e:	015b      	lsls	r3, r3, #5
 801cda0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801cda4:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801cda8:	430b      	orrs	r3, r1
 801cdaa:	425b      	negs	r3, r3
 801cdac:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801cdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cdb2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cdb2:	b538      	push	{r3, r4, r5, lr}
 801cdb4:	460c      	mov	r4, r1
 801cdb6:	6811      	ldr	r1, [r2, #0]
 801cdb8:	4610      	mov	r0, r2
 801cdba:	68cd      	ldr	r5, [r1, #12]
 801cdbc:	4619      	mov	r1, r3
 801cdbe:	47a8      	blx	r5
 801cdc0:	2800      	cmp	r0, #0
 801cdc2:	bf08      	it	eq
 801cdc4:	4620      	moveq	r0, r4
 801cdc6:	bd38      	pop	{r3, r4, r5, pc}

0801cdc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdcc:	468c      	mov	ip, r1
 801cdce:	4605      	mov	r5, r0
 801cdd0:	4614      	mov	r4, r2
 801cdd2:	b942      	cbnz	r2, 801cde6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801cdd4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801cdd8:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801cddc:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801cde0:	4620      	mov	r0, r4
 801cde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cde6:	7b50      	ldrb	r0, [r2, #13]
 801cde8:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801cdec:	8893      	ldrh	r3, [r2, #4]
 801cdee:	0106      	lsls	r6, r0, #4
 801cdf0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801cdf4:	79e6      	ldrb	r6, [r4, #7]
 801cdf6:	4316      	orrs	r6, r2
 801cdf8:	185a      	adds	r2, r3, r1
 801cdfa:	b291      	uxth	r1, r2
 801cdfc:	b2b7      	uxth	r7, r6
 801cdfe:	291d      	cmp	r1, #29
 801ce00:	d87f      	bhi.n	801cf02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801ce02:	2201      	movs	r2, #1
 801ce04:	10f6      	asrs	r6, r6, #3
 801ce06:	408a      	lsls	r2, r1
 801ce08:	498b      	ldr	r1, [pc, #556]	@ (801d038 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801ce0a:	420a      	tst	r2, r1
 801ce0c:	d12e      	bne.n	801ce6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ce0e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801ce12:	d076      	beq.n	801cf02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801ce14:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801ce18:	4623      	mov	r3, r4
 801ce1a:	f104 0e08 	add.w	lr, r4, #8
 801ce1e:	4614      	mov	r4, r2
 801ce20:	6818      	ldr	r0, [r3, #0]
 801ce22:	3308      	adds	r3, #8
 801ce24:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ce28:	4694      	mov	ip, r2
 801ce2a:	4573      	cmp	r3, lr
 801ce2c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ce30:	4662      	mov	r2, ip
 801ce32:	d1f5      	bne.n	801ce20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ce34:	6818      	ldr	r0, [r3, #0]
 801ce36:	f8cc 0000 	str.w	r0, [ip]
 801ce3a:	889b      	ldrh	r3, [r3, #4]
 801ce3c:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ce40:	b2b3      	uxth	r3, r6
 801ce42:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801ce46:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801ce4a:	1aca      	subs	r2, r1, r3
 801ce4c:	1bcf      	subs	r7, r1, r7
 801ce4e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801ce52:	b292      	uxth	r2, r2
 801ce54:	1afb      	subs	r3, r7, r3
 801ce56:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801ce5a:	10d2      	asrs	r2, r2, #3
 801ce5c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801ce60:	4302      	orrs	r2, r0
 801ce62:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801ce66:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801ce6a:	e7b9      	b.n	801cde0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ce6c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801ce70:	4623      	mov	r3, r4
 801ce72:	f104 0808 	add.w	r8, r4, #8
 801ce76:	4614      	mov	r4, r2
 801ce78:	6818      	ldr	r0, [r3, #0]
 801ce7a:	3308      	adds	r3, #8
 801ce7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ce80:	4696      	mov	lr, r2
 801ce82:	4543      	cmp	r3, r8
 801ce84:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ce88:	4672      	mov	r2, lr
 801ce8a:	d1f5      	bne.n	801ce78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801ce8c:	6818      	ldr	r0, [r3, #0]
 801ce8e:	f8ce 0000 	str.w	r0, [lr]
 801ce92:	889b      	ldrh	r3, [r3, #4]
 801ce94:	f8ae 3004 	strh.w	r3, [lr, #4]
 801ce98:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801ce9a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801ce9e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801cea0:	f640 6333 	movw	r3, #3635	@ 0xe33
 801cea4:	4299      	cmp	r1, r3
 801cea6:	d111      	bne.n	801cecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801cea8:	f8dc 3000 	ldr.w	r3, [ip]
 801ceac:	4660      	mov	r0, ip
 801ceae:	68db      	ldr	r3, [r3, #12]
 801ceb0:	4798      	blx	r3
 801ceb2:	7b41      	ldrb	r1, [r0, #13]
 801ceb4:	00cb      	lsls	r3, r1, #3
 801ceb6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ceba:	7a03      	ldrb	r3, [r0, #8]
 801cebc:	4313      	orrs	r3, r2
 801cebe:	064a      	lsls	r2, r1, #25
 801cec0:	bf44      	itt	mi
 801cec2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cec6:	b21b      	sxthmi	r3, r3
 801cec8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cecc:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801ced0:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801ced4:	443b      	add	r3, r7
 801ced6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ceda:	4433      	add	r3, r6
 801cedc:	b29b      	uxth	r3, r3
 801cede:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cee2:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801cee6:	10db      	asrs	r3, r3, #3
 801cee8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ceec:	4313      	orrs	r3, r2
 801ceee:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801cef2:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801cef6:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801cefa:	1a9b      	subs	r3, r3, r2
 801cefc:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801cf00:	e76e      	b.n	801cde0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801cf02:	f023 0204 	bic.w	r2, r3, #4
 801cf06:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801cf0a:	428a      	cmp	r2, r1
 801cf0c:	d003      	beq.n	801cf16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801cf0e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801cf12:	4293      	cmp	r3, r2
 801cf14:	d138      	bne.n	801cf88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801cf16:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801cf1a:	4622      	mov	r2, r4
 801cf1c:	f104 0808 	add.w	r8, r4, #8
 801cf20:	4634      	mov	r4, r6
 801cf22:	6810      	ldr	r0, [r2, #0]
 801cf24:	3208      	adds	r2, #8
 801cf26:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801cf2a:	46b6      	mov	lr, r6
 801cf2c:	4542      	cmp	r2, r8
 801cf2e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cf32:	4676      	mov	r6, lr
 801cf34:	d1f5      	bne.n	801cf22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801cf36:	6810      	ldr	r0, [r2, #0]
 801cf38:	3b01      	subs	r3, #1
 801cf3a:	4621      	mov	r1, r4
 801cf3c:	f8ce 0000 	str.w	r0, [lr]
 801cf40:	b29b      	uxth	r3, r3
 801cf42:	8892      	ldrh	r2, [r2, #4]
 801cf44:	4628      	mov	r0, r5
 801cf46:	f8ae 2004 	strh.w	r2, [lr, #4]
 801cf4a:	4662      	mov	r2, ip
 801cf4c:	f7ff ff31 	bl	801cdb2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cf50:	7b41      	ldrb	r1, [r0, #13]
 801cf52:	00cb      	lsls	r3, r1, #3
 801cf54:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cf58:	7a03      	ldrb	r3, [r0, #8]
 801cf5a:	0648      	lsls	r0, r1, #25
 801cf5c:	ea43 0302 	orr.w	r3, r3, r2
 801cf60:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801cf64:	bf44      	itt	mi
 801cf66:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cf6a:	b21b      	sxthmi	r3, r3
 801cf6c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cf70:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801cf74:	005b      	lsls	r3, r3, #1
 801cf76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf7a:	4313      	orrs	r3, r2
 801cf7c:	115a      	asrs	r2, r3, #5
 801cf7e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801cf82:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801cf86:	e047      	b.n	801d018 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 801cf88:	00c2      	lsls	r2, r0, #3
 801cf8a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801cf8e:	7a22      	ldrb	r2, [r4, #8]
 801cf90:	430a      	orrs	r2, r1
 801cf92:	0641      	lsls	r1, r0, #25
 801cf94:	f640 6109 	movw	r1, #3593	@ 0xe09
 801cf98:	bf44      	itt	mi
 801cf9a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801cf9e:	b212      	sxthmi	r2, r2
 801cfa0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801cfa4:	f023 0210 	bic.w	r2, r3, #16
 801cfa8:	428a      	cmp	r2, r1
 801cfaa:	d003      	beq.n	801cfb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 801cfac:	f640 6213 	movw	r2, #3603	@ 0xe13
 801cfb0:	4293      	cmp	r3, r2
 801cfb2:	d13e      	bne.n	801d032 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 801cfb4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801cfb8:	f104 0808 	add.w	r8, r4, #8
 801cfbc:	4696      	mov	lr, r2
 801cfbe:	6820      	ldr	r0, [r4, #0]
 801cfc0:	3408      	adds	r4, #8
 801cfc2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801cfc6:	4616      	mov	r6, r2
 801cfc8:	4544      	cmp	r4, r8
 801cfca:	c603      	stmia	r6!, {r0, r1}
 801cfcc:	4632      	mov	r2, r6
 801cfce:	d1f6      	bne.n	801cfbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801cfd0:	6820      	ldr	r0, [r4, #0]
 801cfd2:	6030      	str	r0, [r6, #0]
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	88a1      	ldrh	r1, [r4, #4]
 801cfd8:	4674      	mov	r4, lr
 801cfda:	80b1      	strh	r1, [r6, #4]
 801cfdc:	4671      	mov	r1, lr
 801cfde:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801cfe2:	0076      	lsls	r6, r6, #1
 801cfe4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801cfe8:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801cfec:	4316      	orrs	r6, r2
 801cfee:	f640 6213 	movw	r2, #3603	@ 0xe13
 801cff2:	4293      	cmp	r3, r2
 801cff4:	4662      	mov	r2, ip
 801cff6:	bf16      	itet	ne
 801cff8:	f103 33ff 	addne.w	r3, r3, #4294967295
 801cffc:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d000:	b29b      	uxthne	r3, r3
 801d002:	f7ff fed6 	bl	801cdb2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d006:	7b43      	ldrb	r3, [r0, #13]
 801d008:	7a82      	ldrb	r2, [r0, #10]
 801d00a:	005b      	lsls	r3, r3, #1
 801d00c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d010:	4313      	orrs	r3, r2
 801d012:	1af6      	subs	r6, r6, r3
 801d014:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801d018:	7b61      	ldrb	r1, [r4, #13]
 801d01a:	00cb      	lsls	r3, r1, #3
 801d01c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d020:	7a23      	ldrb	r3, [r4, #8]
 801d022:	4313      	orrs	r3, r2
 801d024:	064a      	lsls	r2, r1, #25
 801d026:	bf44      	itt	mi
 801d028:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d02c:	b21b      	sxthmi	r3, r3
 801d02e:	1bdb      	subs	r3, r3, r7
 801d030:	e719      	b.n	801ce66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d032:	2300      	movs	r3, #0
 801d034:	e7a5      	b.n	801cf82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d036:	bf00      	nop
 801d038:	3fc00079 	.word	0x3fc00079

0801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d040:	4604      	mov	r4, r0
 801d042:	b942      	cbnz	r2, 801d056 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d044:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d048:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d04c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d050:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d054:	e047      	b.n	801d0e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d056:	7b51      	ldrb	r1, [r2, #13]
 801d058:	8893      	ldrh	r3, [r2, #4]
 801d05a:	010d      	lsls	r5, r1, #4
 801d05c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801d060:	79d5      	ldrb	r5, [r2, #7]
 801d062:	4305      	orrs	r5, r0
 801d064:	2d04      	cmp	r5, #4
 801d066:	bfcc      	ite	gt
 801d068:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d06c:	f04f 0e01 	movle.w	lr, #1
 801d070:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d074:	f200 80ab 	bhi.w	801d1ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d078:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d07c:	4283      	cmp	r3, r0
 801d07e:	d216      	bcs.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d080:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d084:	4283      	cmp	r3, r0
 801d086:	d859      	bhi.n	801d13c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d088:	f240 6057 	movw	r0, #1623	@ 0x657
 801d08c:	4283      	cmp	r3, r0
 801d08e:	d20e      	bcs.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d090:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d094:	d24a      	bcs.n	801d12c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d096:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d09a:	4283      	cmp	r3, r0
 801d09c:	d207      	bcs.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d09e:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d0a2:	4283      	cmp	r3, r0
 801d0a4:	d02a      	beq.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d0a6:	d821      	bhi.n	801d0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d0a8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d0ac:	d35b      	bcc.n	801d166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d0ae:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d0b2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d0b6:	f040 80d0 	bne.w	801d25a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d0ba:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d0be:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d0c2:	f040 80ca 	bne.w	801d25a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d0c6:	00cb      	lsls	r3, r1, #3
 801d0c8:	0649      	lsls	r1, r1, #25
 801d0ca:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d0ce:	7a13      	ldrb	r3, [r2, #8]
 801d0d0:	ea43 0300 	orr.w	r3, r3, r0
 801d0d4:	bf44      	itt	mi
 801d0d6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d0da:	b21b      	sxthmi	r3, r3
 801d0dc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d0e0:	1b5d      	subs	r5, r3, r5
 801d0e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d0e6:	4610      	mov	r0, r2
 801d0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d0ec:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d0f0:	4283      	cmp	r3, r0
 801d0f2:	d338      	bcc.n	801d166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d0f4:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d0f8:	4283      	cmp	r3, r0
 801d0fa:	d9d8      	bls.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d0fc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d100:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d104:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d108:	f040 80f3 	bne.w	801d2f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d10c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d110:	f040 80ef 	bne.w	801d2f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d114:	00cb      	lsls	r3, r1, #3
 801d116:	064e      	lsls	r6, r1, #25
 801d118:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d11c:	7a13      	ldrb	r3, [r2, #8]
 801d11e:	ea43 0300 	orr.w	r3, r3, r0
 801d122:	bf44      	itt	mi
 801d124:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d128:	b21b      	sxthmi	r3, r3
 801d12a:	e7d9      	b.n	801d0e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d12c:	f240 6054 	movw	r0, #1620	@ 0x654
 801d130:	4283      	cmp	r3, r0
 801d132:	d8e3      	bhi.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d134:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d138:	d9e0      	bls.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d13a:	e7b8      	b.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d13c:	f240 6074 	movw	r0, #1652	@ 0x674
 801d140:	4283      	cmp	r3, r0
 801d142:	d0b4      	beq.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d144:	d82d      	bhi.n	801d1a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d146:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d14a:	4283      	cmp	r3, r0
 801d14c:	d804      	bhi.n	801d158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d14e:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d152:	4283      	cmp	r3, r0
 801d154:	d3d2      	bcc.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d156:	e7aa      	b.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d158:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d15c:	4283      	cmp	r3, r0
 801d15e:	d0cd      	beq.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d160:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d164:	d0a3      	beq.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d166:	00cb      	lsls	r3, r1, #3
 801d168:	0649      	lsls	r1, r1, #25
 801d16a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d16e:	7a13      	ldrb	r3, [r2, #8]
 801d170:	ea43 0300 	orr.w	r3, r3, r0
 801d174:	bf44      	itt	mi
 801d176:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d17a:	b21b      	sxthmi	r3, r3
 801d17c:	1b5d      	subs	r5, r3, r5
 801d17e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d182:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d186:	7b53      	ldrb	r3, [r2, #13]
 801d188:	015b      	lsls	r3, r3, #5
 801d18a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d18e:	7993      	ldrb	r3, [r2, #6]
 801d190:	430b      	orrs	r3, r1
 801d192:	2105      	movs	r1, #5
 801d194:	005b      	lsls	r3, r3, #1
 801d196:	fb93 f3f1 	sdiv	r3, r3, r1
 801d19a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d19e:	440b      	add	r3, r1
 801d1a0:	e756      	b.n	801d050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d1a2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d1a6:	4283      	cmp	r3, r0
 801d1a8:	d809      	bhi.n	801d1be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d1aa:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d1ae:	4283      	cmp	r3, r0
 801d1b0:	f4bf af7d 	bcs.w	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1b4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d1b8:	2b05      	cmp	r3, #5
 801d1ba:	d8d4      	bhi.n	801d166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d1bc:	e777      	b.n	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1be:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d1c2:	4283      	cmp	r3, r0
 801d1c4:	d09a      	beq.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1c6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d1ca:	4283      	cmp	r3, r0
 801d1cc:	e7ca      	b.n	801d164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d1ce:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d1d2:	d22b      	bcs.n	801d22c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d1d4:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d1d8:	4283      	cmp	r3, r0
 801d1da:	d28f      	bcs.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1dc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d1e0:	4283      	cmp	r3, r0
 801d1e2:	d816      	bhi.n	801d212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d1e4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d1e8:	4283      	cmp	r3, r0
 801d1ea:	f4bf af60 	bcs.w	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1ee:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d1f2:	4283      	cmp	r3, r0
 801d1f4:	d80a      	bhi.n	801d20c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d1f6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d1fa:	4283      	cmp	r3, r0
 801d1fc:	f4bf af57 	bcs.w	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d200:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d204:	4283      	cmp	r3, r0
 801d206:	f43f af79 	beq.w	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d20a:	e7ac      	b.n	801d166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d20c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d210:	e7f8      	b.n	801d204 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d212:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d216:	4283      	cmp	r3, r0
 801d218:	d802      	bhi.n	801d220 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d21a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d21e:	e798      	b.n	801d152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d220:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d224:	4283      	cmp	r3, r0
 801d226:	f47f af42 	bne.w	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d22a:	e767      	b.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d22c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d230:	4283      	cmp	r3, r0
 801d232:	f43f af63 	beq.w	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d236:	d802      	bhi.n	801d23e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d238:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d23c:	e7f2      	b.n	801d224 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d23e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d242:	4283      	cmp	r3, r0
 801d244:	d805      	bhi.n	801d252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d246:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d24a:	4283      	cmp	r3, r0
 801d24c:	f4ff af2f 	bcc.w	801d0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d250:	e754      	b.n	801d0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d252:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d256:	4283      	cmp	r3, r0
 801d258:	e7af      	b.n	801d1ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d25a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d25e:	4617      	mov	r7, r2
 801d260:	f102 0808 	add.w	r8, r2, #8
 801d264:	4666      	mov	r6, ip
 801d266:	6838      	ldr	r0, [r7, #0]
 801d268:	3708      	adds	r7, #8
 801d26a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d26e:	46e6      	mov	lr, ip
 801d270:	4547      	cmp	r7, r8
 801d272:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d276:	46f4      	mov	ip, lr
 801d278:	d1f5      	bne.n	801d266 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d27a:	6838      	ldr	r0, [r7, #0]
 801d27c:	f8ce 0000 	str.w	r0, [lr]
 801d280:	88b9      	ldrh	r1, [r7, #4]
 801d282:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d286:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d28a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d28e:	d009      	beq.n	801d2a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d290:	7b51      	ldrb	r1, [r2, #13]
 801d292:	7992      	ldrb	r2, [r2, #6]
 801d294:	0149      	lsls	r1, r1, #5
 801d296:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d29a:	4311      	orrs	r1, r2
 801d29c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d2a0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d2a4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d2a8:	b2ad      	uxth	r5, r5
 801d2aa:	d00d      	beq.n	801d2c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d2ac:	442b      	add	r3, r5
 801d2ae:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d2b2:	b29b      	uxth	r3, r3
 801d2b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d2b8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d2bc:	10db      	asrs	r3, r3, #3
 801d2be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d2c2:	4313      	orrs	r3, r2
 801d2c4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d2c8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d2cc:	00cb      	lsls	r3, r1, #3
 801d2ce:	064f      	lsls	r7, r1, #25
 801d2d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d2d4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d2d8:	ea43 0302 	orr.w	r3, r3, r2
 801d2dc:	bf44      	itt	mi
 801d2de:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d2e2:	b21b      	sxthmi	r3, r3
 801d2e4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d2e8:	1b5b      	subs	r3, r3, r5
 801d2ea:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d2ee:	4632      	mov	r2, r6
 801d2f0:	e6f9      	b.n	801d0e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d2f2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d2f6:	4617      	mov	r7, r2
 801d2f8:	f102 0908 	add.w	r9, r2, #8
 801d2fc:	4666      	mov	r6, ip
 801d2fe:	6838      	ldr	r0, [r7, #0]
 801d300:	3708      	adds	r7, #8
 801d302:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d306:	46e0      	mov	r8, ip
 801d308:	454f      	cmp	r7, r9
 801d30a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d30e:	46c4      	mov	ip, r8
 801d310:	d1f5      	bne.n	801d2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d312:	6838      	ldr	r0, [r7, #0]
 801d314:	f8c8 0000 	str.w	r0, [r8]
 801d318:	88b9      	ldrh	r1, [r7, #4]
 801d31a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d31e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d322:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d326:	d009      	beq.n	801d33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d328:	7b51      	ldrb	r1, [r2, #13]
 801d32a:	7992      	ldrb	r2, [r2, #6]
 801d32c:	0149      	lsls	r1, r1, #5
 801d32e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d332:	4311      	orrs	r1, r2
 801d334:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d338:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d33c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d340:	d00e      	beq.n	801d360 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d342:	eba3 030e 	sub.w	r3, r3, lr
 801d346:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d350:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d354:	10db      	asrs	r3, r3, #3
 801d356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d35a:	4313      	orrs	r3, r2
 801d35c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d360:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d364:	00cb      	lsls	r3, r1, #3
 801d366:	0648      	lsls	r0, r1, #25
 801d368:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d36c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d370:	ea43 0302 	orr.w	r3, r3, r2
 801d374:	bf44      	itt	mi
 801d376:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d37a:	b21b      	sxthmi	r3, r3
 801d37c:	1b5d      	subs	r5, r3, r5
 801d37e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d382:	e7b4      	b.n	801d2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d388:	461e      	mov	r6, r3
 801d38a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d38c:	4604      	mov	r4, r0
 801d38e:	4617      	mov	r7, r2
 801d390:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d394:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d398:	f7f4 f84e 	bl	8011438 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d39c:	4605      	mov	r5, r0
 801d39e:	b918      	cbnz	r0, 801d3a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d3a0:	6030      	str	r0, [r6, #0]
 801d3a2:	4628      	mov	r0, r5
 801d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3a8:	683b      	ldr	r3, [r7, #0]
 801d3aa:	4601      	mov	r1, r0
 801d3ac:	4638      	mov	r0, r7
 801d3ae:	68db      	ldr	r3, [r3, #12]
 801d3b0:	4798      	blx	r3
 801d3b2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d3b6:	4602      	mov	r2, r0
 801d3b8:	6030      	str	r0, [r6, #0]
 801d3ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d3be:	d213      	bcs.n	801d3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d3c0:	4643      	mov	r3, r8
 801d3c2:	4639      	mov	r1, r7
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	f7ff fe39 	bl	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d3ca:	6030      	str	r0, [r6, #0]
 801d3cc:	6833      	ldr	r3, [r6, #0]
 801d3ce:	b143      	cbz	r3, 801d3e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d3d0:	7b5a      	ldrb	r2, [r3, #13]
 801d3d2:	7a9b      	ldrb	r3, [r3, #10]
 801d3d4:	0052      	lsls	r2, r2, #1
 801d3d6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d3da:	4313      	orrs	r3, r2
 801d3dc:	bf0c      	ite	eq
 801d3de:	2301      	moveq	r3, #1
 801d3e0:	2300      	movne	r3, #0
 801d3e2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d3e6:	e7dc      	b.n	801d3a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d3e8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d3ec:	b29b      	uxth	r3, r3
 801d3ee:	2b7f      	cmp	r3, #127	@ 0x7f
 801d3f0:	d804      	bhi.n	801d3fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d3f2:	4639      	mov	r1, r7
 801d3f4:	4620      	mov	r0, r4
 801d3f6:	f7ff fce7 	bl	801cdc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d3fa:	e7e6      	b.n	801d3ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d3fc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d400:	2b00      	cmp	r3, #0
 801d402:	d0e3      	beq.n	801d3cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d404:	f640 1302 	movw	r3, #2306	@ 0x902
 801d408:	429d      	cmp	r5, r3
 801d40a:	d1df      	bne.n	801d3cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d40c:	4601      	mov	r1, r0
 801d40e:	4620      	mov	r0, r4
 801d410:	f7ff fcab 	bl	801cd6a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d414:	e7d9      	b.n	801d3ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d416 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d41a:	461e      	mov	r6, r3
 801d41c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d41e:	4604      	mov	r4, r0
 801d420:	4617      	mov	r7, r2
 801d422:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d426:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d42a:	f7f4 f805 	bl	8011438 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d42e:	4605      	mov	r5, r0
 801d430:	b918      	cbnz	r0, 801d43a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d432:	6030      	str	r0, [r6, #0]
 801d434:	4628      	mov	r0, r5
 801d436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d43a:	683b      	ldr	r3, [r7, #0]
 801d43c:	4601      	mov	r1, r0
 801d43e:	4638      	mov	r0, r7
 801d440:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d444:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d448:	47c8      	blx	r9
 801d44a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d44e:	4602      	mov	r2, r0
 801d450:	6030      	str	r0, [r6, #0]
 801d452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d456:	d213      	bcs.n	801d480 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d458:	4643      	mov	r3, r8
 801d45a:	4639      	mov	r1, r7
 801d45c:	4620      	mov	r0, r4
 801d45e:	f7ff fded 	bl	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d462:	6030      	str	r0, [r6, #0]
 801d464:	6833      	ldr	r3, [r6, #0]
 801d466:	b143      	cbz	r3, 801d47a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d468:	7b5a      	ldrb	r2, [r3, #13]
 801d46a:	7a9b      	ldrb	r3, [r3, #10]
 801d46c:	0052      	lsls	r2, r2, #1
 801d46e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d472:	4313      	orrs	r3, r2
 801d474:	bf0c      	ite	eq
 801d476:	2301      	moveq	r3, #1
 801d478:	2300      	movne	r3, #0
 801d47a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d47e:	e7d9      	b.n	801d434 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d480:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d484:	b29b      	uxth	r3, r3
 801d486:	2b7f      	cmp	r3, #127	@ 0x7f
 801d488:	d804      	bhi.n	801d494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d48a:	4639      	mov	r1, r7
 801d48c:	4620      	mov	r0, r4
 801d48e:	f7ff fc9b 	bl	801cdc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d492:	e7e6      	b.n	801d462 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d494:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d0e3      	beq.n	801d464 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d49c:	f640 1302 	movw	r3, #2306	@ 0x902
 801d4a0:	429d      	cmp	r5, r3
 801d4a2:	d1df      	bne.n	801d464 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d4a4:	4601      	mov	r1, r0
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	f7ff fc5f 	bl	801cd6a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d4ac:	e7d9      	b.n	801d462 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d4ae <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d4ae:	b510      	push	{r4, lr}
 801d4b0:	4604      	mov	r4, r0
 801d4b2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801d4b6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d4b8:	b1e1      	cbz	r1, 801d4f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d4ba:	2b0a      	cmp	r3, #10
 801d4bc:	d02d      	beq.n	801d51a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d4be:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801d4c0:	3901      	subs	r1, #1
 801d4c2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d4c6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801d4c8:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801d4cc:	1c51      	adds	r1, r2, #1
 801d4ce:	b289      	uxth	r1, r1
 801d4d0:	2901      	cmp	r1, #1
 801d4d2:	bf8a      	itet	hi
 801d4d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d4d8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801d4da:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801d4dc:	1c5a      	adds	r2, r3, #1
 801d4de:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d4e0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d4e2:	4413      	add	r3, r2
 801d4e4:	b29b      	uxth	r3, r3
 801d4e6:	2b09      	cmp	r3, #9
 801d4e8:	bf88      	it	hi
 801d4ea:	3b0a      	subhi	r3, #10
 801d4ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d4f0:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d4f2:	e7de      	b.n	801d4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d4f4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d4f6:	2b0a      	cmp	r3, #10
 801d4f8:	d00f      	beq.n	801d51a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	f7ff fbe3 	bl	801ccc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d500:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d502:	1c5a      	adds	r2, r3, #1
 801d504:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d506:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d508:	4413      	add	r3, r2
 801d50a:	b29b      	uxth	r3, r3
 801d50c:	2b09      	cmp	r3, #9
 801d50e:	bf88      	it	hi
 801d510:	3b0a      	subhi	r3, #10
 801d512:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d516:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d518:	e7ec      	b.n	801d4f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d51a:	bd10      	pop	{r4, pc}

0801d51c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d51c:	b538      	push	{r3, r4, r5, lr}
 801d51e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d520:	4604      	mov	r4, r0
 801d522:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d526:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801d528:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801d52a:	3a01      	subs	r2, #1
 801d52c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d52e:	1c5a      	adds	r2, r3, #1
 801d530:	b292      	uxth	r2, r2
 801d532:	2a09      	cmp	r2, #9
 801d534:	bf8a      	itet	hi
 801d536:	3b09      	subhi	r3, #9
 801d538:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801d53a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801d53c:	f7ff ffb7 	bl	801d4ae <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d540:	8c23      	ldrh	r3, [r4, #32]
 801d542:	2b01      	cmp	r3, #1
 801d544:	bf9c      	itt	ls
 801d546:	3301      	addls	r3, #1
 801d548:	8423      	strhls	r3, [r4, #32]
 801d54a:	8be3      	ldrh	r3, [r4, #30]
 801d54c:	b90b      	cbnz	r3, 801d552 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d54e:	2302      	movs	r3, #2
 801d550:	83e3      	strh	r3, [r4, #30]
 801d552:	8be3      	ldrh	r3, [r4, #30]
 801d554:	4628      	mov	r0, r5
 801d556:	3b01      	subs	r3, #1
 801d558:	b29b      	uxth	r3, r3
 801d55a:	83e3      	strh	r3, [r4, #30]
 801d55c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d560:	8365      	strh	r5, [r4, #26]
 801d562:	bd38      	pop	{r3, r4, r5, pc}

0801d564 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d564:	428a      	cmp	r2, r1
 801d566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d56a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801d56c:	d932      	bls.n	801d5d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d56e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801d570:	1a54      	subs	r4, r2, r1
 801d572:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801d576:	19ee      	adds	r6, r5, r7
 801d578:	fa1f fe84 	uxth.w	lr, r4
 801d57c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801d580:	3e01      	subs	r6, #1
 801d582:	b2b4      	uxth	r4, r6
 801d584:	eba4 090e 	sub.w	r9, r4, lr
 801d588:	fa1f f989 	uxth.w	r9, r9
 801d58c:	2c09      	cmp	r4, #9
 801d58e:	4626      	mov	r6, r4
 801d590:	bf88      	it	hi
 801d592:	f1a4 060a 	subhi.w	r6, r4, #10
 801d596:	f1bc 0f00 	cmp.w	ip, #0
 801d59a:	f104 34ff 	add.w	r4, r4, #4294967295
 801d59e:	bf08      	it	eq
 801d5a0:	f04f 0c02 	moveq.w	ip, #2
 801d5a4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d5a8:	b2a4      	uxth	r4, r4
 801d5aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d5ae:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801d5b2:	454c      	cmp	r4, r9
 801d5b4:	fa1f fc8c 	uxth.w	ip, ip
 801d5b8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d5bc:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801d5c0:	d1e4      	bne.n	801d58c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d5c2:	eba5 050e 	sub.w	r5, r5, lr
 801d5c6:	eb0e 0408 	add.w	r4, lr, r8
 801d5ca:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801d5ce:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d5d0:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801d5d4:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801d5d6:	250a      	movs	r5, #10
 801d5d8:	1a64      	subs	r4, r4, r1
 801d5da:	4439      	add	r1, r7
 801d5dc:	b289      	uxth	r1, r1
 801d5de:	8704      	strh	r4, [r0, #56]	@ 0x38
 801d5e0:	2909      	cmp	r1, #9
 801d5e2:	bf88      	it	hi
 801d5e4:	390a      	subhi	r1, #10
 801d5e6:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d5e8:	b18a      	cbz	r2, 801d60e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d5ea:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801d5ec:	3a01      	subs	r2, #1
 801d5ee:	3101      	adds	r1, #1
 801d5f0:	b292      	uxth	r2, r2
 801d5f2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d5f6:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d5f8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d5fa:	b901      	cbnz	r1, 801d5fe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d5fc:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d5fe:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d600:	3901      	subs	r1, #1
 801d602:	b289      	uxth	r1, r1
 801d604:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d606:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d60a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801d60c:	e7ec      	b.n	801d5e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d60e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d612:	f7ff bf4c 	b.w	801d4ae <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d616 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d616:	b570      	push	{r4, r5, r6, lr}
 801d618:	2500      	movs	r5, #0
 801d61a:	4295      	cmp	r5, r2
 801d61c:	d011      	beq.n	801d642 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d61e:	8bc4      	ldrh	r4, [r0, #30]
 801d620:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d624:	4414      	add	r4, r2
 801d626:	3c01      	subs	r4, #1
 801d628:	1b64      	subs	r4, r4, r5
 801d62a:	b2a4      	uxth	r4, r4
 801d62c:	2c01      	cmp	r4, #1
 801d62e:	bf88      	it	hi
 801d630:	3c02      	subhi	r4, #2
 801d632:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d636:	8b64      	ldrh	r4, [r4, #26]
 801d638:	42b4      	cmp	r4, r6
 801d63a:	d117      	bne.n	801d66c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d63c:	3501      	adds	r5, #1
 801d63e:	b2ad      	uxth	r5, r5
 801d640:	e7eb      	b.n	801d61a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d642:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d646:	2400      	movs	r4, #0
 801d648:	4413      	add	r3, r2
 801d64a:	b2a2      	uxth	r2, r4
 801d64c:	429a      	cmp	r2, r3
 801d64e:	da0f      	bge.n	801d670 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d650:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801d652:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d656:	3401      	adds	r4, #1
 801d658:	4432      	add	r2, r6
 801d65a:	b292      	uxth	r2, r2
 801d65c:	2a09      	cmp	r2, #9
 801d65e:	bf88      	it	hi
 801d660:	3a0a      	subhi	r2, #10
 801d662:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d666:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801d668:	42aa      	cmp	r2, r5
 801d66a:	d0ee      	beq.n	801d64a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d66c:	2000      	movs	r0, #0
 801d66e:	bd70      	pop	{r4, r5, r6, pc}
 801d670:	2001      	movs	r0, #1
 801d672:	e7fc      	b.n	801d66e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d674 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d678:	4605      	mov	r5, r0
 801d67a:	4616      	mov	r6, r2
 801d67c:	1c8c      	adds	r4, r1, #2
 801d67e:	8809      	ldrh	r1, [r1, #0]
 801d680:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d684:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d688:	42b3      	cmp	r3, r6
 801d68a:	d124      	bne.n	801d6d6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d68c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d690:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d694:	f001 070f 	and.w	r7, r1, #15
 801d698:	4652      	mov	r2, sl
 801d69a:	f8cd 8000 	str.w	r8, [sp]
 801d69e:	464b      	mov	r3, r9
 801d6a0:	4621      	mov	r1, r4
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	f7ff ffb7 	bl	801d616 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d6a8:	4683      	mov	fp, r0
 801d6aa:	b168      	cbz	r0, 801d6c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d6ac:	eb0a 0109 	add.w	r1, sl, r9
 801d6b0:	463a      	mov	r2, r7
 801d6b2:	4628      	mov	r0, r5
 801d6b4:	4441      	add	r1, r8
 801d6b6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d6ba:	4649      	mov	r1, r9
 801d6bc:	f7ff ff52 	bl	801d564 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d6c0:	4658      	mov	r0, fp
 801d6c2:	b003      	add	sp, #12
 801d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6c8:	eb07 010a 	add.w	r1, r7, sl
 801d6cc:	4449      	add	r1, r9
 801d6ce:	4441      	add	r1, r8
 801d6d0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d6d4:	e7d2      	b.n	801d67c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d6d6:	f04f 0b00 	mov.w	fp, #0
 801d6da:	e7f1      	b.n	801d6c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d6dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d6dc:	b570      	push	{r4, r5, r6, lr}
 801d6de:	8810      	ldrh	r0, [r2, #0]
 801d6e0:	4298      	cmp	r0, r3
 801d6e2:	d817      	bhi.n	801d714 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6e4:	1e48      	subs	r0, r1, #1
 801d6e6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d6ea:	4298      	cmp	r0, r3
 801d6ec:	d312      	bcc.n	801d714 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6ee:	2400      	movs	r4, #0
 801d6f0:	428c      	cmp	r4, r1
 801d6f2:	d20f      	bcs.n	801d714 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6f4:	1860      	adds	r0, r4, r1
 801d6f6:	1040      	asrs	r0, r0, #1
 801d6f8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d6fc:	0085      	lsls	r5, r0, #2
 801d6fe:	42b3      	cmp	r3, r6
 801d700:	d902      	bls.n	801d708 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d702:	3001      	adds	r0, #1
 801d704:	b284      	uxth	r4, r0
 801d706:	e7f3      	b.n	801d6f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d708:	d201      	bcs.n	801d70e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d70a:	b281      	uxth	r1, r0
 801d70c:	e7f0      	b.n	801d6f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d70e:	442a      	add	r2, r5
 801d710:	8850      	ldrh	r0, [r2, #2]
 801d712:	bd70      	pop	{r4, r5, r6, pc}
 801d714:	2000      	movs	r0, #0
 801d716:	e7fc      	b.n	801d712 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d718 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d71c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801d71e:	4604      	mov	r4, r0
 801d720:	260b      	movs	r6, #11
 801d722:	886f      	ldrh	r7, [r5, #2]
 801d724:	087f      	lsrs	r7, r7, #1
 801d726:	3e01      	subs	r6, #1
 801d728:	d013      	beq.n	801d752 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d72a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d72c:	462a      	mov	r2, r5
 801d72e:	4639      	mov	r1, r7
 801d730:	4620      	mov	r0, r4
 801d732:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d736:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d73a:	4643      	mov	r3, r8
 801d73c:	f7ff ffce 	bl	801d6dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d740:	b138      	cbz	r0, 801d752 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d742:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d746:	4642      	mov	r2, r8
 801d748:	4620      	mov	r0, r4
 801d74a:	f7ff ff93 	bl	801d674 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d74e:	2800      	cmp	r0, #0
 801d750:	d1e9      	bne.n	801d726 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d758 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d758:	b570      	push	{r4, r5, r6, lr}
 801d75a:	694a      	ldr	r2, [r1, #20]
 801d75c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801d75e:	684b      	ldr	r3, [r1, #4]
 801d760:	1b54      	subs	r4, r2, r5
 801d762:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801d764:	f000 8106 	beq.w	801d974 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d768:	1b9b      	subs	r3, r3, r6
 801d76a:	d003      	beq.n	801d774 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d76c:	4363      	muls	r3, r4
 801d76e:	2210      	movs	r2, #16
 801d770:	fb93 f3f2 	sdiv	r3, r3, r2
 801d774:	680c      	ldr	r4, [r1, #0]
 801d776:	698a      	ldr	r2, [r1, #24]
 801d778:	1b65      	subs	r5, r4, r5
 801d77a:	f000 80fd 	beq.w	801d978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d77e:	1b92      	subs	r2, r2, r6
 801d780:	d003      	beq.n	801d78a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d782:	436a      	muls	r2, r5
 801d784:	2410      	movs	r4, #16
 801d786:	fb92 f2f4 	sdiv	r2, r2, r4
 801d78a:	1a9b      	subs	r3, r3, r2
 801d78c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801d9b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d794:	460a      	mov	r2, r1
 801d796:	ee07 3a90 	vmov	s15, r3
 801d79a:	f100 040c 	add.w	r4, r0, #12
 801d79e:	4603      	mov	r3, r0
 801d7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d7a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d7a8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d7ac:	eeb1 6a43 	vneg.f32	s12, s6
 801d7b0:	edd2 7a02 	vldr	s15, [r2, #8]
 801d7b4:	3214      	adds	r2, #20
 801d7b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d7ba:	ece3 6a01 	vstmia	r3!, {s13}
 801d7be:	429c      	cmp	r4, r3
 801d7c0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d7c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d7c8:	edc3 7a02 	vstr	s15, [r3, #8]
 801d7cc:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d7d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d7d4:	edc3 7a05 	vstr	s15, [r3, #20]
 801d7d8:	d1ea      	bne.n	801d7b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d7da:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d7dc:	698b      	ldr	r3, [r1, #24]
 801d7de:	edd0 4a02 	vldr	s9, [r0, #8]
 801d7e2:	1a9b      	subs	r3, r3, r2
 801d7e4:	edd0 3a00 	vldr	s7, [r0]
 801d7e8:	edd0 6a01 	vldr	s13, [r0, #4]
 801d7ec:	ee07 3a90 	vmov	s15, r3
 801d7f0:	684b      	ldr	r3, [r1, #4]
 801d7f2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d7f6:	ed90 5a05 	vldr	s10, [r0, #20]
 801d7fa:	1a9b      	subs	r3, r3, r2
 801d7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d800:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d804:	ed90 2a03 	vldr	s4, [r0, #12]
 801d808:	ee07 3a10 	vmov	s14, r3
 801d80c:	edd0 5a04 	vldr	s11, [r0, #16]
 801d810:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d814:	ed90 1a07 	vldr	s2, [r0, #28]
 801d818:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d81c:	edd0 2a06 	vldr	s5, [r0, #24]
 801d820:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d824:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d828:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d82c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d830:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d834:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d838:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801d83c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d83e:	694a      	ldr	r2, [r1, #20]
 801d840:	1b13      	subs	r3, r2, r4
 801d842:	ee07 3a10 	vmov	s14, r3
 801d846:	680b      	ldr	r3, [r1, #0]
 801d848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d84c:	1b1b      	subs	r3, r3, r4
 801d84e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d852:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d856:	ee07 3a10 	vmov	s14, r3
 801d85a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d85e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d862:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d866:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d86a:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801d86e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d870:	698b      	ldr	r3, [r1, #24]
 801d872:	1a9b      	subs	r3, r3, r2
 801d874:	ee06 3a90 	vmov	s13, r3
 801d878:	684b      	ldr	r3, [r1, #4]
 801d87a:	1a9b      	subs	r3, r3, r2
 801d87c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d880:	ee07 3a10 	vmov	s14, r3
 801d884:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d88c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d890:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d894:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d898:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d89c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801d8a0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d8a2:	694a      	ldr	r2, [r1, #20]
 801d8a4:	1b13      	subs	r3, r2, r4
 801d8a6:	ee07 3a10 	vmov	s14, r3
 801d8aa:	680b      	ldr	r3, [r1, #0]
 801d8ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8b0:	1b1b      	subs	r3, r3, r4
 801d8b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8b6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d8ba:	ee07 3a10 	vmov	s14, r3
 801d8be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8c6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d8ca:	edd0 5a08 	vldr	s11, [r0, #32]
 801d8ce:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d8d2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d8d6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d8da:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801d8de:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d8e0:	698b      	ldr	r3, [r1, #24]
 801d8e2:	1a9b      	subs	r3, r3, r2
 801d8e4:	ee07 3a10 	vmov	s14, r3
 801d8e8:	684b      	ldr	r3, [r1, #4]
 801d8ea:	1a9b      	subs	r3, r3, r2
 801d8ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8f0:	ee01 3a90 	vmov	s3, r3
 801d8f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8f8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d8fc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d900:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d904:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d908:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d90c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d910:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d912:	694a      	ldr	r2, [r1, #20]
 801d914:	1b13      	subs	r3, r2, r4
 801d916:	ee03 3a10 	vmov	s6, r3
 801d91a:	680b      	ldr	r3, [r1, #0]
 801d91c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d920:	1b1b      	subs	r3, r3, r4
 801d922:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d926:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d92a:	ee03 3a10 	vmov	s6, r3
 801d92e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d932:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d936:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d93a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d93e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d942:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801d946:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d94a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d952:	dd13      	ble.n	801d97c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d958:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d95c:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801d95e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d96a:	dd15      	ble.n	801d998 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d96c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d970:	6403      	str	r3, [r0, #64]	@ 0x40
 801d972:	bd70      	pop	{r4, r5, r6, pc}
 801d974:	4623      	mov	r3, r4
 801d976:	e6fd      	b.n	801d774 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d978:	462a      	mov	r2, r5
 801d97a:	e706      	b.n	801d78a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d97c:	d502      	bpl.n	801d984 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d97e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d982:	e7e9      	b.n	801d958 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d984:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d988:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d98c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d994:	dade      	bge.n	801d954 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d996:	e7f2      	b.n	801d97e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d998:	d502      	bpl.n	801d9a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d99a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d99e:	e7e7      	b.n	801d970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d9a0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d9a4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d9a8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9b0:	dadc      	bge.n	801d96c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d9b2:	e7f2      	b.n	801d99a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d9b4:	3d800000 	.word	0x3d800000

0801d9b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9bc:	2714      	movs	r7, #20
 801d9be:	435f      	muls	r7, r3
 801d9c0:	eb02 0c07 	add.w	ip, r2, r7
 801d9c4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d9c8:	f115 0e0f 	adds.w	lr, r5, #15
 801d9cc:	f100 80a2 	bmi.w	801db14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d9d0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d9d4:	9c08      	ldr	r4, [sp, #32]
 801d9d6:	2614      	movs	r6, #20
 801d9d8:	f8c0 e014 	str.w	lr, [r0, #20]
 801d9dc:	4366      	muls	r6, r4
 801d9de:	eb02 0806 	add.w	r8, r2, r6
 801d9e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d9e6:	f115 040f 	adds.w	r4, r5, #15
 801d9ea:	f100 809f 	bmi.w	801db2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d9ee:	1124      	asrs	r4, r4, #4
 801d9f0:	eba4 040e 	sub.w	r4, r4, lr
 801d9f4:	6184      	str	r4, [r0, #24]
 801d9f6:	2c00      	cmp	r4, #0
 801d9f8:	f000 808a 	beq.w	801db10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d9fc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801da00:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801da04:	5995      	ldr	r5, [r2, r6]
 801da06:	eba4 0809 	sub.w	r8, r4, r9
 801da0a:	59d4      	ldr	r4, [r2, r7]
 801da0c:	eba5 0a04 	sub.w	sl, r5, r4
 801da10:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801da14:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801da18:	fb0e fe05 	mul.w	lr, lr, r5
 801da1c:	fb0a ee19 	mls	lr, sl, r9, lr
 801da20:	fb08 e404 	mla	r4, r8, r4, lr
 801da24:	3c01      	subs	r4, #1
 801da26:	19a4      	adds	r4, r4, r6
 801da28:	f100 808c 	bmi.w	801db44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801da2c:	fb94 fef6 	sdiv	lr, r4, r6
 801da30:	fb06 441e 	mls	r4, r6, lr, r4
 801da34:	f8c0 e000 	str.w	lr, [r0]
 801da38:	6104      	str	r4, [r0, #16]
 801da3a:	2d00      	cmp	r5, #0
 801da3c:	f2c0 8095 	blt.w	801db6a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801da40:	fb95 f4f6 	sdiv	r4, r5, r6
 801da44:	fb06 5514 	mls	r5, r6, r4, r5
 801da48:	6044      	str	r4, [r0, #4]
 801da4a:	6085      	str	r5, [r0, #8]
 801da4c:	60c6      	str	r6, [r0, #12]
 801da4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da52:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801da56:	6945      	ldr	r5, [r0, #20]
 801da58:	59d2      	ldr	r2, [r2, r7]
 801da5a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801da5e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801db8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801da62:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801da66:	ee07 4a10 	vmov	s14, r4
 801da6a:	6804      	ldr	r4, [r0, #0]
 801da6c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801da70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da74:	ee07 2a90 	vmov	s15, r2
 801da78:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da84:	edd3 6a00 	vldr	s13, [r3]
 801da88:	eee6 6a07 	vfma.f32	s13, s12, s14
 801da8c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801da90:	eee6 6a27 	vfma.f32	s13, s12, s15
 801da94:	edc0 6a07 	vstr	s13, [r0, #28]
 801da98:	edd0 6a01 	vldr	s13, [r0, #4]
 801da9c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801daa0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801daa4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801daa8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801daac:	ed80 6a08 	vstr	s12, [r0, #32]
 801dab0:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801dab2:	6242      	str	r2, [r0, #36]	@ 0x24
 801dab4:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801dab8:	ed93 6a03 	vldr	s12, [r3, #12]
 801dabc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dac0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801dac4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801dac8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801dacc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801dad0:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801dad4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dad8:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801dadc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dade:	6302      	str	r2, [r0, #48]	@ 0x30
 801dae0:	ed93 6a06 	vldr	s12, [r3, #24]
 801dae4:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801dae8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801daec:	eeb0 7a46 	vmov.f32	s14, s12
 801daf0:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801daf4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801daf8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801dafc:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801db00:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801db04:	eee6 7a87 	vfma.f32	s15, s13, s14
 801db08:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801db0c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801db0e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801db10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db14:	2410      	movs	r4, #16
 801db16:	f1c5 0501 	rsb	r5, r5, #1
 801db1a:	fb9e fef4 	sdiv	lr, lr, r4
 801db1e:	f015 050f 	ands.w	r5, r5, #15
 801db22:	bf18      	it	ne
 801db24:	2501      	movne	r5, #1
 801db26:	ebae 0e05 	sub.w	lr, lr, r5
 801db2a:	e753      	b.n	801d9d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801db2c:	f04f 0910 	mov.w	r9, #16
 801db30:	f1c5 0501 	rsb	r5, r5, #1
 801db34:	fb94 f4f9 	sdiv	r4, r4, r9
 801db38:	f015 050f 	ands.w	r5, r5, #15
 801db3c:	bf18      	it	ne
 801db3e:	2501      	movne	r5, #1
 801db40:	1b64      	subs	r4, r4, r5
 801db42:	e755      	b.n	801d9f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801db44:	4264      	negs	r4, r4
 801db46:	fb94 fef6 	sdiv	lr, r4, r6
 801db4a:	f1ce 0800 	rsb	r8, lr, #0
 801db4e:	fb06 441e 	mls	r4, r6, lr, r4
 801db52:	f8c0 8000 	str.w	r8, [r0]
 801db56:	6104      	str	r4, [r0, #16]
 801db58:	2c00      	cmp	r4, #0
 801db5a:	f43f af6e 	beq.w	801da3a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801db5e:	ea6f 0e0e 	mvn.w	lr, lr
 801db62:	1b34      	subs	r4, r6, r4
 801db64:	f8c0 e000 	str.w	lr, [r0]
 801db68:	e766      	b.n	801da38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801db6a:	426d      	negs	r5, r5
 801db6c:	fb95 f4f6 	sdiv	r4, r5, r6
 801db70:	f1c4 0e00 	rsb	lr, r4, #0
 801db74:	fb06 5514 	mls	r5, r6, r4, r5
 801db78:	f8c0 e004 	str.w	lr, [r0, #4]
 801db7c:	6085      	str	r5, [r0, #8]
 801db7e:	2d00      	cmp	r5, #0
 801db80:	f43f af64 	beq.w	801da4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801db84:	43e4      	mvns	r4, r4
 801db86:	1b75      	subs	r5, r6, r5
 801db88:	6044      	str	r4, [r0, #4]
 801db8a:	e75e      	b.n	801da4a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801db8c:	3d800000 	.word	0x3d800000

0801db90 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801db90:	4602      	mov	r2, r0
 801db92:	b148      	cbz	r0, 801dba8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801db94:	2300      	movs	r3, #0
 801db96:	b298      	uxth	r0, r3
 801db98:	3301      	adds	r3, #1
 801db9a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801db9e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801dba2:	2900      	cmp	r1, #0
 801dba4:	d1f7      	bne.n	801db96 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801dba6:	4770      	bx	lr
 801dba8:	4770      	bx	lr

0801dbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801dbaa:	b530      	push	{r4, r5, lr}
 801dbac:	4604      	mov	r4, r0
 801dbae:	b159      	cbz	r1, 801dbc8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801dbb0:	b148      	cbz	r0, 801dbc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	b298      	uxth	r0, r3
 801dbb6:	4282      	cmp	r2, r0
 801dbb8:	d905      	bls.n	801dbc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dbba:	5ccd      	ldrb	r5, [r1, r3]
 801dbbc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801dbc0:	3301      	adds	r3, #1
 801dbc2:	2d00      	cmp	r5, #0
 801dbc4:	d1f6      	bne.n	801dbb4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801dbc6:	bd30      	pop	{r4, r5, pc}
 801dbc8:	4608      	mov	r0, r1
 801dbca:	e7fc      	b.n	801dbc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801dbcc <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbce:	b08b      	sub	sp, #44	@ 0x2c
 801dbd0:	468c      	mov	ip, r1
 801dbd2:	4604      	mov	r4, r0
 801dbd4:	2100      	movs	r1, #0
 801dbd6:	261f      	movs	r6, #31
 801dbd8:	af01      	add	r7, sp, #4
 801dbda:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801dbde:	1e71      	subs	r1, r6, #1
 801dbe0:	fb94 fef3 	sdiv	lr, r4, r3
 801dbe4:	fb03 441e 	mls	r4, r3, lr, r4
 801dbe8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801dbec:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801dbf0:	b2ec      	uxtb	r4, r5
 801dbf2:	2d09      	cmp	r5, #9
 801dbf4:	bfd4      	ite	le
 801dbf6:	3430      	addle	r4, #48	@ 0x30
 801dbf8:	3457      	addgt	r4, #87	@ 0x57
 801dbfa:	b2e4      	uxtb	r4, r4
 801dbfc:	55bc      	strb	r4, [r7, r6]
 801dbfe:	4674      	mov	r4, lr
 801dc00:	b974      	cbnz	r4, 801dc20 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801dc02:	2800      	cmp	r0, #0
 801dc04:	da05      	bge.n	801dc12 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801dc06:	ab0a      	add	r3, sp, #40	@ 0x28
 801dc08:	4419      	add	r1, r3
 801dc0a:	232d      	movs	r3, #45	@ 0x2d
 801dc0c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801dc10:	1eb1      	subs	r1, r6, #2
 801dc12:	3101      	adds	r1, #1
 801dc14:	4660      	mov	r0, ip
 801dc16:	4439      	add	r1, r7
 801dc18:	f7ff ffc7 	bl	801dbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dc1c:	b00b      	add	sp, #44	@ 0x2c
 801dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc20:	460e      	mov	r6, r1
 801dc22:	e7dc      	b.n	801dbde <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801dc24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801dc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc26:	468c      	mov	ip, r1
 801dc28:	b08b      	sub	sp, #44	@ 0x2c
 801dc2a:	2100      	movs	r1, #0
 801dc2c:	ae01      	add	r6, sp, #4
 801dc2e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801dc32:	211f      	movs	r1, #31
 801dc34:	fbb0 f7f3 	udiv	r7, r0, r3
 801dc38:	fb03 0517 	mls	r5, r3, r7, r0
 801dc3c:	4638      	mov	r0, r7
 801dc3e:	b2ec      	uxtb	r4, r5
 801dc40:	2d09      	cmp	r5, #9
 801dc42:	bfd4      	ite	le
 801dc44:	3430      	addle	r4, #48	@ 0x30
 801dc46:	3457      	addgt	r4, #87	@ 0x57
 801dc48:	b2e4      	uxtb	r4, r4
 801dc4a:	558c      	strb	r4, [r1, r6]
 801dc4c:	1e4c      	subs	r4, r1, #1
 801dc4e:	b92f      	cbnz	r7, 801dc5c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801dc50:	4431      	add	r1, r6
 801dc52:	4660      	mov	r0, ip
 801dc54:	f7ff ffa9 	bl	801dbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dc58:	b00b      	add	sp, #44	@ 0x2c
 801dc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc5c:	4621      	mov	r1, r4
 801dc5e:	e7e9      	b.n	801dc34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801dc60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc64:	b085      	sub	sp, #20
 801dc66:	4691      	mov	r9, r2
 801dc68:	6802      	ldr	r2, [r0, #0]
 801dc6a:	4688      	mov	r8, r1
 801dc6c:	461c      	mov	r4, r3
 801dc6e:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801dc72:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801dc76:	4683      	mov	fp, r0
 801dc78:	4610      	mov	r0, r2
 801dc7a:	9103      	str	r1, [sp, #12]
 801dc7c:	9302      	str	r3, [sp, #8]
 801dc7e:	9201      	str	r2, [sp, #4]
 801dc80:	f7ff ff86 	bl	801db90 <_ZN8touchgfx7Unicode6strlenEPKt>
 801dc84:	f1b8 0f00 	cmp.w	r8, #0
 801dc88:	bf0c      	ite	eq
 801dc8a:	4684      	moveq	ip, r0
 801dc8c:	f100 0c01 	addne.w	ip, r0, #1
 801dc90:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801dc94:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801dc98:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801dc9a:	fa1f fc8c 	uxth.w	ip, ip
 801dc9e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801dca0:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801dca4:	9903      	ldr	r1, [sp, #12]
 801dca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801dcaa:	d041      	beq.n	801dd30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801dcac:	d834      	bhi.n	801dd18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801dcae:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801dcb2:	d059      	beq.n	801dd68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801dcb4:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801dcb8:	d03a      	beq.n	801dd30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801dcba:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801dcbe:	d034      	beq.n	801dd2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801dcc0:	2400      	movs	r4, #0
 801dcc2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801dcc6:	3a01      	subs	r2, #1
 801dcc8:	b169      	cbz	r1, 801dce6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801dcca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dccc:	458c      	cmp	ip, r1
 801dcce:	da09      	bge.n	801dce4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801dcd0:	eba1 010c 	sub.w	r1, r1, ip
 801dcd4:	b289      	uxth	r1, r1
 801dcd6:	b933      	cbnz	r3, 801dce6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801dcd8:	2e00      	cmp	r6, #0
 801dcda:	d051      	beq.n	801dd80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801dcdc:	2800      	cmp	r0, #0
 801dcde:	d04f      	beq.n	801dd80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801dce0:	440c      	add	r4, r1
 801dce2:	b2a4      	uxth	r4, r4
 801dce4:	2100      	movs	r1, #0
 801dce6:	682b      	ldr	r3, [r5, #0]
 801dce8:	4293      	cmp	r3, r2
 801dcea:	da07      	bge.n	801dcfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801dcec:	f1b8 0f00 	cmp.w	r8, #0
 801dcf0:	d004      	beq.n	801dcfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801dcf2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801dcf6:	682b      	ldr	r3, [r5, #0]
 801dcf8:	3301      	adds	r3, #1
 801dcfa:	602b      	str	r3, [r5, #0]
 801dcfc:	2730      	movs	r7, #48	@ 0x30
 801dcfe:	2c00      	cmp	r4, #0
 801dd00:	d04e      	beq.n	801dda0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801dd02:	682e      	ldr	r6, [r5, #0]
 801dd04:	3c01      	subs	r4, #1
 801dd06:	42b2      	cmp	r2, r6
 801dd08:	b2a4      	uxth	r4, r4
 801dd0a:	dd49      	ble.n	801dda0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801dd0c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801dd10:	682b      	ldr	r3, [r5, #0]
 801dd12:	3301      	adds	r3, #1
 801dd14:	602b      	str	r3, [r5, #0]
 801dd16:	e7f2      	b.n	801dcfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801dd18:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801dd1c:	d01d      	beq.n	801dd5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801dd1e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801dd22:	d002      	beq.n	801dd2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801dd24:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801dd28:	e7c9      	b.n	801dcbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801dd2a:	4684      	mov	ip, r0
 801dd2c:	f04f 0800 	mov.w	r8, #0
 801dd30:	2c00      	cmp	r4, #0
 801dd32:	d0c6      	beq.n	801dcc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801dd34:	b947      	cbnz	r7, 801dd48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801dd36:	2801      	cmp	r0, #1
 801dd38:	d106      	bne.n	801dd48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801dd3a:	8814      	ldrh	r4, [r2, #0]
 801dd3c:	2c30      	cmp	r4, #48	@ 0x30
 801dd3e:	bf02      	ittt	eq
 801dd40:	3202      	addeq	r2, #2
 801dd42:	4638      	moveq	r0, r7
 801dd44:	f8cb 2000 	streq.w	r2, [fp]
 801dd48:	45bc      	cmp	ip, r7
 801dd4a:	da14      	bge.n	801dd76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801dd4c:	b2bf      	uxth	r7, r7
 801dd4e:	eba7 040c 	sub.w	r4, r7, ip
 801dd52:	46bc      	mov	ip, r7
 801dd54:	b2a4      	uxth	r4, r4
 801dd56:	2600      	movs	r6, #0
 801dd58:	e7b3      	b.n	801dcc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801dd5a:	4684      	mov	ip, r0
 801dd5c:	b16c      	cbz	r4, 801dd7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801dd5e:	42b8      	cmp	r0, r7
 801dd60:	dd00      	ble.n	801dd64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801dd62:	b2b8      	uxth	r0, r7
 801dd64:	2400      	movs	r4, #0
 801dd66:	e003      	b.n	801dd70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801dd68:	f04f 0c01 	mov.w	ip, #1
 801dd6c:	2400      	movs	r4, #0
 801dd6e:	4660      	mov	r0, ip
 801dd70:	4626      	mov	r6, r4
 801dd72:	46a0      	mov	r8, r4
 801dd74:	e7a5      	b.n	801dcc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801dd76:	2400      	movs	r4, #0
 801dd78:	e7ed      	b.n	801dd56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801dd7a:	4626      	mov	r6, r4
 801dd7c:	46a0      	mov	r8, r4
 801dd7e:	e7a0      	b.n	801dcc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801dd80:	2900      	cmp	r1, #0
 801dd82:	d0b0      	beq.n	801dce6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801dd84:	2720      	movs	r7, #32
 801dd86:	682e      	ldr	r6, [r5, #0]
 801dd88:	2900      	cmp	r1, #0
 801dd8a:	d0ac      	beq.n	801dce6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801dd8c:	3901      	subs	r1, #1
 801dd8e:	4296      	cmp	r6, r2
 801dd90:	b289      	uxth	r1, r1
 801dd92:	daa7      	bge.n	801dce4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801dd94:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801dd98:	682b      	ldr	r3, [r5, #0]
 801dd9a:	3301      	adds	r3, #1
 801dd9c:	602b      	str	r3, [r5, #0]
 801dd9e:	e7f2      	b.n	801dd86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801dda0:	b188      	cbz	r0, 801ddc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801dda2:	682b      	ldr	r3, [r5, #0]
 801dda4:	3801      	subs	r0, #1
 801dda6:	429a      	cmp	r2, r3
 801dda8:	b280      	uxth	r0, r0
 801ddaa:	dd0c      	ble.n	801ddc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ddac:	f8db 3000 	ldr.w	r3, [fp]
 801ddb0:	1c9c      	adds	r4, r3, #2
 801ddb2:	f8cb 4000 	str.w	r4, [fp]
 801ddb6:	881c      	ldrh	r4, [r3, #0]
 801ddb8:	682b      	ldr	r3, [r5, #0]
 801ddba:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801ddbe:	682b      	ldr	r3, [r5, #0]
 801ddc0:	3301      	adds	r3, #1
 801ddc2:	602b      	str	r3, [r5, #0]
 801ddc4:	e7ec      	b.n	801dda0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ddc6:	2620      	movs	r6, #32
 801ddc8:	b151      	cbz	r1, 801dde0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ddca:	6828      	ldr	r0, [r5, #0]
 801ddcc:	3901      	subs	r1, #1
 801ddce:	4282      	cmp	r2, r0
 801ddd0:	b289      	uxth	r1, r1
 801ddd2:	dd05      	ble.n	801dde0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ddd4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801ddd8:	682b      	ldr	r3, [r5, #0]
 801ddda:	3301      	adds	r3, #1
 801dddc:	602b      	str	r3, [r5, #0]
 801ddde:	e7f3      	b.n	801ddc8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801dde0:	b005      	add	sp, #20
 801dde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dde6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801dde6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddea:	2400      	movs	r4, #0
 801ddec:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ddf0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801ddf4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801ddf8:	8014      	strh	r4, [r2, #0]
 801ddfa:	701c      	strb	r4, [r3, #0]
 801ddfc:	f888 4000 	strb.w	r4, [r8]
 801de00:	f88c 4000 	strb.w	r4, [ip]
 801de04:	f88e 4000 	strb.w	r4, [lr]
 801de08:	703c      	strb	r4, [r7, #0]
 801de0a:	6804      	ldr	r4, [r0, #0]
 801de0c:	b1a4      	cbz	r4, 801de38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801de0e:	8824      	ldrh	r4, [r4, #0]
 801de10:	f04f 0901 	mov.w	r9, #1
 801de14:	b314      	cbz	r4, 801de5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801de16:	2c2b      	cmp	r4, #43	@ 0x2b
 801de18:	d001      	beq.n	801de1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801de1a:	2c20      	cmp	r4, #32
 801de1c:	d110      	bne.n	801de40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801de1e:	8014      	strh	r4, [r2, #0]
 801de20:	6804      	ldr	r4, [r0, #0]
 801de22:	b10c      	cbz	r4, 801de28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801de24:	3402      	adds	r4, #2
 801de26:	6004      	str	r4, [r0, #0]
 801de28:	680c      	ldr	r4, [r1, #0]
 801de2a:	b10c      	cbz	r4, 801de30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801de2c:	3401      	adds	r4, #1
 801de2e:	600c      	str	r4, [r1, #0]
 801de30:	6804      	ldr	r4, [r0, #0]
 801de32:	b17c      	cbz	r4, 801de54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801de34:	8824      	ldrh	r4, [r4, #0]
 801de36:	e7ed      	b.n	801de14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801de38:	680c      	ldr	r4, [r1, #0]
 801de3a:	b17c      	cbz	r4, 801de5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801de3c:	7824      	ldrb	r4, [r4, #0]
 801de3e:	e7e7      	b.n	801de10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801de40:	2c2d      	cmp	r4, #45	@ 0x2d
 801de42:	d102      	bne.n	801de4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801de44:	f883 9000 	strb.w	r9, [r3]
 801de48:	e7ea      	b.n	801de20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801de4a:	2c23      	cmp	r4, #35	@ 0x23
 801de4c:	d107      	bne.n	801de5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801de4e:	f888 9000 	strb.w	r9, [r8]
 801de52:	e7e5      	b.n	801de20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801de54:	680c      	ldr	r4, [r1, #0]
 801de56:	b10c      	cbz	r4, 801de5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801de58:	7824      	ldrb	r4, [r4, #0]
 801de5a:	e7db      	b.n	801de14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801de5c:	2400      	movs	r4, #0
 801de5e:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801de62:	2b09      	cmp	r3, #9
 801de64:	d901      	bls.n	801de6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801de66:	2c2a      	cmp	r4, #42	@ 0x2a
 801de68:	d122      	bne.n	801deb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801de6a:	2301      	movs	r3, #1
 801de6c:	2c30      	cmp	r4, #48	@ 0x30
 801de6e:	f88e 3000 	strb.w	r3, [lr]
 801de72:	d10d      	bne.n	801de90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801de74:	f88c 3000 	strb.w	r3, [ip]
 801de78:	6803      	ldr	r3, [r0, #0]
 801de7a:	b10b      	cbz	r3, 801de80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801de7c:	3302      	adds	r3, #2
 801de7e:	6003      	str	r3, [r0, #0]
 801de80:	680b      	ldr	r3, [r1, #0]
 801de82:	b10b      	cbz	r3, 801de88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801de84:	3301      	adds	r3, #1
 801de86:	600b      	str	r3, [r1, #0]
 801de88:	6803      	ldr	r3, [r0, #0]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d02f      	beq.n	801deee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801de8e:	881c      	ldrh	r4, [r3, #0]
 801de90:	2c2a      	cmp	r4, #42	@ 0x2a
 801de92:	d135      	bne.n	801df00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801de94:	f04f 33ff 	mov.w	r3, #4294967295
 801de98:	6033      	str	r3, [r6, #0]
 801de9a:	6803      	ldr	r3, [r0, #0]
 801de9c:	b10b      	cbz	r3, 801dea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801de9e:	3302      	adds	r3, #2
 801dea0:	6003      	str	r3, [r0, #0]
 801dea2:	680b      	ldr	r3, [r1, #0]
 801dea4:	b10b      	cbz	r3, 801deaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801dea6:	3301      	adds	r3, #1
 801dea8:	600b      	str	r3, [r1, #0]
 801deaa:	6803      	ldr	r3, [r0, #0]
 801deac:	b31b      	cbz	r3, 801def6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801deae:	881c      	ldrh	r4, [r3, #0]
 801deb0:	2c2e      	cmp	r4, #46	@ 0x2e
 801deb2:	d11a      	bne.n	801deea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801deb4:	2301      	movs	r3, #1
 801deb6:	703b      	strb	r3, [r7, #0]
 801deb8:	6803      	ldr	r3, [r0, #0]
 801deba:	b10b      	cbz	r3, 801dec0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801debc:	3302      	adds	r3, #2
 801debe:	6003      	str	r3, [r0, #0]
 801dec0:	680b      	ldr	r3, [r1, #0]
 801dec2:	b10b      	cbz	r3, 801dec8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801dec4:	3301      	adds	r3, #1
 801dec6:	600b      	str	r3, [r1, #0]
 801dec8:	6803      	ldr	r3, [r0, #0]
 801deca:	2b00      	cmp	r3, #0
 801decc:	d036      	beq.n	801df3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801dece:	881b      	ldrh	r3, [r3, #0]
 801ded0:	2b2a      	cmp	r3, #42	@ 0x2a
 801ded2:	d137      	bne.n	801df44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ded4:	f04f 33ff 	mov.w	r3, #4294967295
 801ded8:	602b      	str	r3, [r5, #0]
 801deda:	6803      	ldr	r3, [r0, #0]
 801dedc:	b10b      	cbz	r3, 801dee2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801dede:	3302      	adds	r3, #2
 801dee0:	6003      	str	r3, [r0, #0]
 801dee2:	680b      	ldr	r3, [r1, #0]
 801dee4:	b10b      	cbz	r3, 801deea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dee6:	3301      	adds	r3, #1
 801dee8:	600b      	str	r3, [r1, #0]
 801deea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801deee:	680c      	ldr	r4, [r1, #0]
 801def0:	b134      	cbz	r4, 801df00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801def2:	7824      	ldrb	r4, [r4, #0]
 801def4:	e7cc      	b.n	801de90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801def6:	680b      	ldr	r3, [r1, #0]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d0f6      	beq.n	801deea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801defc:	781c      	ldrb	r4, [r3, #0]
 801defe:	e7d7      	b.n	801deb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801df00:	2300      	movs	r3, #0
 801df02:	220a      	movs	r2, #10
 801df04:	6033      	str	r3, [r6, #0]
 801df06:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801df0a:	fa1f f38c 	uxth.w	r3, ip
 801df0e:	2b09      	cmp	r3, #9
 801df10:	d8ce      	bhi.n	801deb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801df12:	6833      	ldr	r3, [r6, #0]
 801df14:	fb02 c303 	mla	r3, r2, r3, ip
 801df18:	6033      	str	r3, [r6, #0]
 801df1a:	6803      	ldr	r3, [r0, #0]
 801df1c:	b10b      	cbz	r3, 801df22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801df1e:	3302      	adds	r3, #2
 801df20:	6003      	str	r3, [r0, #0]
 801df22:	680b      	ldr	r3, [r1, #0]
 801df24:	b10b      	cbz	r3, 801df2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801df26:	3301      	adds	r3, #1
 801df28:	600b      	str	r3, [r1, #0]
 801df2a:	6803      	ldr	r3, [r0, #0]
 801df2c:	b10b      	cbz	r3, 801df32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801df2e:	881c      	ldrh	r4, [r3, #0]
 801df30:	e7e9      	b.n	801df06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801df32:	680c      	ldr	r4, [r1, #0]
 801df34:	2c00      	cmp	r4, #0
 801df36:	d0e6      	beq.n	801df06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801df38:	7824      	ldrb	r4, [r4, #0]
 801df3a:	e7e4      	b.n	801df06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801df3c:	680b      	ldr	r3, [r1, #0]
 801df3e:	b10b      	cbz	r3, 801df44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801df40:	781b      	ldrb	r3, [r3, #0]
 801df42:	e7c5      	b.n	801ded0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801df44:	2200      	movs	r2, #0
 801df46:	240a      	movs	r4, #10
 801df48:	602a      	str	r2, [r5, #0]
 801df4a:	3b30      	subs	r3, #48	@ 0x30
 801df4c:	682a      	ldr	r2, [r5, #0]
 801df4e:	b29e      	uxth	r6, r3
 801df50:	2e09      	cmp	r6, #9
 801df52:	d813      	bhi.n	801df7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801df54:	fb04 3302 	mla	r3, r4, r2, r3
 801df58:	602b      	str	r3, [r5, #0]
 801df5a:	6803      	ldr	r3, [r0, #0]
 801df5c:	b10b      	cbz	r3, 801df62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801df5e:	3302      	adds	r3, #2
 801df60:	6003      	str	r3, [r0, #0]
 801df62:	680b      	ldr	r3, [r1, #0]
 801df64:	b10b      	cbz	r3, 801df6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801df66:	3301      	adds	r3, #1
 801df68:	600b      	str	r3, [r1, #0]
 801df6a:	6803      	ldr	r3, [r0, #0]
 801df6c:	b10b      	cbz	r3, 801df72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801df6e:	881b      	ldrh	r3, [r3, #0]
 801df70:	e7eb      	b.n	801df4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801df72:	680b      	ldr	r3, [r1, #0]
 801df74:	2b00      	cmp	r3, #0
 801df76:	d0e8      	beq.n	801df4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801df78:	781b      	ldrb	r3, [r3, #0]
 801df7a:	e7e6      	b.n	801df4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801df7c:	2a06      	cmp	r2, #6
 801df7e:	bfa8      	it	ge
 801df80:	2206      	movge	r2, #6
 801df82:	602a      	str	r2, [r5, #0]
 801df84:	e7b1      	b.n	801deea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801df86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801df86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df8a:	b0a3      	sub	sp, #140	@ 0x8c
 801df8c:	2600      	movs	r6, #0
 801df8e:	4607      	mov	r7, r0
 801df90:	4688      	mov	r8, r1
 801df92:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801df96:	4631      	mov	r1, r6
 801df98:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801df9a:	4648      	mov	r0, r9
 801df9c:	960d      	str	r6, [sp, #52]	@ 0x34
 801df9e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801dfa2:	2242      	movs	r2, #66	@ 0x42
 801dfa4:	f00f ffcc 	bl	802df40 <memset>
 801dfa8:	b15f      	cbz	r7, 801dfc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801dfaa:	f108 3aff 	add.w	sl, r8, #4294967295
 801dfae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dfb2:	b152      	cbz	r2, 801dfca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801dfb4:	8812      	ldrh	r2, [r2, #0]
 801dfb6:	b10a      	cbz	r2, 801dfbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dfb8:	459a      	cmp	sl, r3
 801dfba:	dc2e      	bgt.n	801e01a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801dfbc:	2200      	movs	r2, #0
 801dfbe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dfc2:	4638      	mov	r0, r7
 801dfc4:	b023      	add	sp, #140	@ 0x8c
 801dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfca:	9a08      	ldr	r2, [sp, #32]
 801dfcc:	2a00      	cmp	r2, #0
 801dfce:	d0f5      	beq.n	801dfbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dfd0:	7812      	ldrb	r2, [r2, #0]
 801dfd2:	e7f0      	b.n	801dfb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801dfd4:	2d00      	cmp	r5, #0
 801dfd6:	d0ea      	beq.n	801dfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dfd8:	782a      	ldrb	r2, [r5, #0]
 801dfda:	b142      	cbz	r2, 801dfee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801dfdc:	2a25      	cmp	r2, #37	@ 0x25
 801dfde:	d001      	beq.n	801dfe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801dfe0:	459a      	cmp	sl, r3
 801dfe2:	dc08      	bgt.n	801dff6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801dfe4:	f1bb 0f00 	cmp.w	fp, #0
 801dfe8:	d121      	bne.n	801e02e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801dfea:	2d00      	cmp	r5, #0
 801dfec:	d0df      	beq.n	801dfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dfee:	782a      	ldrb	r2, [r5, #0]
 801dff0:	f04f 0b00 	mov.w	fp, #0
 801dff4:	e01d      	b.n	801e032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801dff6:	f1bb 0f00 	cmp.w	fp, #0
 801dffa:	d077      	beq.n	801e0ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801dffc:	f8bb 2000 	ldrh.w	r2, [fp]
 801e000:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e004:	f1bb 0f00 	cmp.w	fp, #0
 801e008:	d002      	beq.n	801e010 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e00a:	f10b 0202 	add.w	r2, fp, #2
 801e00e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e010:	b10d      	cbz	r5, 801e016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e012:	3501      	adds	r5, #1
 801e014:	9508      	str	r5, [sp, #32]
 801e016:	3301      	adds	r3, #1
 801e018:	930d      	str	r3, [sp, #52]	@ 0x34
 801e01a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e01c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e020:	f1bb 0f00 	cmp.w	fp, #0
 801e024:	d0d6      	beq.n	801dfd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e026:	f8bb 2000 	ldrh.w	r2, [fp]
 801e02a:	2a00      	cmp	r2, #0
 801e02c:	d1d6      	bne.n	801dfdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e02e:	f8bb 2000 	ldrh.w	r2, [fp]
 801e032:	2a00      	cmp	r2, #0
 801e034:	d0bb      	beq.n	801dfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e036:	459a      	cmp	sl, r3
 801e038:	ddb9      	ble.n	801dfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e03a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801e03e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801e042:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801e046:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801e04a:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801e04e:	960e      	str	r6, [sp, #56]	@ 0x38
 801e050:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801e054:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e056:	f1bb 0f00 	cmp.w	fp, #0
 801e05a:	d002      	beq.n	801e062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e05c:	f10b 0302 	add.w	r3, fp, #2
 801e060:	9309      	str	r3, [sp, #36]	@ 0x24
 801e062:	b10d      	cbz	r5, 801e068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e064:	1c6b      	adds	r3, r5, #1
 801e066:	9308      	str	r3, [sp, #32]
 801e068:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e06a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801e06e:	a908      	add	r1, sp, #32
 801e070:	a809      	add	r0, sp, #36	@ 0x24
 801e072:	9305      	str	r3, [sp, #20]
 801e074:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801e078:	9304      	str	r3, [sp, #16]
 801e07a:	ab0e      	add	r3, sp, #56	@ 0x38
 801e07c:	9303      	str	r3, [sp, #12]
 801e07e:	ab0c      	add	r3, sp, #48	@ 0x30
 801e080:	9302      	str	r3, [sp, #8]
 801e082:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801e086:	9301      	str	r3, [sp, #4]
 801e088:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801e08c:	9300      	str	r3, [sp, #0]
 801e08e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801e092:	f7ff fea8 	bl	801dde6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e098:	2b00      	cmp	r3, #0
 801e09a:	bfbf      	itttt	lt
 801e09c:	6823      	ldrlt	r3, [r4, #0]
 801e09e:	3404      	addlt	r4, #4
 801e0a0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e0a4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801e0a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	bfbe      	ittt	lt
 801e0ac:	6823      	ldrlt	r3, [r4, #0]
 801e0ae:	3404      	addlt	r4, #4
 801e0b0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e0b4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e0b8:	bfb8      	it	lt
 801e0ba:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801e0bc:	b1d9      	cbz	r1, 801e0f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e0be:	880b      	ldrh	r3, [r1, #0]
 801e0c0:	2b69      	cmp	r3, #105	@ 0x69
 801e0c2:	d01f      	beq.n	801e104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e0c4:	d82f      	bhi.n	801e126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e0c6:	2b58      	cmp	r3, #88	@ 0x58
 801e0c8:	d01c      	beq.n	801e104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e0ca:	d818      	bhi.n	801e0fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e0cc:	2b25      	cmp	r3, #37	@ 0x25
 801e0ce:	d034      	beq.n	801e13a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e0d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e0d2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e0d6:	f1bb 0f00 	cmp.w	fp, #0
 801e0da:	f000 80b7 	beq.w	801e24c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e0de:	f8bb 5000 	ldrh.w	r5, [fp]
 801e0e2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e0e6:	3301      	adds	r3, #1
 801e0e8:	930d      	str	r3, [sp, #52]	@ 0x34
 801e0ea:	e029      	b.n	801e140 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e0ec:	b10d      	cbz	r5, 801e0f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e0ee:	782a      	ldrb	r2, [r5, #0]
 801e0f0:	e786      	b.n	801e000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e0f2:	462a      	mov	r2, r5
 801e0f4:	e784      	b.n	801e000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e0f6:	2a00      	cmp	r2, #0
 801e0f8:	d0ea      	beq.n	801e0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e0fa:	7813      	ldrb	r3, [r2, #0]
 801e0fc:	e7e0      	b.n	801e0c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e0fe:	3b63      	subs	r3, #99	@ 0x63
 801e100:	2b01      	cmp	r3, #1
 801e102:	d8e5      	bhi.n	801e0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e104:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801e108:	b329      	cbz	r1, 801e156 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e10a:	880b      	ldrh	r3, [r1, #0]
 801e10c:	2b69      	cmp	r3, #105	@ 0x69
 801e10e:	d063      	beq.n	801e1d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e110:	d825      	bhi.n	801e15e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e112:	2b63      	cmp	r3, #99	@ 0x63
 801e114:	d038      	beq.n	801e188 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e116:	2b64      	cmp	r3, #100	@ 0x64
 801e118:	d05e      	beq.n	801e1d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e11a:	2b58      	cmp	r3, #88	@ 0x58
 801e11c:	d07a      	beq.n	801e214 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e11e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801e122:	4625      	mov	r5, r4
 801e124:	e036      	b.n	801e194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e126:	2b73      	cmp	r3, #115	@ 0x73
 801e128:	d0ec      	beq.n	801e104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e12a:	d802      	bhi.n	801e132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e12c:	2b6f      	cmp	r3, #111	@ 0x6f
 801e12e:	d1cf      	bne.n	801e0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e130:	e7e8      	b.n	801e104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e132:	2b75      	cmp	r3, #117	@ 0x75
 801e134:	d0e6      	beq.n	801e104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e136:	2b78      	cmp	r3, #120	@ 0x78
 801e138:	e7f9      	b.n	801e12e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e13a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e13c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e142:	b10b      	cbz	r3, 801e148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e144:	3302      	adds	r3, #2
 801e146:	9309      	str	r3, [sp, #36]	@ 0x24
 801e148:	9b08      	ldr	r3, [sp, #32]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	f43f af2f 	beq.w	801dfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e150:	3301      	adds	r3, #1
 801e152:	9308      	str	r3, [sp, #32]
 801e154:	e72b      	b.n	801dfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e156:	2a00      	cmp	r2, #0
 801e158:	d0e1      	beq.n	801e11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e15a:	7813      	ldrb	r3, [r2, #0]
 801e15c:	e7d6      	b.n	801e10c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e15e:	2b73      	cmp	r3, #115	@ 0x73
 801e160:	d036      	beq.n	801e1d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e162:	d807      	bhi.n	801e174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e164:	2b6f      	cmp	r3, #111	@ 0x6f
 801e166:	d1da      	bne.n	801e11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e168:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e16a:	1d25      	adds	r5, r4, #4
 801e16c:	2308      	movs	r3, #8
 801e16e:	eba8 0202 	sub.w	r2, r8, r2
 801e172:	e049      	b.n	801e208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e174:	2b75      	cmp	r3, #117	@ 0x75
 801e176:	d042      	beq.n	801e1fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e178:	2b78      	cmp	r3, #120	@ 0x78
 801e17a:	d1d0      	bne.n	801e11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e17c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e17e:	1d25      	adds	r5, r4, #4
 801e180:	2310      	movs	r3, #16
 801e182:	eba8 0202 	sub.w	r2, r8, r2
 801e186:	e03f      	b.n	801e208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e188:	6823      	ldr	r3, [r4, #0]
 801e18a:	1d25      	adds	r5, r4, #4
 801e18c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e190:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801e194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e196:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d051      	beq.n	801e242 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e19e:	881a      	ldrh	r2, [r3, #0]
 801e1a0:	a80d      	add	r0, sp, #52	@ 0x34
 801e1a2:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801e1a6:	462c      	mov	r4, r5
 801e1a8:	9005      	str	r0, [sp, #20]
 801e1aa:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801e1ae:	9004      	str	r0, [sp, #16]
 801e1b0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e1b2:	9003      	str	r0, [sp, #12]
 801e1b4:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801e1b8:	9002      	str	r0, [sp, #8]
 801e1ba:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e1bc:	9001      	str	r0, [sp, #4]
 801e1be:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801e1c2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e1c6:	9000      	str	r0, [sp, #0]
 801e1c8:	a810      	add	r0, sp, #64	@ 0x40
 801e1ca:	f7ff fd49 	bl	801dc60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e1ce:	e7b7      	b.n	801e140 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e1d0:	1d25      	adds	r5, r4, #4
 801e1d2:	6823      	ldr	r3, [r4, #0]
 801e1d4:	9310      	str	r3, [sp, #64]	@ 0x40
 801e1d6:	e7dd      	b.n	801e194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e1d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e1da:	230a      	movs	r3, #10
 801e1dc:	4649      	mov	r1, r9
 801e1de:	6820      	ldr	r0, [r4, #0]
 801e1e0:	eba8 0202 	sub.w	r2, r8, r2
 801e1e4:	1d25      	adds	r5, r4, #4
 801e1e6:	b292      	uxth	r2, r2
 801e1e8:	f7ff fcf0 	bl	801dbcc <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801e1ec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801e1f0:	2b2d      	cmp	r3, #45	@ 0x2d
 801e1f2:	d1cf      	bne.n	801e194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e1f4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e1f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1fa:	3302      	adds	r3, #2
 801e1fc:	e7ea      	b.n	801e1d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e1fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e200:	1d25      	adds	r5, r4, #4
 801e202:	230a      	movs	r3, #10
 801e204:	eba8 0202 	sub.w	r2, r8, r2
 801e208:	b292      	uxth	r2, r2
 801e20a:	4649      	mov	r1, r9
 801e20c:	6820      	ldr	r0, [r4, #0]
 801e20e:	f7ff fd09 	bl	801dc24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e212:	e7bf      	b.n	801e194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e216:	2310      	movs	r3, #16
 801e218:	4649      	mov	r1, r9
 801e21a:	6820      	ldr	r0, [r4, #0]
 801e21c:	eba8 0202 	sub.w	r2, r8, r2
 801e220:	1d25      	adds	r5, r4, #4
 801e222:	b292      	uxth	r2, r2
 801e224:	f7ff fcfe 	bl	801dc24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e228:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801e22c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e230:	2b00      	cmp	r3, #0
 801e232:	d0af      	beq.n	801e194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e234:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801e238:	2919      	cmp	r1, #25
 801e23a:	d8f7      	bhi.n	801e22c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e23c:	3b20      	subs	r3, #32
 801e23e:	8013      	strh	r3, [r2, #0]
 801e240:	e7f4      	b.n	801e22c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e242:	9a08      	ldr	r2, [sp, #32]
 801e244:	2a00      	cmp	r2, #0
 801e246:	d0ab      	beq.n	801e1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e248:	7812      	ldrb	r2, [r2, #0]
 801e24a:	e7a9      	b.n	801e1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e24c:	2d00      	cmp	r5, #0
 801e24e:	f43f af48 	beq.w	801e0e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e252:	782d      	ldrb	r5, [r5, #0]
 801e254:	e745      	b.n	801e0e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e256:	b507      	push	{r0, r1, r2, lr}
 801e258:	9300      	str	r3, [sp, #0]
 801e25a:	4613      	mov	r3, r2
 801e25c:	2200      	movs	r2, #0
 801e25e:	f7ff fe92 	bl	801df86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e262:	b003      	add	sp, #12
 801e264:	f85d fb04 	ldr.w	pc, [sp], #4

0801e268 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e268:	b40c      	push	{r2, r3}
 801e26a:	b507      	push	{r0, r1, r2, lr}
 801e26c:	ab04      	add	r3, sp, #16
 801e26e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e272:	9301      	str	r3, [sp, #4]
 801e274:	f7ff ffef 	bl	801e256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e278:	b003      	add	sp, #12
 801e27a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e27e:	b002      	add	sp, #8
 801e280:	4770      	bx	lr
	...

0801e284 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e284:	4b01      	ldr	r3, [pc, #4]	@ (801e28c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e286:	6018      	str	r0, [r3, #0]
 801e288:	4770      	bx	lr
 801e28a:	bf00      	nop
 801e28c:	2001232c 	.word	0x2001232c

0801e290 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e290:	4b06      	ldr	r3, [pc, #24]	@ (801e2ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e292:	881a      	ldrh	r2, [r3, #0]
 801e294:	4282      	cmp	r2, r0
 801e296:	d807      	bhi.n	801e2a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e298:	4b05      	ldr	r3, [pc, #20]	@ (801e2b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e29a:	881b      	ldrh	r3, [r3, #0]
 801e29c:	4413      	add	r3, r2
 801e29e:	4298      	cmp	r0, r3
 801e2a0:	bfac      	ite	ge
 801e2a2:	2000      	movge	r0, #0
 801e2a4:	2001      	movlt	r0, #1
 801e2a6:	4770      	bx	lr
 801e2a8:	2000      	movs	r0, #0
 801e2aa:	4770      	bx	lr
 801e2ac:	2001234c 	.word	0x2001234c
 801e2b0:	20012350 	.word	0x20012350

0801e2b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e2b4:	b508      	push	{r3, lr}
 801e2b6:	4601      	mov	r1, r0
 801e2b8:	f7ff ffea 	bl	801e290 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e2bc:	b118      	cbz	r0, 801e2c6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e2be:	4b02      	ldr	r3, [pc, #8]	@ (801e2c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e2c6:	bd08      	pop	{r3, pc}
 801e2c8:	20012330 	.word	0x20012330

0801e2cc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801e2cc:	b538      	push	{r3, r4, r5, lr}
 801e2ce:	4604      	mov	r4, r0
 801e2d0:	f7ff ffde 	bl	801e290 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e2d4:	b1d8      	cbz	r0, 801e30e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e2d6:	4b0f      	ldr	r3, [pc, #60]	@ (801e314 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801e2d8:	881b      	ldrh	r3, [r3, #0]
 801e2da:	1ae4      	subs	r4, r4, r3
 801e2dc:	230e      	movs	r3, #14
 801e2de:	4363      	muls	r3, r4
 801e2e0:	4c0d      	ldr	r4, [pc, #52]	@ (801e318 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801e2e2:	6825      	ldr	r5, [r4, #0]
 801e2e4:	18ea      	adds	r2, r5, r3
 801e2e6:	7b12      	ldrb	r2, [r2, #12]
 801e2e8:	f012 0220 	ands.w	r2, r2, #32
 801e2ec:	d010      	beq.n	801e310 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801e2ee:	f9b1 2000 	ldrsh.w	r2, [r1]
 801e2f2:	52ea      	strh	r2, [r5, r3]
 801e2f4:	6822      	ldr	r2, [r4, #0]
 801e2f6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801e2fa:	441a      	add	r2, r3
 801e2fc:	8055      	strh	r5, [r2, #2]
 801e2fe:	6822      	ldr	r2, [r4, #0]
 801e300:	4413      	add	r3, r2
 801e302:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801e306:	809a      	strh	r2, [r3, #4]
 801e308:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801e30c:	80da      	strh	r2, [r3, #6]
 801e30e:	bd38      	pop	{r3, r4, r5, pc}
 801e310:	4610      	mov	r0, r2
 801e312:	e7fc      	b.n	801e30e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e314:	2001234c 	.word	0x2001234c
 801e318:	20012334 	.word	0x20012334

0801e31c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801e31c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e320:	4606      	mov	r6, r0
 801e322:	460c      	mov	r4, r1
 801e324:	f7ff ffb4 	bl	801e290 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e328:	b918      	cbnz	r0, 801e332 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801e32a:	2000      	movs	r0, #0
 801e32c:	b002      	add	sp, #8
 801e32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e332:	4608      	mov	r0, r1
 801e334:	f7f6 fc2d 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e338:	2800      	cmp	r0, #0
 801e33a:	d1f6      	bne.n	801e32a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e33c:	4b3f      	ldr	r3, [pc, #252]	@ (801e43c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801e33e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801e440 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801e342:	881d      	ldrh	r5, [r3, #0]
 801e344:	f8d9 a000 	ldr.w	sl, [r9]
 801e348:	46c8      	mov	r8, r9
 801e34a:	1b73      	subs	r3, r6, r5
 801e34c:	250e      	movs	r5, #14
 801e34e:	435d      	muls	r5, r3
 801e350:	eb0a 0705 	add.w	r7, sl, r5
 801e354:	7b3b      	ldrb	r3, [r7, #12]
 801e356:	f013 0f20 	tst.w	r3, #32
 801e35a:	d0e6      	beq.n	801e32a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e35c:	4621      	mov	r1, r4
 801e35e:	4638      	mov	r0, r7
 801e360:	f7fc fdf2 	bl	801af48 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e364:	2800      	cmp	r0, #0
 801e366:	d1e1      	bne.n	801e32c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e368:	4639      	mov	r1, r7
 801e36a:	4620      	mov	r0, r4
 801e36c:	f7fc fdec 	bl	801af48 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e370:	b108      	cbz	r0, 801e376 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801e372:	4621      	mov	r1, r4
 801e374:	e020      	b.n	801e3b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801e376:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e37a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801e37e:	429a      	cmp	r2, r3
 801e380:	d11e      	bne.n	801e3c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e382:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801e38a:	429a      	cmp	r2, r3
 801e38c:	d118      	bne.n	801e3c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e38e:	6820      	ldr	r0, [r4, #0]
 801e390:	466b      	mov	r3, sp
 801e392:	6861      	ldr	r1, [r4, #4]
 801e394:	c303      	stmia	r3!, {r0, r1}
 801e396:	4639      	mov	r1, r7
 801e398:	4668      	mov	r0, sp
 801e39a:	f7f8 fb86 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e39e:	f8d9 3000 	ldr.w	r3, [r9]
 801e3a2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e3a6:	442b      	add	r3, r5
 801e3a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e3ac:	4413      	add	r3, r2
 801e3ae:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	dc04      	bgt.n	801e3c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e3b6:	4669      	mov	r1, sp
 801e3b8:	4630      	mov	r0, r6
 801e3ba:	f7ff ff87 	bl	801e2cc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801e3be:	e7b5      	b.n	801e32c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e3c0:	f8d8 3000 	ldr.w	r3, [r8]
 801e3c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e3c8:	442b      	add	r3, r5
 801e3ca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e3ce:	4291      	cmp	r1, r2
 801e3d0:	d119      	bne.n	801e406 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e3d2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e3d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e3da:	4291      	cmp	r1, r2
 801e3dc:	d113      	bne.n	801e406 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e3de:	6820      	ldr	r0, [r4, #0]
 801e3e0:	466a      	mov	r2, sp
 801e3e2:	6861      	ldr	r1, [r4, #4]
 801e3e4:	c203      	stmia	r2!, {r0, r1}
 801e3e6:	4619      	mov	r1, r3
 801e3e8:	4668      	mov	r0, sp
 801e3ea:	f7f8 fb5e 	bl	8016aaa <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e3ee:	f8d8 3000 	ldr.w	r3, [r8]
 801e3f2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e3f6:	442b      	add	r3, r5
 801e3f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3fc:	4413      	add	r3, r2
 801e3fe:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e402:	4293      	cmp	r3, r2
 801e404:	ddd7      	ble.n	801e3b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801e406:	4620      	mov	r0, r4
 801e408:	f7f6 fbc3 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e40c:	b990      	cbnz	r0, 801e434 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801e40e:	88a7      	ldrh	r7, [r4, #4]
 801e410:	88e3      	ldrh	r3, [r4, #6]
 801e412:	fb17 f703 	smulbb	r7, r7, r3
 801e416:	f8d8 3000 	ldr.w	r3, [r8]
 801e41a:	441d      	add	r5, r3
 801e41c:	4628      	mov	r0, r5
 801e41e:	f7f6 fbb8 	bl	8014b92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e422:	b948      	cbnz	r0, 801e438 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801e424:	88ab      	ldrh	r3, [r5, #4]
 801e426:	88ea      	ldrh	r2, [r5, #6]
 801e428:	fb13 f302 	smulbb	r3, r3, r2
 801e42c:	42bb      	cmp	r3, r7
 801e42e:	f6bf af7c 	bge.w	801e32a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e432:	e79e      	b.n	801e372 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801e434:	2700      	movs	r7, #0
 801e436:	e7ee      	b.n	801e416 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801e438:	2300      	movs	r3, #0
 801e43a:	e7f7      	b.n	801e42c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801e43c:	2001234c 	.word	0x2001234c
 801e440:	20012334 	.word	0x20012334

0801e444 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e444:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e446:	4c24      	ldr	r4, [pc, #144]	@ (801e4d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801e448:	6823      	ldr	r3, [r4, #0]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d042      	beq.n	801e4d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e44e:	4a23      	ldr	r2, [pc, #140]	@ (801e4dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801e450:	4d23      	ldr	r5, [pc, #140]	@ (801e4e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801e452:	8811      	ldrh	r1, [r2, #0]
 801e454:	f8b5 c000 	ldrh.w	ip, [r5]
 801e458:	4822      	ldr	r0, [pc, #136]	@ (801e4e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e45a:	4461      	add	r1, ip
 801e45c:	1c4a      	adds	r2, r1, #1
 801e45e:	008f      	lsls	r7, r1, #2
 801e460:	f022 0201 	bic.w	r2, r2, #1
 801e464:	19de      	adds	r6, r3, r7
 801e466:	0412      	lsls	r2, r2, #16
 801e468:	6006      	str	r6, [r0, #0]
 801e46a:	4e1f      	ldr	r6, [pc, #124]	@ (801e4e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e46c:	0c12      	lsrs	r2, r2, #16
 801e46e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e472:	19da      	adds	r2, r3, r7
 801e474:	6032      	str	r2, [r6, #0]
 801e476:	220e      	movs	r2, #14
 801e478:	fb02 f20c 	mul.w	r2, r2, ip
 801e47c:	3203      	adds	r2, #3
 801e47e:	f022 0203 	bic.w	r2, r2, #3
 801e482:	443a      	add	r2, r7
 801e484:	4f19      	ldr	r7, [pc, #100]	@ (801e4ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e486:	4413      	add	r3, r2
 801e488:	603b      	str	r3, [r7, #0]
 801e48a:	2300      	movs	r3, #0
 801e48c:	4f18      	ldr	r7, [pc, #96]	@ (801e4f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e48e:	469c      	mov	ip, r3
 801e490:	803b      	strh	r3, [r7, #0]
 801e492:	4f18      	ldr	r7, [pc, #96]	@ (801e4f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e494:	683f      	ldr	r7, [r7, #0]
 801e496:	1aba      	subs	r2, r7, r2
 801e498:	4f17      	ldr	r7, [pc, #92]	@ (801e4f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e49a:	603a      	str	r2, [r7, #0]
 801e49c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801e4a0:	4a16      	ldr	r2, [pc, #88]	@ (801e4fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e4a2:	8013      	strh	r3, [r2, #0]
 801e4a4:	428b      	cmp	r3, r1
 801e4a6:	d10d      	bne.n	801e4c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e4a8:	882d      	ldrh	r5, [r5, #0]
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	6830      	ldr	r0, [r6, #0]
 801e4ae:	240e      	movs	r4, #14
 801e4b0:	429d      	cmp	r5, r3
 801e4b2:	d90f      	bls.n	801e4d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e4b4:	fb04 0203 	mla	r2, r4, r3, r0
 801e4b8:	3301      	adds	r3, #1
 801e4ba:	7b11      	ldrb	r1, [r2, #12]
 801e4bc:	f36f 1145 	bfc	r1, #5, #1
 801e4c0:	7311      	strb	r1, [r2, #12]
 801e4c2:	e7f5      	b.n	801e4b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e4c4:	6822      	ldr	r2, [r4, #0]
 801e4c6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e4ca:	6802      	ldr	r2, [r0, #0]
 801e4cc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e4d0:	3301      	adds	r3, #1
 801e4d2:	e7e7      	b.n	801e4a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4d6:	bf00      	nop
 801e4d8:	20012330 	.word	0x20012330
 801e4dc:	2001234c 	.word	0x2001234c
 801e4e0:	20012350 	.word	0x20012350
 801e4e4:	20012344 	.word	0x20012344
 801e4e8:	20012334 	.word	0x20012334
 801e4ec:	2001233c 	.word	0x2001233c
 801e4f0:	2001234e 	.word	0x2001234e
 801e4f4:	20012338 	.word	0x20012338
 801e4f8:	20012348 	.word	0x20012348
 801e4fc:	20012340 	.word	0x20012340

0801e500 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e500:	4b06      	ldr	r3, [pc, #24]	@ (801e51c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	b943      	cbnz	r3, 801e518 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e506:	b139      	cbz	r1, 801e518 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e508:	4b05      	ldr	r3, [pc, #20]	@ (801e520 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e50a:	801a      	strh	r2, [r3, #0]
 801e50c:	4b05      	ldr	r3, [pc, #20]	@ (801e524 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e50e:	6019      	str	r1, [r3, #0]
 801e510:	4b05      	ldr	r3, [pc, #20]	@ (801e528 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e512:	6018      	str	r0, [r3, #0]
 801e514:	f7ff bf96 	b.w	801e444 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e518:	4770      	bx	lr
 801e51a:	bf00      	nop
 801e51c:	2001233c 	.word	0x2001233c
 801e520:	20012350 	.word	0x20012350
 801e524:	20012338 	.word	0x20012338
 801e528:	20012330 	.word	0x20012330

0801e52c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e52c:	b470      	push	{r4, r5, r6}
 801e52e:	4c07      	ldr	r4, [pc, #28]	@ (801e54c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e530:	4605      	mov	r5, r0
 801e532:	4610      	mov	r0, r2
 801e534:	9a03      	ldr	r2, [sp, #12]
 801e536:	6826      	ldr	r6, [r4, #0]
 801e538:	b936      	cbnz	r6, 801e548 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e53a:	6025      	str	r5, [r4, #0]
 801e53c:	4c04      	ldr	r4, [pc, #16]	@ (801e550 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e53e:	8021      	strh	r1, [r4, #0]
 801e540:	4619      	mov	r1, r3
 801e542:	bc70      	pop	{r4, r5, r6}
 801e544:	f7ff bfdc 	b.w	801e500 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e548:	bc70      	pop	{r4, r5, r6}
 801e54a:	4770      	bx	lr
 801e54c:	20012354 	.word	0x20012354
 801e550:	2001234c 	.word	0x2001234c

0801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e554:	4a12      	ldr	r2, [pc, #72]	@ (801e5a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e556:	8803      	ldrh	r3, [r0, #0]
 801e558:	8812      	ldrh	r2, [r2, #0]
 801e55a:	4293      	cmp	r3, r2
 801e55c:	d207      	bcs.n	801e56e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e55e:	4a11      	ldr	r2, [pc, #68]	@ (801e5a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e560:	2114      	movs	r1, #20
 801e562:	6812      	ldr	r2, [r2, #0]
 801e564:	fb01 2303 	mla	r3, r1, r3, r2
 801e568:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e56c:	4770      	bx	lr
 801e56e:	490e      	ldr	r1, [pc, #56]	@ (801e5a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e570:	8809      	ldrh	r1, [r1, #0]
 801e572:	4411      	add	r1, r2
 801e574:	428b      	cmp	r3, r1
 801e576:	da04      	bge.n	801e582 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e578:	1a9b      	subs	r3, r3, r2
 801e57a:	4a0c      	ldr	r2, [pc, #48]	@ (801e5ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e57c:	210e      	movs	r1, #14
 801e57e:	6812      	ldr	r2, [r2, #0]
 801e580:	e7f0      	b.n	801e564 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e582:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e586:	4293      	cmp	r3, r2
 801e588:	d108      	bne.n	801e59c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e58a:	4b09      	ldr	r3, [pc, #36]	@ (801e5b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e58c:	781b      	ldrb	r3, [r3, #0]
 801e58e:	b91b      	cbnz	r3, 801e598 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e590:	4b08      	ldr	r3, [pc, #32]	@ (801e5b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e592:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e596:	4770      	bx	lr
 801e598:	4b07      	ldr	r3, [pc, #28]	@ (801e5b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e59a:	e7fa      	b.n	801e592 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e59c:	2000      	movs	r0, #0
 801e59e:	4770      	bx	lr
 801e5a0:	2001234c 	.word	0x2001234c
 801e5a4:	20012354 	.word	0x20012354
 801e5a8:	20012350 	.word	0x20012350
 801e5ac:	20012334 	.word	0x20012334
 801e5b0:	200122bc 	.word	0x200122bc
 801e5b4:	200122be 	.word	0x200122be
 801e5b8:	200122c0 	.word	0x200122c0

0801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e5bc:	4a12      	ldr	r2, [pc, #72]	@ (801e608 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e5be:	8803      	ldrh	r3, [r0, #0]
 801e5c0:	8812      	ldrh	r2, [r2, #0]
 801e5c2:	4293      	cmp	r3, r2
 801e5c4:	d207      	bcs.n	801e5d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e5c6:	4a11      	ldr	r2, [pc, #68]	@ (801e60c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e5c8:	2114      	movs	r1, #20
 801e5ca:	6812      	ldr	r2, [r2, #0]
 801e5cc:	fb01 2303 	mla	r3, r1, r3, r2
 801e5d0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e5d4:	4770      	bx	lr
 801e5d6:	490e      	ldr	r1, [pc, #56]	@ (801e610 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e5d8:	8809      	ldrh	r1, [r1, #0]
 801e5da:	4411      	add	r1, r2
 801e5dc:	428b      	cmp	r3, r1
 801e5de:	da04      	bge.n	801e5ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e5e0:	1a9b      	subs	r3, r3, r2
 801e5e2:	4a0c      	ldr	r2, [pc, #48]	@ (801e614 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e5e4:	210e      	movs	r1, #14
 801e5e6:	6812      	ldr	r2, [r2, #0]
 801e5e8:	e7f0      	b.n	801e5cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e5ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e5ee:	4293      	cmp	r3, r2
 801e5f0:	d108      	bne.n	801e604 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e5f2:	4b09      	ldr	r3, [pc, #36]	@ (801e618 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e5f4:	781b      	ldrb	r3, [r3, #0]
 801e5f6:	b91b      	cbnz	r3, 801e600 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e5f8:	4b08      	ldr	r3, [pc, #32]	@ (801e61c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e5fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e5fe:	4770      	bx	lr
 801e600:	4b07      	ldr	r3, [pc, #28]	@ (801e620 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e602:	e7fa      	b.n	801e5fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e604:	2000      	movs	r0, #0
 801e606:	4770      	bx	lr
 801e608:	2001234c 	.word	0x2001234c
 801e60c:	20012354 	.word	0x20012354
 801e610:	20012350 	.word	0x20012350
 801e614:	20012334 	.word	0x20012334
 801e618:	200122bc 	.word	0x200122bc
 801e61c:	200122c0 	.word	0x200122c0
 801e620:	200122be 	.word	0x200122be

0801e624 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e624:	4a22      	ldr	r2, [pc, #136]	@ (801e6b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801e626:	b530      	push	{r4, r5, lr}
 801e628:	880b      	ldrh	r3, [r1, #0]
 801e62a:	8812      	ldrh	r2, [r2, #0]
 801e62c:	4293      	cmp	r3, r2
 801e62e:	d213      	bcs.n	801e658 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801e630:	4a20      	ldr	r2, [pc, #128]	@ (801e6b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e632:	2114      	movs	r1, #20
 801e634:	6812      	ldr	r2, [r2, #0]
 801e636:	fb01 2303 	mla	r3, r1, r3, r2
 801e63a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e63e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e642:	8a1a      	ldrh	r2, [r3, #16]
 801e644:	8a5b      	ldrh	r3, [r3, #18]
 801e646:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e64a:	8004      	strh	r4, [r0, #0]
 801e64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e650:	8041      	strh	r1, [r0, #2]
 801e652:	8082      	strh	r2, [r0, #4]
 801e654:	80c3      	strh	r3, [r0, #6]
 801e656:	e024      	b.n	801e6a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801e658:	4917      	ldr	r1, [pc, #92]	@ (801e6b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e65a:	8809      	ldrh	r1, [r1, #0]
 801e65c:	4411      	add	r1, r2
 801e65e:	428b      	cmp	r3, r1
 801e660:	da10      	bge.n	801e684 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801e662:	1a9b      	subs	r3, r3, r2
 801e664:	220e      	movs	r2, #14
 801e666:	4353      	muls	r3, r2
 801e668:	4a14      	ldr	r2, [pc, #80]	@ (801e6bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e66a:	6811      	ldr	r1, [r2, #0]
 801e66c:	18ca      	adds	r2, r1, r3
 801e66e:	5ecd      	ldrsh	r5, [r1, r3]
 801e670:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801e674:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801e678:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801e67c:	8005      	strh	r5, [r0, #0]
 801e67e:	8044      	strh	r4, [r0, #2]
 801e680:	8081      	strh	r1, [r0, #4]
 801e682:	e7e7      	b.n	801e654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e684:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e688:	4293      	cmp	r3, r2
 801e68a:	d10b      	bne.n	801e6a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801e68c:	4b0c      	ldr	r3, [pc, #48]	@ (801e6c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e68e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e692:	4b0c      	ldr	r3, [pc, #48]	@ (801e6c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e694:	8081      	strh	r1, [r0, #4]
 801e696:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e69a:	2300      	movs	r3, #0
 801e69c:	80c2      	strh	r2, [r0, #6]
 801e69e:	8003      	strh	r3, [r0, #0]
 801e6a0:	8043      	strh	r3, [r0, #2]
 801e6a2:	bd30      	pop	{r4, r5, pc}
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	8003      	strh	r3, [r0, #0]
 801e6a8:	8043      	strh	r3, [r0, #2]
 801e6aa:	8083      	strh	r3, [r0, #4]
 801e6ac:	e7d2      	b.n	801e654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e6ae:	bf00      	nop
 801e6b0:	2001234c 	.word	0x2001234c
 801e6b4:	20012354 	.word	0x20012354
 801e6b8:	20012350 	.word	0x20012350
 801e6bc:	20012334 	.word	0x20012334
 801e6c0:	200122b8 	.word	0x200122b8
 801e6c4:	200122ba 	.word	0x200122ba

0801e6c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e6c8:	4a17      	ldr	r2, [pc, #92]	@ (801e728 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e6ca:	8803      	ldrh	r3, [r0, #0]
 801e6cc:	8812      	ldrh	r2, [r2, #0]
 801e6ce:	4293      	cmp	r3, r2
 801e6d0:	d213      	bcs.n	801e6fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e6d2:	4a16      	ldr	r2, [pc, #88]	@ (801e72c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e6d4:	2114      	movs	r1, #20
 801e6d6:	6812      	ldr	r2, [r2, #0]
 801e6d8:	fb01 2303 	mla	r3, r1, r3, r2
 801e6dc:	8a1a      	ldrh	r2, [r3, #16]
 801e6de:	8919      	ldrh	r1, [r3, #8]
 801e6e0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e6e4:	428a      	cmp	r2, r1
 801e6e6:	db1d      	blt.n	801e724 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e6e8:	8a58      	ldrh	r0, [r3, #18]
 801e6ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e6ee:	895b      	ldrh	r3, [r3, #10]
 801e6f0:	4298      	cmp	r0, r3
 801e6f2:	bfac      	ite	ge
 801e6f4:	2000      	movge	r0, #0
 801e6f6:	2001      	movlt	r0, #1
 801e6f8:	4770      	bx	lr
 801e6fa:	490d      	ldr	r1, [pc, #52]	@ (801e730 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e6fc:	8809      	ldrh	r1, [r1, #0]
 801e6fe:	4411      	add	r1, r2
 801e700:	428b      	cmp	r3, r1
 801e702:	da0d      	bge.n	801e720 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e704:	1a9b      	subs	r3, r3, r2
 801e706:	4a0b      	ldr	r2, [pc, #44]	@ (801e734 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e708:	210e      	movs	r1, #14
 801e70a:	6812      	ldr	r2, [r2, #0]
 801e70c:	fb01 2303 	mla	r3, r1, r3, r2
 801e710:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e714:	891a      	ldrh	r2, [r3, #8]
 801e716:	4291      	cmp	r1, r2
 801e718:	db04      	blt.n	801e724 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e71a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e71e:	e7e6      	b.n	801e6ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e720:	2000      	movs	r0, #0
 801e722:	4770      	bx	lr
 801e724:	2001      	movs	r0, #1
 801e726:	4770      	bx	lr
 801e728:	2001234c 	.word	0x2001234c
 801e72c:	20012354 	.word	0x20012354
 801e730:	20012350 	.word	0x20012350
 801e734:	20012334 	.word	0x20012334

0801e738 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e738:	4a12      	ldr	r2, [pc, #72]	@ (801e784 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e73a:	8803      	ldrh	r3, [r0, #0]
 801e73c:	8811      	ldrh	r1, [r2, #0]
 801e73e:	428b      	cmp	r3, r1
 801e740:	d20b      	bcs.n	801e75a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e742:	4a11      	ldr	r2, [pc, #68]	@ (801e788 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e744:	6812      	ldr	r2, [r2, #0]
 801e746:	b112      	cbz	r2, 801e74e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e74c:	b9c0      	cbnz	r0, 801e780 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e74e:	4a0f      	ldr	r2, [pc, #60]	@ (801e78c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e750:	6811      	ldr	r1, [r2, #0]
 801e752:	2214      	movs	r2, #20
 801e754:	4353      	muls	r3, r2
 801e756:	58c8      	ldr	r0, [r1, r3]
 801e758:	4770      	bx	lr
 801e75a:	4a0d      	ldr	r2, [pc, #52]	@ (801e790 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e75c:	8812      	ldrh	r2, [r2, #0]
 801e75e:	440a      	add	r2, r1
 801e760:	4293      	cmp	r3, r2
 801e762:	da04      	bge.n	801e76e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e764:	4a08      	ldr	r2, [pc, #32]	@ (801e788 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e766:	6812      	ldr	r2, [r2, #0]
 801e768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e76c:	4770      	bx	lr
 801e76e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e772:	4293      	cmp	r3, r2
 801e774:	d103      	bne.n	801e77e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e776:	4b07      	ldr	r3, [pc, #28]	@ (801e794 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801e77c:	4770      	bx	lr
 801e77e:	2000      	movs	r0, #0
 801e780:	4770      	bx	lr
 801e782:	bf00      	nop
 801e784:	2001234c 	.word	0x2001234c
 801e788:	20012330 	.word	0x20012330
 801e78c:	20012354 	.word	0x20012354
 801e790:	20012350 	.word	0x20012350
 801e794:	200122c4 	.word	0x200122c4

0801e798 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e798:	4b24      	ldr	r3, [pc, #144]	@ (801e82c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e79a:	8802      	ldrh	r2, [r0, #0]
 801e79c:	8818      	ldrh	r0, [r3, #0]
 801e79e:	4282      	cmp	r2, r0
 801e7a0:	d221      	bcs.n	801e7e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e7a2:	4b23      	ldr	r3, [pc, #140]	@ (801e830 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e7a4:	6819      	ldr	r1, [r3, #0]
 801e7a6:	2314      	movs	r3, #20
 801e7a8:	fb03 1302 	mla	r3, r3, r2, r1
 801e7ac:	6858      	ldr	r0, [r3, #4]
 801e7ae:	2800      	cmp	r0, #0
 801e7b0:	d03a      	beq.n	801e828 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e7b2:	4920      	ldr	r1, [pc, #128]	@ (801e834 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e7b4:	6809      	ldr	r1, [r1, #0]
 801e7b6:	2900      	cmp	r1, #0
 801e7b8:	d036      	beq.n	801e828 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e7ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e7be:	2900      	cmp	r1, #0
 801e7c0:	d032      	beq.n	801e828 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e7c2:	891a      	ldrh	r2, [r3, #8]
 801e7c4:	8958      	ldrh	r0, [r3, #10]
 801e7c6:	4350      	muls	r0, r2
 801e7c8:	7c5a      	ldrb	r2, [r3, #17]
 801e7ca:	7cdb      	ldrb	r3, [r3, #19]
 801e7cc:	0952      	lsrs	r2, r2, #5
 801e7ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e7d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e7d6:	2b0b      	cmp	r3, #11
 801e7d8:	bf18      	it	ne
 801e7da:	0040      	lslne	r0, r0, #1
 801e7dc:	3003      	adds	r0, #3
 801e7de:	f020 0003 	bic.w	r0, r0, #3
 801e7e2:	4408      	add	r0, r1
 801e7e4:	4770      	bx	lr
 801e7e6:	4b14      	ldr	r3, [pc, #80]	@ (801e838 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e7e8:	881b      	ldrh	r3, [r3, #0]
 801e7ea:	4403      	add	r3, r0
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	da1a      	bge.n	801e826 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e7f0:	4b12      	ldr	r3, [pc, #72]	@ (801e83c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e7f2:	1a10      	subs	r0, r2, r0
 801e7f4:	210e      	movs	r1, #14
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	fb01 3000 	mla	r0, r1, r0, r3
 801e7fc:	7b03      	ldrb	r3, [r0, #12]
 801e7fe:	f003 031f 	and.w	r3, r3, #31
 801e802:	2b0b      	cmp	r3, #11
 801e804:	d10b      	bne.n	801e81e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e806:	8903      	ldrh	r3, [r0, #8]
 801e808:	8940      	ldrh	r0, [r0, #10]
 801e80a:	4358      	muls	r0, r3
 801e80c:	4b09      	ldr	r3, [pc, #36]	@ (801e834 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e80e:	3003      	adds	r0, #3
 801e810:	6819      	ldr	r1, [r3, #0]
 801e812:	f020 0303 	bic.w	r3, r0, #3
 801e816:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e81a:	4418      	add	r0, r3
 801e81c:	4770      	bx	lr
 801e81e:	2b0d      	cmp	r3, #13
 801e820:	d101      	bne.n	801e826 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e822:	300d      	adds	r0, #13
 801e824:	4770      	bx	lr
 801e826:	2000      	movs	r0, #0
 801e828:	4770      	bx	lr
 801e82a:	bf00      	nop
 801e82c:	2001234c 	.word	0x2001234c
 801e830:	20012354 	.word	0x20012354
 801e834:	20012330 	.word	0x20012330
 801e838:	20012350 	.word	0x20012350
 801e83c:	20012334 	.word	0x20012334

0801e840 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e840:	4b1f      	ldr	r3, [pc, #124]	@ (801e8c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801e842:	b510      	push	{r4, lr}
 801e844:	8802      	ldrh	r2, [r0, #0]
 801e846:	881b      	ldrh	r3, [r3, #0]
 801e848:	429a      	cmp	r2, r3
 801e84a:	d21a      	bcs.n	801e882 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801e84c:	4b1d      	ldr	r3, [pc, #116]	@ (801e8c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801e84e:	2114      	movs	r1, #20
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	fb01 3102 	mla	r1, r1, r2, r3
 801e856:	7c4b      	ldrb	r3, [r1, #17]
 801e858:	0958      	lsrs	r0, r3, #5
 801e85a:	7ccb      	ldrb	r3, [r1, #19]
 801e85c:	491a      	ldr	r1, [pc, #104]	@ (801e8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801e85e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e862:	6809      	ldr	r1, [r1, #0]
 801e864:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801e868:	b2d8      	uxtb	r0, r3
 801e86a:	b149      	cbz	r1, 801e880 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e86c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e870:	b132      	cbz	r2, 801e880 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e872:	2b0e      	cmp	r3, #14
 801e874:	d021      	beq.n	801e8ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e876:	280f      	cmp	r0, #15
 801e878:	d01d      	beq.n	801e8b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801e87a:	2810      	cmp	r0, #16
 801e87c:	bf08      	it	eq
 801e87e:	2002      	moveq	r0, #2
 801e880:	bd10      	pop	{r4, pc}
 801e882:	4912      	ldr	r1, [pc, #72]	@ (801e8cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801e884:	8809      	ldrh	r1, [r1, #0]
 801e886:	4419      	add	r1, r3
 801e888:	428a      	cmp	r2, r1
 801e88a:	da09      	bge.n	801e8a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801e88c:	1ad3      	subs	r3, r2, r3
 801e88e:	4a10      	ldr	r2, [pc, #64]	@ (801e8d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801e890:	210e      	movs	r1, #14
 801e892:	6812      	ldr	r2, [r2, #0]
 801e894:	fb01 2303 	mla	r3, r1, r3, r2
 801e898:	7b18      	ldrb	r0, [r3, #12]
 801e89a:	f000 001f 	and.w	r0, r0, #31
 801e89e:	e7ef      	b.n	801e880 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e8a0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801e8a4:	429a      	cmp	r2, r3
 801e8a6:	d108      	bne.n	801e8ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e8a8:	f7ec f952 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 801e8ac:	6803      	ldr	r3, [r0, #0]
 801e8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8b4:	4718      	bx	r3
 801e8b6:	2001      	movs	r0, #1
 801e8b8:	e7e2      	b.n	801e880 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e8ba:	2000      	movs	r0, #0
 801e8bc:	e7e0      	b.n	801e880 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e8be:	bf00      	nop
 801e8c0:	2001234c 	.word	0x2001234c
 801e8c4:	20012354 	.word	0x20012354
 801e8c8:	20012330 	.word	0x20012330
 801e8cc:	20012350 	.word	0x20012350
 801e8d0:	20012334 	.word	0x20012334

0801e8d4 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801e8d4:	2020      	movs	r0, #32
 801e8d6:	4770      	bx	lr

0801e8d8 <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801e8d8:	2002      	movs	r0, #2
 801e8da:	4770      	bx	lr

0801e8dc <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801e8dc:	4b02      	ldr	r3, [pc, #8]	@ (801e8e8 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801e8de:	8818      	ldrh	r0, [r3, #0]
 801e8e0:	0080      	lsls	r0, r0, #2
 801e8e2:	b280      	uxth	r0, r0
 801e8e4:	4770      	bx	lr
 801e8e6:	bf00      	nop
 801e8e8:	200122be 	.word	0x200122be

0801e8ec <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8f0:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 801e8f4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e8f6:	f1bc 0f00 	cmp.w	ip, #0
 801e8fa:	d073      	beq.n	801e9e4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e8fc:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801e900:	2c00      	cmp	r4, #0
 801e902:	dd6f      	ble.n	801e9e4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e904:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801e908:	2e00      	cmp	r6, #0
 801e90a:	dd6b      	ble.n	801e9e4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e90c:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801e910:	4356      	muls	r6, r2
 801e912:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e916:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e91a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e91e:	fb02 3305 	mla	r3, r2, r5, r3
 801e922:	eba2 0204 	sub.w	r2, r2, r4
 801e926:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e92a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801e92e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801e932:	d10a      	bne.n	801e94a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801e934:	42b1      	cmp	r1, r6
 801e936:	d255      	bcs.n	801e9e4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e938:	eb01 030a 	add.w	r3, r1, sl
 801e93c:	4299      	cmp	r1, r3
 801e93e:	d202      	bcs.n	801e946 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801e940:	f841 0b04 	str.w	r0, [r1], #4
 801e944:	e7fa      	b.n	801e93c <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801e946:	4411      	add	r1, r2
 801e948:	e7f4      	b.n	801e934 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801e94a:	fa1f fe8c 	uxth.w	lr, ip
 801e94e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801e952:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801e956:	fa5f f980 	uxtb.w	r9, r0
 801e95a:	fb03 f30e 	mul.w	r3, r3, lr
 801e95e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 801e962:	fb08 f80e 	mul.w	r8, r8, lr
 801e966:	9301      	str	r3, [sp, #4]
 801e968:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801e96c:	fb09 f90e 	mul.w	r9, r9, lr
 801e970:	9300      	str	r3, [sp, #0]
 801e972:	42b1      	cmp	r1, r6
 801e974:	d236      	bcs.n	801e9e4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e976:	eb01 0b0a 	add.w	fp, r1, sl
 801e97a:	4559      	cmp	r1, fp
 801e97c:	d230      	bcs.n	801e9e0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801e97e:	680b      	ldr	r3, [r1, #0]
 801e980:	0e1c      	lsrs	r4, r3, #24
 801e982:	d102      	bne.n	801e98a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801e984:	9b00      	ldr	r3, [sp, #0]
 801e986:	600b      	str	r3, [r1, #0]
 801e988:	e7f7      	b.n	801e97a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801e98a:	fb04 f00e 	mul.w	r0, r4, lr
 801e98e:	eb0c 0504 	add.w	r5, ip, r4
 801e992:	3104      	adds	r1, #4
 801e994:	1c47      	adds	r7, r0, #1
 801e996:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801e99a:	1238      	asrs	r0, r7, #8
 801e99c:	1a27      	subs	r7, r4, r0
 801e99e:	1a2d      	subs	r5, r5, r0
 801e9a0:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801e9a4:	9801      	ldr	r0, [sp, #4]
 801e9a6:	b2ed      	uxtb	r5, r5
 801e9a8:	fb07 0404 	mla	r4, r7, r4, r0
 801e9ac:	b2d8      	uxtb	r0, r3
 801e9ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e9b2:	fb07 9000 	mla	r0, r7, r0, r9
 801e9b6:	fbb4 f4f5 	udiv	r4, r4, r5
 801e9ba:	fbb0 f0f5 	udiv	r0, r0, r5
 801e9be:	0424      	lsls	r4, r4, #16
 801e9c0:	b2c0      	uxtb	r0, r0
 801e9c2:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 801e9c6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801e9ca:	4320      	orrs	r0, r4
 801e9cc:	fb07 8403 	mla	r4, r7, r3, r8
 801e9d0:	fbb4 f4f5 	udiv	r4, r4, r5
 801e9d4:	0224      	lsls	r4, r4, #8
 801e9d6:	b2a4      	uxth	r4, r4
 801e9d8:	4320      	orrs	r0, r4
 801e9da:	f841 0c04 	str.w	r0, [r1, #-4]
 801e9de:	e7cc      	b.n	801e97a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801e9e0:	4411      	add	r1, r2
 801e9e2:	e7c6      	b.n	801e972 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801e9e4:	b003      	add	sp, #12
 801e9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e9ec <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e9ec:	2bff      	cmp	r3, #255	@ 0xff
 801e9ee:	d073      	beq.n	801ead8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e9f0:	2a33      	cmp	r2, #51	@ 0x33
 801e9f2:	f200 811a 	bhi.w	801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801e9f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 801e9fa:	0065      	.short	0x0065
 801e9fc:	00630061 	.word	0x00630061
 801ea00:	0069005f 	.word	0x0069005f
 801ea04:	01180067 	.word	0x01180067
 801ea08:	01100118 	.word	0x01100118
 801ea0c:	01100112 	.word	0x01100112
 801ea10:	01180112 	.word	0x01180112
 801ea14:	01180118 	.word	0x01180118
 801ea18:	01180118 	.word	0x01180118
 801ea1c:	01180118 	.word	0x01180118
 801ea20:	01180118 	.word	0x01180118
 801ea24:	01180118 	.word	0x01180118
 801ea28:	01180118 	.word	0x01180118
 801ea2c:	01180118 	.word	0x01180118
 801ea30:	01180118 	.word	0x01180118
 801ea34:	01180118 	.word	0x01180118
 801ea38:	01180118 	.word	0x01180118
 801ea3c:	01180118 	.word	0x01180118
 801ea40:	01180118 	.word	0x01180118
 801ea44:	01180118 	.word	0x01180118
 801ea48:	01180118 	.word	0x01180118
 801ea4c:	01180118 	.word	0x01180118
 801ea50:	00460118 	.word	0x00460118
 801ea54:	00550034 	.word	0x00550034
 801ea58:	006d00fb 	.word	0x006d00fb
 801ea5c:	006d006b 	.word	0x006d006b
 801ea60:	006b      	.short	0x006b
 801ea62:	684b      	ldr	r3, [r1, #4]
 801ea64:	781a      	ldrb	r2, [r3, #0]
 801ea66:	785b      	ldrb	r3, [r3, #1]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	f040 80de 	bne.w	801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ea6e:	2a01      	cmp	r2, #1
 801ea70:	d005      	beq.n	801ea7e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ea72:	f0c0 80c4 	bcc.w	801ebfe <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x212>
 801ea76:	2a02      	cmp	r2, #2
 801ea78:	d003      	beq.n	801ea82 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ea7a:	4618      	mov	r0, r3
 801ea7c:	4770      	bx	lr
 801ea7e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ea80:	e7fb      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ea82:	6943      	ldr	r3, [r0, #20]
 801ea84:	e7f9      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ea86:	684b      	ldr	r3, [r1, #4]
 801ea88:	781a      	ldrb	r2, [r3, #0]
 801ea8a:	785b      	ldrb	r3, [r3, #1]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	f040 80cc 	bne.w	801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ea92:	2a01      	cmp	r2, #1
 801ea94:	d004      	beq.n	801eaa0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801ea96:	d30d      	bcc.n	801eab4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ea98:	2a02      	cmp	r2, #2
 801ea9a:	d1ee      	bne.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ea9c:	68c3      	ldr	r3, [r0, #12]
 801ea9e:	e7ec      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eaa0:	69c3      	ldr	r3, [r0, #28]
 801eaa2:	e7ea      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eaa4:	684b      	ldr	r3, [r1, #4]
 801eaa6:	781a      	ldrb	r2, [r3, #0]
 801eaa8:	785b      	ldrb	r3, [r3, #1]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	f040 80bd 	bne.w	801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801eab0:	2a00      	cmp	r2, #0
 801eab2:	d1e2      	bne.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eab4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801eab6:	e7e0      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eab8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801eaba:	e7de      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eabc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801eabe:	e7dc      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eac0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801eac2:	e7da      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eac4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801eac6:	e7d8      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eac8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801eaca:	e7d6      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eacc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801eace:	e7d4      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ead0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801ead2:	e7d2      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ead4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ead6:	e7d0      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ead8:	2a33      	cmp	r2, #51	@ 0x33
 801eada:	f200 80a6 	bhi.w	801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801eade:	a301      	add	r3, pc, #4	@ (adr r3, 801eae4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>)
 801eae0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801eae4:	0801ec0f 	.word	0x0801ec0f
 801eae8:	0801ec07 	.word	0x0801ec07
 801eaec:	0801ec0b 	.word	0x0801ec0b
 801eaf0:	0801ec03 	.word	0x0801ec03
 801eaf4:	0801ec17 	.word	0x0801ec17
 801eaf8:	0801ec13 	.word	0x0801ec13
 801eafc:	0801ec2b 	.word	0x0801ec2b
 801eb00:	0801ec2b 	.word	0x0801ec2b
 801eb04:	0801ec1b 	.word	0x0801ec1b
 801eb08:	0801ec1f 	.word	0x0801ec1f
 801eb0c:	0801ec1b 	.word	0x0801ec1b
 801eb10:	0801ec1f 	.word	0x0801ec1f
 801eb14:	0801ec2b 	.word	0x0801ec2b
 801eb18:	0801ec2b 	.word	0x0801ec2b
 801eb1c:	0801ec2b 	.word	0x0801ec2b
 801eb20:	0801ec2b 	.word	0x0801ec2b
 801eb24:	0801ec2b 	.word	0x0801ec2b
 801eb28:	0801ec2b 	.word	0x0801ec2b
 801eb2c:	0801ec2b 	.word	0x0801ec2b
 801eb30:	0801ec2b 	.word	0x0801ec2b
 801eb34:	0801ec2b 	.word	0x0801ec2b
 801eb38:	0801ec2b 	.word	0x0801ec2b
 801eb3c:	0801ec2b 	.word	0x0801ec2b
 801eb40:	0801ec2b 	.word	0x0801ec2b
 801eb44:	0801ec2b 	.word	0x0801ec2b
 801eb48:	0801ec2b 	.word	0x0801ec2b
 801eb4c:	0801ec2b 	.word	0x0801ec2b
 801eb50:	0801ec2b 	.word	0x0801ec2b
 801eb54:	0801ec2b 	.word	0x0801ec2b
 801eb58:	0801ec2b 	.word	0x0801ec2b
 801eb5c:	0801ec2b 	.word	0x0801ec2b
 801eb60:	0801ec2b 	.word	0x0801ec2b
 801eb64:	0801ec2b 	.word	0x0801ec2b
 801eb68:	0801ec2b 	.word	0x0801ec2b
 801eb6c:	0801ec2b 	.word	0x0801ec2b
 801eb70:	0801ec2b 	.word	0x0801ec2b
 801eb74:	0801ec2b 	.word	0x0801ec2b
 801eb78:	0801ec2b 	.word	0x0801ec2b
 801eb7c:	0801ec2b 	.word	0x0801ec2b
 801eb80:	0801ec2b 	.word	0x0801ec2b
 801eb84:	0801ec2b 	.word	0x0801ec2b
 801eb88:	0801ec2b 	.word	0x0801ec2b
 801eb8c:	0801ec2b 	.word	0x0801ec2b
 801eb90:	0801ec2b 	.word	0x0801ec2b
 801eb94:	0801ebd3 	.word	0x0801ebd3
 801eb98:	0801ebb5 	.word	0x0801ebb5
 801eb9c:	0801eaa5 	.word	0x0801eaa5
 801eba0:	0801ebf1 	.word	0x0801ebf1
 801eba4:	0801ec27 	.word	0x0801ec27
 801eba8:	0801ec23 	.word	0x0801ec23
 801ebac:	0801ec27 	.word	0x0801ec27
 801ebb0:	0801ec23 	.word	0x0801ec23
 801ebb4:	684b      	ldr	r3, [r1, #4]
 801ebb6:	781a      	ldrb	r2, [r3, #0]
 801ebb8:	785b      	ldrb	r3, [r3, #1]
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d135      	bne.n	801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ebbe:	2a01      	cmp	r2, #1
 801ebc0:	d005      	beq.n	801ebce <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e2>
 801ebc2:	d31c      	bcc.n	801ebfe <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x212>
 801ebc4:	2a02      	cmp	r2, #2
 801ebc6:	f47f af58 	bne.w	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebca:	6983      	ldr	r3, [r0, #24]
 801ebcc:	e755      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ebd0:	e753      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebd2:	684b      	ldr	r3, [r1, #4]
 801ebd4:	781a      	ldrb	r2, [r3, #0]
 801ebd6:	785b      	ldrb	r3, [r3, #1]
 801ebd8:	bb3b      	cbnz	r3, 801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ebda:	2a01      	cmp	r2, #1
 801ebdc:	d006      	beq.n	801ebec <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x200>
 801ebde:	f4ff af69 	bcc.w	801eab4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ebe2:	2a02      	cmp	r2, #2
 801ebe4:	f47f af49 	bne.w	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebe8:	6903      	ldr	r3, [r0, #16]
 801ebea:	e746      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebec:	6a03      	ldr	r3, [r0, #32]
 801ebee:	e744      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebf0:	684b      	ldr	r3, [r1, #4]
 801ebf2:	781a      	ldrb	r2, [r3, #0]
 801ebf4:	785b      	ldrb	r3, [r3, #1]
 801ebf6:	b9c3      	cbnz	r3, 801ec2a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ebf8:	2a00      	cmp	r2, #0
 801ebfa:	f47f af3e 	bne.w	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ec00:	e73b      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec02:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801ec04:	e739      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec06:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801ec08:	e737      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801ec0c:	e735      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec0e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801ec10:	e733      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec12:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801ec14:	e731      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec16:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801ec18:	e72f      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec1a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801ec1c:	e72d      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec1e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ec20:	e72b      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec22:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801ec24:	e729      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec26:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801ec28:	e727      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec2a:	2300      	movs	r3, #0
 801ec2c:	e725      	b.n	801ea7a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ec2e:	bf00      	nop

0801ec30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec34:	b087      	sub	sp, #28
 801ec36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec3a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801ec3c:	9100      	str	r1, [sp, #0]
 801ec3e:	6868      	ldr	r0, [r5, #4]
 801ec40:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801ec44:	9204      	str	r2, [sp, #16]
 801ec46:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ec4a:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	@ 0x58
 801ec4e:	fb00 1404 	mla	r4, r0, r4, r1
 801ec52:	6829      	ldr	r1, [r5, #0]
 801ec54:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ec58:	f8db 1000 	ldr.w	r1, [fp]
 801ec5c:	9101      	str	r1, [sp, #4]
 801ec5e:	f8db 1004 	ldr.w	r1, [fp, #4]
 801ec62:	3104      	adds	r1, #4
 801ec64:	9102      	str	r1, [sp, #8]
 801ec66:	9900      	ldr	r1, [sp, #0]
 801ec68:	2900      	cmp	r1, #0
 801ec6a:	dc03      	bgt.n	801ec74 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ec6c:	9904      	ldr	r1, [sp, #16]
 801ec6e:	2900      	cmp	r1, #0
 801ec70:	f340 815a 	ble.w	801ef28 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ec74:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ec76:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801ec7a:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801ec7e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ec80:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801ec84:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	dd0e      	ble.n	801ecaa <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ec8c:	1405      	asrs	r5, r0, #16
 801ec8e:	d405      	bmi.n	801ec9c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ec90:	4565      	cmp	r5, ip
 801ec92:	da03      	bge.n	801ec9c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ec94:	140d      	asrs	r5, r1, #16
 801ec96:	d401      	bmi.n	801ec9c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ec98:	42bd      	cmp	r5, r7
 801ec9a:	db07      	blt.n	801ecac <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ec9c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ec9e:	3b01      	subs	r3, #1
 801eca0:	3404      	adds	r4, #4
 801eca2:	4428      	add	r0, r5
 801eca4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eca6:	4429      	add	r1, r5
 801eca8:	e7ee      	b.n	801ec88 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ecaa:	d04d      	beq.n	801ed48 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ecac:	1e5d      	subs	r5, r3, #1
 801ecae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ecb0:	fb06 0605 	mla	r6, r6, r5, r0
 801ecb4:	1436      	asrs	r6, r6, #16
 801ecb6:	d43d      	bmi.n	801ed34 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ecb8:	4566      	cmp	r6, ip
 801ecba:	da3b      	bge.n	801ed34 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ecbc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ecbe:	fb06 1505 	mla	r5, r6, r5, r1
 801ecc2:	142d      	asrs	r5, r5, #16
 801ecc4:	d436      	bmi.n	801ed34 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ecc6:	42bd      	cmp	r5, r7
 801ecc8:	da34      	bge.n	801ed34 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ecca:	1d25      	adds	r5, r4, #4
 801eccc:	4699      	mov	r9, r3
 801ecce:	f1b9 0f00 	cmp.w	r9, #0
 801ecd2:	dd35      	ble.n	801ed40 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801ecd4:	140e      	asrs	r6, r1, #16
 801ecd6:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801ecda:	1407      	asrs	r7, r0, #16
 801ecdc:	2aff      	cmp	r2, #255	@ 0xff
 801ecde:	46b6      	mov	lr, r6
 801ece0:	9e01      	ldr	r6, [sp, #4]
 801ece2:	fb0c 660e 	mla	r6, ip, lr, r6
 801ece6:	5df6      	ldrb	r6, [r6, r7]
 801ece8:	9f02      	ldr	r7, [sp, #8]
 801ecea:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801ecee:	ea4f 2726 	mov.w	r7, r6, asr #8
 801ecf2:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801ecf6:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801ecfa:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ecfe:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801ed02:	b2f6      	uxtb	r6, r6
 801ed04:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ed08:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801ed0c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ed10:	f040 80d4 	bne.w	801eebc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ed14:	f805 6c04 	strb.w	r6, [r5, #-4]
 801ed18:	f805 cc03 	strb.w	ip, [r5, #-3]
 801ed1c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ed20:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ed24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ed26:	3504      	adds	r5, #4
 801ed28:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed2c:	4430      	add	r0, r6
 801ed2e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ed30:	4431      	add	r1, r6
 801ed32:	e7cc      	b.n	801ecce <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ed34:	f04f 0c00 	mov.w	ip, #0
 801ed38:	eb03 050c 	add.w	r5, r3, ip
 801ed3c:	2d00      	cmp	r5, #0
 801ed3e:	dc3f      	bgt.n	801edc0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ed40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed44:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ed48:	9b00      	ldr	r3, [sp, #0]
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	f340 80ec 	ble.w	801ef28 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ed50:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ed56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed5a:	eeb0 6a62 	vmov.f32	s12, s5
 801ed5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed6a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ed6e:	eeb0 6a43 	vmov.f32	s12, s6
 801ed72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed76:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ed7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed92:	ee12 1a90 	vmov	r1, s5
 801ed96:	eef0 2a47 	vmov.f32	s5, s14
 801ed9a:	fb91 f3f3 	sdiv	r3, r1, r3
 801ed9e:	ee13 1a10 	vmov	r1, s6
 801eda2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eda4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eda6:	eeb0 3a67 	vmov.f32	s6, s15
 801edaa:	fb91 f3f3 	sdiv	r3, r1, r3
 801edae:	9314      	str	r3, [sp, #80]	@ 0x50
 801edb0:	9b00      	ldr	r3, [sp, #0]
 801edb2:	9904      	ldr	r1, [sp, #16]
 801edb4:	3b01      	subs	r3, #1
 801edb6:	9300      	str	r3, [sp, #0]
 801edb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edba:	bf08      	it	eq
 801edbc:	460b      	moveq	r3, r1
 801edbe:	e752      	b.n	801ec66 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801edc0:	1407      	asrs	r7, r0, #16
 801edc2:	d435      	bmi.n	801ee30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801edc4:	f8db 6008 	ldr.w	r6, [fp, #8]
 801edc8:	42be      	cmp	r6, r7
 801edca:	dd31      	ble.n	801ee30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801edcc:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801edd0:	d42e      	bmi.n	801ee30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801edd2:	f8db 500c 	ldr.w	r5, [fp, #12]
 801edd6:	4575      	cmp	r5, lr
 801edd8:	dd2a      	ble.n	801ee30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801edda:	9d01      	ldr	r5, [sp, #4]
 801eddc:	b236      	sxth	r6, r6
 801edde:	2aff      	cmp	r2, #255	@ 0xff
 801ede0:	fb0e 5606 	mla	r6, lr, r6, r5
 801ede4:	5df5      	ldrb	r5, [r6, r7]
 801ede6:	9e02      	ldr	r6, [sp, #8]
 801ede8:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801edec:	ea4f 2625 	mov.w	r6, r5, asr #8
 801edf0:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801edf4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801edf8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801edfc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ee00:	b2ed      	uxtb	r5, r5
 801ee02:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ee06:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ee0a:	9603      	str	r6, [sp, #12]
 801ee0c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801ee10:	462e      	mov	r6, r5
 801ee12:	d114      	bne.n	801ee3e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ee14:	f06f 0503 	mvn.w	r5, #3
 801ee18:	fb05 fe0c 	mul.w	lr, r5, ip
 801ee1c:	9d03      	ldr	r5, [sp, #12]
 801ee1e:	f804 600e 	strb.w	r6, [r4, lr]
 801ee22:	44a6      	add	lr, r4
 801ee24:	f88e 7001 	strb.w	r7, [lr, #1]
 801ee28:	f88e 5002 	strb.w	r5, [lr, #2]
 801ee2c:	f88e 2003 	strb.w	r2, [lr, #3]
 801ee30:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ee32:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ee36:	4428      	add	r0, r5
 801ee38:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ee3a:	4429      	add	r1, r5
 801ee3c:	e77c      	b.n	801ed38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ee3e:	2a00      	cmp	r2, #0
 801ee40:	d0f6      	beq.n	801ee30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ee42:	fb12 f707 	smulbb	r7, r2, r7
 801ee46:	f06f 0503 	mvn.w	r5, #3
 801ee4a:	fb05 fa0c 	mul.w	sl, r5, ip
 801ee4e:	eb04 090a 	add.w	r9, r4, sl
 801ee52:	f899 5003 	ldrb.w	r5, [r9, #3]
 801ee56:	fb02 fe05 	mul.w	lr, r2, r5
 801ee5a:	f10e 0801 	add.w	r8, lr, #1
 801ee5e:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801ee62:	eb02 0e05 	add.w	lr, r2, r5
 801ee66:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ee6a:	ebae 0e08 	sub.w	lr, lr, r8
 801ee6e:	eba5 0808 	sub.w	r8, r5, r8
 801ee72:	f814 500a 	ldrb.w	r5, [r4, sl]
 801ee76:	fa5f fe8e 	uxtb.w	lr, lr
 801ee7a:	9505      	str	r5, [sp, #20]
 801ee7c:	fb16 f502 	smulbb	r5, r6, r2
 801ee80:	462e      	mov	r6, r5
 801ee82:	9d05      	ldr	r5, [sp, #20]
 801ee84:	fb08 6505 	mla	r5, r8, r5, r6
 801ee88:	9e03      	ldr	r6, [sp, #12]
 801ee8a:	fb95 f5fe 	sdiv	r5, r5, lr
 801ee8e:	f804 500a 	strb.w	r5, [r4, sl]
 801ee92:	fb12 f606 	smulbb	r6, r2, r6
 801ee96:	f899 5001 	ldrb.w	r5, [r9, #1]
 801ee9a:	f889 e003 	strb.w	lr, [r9, #3]
 801ee9e:	fb08 7705 	mla	r7, r8, r5, r7
 801eea2:	f899 5002 	ldrb.w	r5, [r9, #2]
 801eea6:	fb08 6605 	mla	r6, r8, r5, r6
 801eeaa:	fb97 f7fe 	sdiv	r7, r7, lr
 801eeae:	fb96 f6fe 	sdiv	r6, r6, lr
 801eeb2:	f889 7001 	strb.w	r7, [r9, #1]
 801eeb6:	f889 6002 	strb.w	r6, [r9, #2]
 801eeba:	e7b9      	b.n	801ee30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eebc:	2a00      	cmp	r2, #0
 801eebe:	f43f af31 	beq.w	801ed24 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801eec2:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801eec6:	fb16 f602 	smulbb	r6, r6, r2
 801eeca:	fb12 fc0c 	smulbb	ip, r2, ip
 801eece:	fb12 f707 	smulbb	r7, r2, r7
 801eed2:	fb02 fe0a 	mul.w	lr, r2, sl
 801eed6:	f10e 0801 	add.w	r8, lr, #1
 801eeda:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801eede:	eb02 0e0a 	add.w	lr, r2, sl
 801eee2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eee6:	ebae 0e08 	sub.w	lr, lr, r8
 801eeea:	ebaa 0808 	sub.w	r8, sl, r8
 801eeee:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801eef2:	fa5f fe8e 	uxtb.w	lr, lr
 801eef6:	fb08 660a 	mla	r6, r8, sl, r6
 801eefa:	f805 ec01 	strb.w	lr, [r5, #-1]
 801eefe:	fb96 f6fe 	sdiv	r6, r6, lr
 801ef02:	f805 6c04 	strb.w	r6, [r5, #-4]
 801ef06:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801ef0a:	fb08 cc06 	mla	ip, r8, r6, ip
 801ef0e:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801ef12:	fb08 7706 	mla	r7, r8, r6, r7
 801ef16:	fb9c fcfe 	sdiv	ip, ip, lr
 801ef1a:	fb97 f7fe 	sdiv	r7, r7, lr
 801ef1e:	f805 cc03 	strb.w	ip, [r5, #-3]
 801ef22:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ef26:	e6fd      	b.n	801ed24 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ef28:	b007      	add	sp, #28
 801ef2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef2e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef32:	b085      	sub	sp, #20
 801ef34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef38:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ef3a:	9203      	str	r2, [sp, #12]
 801ef3c:	6860      	ldr	r0, [r4, #4]
 801ef3e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801ef40:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ef44:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	@ 0x44
 801ef48:	fb00 2505 	mla	r5, r0, r5, r2
 801ef4c:	6822      	ldr	r2, [r4, #0]
 801ef4e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801ef52:	683a      	ldr	r2, [r7, #0]
 801ef54:	9201      	str	r2, [sp, #4]
 801ef56:	687a      	ldr	r2, [r7, #4]
 801ef58:	3204      	adds	r2, #4
 801ef5a:	9202      	str	r2, [sp, #8]
 801ef5c:	2900      	cmp	r1, #0
 801ef5e:	dc03      	bgt.n	801ef68 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ef60:	9a03      	ldr	r2, [sp, #12]
 801ef62:	2a00      	cmp	r2, #0
 801ef64:	f340 80c4 	ble.w	801f0f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801ef68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ef6a:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801ef6e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ef72:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ef74:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801ef78:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	dd0c      	ble.n	801ef9a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef80:	1404      	asrs	r4, r0, #16
 801ef82:	d405      	bmi.n	801ef90 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef84:	454c      	cmp	r4, r9
 801ef86:	da03      	bge.n	801ef90 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef88:	1414      	asrs	r4, r2, #16
 801ef8a:	d401      	bmi.n	801ef90 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef8c:	4564      	cmp	r4, ip
 801ef8e:	db05      	blt.n	801ef9c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef90:	4440      	add	r0, r8
 801ef92:	4472      	add	r2, lr
 801ef94:	3b01      	subs	r3, #1
 801ef96:	3504      	adds	r5, #4
 801ef98:	e7f0      	b.n	801ef7c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ef9a:	d00e      	beq.n	801efba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ef9c:	1e5c      	subs	r4, r3, #1
 801ef9e:	fb08 0604 	mla	r6, r8, r4, r0
 801efa2:	1436      	asrs	r6, r6, #16
 801efa4:	d53e      	bpl.n	801f024 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801efa6:	4699      	mov	r9, r3
 801efa8:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801efac:	f1b9 0f00 	cmp.w	r9, #0
 801efb0:	dc6b      	bgt.n	801f08a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801efb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efb6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801efba:	2900      	cmp	r1, #0
 801efbc:	f340 8098 	ble.w	801f0f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801efc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efca:	3901      	subs	r1, #1
 801efcc:	eeb0 6a62 	vmov.f32	s12, s5
 801efd0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801efd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efdc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801efe0:	eeb0 6a43 	vmov.f32	s12, s6
 801efe4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efe8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801efec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eff0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eff4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eff8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801effc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f000:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f004:	ee12 2a90 	vmov	r2, s5
 801f008:	eef0 2a47 	vmov.f32	s5, s14
 801f00c:	fb92 f8f3 	sdiv	r8, r2, r3
 801f010:	ee13 2a10 	vmov	r2, s6
 801f014:	eeb0 3a67 	vmov.f32	s6, s15
 801f018:	fb92 fef3 	sdiv	lr, r2, r3
 801f01c:	9a03      	ldr	r2, [sp, #12]
 801f01e:	bf08      	it	eq
 801f020:	4613      	moveq	r3, r2
 801f022:	e79b      	b.n	801ef5c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f024:	454e      	cmp	r6, r9
 801f026:	dabe      	bge.n	801efa6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f028:	fb0e 2404 	mla	r4, lr, r4, r2
 801f02c:	1424      	asrs	r4, r4, #16
 801f02e:	d4ba      	bmi.n	801efa6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f030:	4564      	cmp	r4, ip
 801f032:	dab8      	bge.n	801efa6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f034:	4699      	mov	r9, r3
 801f036:	46aa      	mov	sl, r5
 801f038:	f1b9 0f00 	cmp.w	r9, #0
 801f03c:	ddb9      	ble.n	801efb2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f03e:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f042:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801f046:	9c01      	ldr	r4, [sp, #4]
 801f048:	1406      	asrs	r6, r0, #16
 801f04a:	4472      	add	r2, lr
 801f04c:	4440      	add	r0, r8
 801f04e:	fb0c 440b 	mla	r4, ip, fp, r4
 801f052:	f109 39ff 	add.w	r9, r9, #4294967295
 801f056:	5da4      	ldrb	r4, [r4, r6]
 801f058:	9e02      	ldr	r6, [sp, #8]
 801f05a:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801f05e:	10f4      	asrs	r4, r6, #3
 801f060:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801f064:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801f068:	00f6      	lsls	r6, r6, #3
 801f06a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f06e:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f072:	b2f6      	uxtb	r6, r6
 801f074:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f078:	0224      	lsls	r4, r4, #8
 801f07a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f07e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f082:	4334      	orrs	r4, r6
 801f084:	f84a 4b04 	str.w	r4, [sl], #4
 801f088:	e7d6      	b.n	801f038 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f08a:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801f08e:	d42a      	bmi.n	801f0e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f090:	68be      	ldr	r6, [r7, #8]
 801f092:	4566      	cmp	r6, ip
 801f094:	dd27      	ble.n	801f0e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f096:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f09a:	d424      	bmi.n	801f0e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f09c:	68fc      	ldr	r4, [r7, #12]
 801f09e:	455c      	cmp	r4, fp
 801f0a0:	dd21      	ble.n	801f0e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f0a2:	9c01      	ldr	r4, [sp, #4]
 801f0a4:	b236      	sxth	r6, r6
 801f0a6:	fb0b 4606 	mla	r6, fp, r6, r4
 801f0aa:	f06f 0b03 	mvn.w	fp, #3
 801f0ae:	f816 400c 	ldrb.w	r4, [r6, ip]
 801f0b2:	fb0b fb09 	mul.w	fp, fp, r9
 801f0b6:	9e02      	ldr	r6, [sp, #8]
 801f0b8:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801f0bc:	10f4      	asrs	r4, r6, #3
 801f0be:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801f0c2:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801f0c6:	00f6      	lsls	r6, r6, #3
 801f0c8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f0cc:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f0d0:	b2f6      	uxtb	r6, r6
 801f0d2:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f0d6:	0224      	lsls	r4, r4, #8
 801f0d8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f0dc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f0e0:	4334      	orrs	r4, r6
 801f0e2:	f84a 400b 	str.w	r4, [sl, fp]
 801f0e6:	4440      	add	r0, r8
 801f0e8:	4472      	add	r2, lr
 801f0ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801f0ee:	e75d      	b.n	801efac <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f0f0:	b005      	add	sp, #20
 801f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0f6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fa:	b085      	sub	sp, #20
 801f0fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f100:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f102:	9101      	str	r1, [sp, #4]
 801f104:	6868      	ldr	r0, [r5, #4]
 801f106:	9203      	str	r2, [sp, #12]
 801f108:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f10c:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801f110:	fb00 1404 	mla	r4, r0, r4, r1
 801f114:	6829      	ldr	r1, [r5, #0]
 801f116:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f11a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f11c:	6809      	ldr	r1, [r1, #0]
 801f11e:	9102      	str	r1, [sp, #8]
 801f120:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f122:	6849      	ldr	r1, [r1, #4]
 801f124:	3104      	adds	r1, #4
 801f126:	9100      	str	r1, [sp, #0]
 801f128:	9901      	ldr	r1, [sp, #4]
 801f12a:	2900      	cmp	r1, #0
 801f12c:	dc03      	bgt.n	801f136 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f12e:	9903      	ldr	r1, [sp, #12]
 801f130:	2900      	cmp	r1, #0
 801f132:	f340 813d 	ble.w	801f3b0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f136:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f138:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f13c:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801f140:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f142:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801f146:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f148:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	dd0e      	ble.n	801f16e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f150:	1405      	asrs	r5, r0, #16
 801f152:	d405      	bmi.n	801f160 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f154:	4565      	cmp	r5, ip
 801f156:	da03      	bge.n	801f160 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f158:	140d      	asrs	r5, r1, #16
 801f15a:	d401      	bmi.n	801f160 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f15c:	42bd      	cmp	r5, r7
 801f15e:	db07      	blt.n	801f170 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f160:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f162:	3b01      	subs	r3, #1
 801f164:	3404      	adds	r4, #4
 801f166:	4428      	add	r0, r5
 801f168:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f16a:	4429      	add	r1, r5
 801f16c:	e7ee      	b.n	801f14c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f16e:	d044      	beq.n	801f1fa <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f170:	1e5d      	subs	r5, r3, #1
 801f172:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f174:	fb06 0605 	mla	r6, r6, r5, r0
 801f178:	1436      	asrs	r6, r6, #16
 801f17a:	d436      	bmi.n	801f1ea <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f17c:	4566      	cmp	r6, ip
 801f17e:	da34      	bge.n	801f1ea <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f180:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f182:	fb06 1505 	mla	r5, r6, r5, r1
 801f186:	142d      	asrs	r5, r5, #16
 801f188:	d42f      	bmi.n	801f1ea <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f18a:	42bd      	cmp	r5, r7
 801f18c:	da2d      	bge.n	801f1ea <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f18e:	1d25      	adds	r5, r4, #4
 801f190:	469a      	mov	sl, r3
 801f192:	f1ba 0f00 	cmp.w	sl, #0
 801f196:	dd2c      	ble.n	801f1f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f198:	140e      	asrs	r6, r1, #16
 801f19a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801f19c:	2aff      	cmp	r2, #255	@ 0xff
 801f19e:	46b6      	mov	lr, r6
 801f1a0:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f1a4:	9e02      	ldr	r6, [sp, #8]
 801f1a6:	ea4f 4720 	mov.w	r7, r0, asr #16
 801f1aa:	fb0c 660e 	mla	r6, ip, lr, r6
 801f1ae:	5df6      	ldrb	r6, [r6, r7]
 801f1b0:	9f00      	ldr	r7, [sp, #0]
 801f1b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f1b6:	4437      	add	r7, r6
 801f1b8:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f1bc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f1c0:	9f00      	ldr	r7, [sp, #0]
 801f1c2:	f817 9006 	ldrb.w	r9, [r7, r6]
 801f1c6:	f040 80be 	bne.w	801f346 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801f1ca:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f1ce:	f805 8c03 	strb.w	r8, [r5, #-3]
 801f1d2:	f805 ec02 	strb.w	lr, [r5, #-2]
 801f1d6:	f805 2c01 	strb.w	r2, [r5, #-1]
 801f1da:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f1dc:	3504      	adds	r5, #4
 801f1de:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1e2:	4430      	add	r0, r6
 801f1e4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f1e6:	4431      	add	r1, r6
 801f1e8:	e7d3      	b.n	801f192 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f1ea:	2500      	movs	r5, #0
 801f1ec:	195e      	adds	r6, r3, r5
 801f1ee:	2e00      	cmp	r6, #0
 801f1f0:	dc3f      	bgt.n	801f272 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f1f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1f6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f1fa:	9b01      	ldr	r3, [sp, #4]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	f340 80d7 	ble.w	801f3b0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f202:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f208:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f20c:	eeb0 6a62 	vmov.f32	s12, s5
 801f210:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f214:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f218:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f21c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f220:	eeb0 6a43 	vmov.f32	s12, s6
 801f224:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f228:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f22c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f230:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f234:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f238:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f23c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f240:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f244:	ee12 1a90 	vmov	r1, s5
 801f248:	eef0 2a47 	vmov.f32	s5, s14
 801f24c:	fb91 f3f3 	sdiv	r3, r1, r3
 801f250:	ee13 1a10 	vmov	r1, s6
 801f254:	9311      	str	r3, [sp, #68]	@ 0x44
 801f256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f258:	eeb0 3a67 	vmov.f32	s6, s15
 801f25c:	fb91 f3f3 	sdiv	r3, r1, r3
 801f260:	9312      	str	r3, [sp, #72]	@ 0x48
 801f262:	9b01      	ldr	r3, [sp, #4]
 801f264:	9903      	ldr	r1, [sp, #12]
 801f266:	3b01      	subs	r3, #1
 801f268:	9301      	str	r3, [sp, #4]
 801f26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f26c:	bf08      	it	eq
 801f26e:	460b      	moveq	r3, r1
 801f270:	e75a      	b.n	801f128 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f272:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801f276:	d427      	bmi.n	801f2c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f278:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801f27a:	68b7      	ldr	r7, [r6, #8]
 801f27c:	4567      	cmp	r7, ip
 801f27e:	dd23      	ble.n	801f2c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f280:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f284:	d420      	bmi.n	801f2c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f286:	68f6      	ldr	r6, [r6, #12]
 801f288:	4576      	cmp	r6, lr
 801f28a:	dd1d      	ble.n	801f2c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f28c:	9e02      	ldr	r6, [sp, #8]
 801f28e:	b23f      	sxth	r7, r7
 801f290:	2aff      	cmp	r2, #255	@ 0xff
 801f292:	fb0e 6707 	mla	r7, lr, r7, r6
 801f296:	f817 600c 	ldrb.w	r6, [r7, ip]
 801f29a:	9f00      	ldr	r7, [sp, #0]
 801f29c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f2a0:	4437      	add	r7, r6
 801f2a2:	f897 8002 	ldrb.w	r8, [r7, #2]
 801f2a6:	f897 9001 	ldrb.w	r9, [r7, #1]
 801f2aa:	9f00      	ldr	r7, [sp, #0]
 801f2ac:	f817 a006 	ldrb.w	sl, [r7, r6]
 801f2b0:	d110      	bne.n	801f2d4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f2b2:	f06f 0603 	mvn.w	r6, #3
 801f2b6:	436e      	muls	r6, r5
 801f2b8:	f804 a006 	strb.w	sl, [r4, r6]
 801f2bc:	4426      	add	r6, r4
 801f2be:	f886 9001 	strb.w	r9, [r6, #1]
 801f2c2:	f886 8002 	strb.w	r8, [r6, #2]
 801f2c6:	70f2      	strb	r2, [r6, #3]
 801f2c8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f2ca:	3d01      	subs	r5, #1
 801f2cc:	4430      	add	r0, r6
 801f2ce:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f2d0:	4431      	add	r1, r6
 801f2d2:	e78b      	b.n	801f1ec <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f2d4:	2a00      	cmp	r2, #0
 801f2d6:	d0f7      	beq.n	801f2c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f2d8:	fb1a fa02 	smulbb	sl, sl, r2
 801f2dc:	f06f 0603 	mvn.w	r6, #3
 801f2e0:	fb12 f909 	smulbb	r9, r2, r9
 801f2e4:	fb12 f808 	smulbb	r8, r2, r8
 801f2e8:	fb06 fb05 	mul.w	fp, r6, r5
 801f2ec:	eb04 0c0b 	add.w	ip, r4, fp
 801f2f0:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801f2f4:	fb02 f607 	mul.w	r6, r2, r7
 801f2f8:	f106 0e01 	add.w	lr, r6, #1
 801f2fc:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801f300:	19d6      	adds	r6, r2, r7
 801f302:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f306:	eba7 070e 	sub.w	r7, r7, lr
 801f30a:	eba6 060e 	sub.w	r6, r6, lr
 801f30e:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801f312:	b2f6      	uxtb	r6, r6
 801f314:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f318:	fb9a faf6 	sdiv	sl, sl, r6
 801f31c:	f804 a00b 	strb.w	sl, [r4, fp]
 801f320:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f324:	f88c 6003 	strb.w	r6, [ip, #3]
 801f328:	fb07 990e 	mla	r9, r7, lr, r9
 801f32c:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f330:	fb07 880e 	mla	r8, r7, lr, r8
 801f334:	fb99 f9f6 	sdiv	r9, r9, r6
 801f338:	fb98 f8f6 	sdiv	r8, r8, r6
 801f33c:	f88c 9001 	strb.w	r9, [ip, #1]
 801f340:	f88c 8002 	strb.w	r8, [ip, #2]
 801f344:	e7c0      	b.n	801f2c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f346:	2a00      	cmp	r2, #0
 801f348:	f43f af47 	beq.w	801f1da <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f34c:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801f350:	fb19 f902 	smulbb	r9, r9, r2
 801f354:	fb12 f808 	smulbb	r8, r2, r8
 801f358:	fb02 fc0b 	mul.w	ip, r2, fp
 801f35c:	eb02 060b 	add.w	r6, r2, fp
 801f360:	fb12 fe0e 	smulbb	lr, r2, lr
 801f364:	f10c 0701 	add.w	r7, ip, #1
 801f368:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f36c:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801f370:	ebab 070c 	sub.w	r7, fp, ip
 801f374:	eba6 060c 	sub.w	r6, r6, ip
 801f378:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801f37c:	b2f6      	uxtb	r6, r6
 801f37e:	fb07 990c 	mla	r9, r7, ip, r9
 801f382:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801f386:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f38a:	fb07 880c 	mla	r8, r7, ip, r8
 801f38e:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801f392:	fb07 ee0c 	mla	lr, r7, ip, lr
 801f396:	fb99 f9f6 	sdiv	r9, r9, r6
 801f39a:	fb98 f8f6 	sdiv	r8, r8, r6
 801f39e:	fb9e fef6 	sdiv	lr, lr, r6
 801f3a2:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f3a6:	f805 8c03 	strb.w	r8, [r5, #-3]
 801f3aa:	f805 ec02 	strb.w	lr, [r5, #-2]
 801f3ae:	e714      	b.n	801f1da <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f3b0:	b005      	add	sp, #20
 801f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3b6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ba:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f3bc:	4693      	mov	fp, r2
 801f3be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f3c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f3c4:	6870      	ldr	r0, [r6, #4]
 801f3c6:	686f      	ldr	r7, [r5, #4]
 801f3c8:	9100      	str	r1, [sp, #0]
 801f3ca:	3704      	adds	r7, #4
 801f3cc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f3d0:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801f3d4:	fb00 2404 	mla	r4, r0, r4, r2
 801f3d8:	6832      	ldr	r2, [r6, #0]
 801f3da:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801f3de:	682a      	ldr	r2, [r5, #0]
 801f3e0:	9201      	str	r2, [sp, #4]
 801f3e2:	9a00      	ldr	r2, [sp, #0]
 801f3e4:	2a00      	cmp	r2, #0
 801f3e6:	dc03      	bgt.n	801f3f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f3e8:	f1bb 0f00 	cmp.w	fp, #0
 801f3ec:	f340 80bd 	ble.w	801f56a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f3f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f3f2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f3f6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f3fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f3fc:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801f400:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f404:	2b00      	cmp	r3, #0
 801f406:	dd0c      	ble.n	801f422 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f408:	1406      	asrs	r6, r0, #16
 801f40a:	d405      	bmi.n	801f418 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f40c:	4556      	cmp	r6, sl
 801f40e:	da03      	bge.n	801f418 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f410:	1416      	asrs	r6, r2, #16
 801f412:	d401      	bmi.n	801f418 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f414:	454e      	cmp	r6, r9
 801f416:	db05      	blt.n	801f424 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f418:	4440      	add	r0, r8
 801f41a:	4472      	add	r2, lr
 801f41c:	3b01      	subs	r3, #1
 801f41e:	3404      	adds	r4, #4
 801f420:	e7f0      	b.n	801f404 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f422:	d03e      	beq.n	801f4a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801f424:	1e5e      	subs	r6, r3, #1
 801f426:	fb08 0c06 	mla	ip, r8, r6, r0
 801f42a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801f42e:	d42e      	bmi.n	801f48e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f430:	45d4      	cmp	ip, sl
 801f432:	da2c      	bge.n	801f48e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f434:	fb0e 2606 	mla	r6, lr, r6, r2
 801f438:	1436      	asrs	r6, r6, #16
 801f43a:	d428      	bmi.n	801f48e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f43c:	454e      	cmp	r6, r9
 801f43e:	da26      	bge.n	801f48e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f440:	1d26      	adds	r6, r4, #4
 801f442:	469c      	mov	ip, r3
 801f444:	f1bc 0f00 	cmp.w	ip, #0
 801f448:	f106 0604 	add.w	r6, r6, #4
 801f44c:	dd25      	ble.n	801f49a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f44e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801f452:	ea4f 4922 	mov.w	r9, r2, asr #16
 801f456:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f45a:	4472      	add	r2, lr
 801f45c:	468a      	mov	sl, r1
 801f45e:	9901      	ldr	r1, [sp, #4]
 801f460:	fb0a 1909 	mla	r9, sl, r9, r1
 801f464:	1401      	asrs	r1, r0, #16
 801f466:	4440      	add	r0, r8
 801f468:	f819 9001 	ldrb.w	r9, [r9, r1]
 801f46c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f470:	eb07 0a09 	add.w	sl, r7, r9
 801f474:	f817 9009 	ldrb.w	r9, [r7, r9]
 801f478:	f806 9c08 	strb.w	r9, [r6, #-8]
 801f47c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f480:	f806 9c07 	strb.w	r9, [r6, #-7]
 801f484:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f488:	f806 9c06 	strb.w	r9, [r6, #-6]
 801f48c:	e7da      	b.n	801f444 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f48e:	2600      	movs	r6, #0
 801f490:	eb03 0c06 	add.w	ip, r3, r6
 801f494:	f1bc 0f00 	cmp.w	ip, #0
 801f498:	dc3a      	bgt.n	801f510 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801f49a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f49e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f4a2:	9b00      	ldr	r3, [sp, #0]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	dd60      	ble.n	801f56a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f4a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4b2:	eeb0 6a62 	vmov.f32	s12, s5
 801f4b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f4ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4c2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f4c6:	eeb0 6a43 	vmov.f32	s12, s6
 801f4ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4ce:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f4d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f4d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f4da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f4de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f4e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f4e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4ea:	ee12 2a90 	vmov	r2, s5
 801f4ee:	eef0 2a47 	vmov.f32	s5, s14
 801f4f2:	fb92 f8f3 	sdiv	r8, r2, r3
 801f4f6:	ee13 2a10 	vmov	r2, s6
 801f4fa:	eeb0 3a67 	vmov.f32	s6, s15
 801f4fe:	fb92 fef3 	sdiv	lr, r2, r3
 801f502:	9b00      	ldr	r3, [sp, #0]
 801f504:	3b01      	subs	r3, #1
 801f506:	9300      	str	r3, [sp, #0]
 801f508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f50a:	bf08      	it	eq
 801f50c:	465b      	moveq	r3, fp
 801f50e:	e768      	b.n	801f3e2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801f510:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f514:	d425      	bmi.n	801f562 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f516:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801f51a:	45cc      	cmp	ip, r9
 801f51c:	dd21      	ble.n	801f562 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f51e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f522:	d41e      	bmi.n	801f562 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f524:	68e9      	ldr	r1, [r5, #12]
 801f526:	4551      	cmp	r1, sl
 801f528:	dd1b      	ble.n	801f562 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f52a:	9901      	ldr	r1, [sp, #4]
 801f52c:	fa0f fc8c 	sxth.w	ip, ip
 801f530:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801f534:	f06f 0103 	mvn.w	r1, #3
 801f538:	f81c c009 	ldrb.w	ip, [ip, r9]
 801f53c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f540:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801f544:	eb07 090c 	add.w	r9, r7, ip
 801f548:	fb01 fc06 	mul.w	ip, r1, r6
 801f54c:	f804 a00c 	strb.w	sl, [r4, ip]
 801f550:	44a4      	add	ip, r4
 801f552:	f899 a001 	ldrb.w	sl, [r9, #1]
 801f556:	f88c a001 	strb.w	sl, [ip, #1]
 801f55a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f55e:	f88c 9002 	strb.w	r9, [ip, #2]
 801f562:	4440      	add	r0, r8
 801f564:	4472      	add	r2, lr
 801f566:	3e01      	subs	r6, #1
 801f568:	e792      	b.n	801f490 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f56a:	b003      	add	sp, #12
 801f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f570 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f574:	b089      	sub	sp, #36	@ 0x24
 801f576:	469b      	mov	fp, r3
 801f578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f57c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801f57e:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 801f582:	9101      	str	r1, [sp, #4]
 801f584:	9205      	str	r2, [sp, #20]
 801f586:	9306      	str	r3, [sp, #24]
 801f588:	6842      	ldr	r2, [r0, #4]
 801f58a:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801f58e:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	@ 0x60
 801f592:	fb02 3101 	mla	r1, r2, r1, r3
 801f596:	6803      	ldr	r3, [r0, #0]
 801f598:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f59c:	f8da 3000 	ldr.w	r3, [sl]
 801f5a0:	9302      	str	r3, [sp, #8]
 801f5a2:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f5a6:	3304      	adds	r3, #4
 801f5a8:	9303      	str	r3, [sp, #12]
 801f5aa:	9b01      	ldr	r3, [sp, #4]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	dc03      	bgt.n	801f5b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f5b0:	9b05      	ldr	r3, [sp, #20]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	f340 814e 	ble.w	801f854 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f5b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5ba:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801f5be:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801f5c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f5c4:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801f5c8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801f5cc:	f1bb 0f00 	cmp.w	fp, #0
 801f5d0:	dd0f      	ble.n	801f5f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f5d2:	1410      	asrs	r0, r2, #16
 801f5d4:	d405      	bmi.n	801f5e2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5d6:	42b0      	cmp	r0, r6
 801f5d8:	da03      	bge.n	801f5e2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5da:	1418      	asrs	r0, r3, #16
 801f5dc:	d401      	bmi.n	801f5e2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5de:	42a8      	cmp	r0, r5
 801f5e0:	db08      	blt.n	801f5f4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f5e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f5e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f5e8:	3104      	adds	r1, #4
 801f5ea:	4402      	add	r2, r0
 801f5ec:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f5ee:	4403      	add	r3, r0
 801f5f0:	e7ec      	b.n	801f5cc <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f5f2:	d04a      	beq.n	801f68a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f5f4:	f10b 30ff 	add.w	r0, fp, #4294967295
 801f5f8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f5fa:	fb04 2400 	mla	r4, r4, r0, r2
 801f5fe:	1424      	asrs	r4, r4, #16
 801f600:	d43a      	bmi.n	801f678 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f602:	42b4      	cmp	r4, r6
 801f604:	da38      	bge.n	801f678 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f606:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f608:	fb04 3000 	mla	r0, r4, r0, r3
 801f60c:	1400      	asrs	r0, r0, #16
 801f60e:	d433      	bmi.n	801f678 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f610:	42a8      	cmp	r0, r5
 801f612:	da31      	bge.n	801f678 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f614:	1d08      	adds	r0, r1, #4
 801f616:	46dc      	mov	ip, fp
 801f618:	f1bc 0f00 	cmp.w	ip, #0
 801f61c:	dd31      	ble.n	801f682 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f61e:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801f622:	141c      	asrs	r4, r3, #16
 801f624:	9f02      	ldr	r7, [sp, #8]
 801f626:	1415      	asrs	r5, r2, #16
 801f628:	fb06 7404 	mla	r4, r6, r4, r7
 801f62c:	5d64      	ldrb	r4, [r4, r5]
 801f62e:	9d03      	ldr	r5, [sp, #12]
 801f630:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801f634:	9d06      	ldr	r5, [sp, #24]
 801f636:	0e34      	lsrs	r4, r6, #24
 801f638:	436c      	muls	r4, r5
 801f63a:	1c65      	adds	r5, r4, #1
 801f63c:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801f640:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801f644:	1224      	asrs	r4, r4, #8
 801f646:	b2ef      	uxtb	r7, r5
 801f648:	2cff      	cmp	r4, #255	@ 0xff
 801f64a:	9704      	str	r7, [sp, #16]
 801f64c:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801f650:	fa5f fe87 	uxtb.w	lr, r7
 801f654:	f040 80ca 	bne.w	801f7ec <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f658:	f800 6c04 	strb.w	r6, [r0, #-4]
 801f65c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f660:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f664:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f668:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f66a:	3004      	adds	r0, #4
 801f66c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f670:	4422      	add	r2, r4
 801f672:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f674:	4423      	add	r3, r4
 801f676:	e7cf      	b.n	801f618 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f678:	2700      	movs	r7, #0
 801f67a:	eb0b 0007 	add.w	r0, fp, r7
 801f67e:	2800      	cmp	r0, #0
 801f680:	dc41      	bgt.n	801f706 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f682:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801f686:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f68a:	9b01      	ldr	r3, [sp, #4]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	f340 80e1 	ble.w	801f854 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f692:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f696:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f698:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f69c:	eeb0 6a62 	vmov.f32	s12, s5
 801f6a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6ac:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801f6b0:	eeb0 6a43 	vmov.f32	s12, s6
 801f6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6b8:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 801f6bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6d4:	ee12 2a90 	vmov	r2, s5
 801f6d8:	eef0 2a47 	vmov.f32	s5, s14
 801f6dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6e0:	ee13 2a10 	vmov	r2, s6
 801f6e4:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f6e8:	eeb0 3a67 	vmov.f32	s6, s15
 801f6ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6f0:	9316      	str	r3, [sp, #88]	@ 0x58
 801f6f2:	9b01      	ldr	r3, [sp, #4]
 801f6f4:	9a05      	ldr	r2, [sp, #20]
 801f6f6:	3b01      	subs	r3, #1
 801f6f8:	9301      	str	r3, [sp, #4]
 801f6fa:	bf08      	it	eq
 801f6fc:	4693      	moveq	fp, r2
 801f6fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f700:	bf18      	it	ne
 801f702:	469b      	movne	fp, r3
 801f704:	e751      	b.n	801f5aa <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f706:	1415      	asrs	r5, r2, #16
 801f708:	d42f      	bmi.n	801f76a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f70a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801f70e:	42ac      	cmp	r4, r5
 801f710:	dd2b      	ble.n	801f76a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f712:	141e      	asrs	r6, r3, #16
 801f714:	d429      	bmi.n	801f76a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f716:	f8da 000c 	ldr.w	r0, [sl, #12]
 801f71a:	42b0      	cmp	r0, r6
 801f71c:	dd25      	ble.n	801f76a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f71e:	9802      	ldr	r0, [sp, #8]
 801f720:	b224      	sxth	r4, r4
 801f722:	fb06 0404 	mla	r4, r6, r4, r0
 801f726:	5d60      	ldrb	r0, [r4, r5]
 801f728:	9c03      	ldr	r4, [sp, #12]
 801f72a:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801f72e:	9c06      	ldr	r4, [sp, #24]
 801f730:	0e28      	lsrs	r0, r5, #24
 801f732:	4360      	muls	r0, r4
 801f734:	1c44      	adds	r4, r0, #1
 801f736:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801f73a:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801f73e:	1200      	asrs	r0, r0, #8
 801f740:	b2e6      	uxtb	r6, r4
 801f742:	28ff      	cmp	r0, #255	@ 0xff
 801f744:	9607      	str	r6, [sp, #28]
 801f746:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801f74a:	fa5f fe86 	uxtb.w	lr, r6
 801f74e:	d112      	bne.n	801f776 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f750:	f06f 0c03 	mvn.w	ip, #3
 801f754:	fb0c fc07 	mul.w	ip, ip, r7
 801f758:	f801 500c 	strb.w	r5, [r1, ip]
 801f75c:	448c      	add	ip, r1
 801f75e:	f88c 6001 	strb.w	r6, [ip, #1]
 801f762:	f88c 4002 	strb.w	r4, [ip, #2]
 801f766:	f88c 0003 	strb.w	r0, [ip, #3]
 801f76a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f76c:	3f01      	subs	r7, #1
 801f76e:	4402      	add	r2, r0
 801f770:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f772:	4403      	add	r3, r0
 801f774:	e781      	b.n	801f67a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f776:	b2c4      	uxtb	r4, r0
 801f778:	9404      	str	r4, [sp, #16]
 801f77a:	2800      	cmp	r0, #0
 801f77c:	d0f5      	beq.n	801f76a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f77e:	f06f 0403 	mvn.w	r4, #3
 801f782:	b2ed      	uxtb	r5, r5
 801f784:	fb00 fe0e 	mul.w	lr, r0, lr
 801f788:	fb04 f807 	mul.w	r8, r4, r7
 801f78c:	9c04      	ldr	r4, [sp, #16]
 801f78e:	eb01 0c08 	add.w	ip, r1, r8
 801f792:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801f796:	fb04 f609 	mul.w	r6, r4, r9
 801f79a:	1c74      	adds	r4, r6, #1
 801f79c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f7a0:	9c04      	ldr	r4, [sp, #16]
 801f7a2:	1236      	asrs	r6, r6, #8
 801f7a4:	444c      	add	r4, r9
 801f7a6:	1ba4      	subs	r4, r4, r6
 801f7a8:	eba9 0606 	sub.w	r6, r9, r6
 801f7ac:	f811 9008 	ldrb.w	r9, [r1, r8]
 801f7b0:	b2e4      	uxtb	r4, r4
 801f7b2:	fb06 f909 	mul.w	r9, r6, r9
 801f7b6:	fb00 9505 	mla	r5, r0, r5, r9
 801f7ba:	fb95 f5f4 	sdiv	r5, r5, r4
 801f7be:	f801 5008 	strb.w	r5, [r1, r8]
 801f7c2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f7c6:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801f7ca:	fb06 ee05 	mla	lr, r6, r5, lr
 801f7ce:	9d07      	ldr	r5, [sp, #28]
 801f7d0:	f88c 4003 	strb.w	r4, [ip, #3]
 801f7d4:	4368      	muls	r0, r5
 801f7d6:	fb06 0609 	mla	r6, r6, r9, r0
 801f7da:	fb9e fef4 	sdiv	lr, lr, r4
 801f7de:	fb96 f6f4 	sdiv	r6, r6, r4
 801f7e2:	f88c e001 	strb.w	lr, [ip, #1]
 801f7e6:	f88c 6002 	strb.w	r6, [ip, #2]
 801f7ea:	e7be      	b.n	801f76a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f7ec:	b2e5      	uxtb	r5, r4
 801f7ee:	2c00      	cmp	r4, #0
 801f7f0:	f43f af3a 	beq.w	801f668 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f7f4:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f7f8:	b2f6      	uxtb	r6, r6
 801f7fa:	fb04 fe0e 	mul.w	lr, r4, lr
 801f7fe:	fb05 f908 	mul.w	r9, r5, r8
 801f802:	4445      	add	r5, r8
 801f804:	f109 0701 	add.w	r7, r9, #1
 801f808:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801f80c:	123f      	asrs	r7, r7, #8
 801f80e:	1bed      	subs	r5, r5, r7
 801f810:	eba8 0707 	sub.w	r7, r8, r7
 801f814:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801f818:	b2ed      	uxtb	r5, r5
 801f81a:	fb07 f808 	mul.w	r8, r7, r8
 801f81e:	f800 5c01 	strb.w	r5, [r0, #-1]
 801f822:	fb04 8606 	mla	r6, r4, r6, r8
 801f826:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801f82a:	fb96 f6f5 	sdiv	r6, r6, r5
 801f82e:	f800 6c04 	strb.w	r6, [r0, #-4]
 801f832:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801f836:	fb07 ee06 	mla	lr, r7, r6, lr
 801f83a:	9e04      	ldr	r6, [sp, #16]
 801f83c:	4374      	muls	r4, r6
 801f83e:	fb07 4708 	mla	r7, r7, r8, r4
 801f842:	fb9e fef5 	sdiv	lr, lr, r5
 801f846:	fb97 f7f5 	sdiv	r7, r7, r5
 801f84a:	f800 ec03 	strb.w	lr, [r0, #-3]
 801f84e:	f800 7c02 	strb.w	r7, [r0, #-2]
 801f852:	e709      	b.n	801f668 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f854:	b009      	add	sp, #36	@ 0x24
 801f856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f85a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f85a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f85e:	b087      	sub	sp, #28
 801f860:	469b      	mov	fp, r3
 801f862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f866:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f868:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801f86c:	9100      	str	r1, [sp, #0]
 801f86e:	9204      	str	r2, [sp, #16]
 801f870:	9305      	str	r3, [sp, #20]
 801f872:	6842      	ldr	r2, [r0, #4]
 801f874:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	@ 0x58
 801f878:	fb02 3101 	mla	r1, r2, r1, r3
 801f87c:	6803      	ldr	r3, [r0, #0]
 801f87e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f882:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	9301      	str	r3, [sp, #4]
 801f888:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f88a:	685b      	ldr	r3, [r3, #4]
 801f88c:	9302      	str	r3, [sp, #8]
 801f88e:	9b00      	ldr	r3, [sp, #0]
 801f890:	2b00      	cmp	r3, #0
 801f892:	dc03      	bgt.n	801f89c <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f894:	9b04      	ldr	r3, [sp, #16]
 801f896:	2b00      	cmp	r3, #0
 801f898:	f340 8156 	ble.w	801fb48 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f89c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f89e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801f8a2:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801f8a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f8a8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801f8ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f8ae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801f8b2:	f1bb 0f00 	cmp.w	fp, #0
 801f8b6:	dd0f      	ble.n	801f8d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f8b8:	1410      	asrs	r0, r2, #16
 801f8ba:	d405      	bmi.n	801f8c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f8bc:	42b0      	cmp	r0, r6
 801f8be:	da03      	bge.n	801f8c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f8c0:	1418      	asrs	r0, r3, #16
 801f8c2:	d401      	bmi.n	801f8c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f8c4:	42a8      	cmp	r0, r5
 801f8c6:	db08      	blt.n	801f8da <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f8c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f8ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8ce:	3104      	adds	r1, #4
 801f8d0:	4402      	add	r2, r0
 801f8d2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f8d4:	4403      	add	r3, r0
 801f8d6:	e7ec      	b.n	801f8b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f8d8:	d053      	beq.n	801f982 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f8da:	f10b 30ff 	add.w	r0, fp, #4294967295
 801f8de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f8e0:	fb04 2400 	mla	r4, r4, r0, r2
 801f8e4:	1424      	asrs	r4, r4, #16
 801f8e6:	d442      	bmi.n	801f96e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f8e8:	42b4      	cmp	r4, r6
 801f8ea:	da40      	bge.n	801f96e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f8ec:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f8ee:	fb04 3000 	mla	r0, r4, r0, r3
 801f8f2:	1400      	asrs	r0, r0, #16
 801f8f4:	d43b      	bmi.n	801f96e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f8f6:	42a8      	cmp	r0, r5
 801f8f8:	da39      	bge.n	801f96e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f8fa:	1d08      	adds	r0, r1, #4
 801f8fc:	46d8      	mov	r8, fp
 801f8fe:	f1b8 0f00 	cmp.w	r8, #0
 801f902:	dd3a      	ble.n	801f97a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f904:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801f906:	141c      	asrs	r4, r3, #16
 801f908:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801f90c:	1415      	asrs	r5, r2, #16
 801f90e:	fb06 5404 	mla	r4, r6, r4, r5
 801f912:	9e02      	ldr	r6, [sp, #8]
 801f914:	9d01      	ldr	r5, [sp, #4]
 801f916:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801f91a:	5d34      	ldrb	r4, [r6, r4]
 801f91c:	9e05      	ldr	r6, [sp, #20]
 801f91e:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801f922:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801f926:	4374      	muls	r4, r6
 801f928:	00ed      	lsls	r5, r5, #3
 801f92a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f92e:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801f932:	1c66      	adds	r6, r4, #1
 801f934:	b2ed      	uxtb	r5, r5
 801f936:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801f93a:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801f93e:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801f942:	1224      	asrs	r4, r4, #8
 801f944:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f948:	2cff      	cmp	r4, #255	@ 0xff
 801f94a:	f040 80cb 	bne.w	801fae4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f94e:	f800 5c04 	strb.w	r5, [r0, #-4]
 801f952:	f800 cc03 	strb.w	ip, [r0, #-3]
 801f956:	f800 ec02 	strb.w	lr, [r0, #-2]
 801f95a:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f95e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f960:	3004      	adds	r0, #4
 801f962:	f108 38ff 	add.w	r8, r8, #4294967295
 801f966:	4422      	add	r2, r4
 801f968:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f96a:	4423      	add	r3, r4
 801f96c:	e7c7      	b.n	801f8fe <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f96e:	f04f 0c00 	mov.w	ip, #0
 801f972:	eb0b 000c 	add.w	r0, fp, ip
 801f976:	2800      	cmp	r0, #0
 801f978:	dc41      	bgt.n	801f9fe <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f97a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801f97e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f982:	9b00      	ldr	r3, [sp, #0]
 801f984:	2b00      	cmp	r3, #0
 801f986:	f340 80df 	ble.w	801fb48 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f98a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f98e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f990:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f994:	eeb0 6a62 	vmov.f32	s12, s5
 801f998:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f99c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9a4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f9a8:	eeb0 6a43 	vmov.f32	s12, s6
 801f9ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9b0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f9b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9cc:	ee12 2a90 	vmov	r2, s5
 801f9d0:	eef0 2a47 	vmov.f32	s5, s14
 801f9d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9d8:	ee13 2a10 	vmov	r2, s6
 801f9dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f9de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9e0:	eeb0 3a67 	vmov.f32	s6, s15
 801f9e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9e8:	9314      	str	r3, [sp, #80]	@ 0x50
 801f9ea:	9b00      	ldr	r3, [sp, #0]
 801f9ec:	9a04      	ldr	r2, [sp, #16]
 801f9ee:	3b01      	subs	r3, #1
 801f9f0:	9300      	str	r3, [sp, #0]
 801f9f2:	bf08      	it	eq
 801f9f4:	4693      	moveq	fp, r2
 801f9f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9f8:	bf18      	it	ne
 801f9fa:	469b      	movne	fp, r3
 801f9fc:	e747      	b.n	801f88e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f9fe:	1415      	asrs	r5, r2, #16
 801fa00:	d433      	bmi.n	801fa6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fa02:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801fa04:	6884      	ldr	r4, [r0, #8]
 801fa06:	42ac      	cmp	r4, r5
 801fa08:	dd2f      	ble.n	801fa6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fa0a:	141e      	asrs	r6, r3, #16
 801fa0c:	d42d      	bmi.n	801fa6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fa0e:	68c0      	ldr	r0, [r0, #12]
 801fa10:	42b0      	cmp	r0, r6
 801fa12:	dd2a      	ble.n	801fa6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fa14:	b224      	sxth	r4, r4
 801fa16:	9801      	ldr	r0, [sp, #4]
 801fa18:	fb06 5504 	mla	r5, r6, r4, r5
 801fa1c:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801fa20:	9802      	ldr	r0, [sp, #8]
 801fa22:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801fa26:	5d40      	ldrb	r0, [r0, r5]
 801fa28:	10e7      	asrs	r7, r4, #3
 801fa2a:	9d05      	ldr	r5, [sp, #20]
 801fa2c:	00e4      	lsls	r4, r4, #3
 801fa2e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801fa32:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fa36:	4368      	muls	r0, r5
 801fa38:	b2e4      	uxtb	r4, r4
 801fa3a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801fa3e:	1c45      	adds	r5, r0, #1
 801fa40:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fa44:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fa48:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fa4c:	9403      	str	r4, [sp, #12]
 801fa4e:	1200      	asrs	r0, r0, #8
 801fa50:	28ff      	cmp	r0, #255	@ 0xff
 801fa52:	d111      	bne.n	801fa78 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801fa54:	f06f 0403 	mvn.w	r4, #3
 801fa58:	fb04 f50c 	mul.w	r5, r4, ip
 801fa5c:	9c03      	ldr	r4, [sp, #12]
 801fa5e:	554c      	strb	r4, [r1, r5]
 801fa60:	440d      	add	r5, r1
 801fa62:	706f      	strb	r7, [r5, #1]
 801fa64:	f885 e002 	strb.w	lr, [r5, #2]
 801fa68:	70e8      	strb	r0, [r5, #3]
 801fa6a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fa6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fa70:	4402      	add	r2, r0
 801fa72:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801fa74:	4403      	add	r3, r0
 801fa76:	e77c      	b.n	801f972 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fa78:	b2c5      	uxtb	r5, r0
 801fa7a:	2800      	cmp	r0, #0
 801fa7c:	d0f5      	beq.n	801fa6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fa7e:	f06f 0403 	mvn.w	r4, #3
 801fa82:	4347      	muls	r7, r0
 801fa84:	fb04 f90c 	mul.w	r9, r4, ip
 801fa88:	eb01 0809 	add.w	r8, r1, r9
 801fa8c:	f898 a003 	ldrb.w	sl, [r8, #3]
 801fa90:	fb05 f60a 	mul.w	r6, r5, sl
 801fa94:	4455      	add	r5, sl
 801fa96:	1c74      	adds	r4, r6, #1
 801fa98:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801fa9c:	9c03      	ldr	r4, [sp, #12]
 801fa9e:	1236      	asrs	r6, r6, #8
 801faa0:	4344      	muls	r4, r0
 801faa2:	fb00 f00e 	mul.w	r0, r0, lr
 801faa6:	1bad      	subs	r5, r5, r6
 801faa8:	ebaa 0606 	sub.w	r6, sl, r6
 801faac:	f811 a009 	ldrb.w	sl, [r1, r9]
 801fab0:	b2ed      	uxtb	r5, r5
 801fab2:	fb06 440a 	mla	r4, r6, sl, r4
 801fab6:	fb94 f4f5 	sdiv	r4, r4, r5
 801faba:	f801 4009 	strb.w	r4, [r1, r9]
 801fabe:	f898 4001 	ldrb.w	r4, [r8, #1]
 801fac2:	f898 a002 	ldrb.w	sl, [r8, #2]
 801fac6:	fb06 7704 	mla	r7, r6, r4, r7
 801faca:	fb06 060a 	mla	r6, r6, sl, r0
 801face:	f888 5003 	strb.w	r5, [r8, #3]
 801fad2:	fb97 f7f5 	sdiv	r7, r7, r5
 801fad6:	fb96 f6f5 	sdiv	r6, r6, r5
 801fada:	f888 7001 	strb.w	r7, [r8, #1]
 801fade:	f888 6002 	strb.w	r6, [r8, #2]
 801fae2:	e7c2      	b.n	801fa6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fae4:	b2e6      	uxtb	r6, r4
 801fae6:	2c00      	cmp	r4, #0
 801fae8:	f43f af39 	beq.w	801f95e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801faec:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801faf0:	4365      	muls	r5, r4
 801faf2:	fb04 fc0c 	mul.w	ip, r4, ip
 801faf6:	fb06 fa09 	mul.w	sl, r6, r9
 801fafa:	444e      	add	r6, r9
 801fafc:	fb04 f40e 	mul.w	r4, r4, lr
 801fb00:	f10a 0701 	add.w	r7, sl, #1
 801fb04:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801fb08:	123f      	asrs	r7, r7, #8
 801fb0a:	1bf6      	subs	r6, r6, r7
 801fb0c:	eba9 0707 	sub.w	r7, r9, r7
 801fb10:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801fb14:	b2f6      	uxtb	r6, r6
 801fb16:	fb07 5509 	mla	r5, r7, r9, r5
 801fb1a:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801fb1e:	f800 6c01 	strb.w	r6, [r0, #-1]
 801fb22:	fb95 f5f6 	sdiv	r5, r5, r6
 801fb26:	f800 5c04 	strb.w	r5, [r0, #-4]
 801fb2a:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801fb2e:	fb07 cc05 	mla	ip, r7, r5, ip
 801fb32:	fb07 4709 	mla	r7, r7, r9, r4
 801fb36:	fb9c fcf6 	sdiv	ip, ip, r6
 801fb3a:	fb97 f7f6 	sdiv	r7, r7, r6
 801fb3e:	f800 cc03 	strb.w	ip, [r0, #-3]
 801fb42:	f800 7c02 	strb.w	r7, [r0, #-2]
 801fb46:	e70a      	b.n	801f95e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fb48:	b007      	add	sp, #28
 801fb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb4e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb52:	b087      	sub	sp, #28
 801fb54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fb58:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fb5a:	9101      	str	r1, [sp, #4]
 801fb5c:	9205      	str	r2, [sp, #20]
 801fb5e:	6861      	ldr	r1, [r4, #4]
 801fb60:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801fb64:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801fb68:	fb01 2000 	mla	r0, r1, r0, r2
 801fb6c:	6822      	ldr	r2, [r4, #0]
 801fb6e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fb72:	f8db 2000 	ldr.w	r2, [fp]
 801fb76:	9202      	str	r2, [sp, #8]
 801fb78:	f8db 2004 	ldr.w	r2, [fp, #4]
 801fb7c:	9203      	str	r2, [sp, #12]
 801fb7e:	9a01      	ldr	r2, [sp, #4]
 801fb80:	2a00      	cmp	r2, #0
 801fb82:	dc03      	bgt.n	801fb8c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fb84:	9a05      	ldr	r2, [sp, #20]
 801fb86:	2a00      	cmp	r2, #0
 801fb88:	f340 8151 	ble.w	801fe2e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fb8c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fb8e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801fb92:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fb96:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fb98:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801fb9c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	dd0e      	ble.n	801fbc2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fba4:	140c      	asrs	r4, r1, #16
 801fba6:	d405      	bmi.n	801fbb4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fba8:	42bc      	cmp	r4, r7
 801fbaa:	da03      	bge.n	801fbb4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fbac:	1414      	asrs	r4, r2, #16
 801fbae:	d401      	bmi.n	801fbb4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fbb0:	42b4      	cmp	r4, r6
 801fbb2:	db07      	blt.n	801fbc4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fbb4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fbb6:	3b01      	subs	r3, #1
 801fbb8:	3004      	adds	r0, #4
 801fbba:	4421      	add	r1, r4
 801fbbc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fbbe:	4422      	add	r2, r4
 801fbc0:	e7ee      	b.n	801fba0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fbc2:	d049      	beq.n	801fc58 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801fbc4:	1e5c      	subs	r4, r3, #1
 801fbc6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fbc8:	fb05 1504 	mla	r5, r5, r4, r1
 801fbcc:	142d      	asrs	r5, r5, #16
 801fbce:	d43b      	bmi.n	801fc48 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fbd0:	42bd      	cmp	r5, r7
 801fbd2:	da39      	bge.n	801fc48 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fbd4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fbd6:	fb05 2404 	mla	r4, r5, r4, r2
 801fbda:	1424      	asrs	r4, r4, #16
 801fbdc:	d434      	bmi.n	801fc48 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fbde:	42b4      	cmp	r4, r6
 801fbe0:	da32      	bge.n	801fc48 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fbe2:	1d04      	adds	r4, r0, #4
 801fbe4:	4699      	mov	r9, r3
 801fbe6:	f1b9 0f00 	cmp.w	r9, #0
 801fbea:	dd31      	ble.n	801fc50 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801fbec:	1415      	asrs	r5, r2, #16
 801fbee:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801fbf2:	140e      	asrs	r6, r1, #16
 801fbf4:	fb07 6605 	mla	r6, r7, r5, r6
 801fbf8:	9d02      	ldr	r5, [sp, #8]
 801fbfa:	9f03      	ldr	r7, [sp, #12]
 801fbfc:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801fc00:	5dbe      	ldrb	r6, [r7, r6]
 801fc02:	ea4f 2825 	mov.w	r8, r5, asr #8
 801fc06:	10ef      	asrs	r7, r5, #3
 801fc08:	2eff      	cmp	r6, #255	@ 0xff
 801fc0a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801fc0e:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fc12:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fc16:	b2ed      	uxtb	r5, r5
 801fc18:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fc1c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fc20:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801fc24:	f040 80cd 	bne.w	801fdc2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fc28:	f804 5c04 	strb.w	r5, [r4, #-4]
 801fc2c:	f804 7c03 	strb.w	r7, [r4, #-3]
 801fc30:	f804 8c02 	strb.w	r8, [r4, #-2]
 801fc34:	f804 6c01 	strb.w	r6, [r4, #-1]
 801fc38:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fc3a:	3404      	adds	r4, #4
 801fc3c:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc40:	4429      	add	r1, r5
 801fc42:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fc44:	442a      	add	r2, r5
 801fc46:	e7ce      	b.n	801fbe6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fc48:	2700      	movs	r7, #0
 801fc4a:	19dc      	adds	r4, r3, r7
 801fc4c:	2c00      	cmp	r4, #0
 801fc4e:	dc3f      	bgt.n	801fcd0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801fc50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fc58:	9b01      	ldr	r3, [sp, #4]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	f340 80e7 	ble.w	801fe2e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fc60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc6a:	eeb0 6a62 	vmov.f32	s12, s5
 801fc6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc7a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fc7e:	eeb0 6a43 	vmov.f32	s12, s6
 801fc82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc86:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801fc8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fca2:	ee12 2a90 	vmov	r2, s5
 801fca6:	eef0 2a47 	vmov.f32	s5, s14
 801fcaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcae:	ee13 2a10 	vmov	r2, s6
 801fcb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fcb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcb6:	eeb0 3a67 	vmov.f32	s6, s15
 801fcba:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcbe:	9314      	str	r3, [sp, #80]	@ 0x50
 801fcc0:	9b01      	ldr	r3, [sp, #4]
 801fcc2:	9a05      	ldr	r2, [sp, #20]
 801fcc4:	3b01      	subs	r3, #1
 801fcc6:	9301      	str	r3, [sp, #4]
 801fcc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcca:	bf08      	it	eq
 801fccc:	4613      	moveq	r3, r2
 801fcce:	e756      	b.n	801fb7e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fcd0:	140e      	asrs	r6, r1, #16
 801fcd2:	d434      	bmi.n	801fd3e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcd4:	f8db 5008 	ldr.w	r5, [fp, #8]
 801fcd8:	42b5      	cmp	r5, r6
 801fcda:	dd30      	ble.n	801fd3e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcdc:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fce0:	d42d      	bmi.n	801fd3e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fce2:	f8db 400c 	ldr.w	r4, [fp, #12]
 801fce6:	4564      	cmp	r4, ip
 801fce8:	dd29      	ble.n	801fd3e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fcea:	b22d      	sxth	r5, r5
 801fcec:	9c02      	ldr	r4, [sp, #8]
 801fcee:	fb0c 6505 	mla	r5, ip, r5, r6
 801fcf2:	9e03      	ldr	r6, [sp, #12]
 801fcf4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801fcf8:	5d75      	ldrb	r5, [r6, r5]
 801fcfa:	ea4f 2824 	mov.w	r8, r4, asr #8
 801fcfe:	2dff      	cmp	r5, #255	@ 0xff
 801fd00:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fd04:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801fd08:	9604      	str	r6, [sp, #16]
 801fd0a:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801fd0e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801fd12:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fd16:	b2e4      	uxtb	r4, r4
 801fd18:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801fd1c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fd20:	d113      	bne.n	801fd4a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fd22:	f06f 0c03 	mvn.w	ip, #3
 801fd26:	fb0c fc07 	mul.w	ip, ip, r7
 801fd2a:	f800 400c 	strb.w	r4, [r0, ip]
 801fd2e:	4484      	add	ip, r0
 801fd30:	9c04      	ldr	r4, [sp, #16]
 801fd32:	f88c 6001 	strb.w	r6, [ip, #1]
 801fd36:	f88c 4002 	strb.w	r4, [ip, #2]
 801fd3a:	f88c 5003 	strb.w	r5, [ip, #3]
 801fd3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fd40:	3f01      	subs	r7, #1
 801fd42:	4421      	add	r1, r4
 801fd44:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fd46:	4422      	add	r2, r4
 801fd48:	e77f      	b.n	801fc4a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801fd4a:	2d00      	cmp	r5, #0
 801fd4c:	d0f7      	beq.n	801fd3e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fd4e:	fb14 f405 	smulbb	r4, r4, r5
 801fd52:	f06f 0c03 	mvn.w	ip, #3
 801fd56:	fb15 f606 	smulbb	r6, r5, r6
 801fd5a:	fb0c fa07 	mul.w	sl, ip, r7
 801fd5e:	eb00 090a 	add.w	r9, r0, sl
 801fd62:	f899 8003 	ldrb.w	r8, [r9, #3]
 801fd66:	fb05 fc08 	mul.w	ip, r5, r8
 801fd6a:	f10c 0e01 	add.w	lr, ip, #1
 801fd6e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fd72:	eb05 0c08 	add.w	ip, r5, r8
 801fd76:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fd7a:	ebac 0c0e 	sub.w	ip, ip, lr
 801fd7e:	eba8 0e0e 	sub.w	lr, r8, lr
 801fd82:	f810 800a 	ldrb.w	r8, [r0, sl]
 801fd86:	fa5f fc8c 	uxtb.w	ip, ip
 801fd8a:	fb0e 4408 	mla	r4, lr, r8, r4
 801fd8e:	fb94 f4fc 	sdiv	r4, r4, ip
 801fd92:	f800 400a 	strb.w	r4, [r0, sl]
 801fd96:	f899 4001 	ldrb.w	r4, [r9, #1]
 801fd9a:	f889 c003 	strb.w	ip, [r9, #3]
 801fd9e:	fb0e 6604 	mla	r6, lr, r4, r6
 801fda2:	f899 4002 	ldrb.w	r4, [r9, #2]
 801fda6:	fb96 f6fc 	sdiv	r6, r6, ip
 801fdaa:	f889 6001 	strb.w	r6, [r9, #1]
 801fdae:	9e04      	ldr	r6, [sp, #16]
 801fdb0:	fb15 f506 	smulbb	r5, r5, r6
 801fdb4:	fb0e 5504 	mla	r5, lr, r4, r5
 801fdb8:	fb95 f5fc 	sdiv	r5, r5, ip
 801fdbc:	f889 5002 	strb.w	r5, [r9, #2]
 801fdc0:	e7bd      	b.n	801fd3e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fdc2:	2e00      	cmp	r6, #0
 801fdc4:	f43f af38 	beq.w	801fc38 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801fdc8:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801fdcc:	fb15 f506 	smulbb	r5, r5, r6
 801fdd0:	fb16 f707 	smulbb	r7, r6, r7
 801fdd4:	fb06 fc0a 	mul.w	ip, r6, sl
 801fdd8:	f10c 0e01 	add.w	lr, ip, #1
 801fddc:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fde0:	eb06 0c0a 	add.w	ip, r6, sl
 801fde4:	fb16 f608 	smulbb	r6, r6, r8
 801fde8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fdec:	ebac 0c0e 	sub.w	ip, ip, lr
 801fdf0:	ebaa 0e0e 	sub.w	lr, sl, lr
 801fdf4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801fdf8:	fa5f fc8c 	uxtb.w	ip, ip
 801fdfc:	fb0e 550a 	mla	r5, lr, sl, r5
 801fe00:	f804 cc01 	strb.w	ip, [r4, #-1]
 801fe04:	fb95 f5fc 	sdiv	r5, r5, ip
 801fe08:	f804 5c04 	strb.w	r5, [r4, #-4]
 801fe0c:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801fe10:	fb0e 7705 	mla	r7, lr, r5, r7
 801fe14:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801fe18:	fb0e 6605 	mla	r6, lr, r5, r6
 801fe1c:	fb97 f7fc 	sdiv	r7, r7, ip
 801fe20:	fb96 f6fc 	sdiv	r6, r6, ip
 801fe24:	f804 7c03 	strb.w	r7, [r4, #-3]
 801fe28:	f804 6c02 	strb.w	r6, [r4, #-2]
 801fe2c:	e704      	b.n	801fc38 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801fe2e:	b007      	add	sp, #28
 801fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe34 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe38:	b085      	sub	sp, #20
 801fe3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fe3e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fe40:	9101      	str	r1, [sp, #4]
 801fe42:	6868      	ldr	r0, [r5, #4]
 801fe44:	9203      	str	r2, [sp, #12]
 801fe46:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801fe4a:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801fe4e:	fb00 1404 	mla	r4, r0, r4, r1
 801fe52:	6829      	ldr	r1, [r5, #0]
 801fe54:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fe58:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801fe5a:	6809      	ldr	r1, [r1, #0]
 801fe5c:	9102      	str	r1, [sp, #8]
 801fe5e:	9901      	ldr	r1, [sp, #4]
 801fe60:	2900      	cmp	r1, #0
 801fe62:	dc03      	bgt.n	801fe6c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fe64:	9903      	ldr	r1, [sp, #12]
 801fe66:	2900      	cmp	r1, #0
 801fe68:	f340 8150 	ble.w	802010c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fe6c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801fe6e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801fe72:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801fe76:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fe78:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801fe7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fe7e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	dd0e      	ble.n	801fea4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fe86:	1405      	asrs	r5, r0, #16
 801fe88:	d405      	bmi.n	801fe96 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fe8a:	4565      	cmp	r5, ip
 801fe8c:	da03      	bge.n	801fe96 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fe8e:	140d      	asrs	r5, r1, #16
 801fe90:	d401      	bmi.n	801fe96 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fe92:	42bd      	cmp	r5, r7
 801fe94:	db07      	blt.n	801fea6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe96:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fe98:	3b01      	subs	r3, #1
 801fe9a:	3404      	adds	r4, #4
 801fe9c:	4428      	add	r0, r5
 801fe9e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fea0:	4429      	add	r1, r5
 801fea2:	e7ee      	b.n	801fe82 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fea4:	d04c      	beq.n	801ff40 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fea6:	1e5d      	subs	r5, r3, #1
 801fea8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801feaa:	fb06 0605 	mla	r6, r6, r5, r0
 801feae:	1436      	asrs	r6, r6, #16
 801feb0:	d43c      	bmi.n	801ff2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801feb2:	4566      	cmp	r6, ip
 801feb4:	da3a      	bge.n	801ff2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801feb6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801feb8:	fb06 1505 	mla	r5, r6, r5, r1
 801febc:	142d      	asrs	r5, r5, #16
 801febe:	d435      	bmi.n	801ff2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fec0:	42bd      	cmp	r5, r7
 801fec2:	da33      	bge.n	801ff2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fec4:	1d25      	adds	r5, r4, #4
 801fec6:	4699      	mov	r9, r3
 801fec8:	f1b9 0f00 	cmp.w	r9, #0
 801fecc:	dd34      	ble.n	801ff38 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fece:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801fed0:	140e      	asrs	r6, r1, #16
 801fed2:	2aff      	cmp	r2, #255	@ 0xff
 801fed4:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801fed8:	ea4f 4720 	mov.w	r7, r0, asr #16
 801fedc:	fb0c 7606 	mla	r6, ip, r6, r7
 801fee0:	9f02      	ldr	r7, [sp, #8]
 801fee2:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801fee6:	ea4f 2726 	mov.w	r7, r6, asr #8
 801feea:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801feee:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801fef2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fef6:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801fefa:	b2f6      	uxtb	r6, r6
 801fefc:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ff00:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801ff04:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ff08:	f040 80ca 	bne.w	80200a0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801ff0c:	f805 6c04 	strb.w	r6, [r5, #-4]
 801ff10:	f805 cc03 	strb.w	ip, [r5, #-3]
 801ff14:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ff18:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ff1c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ff1e:	3504      	adds	r5, #4
 801ff20:	f109 39ff 	add.w	r9, r9, #4294967295
 801ff24:	4430      	add	r0, r6
 801ff26:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ff28:	4431      	add	r1, r6
 801ff2a:	e7cd      	b.n	801fec8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ff2c:	f04f 0c00 	mov.w	ip, #0
 801ff30:	eb03 050c 	add.w	r5, r3, ip
 801ff34:	2d00      	cmp	r5, #0
 801ff36:	dc3f      	bgt.n	801ffb8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801ff38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff3c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ff40:	9b01      	ldr	r3, [sp, #4]
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	f340 80e2 	ble.w	802010c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ff48:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff52:	eeb0 6a62 	vmov.f32	s12, s5
 801ff56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff62:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ff66:	eeb0 6a43 	vmov.f32	s12, s6
 801ff6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff6e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ff72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff76:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff8a:	ee12 1a90 	vmov	r1, s5
 801ff8e:	eef0 2a47 	vmov.f32	s5, s14
 801ff92:	fb91 f3f3 	sdiv	r3, r1, r3
 801ff96:	ee13 1a10 	vmov	r1, s6
 801ff9a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ff9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff9e:	eeb0 3a67 	vmov.f32	s6, s15
 801ffa2:	fb91 f3f3 	sdiv	r3, r1, r3
 801ffa6:	9312      	str	r3, [sp, #72]	@ 0x48
 801ffa8:	9b01      	ldr	r3, [sp, #4]
 801ffaa:	9903      	ldr	r1, [sp, #12]
 801ffac:	3b01      	subs	r3, #1
 801ffae:	9301      	str	r3, [sp, #4]
 801ffb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ffb2:	bf08      	it	eq
 801ffb4:	460b      	moveq	r3, r1
 801ffb6:	e752      	b.n	801fe5e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ffb8:	1407      	asrs	r7, r0, #16
 801ffba:	d42f      	bmi.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffbc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801ffbe:	68ae      	ldr	r6, [r5, #8]
 801ffc0:	42be      	cmp	r6, r7
 801ffc2:	dd2b      	ble.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffc4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ffc8:	d428      	bmi.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffca:	68ed      	ldr	r5, [r5, #12]
 801ffcc:	4575      	cmp	r5, lr
 801ffce:	dd25      	ble.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffd0:	b236      	sxth	r6, r6
 801ffd2:	9d02      	ldr	r5, [sp, #8]
 801ffd4:	2aff      	cmp	r2, #255	@ 0xff
 801ffd6:	fb0e 7606 	mla	r6, lr, r6, r7
 801ffda:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801ffde:	ea4f 2625 	mov.w	r6, r5, asr #8
 801ffe2:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801ffe6:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801ffea:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ffee:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fff2:	b2ed      	uxtb	r5, r5
 801fff4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fff8:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fffc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020000:	d113      	bne.n	802002a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020002:	f06f 0e03 	mvn.w	lr, #3
 8020006:	fb0e fe0c 	mul.w	lr, lr, ip
 802000a:	f804 500e 	strb.w	r5, [r4, lr]
 802000e:	44a6      	add	lr, r4
 8020010:	f88e 7001 	strb.w	r7, [lr, #1]
 8020014:	f88e 6002 	strb.w	r6, [lr, #2]
 8020018:	f88e 2003 	strb.w	r2, [lr, #3]
 802001c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802001e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020022:	4428      	add	r0, r5
 8020024:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020026:	4429      	add	r1, r5
 8020028:	e782      	b.n	801ff30 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802002a:	2a00      	cmp	r2, #0
 802002c:	d0f6      	beq.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802002e:	fb15 f502 	smulbb	r5, r5, r2
 8020032:	f06f 0e03 	mvn.w	lr, #3
 8020036:	fb12 f707 	smulbb	r7, r2, r7
 802003a:	fb12 f606 	smulbb	r6, r2, r6
 802003e:	fb0e fa0c 	mul.w	sl, lr, ip
 8020042:	eb04 090a 	add.w	r9, r4, sl
 8020046:	f899 b003 	ldrb.w	fp, [r9, #3]
 802004a:	fb02 fe0b 	mul.w	lr, r2, fp
 802004e:	f10e 0801 	add.w	r8, lr, #1
 8020052:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 8020056:	eb02 0e0b 	add.w	lr, r2, fp
 802005a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802005e:	ebae 0e08 	sub.w	lr, lr, r8
 8020062:	ebab 0808 	sub.w	r8, fp, r8
 8020066:	f814 b00a 	ldrb.w	fp, [r4, sl]
 802006a:	fa5f fe8e 	uxtb.w	lr, lr
 802006e:	fb08 550b 	mla	r5, r8, fp, r5
 8020072:	fb95 f5fe 	sdiv	r5, r5, lr
 8020076:	f804 500a 	strb.w	r5, [r4, sl]
 802007a:	f899 5001 	ldrb.w	r5, [r9, #1]
 802007e:	f889 e003 	strb.w	lr, [r9, #3]
 8020082:	fb08 7705 	mla	r7, r8, r5, r7
 8020086:	f899 5002 	ldrb.w	r5, [r9, #2]
 802008a:	fb08 6605 	mla	r6, r8, r5, r6
 802008e:	fb97 f7fe 	sdiv	r7, r7, lr
 8020092:	fb96 f6fe 	sdiv	r6, r6, lr
 8020096:	f889 7001 	strb.w	r7, [r9, #1]
 802009a:	f889 6002 	strb.w	r6, [r9, #2]
 802009e:	e7bd      	b.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80200a0:	2a00      	cmp	r2, #0
 80200a2:	f43f af3b 	beq.w	801ff1c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 80200a6:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 80200aa:	fb16 f602 	smulbb	r6, r6, r2
 80200ae:	fb12 fc0c 	smulbb	ip, r2, ip
 80200b2:	fb12 f707 	smulbb	r7, r2, r7
 80200b6:	fb02 fe0a 	mul.w	lr, r2, sl
 80200ba:	f10e 0801 	add.w	r8, lr, #1
 80200be:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 80200c2:	eb02 0e0a 	add.w	lr, r2, sl
 80200c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80200ca:	ebae 0e08 	sub.w	lr, lr, r8
 80200ce:	ebaa 0808 	sub.w	r8, sl, r8
 80200d2:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 80200d6:	fa5f fe8e 	uxtb.w	lr, lr
 80200da:	fb08 660a 	mla	r6, r8, sl, r6
 80200de:	f805 ec01 	strb.w	lr, [r5, #-1]
 80200e2:	fb96 f6fe 	sdiv	r6, r6, lr
 80200e6:	f805 6c04 	strb.w	r6, [r5, #-4]
 80200ea:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 80200ee:	fb08 cc06 	mla	ip, r8, r6, ip
 80200f2:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 80200f6:	fb08 7706 	mla	r7, r8, r6, r7
 80200fa:	fb9c fcfe 	sdiv	ip, ip, lr
 80200fe:	fb97 f7fe 	sdiv	r7, r7, lr
 8020102:	f805 cc03 	strb.w	ip, [r5, #-3]
 8020106:	f805 7c02 	strb.w	r7, [r5, #-2]
 802010a:	e707      	b.n	801ff1c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 802010c:	b005      	add	sp, #20
 802010e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020112 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020116:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802011c:	9201      	str	r2, [sp, #4]
 802011e:	6860      	ldr	r0, [r4, #4]
 8020120:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8020122:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8020126:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 802012a:	fb00 2505 	mla	r5, r0, r5, r2
 802012e:	6822      	ldr	r2, [r4, #0]
 8020130:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8020134:	683a      	ldr	r2, [r7, #0]
 8020136:	9200      	str	r2, [sp, #0]
 8020138:	2900      	cmp	r1, #0
 802013a:	dc03      	bgt.n	8020144 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802013c:	9a01      	ldr	r2, [sp, #4]
 802013e:	2a00      	cmp	r2, #0
 8020140:	f340 80be 	ble.w	80202c0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020144:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020146:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 802014a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802014e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020150:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 8020154:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020158:	2b00      	cmp	r3, #0
 802015a:	dd0c      	ble.n	8020176 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802015c:	1404      	asrs	r4, r0, #16
 802015e:	d405      	bmi.n	802016c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020160:	454c      	cmp	r4, r9
 8020162:	da03      	bge.n	802016c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020164:	1414      	asrs	r4, r2, #16
 8020166:	d401      	bmi.n	802016c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020168:	4564      	cmp	r4, ip
 802016a:	db05      	blt.n	8020178 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802016c:	4440      	add	r0, r8
 802016e:	4472      	add	r2, lr
 8020170:	3b01      	subs	r3, #1
 8020172:	3504      	adds	r5, #4
 8020174:	e7f0      	b.n	8020158 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020176:	d00e      	beq.n	8020196 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020178:	1e5c      	subs	r4, r3, #1
 802017a:	fb08 0604 	mla	r6, r8, r4, r0
 802017e:	1436      	asrs	r6, r6, #16
 8020180:	d53e      	bpl.n	8020200 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8020182:	4699      	mov	r9, r3
 8020184:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 8020188:	f1b9 0f00 	cmp.w	r9, #0
 802018c:	dc68      	bgt.n	8020260 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802018e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020192:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8020196:	2900      	cmp	r1, #0
 8020198:	f340 8092 	ble.w	80202c0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802019c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201a6:	3901      	subs	r1, #1
 80201a8:	eeb0 6a62 	vmov.f32	s12, s5
 80201ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80201bc:	eeb0 6a43 	vmov.f32	s12, s6
 80201c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80201c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201e0:	ee12 2a90 	vmov	r2, s5
 80201e4:	eef0 2a47 	vmov.f32	s5, s14
 80201e8:	fb92 f8f3 	sdiv	r8, r2, r3
 80201ec:	ee13 2a10 	vmov	r2, s6
 80201f0:	eeb0 3a67 	vmov.f32	s6, s15
 80201f4:	fb92 fef3 	sdiv	lr, r2, r3
 80201f8:	9a01      	ldr	r2, [sp, #4]
 80201fa:	bf08      	it	eq
 80201fc:	4613      	moveq	r3, r2
 80201fe:	e79b      	b.n	8020138 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 8020200:	454e      	cmp	r6, r9
 8020202:	dabe      	bge.n	8020182 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020204:	fb0e 2404 	mla	r4, lr, r4, r2
 8020208:	1424      	asrs	r4, r4, #16
 802020a:	d4ba      	bmi.n	8020182 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802020c:	4564      	cmp	r4, ip
 802020e:	dab8      	bge.n	8020182 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020210:	4699      	mov	r9, r3
 8020212:	46aa      	mov	sl, r5
 8020214:	f1b9 0f00 	cmp.w	r9, #0
 8020218:	ddb9      	ble.n	802018e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802021a:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 802021e:	1406      	asrs	r6, r0, #16
 8020220:	1414      	asrs	r4, r2, #16
 8020222:	4440      	add	r0, r8
 8020224:	4472      	add	r2, lr
 8020226:	f109 39ff 	add.w	r9, r9, #4294967295
 802022a:	fb0c 6404 	mla	r4, ip, r4, r6
 802022e:	9e00      	ldr	r6, [sp, #0]
 8020230:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 8020234:	10f4      	asrs	r4, r6, #3
 8020236:	ea4f 2c26 	mov.w	ip, r6, asr #8
 802023a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802023e:	00f6      	lsls	r6, r6, #3
 8020240:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020244:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8020248:	b2f6      	uxtb	r6, r6
 802024a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802024e:	0224      	lsls	r4, r4, #8
 8020250:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020254:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8020258:	4334      	orrs	r4, r6
 802025a:	f84a 4b04 	str.w	r4, [sl], #4
 802025e:	e7d9      	b.n	8020214 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 8020260:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8020264:	d427      	bmi.n	80202b6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020266:	68be      	ldr	r6, [r7, #8]
 8020268:	4566      	cmp	r6, ip
 802026a:	dd24      	ble.n	80202b6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802026c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8020270:	d421      	bmi.n	80202b6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020272:	68fc      	ldr	r4, [r7, #12]
 8020274:	455c      	cmp	r4, fp
 8020276:	dd1e      	ble.n	80202b6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020278:	b236      	sxth	r6, r6
 802027a:	9c00      	ldr	r4, [sp, #0]
 802027c:	fb0b c606 	mla	r6, fp, r6, ip
 8020280:	f06f 0b03 	mvn.w	fp, #3
 8020284:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 8020288:	fb0b fb09 	mul.w	fp, fp, r9
 802028c:	10f4      	asrs	r4, r6, #3
 802028e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8020292:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020296:	00f6      	lsls	r6, r6, #3
 8020298:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802029c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80202a0:	b2f6      	uxtb	r6, r6
 80202a2:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80202a6:	0224      	lsls	r4, r4, #8
 80202a8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80202ac:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80202b0:	4334      	orrs	r4, r6
 80202b2:	f84a 400b 	str.w	r4, [sl, fp]
 80202b6:	4440      	add	r0, r8
 80202b8:	4472      	add	r2, lr
 80202ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80202be:	e763      	b.n	8020188 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80202c0:	b003      	add	sp, #12
 80202c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080202c6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202ca:	b085      	sub	sp, #20
 80202cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80202d0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80202d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80202d6:	6868      	ldr	r0, [r5, #4]
 80202d8:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80202dc:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 80202e0:	fb00 1404 	mla	r4, r0, r4, r1
 80202e4:	6829      	ldr	r1, [r5, #0]
 80202e6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80202ea:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80202ec:	6809      	ldr	r1, [r1, #0]
 80202ee:	9101      	str	r1, [sp, #4]
 80202f0:	9902      	ldr	r1, [sp, #8]
 80202f2:	2900      	cmp	r1, #0
 80202f4:	dc03      	bgt.n	80202fe <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80202f6:	9903      	ldr	r1, [sp, #12]
 80202f8:	2900      	cmp	r1, #0
 80202fa:	f340 8137 	ble.w	802056c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80202fe:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8020300:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8020304:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 8020308:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802030a:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 802030e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020310:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8020314:	2b00      	cmp	r3, #0
 8020316:	dd0e      	ble.n	8020336 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020318:	1405      	asrs	r5, r0, #16
 802031a:	d405      	bmi.n	8020328 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802031c:	4565      	cmp	r5, ip
 802031e:	da03      	bge.n	8020328 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020320:	140d      	asrs	r5, r1, #16
 8020322:	d401      	bmi.n	8020328 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020324:	42bd      	cmp	r5, r7
 8020326:	db07      	blt.n	8020338 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020328:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802032a:	3b01      	subs	r3, #1
 802032c:	3404      	adds	r4, #4
 802032e:	4428      	add	r0, r5
 8020330:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020332:	4429      	add	r1, r5
 8020334:	e7ee      	b.n	8020314 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020336:	d041      	beq.n	80203bc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 8020338:	1e5d      	subs	r5, r3, #1
 802033a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802033c:	fb06 0605 	mla	r6, r6, r5, r0
 8020340:	1436      	asrs	r6, r6, #16
 8020342:	d433      	bmi.n	80203ac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020344:	4566      	cmp	r6, ip
 8020346:	da31      	bge.n	80203ac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020348:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 802034a:	fb06 1505 	mla	r5, r6, r5, r1
 802034e:	142d      	asrs	r5, r5, #16
 8020350:	d42c      	bmi.n	80203ac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020352:	42bd      	cmp	r5, r7
 8020354:	da2a      	bge.n	80203ac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020356:	1d25      	adds	r5, r4, #4
 8020358:	469a      	mov	sl, r3
 802035a:	f1ba 0f00 	cmp.w	sl, #0
 802035e:	dd29      	ble.n	80203b4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8020360:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8020362:	140e      	asrs	r6, r1, #16
 8020364:	2aff      	cmp	r2, #255	@ 0xff
 8020366:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 802036a:	ea4f 4720 	mov.w	r7, r0, asr #16
 802036e:	fb0c 7606 	mla	r6, ip, r6, r7
 8020372:	9f01      	ldr	r7, [sp, #4]
 8020374:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020378:	4437      	add	r7, r6
 802037a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802037e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020382:	9f01      	ldr	r7, [sp, #4]
 8020384:	f817 9006 	ldrb.w	r9, [r7, r6]
 8020388:	f040 80bb 	bne.w	8020502 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 802038c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8020390:	f805 8c03 	strb.w	r8, [r5, #-3]
 8020394:	f805 ec02 	strb.w	lr, [r5, #-2]
 8020398:	f805 2c01 	strb.w	r2, [r5, #-1]
 802039c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802039e:	3504      	adds	r5, #4
 80203a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80203a4:	4430      	add	r0, r6
 80203a6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80203a8:	4431      	add	r1, r6
 80203aa:	e7d6      	b.n	802035a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80203ac:	2500      	movs	r5, #0
 80203ae:	195e      	adds	r6, r3, r5
 80203b0:	2e00      	cmp	r6, #0
 80203b2:	dc3f      	bgt.n	8020434 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80203b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80203bc:	9b02      	ldr	r3, [sp, #8]
 80203be:	2b00      	cmp	r3, #0
 80203c0:	f340 80d4 	ble.w	802056c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80203c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203ce:	eeb0 6a62 	vmov.f32	s12, s5
 80203d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203de:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80203e2:	eeb0 6a43 	vmov.f32	s12, s6
 80203e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203ea:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80203ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020402:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020406:	ee12 1a90 	vmov	r1, s5
 802040a:	eef0 2a47 	vmov.f32	s5, s14
 802040e:	fb91 f3f3 	sdiv	r3, r1, r3
 8020412:	ee13 1a10 	vmov	r1, s6
 8020416:	9311      	str	r3, [sp, #68]	@ 0x44
 8020418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802041a:	eeb0 3a67 	vmov.f32	s6, s15
 802041e:	fb91 f3f3 	sdiv	r3, r1, r3
 8020422:	9312      	str	r3, [sp, #72]	@ 0x48
 8020424:	9b02      	ldr	r3, [sp, #8]
 8020426:	9903      	ldr	r1, [sp, #12]
 8020428:	3b01      	subs	r3, #1
 802042a:	9302      	str	r3, [sp, #8]
 802042c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802042e:	bf08      	it	eq
 8020430:	460b      	moveq	r3, r1
 8020432:	e75d      	b.n	80202f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020434:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8020438:	d424      	bmi.n	8020484 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802043a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802043c:	68b7      	ldr	r7, [r6, #8]
 802043e:	4567      	cmp	r7, ip
 8020440:	dd20      	ble.n	8020484 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020442:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8020446:	d41d      	bmi.n	8020484 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020448:	68f6      	ldr	r6, [r6, #12]
 802044a:	4576      	cmp	r6, lr
 802044c:	dd1a      	ble.n	8020484 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802044e:	b23f      	sxth	r7, r7
 8020450:	9e01      	ldr	r6, [sp, #4]
 8020452:	2aff      	cmp	r2, #255	@ 0xff
 8020454:	fb0e cc07 	mla	ip, lr, r7, ip
 8020458:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802045c:	4466      	add	r6, ip
 802045e:	f896 8002 	ldrb.w	r8, [r6, #2]
 8020462:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020466:	9e01      	ldr	r6, [sp, #4]
 8020468:	f816 a00c 	ldrb.w	sl, [r6, ip]
 802046c:	d110      	bne.n	8020490 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802046e:	f06f 0603 	mvn.w	r6, #3
 8020472:	436e      	muls	r6, r5
 8020474:	f804 a006 	strb.w	sl, [r4, r6]
 8020478:	4426      	add	r6, r4
 802047a:	f886 9001 	strb.w	r9, [r6, #1]
 802047e:	f886 8002 	strb.w	r8, [r6, #2]
 8020482:	70f2      	strb	r2, [r6, #3]
 8020484:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020486:	3d01      	subs	r5, #1
 8020488:	4430      	add	r0, r6
 802048a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 802048c:	4431      	add	r1, r6
 802048e:	e78e      	b.n	80203ae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 8020490:	2a00      	cmp	r2, #0
 8020492:	d0f7      	beq.n	8020484 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020494:	fb1a fa02 	smulbb	sl, sl, r2
 8020498:	f06f 0603 	mvn.w	r6, #3
 802049c:	fb12 f909 	smulbb	r9, r2, r9
 80204a0:	fb12 f808 	smulbb	r8, r2, r8
 80204a4:	fb06 fb05 	mul.w	fp, r6, r5
 80204a8:	eb04 0c0b 	add.w	ip, r4, fp
 80204ac:	f89c 7003 	ldrb.w	r7, [ip, #3]
 80204b0:	fb02 f607 	mul.w	r6, r2, r7
 80204b4:	f106 0e01 	add.w	lr, r6, #1
 80204b8:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 80204bc:	19d6      	adds	r6, r2, r7
 80204be:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80204c2:	eba7 070e 	sub.w	r7, r7, lr
 80204c6:	eba6 060e 	sub.w	r6, r6, lr
 80204ca:	f814 e00b 	ldrb.w	lr, [r4, fp]
 80204ce:	b2f6      	uxtb	r6, r6
 80204d0:	fb07 aa0e 	mla	sl, r7, lr, sl
 80204d4:	fb9a faf6 	sdiv	sl, sl, r6
 80204d8:	f804 a00b 	strb.w	sl, [r4, fp]
 80204dc:	f89c e001 	ldrb.w	lr, [ip, #1]
 80204e0:	f88c 6003 	strb.w	r6, [ip, #3]
 80204e4:	fb07 990e 	mla	r9, r7, lr, r9
 80204e8:	f89c e002 	ldrb.w	lr, [ip, #2]
 80204ec:	fb07 880e 	mla	r8, r7, lr, r8
 80204f0:	fb99 f9f6 	sdiv	r9, r9, r6
 80204f4:	fb98 f8f6 	sdiv	r8, r8, r6
 80204f8:	f88c 9001 	strb.w	r9, [ip, #1]
 80204fc:	f88c 8002 	strb.w	r8, [ip, #2]
 8020500:	e7c0      	b.n	8020484 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020502:	2a00      	cmp	r2, #0
 8020504:	f43f af4a 	beq.w	802039c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8020508:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 802050c:	fb19 f902 	smulbb	r9, r9, r2
 8020510:	fb12 f808 	smulbb	r8, r2, r8
 8020514:	fb02 fc0b 	mul.w	ip, r2, fp
 8020518:	eb02 060b 	add.w	r6, r2, fp
 802051c:	fb12 fe0e 	smulbb	lr, r2, lr
 8020520:	f10c 0701 	add.w	r7, ip, #1
 8020524:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020528:	ea4f 2c27 	mov.w	ip, r7, asr #8
 802052c:	ebab 070c 	sub.w	r7, fp, ip
 8020530:	eba6 060c 	sub.w	r6, r6, ip
 8020534:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8020538:	b2f6      	uxtb	r6, r6
 802053a:	fb07 990c 	mla	r9, r7, ip, r9
 802053e:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8020542:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020546:	fb07 880c 	mla	r8, r7, ip, r8
 802054a:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 802054e:	fb07 ee0c 	mla	lr, r7, ip, lr
 8020552:	fb99 f9f6 	sdiv	r9, r9, r6
 8020556:	fb98 f8f6 	sdiv	r8, r8, r6
 802055a:	fb9e fef6 	sdiv	lr, lr, r6
 802055e:	f805 9c04 	strb.w	r9, [r5, #-4]
 8020562:	f805 8c03 	strb.w	r8, [r5, #-3]
 8020566:	f805 ec02 	strb.w	lr, [r5, #-2]
 802056a:	e717      	b.n	802039c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 802056c:	b005      	add	sp, #20
 802056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020572 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020576:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802057c:	9201      	str	r2, [sp, #4]
 802057e:	6868      	ldr	r0, [r5, #4]
 8020580:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8020582:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8020586:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 802058a:	fb00 2404 	mla	r4, r0, r4, r2
 802058e:	682a      	ldr	r2, [r5, #0]
 8020590:	f8d7 8000 	ldr.w	r8, [r7]
 8020594:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8020598:	2900      	cmp	r1, #0
 802059a:	dc03      	bgt.n	80205a4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802059c:	9a01      	ldr	r2, [sp, #4]
 802059e:	2a00      	cmp	r2, #0
 80205a0:	f340 80af 	ble.w	8020702 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80205a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80205a6:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80205aa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80205ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80205b0:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80205b4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	dd0c      	ble.n	80205d6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80205bc:	1405      	asrs	r5, r0, #16
 80205be:	d405      	bmi.n	80205cc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80205c0:	4555      	cmp	r5, sl
 80205c2:	da03      	bge.n	80205cc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80205c4:	1415      	asrs	r5, r2, #16
 80205c6:	d401      	bmi.n	80205cc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80205c8:	454d      	cmp	r5, r9
 80205ca:	db05      	blt.n	80205d8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80205cc:	4470      	add	r0, lr
 80205ce:	4462      	add	r2, ip
 80205d0:	3b01      	subs	r3, #1
 80205d2:	3404      	adds	r4, #4
 80205d4:	e7f0      	b.n	80205b8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80205d6:	d037      	beq.n	8020648 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 80205d8:	1e5d      	subs	r5, r3, #1
 80205da:	fb0e 0605 	mla	r6, lr, r5, r0
 80205de:	1436      	asrs	r6, r6, #16
 80205e0:	d42a      	bmi.n	8020638 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80205e2:	4556      	cmp	r6, sl
 80205e4:	da28      	bge.n	8020638 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80205e6:	fb0c 2505 	mla	r5, ip, r5, r2
 80205ea:	142d      	asrs	r5, r5, #16
 80205ec:	d424      	bmi.n	8020638 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80205ee:	454d      	cmp	r5, r9
 80205f0:	da22      	bge.n	8020638 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80205f2:	1d26      	adds	r6, r4, #4
 80205f4:	4699      	mov	r9, r3
 80205f6:	f1b9 0f00 	cmp.w	r9, #0
 80205fa:	f106 0604 	add.w	r6, r6, #4
 80205fe:	dd1f      	ble.n	8020640 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 8020600:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8020604:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020608:	1415      	asrs	r5, r2, #16
 802060a:	4470      	add	r0, lr
 802060c:	4462      	add	r2, ip
 802060e:	f109 39ff 	add.w	r9, r9, #4294967295
 8020612:	fb0b a505 	mla	r5, fp, r5, sl
 8020616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802061a:	eb08 0a05 	add.w	sl, r8, r5
 802061e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8020622:	f806 5c08 	strb.w	r5, [r6, #-8]
 8020626:	f89a 5001 	ldrb.w	r5, [sl, #1]
 802062a:	f806 5c07 	strb.w	r5, [r6, #-7]
 802062e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8020632:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020636:	e7de      	b.n	80205f6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020638:	2600      	movs	r6, #0
 802063a:	199d      	adds	r5, r3, r6
 802063c:	2d00      	cmp	r5, #0
 802063e:	dc37      	bgt.n	80206b0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020640:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020644:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020648:	2900      	cmp	r1, #0
 802064a:	dd5a      	ble.n	8020702 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802064c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020652:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020656:	3901      	subs	r1, #1
 8020658:	eeb0 6a62 	vmov.f32	s12, s5
 802065c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020660:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020664:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020668:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 802066c:	eeb0 6a43 	vmov.f32	s12, s6
 8020670:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020674:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020678:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802067c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020680:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020684:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020688:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802068c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020690:	ee12 2a90 	vmov	r2, s5
 8020694:	eef0 2a47 	vmov.f32	s5, s14
 8020698:	fb92 fef3 	sdiv	lr, r2, r3
 802069c:	ee13 2a10 	vmov	r2, s6
 80206a0:	eeb0 3a67 	vmov.f32	s6, s15
 80206a4:	fb92 fcf3 	sdiv	ip, r2, r3
 80206a8:	9a01      	ldr	r2, [sp, #4]
 80206aa:	bf08      	it	eq
 80206ac:	4613      	moveq	r3, r2
 80206ae:	e773      	b.n	8020598 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 80206b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80206b4:	d421      	bmi.n	80206fa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80206b6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80206ba:	45cb      	cmp	fp, r9
 80206bc:	dd1d      	ble.n	80206fa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80206be:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80206c2:	d41a      	bmi.n	80206fa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80206c4:	68fd      	ldr	r5, [r7, #12]
 80206c6:	4555      	cmp	r5, sl
 80206c8:	dd17      	ble.n	80206fa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80206ca:	fa0f f58b 	sxth.w	r5, fp
 80206ce:	fb0a 9505 	mla	r5, sl, r5, r9
 80206d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80206d6:	f818 9005 	ldrb.w	r9, [r8, r5]
 80206da:	eb08 0b05 	add.w	fp, r8, r5
 80206de:	f06f 0503 	mvn.w	r5, #3
 80206e2:	4375      	muls	r5, r6
 80206e4:	f804 9005 	strb.w	r9, [r4, r5]
 80206e8:	4425      	add	r5, r4
 80206ea:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80206ee:	f885 9001 	strb.w	r9, [r5, #1]
 80206f2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80206f6:	f885 9002 	strb.w	r9, [r5, #2]
 80206fa:	4470      	add	r0, lr
 80206fc:	4462      	add	r2, ip
 80206fe:	3e01      	subs	r6, #1
 8020700:	e79b      	b.n	802063a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020702:	b003      	add	sp, #12
 8020704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020708 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802070c:	b087      	sub	sp, #28
 802070e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020712:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020714:	9203      	str	r2, [sp, #12]
 8020716:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802071a:	9100      	str	r1, [sp, #0]
 802071c:	9204      	str	r2, [sp, #16]
 802071e:	6861      	ldr	r1, [r4, #4]
 8020720:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8020724:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8020728:	fb01 2000 	mla	r0, r1, r0, r2
 802072c:	6822      	ldr	r2, [r4, #0]
 802072e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8020732:	f8db 2000 	ldr.w	r2, [fp]
 8020736:	9201      	str	r2, [sp, #4]
 8020738:	9a00      	ldr	r2, [sp, #0]
 802073a:	2a00      	cmp	r2, #0
 802073c:	dc03      	bgt.n	8020746 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802073e:	9a03      	ldr	r2, [sp, #12]
 8020740:	2a00      	cmp	r2, #0
 8020742:	f340 8147 	ble.w	80209d4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020746:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020748:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802074c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020750:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020752:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020756:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 802075a:	2b00      	cmp	r3, #0
 802075c:	dd0e      	ble.n	802077c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802075e:	140c      	asrs	r4, r1, #16
 8020760:	d405      	bmi.n	802076e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020762:	42bc      	cmp	r4, r7
 8020764:	da03      	bge.n	802076e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020766:	1414      	asrs	r4, r2, #16
 8020768:	d401      	bmi.n	802076e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802076a:	42b4      	cmp	r4, r6
 802076c:	db07      	blt.n	802077e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802076e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020770:	3b01      	subs	r3, #1
 8020772:	3004      	adds	r0, #4
 8020774:	4421      	add	r1, r4
 8020776:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020778:	4422      	add	r2, r4
 802077a:	e7ee      	b.n	802075a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802077c:	d048      	beq.n	8020810 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 802077e:	1e5c      	subs	r4, r3, #1
 8020780:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020782:	fb05 1504 	mla	r5, r5, r4, r1
 8020786:	142d      	asrs	r5, r5, #16
 8020788:	d438      	bmi.n	80207fc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 802078a:	42bd      	cmp	r5, r7
 802078c:	da36      	bge.n	80207fc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 802078e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020790:	fb05 2404 	mla	r4, r5, r4, r2
 8020794:	1424      	asrs	r4, r4, #16
 8020796:	d431      	bmi.n	80207fc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020798:	42b4      	cmp	r4, r6
 802079a:	da2f      	bge.n	80207fc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 802079c:	469e      	mov	lr, r3
 802079e:	4604      	mov	r4, r0
 80207a0:	f1be 0f00 	cmp.w	lr, #0
 80207a4:	dd30      	ble.n	8020808 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80207a6:	140e      	asrs	r6, r1, #16
 80207a8:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80207ac:	1415      	asrs	r5, r2, #16
 80207ae:	fb07 6505 	mla	r5, r7, r5, r6
 80207b2:	9e01      	ldr	r6, [sp, #4]
 80207b4:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 80207b8:	0e35      	lsrs	r5, r6, #24
 80207ba:	d017      	beq.n	80207ec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 80207bc:	9f04      	ldr	r7, [sp, #16]
 80207be:	f3c6 4907 	ubfx	r9, r6, #16, #8
 80207c2:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80207c6:	437d      	muls	r5, r7
 80207c8:	fa5f f88c 	uxtb.w	r8, ip
 80207cc:	1c6f      	adds	r7, r5, #1
 80207ce:	eb07 2525 	add.w	r5, r7, r5, asr #8
 80207d2:	fa5f f789 	uxtb.w	r7, r9
 80207d6:	122d      	asrs	r5, r5, #8
 80207d8:	9702      	str	r7, [sp, #8]
 80207da:	2dff      	cmp	r5, #255	@ 0xff
 80207dc:	f040 80c7 	bne.w	802096e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80207e0:	7026      	strb	r6, [r4, #0]
 80207e2:	f884 c001 	strb.w	ip, [r4, #1]
 80207e6:	f884 9002 	strb.w	r9, [r4, #2]
 80207ea:	70e5      	strb	r5, [r4, #3]
 80207ec:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80207ee:	3404      	adds	r4, #4
 80207f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80207f4:	4429      	add	r1, r5
 80207f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80207f8:	442a      	add	r2, r5
 80207fa:	e7d1      	b.n	80207a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80207fc:	f04f 0c00 	mov.w	ip, #0
 8020800:	eb03 040c 	add.w	r4, r3, ip
 8020804:	2c00      	cmp	r4, #0
 8020806:	dc3f      	bgt.n	8020888 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 8020808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802080c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020810:	9b00      	ldr	r3, [sp, #0]
 8020812:	2b00      	cmp	r3, #0
 8020814:	f340 80de 	ble.w	80209d4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020818:	ee30 0a04 	vadd.f32	s0, s0, s8
 802081c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802081e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020822:	eeb0 6a62 	vmov.f32	s12, s5
 8020826:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802082a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802082e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020832:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020836:	eeb0 6a43 	vmov.f32	s12, s6
 802083a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802083e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020842:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020846:	ee61 7a27 	vmul.f32	s15, s2, s15
 802084a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802084e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020852:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020856:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802085a:	ee12 2a90 	vmov	r2, s5
 802085e:	eef0 2a47 	vmov.f32	s5, s14
 8020862:	fb92 f3f3 	sdiv	r3, r2, r3
 8020866:	ee13 2a10 	vmov	r2, s6
 802086a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802086c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802086e:	eeb0 3a67 	vmov.f32	s6, s15
 8020872:	fb92 f3f3 	sdiv	r3, r2, r3
 8020876:	9314      	str	r3, [sp, #80]	@ 0x50
 8020878:	9b00      	ldr	r3, [sp, #0]
 802087a:	9a03      	ldr	r2, [sp, #12]
 802087c:	3b01      	subs	r3, #1
 802087e:	9300      	str	r3, [sp, #0]
 8020880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020882:	bf08      	it	eq
 8020884:	4613      	moveq	r3, r2
 8020886:	e757      	b.n	8020738 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020888:	140e      	asrs	r6, r1, #16
 802088a:	d42e      	bmi.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802088c:	f8db 5008 	ldr.w	r5, [fp, #8]
 8020890:	42b5      	cmp	r5, r6
 8020892:	dd2a      	ble.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020894:	1417      	asrs	r7, r2, #16
 8020896:	d428      	bmi.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020898:	f8db 400c 	ldr.w	r4, [fp, #12]
 802089c:	42bc      	cmp	r4, r7
 802089e:	dd24      	ble.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80208a0:	b22d      	sxth	r5, r5
 80208a2:	9c01      	ldr	r4, [sp, #4]
 80208a4:	fb07 6505 	mla	r5, r7, r5, r6
 80208a8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80208ac:	0e2c      	lsrs	r4, r5, #24
 80208ae:	d01c      	beq.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80208b0:	9e04      	ldr	r6, [sp, #16]
 80208b2:	4374      	muls	r4, r6
 80208b4:	1c66      	adds	r6, r4, #1
 80208b6:	eb06 2424 	add.w	r4, r6, r4, asr #8
 80208ba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80208be:	1224      	asrs	r4, r4, #8
 80208c0:	b2f7      	uxtb	r7, r6
 80208c2:	2cff      	cmp	r4, #255	@ 0xff
 80208c4:	9705      	str	r7, [sp, #20]
 80208c6:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80208ca:	fa5f f887 	uxtb.w	r8, r7
 80208ce:	d113      	bne.n	80208f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80208d0:	f06f 0e03 	mvn.w	lr, #3
 80208d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80208d8:	f800 500e 	strb.w	r5, [r0, lr]
 80208dc:	4486      	add	lr, r0
 80208de:	f88e 7001 	strb.w	r7, [lr, #1]
 80208e2:	f88e 6002 	strb.w	r6, [lr, #2]
 80208e6:	f88e 4003 	strb.w	r4, [lr, #3]
 80208ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80208ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80208f0:	4421      	add	r1, r4
 80208f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80208f4:	4422      	add	r2, r4
 80208f6:	e783      	b.n	8020800 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 80208f8:	b2e6      	uxtb	r6, r4
 80208fa:	9602      	str	r6, [sp, #8]
 80208fc:	2c00      	cmp	r4, #0
 80208fe:	d0f4      	beq.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020900:	f06f 0603 	mvn.w	r6, #3
 8020904:	b2ed      	uxtb	r5, r5
 8020906:	fb04 f808 	mul.w	r8, r4, r8
 802090a:	fb06 f90c 	mul.w	r9, r6, ip
 802090e:	9e02      	ldr	r6, [sp, #8]
 8020910:	eb00 0e09 	add.w	lr, r0, r9
 8020914:	f89e a003 	ldrb.w	sl, [lr, #3]
 8020918:	fb06 f70a 	mul.w	r7, r6, sl
 802091c:	1c7e      	adds	r6, r7, #1
 802091e:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 8020922:	9e02      	ldr	r6, [sp, #8]
 8020924:	123f      	asrs	r7, r7, #8
 8020926:	4456      	add	r6, sl
 8020928:	1bf6      	subs	r6, r6, r7
 802092a:	ebaa 0707 	sub.w	r7, sl, r7
 802092e:	f810 a009 	ldrb.w	sl, [r0, r9]
 8020932:	b2f6      	uxtb	r6, r6
 8020934:	fb07 fa0a 	mul.w	sl, r7, sl
 8020938:	fb04 a505 	mla	r5, r4, r5, sl
 802093c:	fb95 f5f6 	sdiv	r5, r5, r6
 8020940:	f800 5009 	strb.w	r5, [r0, r9]
 8020944:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020948:	f89e a002 	ldrb.w	sl, [lr, #2]
 802094c:	fb07 8805 	mla	r8, r7, r5, r8
 8020950:	9d05      	ldr	r5, [sp, #20]
 8020952:	f88e 6003 	strb.w	r6, [lr, #3]
 8020956:	436c      	muls	r4, r5
 8020958:	fb07 470a 	mla	r7, r7, sl, r4
 802095c:	fb98 f8f6 	sdiv	r8, r8, r6
 8020960:	fb97 f7f6 	sdiv	r7, r7, r6
 8020964:	f88e 8001 	strb.w	r8, [lr, #1]
 8020968:	f88e 7002 	strb.w	r7, [lr, #2]
 802096c:	e7bd      	b.n	80208ea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802096e:	b2ef      	uxtb	r7, r5
 8020970:	2d00      	cmp	r5, #0
 8020972:	f43f af3b 	beq.w	80207ec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8020976:	f894 9003 	ldrb.w	r9, [r4, #3]
 802097a:	b2f6      	uxtb	r6, r6
 802097c:	fb05 f808 	mul.w	r8, r5, r8
 8020980:	fb07 fa09 	mul.w	sl, r7, r9
 8020984:	444f      	add	r7, r9
 8020986:	f10a 0c01 	add.w	ip, sl, #1
 802098a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802098e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020992:	eba7 070c 	sub.w	r7, r7, ip
 8020996:	eba9 0c0c 	sub.w	ip, r9, ip
 802099a:	f894 9000 	ldrb.w	r9, [r4]
 802099e:	b2ff      	uxtb	r7, r7
 80209a0:	fb0c f909 	mul.w	r9, ip, r9
 80209a4:	70e7      	strb	r7, [r4, #3]
 80209a6:	fb05 9606 	mla	r6, r5, r6, r9
 80209aa:	f894 9002 	ldrb.w	r9, [r4, #2]
 80209ae:	fb96 f6f7 	sdiv	r6, r6, r7
 80209b2:	7026      	strb	r6, [r4, #0]
 80209b4:	7866      	ldrb	r6, [r4, #1]
 80209b6:	fb0c 8806 	mla	r8, ip, r6, r8
 80209ba:	9e02      	ldr	r6, [sp, #8]
 80209bc:	4375      	muls	r5, r6
 80209be:	fb0c 5c09 	mla	ip, ip, r9, r5
 80209c2:	fb98 f8f7 	sdiv	r8, r8, r7
 80209c6:	fb9c fcf7 	sdiv	ip, ip, r7
 80209ca:	f884 8001 	strb.w	r8, [r4, #1]
 80209ce:	f884 c002 	strb.w	ip, [r4, #2]
 80209d2:	e70b      	b.n	80207ec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 80209d4:	b007      	add	sp, #28
 80209d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080209dc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80209dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209e0:	b089      	sub	sp, #36	@ 0x24
 80209e2:	469a      	mov	sl, r3
 80209e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80209e8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80209ea:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 80209ee:	9102      	str	r1, [sp, #8]
 80209f0:	9206      	str	r2, [sp, #24]
 80209f2:	9307      	str	r3, [sp, #28]
 80209f4:	6842      	ldr	r2, [r0, #4]
 80209f6:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 80209fa:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	@ 0x60
 80209fe:	fb02 3101 	mla	r1, r2, r1, r3
 8020a02:	6803      	ldr	r3, [r0, #0]
 8020a04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020a08:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020a0c:	3301      	adds	r3, #1
 8020a0e:	f023 0301 	bic.w	r3, r3, #1
 8020a12:	9303      	str	r3, [sp, #12]
 8020a14:	f8db 3000 	ldr.w	r3, [fp]
 8020a18:	9304      	str	r3, [sp, #16]
 8020a1a:	9b02      	ldr	r3, [sp, #8]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	dc03      	bgt.n	8020a28 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020a20:	9b06      	ldr	r3, [sp, #24]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	f340 8154 	ble.w	8020cd0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020a28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020a2a:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8020a2e:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8020a32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020a34:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 8020a38:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8020a3c:	9301      	str	r3, [sp, #4]
 8020a3e:	f1ba 0f00 	cmp.w	sl, #0
 8020a42:	dd12      	ble.n	8020a6a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020a44:	1410      	asrs	r0, r2, #16
 8020a46:	d406      	bmi.n	8020a56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020a48:	42b0      	cmp	r0, r6
 8020a4a:	da04      	bge.n	8020a56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020a4c:	9b01      	ldr	r3, [sp, #4]
 8020a4e:	1418      	asrs	r0, r3, #16
 8020a50:	d401      	bmi.n	8020a56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020a52:	42a8      	cmp	r0, r5
 8020a54:	db0a      	blt.n	8020a6c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020a56:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020a58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020a5c:	9b01      	ldr	r3, [sp, #4]
 8020a5e:	3104      	adds	r1, #4
 8020a60:	4402      	add	r2, r0
 8020a62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020a64:	4403      	add	r3, r0
 8020a66:	9301      	str	r3, [sp, #4]
 8020a68:	e7e9      	b.n	8020a3e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020a6a:	d050      	beq.n	8020b0e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020a6c:	f10a 30ff 	add.w	r0, sl, #4294967295
 8020a70:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020a72:	fb04 2400 	mla	r4, r4, r0, r2
 8020a76:	1424      	asrs	r4, r4, #16
 8020a78:	d440      	bmi.n	8020afc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020a7a:	42b4      	cmp	r4, r6
 8020a7c:	da3e      	bge.n	8020afc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020a7e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020a80:	9b01      	ldr	r3, [sp, #4]
 8020a82:	fb04 3000 	mla	r0, r4, r0, r3
 8020a86:	1400      	asrs	r0, r0, #16
 8020a88:	d438      	bmi.n	8020afc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020a8a:	42a8      	cmp	r0, r5
 8020a8c:	da36      	bge.n	8020afc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020a8e:	1d08      	adds	r0, r1, #4
 8020a90:	46d6      	mov	lr, sl
 8020a92:	f1be 0f00 	cmp.w	lr, #0
 8020a96:	dd36      	ble.n	8020b06 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8020a98:	9b01      	ldr	r3, [sp, #4]
 8020a9a:	1414      	asrs	r4, r2, #16
 8020a9c:	141d      	asrs	r5, r3, #16
 8020a9e:	9b03      	ldr	r3, [sp, #12]
 8020aa0:	fb03 4505 	mla	r5, r3, r5, r4
 8020aa4:	9b04      	ldr	r3, [sp, #16]
 8020aa6:	086c      	lsrs	r4, r5, #1
 8020aa8:	5d1c      	ldrb	r4, [r3, r4]
 8020aaa:	07eb      	lsls	r3, r5, #31
 8020aac:	9b07      	ldr	r3, [sp, #28]
 8020aae:	bf54      	ite	pl
 8020ab0:	f004 040f 	andpl.w	r4, r4, #15
 8020ab4:	1124      	asrmi	r4, r4, #4
 8020ab6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020aba:	b2e4      	uxtb	r4, r4
 8020abc:	435c      	muls	r4, r3
 8020abe:	1c65      	adds	r5, r4, #1
 8020ac0:	eb05 2424 	add.w	r4, r5, r4, asr #8
 8020ac4:	4d84      	ldr	r5, [pc, #528]	@ (8020cd8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020ac6:	1224      	asrs	r4, r4, #8
 8020ac8:	f895 9002 	ldrb.w	r9, [r5, #2]
 8020acc:	786f      	ldrb	r7, [r5, #1]
 8020ace:	2cff      	cmp	r4, #255	@ 0xff
 8020ad0:	f895 c000 	ldrb.w	ip, [r5]
 8020ad4:	f040 80cb 	bne.w	8020c6e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020ad8:	f800 cc04 	strb.w	ip, [r0, #-4]
 8020adc:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020ae0:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020ae4:	f800 4c01 	strb.w	r4, [r0, #-1]
 8020ae8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020aea:	3004      	adds	r0, #4
 8020aec:	9c01      	ldr	r4, [sp, #4]
 8020aee:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020af2:	441a      	add	r2, r3
 8020af4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020af6:	441c      	add	r4, r3
 8020af8:	9401      	str	r4, [sp, #4]
 8020afa:	e7ca      	b.n	8020a92 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020afc:	2600      	movs	r6, #0
 8020afe:	eb0a 0006 	add.w	r0, sl, r6
 8020b02:	2800      	cmp	r0, #0
 8020b04:	dc41      	bgt.n	8020b8a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020b06:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8020b0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020b0e:	9b02      	ldr	r3, [sp, #8]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	f340 80dd 	ble.w	8020cd0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020b16:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020b1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b20:	eeb0 6a62 	vmov.f32	s12, s5
 8020b24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b28:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b30:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8020b34:	eeb0 6a43 	vmov.f32	s12, s6
 8020b38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b3c:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 8020b40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b58:	ee12 2a90 	vmov	r2, s5
 8020b5c:	eef0 2a47 	vmov.f32	s5, s14
 8020b60:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b64:	ee13 2a10 	vmov	r2, s6
 8020b68:	9315      	str	r3, [sp, #84]	@ 0x54
 8020b6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020b6c:	eeb0 3a67 	vmov.f32	s6, s15
 8020b70:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b74:	9316      	str	r3, [sp, #88]	@ 0x58
 8020b76:	9b02      	ldr	r3, [sp, #8]
 8020b78:	9a06      	ldr	r2, [sp, #24]
 8020b7a:	3b01      	subs	r3, #1
 8020b7c:	9302      	str	r3, [sp, #8]
 8020b7e:	bf08      	it	eq
 8020b80:	4692      	moveq	sl, r2
 8020b82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020b84:	bf18      	it	ne
 8020b86:	469a      	movne	sl, r3
 8020b88:	e747      	b.n	8020a1a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020b8a:	1414      	asrs	r4, r2, #16
 8020b8c:	d432      	bmi.n	8020bf4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020b8e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020b92:	42a0      	cmp	r0, r4
 8020b94:	dd2e      	ble.n	8020bf4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020b96:	9b01      	ldr	r3, [sp, #4]
 8020b98:	141d      	asrs	r5, r3, #16
 8020b9a:	d42b      	bmi.n	8020bf4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020b9c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8020ba0:	42a8      	cmp	r0, r5
 8020ba2:	dd27      	ble.n	8020bf4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020ba4:	9803      	ldr	r0, [sp, #12]
 8020ba6:	fb05 4400 	mla	r4, r5, r0, r4
 8020baa:	9d04      	ldr	r5, [sp, #16]
 8020bac:	0860      	lsrs	r0, r4, #1
 8020bae:	07e4      	lsls	r4, r4, #31
 8020bb0:	9c07      	ldr	r4, [sp, #28]
 8020bb2:	5c28      	ldrb	r0, [r5, r0]
 8020bb4:	bf54      	ite	pl
 8020bb6:	f000 000f 	andpl.w	r0, r0, #15
 8020bba:	1100      	asrmi	r0, r0, #4
 8020bbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020bc0:	b2c0      	uxtb	r0, r0
 8020bc2:	4360      	muls	r0, r4
 8020bc4:	1c44      	adds	r4, r0, #1
 8020bc6:	eb04 2020 	add.w	r0, r4, r0, asr #8
 8020bca:	4c43      	ldr	r4, [pc, #268]	@ (8020cd8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020bcc:	1200      	asrs	r0, r0, #8
 8020bce:	78a5      	ldrb	r5, [r4, #2]
 8020bd0:	f894 c001 	ldrb.w	ip, [r4, #1]
 8020bd4:	28ff      	cmp	r0, #255	@ 0xff
 8020bd6:	9505      	str	r5, [sp, #20]
 8020bd8:	f894 e000 	ldrb.w	lr, [r4]
 8020bdc:	d112      	bne.n	8020c04 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020bde:	f06f 0303 	mvn.w	r3, #3
 8020be2:	fb03 f406 	mul.w	r4, r3, r6
 8020be6:	f801 e004 	strb.w	lr, [r1, r4]
 8020bea:	440c      	add	r4, r1
 8020bec:	f884 c001 	strb.w	ip, [r4, #1]
 8020bf0:	70a5      	strb	r5, [r4, #2]
 8020bf2:	70e0      	strb	r0, [r4, #3]
 8020bf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020bf6:	3e01      	subs	r6, #1
 8020bf8:	9801      	ldr	r0, [sp, #4]
 8020bfa:	441a      	add	r2, r3
 8020bfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020bfe:	4418      	add	r0, r3
 8020c00:	9001      	str	r0, [sp, #4]
 8020c02:	e77c      	b.n	8020afe <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020c04:	b2c4      	uxtb	r4, r0
 8020c06:	2800      	cmp	r0, #0
 8020c08:	d0f4      	beq.n	8020bf4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c0a:	f06f 0303 	mvn.w	r3, #3
 8020c0e:	fb00 fe0e 	mul.w	lr, r0, lr
 8020c12:	fb00 fc0c 	mul.w	ip, r0, ip
 8020c16:	fb03 f806 	mul.w	r8, r3, r6
 8020c1a:	eb01 0708 	add.w	r7, r1, r8
 8020c1e:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020c22:	fb04 f509 	mul.w	r5, r4, r9
 8020c26:	444c      	add	r4, r9
 8020c28:	1c6b      	adds	r3, r5, #1
 8020c2a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020c2e:	9b05      	ldr	r3, [sp, #20]
 8020c30:	122d      	asrs	r5, r5, #8
 8020c32:	4358      	muls	r0, r3
 8020c34:	1b64      	subs	r4, r4, r5
 8020c36:	eba9 0505 	sub.w	r5, r9, r5
 8020c3a:	f811 9008 	ldrb.w	r9, [r1, r8]
 8020c3e:	b2e4      	uxtb	r4, r4
 8020c40:	fb05 ee09 	mla	lr, r5, r9, lr
 8020c44:	fb9e fef4 	sdiv	lr, lr, r4
 8020c48:	f801 e008 	strb.w	lr, [r1, r8]
 8020c4c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020c50:	f897 9002 	ldrb.w	r9, [r7, #2]
 8020c54:	fb05 cc0e 	mla	ip, r5, lr, ip
 8020c58:	fb05 0509 	mla	r5, r5, r9, r0
 8020c5c:	70fc      	strb	r4, [r7, #3]
 8020c5e:	fb9c fcf4 	sdiv	ip, ip, r4
 8020c62:	fb95 f5f4 	sdiv	r5, r5, r4
 8020c66:	f887 c001 	strb.w	ip, [r7, #1]
 8020c6a:	70bd      	strb	r5, [r7, #2]
 8020c6c:	e7c2      	b.n	8020bf4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c6e:	b2e5      	uxtb	r5, r4
 8020c70:	2c00      	cmp	r4, #0
 8020c72:	f43f af39 	beq.w	8020ae8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020c76:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 8020c7a:	fb04 fc0c 	mul.w	ip, r4, ip
 8020c7e:	4367      	muls	r7, r4
 8020c80:	fb05 f608 	mul.w	r6, r5, r8
 8020c84:	4445      	add	r5, r8
 8020c86:	fb04 f409 	mul.w	r4, r4, r9
 8020c8a:	1c73      	adds	r3, r6, #1
 8020c8c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020c90:	1236      	asrs	r6, r6, #8
 8020c92:	1bad      	subs	r5, r5, r6
 8020c94:	eba8 0606 	sub.w	r6, r8, r6
 8020c98:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 8020c9c:	b2ed      	uxtb	r5, r5
 8020c9e:	fb06 cc08 	mla	ip, r6, r8, ip
 8020ca2:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 8020ca6:	f800 5c01 	strb.w	r5, [r0, #-1]
 8020caa:	fb9c fcf5 	sdiv	ip, ip, r5
 8020cae:	f800 cc04 	strb.w	ip, [r0, #-4]
 8020cb2:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8020cb6:	fb06 770c 	mla	r7, r6, ip, r7
 8020cba:	fb06 4608 	mla	r6, r6, r8, r4
 8020cbe:	fb97 f7f5 	sdiv	r7, r7, r5
 8020cc2:	fb96 f6f5 	sdiv	r6, r6, r5
 8020cc6:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020cca:	f800 6c02 	strb.w	r6, [r0, #-2]
 8020cce:	e70b      	b.n	8020ae8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020cd0:	b009      	add	sp, #36	@ 0x24
 8020cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cd6:	bf00      	nop
 8020cd8:	200122d4 	.word	0x200122d4

08020cdc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce0:	b089      	sub	sp, #36	@ 0x24
 8020ce2:	469a      	mov	sl, r3
 8020ce4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020ce8:	4cb8      	ldr	r4, [pc, #736]	@ (8020fcc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 8020cea:	9102      	str	r1, [sp, #8]
 8020cec:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020cee:	9205      	str	r2, [sp, #20]
 8020cf0:	684a      	ldr	r2, [r1, #4]
 8020cf2:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 8020cf6:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	@ 0x60
 8020cfa:	fb02 3000 	mla	r0, r2, r0, r3
 8020cfe:	680b      	ldr	r3, [r1, #0]
 8020d00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020d04:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020d08:	3301      	adds	r3, #1
 8020d0a:	f023 0301 	bic.w	r3, r3, #1
 8020d0e:	9303      	str	r3, [sp, #12]
 8020d10:	f8db 3000 	ldr.w	r3, [fp]
 8020d14:	9304      	str	r3, [sp, #16]
 8020d16:	9b02      	ldr	r3, [sp, #8]
 8020d18:	2b00      	cmp	r3, #0
 8020d1a:	dc03      	bgt.n	8020d24 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020d1c:	9b05      	ldr	r3, [sp, #20]
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	f340 8150 	ble.w	8020fc4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020d26:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020d2a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8020d2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d30:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020d34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8020d38:	9301      	str	r3, [sp, #4]
 8020d3a:	f1ba 0f00 	cmp.w	sl, #0
 8020d3e:	dd12      	ble.n	8020d66 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020d40:	140b      	asrs	r3, r1, #16
 8020d42:	d406      	bmi.n	8020d52 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d44:	42bb      	cmp	r3, r7
 8020d46:	da04      	bge.n	8020d52 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d48:	9b01      	ldr	r3, [sp, #4]
 8020d4a:	141b      	asrs	r3, r3, #16
 8020d4c:	d401      	bmi.n	8020d52 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d4e:	42b3      	cmp	r3, r6
 8020d50:	db0a      	blt.n	8020d68 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020d52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020d58:	9a01      	ldr	r2, [sp, #4]
 8020d5a:	3004      	adds	r0, #4
 8020d5c:	4419      	add	r1, r3
 8020d5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020d60:	441a      	add	r2, r3
 8020d62:	9201      	str	r2, [sp, #4]
 8020d64:	e7e9      	b.n	8020d3a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020d66:	d046      	beq.n	8020df6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8020d68:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020d6c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8020d6e:	fb05 1503 	mla	r5, r5, r3, r1
 8020d72:	142d      	asrs	r5, r5, #16
 8020d74:	d436      	bmi.n	8020de4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020d76:	42bd      	cmp	r5, r7
 8020d78:	da34      	bge.n	8020de4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020d7a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020d7c:	9a01      	ldr	r2, [sp, #4]
 8020d7e:	fb05 2303 	mla	r3, r5, r3, r2
 8020d82:	141b      	asrs	r3, r3, #16
 8020d84:	d42e      	bmi.n	8020de4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020d86:	42b3      	cmp	r3, r6
 8020d88:	da2c      	bge.n	8020de4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020d8a:	1d05      	adds	r5, r0, #4
 8020d8c:	46d0      	mov	r8, sl
 8020d8e:	f1b8 0f00 	cmp.w	r8, #0
 8020d92:	dd2c      	ble.n	8020dee <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020d94:	9b01      	ldr	r3, [sp, #4]
 8020d96:	9a03      	ldr	r2, [sp, #12]
 8020d98:	141e      	asrs	r6, r3, #16
 8020d9a:	f894 e000 	ldrb.w	lr, [r4]
 8020d9e:	140b      	asrs	r3, r1, #16
 8020da0:	fb02 3606 	mla	r6, r2, r6, r3
 8020da4:	9a04      	ldr	r2, [sp, #16]
 8020da6:	0873      	lsrs	r3, r6, #1
 8020da8:	5cd3      	ldrb	r3, [r2, r3]
 8020daa:	07f2      	lsls	r2, r6, #31
 8020dac:	bf54      	ite	pl
 8020dae:	f003 030f 	andpl.w	r3, r3, #15
 8020db2:	111b      	asrmi	r3, r3, #4
 8020db4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020db8:	b2db      	uxtb	r3, r3
 8020dba:	2bff      	cmp	r3, #255	@ 0xff
 8020dbc:	f040 80c9 	bne.w	8020f52 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020dc0:	f805 ec04 	strb.w	lr, [r5, #-4]
 8020dc4:	7863      	ldrb	r3, [r4, #1]
 8020dc6:	f805 3c03 	strb.w	r3, [r5, #-3]
 8020dca:	78a3      	ldrb	r3, [r4, #2]
 8020dcc:	f805 3c02 	strb.w	r3, [r5, #-2]
 8020dd0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020dd2:	3504      	adds	r5, #4
 8020dd4:	9a01      	ldr	r2, [sp, #4]
 8020dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8020dda:	4419      	add	r1, r3
 8020ddc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020dde:	441a      	add	r2, r3
 8020de0:	9201      	str	r2, [sp, #4]
 8020de2:	e7d4      	b.n	8020d8e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020de4:	2500      	movs	r5, #0
 8020de6:	eb0a 0305 	add.w	r3, sl, r5
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	dc41      	bgt.n	8020e72 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020dee:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8020df2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020df6:	9b02      	ldr	r3, [sp, #8]
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	f340 80e3 	ble.w	8020fc4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020dfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e08:	eeb0 6a62 	vmov.f32	s12, s5
 8020e0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e18:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8020e1c:	eeb0 6a43 	vmov.f32	s12, s6
 8020e20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e24:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 8020e28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e40:	ee12 2a90 	vmov	r2, s5
 8020e44:	eef0 2a47 	vmov.f32	s5, s14
 8020e48:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e4c:	ee13 2a10 	vmov	r2, s6
 8020e50:	9315      	str	r3, [sp, #84]	@ 0x54
 8020e52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e54:	eeb0 3a67 	vmov.f32	s6, s15
 8020e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e5c:	9316      	str	r3, [sp, #88]	@ 0x58
 8020e5e:	9b02      	ldr	r3, [sp, #8]
 8020e60:	9a05      	ldr	r2, [sp, #20]
 8020e62:	3b01      	subs	r3, #1
 8020e64:	9302      	str	r3, [sp, #8]
 8020e66:	bf08      	it	eq
 8020e68:	4692      	moveq	sl, r2
 8020e6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e6c:	bf18      	it	ne
 8020e6e:	469a      	movne	sl, r3
 8020e70:	e751      	b.n	8020d16 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020e72:	140e      	asrs	r6, r1, #16
 8020e74:	d426      	bmi.n	8020ec4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020e76:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020e7a:	42b3      	cmp	r3, r6
 8020e7c:	dd22      	ble.n	8020ec4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020e7e:	9b01      	ldr	r3, [sp, #4]
 8020e80:	141f      	asrs	r7, r3, #16
 8020e82:	d41f      	bmi.n	8020ec4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020e84:	f8db 300c 	ldr.w	r3, [fp, #12]
 8020e88:	42bb      	cmp	r3, r7
 8020e8a:	dd1b      	ble.n	8020ec4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020e8c:	9b03      	ldr	r3, [sp, #12]
 8020e8e:	f894 8000 	ldrb.w	r8, [r4]
 8020e92:	fb07 6603 	mla	r6, r7, r3, r6
 8020e96:	9f04      	ldr	r7, [sp, #16]
 8020e98:	0873      	lsrs	r3, r6, #1
 8020e9a:	07f6      	lsls	r6, r6, #31
 8020e9c:	5cfb      	ldrb	r3, [r7, r3]
 8020e9e:	bf54      	ite	pl
 8020ea0:	f003 030f 	andpl.w	r3, r3, #15
 8020ea4:	111b      	asrmi	r3, r3, #4
 8020ea6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020eaa:	b2db      	uxtb	r3, r3
 8020eac:	2bff      	cmp	r3, #255	@ 0xff
 8020eae:	d111      	bne.n	8020ed4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8020eb0:	f06f 0303 	mvn.w	r3, #3
 8020eb4:	436b      	muls	r3, r5
 8020eb6:	f800 8003 	strb.w	r8, [r0, r3]
 8020eba:	4403      	add	r3, r0
 8020ebc:	7866      	ldrb	r6, [r4, #1]
 8020ebe:	705e      	strb	r6, [r3, #1]
 8020ec0:	78a6      	ldrb	r6, [r4, #2]
 8020ec2:	709e      	strb	r6, [r3, #2]
 8020ec4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020ec6:	3d01      	subs	r5, #1
 8020ec8:	9a01      	ldr	r2, [sp, #4]
 8020eca:	4419      	add	r1, r3
 8020ecc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020ece:	441a      	add	r2, r3
 8020ed0:	9201      	str	r2, [sp, #4]
 8020ed2:	e788      	b.n	8020de6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d0f5      	beq.n	8020ec4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020ed8:	f06f 0203 	mvn.w	r2, #3
 8020edc:	78a6      	ldrb	r6, [r4, #2]
 8020ede:	fb18 f803 	smulbb	r8, r8, r3
 8020ee2:	fb02 f905 	mul.w	r9, r2, r5
 8020ee6:	9606      	str	r6, [sp, #24]
 8020ee8:	eb00 0c09 	add.w	ip, r0, r9
 8020eec:	7866      	ldrb	r6, [r4, #1]
 8020eee:	f89c 7003 	ldrb.w	r7, [ip, #3]
 8020ef2:	9607      	str	r6, [sp, #28]
 8020ef4:	fb03 f607 	mul.w	r6, r3, r7
 8020ef8:	9a07      	ldr	r2, [sp, #28]
 8020efa:	f106 0e01 	add.w	lr, r6, #1
 8020efe:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 8020f02:	18fe      	adds	r6, r7, r3
 8020f04:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020f08:	eba7 070e 	sub.w	r7, r7, lr
 8020f0c:	eba6 060e 	sub.w	r6, r6, lr
 8020f10:	f810 e009 	ldrb.w	lr, [r0, r9]
 8020f14:	b2f6      	uxtb	r6, r6
 8020f16:	fb07 880e 	mla	r8, r7, lr, r8
 8020f1a:	fb98 f8f6 	sdiv	r8, r8, r6
 8020f1e:	f800 8009 	strb.w	r8, [r0, r9]
 8020f22:	fb13 f902 	smulbb	r9, r3, r2
 8020f26:	f89c e001 	ldrb.w	lr, [ip, #1]
 8020f2a:	9a06      	ldr	r2, [sp, #24]
 8020f2c:	fb07 990e 	mla	r9, r7, lr, r9
 8020f30:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020f34:	fb13 f302 	smulbb	r3, r3, r2
 8020f38:	f88c 6003 	strb.w	r6, [ip, #3]
 8020f3c:	fb07 330e 	mla	r3, r7, lr, r3
 8020f40:	fb99 f9f6 	sdiv	r9, r9, r6
 8020f44:	fb93 f3f6 	sdiv	r3, r3, r6
 8020f48:	f88c 9001 	strb.w	r9, [ip, #1]
 8020f4c:	f88c 3002 	strb.w	r3, [ip, #2]
 8020f50:	e7b8      	b.n	8020ec4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	f43f af3c 	beq.w	8020dd0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020f58:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8020f5c:	fb1e fe03 	smulbb	lr, lr, r3
 8020f60:	78a2      	ldrb	r2, [r4, #2]
 8020f62:	fb03 fc09 	mul.w	ip, r3, r9
 8020f66:	eb09 0603 	add.w	r6, r9, r3
 8020f6a:	9206      	str	r2, [sp, #24]
 8020f6c:	f10c 0701 	add.w	r7, ip, #1
 8020f70:	7862      	ldrb	r2, [r4, #1]
 8020f72:	eb07 272c 	add.w	r7, r7, ip, asr #8
 8020f76:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8020f7a:	eba9 070c 	sub.w	r7, r9, ip
 8020f7e:	eba6 060c 	sub.w	r6, r6, ip
 8020f82:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8020f86:	fb13 f902 	smulbb	r9, r3, r2
 8020f8a:	9a06      	ldr	r2, [sp, #24]
 8020f8c:	b2f6      	uxtb	r6, r6
 8020f8e:	fb07 ee0c 	mla	lr, r7, ip, lr
 8020f92:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8020f96:	fb13 f302 	smulbb	r3, r3, r2
 8020f9a:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020f9e:	fb07 990c 	mla	r9, r7, ip, r9
 8020fa2:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8020fa6:	fb07 330c 	mla	r3, r7, ip, r3
 8020faa:	fb9e fef6 	sdiv	lr, lr, r6
 8020fae:	fb99 f9f6 	sdiv	r9, r9, r6
 8020fb2:	fb93 f3f6 	sdiv	r3, r3, r6
 8020fb6:	f805 ec04 	strb.w	lr, [r5, #-4]
 8020fba:	f805 9c03 	strb.w	r9, [r5, #-3]
 8020fbe:	f805 3c02 	strb.w	r3, [r5, #-2]
 8020fc2:	e705      	b.n	8020dd0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020fc4:	b009      	add	sp, #36	@ 0x24
 8020fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fca:	bf00      	nop
 8020fcc:	200122d4 	.word	0x200122d4

08020fd0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOID1Ev>:
 8020fd0:	4770      	bx	lr

08020fd2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW9D1Ev>:
 8020fd2:	4770      	bx	lr

08020fd4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLED1Ev>:
 8020fd4:	4770      	bx	lr

08020fd6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L4D1Ev>:
 8020fd6:	4770      	bx	lr

08020fd8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020fd8:	4770      	bx	lr

08020fda <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020fda:	4770      	bx	lr

08020fdc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020fdc:	4770      	bx	lr

08020fde <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020fde:	4770      	bx	lr

08020fe0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020fe0:	4770      	bx	lr

08020fe2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020fe2:	4770      	bx	lr

08020fe4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020fe4:	4770      	bx	lr

08020fe6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020fe6:	4770      	bx	lr

08020fe8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020fe8:	4770      	bx	lr

08020fea <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020fea:	4770      	bx	lr

08020fec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020fec:	4770      	bx	lr

08020fee <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020fee:	4770      	bx	lr

08020ff0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020ff0:	4770      	bx	lr

08020ff2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020ff2:	4770      	bx	lr

08020ff4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020ff4:	4770      	bx	lr

08020ff6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020ff6:	4770      	bx	lr

08020ff8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020ff8:	4770      	bx	lr

08020ffa <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020ffa:	4770      	bx	lr

08020ffc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020ffc:	4770      	bx	lr

08020ffe <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020ffe:	4770      	bx	lr

08021000 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021000:	4770      	bx	lr

08021002 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8021002:	4770      	bx	lr

08021004 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021004:	4770      	bx	lr

08021006 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021006:	4770      	bx	lr

08021008 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021008:	4770      	bx	lr

0802100a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802100a:	4770      	bx	lr

0802100c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802100c:	4770      	bx	lr

0802100e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802100e:	4770      	bx	lr

08021010 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021014:	b091      	sub	sp, #68	@ 0x44
 8021016:	460f      	mov	r7, r1
 8021018:	4614      	mov	r4, r2
 802101a:	f89d 8068 	ldrb.w	r8, [sp, #104]	@ 0x68
 802101e:	f89d 506c 	ldrb.w	r5, [sp, #108]	@ 0x6c
 8021022:	f1b8 0f00 	cmp.w	r8, #0
 8021026:	d054      	beq.n	80210d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8021028:	6810      	ldr	r0, [r2, #0]
 802102a:	ae0c      	add	r6, sp, #48	@ 0x30
 802102c:	6851      	ldr	r1, [r2, #4]
 802102e:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 8021204 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 8021032:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8021208 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 8021036:	c603      	stmia	r6!, {r0, r1}
 8021038:	6818      	ldr	r0, [r3, #0]
 802103a:	ae0e      	add	r6, sp, #56	@ 0x38
 802103c:	6859      	ldr	r1, [r3, #4]
 802103e:	c603      	stmia	r6!, {r0, r1}
 8021040:	a80c      	add	r0, sp, #48	@ 0x30
 8021042:	f7f9 fe5f 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021046:	4621      	mov	r1, r4
 8021048:	a80e      	add	r0, sp, #56	@ 0x38
 802104a:	f7f9 fe83 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802104e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8021052:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021056:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 802105a:	f8d9 0000 	ldr.w	r0, [r9]
 802105e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021062:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8021066:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 802106a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802106e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	@ 0x3c
 8021072:	440a      	add	r2, r1
 8021074:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021078:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802107c:	4413      	add	r3, r2
 802107e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021082:	6803      	ldr	r3, [r0, #0]
 8021084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021086:	4798      	blx	r3
 8021088:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802108c:	d024      	beq.n	80210d8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 802108e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021092:	f8d9 0000 	ldr.w	r0, [r9]
 8021096:	d022      	beq.n	80210de <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8021098:	2102      	movs	r1, #2
 802109a:	f04f 0e00 	mov.w	lr, #0
 802109e:	f8d0 c000 	ldr.w	ip, [r0]
 80210a2:	b2b6      	uxth	r6, r6
 80210a4:	9106      	str	r1, [sp, #24]
 80210a6:	b2bf      	uxth	r7, r7
 80210a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80210ac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80210b0:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 80210b4:	f8ba 1000 	ldrh.w	r1, [sl]
 80210b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80210bc:	9601      	str	r6, [sp, #4]
 80210be:	9700      	str	r7, [sp, #0]
 80210c0:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80210c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80210c8:	9102      	str	r1, [sp, #8]
 80210ca:	4621      	mov	r1, r4
 80210cc:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 80210d0:	47a8      	blx	r5
 80210d2:	b011      	add	sp, #68	@ 0x44
 80210d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210d8:	f010 0f20 	tst.w	r0, #32
 80210dc:	e7d9      	b.n	8021092 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 80210de:	6803      	ldr	r3, [r0, #0]
 80210e0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80210e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210e6:	4798      	blx	r3
 80210e8:	f8ba c000 	ldrh.w	ip, [sl]
 80210ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80210f0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80210f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80210f8:	fb0c f606 	mul.w	r6, ip, r6
 80210fc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8021100:	fb0c 2303 	mla	r3, ip, r3, r2
 8021104:	ebac 0c07 	sub.w	ip, ip, r7
 8021108:	eba9 0907 	sub.w	r9, r9, r7
 802110c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021110:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021114:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8021118:	ea4f 0989 	mov.w	r9, r9, lsl #2
 802111c:	d148      	bne.n	80211b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802111e:	2d00      	cmp	r5, #0
 8021120:	d146      	bne.n	80211b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8021122:	42b0      	cmp	r0, r6
 8021124:	d268      	bcs.n	80211f8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8021126:	eb00 020b 	add.w	r2, r0, fp
 802112a:	4290      	cmp	r0, r2
 802112c:	d204      	bcs.n	8021138 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 802112e:	f854 3b04 	ldr.w	r3, [r4], #4
 8021132:	f840 3b04 	str.w	r3, [r0], #4
 8021136:	e7f8      	b.n	802112a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 8021138:	4460      	add	r0, ip
 802113a:	444c      	add	r4, r9
 802113c:	e7f1      	b.n	8021122 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 802113e:	fb04 f70a 	mul.w	r7, r4, sl
 8021142:	4454      	add	r4, sl
 8021144:	1c7a      	adds	r2, r7, #1
 8021146:	eb02 2227 	add.w	r2, r2, r7, asr #8
 802114a:	1212      	asrs	r2, r2, #8
 802114c:	ebaa 0702 	sub.w	r7, sl, r2
 8021150:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 8021154:	1aa4      	subs	r4, r4, r2
 8021156:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802115a:	fb07 fa0a 	mul.w	sl, r7, sl
 802115e:	b2e4      	uxtb	r4, r4
 8021160:	fb05 a202 	mla	r2, r5, r2, sl
 8021164:	fa5f fa8e 	uxtb.w	sl, lr
 8021168:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802116c:	fb07 fa0a 	mul.w	sl, r7, sl
 8021170:	fb07 fe0e 	mul.w	lr, r7, lr
 8021174:	fbb2 f2f4 	udiv	r2, r2, r4
 8021178:	0412      	lsls	r2, r2, #16
 802117a:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 802117e:	4611      	mov	r1, r2
 8021180:	b2da      	uxtb	r2, r3
 8021182:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021186:	fb05 a202 	mla	r2, r5, r2, sl
 802118a:	fb05 e503 	mla	r5, r5, r3, lr
 802118e:	fbb2 f2f4 	udiv	r2, r2, r4
 8021192:	b2d2      	uxtb	r2, r2
 8021194:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8021198:	fbb5 f4f4 	udiv	r4, r5, r4
 802119c:	0224      	lsls	r4, r4, #8
 802119e:	430a      	orrs	r2, r1
 80211a0:	b2a4      	uxth	r4, r4
 80211a2:	4322      	orrs	r2, r4
 80211a4:	6002      	str	r2, [r0, #0]
 80211a6:	e025      	b.n	80211f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80211a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211aa:	4460      	add	r0, ip
 80211ac:	444b      	add	r3, r9
 80211ae:	461c      	mov	r4, r3
 80211b0:	42b0      	cmp	r0, r6
 80211b2:	d221      	bcs.n	80211f8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 80211b4:	eb00 030b 	add.w	r3, r0, fp
 80211b8:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
 80211bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80211be:	4298      	cmp	r0, r3
 80211c0:	d2f2      	bcs.n	80211a8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 80211c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80211c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80211c8:	0e1d      	lsrs	r5, r3, #24
 80211ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80211cc:	fb05 f408 	mul.w	r4, r5, r8
 80211d0:	1c65      	adds	r5, r4, #1
 80211d2:	eb05 2524 	add.w	r5, r5, r4, asr #8
 80211d6:	122d      	asrs	r5, r5, #8
 80211d8:	d00c      	beq.n	80211f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80211da:	2dff      	cmp	r5, #255	@ 0xff
 80211dc:	b2ec      	uxtb	r4, r5
 80211de:	d004      	beq.n	80211ea <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 80211e0:	f8d0 e000 	ldr.w	lr, [r0]
 80211e4:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 80211e8:	d1a9      	bne.n	802113e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 80211ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80211ee:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 80211f2:	6005      	str	r5, [r0, #0]
 80211f4:	3004      	adds	r0, #4
 80211f6:	e7e1      	b.n	80211bc <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 80211f8:	4b02      	ldr	r3, [pc, #8]	@ (8021204 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 80211fa:	6818      	ldr	r0, [r3, #0]
 80211fc:	6803      	ldr	r3, [r0, #0]
 80211fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021200:	4798      	blx	r3
 8021202:	e766      	b.n	80210d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8021204:	200122c4 	.word	0x200122c4
 8021208:	200122be 	.word	0x200122be

0802120c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 802120c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021210:	2300      	movs	r3, #0
 8021212:	9300      	str	r3, [sp, #0]
 8021214:	4b3e      	ldr	r3, [pc, #248]	@ (8021310 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021216:	781b      	ldrb	r3, [r3, #0]
 8021218:	2b00      	cmp	r3, #0
 802121a:	d137      	bne.n	802128c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 802121c:	4a3d      	ldr	r2, [pc, #244]	@ (8021314 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802121e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021222:	f8ad 2004 	strh.w	r2, [sp, #4]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d132      	bne.n	8021290 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802122a:	4b3b      	ldr	r3, [pc, #236]	@ (8021318 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021230:	ac02      	add	r4, sp, #8
 8021232:	6808      	ldr	r0, [r1, #0]
 8021234:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021238:	ab02      	add	r3, sp, #8
 802123a:	6849      	ldr	r1, [r1, #4]
 802123c:	4d37      	ldr	r5, [pc, #220]	@ (802131c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 802123e:	c303      	stmia	r3!, {r0, r1}
 8021240:	4669      	mov	r1, sp
 8021242:	4620      	mov	r0, r4
 8021244:	f7f9 fd86 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021248:	4668      	mov	r0, sp
 802124a:	f7f9 fd5b 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802124e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021252:	f8bd 2000 	ldrh.w	r2, [sp]
 8021256:	462f      	mov	r7, r5
 8021258:	6828      	ldr	r0, [r5, #0]
 802125a:	4413      	add	r3, r2
 802125c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021260:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021264:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021268:	4413      	add	r3, r2
 802126a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802126e:	6803      	ldr	r3, [r0, #0]
 8021270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021272:	4798      	blx	r3
 8021274:	f010 0f01 	tst.w	r0, #1
 8021278:	d00c      	beq.n	8021294 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802127a:	6828      	ldr	r0, [r5, #0]
 802127c:	6803      	ldr	r3, [r0, #0]
 802127e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021284:	4798      	blx	r3
 8021286:	b004      	add	sp, #16
 8021288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802128c:	4a22      	ldr	r2, [pc, #136]	@ (8021318 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802128e:	e7c6      	b.n	802121e <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021290:	4b20      	ldr	r3, [pc, #128]	@ (8021314 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8021292:	e7cb      	b.n	802122c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021294:	6828      	ldr	r0, [r5, #0]
 8021296:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802129a:	6803      	ldr	r3, [r0, #0]
 802129c:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80212a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80212a2:	4798      	blx	r3
 80212a4:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 80212a8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80212ac:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 80212b0:	fb15 3404 	smlabb	r4, r5, r4, r3
 80212b4:	eba5 0508 	sub.w	r5, r5, r8
 80212b8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80212bc:	6838      	ldr	r0, [r7, #0]
 80212be:	00ad      	lsls	r5, r5, #2
 80212c0:	6803      	ldr	r3, [r0, #0]
 80212c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212c4:	4798      	blx	r3
 80212c6:	4b13      	ldr	r3, [pc, #76]	@ (8021314 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80212c8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80212cc:	881a      	ldrh	r2, [r3, #0]
 80212ce:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80212d2:	4356      	muls	r6, r2
 80212d4:	fb02 1303 	mla	r3, r2, r3, r1
 80212d8:	eba2 0208 	sub.w	r2, r2, r8
 80212dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80212e0:	0092      	lsls	r2, r2, #2
 80212e2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80212e6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80212ea:	42b0      	cmp	r0, r6
 80212ec:	d20b      	bcs.n	8021306 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80212ee:	eb00 0c03 	add.w	ip, r0, r3
 80212f2:	4560      	cmp	r0, ip
 80212f4:	d204      	bcs.n	8021300 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 80212f6:	f854 1b04 	ldr.w	r1, [r4], #4
 80212fa:	f840 1b04 	str.w	r1, [r0], #4
 80212fe:	e7f8      	b.n	80212f2 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 8021300:	4410      	add	r0, r2
 8021302:	442c      	add	r4, r5
 8021304:	e7f1      	b.n	80212ea <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8021306:	6838      	ldr	r0, [r7, #0]
 8021308:	6803      	ldr	r3, [r0, #0]
 802130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802130c:	4798      	blx	r3
 802130e:	e7ba      	b.n	8021286 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8021310:	200122bc 	.word	0x200122bc
 8021314:	200122be 	.word	0x200122be
 8021318:	200122c0 	.word	0x200122c0
 802131c:	200122c4 	.word	0x200122c4

08021320 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021324:	461c      	mov	r4, r3
 8021326:	b093      	sub	sp, #76	@ 0x4c
 8021328:	460f      	mov	r7, r1
 802132a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802132c:	6820      	ldr	r0, [r4, #0]
 802132e:	6861      	ldr	r1, [r4, #4]
 8021330:	9205      	str	r2, [sp, #20]
 8021332:	aa0e      	add	r2, sp, #56	@ 0x38
 8021334:	f89d 8074 	ldrb.w	r8, [sp, #116]	@ 0x74
 8021338:	c203      	stmia	r2!, {r0, r1}
 802133a:	6818      	ldr	r0, [r3, #0]
 802133c:	aa10      	add	r2, sp, #64	@ 0x40
 802133e:	6859      	ldr	r1, [r3, #4]
 8021340:	c203      	stmia	r2!, {r0, r1}
 8021342:	a80e      	add	r0, sp, #56	@ 0x38
 8021344:	f7f9 fcde 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021348:	4621      	mov	r1, r4
 802134a:	a810      	add	r0, sp, #64	@ 0x40
 802134c:	f7f9 fd02 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021350:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8021354:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8021358:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802135c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8021360:	bfdb      	ittet	le
 8021362:	b2b3      	uxthle	r3, r6
 8021364:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021368:	2301      	movgt	r3, #1
 802136a:	fb92 f3f3 	sdivle	r3, r2, r3
 802136e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8021372:	441d      	add	r5, r3
 8021374:	fb92 f1f3 	sdiv	r1, r2, r3
 8021378:	fa1f fc81 	uxth.w	ip, r1
 802137c:	3d01      	subs	r5, #1
 802137e:	fb0c 2413 	mls	r4, ip, r3, r2
 8021382:	4661      	mov	r1, ip
 8021384:	fb14 f406 	smulbb	r4, r4, r6
 8021388:	4404      	add	r4, r0
 802138a:	fb95 f5f3 	sdiv	r5, r5, r3
 802138e:	b2a4      	uxth	r4, r4
 8021390:	b121      	cbz	r1, 802139c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x7c>
 8021392:	9b05      	ldr	r3, [sp, #20]
 8021394:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021398:	ba1b      	rev	r3, r3
 802139a:	441f      	add	r7, r3
 802139c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80213a0:	b2ad      	uxth	r5, r5
 80213a2:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 80213a6:	4418      	add	r0, r3
 80213a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80213ac:	00ad      	lsls	r5, r5, #2
 80213ae:	441a      	add	r2, r3
 80213b0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80213b4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80213b8:	9301      	str	r3, [sp, #4]
 80213ba:	4b7c      	ldr	r3, [pc, #496]	@ (80215ac <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>)
 80213bc:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80213c0:	6818      	ldr	r0, [r3, #0]
 80213c2:	6803      	ldr	r3, [r0, #0]
 80213c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213c6:	4798      	blx	r3
 80213c8:	4a79      	ldr	r2, [pc, #484]	@ (80215b0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x290>)
 80213ca:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80213ce:	2c00      	cmp	r4, #0
 80213d0:	8811      	ldrh	r1, [r2, #0]
 80213d2:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 80213d6:	fb06 f601 	mul.w	r6, r6, r1
 80213da:	fb01 c303 	mla	r3, r1, r3, ip
 80213de:	920d      	str	r2, [sp, #52]	@ 0x34
 80213e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80213e4:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 80213e8:	bf18      	it	ne
 80213ea:	2600      	movne	r6, #0
 80213ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80213ee:	f105 0304 	add.w	r3, r5, #4
 80213f2:	9307      	str	r3, [sp, #28]
 80213f4:	9b01      	ldr	r3, [sp, #4]
 80213f6:	bf08      	it	eq
 80213f8:	461e      	moveq	r6, r3
 80213fa:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80213fe:	b2b6      	uxth	r6, r6
 8021400:	9308      	str	r3, [sp, #32]
 8021402:	2300      	movs	r3, #0
 8021404:	9304      	str	r3, [sp, #16]
 8021406:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021408:	4290      	cmp	r0, r2
 802140a:	f080 80c7 	bcs.w	802159c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 802140e:	b95b      	cbnz	r3, 8021428 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x108>
 8021410:	783a      	ldrb	r2, [r7, #0]
 8021412:	0993      	lsrs	r3, r2, #6
 8021414:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021418:	9204      	str	r2, [sp, #16]
 802141a:	1e5a      	subs	r2, r3, #1
 802141c:	2a02      	cmp	r2, #2
 802141e:	bf8d      	iteet	hi
 8021420:	787b      	ldrbhi	r3, [r7, #1]
 8021422:	3701      	addls	r7, #1
 8021424:	b29b      	uxthls	r3, r3
 8021426:	3702      	addhi	r7, #2
 8021428:	b184      	cbz	r4, 802144c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x12c>
 802142a:	429c      	cmp	r4, r3
 802142c:	d907      	bls.n	802143e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11e>
 802142e:	1ae4      	subs	r4, r4, r3
 8021430:	4635      	mov	r5, r6
 8021432:	2300      	movs	r3, #0
 8021434:	b2a4      	uxth	r4, r4
 8021436:	9300      	str	r3, [sp, #0]
 8021438:	9b00      	ldr	r3, [sp, #0]
 802143a:	462e      	mov	r6, r5
 802143c:	e7e3      	b.n	8021406 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xe6>
 802143e:	1b1c      	subs	r4, r3, r4
 8021440:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8021444:	b2a3      	uxth	r3, r4
 8021446:	2400      	movs	r4, #0
 8021448:	9300      	str	r3, [sp, #0]
 802144a:	e7f5      	b.n	8021438 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 802144c:	2202      	movs	r2, #2
 802144e:	9907      	ldr	r1, [sp, #28]
 8021450:	429e      	cmp	r6, r3
 8021452:	4615      	mov	r5, r2
 8021454:	9a04      	ldr	r2, [sp, #16]
 8021456:	fb15 1202 	smlabb	r2, r5, r2, r1
 802145a:	9905      	ldr	r1, [sp, #20]
 802145c:	5a8a      	ldrh	r2, [r1, r2]
 802145e:	d845      	bhi.n	80214ec <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8021460:	1b99      	subs	r1, r3, r6
 8021462:	4625      	mov	r5, r4
 8021464:	9603      	str	r6, [sp, #12]
 8021466:	b289      	uxth	r1, r1
 8021468:	9100      	str	r1, [sp, #0]
 802146a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802146e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021472:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8021476:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802147a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802147e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021482:	ea4e 1e9e 	orr.w	lr, lr, lr, lsr #6
 8021486:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802148a:	b2d2      	uxtb	r2, r2
 802148c:	ea4f 210e 	mov.w	r1, lr, lsl #8
 8021490:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021494:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8021498:	ea41 0102 	orr.w	r1, r1, r2
 802149c:	d02b      	beq.n	80214f6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d6>
 802149e:	fb12 f208 	smulbb	r2, r2, r8
 80214a2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80214a6:	4683      	mov	fp, r0
 80214a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80214aa:	fb1e f208 	smulbb	r2, lr, r8
 80214ae:	9206      	str	r2, [sp, #24]
 80214b0:	fb18 f20c 	smulbb	r2, r8, ip
 80214b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80214b6:	9a08      	ldr	r2, [sp, #32]
 80214b8:	430a      	orrs	r2, r1
 80214ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80214bc:	f1ba 0f00 	cmp.w	sl, #0
 80214c0:	d123      	bne.n	802150a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 80214c2:	9a03      	ldr	r2, [sp, #12]
 80214c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80214c8:	429e      	cmp	r6, r3
 80214ca:	d8b5      	bhi.n	8021438 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 80214cc:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80214d0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 80214d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80214d6:	1b64      	subs	r4, r4, r5
 80214d8:	9a01      	ldr	r2, [sp, #4]
 80214da:	881b      	ldrh	r3, [r3, #0]
 80214dc:	b2a4      	uxth	r4, r4
 80214de:	1a9b      	subs	r3, r3, r2
 80214e0:	2c00      	cmp	r4, #0
 80214e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80214e6:	bf18      	it	ne
 80214e8:	2500      	movne	r5, #0
 80214ea:	e7a5      	b.n	8021438 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 80214ec:	1af5      	subs	r5, r6, r3
 80214ee:	9303      	str	r3, [sp, #12]
 80214f0:	9400      	str	r4, [sp, #0]
 80214f2:	b2ad      	uxth	r5, r5
 80214f4:	e7b9      	b.n	802146a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 80214f6:	9a03      	ldr	r2, [sp, #12]
 80214f8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80214fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8021500:	4282      	cmp	r2, r0
 8021502:	d0e1      	beq.n	80214c8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a8>
 8021504:	f840 1b04 	str.w	r1, [r0], #4
 8021508:	e7fa      	b.n	8021500 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802150a:	f8db 2000 	ldr.w	r2, [fp]
 802150e:	ea5f 6c12 	movs.w	ip, r2, lsr #24
 8021512:	9202      	str	r2, [sp, #8]
 8021514:	d109      	bne.n	802152a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20a>
 8021516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021518:	f8cb 2000 	str.w	r2, [fp]
 802151c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021520:	f10b 0b04 	add.w	fp, fp, #4
 8021524:	fa1f fa8a 	uxth.w	sl, sl
 8021528:	e7c8      	b.n	80214bc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x19c>
 802152a:	fb08 f10c 	mul.w	r1, r8, ip
 802152e:	eb08 0e0c 	add.w	lr, r8, ip
 8021532:	9a02      	ldr	r2, [sp, #8]
 8021534:	f101 0901 	add.w	r9, r1, #1
 8021538:	eb09 2921 	add.w	r9, r9, r1, asr #8
 802153c:	ea4f 2129 	mov.w	r1, r9, asr #8
 8021540:	ebac 0901 	sub.w	r9, ip, r1
 8021544:	ebae 0e01 	sub.w	lr, lr, r1
 8021548:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802154c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802154e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8021552:	fa5f fe8e 	uxtb.w	lr, lr
 8021556:	fb09 1c0c 	mla	ip, r9, ip, r1
 802155a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802155c:	fb09 1102 	mla	r1, r9, r2, r1
 8021560:	9a02      	ldr	r2, [sp, #8]
 8021562:	fbbc fcfe 	udiv	ip, ip, lr
 8021566:	fbb1 f1fe 	udiv	r1, r1, lr
 802156a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 802156e:	b2c9      	uxtb	r1, r1
 8021570:	f40c 0c7f 	and.w	ip, ip, #16711680	@ 0xff0000
 8021574:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 8021578:	ea4c 0101 	orr.w	r1, ip, r1
 802157c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8021580:	9a06      	ldr	r2, [sp, #24]
 8021582:	fb09 220c 	mla	r2, r9, ip, r2
 8021586:	fbb2 f2fe 	udiv	r2, r2, lr
 802158a:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 802158e:	fa1f fc8c 	uxth.w	ip, ip
 8021592:	ea41 010c 	orr.w	r1, r1, ip
 8021596:	f8cb 1000 	str.w	r1, [fp]
 802159a:	e7bf      	b.n	802151c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802159c:	4b03      	ldr	r3, [pc, #12]	@ (80215ac <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>)
 802159e:	6818      	ldr	r0, [r3, #0]
 80215a0:	6803      	ldr	r3, [r0, #0]
 80215a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80215a4:	4798      	blx	r3
 80215a6:	b013      	add	sp, #76	@ 0x4c
 80215a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215ac:	200122c4 	.word	0x200122c4
 80215b0:	200122be 	.word	0x200122be

080215b4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80215b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215b8:	b095      	sub	sp, #84	@ 0x54
 80215ba:	461c      	mov	r4, r3
 80215bc:	9204      	str	r2, [sp, #16]
 80215be:	f89d 207c 	ldrb.w	r2, [sp, #124]	@ 0x7c
 80215c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80215c4:	6820      	ldr	r0, [r4, #0]
 80215c6:	9100      	str	r1, [sp, #0]
 80215c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80215ca:	aa10      	add	r2, sp, #64	@ 0x40
 80215cc:	6861      	ldr	r1, [r4, #4]
 80215ce:	c203      	stmia	r2!, {r0, r1}
 80215d0:	6818      	ldr	r0, [r3, #0]
 80215d2:	aa12      	add	r2, sp, #72	@ 0x48
 80215d4:	6859      	ldr	r1, [r3, #4]
 80215d6:	c203      	stmia	r2!, {r0, r1}
 80215d8:	a810      	add	r0, sp, #64	@ 0x40
 80215da:	f7f9 fb93 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215de:	4621      	mov	r1, r4
 80215e0:	a812      	add	r0, sp, #72	@ 0x48
 80215e2:	f7f9 fbb7 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215e6:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	@ 0x44
 80215ea:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80215ee:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80215f2:	f8bd 0048 	ldrh.w	r0, [sp, #72]	@ 0x48
 80215f6:	bfdb      	ittet	le
 80215f8:	b2b3      	uxthle	r3, r6
 80215fa:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80215fe:	2301      	movgt	r3, #1
 8021600:	fb92 f3f3 	sdivle	r3, r2, r3
 8021604:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	@ 0x4a
 8021608:	441d      	add	r5, r3
 802160a:	fb92 f1f3 	sdiv	r1, r2, r3
 802160e:	fa1f fc81 	uxth.w	ip, r1
 8021612:	3d01      	subs	r5, #1
 8021614:	fb0c 2413 	mls	r4, ip, r3, r2
 8021618:	4661      	mov	r1, ip
 802161a:	fb14 f406 	smulbb	r4, r4, r6
 802161e:	4404      	add	r4, r0
 8021620:	fb95 f5f3 	sdiv	r5, r5, r3
 8021624:	b2a4      	uxth	r4, r4
 8021626:	b131      	cbz	r1, 8021636 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8021628:	9b04      	ldr	r3, [sp, #16]
 802162a:	9900      	ldr	r1, [sp, #0]
 802162c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021630:	ba1b      	rev	r3, r3
 8021632:	4419      	add	r1, r3
 8021634:	9100      	str	r1, [sp, #0]
 8021636:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802163a:	b2ad      	uxth	r5, r5
 802163c:	f9bd 604e 	ldrsh.w	r6, [sp, #78]	@ 0x4e
 8021640:	4418      	add	r0, r3
 8021642:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8021646:	00ad      	lsls	r5, r5, #2
 8021648:	441a      	add	r2, r3
 802164a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 802164e:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8021652:	9301      	str	r3, [sp, #4]
 8021654:	4b7b      	ldr	r3, [pc, #492]	@ (8021844 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x290>)
 8021656:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 802165a:	6818      	ldr	r0, [r3, #0]
 802165c:	6803      	ldr	r3, [r0, #0]
 802165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021660:	4798      	blx	r3
 8021662:	4a79      	ldr	r2, [pc, #484]	@ (8021848 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x294>)
 8021664:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8021668:	2c00      	cmp	r4, #0
 802166a:	8811      	ldrh	r1, [r2, #0]
 802166c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 8021670:	fb06 f601 	mul.w	r6, r6, r1
 8021674:	fb01 c303 	mla	r3, r1, r3, ip
 8021678:	bf18      	it	ne
 802167a:	f04f 0c00 	movne.w	ip, #0
 802167e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8021680:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021684:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 8021688:	9309      	str	r3, [sp, #36]	@ 0x24
 802168a:	f105 0304 	add.w	r3, r5, #4
 802168e:	9305      	str	r3, [sp, #20]
 8021690:	9b01      	ldr	r3, [sp, #4]
 8021692:	bf08      	it	eq
 8021694:	469c      	moveq	ip, r3
 8021696:	2300      	movs	r3, #0
 8021698:	fa1f fc8c 	uxth.w	ip, ip
 802169c:	9302      	str	r3, [sp, #8]
 802169e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80216a0:	4290      	cmp	r0, r2
 80216a2:	f080 80c7 	bcs.w	8021834 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 80216a6:	b963      	cbnz	r3, 80216c2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80216a8:	9b00      	ldr	r3, [sp, #0]
 80216aa:	781a      	ldrb	r2, [r3, #0]
 80216ac:	0993      	lsrs	r3, r2, #6
 80216ae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80216b2:	9202      	str	r2, [sp, #8]
 80216b4:	1e5a      	subs	r2, r3, #1
 80216b6:	2a02      	cmp	r2, #2
 80216b8:	d815      	bhi.n	80216e6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 80216ba:	9a00      	ldr	r2, [sp, #0]
 80216bc:	b29b      	uxth	r3, r3
 80216be:	3201      	adds	r2, #1
 80216c0:	9200      	str	r2, [sp, #0]
 80216c2:	b1b4      	cbz	r4, 80216f2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80216c4:	429c      	cmp	r4, r3
 80216c6:	bf91      	iteee	ls
 80216c8:	1b1c      	subls	r4, r3, r4
 80216ca:	1ae4      	subhi	r4, r4, r3
 80216cc:	4666      	movhi	r6, ip
 80216ce:	f04f 0b00 	movhi.w	fp, #0
 80216d2:	bf9b      	ittet	ls
 80216d4:	fa1f fb84 	uxthls.w	fp, r4
 80216d8:	f8bd 6004 	ldrhls.w	r6, [sp, #4]
 80216dc:	b2a4      	uxthhi	r4, r4
 80216de:	2400      	movls	r4, #0
 80216e0:	465b      	mov	r3, fp
 80216e2:	46b4      	mov	ip, r6
 80216e4:	e7db      	b.n	802169e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 80216e6:	9a00      	ldr	r2, [sp, #0]
 80216e8:	9b00      	ldr	r3, [sp, #0]
 80216ea:	3202      	adds	r2, #2
 80216ec:	785b      	ldrb	r3, [r3, #1]
 80216ee:	9200      	str	r2, [sp, #0]
 80216f0:	e7e7      	b.n	80216c2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80216f2:	2204      	movs	r2, #4
 80216f4:	9905      	ldr	r1, [sp, #20]
 80216f6:	459c      	cmp	ip, r3
 80216f8:	f04f 0900 	mov.w	r9, #0
 80216fc:	4615      	mov	r5, r2
 80216fe:	9a02      	ldr	r2, [sp, #8]
 8021700:	bf94      	ite	ls
 8021702:	eba3 0b0c 	subls.w	fp, r3, ip
 8021706:	ebac 0603 	subhi.w	r6, ip, r3
 802170a:	fb15 1202 	smlabb	r2, r5, r2, r1
 802170e:	9904      	ldr	r1, [sp, #16]
 8021710:	bf9c      	itt	ls
 8021712:	fa1f fb8b 	uxthls.w	fp, fp
 8021716:	4626      	movls	r6, r4
 8021718:	5889      	ldr	r1, [r1, r2]
 802171a:	bf86      	itte	hi
 802171c:	b2b6      	uxthhi	r6, r6
 802171e:	46a3      	movhi	fp, r4
 8021720:	f8cd c00c 	strls.w	ip, [sp, #12]
 8021724:	ea4f 6211 	mov.w	r2, r1, lsr #24
 8021728:	bf88      	it	hi
 802172a:	9303      	strhi	r3, [sp, #12]
 802172c:	0e0d      	lsrs	r5, r1, #24
 802172e:	9206      	str	r2, [sp, #24]
 8021730:	fa5f fe81 	uxtb.w	lr, r1
 8021734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021736:	436a      	muls	r2, r5
 8021738:	1c55      	adds	r5, r2, #1
 802173a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 802173e:	122d      	asrs	r5, r5, #8
 8021740:	b2ea      	uxtb	r2, r5
 8021742:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021744:	b2aa      	uxth	r2, r5
 8021746:	9208      	str	r2, [sp, #32]
 8021748:	fb0e f205 	mul.w	r2, lr, r5
 802174c:	920a      	str	r2, [sp, #40]	@ 0x28
 802174e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8021752:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8021756:	fb05 f702 	mul.w	r7, r5, r2
 802175a:	0212      	lsls	r2, r2, #8
 802175c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8021760:	970c      	str	r7, [sp, #48]	@ 0x30
 8021762:	fb05 f701 	mul.w	r7, r5, r1
 8021766:	ea42 020e 	orr.w	r2, r2, lr
 802176a:	970d      	str	r7, [sp, #52]	@ 0x34
 802176c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8021770:	9207      	str	r2, [sp, #28]
 8021772:	9a03      	ldr	r2, [sp, #12]
 8021774:	4591      	cmp	r9, r2
 8021776:	d048      	beq.n	802180a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x256>
 8021778:	9a06      	ldr	r2, [sp, #24]
 802177a:	b14a      	cbz	r2, 8021790 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 802177c:	2dff      	cmp	r5, #255	@ 0xff
 802177e:	d004      	beq.n	802178a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8021780:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 8021784:	ea5f 6e12 	movs.w	lr, r2, lsr #24
 8021788:	d105      	bne.n	8021796 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1e2>
 802178a:	9a07      	ldr	r2, [sp, #28]
 802178c:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
 8021790:	f109 0901 	add.w	r9, r9, #1
 8021794:	e7ed      	b.n	8021772 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1be>
 8021796:	2d00      	cmp	r5, #0
 8021798:	d0fa      	beq.n	8021790 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 802179a:	9908      	ldr	r1, [sp, #32]
 802179c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802179e:	fb1e f101 	smulbb	r1, lr, r1
 80217a2:	eb07 080e 	add.w	r8, r7, lr
 80217a6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80217a8:	b289      	uxth	r1, r1
 80217aa:	f101 0a01 	add.w	sl, r1, #1
 80217ae:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 80217b2:	1209      	asrs	r1, r1, #8
 80217b4:	ebae 0a01 	sub.w	sl, lr, r1
 80217b8:	eba8 0801 	sub.w	r8, r8, r1
 80217bc:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80217c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80217c2:	fa5f f888 	uxtb.w	r8, r8
 80217c6:	fb0a 1e0e 	mla	lr, sl, lr, r1
 80217ca:	b2d1      	uxtb	r1, r2
 80217cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80217d0:	fb0a 7101 	mla	r1, sl, r1, r7
 80217d4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80217d6:	fbbe fef8 	udiv	lr, lr, r8
 80217da:	fbb1 f1f8 	udiv	r1, r1, r8
 80217de:	fb0a 7202 	mla	r2, sl, r2, r7
 80217e2:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80217e6:	b2c9      	uxtb	r1, r1
 80217e8:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
 80217ec:	ea41 6108 	orr.w	r1, r1, r8, lsl #24
 80217f0:	fbb2 f2f8 	udiv	r2, r2, r8
 80217f4:	ea4e 0101 	orr.w	r1, lr, r1
 80217f8:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 80217fc:	fa1f fe8e 	uxth.w	lr, lr
 8021800:	ea41 010e 	orr.w	r1, r1, lr
 8021804:	f840 1029 	str.w	r1, [r0, r9, lsl #2]
 8021808:	e7c2      	b.n	8021790 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 802180a:	459c      	cmp	ip, r3
 802180c:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8021810:	f63f af66 	bhi.w	80216e0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021814:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8021818:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 802181c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802181e:	1ba4      	subs	r4, r4, r6
 8021820:	9a01      	ldr	r2, [sp, #4]
 8021822:	881b      	ldrh	r3, [r3, #0]
 8021824:	b2a4      	uxth	r4, r4
 8021826:	1a9b      	subs	r3, r3, r2
 8021828:	2c00      	cmp	r4, #0
 802182a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802182e:	bf18      	it	ne
 8021830:	2600      	movne	r6, #0
 8021832:	e755      	b.n	80216e0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021834:	4b03      	ldr	r3, [pc, #12]	@ (8021844 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x290>)
 8021836:	6818      	ldr	r0, [r3, #0]
 8021838:	6803      	ldr	r3, [r0, #0]
 802183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802183c:	4798      	blx	r3
 802183e:	b015      	add	sp, #84	@ 0x54
 8021840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021844:	200122c4 	.word	0x200122c4
 8021848:	200122be 	.word	0x200122be

0802184c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021850:	461c      	mov	r4, r3
 8021852:	b091      	sub	sp, #68	@ 0x44
 8021854:	460f      	mov	r7, r1
 8021856:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021858:	6820      	ldr	r0, [r4, #0]
 802185a:	6861      	ldr	r1, [r4, #4]
 802185c:	9207      	str	r2, [sp, #28]
 802185e:	aa0c      	add	r2, sp, #48	@ 0x30
 8021860:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8021864:	c203      	stmia	r2!, {r0, r1}
 8021866:	6818      	ldr	r0, [r3, #0]
 8021868:	aa0e      	add	r2, sp, #56	@ 0x38
 802186a:	6859      	ldr	r1, [r3, #4]
 802186c:	c203      	stmia	r2!, {r0, r1}
 802186e:	a80c      	add	r0, sp, #48	@ 0x30
 8021870:	f7f9 fa48 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021874:	4621      	mov	r1, r4
 8021876:	a80e      	add	r0, sp, #56	@ 0x38
 8021878:	f7f9 fa6c 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802187c:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8021880:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8021884:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021888:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 802188c:	bfdb      	ittet	le
 802188e:	b2b3      	uxthle	r3, r6
 8021890:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021894:	2301      	movgt	r3, #1
 8021896:	fb92 f3f3 	sdivle	r3, r2, r3
 802189a:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 802189e:	441d      	add	r5, r3
 80218a0:	fb92 f1f3 	sdiv	r1, r2, r3
 80218a4:	fa1f fc81 	uxth.w	ip, r1
 80218a8:	3d01      	subs	r5, #1
 80218aa:	fb0c 2413 	mls	r4, ip, r3, r2
 80218ae:	4661      	mov	r1, ip
 80218b0:	fb14 f406 	smulbb	r4, r4, r6
 80218b4:	4404      	add	r4, r0
 80218b6:	fb95 f5f3 	sdiv	r5, r5, r3
 80218ba:	b2a4      	uxth	r4, r4
 80218bc:	b121      	cbz	r1, 80218c8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x7c>
 80218be:	9b07      	ldr	r3, [sp, #28]
 80218c0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80218c4:	ba1b      	rev	r3, r3
 80218c6:	441f      	add	r7, r3
 80218c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80218cc:	b2ad      	uxth	r5, r5
 80218ce:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 80218d2:	4418      	add	r0, r3
 80218d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80218d8:	00ad      	lsls	r5, r5, #2
 80218da:	441a      	add	r2, r3
 80218dc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80218e0:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80218e4:	9303      	str	r3, [sp, #12]
 80218e6:	4b77      	ldr	r3, [pc, #476]	@ (8021ac4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 80218e8:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80218ec:	6818      	ldr	r0, [r3, #0]
 80218ee:	6803      	ldr	r3, [r0, #0]
 80218f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218f2:	4798      	blx	r3
 80218f4:	4a74      	ldr	r2, [pc, #464]	@ (8021ac8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80218f6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 80218fa:	2c00      	cmp	r4, #0
 80218fc:	8811      	ldrh	r1, [r2, #0]
 80218fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021902:	fb06 f601 	mul.w	r6, r6, r1
 8021906:	fb01 c303 	mla	r3, r1, r3, ip
 802190a:	bf18      	it	ne
 802190c:	f04f 0c00 	movne.w	ip, #0
 8021910:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021912:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021916:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 802191a:	930a      	str	r3, [sp, #40]	@ 0x28
 802191c:	f105 0304 	add.w	r3, r5, #4
 8021920:	9308      	str	r3, [sp, #32]
 8021922:	9b03      	ldr	r3, [sp, #12]
 8021924:	bf08      	it	eq
 8021926:	469c      	moveq	ip, r3
 8021928:	ea4f 630b 	mov.w	r3, fp, lsl #24
 802192c:	fa1f fc8c 	uxth.w	ip, ip
 8021930:	9309      	str	r3, [sp, #36]	@ 0x24
 8021932:	2300      	movs	r3, #0
 8021934:	9304      	str	r3, [sp, #16]
 8021936:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021938:	4290      	cmp	r0, r2
 802193a:	f080 80bb 	bcs.w	8021ab4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 802193e:	b95b      	cbnz	r3, 8021958 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 8021940:	783a      	ldrb	r2, [r7, #0]
 8021942:	0993      	lsrs	r3, r2, #6
 8021944:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021948:	9204      	str	r2, [sp, #16]
 802194a:	1e5a      	subs	r2, r3, #1
 802194c:	2a02      	cmp	r2, #2
 802194e:	bf8d      	iteet	hi
 8021950:	787b      	ldrbhi	r3, [r7, #1]
 8021952:	3701      	addls	r7, #1
 8021954:	b29b      	uxthls	r3, r3
 8021956:	3702      	addhi	r7, #2
 8021958:	b184      	cbz	r4, 802197c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x130>
 802195a:	429c      	cmp	r4, r3
 802195c:	d907      	bls.n	802196e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x122>
 802195e:	1ae4      	subs	r4, r4, r3
 8021960:	4665      	mov	r5, ip
 8021962:	2300      	movs	r3, #0
 8021964:	b2a4      	uxth	r4, r4
 8021966:	9302      	str	r3, [sp, #8]
 8021968:	9b02      	ldr	r3, [sp, #8]
 802196a:	46ac      	mov	ip, r5
 802196c:	e7e3      	b.n	8021936 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xea>
 802196e:	1b1c      	subs	r4, r3, r4
 8021970:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8021974:	b2a3      	uxth	r3, r4
 8021976:	2400      	movs	r4, #0
 8021978:	9302      	str	r3, [sp, #8]
 802197a:	e7f5      	b.n	8021968 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 802197c:	2203      	movs	r2, #3
 802197e:	9908      	ldr	r1, [sp, #32]
 8021980:	459c      	cmp	ip, r3
 8021982:	4615      	mov	r5, r2
 8021984:	9a04      	ldr	r2, [sp, #16]
 8021986:	fb15 1202 	smlabb	r2, r5, r2, r1
 802198a:	9907      	ldr	r1, [sp, #28]
 802198c:	bf8c      	ite	hi
 802198e:	ebac 0503 	subhi.w	r5, ip, r3
 8021992:	4625      	movls	r5, r4
 8021994:	eb01 0a02 	add.w	sl, r1, r2
 8021998:	bf95      	itete	ls
 802199a:	eba3 020c 	subls.w	r2, r3, ip
 802199e:	b2ad      	uxthhi	r5, r5
 80219a0:	b292      	uxthls	r2, r2
 80219a2:	e9cd 3401 	strdhi	r3, r4, [sp, #4]
 80219a6:	bf98      	it	ls
 80219a8:	e9cd c201 	strdls	ip, r2, [sp, #4]
 80219ac:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80219b0:	d113      	bne.n	80219da <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 80219b2:	9901      	ldr	r1, [sp, #4]
 80219b4:	4606      	mov	r6, r0
 80219b6:	b1a9      	cbz	r1, 80219e4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80219b8:	f89a 2000 	ldrb.w	r2, [sl]
 80219bc:	3901      	subs	r1, #1
 80219be:	f89a e002 	ldrb.w	lr, [sl, #2]
 80219c2:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80219c6:	b289      	uxth	r1, r1
 80219c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80219cc:	f89a e001 	ldrb.w	lr, [sl, #1]
 80219d0:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 80219d4:	f846 2b04 	str.w	r2, [r6], #4
 80219d8:	e7ed      	b.n	80219b6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x16a>
 80219da:	9a01      	ldr	r2, [sp, #4]
 80219dc:	9000      	str	r0, [sp, #0]
 80219de:	9205      	str	r2, [sp, #20]
 80219e0:	9a05      	ldr	r2, [sp, #20]
 80219e2:	b9a2      	cbnz	r2, 8021a0e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80219e4:	9a01      	ldr	r2, [sp, #4]
 80219e6:	459c      	cmp	ip, r3
 80219e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80219ec:	d8bc      	bhi.n	8021968 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 80219ee:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 80219f2:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
 80219f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219f8:	1b64      	subs	r4, r4, r5
 80219fa:	9a03      	ldr	r2, [sp, #12]
 80219fc:	881b      	ldrh	r3, [r3, #0]
 80219fe:	b2a4      	uxth	r4, r4
 8021a00:	1a9b      	subs	r3, r3, r2
 8021a02:	2c00      	cmp	r4, #0
 8021a04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021a08:	bf18      	it	ne
 8021a0a:	2500      	movne	r5, #0
 8021a0c:	e7ac      	b.n	8021968 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021a0e:	9a00      	ldr	r2, [sp, #0]
 8021a10:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8021a14:	6812      	ldr	r2, [r2, #0]
 8021a16:	9106      	str	r1, [sp, #24]
 8021a18:	ea5f 6912 	movs.w	r9, r2, lsr #24
 8021a1c:	f89a 6000 	ldrb.w	r6, [sl]
 8021a20:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8021a24:	d110      	bne.n	8021a48 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fc>
 8021a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a28:	4316      	orrs	r6, r2
 8021a2a:	9a06      	ldr	r2, [sp, #24]
 8021a2c:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 8021a30:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8021a34:	9a00      	ldr	r2, [sp, #0]
 8021a36:	6016      	str	r6, [r2, #0]
 8021a38:	9a00      	ldr	r2, [sp, #0]
 8021a3a:	3204      	adds	r2, #4
 8021a3c:	9200      	str	r2, [sp, #0]
 8021a3e:	9a05      	ldr	r2, [sp, #20]
 8021a40:	3a01      	subs	r2, #1
 8021a42:	b292      	uxth	r2, r2
 8021a44:	9205      	str	r2, [sp, #20]
 8021a46:	e7cb      	b.n	80219e0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8021a48:	fb1b f101 	smulbb	r1, fp, r1
 8021a4c:	fb0b f809 	mul.w	r8, fp, r9
 8021a50:	fb16 f60b 	smulbb	r6, r6, fp
 8021a54:	f108 0e01 	add.w	lr, r8, #1
 8021a58:	eb0e 2e28 	add.w	lr, lr, r8, asr #8
 8021a5c:	eb0b 0809 	add.w	r8, fp, r9
 8021a60:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021a64:	eba9 090e 	sub.w	r9, r9, lr
 8021a68:	eba8 080e 	sub.w	r8, r8, lr
 8021a6c:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8021a70:	fa5f f888 	uxtb.w	r8, r8
 8021a74:	fb09 1e0e 	mla	lr, r9, lr, r1
 8021a78:	b2d1      	uxtb	r1, r2
 8021a7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021a7e:	fb09 6601 	mla	r6, r9, r1, r6
 8021a82:	9906      	ldr	r1, [sp, #24]
 8021a84:	fbbe fef8 	udiv	lr, lr, r8
 8021a88:	fbb6 f6f8 	udiv	r6, r6, r8
 8021a8c:	fb1b f101 	smulbb	r1, fp, r1
 8021a90:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8021a94:	b2f6      	uxtb	r6, r6
 8021a96:	fb09 1202 	mla	r2, r9, r2, r1
 8021a9a:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
 8021a9e:	ea46 6608 	orr.w	r6, r6, r8, lsl #24
 8021aa2:	fbb2 f2f8 	udiv	r2, r2, r8
 8021aa6:	ea4e 0e06 	orr.w	lr, lr, r6
 8021aaa:	0216      	lsls	r6, r2, #8
 8021aac:	b2b6      	uxth	r6, r6
 8021aae:	ea4e 0606 	orr.w	r6, lr, r6
 8021ab2:	e7bf      	b.n	8021a34 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e8>
 8021ab4:	4b03      	ldr	r3, [pc, #12]	@ (8021ac4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 8021ab6:	6818      	ldr	r0, [r3, #0]
 8021ab8:	6803      	ldr	r3, [r0, #0]
 8021aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021abc:	4798      	blx	r3
 8021abe:	b011      	add	sp, #68	@ 0x44
 8021ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ac4:	200122c4 	.word	0x200122c4
 8021ac8:	200122be 	.word	0x200122be

08021acc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ad0:	b09d      	sub	sp, #116	@ 0x74
 8021ad2:	461c      	mov	r4, r3
 8021ad4:	4681      	mov	r9, r0
 8021ad6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021ad8:	6820      	ldr	r0, [r4, #0]
 8021ada:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 8021ade:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8021ae2:	6861      	ldr	r1, [r4, #4]
 8021ae4:	9202      	str	r2, [sp, #8]
 8021ae6:	aa18      	add	r2, sp, #96	@ 0x60
 8021ae8:	c203      	stmia	r2!, {r0, r1}
 8021aea:	6818      	ldr	r0, [r3, #0]
 8021aec:	aa1a      	add	r2, sp, #104	@ 0x68
 8021aee:	6859      	ldr	r1, [r3, #4]
 8021af0:	c203      	stmia	r2!, {r0, r1}
 8021af2:	a818      	add	r0, sp, #96	@ 0x60
 8021af4:	f7f9 f906 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021af8:	4621      	mov	r1, r4
 8021afa:	a81a      	add	r0, sp, #104	@ 0x68
 8021afc:	f7f9 f92a 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b00:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8021b04:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8021b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b0c:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8021b10:	bfdb      	ittet	le
 8021b12:	b29a      	uxthle	r2, r3
 8021b14:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021b18:	2201      	movgt	r2, #1
 8021b1a:	fb91 f2f2 	sdivle	r2, r1, r2
 8021b1e:	9205      	str	r2, [sp, #20]
 8021b20:	9805      	ldr	r0, [sp, #20]
 8021b22:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021b26:	9905      	ldr	r1, [sp, #20]
 8021b28:	fb92 f0f0 	sdiv	r0, r2, r0
 8021b2c:	b280      	uxth	r0, r0
 8021b2e:	440d      	add	r5, r1
 8021b30:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021b32:	3d01      	subs	r5, #1
 8021b34:	9805      	ldr	r0, [sp, #20]
 8021b36:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021b38:	fb04 2410 	mls	r4, r4, r0, r2
 8021b3c:	fb95 f5f1 	sdiv	r5, r5, r1
 8021b40:	fb14 f403 	smulbb	r4, r4, r3
 8021b44:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8021b48:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8021b4c:	3501      	adds	r5, #1
 8021b4e:	440c      	add	r4, r1
 8021b50:	4419      	add	r1, r3
 8021b52:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8021b56:	b2ad      	uxth	r5, r5
 8021b58:	441a      	add	r2, r3
 8021b5a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021b5e:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021b62:	b2a4      	uxth	r4, r4
 8021b64:	9306      	str	r3, [sp, #24]
 8021b66:	4ba3      	ldr	r3, [pc, #652]	@ (8021df4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x328>)
 8021b68:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021b6c:	6818      	ldr	r0, [r3, #0]
 8021b6e:	6803      	ldr	r3, [r0, #0]
 8021b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021b72:	4798      	blx	r3
 8021b74:	4ba0      	ldr	r3, [pc, #640]	@ (8021df8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x32c>)
 8021b76:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021b7a:	2c00      	cmp	r4, #0
 8021b7c:	8819      	ldrh	r1, [r3, #0]
 8021b7e:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8021b82:	fb06 f601 	mul.w	r6, r6, r1
 8021b86:	fb01 7202 	mla	r2, r1, r2, r7
 8021b8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8021b8c:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8021b90:	4b9a      	ldr	r3, [pc, #616]	@ (8021dfc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x330>)
 8021b92:	bf18      	it	ne
 8021b94:	2000      	movne	r0, #0
 8021b96:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 8021b9a:	eba3 0309 	sub.w	r3, r3, r9
 8021b9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8021ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021ba2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021ba4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8021ba8:	f105 0204 	add.w	r2, r5, #4
 8021bac:	9210      	str	r2, [sp, #64]	@ 0x40
 8021bae:	9a06      	ldr	r2, [sp, #24]
 8021bb0:	bf08      	it	eq
 8021bb2:	4610      	moveq	r0, r2
 8021bb4:	9a02      	ldr	r2, [sp, #8]
 8021bb6:	0612      	lsls	r2, r2, #24
 8021bb8:	b280      	uxth	r0, r0
 8021bba:	9214      	str	r2, [sp, #80]	@ 0x50
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	920d      	str	r2, [sp, #52]	@ 0x34
 8021bc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021bc4:	fa12 f383 	uxtah	r3, r2, r3
 8021bc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021bca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021bce:	3304      	adds	r3, #4
 8021bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8021bd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021bd4:	459b      	cmp	fp, r3
 8021bd6:	f080 8187 	bcs.w	8021ee8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x41c>
 8021bda:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021bde:	2700      	movs	r7, #0
 8021be0:	9a05      	ldr	r2, [sp, #20]
 8021be2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021be4:	fbb4 f3f3 	udiv	r3, r4, r3
 8021be8:	1ad3      	subs	r3, r2, r3
 8021bea:	7809      	ldrb	r1, [r1, #0]
 8021bec:	b29b      	uxth	r3, r3
 8021bee:	910e      	str	r1, [sp, #56]	@ 0x38
 8021bf0:	3101      	adds	r1, #1
 8021bf2:	9315      	str	r3, [sp, #84]	@ 0x54
 8021bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021bf6:	9107      	str	r1, [sp, #28]
 8021bf8:	785a      	ldrb	r2, [r3, #1]
 8021bfa:	789b      	ldrb	r3, [r3, #2]
 8021bfc:	021b      	lsls	r3, r3, #8
 8021bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021c02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021c04:	78d2      	ldrb	r2, [r2, #3]
 8021c06:	4313      	orrs	r3, r2
 8021c08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021c0a:	441a      	add	r2, r3
 8021c0c:	1c51      	adds	r1, r2, #1
 8021c0e:	7852      	ldrb	r2, [r2, #1]
 8021c10:	9104      	str	r1, [sp, #16]
 8021c12:	0212      	lsls	r2, r2, #8
 8021c14:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021c16:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021c1a:	5ccb      	ldrb	r3, [r1, r3]
 8021c1c:	431a      	orrs	r2, r3
 8021c1e:	b293      	uxth	r3, r2
 8021c20:	f889 2804 	strb.w	r2, [r9, #2052]	@ 0x804
 8021c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c26:	2300      	movs	r3, #0
 8021c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c2a:	2301      	movs	r3, #1
 8021c2c:	9300      	str	r3, [sp, #0]
 8021c2e:	9303      	str	r3, [sp, #12]
 8021c30:	469c      	mov	ip, r3
 8021c32:	2c00      	cmp	r4, #0
 8021c34:	d078      	beq.n	8021d28 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25c>
 8021c36:	42a3      	cmp	r3, r4
 8021c38:	d26a      	bcs.n	8021d10 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 8021c3a:	1ae4      	subs	r4, r4, r3
 8021c3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c3e:	4606      	mov	r6, r0
 8021c40:	455b      	cmp	r3, fp
 8021c42:	b2a4      	uxth	r4, r4
 8021c44:	d802      	bhi.n	8021c4c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8021c46:	e06d      	b.n	8021d24 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	d15c      	bne.n	8021d06 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 8021c4c:	9b04      	ldr	r3, [sp, #16]
 8021c4e:	9a03      	ldr	r2, [sp, #12]
 8021c50:	785b      	ldrb	r3, [r3, #1]
 8021c52:	f1c2 0207 	rsb	r2, r2, #7
 8021c56:	9903      	ldr	r1, [sp, #12]
 8021c58:	4093      	lsls	r3, r2
 8021c5a:	005b      	lsls	r3, r3, #1
 8021c5c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021c60:	9b04      	ldr	r3, [sp, #16]
 8021c62:	781b      	ldrb	r3, [r3, #0]
 8021c64:	410b      	asrs	r3, r1
 8021c66:	b2db      	uxtb	r3, r3
 8021c68:	4313      	orrs	r3, r2
 8021c6a:	9a03      	ldr	r2, [sp, #12]
 8021c6c:	3201      	adds	r2, #1
 8021c6e:	b299      	uxth	r1, r3
 8021c70:	b2d2      	uxtb	r2, r2
 8021c72:	2a08      	cmp	r2, #8
 8021c74:	9203      	str	r2, [sp, #12]
 8021c76:	9a04      	ldr	r2, [sp, #16]
 8021c78:	bf09      	itett	eq
 8021c7a:	3202      	addeq	r2, #2
 8021c7c:	3201      	addne	r2, #1
 8021c7e:	9204      	streq	r2, [sp, #16]
 8021c80:	2200      	moveq	r2, #0
 8021c82:	bf14      	ite	ne
 8021c84:	9204      	strne	r2, [sp, #16]
 8021c86:	9203      	streq	r2, [sp, #12]
 8021c88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021c8a:	428a      	cmp	r2, r1
 8021c8c:	d309      	bcc.n	8021ca2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d6>
 8021c8e:	f889 3804 	strb.w	r3, [r9, #2052]	@ 0x804
 8021c92:	2301      	movs	r3, #1
 8021c94:	9a07      	ldr	r2, [sp, #28]
 8021c96:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8021c9a:	d30e      	bcc.n	8021cba <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8021c9c:	9300      	str	r3, [sp, #0]
 8021c9e:	2200      	movs	r2, #0
 8021ca0:	e032      	b.n	8021d08 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 8021ca2:	9b07      	ldr	r3, [sp, #28]
 8021ca4:	428b      	cmp	r3, r1
 8021ca6:	d818      	bhi.n	8021cda <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20e>
 8021ca8:	9b00      	ldr	r3, [sp, #0]
 8021caa:	f899 2804 	ldrb.w	r2, [r9, #2052]	@ 0x804
 8021cae:	444b      	add	r3, r9
 8021cb0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8021cb4:	9b00      	ldr	r3, [sp, #0]
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	b29b      	uxth	r3, r3
 8021cba:	9a07      	ldr	r2, [sp, #28]
 8021cbc:	f899 0804 	ldrb.w	r0, [r9, #2052]	@ 0x804
 8021cc0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021cc4:	7110      	strb	r0, [r2, #4]
 8021cc6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021cc8:	80d0      	strh	r0, [r2, #6]
 8021cca:	9800      	ldr	r0, [sp, #0]
 8021ccc:	3001      	adds	r0, #1
 8021cce:	7150      	strb	r0, [r2, #5]
 8021cd0:	9a07      	ldr	r2, [sp, #28]
 8021cd2:	3201      	adds	r2, #1
 8021cd4:	b292      	uxth	r2, r2
 8021cd6:	9207      	str	r2, [sp, #28]
 8021cd8:	e7e0      	b.n	8021c9c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 8021cda:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8021cde:	460a      	mov	r2, r1
 8021ce0:	795b      	ldrb	r3, [r3, #5]
 8021ce2:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 8021ce6:	4448      	add	r0, r9
 8021ce8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8021cea:	4405      	add	r5, r0
 8021cec:	2d00      	cmp	r5, #0
 8021cee:	dd06      	ble.n	8021cfe <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x232>
 8021cf0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021cf4:	7915      	ldrb	r5, [r2, #4]
 8021cf6:	f800 5d01 	strb.w	r5, [r0, #-1]!
 8021cfa:	88d2      	ldrh	r2, [r2, #6]
 8021cfc:	e7f4      	b.n	8021ce8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x21c>
 8021cfe:	f889 2804 	strb.w	r2, [r9, #2052]	@ 0x804
 8021d02:	b29b      	uxth	r3, r3
 8021d04:	e7c6      	b.n	8021c94 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021d06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021d08:	4630      	mov	r0, r6
 8021d0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021d0c:	4617      	mov	r7, r2
 8021d0e:	e78f      	b.n	8021c30 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8021d10:	1b1b      	subs	r3, r3, r4
 8021d12:	4427      	add	r7, r4
 8021d14:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8021d18:	b29b      	uxth	r3, r3
 8021d1a:	b2ba      	uxth	r2, r7
 8021d1c:	2400      	movs	r4, #0
 8021d1e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021d20:	458b      	cmp	fp, r1
 8021d22:	d391      	bcc.n	8021c48 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17c>
 8021d24:	4630      	mov	r0, r6
 8021d26:	e754      	b.n	8021bd2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 8021d28:	4283      	cmp	r3, r0
 8021d2a:	9a02      	ldr	r2, [sp, #8]
 8021d2c:	bf29      	itett	cs
 8021d2e:	1a1b      	subcs	r3, r3, r0
 8021d30:	eba0 060c 	subcc.w	r6, r0, ip
 8021d34:	9008      	strcs	r0, [sp, #32]
 8021d36:	4626      	movcs	r6, r4
 8021d38:	bf2f      	iteee	cs
 8021d3a:	b29b      	uxthcs	r3, r3
 8021d3c:	f8cd c020 	strcc.w	ip, [sp, #32]
 8021d40:	b2b6      	uxthcc	r6, r6
 8021d42:	4623      	movcc	r3, r4
 8021d44:	2aff      	cmp	r2, #255	@ 0xff
 8021d46:	d02c      	beq.n	8021da2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021d48:	2200      	movs	r2, #0
 8021d4a:	9201      	str	r2, [sp, #4]
 8021d4c:	9a01      	ldr	r2, [sp, #4]
 8021d4e:	9908      	ldr	r1, [sp, #32]
 8021d50:	9c01      	ldr	r4, [sp, #4]
 8021d52:	18ba      	adds	r2, r7, r2
 8021d54:	42a1      	cmp	r1, r4
 8021d56:	b292      	uxth	r2, r2
 8021d58:	d152      	bne.n	8021e00 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x334>
 8021d5a:	4584      	cmp	ip, r0
 8021d5c:	eb0b 0b81 	add.w	fp, fp, r1, lsl #2
 8021d60:	d3dc      	bcc.n	8021d1c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 8021d62:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021d64:	9806      	ldr	r0, [sp, #24]
 8021d66:	8809      	ldrh	r1, [r1, #0]
 8021d68:	1a09      	subs	r1, r1, r0
 8021d6a:	eb0b 0b81 	add.w	fp, fp, r1, lsl #2
 8021d6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021d70:	3101      	adds	r1, #1
 8021d72:	9109      	str	r1, [sp, #36]	@ 0x24
 8021d74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d76:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021d78:	4281      	cmp	r1, r0
 8021d7a:	f040 80ab 	bne.w	8021ed4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x408>
 8021d7e:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 8021d82:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8021d86:	9b06      	ldr	r3, [sp, #24]
 8021d88:	eba4 040c 	sub.w	r4, r4, ip
 8021d8c:	b2a4      	uxth	r4, r4
 8021d8e:	2c00      	cmp	r4, #0
 8021d90:	bf08      	it	eq
 8021d92:	4618      	moveq	r0, r3
 8021d94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021d96:	bf18      	it	ne
 8021d98:	2000      	movne	r0, #0
 8021d9a:	3301      	adds	r3, #1
 8021d9c:	b280      	uxth	r0, r0
 8021d9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021da0:	e70e      	b.n	8021bc0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf4>
 8021da2:	9a08      	ldr	r2, [sp, #32]
 8021da4:	465d      	mov	r5, fp
 8021da6:	18ba      	adds	r2, r7, r2
 8021da8:	b292      	uxth	r2, r2
 8021daa:	4297      	cmp	r7, r2
 8021dac:	f000 8090 	beq.w	8021ed0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x404>
 8021db0:	f107 0e01 	add.w	lr, r7, #1
 8021db4:	444f      	add	r7, r9
 8021db6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021db8:	f897 1804 	ldrb.w	r1, [r7, #2052]	@ 0x804
 8021dbc:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8021dc0:	10e1      	asrs	r1, r4, #3
 8021dc2:	1227      	asrs	r7, r4, #8
 8021dc4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021dc8:	00e4      	lsls	r4, r4, #3
 8021dca:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021dce:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8021dd2:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021dd6:	b2e4      	uxtb	r4, r4
 8021dd8:	0209      	lsls	r1, r1, #8
 8021dda:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021dde:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8021de2:	fa1f f78e 	uxth.w	r7, lr
 8021de6:	4321      	orrs	r1, r4
 8021de8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8021dec:	f845 1b04 	str.w	r1, [r5], #4
 8021df0:	e7db      	b.n	8021daa <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2de>
 8021df2:	bf00      	nop
 8021df4:	200122c4 	.word	0x200122c4
 8021df8:	200122be 	.word	0x200122be
 8021dfc:	fffff7fb 	.word	0xfffff7fb
 8021e00:	444a      	add	r2, r9
 8021e02:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021e04:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021e08:	f831 8012 	ldrh.w	r8, [r1, r2, lsl #1]
 8021e0c:	9a01      	ldr	r2, [sp, #4]
 8021e0e:	ea4f 0ec8 	mov.w	lr, r8, lsl #3
 8021e12:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
 8021e16:	ea4f 02e8 	mov.w	r2, r8, asr #3
 8021e1a:	ea4f 2528 	mov.w	r5, r8, asr #8
 8021e1e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021e22:	fa5f fe8e 	uxtb.w	lr, lr
 8021e26:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021e2a:	ea5f 6a11 	movs.w	sl, r1, lsr #24
 8021e2e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021e32:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8021e36:	9211      	str	r2, [sp, #68]	@ 0x44
 8021e38:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021e3c:	d10c      	bne.n	8021e58 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x38c>
 8021e3e:	0212      	lsls	r2, r2, #8
 8021e40:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8021e42:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8021e46:	ea42 020e 	orr.w	r2, r2, lr
 8021e4a:	430a      	orrs	r2, r1
 8021e4c:	9901      	ldr	r1, [sp, #4]
 8021e4e:	f84b 2021 	str.w	r2, [fp, r1, lsl #2]
 8021e52:	9a01      	ldr	r2, [sp, #4]
 8021e54:	3201      	adds	r2, #1
 8021e56:	e778      	b.n	8021d4a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27e>
 8021e58:	9c02      	ldr	r4, [sp, #8]
 8021e5a:	9a02      	ldr	r2, [sp, #8]
 8021e5c:	fb04 f80a 	mul.w	r8, r4, sl
 8021e60:	fb12 f505 	smulbb	r5, r2, r5
 8021e64:	fb12 fe0e 	smulbb	lr, r2, lr
 8021e68:	f108 0401 	add.w	r4, r8, #1
 8021e6c:	eb04 2428 	add.w	r4, r4, r8, asr #8
 8021e70:	eb02 080a 	add.w	r8, r2, sl
 8021e74:	1224      	asrs	r4, r4, #8
 8021e76:	ebaa 0a04 	sub.w	sl, sl, r4
 8021e7a:	eba8 0804 	sub.w	r8, r8, r4
 8021e7e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8021e82:	fa5f f888 	uxtb.w	r8, r8
 8021e86:	fb0a 5504 	mla	r5, sl, r4, r5
 8021e8a:	b2cc      	uxtb	r4, r1
 8021e8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021e90:	fb0a ee04 	mla	lr, sl, r4, lr
 8021e94:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e96:	fbb5 f5f8 	udiv	r5, r5, r8
 8021e9a:	fb12 f204 	smulbb	r2, r2, r4
 8021e9e:	042d      	lsls	r5, r5, #16
 8021ea0:	fbbe fef8 	udiv	lr, lr, r8
 8021ea4:	fb0a 2101 	mla	r1, sl, r1, r2
 8021ea8:	fa5f fe8e 	uxtb.w	lr, lr
 8021eac:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 8021eb0:	9a01      	ldr	r2, [sp, #4]
 8021eb2:	ea4e 6e08 	orr.w	lr, lr, r8, lsl #24
 8021eb6:	fbb1 f1f8 	udiv	r1, r1, r8
 8021eba:	ea45 050e 	orr.w	r5, r5, lr
 8021ebe:	ea4f 2e01 	mov.w	lr, r1, lsl #8
 8021ec2:	fa1f fe8e 	uxth.w	lr, lr
 8021ec6:	ea45 050e 	orr.w	r5, r5, lr
 8021eca:	f84b 5022 	str.w	r5, [fp, r2, lsl #2]
 8021ece:	e7c0      	b.n	8021e52 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x386>
 8021ed0:	9908      	ldr	r1, [sp, #32]
 8021ed2:	e742      	b.n	8021d5a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28e>
 8021ed4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8021ed8:	f8bd 4064 	ldrh.w	r4, [sp, #100]	@ 0x64
 8021edc:	1ba4      	subs	r4, r4, r6
 8021ede:	b2a4      	uxth	r4, r4
 8021ee0:	2c00      	cmp	r4, #0
 8021ee2:	bf18      	it	ne
 8021ee4:	2600      	movne	r6, #0
 8021ee6:	e71a      	b.n	8021d1e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x252>
 8021ee8:	4b03      	ldr	r3, [pc, #12]	@ (8021ef8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x42c>)
 8021eea:	6818      	ldr	r0, [r3, #0]
 8021eec:	6803      	ldr	r3, [r0, #0]
 8021eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ef0:	4798      	blx	r3
 8021ef2:	b01d      	add	sp, #116	@ 0x74
 8021ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ef8:	200122c4 	.word	0x200122c4

08021efc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f00:	b09f      	sub	sp, #124	@ 0x7c
 8021f02:	461c      	mov	r4, r3
 8021f04:	4680      	mov	r8, r0
 8021f06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021f08:	6820      	ldr	r0, [r4, #0]
 8021f0a:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 8021f0e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8021f12:	6861      	ldr	r1, [r4, #4]
 8021f14:	9215      	str	r2, [sp, #84]	@ 0x54
 8021f16:	aa1a      	add	r2, sp, #104	@ 0x68
 8021f18:	c203      	stmia	r2!, {r0, r1}
 8021f1a:	6818      	ldr	r0, [r3, #0]
 8021f1c:	aa1c      	add	r2, sp, #112	@ 0x70
 8021f1e:	6859      	ldr	r1, [r3, #4]
 8021f20:	c203      	stmia	r2!, {r0, r1}
 8021f22:	a81a      	add	r0, sp, #104	@ 0x68
 8021f24:	f7f8 feee 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f28:	4621      	mov	r1, r4
 8021f2a:	a81c      	add	r0, sp, #112	@ 0x70
 8021f2c:	f7f8 ff12 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f30:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021f34:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 8021f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021f3c:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 8021f40:	bfdb      	ittet	le
 8021f42:	b29a      	uxthle	r2, r3
 8021f44:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021f48:	2201      	movgt	r2, #1
 8021f4a:	fb91 f2f2 	sdivle	r2, r1, r2
 8021f4e:	9204      	str	r2, [sp, #16]
 8021f50:	9804      	ldr	r0, [sp, #16]
 8021f52:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8021f56:	9904      	ldr	r1, [sp, #16]
 8021f58:	fb92 f0f0 	sdiv	r0, r2, r0
 8021f5c:	b280      	uxth	r0, r0
 8021f5e:	440d      	add	r5, r1
 8021f60:	9010      	str	r0, [sp, #64]	@ 0x40
 8021f62:	3d01      	subs	r5, #1
 8021f64:	9804      	ldr	r0, [sp, #16]
 8021f66:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021f68:	fb04 2410 	mls	r4, r4, r0, r2
 8021f6c:	fb95 f5f1 	sdiv	r5, r5, r1
 8021f70:	fb14 f403 	smulbb	r4, r4, r3
 8021f74:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8021f78:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021f7c:	3501      	adds	r5, #1
 8021f7e:	440c      	add	r4, r1
 8021f80:	4419      	add	r1, r3
 8021f82:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8021f86:	b2ad      	uxth	r5, r5
 8021f88:	441a      	add	r2, r3
 8021f8a:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8021f8e:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8021f92:	00ad      	lsls	r5, r5, #2
 8021f94:	9305      	str	r3, [sp, #20]
 8021f96:	b2a4      	uxth	r4, r4
 8021f98:	4bad      	ldr	r3, [pc, #692]	@ (8022250 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x354>)
 8021f9a:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8021f9e:	6818      	ldr	r0, [r3, #0]
 8021fa0:	6803      	ldr	r3, [r0, #0]
 8021fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fa4:	4798      	blx	r3
 8021fa6:	4bab      	ldr	r3, [pc, #684]	@ (8022254 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x358>)
 8021fa8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8021fac:	2c00      	cmp	r4, #0
 8021fae:	8819      	ldrh	r1, [r3, #0]
 8021fb0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8021fb4:	fb06 f601 	mul.w	r6, r6, r1
 8021fb8:	fb01 7202 	mla	r2, r1, r2, r7
 8021fbc:	bf18      	it	ne
 8021fbe:	2100      	movne	r1, #0
 8021fc0:	9318      	str	r3, [sp, #96]	@ 0x60
 8021fc2:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8021fc6:	4ba4      	ldr	r3, [pc, #656]	@ (8022258 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x35c>)
 8021fc8:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 8021fcc:	eba3 0308 	sub.w	r3, r3, r8
 8021fd0:	920c      	str	r2, [sp, #48]	@ 0x30
 8021fd2:	f105 0204 	add.w	r2, r5, #4
 8021fd6:	9319      	str	r3, [sp, #100]	@ 0x64
 8021fd8:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021fda:	9a05      	ldr	r2, [sp, #20]
 8021fdc:	bf08      	it	eq
 8021fde:	4611      	moveq	r1, r2
 8021fe0:	2200      	movs	r2, #0
 8021fe2:	b289      	uxth	r1, r1
 8021fe4:	920e      	str	r2, [sp, #56]	@ 0x38
 8021fe6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021fe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021fea:	fa12 f383 	uxtah	r3, r2, r3
 8021fee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021ff0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ff4:	3304      	adds	r3, #4
 8021ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ffa:	459b      	cmp	fp, r3
 8021ffc:	f080 815e 	bcs.w	80222bc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 8022000:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8022004:	f04f 0901 	mov.w	r9, #1
 8022008:	9a04      	ldr	r2, [sp, #16]
 802200a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802200c:	46cc      	mov	ip, r9
 802200e:	fbb4 f3f3 	udiv	r3, r4, r3
 8022012:	1ad3      	subs	r3, r2, r3
 8022014:	7800      	ldrb	r0, [r0, #0]
 8022016:	b29b      	uxth	r3, r3
 8022018:	900f      	str	r0, [sp, #60]	@ 0x3c
 802201a:	3001      	adds	r0, #1
 802201c:	9314      	str	r3, [sp, #80]	@ 0x50
 802201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022020:	9006      	str	r0, [sp, #24]
 8022022:	785a      	ldrb	r2, [r3, #1]
 8022024:	789b      	ldrb	r3, [r3, #2]
 8022026:	021b      	lsls	r3, r3, #8
 8022028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802202c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802202e:	78d2      	ldrb	r2, [r2, #3]
 8022030:	4313      	orrs	r3, r2
 8022032:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022034:	441a      	add	r2, r3
 8022036:	1c50      	adds	r0, r2, #1
 8022038:	7852      	ldrb	r2, [r2, #1]
 802203a:	9003      	str	r0, [sp, #12]
 802203c:	0212      	lsls	r2, r2, #8
 802203e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022040:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022044:	5cc3      	ldrb	r3, [r0, r3]
 8022046:	431a      	orrs	r2, r3
 8022048:	b293      	uxth	r3, r2
 802204a:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 802204e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022050:	2300      	movs	r3, #0
 8022052:	9307      	str	r3, [sp, #28]
 8022054:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8022058:	2c00      	cmp	r4, #0
 802205a:	d07d      	beq.n	8022158 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 802205c:	45a4      	cmp	ip, r4
 802205e:	d26c      	bcs.n	802213a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 8022060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022062:	eba4 040c 	sub.w	r4, r4, ip
 8022066:	460d      	mov	r5, r1
 8022068:	455b      	cmp	r3, fp
 802206a:	b2a4      	uxth	r4, r4
 802206c:	d802      	bhi.n	8022074 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 802206e:	e071      	b.n	8022154 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x258>
 8022070:	2b00      	cmp	r3, #0
 8022072:	d15d      	bne.n	8022130 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 8022074:	9b03      	ldr	r3, [sp, #12]
 8022076:	9a02      	ldr	r2, [sp, #8]
 8022078:	785b      	ldrb	r3, [r3, #1]
 802207a:	f1c2 0207 	rsb	r2, r2, #7
 802207e:	9902      	ldr	r1, [sp, #8]
 8022080:	4093      	lsls	r3, r2
 8022082:	005b      	lsls	r3, r3, #1
 8022084:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022088:	9b03      	ldr	r3, [sp, #12]
 802208a:	781b      	ldrb	r3, [r3, #0]
 802208c:	410b      	asrs	r3, r1
 802208e:	3101      	adds	r1, #1
 8022090:	b2c9      	uxtb	r1, r1
 8022092:	b2db      	uxtb	r3, r3
 8022094:	2908      	cmp	r1, #8
 8022096:	9102      	str	r1, [sp, #8]
 8022098:	9903      	ldr	r1, [sp, #12]
 802209a:	ea43 0302 	orr.w	r3, r3, r2
 802209e:	bf0c      	ite	eq
 80220a0:	3102      	addeq	r1, #2
 80220a2:	3101      	addne	r1, #1
 80220a4:	b29a      	uxth	r2, r3
 80220a6:	bf05      	ittet	eq
 80220a8:	9103      	streq	r1, [sp, #12]
 80220aa:	2100      	moveq	r1, #0
 80220ac:	9103      	strne	r1, [sp, #12]
 80220ae:	9102      	streq	r1, [sp, #8]
 80220b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80220b2:	4291      	cmp	r1, r2
 80220b4:	d30a      	bcc.n	80220cc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 80220b6:	f888 3804 	strb.w	r3, [r8, #2052]	@ 0x804
 80220ba:	2301      	movs	r3, #1
 80220bc:	9906      	ldr	r1, [sp, #24]
 80220be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80220c2:	d30f      	bcc.n	80220e4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1e8>
 80220c4:	2100      	movs	r1, #0
 80220c6:	4699      	mov	r9, r3
 80220c8:	9101      	str	r1, [sp, #4]
 80220ca:	e032      	b.n	8022132 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80220cc:	9b06      	ldr	r3, [sp, #24]
 80220ce:	4293      	cmp	r3, r2
 80220d0:	d818      	bhi.n	8022104 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x208>
 80220d2:	eb08 0309 	add.w	r3, r8, r9
 80220d6:	f898 1804 	ldrb.w	r1, [r8, #2052]	@ 0x804
 80220da:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80220de:	f109 0301 	add.w	r3, r9, #1
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	9906      	ldr	r1, [sp, #24]
 80220e6:	f898 0804 	ldrb.w	r0, [r8, #2052]	@ 0x804
 80220ea:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80220ee:	7108      	strb	r0, [r1, #4]
 80220f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80220f2:	80c8      	strh	r0, [r1, #6]
 80220f4:	f109 0001 	add.w	r0, r9, #1
 80220f8:	7148      	strb	r0, [r1, #5]
 80220fa:	9906      	ldr	r1, [sp, #24]
 80220fc:	3101      	adds	r1, #1
 80220fe:	b289      	uxth	r1, r1
 8022100:	9106      	str	r1, [sp, #24]
 8022102:	e7df      	b.n	80220c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8022104:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8022108:	4611      	mov	r1, r2
 802210a:	795b      	ldrb	r3, [r3, #5]
 802210c:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 8022110:	4440      	add	r0, r8
 8022112:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8022114:	4406      	add	r6, r0
 8022116:	2e00      	cmp	r6, #0
 8022118:	dd06      	ble.n	8022128 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22c>
 802211a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 802211e:	790e      	ldrb	r6, [r1, #4]
 8022120:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8022124:	88c9      	ldrh	r1, [r1, #6]
 8022126:	e7f4      	b.n	8022112 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8022128:	f888 1804 	strb.w	r1, [r8, #2052]	@ 0x804
 802212c:	b29b      	uxth	r3, r3
 802212e:	e7c5      	b.n	80220bc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8022130:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022132:	4629      	mov	r1, r5
 8022134:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022136:	469c      	mov	ip, r3
 8022138:	e78e      	b.n	8022058 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15c>
 802213a:	9a01      	ldr	r2, [sp, #4]
 802213c:	ebac 0304 	sub.w	r3, ip, r4
 8022140:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8022144:	4422      	add	r2, r4
 8022146:	b29b      	uxth	r3, r3
 8022148:	b292      	uxth	r2, r2
 802214a:	9201      	str	r2, [sp, #4]
 802214c:	2400      	movs	r4, #0
 802214e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022150:	4593      	cmp	fp, r2
 8022152:	d38d      	bcc.n	8022070 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>
 8022154:	4629      	mov	r1, r5
 8022156:	e74f      	b.n	8021ff8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8022158:	458c      	cmp	ip, r1
 802215a:	f04f 0a00 	mov.w	sl, #0
 802215e:	bf2b      	itete	cs
 8022160:	ebac 0301 	subcs.w	r3, ip, r1
 8022164:	eba1 050c 	subcc.w	r5, r1, ip
 8022168:	4625      	movcs	r5, r4
 802216a:	4623      	movcc	r3, r4
 802216c:	bf27      	ittee	cs
 802216e:	b29b      	uxthcs	r3, r3
 8022170:	910d      	strcs	r1, [sp, #52]	@ 0x34
 8022172:	b2ad      	uxthcc	r5, r5
 8022174:	f8cd c034 	strcc.w	ip, [sp, #52]	@ 0x34
 8022178:	9a01      	ldr	r2, [sp, #4]
 802217a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802217c:	4452      	add	r2, sl
 802217e:	4550      	cmp	r0, sl
 8022180:	b292      	uxth	r2, r2
 8022182:	d06b      	beq.n	802225c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x360>
 8022184:	2004      	movs	r0, #4
 8022186:	4442      	add	r2, r8
 8022188:	4604      	mov	r4, r0
 802218a:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802218e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022190:	fb14 0202 	smlabb	r2, r4, r2, r0
 8022194:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022196:	5886      	ldr	r6, [r0, r2]
 8022198:	0e32      	lsrs	r2, r6, #24
 802219a:	d013      	beq.n	80221c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 802219c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802219e:	4342      	muls	r2, r0
 80221a0:	1c54      	adds	r4, r2, #1
 80221a2:	eb04 2422 	add.w	r4, r4, r2, asr #8
 80221a6:	1224      	asrs	r4, r4, #8
 80221a8:	2cff      	cmp	r4, #255	@ 0xff
 80221aa:	d005      	beq.n	80221b8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2bc>
 80221ac:	f85b 202a 	ldr.w	r2, [fp, sl, lsl #2]
 80221b0:	ea5f 6e12 	movs.w	lr, r2, lsr #24
 80221b4:	9208      	str	r2, [sp, #32]
 80221b6:	d108      	bne.n	80221ca <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 80221b8:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
 80221bc:	ea46 6604 	orr.w	r6, r6, r4, lsl #24
 80221c0:	f84b 602a 	str.w	r6, [fp, sl, lsl #2]
 80221c4:	f10a 0a01 	add.w	sl, sl, #1
 80221c8:	e7d6      	b.n	8022178 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27c>
 80221ca:	b2e7      	uxtb	r7, r4
 80221cc:	2c00      	cmp	r4, #0
 80221ce:	d0f9      	beq.n	80221c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 80221d0:	fb07 f00e 	mul.w	r0, r7, lr
 80221d4:	4477      	add	r7, lr
 80221d6:	1c42      	adds	r2, r0, #1
 80221d8:	eb02 2020 	add.w	r0, r2, r0, asr #8
 80221dc:	1200      	asrs	r0, r0, #8
 80221de:	ebae 0200 	sub.w	r2, lr, r0
 80221e2:	1a3f      	subs	r7, r7, r0
 80221e4:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80221e8:	fa5f fe86 	uxtb.w	lr, r6
 80221ec:	b2ff      	uxtb	r7, r7
 80221ee:	920a      	str	r2, [sp, #40]	@ 0x28
 80221f0:	4350      	muls	r0, r2
 80221f2:	fb04 0e0e 	mla	lr, r4, lr, r0
 80221f6:	fbbe fef7 	udiv	lr, lr, r7
 80221fa:	fa5f fe8e 	uxtb.w	lr, lr
 80221fe:	ea4e 6207 	orr.w	r2, lr, r7, lsl #24
 8022202:	9216      	str	r2, [sp, #88]	@ 0x58
 8022204:	9a08      	ldr	r2, [sp, #32]
 8022206:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802220a:	f3c6 4207 	ubfx	r2, r6, #16, #8
 802220e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022212:	4362      	muls	r2, r4
 8022214:	4366      	muls	r6, r4
 8022216:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022218:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802221a:	4696      	mov	lr, r2
 802221c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802221e:	fb0e 2000 	mla	r0, lr, r0, r2
 8022222:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022224:	fbb0 f0f7 	udiv	r0, r0, r7
 8022228:	0400      	lsls	r0, r0, #16
 802222a:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 802222e:	ea42 0e00 	orr.w	lr, r2, r0
 8022232:	9a08      	ldr	r2, [sp, #32]
 8022234:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022236:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802223a:	fb00 6202 	mla	r2, r0, r2, r6
 802223e:	fbb2 f2f7 	udiv	r2, r2, r7
 8022242:	0210      	lsls	r0, r2, #8
 8022244:	b280      	uxth	r0, r0
 8022246:	ea4e 0000 	orr.w	r0, lr, r0
 802224a:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
 802224e:	e7b9      	b.n	80221c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 8022250:	200122c4 	.word	0x200122c4
 8022254:	200122be 	.word	0x200122be
 8022258:	fffff7fb 	.word	0xfffff7fb
 802225c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802225e:	458c      	cmp	ip, r1
 8022260:	9201      	str	r2, [sp, #4]
 8022262:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8022266:	f4ff af71 	bcc.w	802214c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x250>
 802226a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802226c:	9905      	ldr	r1, [sp, #20]
 802226e:	8812      	ldrh	r2, [r2, #0]
 8022270:	1a52      	subs	r2, r2, r1
 8022272:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 8022276:	9a07      	ldr	r2, [sp, #28]
 8022278:	3201      	adds	r2, #1
 802227a:	9207      	str	r2, [sp, #28]
 802227c:	9907      	ldr	r1, [sp, #28]
 802227e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022280:	428a      	cmp	r2, r1
 8022282:	d111      	bne.n	80222a8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8022284:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8022288:	f8bd a068 	ldrh.w	sl, [sp, #104]	@ 0x68
 802228c:	9b05      	ldr	r3, [sp, #20]
 802228e:	eba4 040a 	sub.w	r4, r4, sl
 8022292:	b2a4      	uxth	r4, r4
 8022294:	2c00      	cmp	r4, #0
 8022296:	bf08      	it	eq
 8022298:	4619      	moveq	r1, r3
 802229a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802229c:	bf18      	it	ne
 802229e:	2100      	movne	r1, #0
 80222a0:	3301      	adds	r3, #1
 80222a2:	b289      	uxth	r1, r1
 80222a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80222a6:	e69e      	b.n	8021fe6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 80222a8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80222ac:	f8bd 406c 	ldrh.w	r4, [sp, #108]	@ 0x6c
 80222b0:	1b64      	subs	r4, r4, r5
 80222b2:	b2a4      	uxth	r4, r4
 80222b4:	2c00      	cmp	r4, #0
 80222b6:	bf18      	it	ne
 80222b8:	2500      	movne	r5, #0
 80222ba:	e748      	b.n	802214e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 80222bc:	4b03      	ldr	r3, [pc, #12]	@ (80222cc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d0>)
 80222be:	6818      	ldr	r0, [r3, #0]
 80222c0:	6803      	ldr	r3, [r0, #0]
 80222c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222c4:	4798      	blx	r3
 80222c6:	b01f      	add	sp, #124	@ 0x7c
 80222c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222cc:	200122c4 	.word	0x200122c4

080222d0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80222d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222d4:	b09d      	sub	sp, #116	@ 0x74
 80222d6:	461c      	mov	r4, r3
 80222d8:	4680      	mov	r8, r0
 80222da:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80222dc:	6820      	ldr	r0, [r4, #0]
 80222de:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 80222e2:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80222e6:	6861      	ldr	r1, [r4, #4]
 80222e8:	9202      	str	r2, [sp, #8]
 80222ea:	aa18      	add	r2, sp, #96	@ 0x60
 80222ec:	c203      	stmia	r2!, {r0, r1}
 80222ee:	6818      	ldr	r0, [r3, #0]
 80222f0:	aa1a      	add	r2, sp, #104	@ 0x68
 80222f2:	6859      	ldr	r1, [r3, #4]
 80222f4:	c203      	stmia	r2!, {r0, r1}
 80222f6:	a818      	add	r0, sp, #96	@ 0x60
 80222f8:	f7f8 fd04 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80222fc:	4621      	mov	r1, r4
 80222fe:	a81a      	add	r0, sp, #104	@ 0x68
 8022300:	f7f8 fd28 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022304:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8022308:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 802230c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022310:	bfdb      	ittet	le
 8022312:	b29a      	uxthle	r2, r3
 8022314:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022318:	2201      	movgt	r2, #1
 802231a:	fb91 f2f2 	sdivle	r2, r1, r2
 802231e:	9205      	str	r2, [sp, #20]
 8022320:	9805      	ldr	r0, [sp, #20]
 8022322:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8022326:	9905      	ldr	r1, [sp, #20]
 8022328:	fb92 f0f0 	sdiv	r0, r2, r0
 802232c:	b280      	uxth	r0, r0
 802232e:	440c      	add	r4, r1
 8022330:	9010      	str	r0, [sp, #64]	@ 0x40
 8022332:	3c01      	subs	r4, #1
 8022334:	9805      	ldr	r0, [sp, #20]
 8022336:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022338:	fb05 2610 	mls	r6, r5, r0, r2
 802233c:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 8022340:	fb94 f4f1 	sdiv	r4, r4, r1
 8022344:	fb16 f603 	smulbb	r6, r6, r3
 8022348:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 802234c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8022350:	3401      	adds	r4, #1
 8022352:	440e      	add	r6, r1
 8022354:	4419      	add	r1, r3
 8022356:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 802235a:	b2a4      	uxth	r4, r4
 802235c:	441a      	add	r2, r3
 802235e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8022362:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8022366:	b2b6      	uxth	r6, r6
 8022368:	9306      	str	r3, [sp, #24]
 802236a:	4ba1      	ldr	r3, [pc, #644]	@ (80225f0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x320>)
 802236c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8022370:	6818      	ldr	r0, [r3, #0]
 8022372:	6803      	ldr	r3, [r0, #0]
 8022374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022376:	4798      	blx	r3
 8022378:	4b9e      	ldr	r3, [pc, #632]	@ (80225f4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x324>)
 802237a:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 802237e:	2e00      	cmp	r6, #0
 8022380:	8819      	ldrh	r1, [r3, #0]
 8022382:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8022386:	fb05 f501 	mul.w	r5, r5, r1
 802238a:	fb01 7202 	mla	r2, r1, r2, r7
 802238e:	bf18      	it	ne
 8022390:	2100      	movne	r1, #0
 8022392:	9316      	str	r3, [sp, #88]	@ 0x58
 8022394:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 8022398:	4b97      	ldr	r3, [pc, #604]	@ (80225f8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x328>)
 802239a:	eb0a 0285 	add.w	r2, sl, r5, lsl #2
 802239e:	eba3 0308 	sub.w	r3, r3, r8
 80223a2:	920d      	str	r2, [sp, #52]	@ 0x34
 80223a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80223a6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80223a8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80223ac:	f104 0204 	add.w	r2, r4, #4
 80223b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80223b2:	9a06      	ldr	r2, [sp, #24]
 80223b4:	bf08      	it	eq
 80223b6:	4611      	moveq	r1, r2
 80223b8:	9a02      	ldr	r2, [sp, #8]
 80223ba:	0612      	lsls	r2, r2, #24
 80223bc:	b289      	uxth	r1, r1
 80223be:	9214      	str	r2, [sp, #80]	@ 0x50
 80223c0:	2200      	movs	r2, #0
 80223c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80223c4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80223c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80223c8:	fa12 f383 	uxtah	r3, r2, r3
 80223cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80223ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80223d2:	3304      	adds	r3, #4
 80223d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80223d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223d8:	459a      	cmp	sl, r3
 80223da:	f080 8171 	bcs.w	80226c0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f0>
 80223de:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80223e2:	f04f 0b01 	mov.w	fp, #1
 80223e6:	9a05      	ldr	r2, [sp, #20]
 80223e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80223ea:	465f      	mov	r7, fp
 80223ec:	f8cd b00c 	str.w	fp, [sp, #12]
 80223f0:	7800      	ldrb	r0, [r0, #0]
 80223f2:	fbb6 f3f3 	udiv	r3, r6, r3
 80223f6:	1ad3      	subs	r3, r2, r3
 80223f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80223fa:	3001      	adds	r0, #1
 80223fc:	b29b      	uxth	r3, r3
 80223fe:	9007      	str	r0, [sp, #28]
 8022400:	9315      	str	r3, [sp, #84]	@ 0x54
 8022402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022404:	785a      	ldrb	r2, [r3, #1]
 8022406:	789b      	ldrb	r3, [r3, #2]
 8022408:	021b      	lsls	r3, r3, #8
 802240a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802240e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022410:	78d2      	ldrb	r2, [r2, #3]
 8022412:	4313      	orrs	r3, r2
 8022414:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022416:	441a      	add	r2, r3
 8022418:	1c50      	adds	r0, r2, #1
 802241a:	7852      	ldrb	r2, [r2, #1]
 802241c:	9004      	str	r0, [sp, #16]
 802241e:	0212      	lsls	r2, r2, #8
 8022420:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022422:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022426:	5cc3      	ldrb	r3, [r0, r3]
 8022428:	431a      	orrs	r2, r3
 802242a:	b293      	uxth	r3, r2
 802242c:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 8022430:	930c      	str	r3, [sp, #48]	@ 0x30
 8022432:	2300      	movs	r3, #0
 8022434:	461d      	mov	r5, r3
 8022436:	9309      	str	r3, [sp, #36]	@ 0x24
 8022438:	2e00      	cmp	r6, #0
 802243a:	d07e      	beq.n	802253a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 802243c:	42b7      	cmp	r7, r6
 802243e:	d26f      	bcs.n	8022520 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8022440:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022442:	1bf6      	subs	r6, r6, r7
 8022444:	460c      	mov	r4, r1
 8022446:	4553      	cmp	r3, sl
 8022448:	b2b6      	uxth	r6, r6
 802244a:	d803      	bhi.n	8022454 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x184>
 802244c:	e073      	b.n	8022536 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 802244e:	9b00      	ldr	r3, [sp, #0]
 8022450:	2b00      	cmp	r3, #0
 8022452:	d15f      	bne.n	8022514 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8022454:	9b04      	ldr	r3, [sp, #16]
 8022456:	9a03      	ldr	r2, [sp, #12]
 8022458:	785b      	ldrb	r3, [r3, #1]
 802245a:	f1c2 0207 	rsb	r2, r2, #7
 802245e:	9903      	ldr	r1, [sp, #12]
 8022460:	4093      	lsls	r3, r2
 8022462:	005b      	lsls	r3, r3, #1
 8022464:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022468:	9b04      	ldr	r3, [sp, #16]
 802246a:	781b      	ldrb	r3, [r3, #0]
 802246c:	410b      	asrs	r3, r1
 802246e:	b2db      	uxtb	r3, r3
 8022470:	4313      	orrs	r3, r2
 8022472:	460a      	mov	r2, r1
 8022474:	3201      	adds	r2, #1
 8022476:	b298      	uxth	r0, r3
 8022478:	b2d2      	uxtb	r2, r2
 802247a:	2a08      	cmp	r2, #8
 802247c:	9203      	str	r2, [sp, #12]
 802247e:	9a04      	ldr	r2, [sp, #16]
 8022480:	bf09      	itett	eq
 8022482:	3202      	addeq	r2, #2
 8022484:	3201      	addne	r2, #1
 8022486:	9204      	streq	r2, [sp, #16]
 8022488:	2200      	moveq	r2, #0
 802248a:	bf14      	ite	ne
 802248c:	9204      	strne	r2, [sp, #16]
 802248e:	9203      	streq	r2, [sp, #12]
 8022490:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022492:	4282      	cmp	r2, r0
 8022494:	d30b      	bcc.n	80224ae <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 8022496:	f888 3804 	strb.w	r3, [r8, #2052]	@ 0x804
 802249a:	2301      	movs	r3, #1
 802249c:	9a07      	ldr	r2, [sp, #28]
 802249e:	9300      	str	r3, [sp, #0]
 80224a0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80224a4:	d310      	bcc.n	80224c8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f8>
 80224a6:	f8dd b000 	ldr.w	fp, [sp]
 80224aa:	2200      	movs	r2, #0
 80224ac:	e033      	b.n	8022516 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 80224ae:	9b07      	ldr	r3, [sp, #28]
 80224b0:	4283      	cmp	r3, r0
 80224b2:	d819      	bhi.n	80224e8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80224b4:	eb08 030b 	add.w	r3, r8, fp
 80224b8:	f898 2804 	ldrb.w	r2, [r8, #2052]	@ 0x804
 80224bc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80224c0:	f10b 0301 	add.w	r3, fp, #1
 80224c4:	b29b      	uxth	r3, r3
 80224c6:	9300      	str	r3, [sp, #0]
 80224c8:	9a07      	ldr	r2, [sp, #28]
 80224ca:	f898 1804 	ldrb.w	r1, [r8, #2052]	@ 0x804
 80224ce:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80224d2:	7111      	strb	r1, [r2, #4]
 80224d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80224d6:	80d1      	strh	r1, [r2, #6]
 80224d8:	f10b 0101 	add.w	r1, fp, #1
 80224dc:	7151      	strb	r1, [r2, #5]
 80224de:	9a07      	ldr	r2, [sp, #28]
 80224e0:	3201      	adds	r2, #1
 80224e2:	b292      	uxth	r2, r2
 80224e4:	9207      	str	r2, [sp, #28]
 80224e6:	e7de      	b.n	80224a6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80224e8:	eb08 0380 	add.w	r3, r8, r0, lsl #2
 80224ec:	4602      	mov	r2, r0
 80224ee:	795b      	ldrb	r3, [r3, #5]
 80224f0:	f603 0104 	addw	r1, r3, #2052	@ 0x804
 80224f4:	4441      	add	r1, r8
 80224f6:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80224f8:	440d      	add	r5, r1
 80224fa:	2d00      	cmp	r5, #0
 80224fc:	dd06      	ble.n	802250c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23c>
 80224fe:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8022502:	7915      	ldrb	r5, [r2, #4]
 8022504:	f801 5d01 	strb.w	r5, [r1, #-1]!
 8022508:	88d2      	ldrh	r2, [r2, #6]
 802250a:	e7f4      	b.n	80224f6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 802250c:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 8022510:	b29b      	uxth	r3, r3
 8022512:	e7c3      	b.n	802249c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1cc>
 8022514:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022516:	4621      	mov	r1, r4
 8022518:	900c      	str	r0, [sp, #48]	@ 0x30
 802251a:	4615      	mov	r5, r2
 802251c:	9f00      	ldr	r7, [sp, #0]
 802251e:	e78b      	b.n	8022438 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x168>
 8022520:	1bbb      	subs	r3, r7, r6
 8022522:	4435      	add	r5, r6
 8022524:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022528:	b29b      	uxth	r3, r3
 802252a:	b2aa      	uxth	r2, r5
 802252c:	9300      	str	r3, [sp, #0]
 802252e:	2600      	movs	r6, #0
 8022530:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022532:	458a      	cmp	sl, r1
 8022534:	d38b      	bcc.n	802244e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8022536:	4621      	mov	r1, r4
 8022538:	e74d      	b.n	80223d6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 802253a:	428f      	cmp	r7, r1
 802253c:	d332      	bcc.n	80225a4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2d4>
 802253e:	1a7b      	subs	r3, r7, r1
 8022540:	4634      	mov	r4, r6
 8022542:	9108      	str	r1, [sp, #32]
 8022544:	b29b      	uxth	r3, r3
 8022546:	9300      	str	r3, [sp, #0]
 8022548:	9a02      	ldr	r2, [sp, #8]
 802254a:	2aff      	cmp	r2, #255	@ 0xff
 802254c:	d02f      	beq.n	80225ae <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2de>
 802254e:	2200      	movs	r2, #0
 8022550:	9201      	str	r2, [sp, #4]
 8022552:	9b01      	ldr	r3, [sp, #4]
 8022554:	9801      	ldr	r0, [sp, #4]
 8022556:	18ea      	adds	r2, r5, r3
 8022558:	9b08      	ldr	r3, [sp, #32]
 802255a:	4283      	cmp	r3, r0
 802255c:	b292      	uxth	r2, r2
 802255e:	d14d      	bne.n	80225fc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x32c>
 8022560:	428f      	cmp	r7, r1
 8022562:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8022566:	d3e2      	bcc.n	802252e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8022568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802256a:	8819      	ldrh	r1, [r3, #0]
 802256c:	9b06      	ldr	r3, [sp, #24]
 802256e:	1ac9      	subs	r1, r1, r3
 8022570:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022572:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8022576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022578:	3101      	adds	r1, #1
 802257a:	428b      	cmp	r3, r1
 802257c:	9109      	str	r1, [sp, #36]	@ 0x24
 802257e:	f040 8095 	bne.w	80226ac <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3dc>
 8022582:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 8022586:	f8bd 7060 	ldrh.w	r7, [sp, #96]	@ 0x60
 802258a:	9b06      	ldr	r3, [sp, #24]
 802258c:	1bf6      	subs	r6, r6, r7
 802258e:	b2b6      	uxth	r6, r6
 8022590:	2e00      	cmp	r6, #0
 8022592:	bf08      	it	eq
 8022594:	4619      	moveq	r1, r3
 8022596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022598:	bf18      	it	ne
 802259a:	2100      	movne	r1, #0
 802259c:	3301      	adds	r3, #1
 802259e:	b289      	uxth	r1, r1
 80225a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80225a2:	e70f      	b.n	80223c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80225a4:	1bcc      	subs	r4, r1, r7
 80225a6:	9708      	str	r7, [sp, #32]
 80225a8:	9600      	str	r6, [sp, #0]
 80225aa:	b2a4      	uxth	r4, r4
 80225ac:	e7cc      	b.n	8022548 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80225ae:	9a08      	ldr	r2, [sp, #32]
 80225b0:	4656      	mov	r6, sl
 80225b2:	18aa      	adds	r2, r5, r2
 80225b4:	b292      	uxth	r2, r2
 80225b6:	4295      	cmp	r5, r2
 80225b8:	d076      	beq.n	80226a8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3d8>
 80225ba:	f105 0c01 	add.w	ip, r5, #1
 80225be:	4445      	add	r5, r8
 80225c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80225c2:	f895 0804 	ldrb.w	r0, [r5, #2052]	@ 0x804
 80225c6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80225c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80225cc:	4405      	add	r5, r0
 80225ce:	5c18      	ldrb	r0, [r3, r0]
 80225d0:	f895 e002 	ldrb.w	lr, [r5, #2]
 80225d4:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80225d8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80225dc:	f895 e001 	ldrb.w	lr, [r5, #1]
 80225e0:	fa1f f58c 	uxth.w	r5, ip
 80225e4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 80225e8:	f846 0b04 	str.w	r0, [r6], #4
 80225ec:	e7e3      	b.n	80225b6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2e6>
 80225ee:	bf00      	nop
 80225f0:	200122c4 	.word	0x200122c4
 80225f4:	200122be 	.word	0x200122be
 80225f8:	fffff7fb 	.word	0xfffff7fb
 80225fc:	4442      	add	r2, r8
 80225fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022600:	f892 6804 	ldrb.w	r6, [r2, #2052]	@ 0x804
 8022604:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022608:	1998      	adds	r0, r3, r6
 802260a:	9b01      	ldr	r3, [sp, #4]
 802260c:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 8022610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022612:	ea5f 6912 	movs.w	r9, r2, lsr #24
 8022616:	5d9e      	ldrb	r6, [r3, r6]
 8022618:	7843      	ldrb	r3, [r0, #1]
 802261a:	7880      	ldrb	r0, [r0, #2]
 802261c:	9311      	str	r3, [sp, #68]	@ 0x44
 802261e:	d10c      	bne.n	802263a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x36a>
 8022620:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022622:	431e      	orrs	r6, r3
 8022624:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022626:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 802262a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 802262e:	9b01      	ldr	r3, [sp, #4]
 8022630:	9a01      	ldr	r2, [sp, #4]
 8022632:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
 8022636:	3201      	adds	r2, #1
 8022638:	e78a      	b.n	8022550 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>
 802263a:	9b02      	ldr	r3, [sp, #8]
 802263c:	fb13 f000 	smulbb	r0, r3, r0
 8022640:	fb03 fe09 	mul.w	lr, r3, r9
 8022644:	fb13 f606 	smulbb	r6, r3, r6
 8022648:	f10e 0c01 	add.w	ip, lr, #1
 802264c:	eb0c 2c2e 	add.w	ip, ip, lr, asr #8
 8022650:	eb03 0e09 	add.w	lr, r3, r9
 8022654:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022658:	eba9 090c 	sub.w	r9, r9, ip
 802265c:	ebae 0e0c 	sub.w	lr, lr, ip
 8022660:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022664:	fa5f fe8e 	uxtb.w	lr, lr
 8022668:	fb09 0c0c 	mla	ip, r9, ip, r0
 802266c:	b2d0      	uxtb	r0, r2
 802266e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022672:	fb09 6600 	mla	r6, r9, r0, r6
 8022676:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022678:	fbbc fcfe 	udiv	ip, ip, lr
 802267c:	fbb6 f6fe 	udiv	r6, r6, lr
 8022680:	fb13 f000 	smulbb	r0, r3, r0
 8022684:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8022688:	b2f6      	uxtb	r6, r6
 802268a:	fb09 0202 	mla	r2, r9, r2, r0
 802268e:	f40c 0c7f 	and.w	ip, ip, #16711680	@ 0xff0000
 8022692:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8022696:	fbb2 f2fe 	udiv	r2, r2, lr
 802269a:	ea4c 0c06 	orr.w	ip, ip, r6
 802269e:	0216      	lsls	r6, r2, #8
 80226a0:	b2b6      	uxth	r6, r6
 80226a2:	ea4c 0606 	orr.w	r6, ip, r6
 80226a6:	e7c2      	b.n	802262e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x35e>
 80226a8:	9b08      	ldr	r3, [sp, #32]
 80226aa:	e759      	b.n	8022560 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x290>
 80226ac:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80226b0:	f8bd 6064 	ldrh.w	r6, [sp, #100]	@ 0x64
 80226b4:	1b36      	subs	r6, r6, r4
 80226b6:	b2b6      	uxth	r6, r6
 80226b8:	2e00      	cmp	r6, #0
 80226ba:	bf18      	it	ne
 80226bc:	2400      	movne	r4, #0
 80226be:	e737      	b.n	8022530 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80226c0:	4b03      	ldr	r3, [pc, #12]	@ (80226d0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x400>)
 80226c2:	6818      	ldr	r0, [r3, #0]
 80226c4:	6803      	ldr	r3, [r0, #0]
 80226c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80226c8:	4798      	blx	r3
 80226ca:	b01d      	add	sp, #116	@ 0x74
 80226cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226d0:	200122c4 	.word	0x200122c4

080226d4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80226d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d8:	b089      	sub	sp, #36	@ 0x24
 80226da:	4607      	mov	r7, r0
 80226dc:	4689      	mov	r9, r1
 80226de:	4692      	mov	sl, r2
 80226e0:	ac08      	add	r4, sp, #32
 80226e2:	461e      	mov	r6, r3
 80226e4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80226e8:	4620      	mov	r0, r4
 80226ea:	f7fc f825 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 80226ee:	683b      	ldr	r3, [r7, #0]
 80226f0:	4605      	mov	r5, r0
 80226f2:	4620      	mov	r0, r4
 80226f4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80226f8:	f7fb ff2c 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80226fc:	4683      	mov	fp, r0
 80226fe:	4620      	mov	r0, r4
 8022700:	f7fb ff5c 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022704:	4653      	mov	r3, sl
 8022706:	464a      	mov	r2, r9
 8022708:	4639      	mov	r1, r7
 802270a:	9500      	str	r5, [sp, #0]
 802270c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8022710:	a806      	add	r0, sp, #24
 8022712:	47c0      	blx	r8
 8022714:	a906      	add	r1, sp, #24
 8022716:	4630      	mov	r0, r6
 8022718:	f7fb fe00 	bl	801e31c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 802271c:	4628      	mov	r0, r5
 802271e:	b009      	add	sp, #36	@ 0x24
 8022720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022724 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L4D0Ev>:
 8022724:	b510      	push	{r4, lr}
 8022726:	4604      	mov	r4, r0
 8022728:	2104      	movs	r1, #4
 802272a:	f00a fb9c 	bl	802ce66 <_ZdlPvj>
 802272e:	4620      	mov	r0, r4
 8022730:	bd10      	pop	{r4, pc}

08022732 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLED0Ev>:
 8022732:	b510      	push	{r4, lr}
 8022734:	4604      	mov	r4, r0
 8022736:	2104      	movs	r1, #4
 8022738:	f00a fb95 	bl	802ce66 <_ZdlPvj>
 802273c:	4620      	mov	r0, r4
 802273e:	bd10      	pop	{r4, pc}

08022740 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW9D0Ev>:
 8022740:	b510      	push	{r4, lr}
 8022742:	4604      	mov	r4, r0
 8022744:	f640 0144 	movw	r1, #2116	@ 0x844
 8022748:	f00a fb8d 	bl	802ce66 <_ZdlPvj>
 802274c:	4620      	mov	r0, r4
 802274e:	bd10      	pop	{r4, pc}

08022750 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOID0Ev>:
 8022750:	b510      	push	{r4, lr}
 8022752:	4604      	mov	r4, r0
 8022754:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8022758:	f00a fb85 	bl	802ce66 <_ZdlPvj>
 802275c:	4620      	mov	r0, r4
 802275e:	bd10      	pop	{r4, pc}

08022760 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022760:	b510      	push	{r4, lr}
 8022762:	4604      	mov	r4, r0
 8022764:	2104      	movs	r1, #4
 8022766:	f00a fb7e 	bl	802ce66 <_ZdlPvj>
 802276a:	4620      	mov	r0, r4
 802276c:	bd10      	pop	{r4, pc}

0802276e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802276e:	b510      	push	{r4, lr}
 8022770:	4604      	mov	r4, r0
 8022772:	2104      	movs	r1, #4
 8022774:	f00a fb77 	bl	802ce66 <_ZdlPvj>
 8022778:	4620      	mov	r0, r4
 802277a:	bd10      	pop	{r4, pc}

0802277c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802277c:	b510      	push	{r4, lr}
 802277e:	4604      	mov	r4, r0
 8022780:	2104      	movs	r1, #4
 8022782:	f00a fb70 	bl	802ce66 <_ZdlPvj>
 8022786:	4620      	mov	r0, r4
 8022788:	bd10      	pop	{r4, pc}

0802278a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802278a:	b510      	push	{r4, lr}
 802278c:	4604      	mov	r4, r0
 802278e:	2104      	movs	r1, #4
 8022790:	f00a fb69 	bl	802ce66 <_ZdlPvj>
 8022794:	4620      	mov	r0, r4
 8022796:	bd10      	pop	{r4, pc}

08022798 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022798:	b510      	push	{r4, lr}
 802279a:	4604      	mov	r4, r0
 802279c:	2104      	movs	r1, #4
 802279e:	f00a fb62 	bl	802ce66 <_ZdlPvj>
 80227a2:	4620      	mov	r0, r4
 80227a4:	bd10      	pop	{r4, pc}

080227a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80227a6:	b510      	push	{r4, lr}
 80227a8:	4604      	mov	r4, r0
 80227aa:	2104      	movs	r1, #4
 80227ac:	f00a fb5b 	bl	802ce66 <_ZdlPvj>
 80227b0:	4620      	mov	r0, r4
 80227b2:	bd10      	pop	{r4, pc}

080227b4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80227b4:	b510      	push	{r4, lr}
 80227b6:	4604      	mov	r4, r0
 80227b8:	2104      	movs	r1, #4
 80227ba:	f00a fb54 	bl	802ce66 <_ZdlPvj>
 80227be:	4620      	mov	r0, r4
 80227c0:	bd10      	pop	{r4, pc}

080227c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80227c2:	b510      	push	{r4, lr}
 80227c4:	4604      	mov	r4, r0
 80227c6:	2104      	movs	r1, #4
 80227c8:	f00a fb4d 	bl	802ce66 <_ZdlPvj>
 80227cc:	4620      	mov	r0, r4
 80227ce:	bd10      	pop	{r4, pc}

080227d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80227d0:	b510      	push	{r4, lr}
 80227d2:	4604      	mov	r4, r0
 80227d4:	2104      	movs	r1, #4
 80227d6:	f00a fb46 	bl	802ce66 <_ZdlPvj>
 80227da:	4620      	mov	r0, r4
 80227dc:	bd10      	pop	{r4, pc}

080227de <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80227de:	b510      	push	{r4, lr}
 80227e0:	4604      	mov	r4, r0
 80227e2:	2104      	movs	r1, #4
 80227e4:	f00a fb3f 	bl	802ce66 <_ZdlPvj>
 80227e8:	4620      	mov	r0, r4
 80227ea:	bd10      	pop	{r4, pc}

080227ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80227ec:	b510      	push	{r4, lr}
 80227ee:	4604      	mov	r4, r0
 80227f0:	2104      	movs	r1, #4
 80227f2:	f00a fb38 	bl	802ce66 <_ZdlPvj>
 80227f6:	4620      	mov	r0, r4
 80227f8:	bd10      	pop	{r4, pc}

080227fa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80227fa:	b510      	push	{r4, lr}
 80227fc:	4604      	mov	r4, r0
 80227fe:	2104      	movs	r1, #4
 8022800:	f00a fb31 	bl	802ce66 <_ZdlPvj>
 8022804:	4620      	mov	r0, r4
 8022806:	bd10      	pop	{r4, pc}

08022808 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022808:	b510      	push	{r4, lr}
 802280a:	4604      	mov	r4, r0
 802280c:	2104      	movs	r1, #4
 802280e:	f00a fb2a 	bl	802ce66 <_ZdlPvj>
 8022812:	4620      	mov	r0, r4
 8022814:	bd10      	pop	{r4, pc}

08022816 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022816:	b510      	push	{r4, lr}
 8022818:	4604      	mov	r4, r0
 802281a:	2104      	movs	r1, #4
 802281c:	f00a fb23 	bl	802ce66 <_ZdlPvj>
 8022820:	4620      	mov	r0, r4
 8022822:	bd10      	pop	{r4, pc}

08022824 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022824:	b510      	push	{r4, lr}
 8022826:	4604      	mov	r4, r0
 8022828:	2104      	movs	r1, #4
 802282a:	f00a fb1c 	bl	802ce66 <_ZdlPvj>
 802282e:	4620      	mov	r0, r4
 8022830:	bd10      	pop	{r4, pc}

08022832 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8022832:	b510      	push	{r4, lr}
 8022834:	4604      	mov	r4, r0
 8022836:	2104      	movs	r1, #4
 8022838:	f00a fb15 	bl	802ce66 <_ZdlPvj>
 802283c:	4620      	mov	r0, r4
 802283e:	bd10      	pop	{r4, pc}

08022840 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022840:	b510      	push	{r4, lr}
 8022842:	4604      	mov	r4, r0
 8022844:	2104      	movs	r1, #4
 8022846:	f00a fb0e 	bl	802ce66 <_ZdlPvj>
 802284a:	4620      	mov	r0, r4
 802284c:	bd10      	pop	{r4, pc}

0802284e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802284e:	b510      	push	{r4, lr}
 8022850:	4604      	mov	r4, r0
 8022852:	2104      	movs	r1, #4
 8022854:	f00a fb07 	bl	802ce66 <_ZdlPvj>
 8022858:	4620      	mov	r0, r4
 802285a:	bd10      	pop	{r4, pc}

0802285c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802285c:	b510      	push	{r4, lr}
 802285e:	4604      	mov	r4, r0
 8022860:	2104      	movs	r1, #4
 8022862:	f00a fb00 	bl	802ce66 <_ZdlPvj>
 8022866:	4620      	mov	r0, r4
 8022868:	bd10      	pop	{r4, pc}

0802286a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802286a:	b510      	push	{r4, lr}
 802286c:	4604      	mov	r4, r0
 802286e:	2104      	movs	r1, #4
 8022870:	f00a faf9 	bl	802ce66 <_ZdlPvj>
 8022874:	4620      	mov	r0, r4
 8022876:	bd10      	pop	{r4, pc}

08022878 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022878:	b510      	push	{r4, lr}
 802287a:	4604      	mov	r4, r0
 802287c:	2104      	movs	r1, #4
 802287e:	f00a faf2 	bl	802ce66 <_ZdlPvj>
 8022882:	4620      	mov	r0, r4
 8022884:	bd10      	pop	{r4, pc}

08022886 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022886:	b510      	push	{r4, lr}
 8022888:	4604      	mov	r4, r0
 802288a:	2104      	movs	r1, #4
 802288c:	f00a faeb 	bl	802ce66 <_ZdlPvj>
 8022890:	4620      	mov	r0, r4
 8022892:	bd10      	pop	{r4, pc}

08022894 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022894:	b510      	push	{r4, lr}
 8022896:	4604      	mov	r4, r0
 8022898:	2104      	movs	r1, #4
 802289a:	f00a fae4 	bl	802ce66 <_ZdlPvj>
 802289e:	4620      	mov	r0, r4
 80228a0:	bd10      	pop	{r4, pc}

080228a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80228a2:	b510      	push	{r4, lr}
 80228a4:	4604      	mov	r4, r0
 80228a6:	2104      	movs	r1, #4
 80228a8:	f00a fadd 	bl	802ce66 <_ZdlPvj>
 80228ac:	4620      	mov	r0, r4
 80228ae:	bd10      	pop	{r4, pc}

080228b0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80228b0:	b510      	push	{r4, lr}
 80228b2:	4604      	mov	r4, r0
 80228b4:	2104      	movs	r1, #4
 80228b6:	f00a fad6 	bl	802ce66 <_ZdlPvj>
 80228ba:	4620      	mov	r0, r4
 80228bc:	bd10      	pop	{r4, pc}

080228be <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80228be:	b510      	push	{r4, lr}
 80228c0:	4604      	mov	r4, r0
 80228c2:	2104      	movs	r1, #4
 80228c4:	f00a facf 	bl	802ce66 <_ZdlPvj>
 80228c8:	4620      	mov	r0, r4
 80228ca:	bd10      	pop	{r4, pc}

080228cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80228cc:	b510      	push	{r4, lr}
 80228ce:	4604      	mov	r4, r0
 80228d0:	2104      	movs	r1, #4
 80228d2:	f00a fac8 	bl	802ce66 <_ZdlPvj>
 80228d6:	4620      	mov	r0, r4
 80228d8:	bd10      	pop	{r4, pc}

080228da <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80228da:	b510      	push	{r4, lr}
 80228dc:	4604      	mov	r4, r0
 80228de:	2104      	movs	r1, #4
 80228e0:	f00a fac1 	bl	802ce66 <_ZdlPvj>
 80228e4:	4620      	mov	r0, r4
 80228e6:	bd10      	pop	{r4, pc}

080228e8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 80228e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228ec:	b091      	sub	sp, #68	@ 0x44
 80228ee:	4616      	mov	r6, r2
 80228f0:	460d      	mov	r5, r1
 80228f2:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 80228f6:	9001      	str	r0, [sp, #4]
 80228f8:	9206      	str	r2, [sp, #24]
 80228fa:	2a00      	cmp	r2, #0
 80228fc:	f000 8264 	beq.w	8022dc8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4e0>
 8022900:	6830      	ldr	r0, [r6, #0]
 8022902:	ac0c      	add	r4, sp, #48	@ 0x30
 8022904:	6871      	ldr	r1, [r6, #4]
 8022906:	c403      	stmia	r4!, {r0, r1}
 8022908:	6818      	ldr	r0, [r3, #0]
 802290a:	ac0e      	add	r4, sp, #56	@ 0x38
 802290c:	6859      	ldr	r1, [r3, #4]
 802290e:	c403      	stmia	r4!, {r0, r1}
 8022910:	a80c      	add	r0, sp, #48	@ 0x30
 8022912:	f7f8 f9f7 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022916:	4631      	mov	r1, r6
 8022918:	a80e      	add	r0, sp, #56	@ 0x38
 802291a:	f7f8 fa1b 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802291e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8022922:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022926:	bfdb      	ittet	le
 8022928:	b293      	uxthle	r3, r2
 802292a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802292e:	2301      	movgt	r3, #1
 8022930:	fb91 f3f3 	sdivle	r3, r1, r3
 8022934:	9302      	str	r3, [sp, #8]
 8022936:	f105 0308 	add.w	r3, r5, #8
 802293a:	9902      	ldr	r1, [sp, #8]
 802293c:	9307      	str	r3, [sp, #28]
 802293e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8022942:	440b      	add	r3, r1
 8022944:	3b01      	subs	r3, #1
 8022946:	fb93 f3f1 	sdiv	r3, r3, r1
 802294a:	3b01      	subs	r3, #1
 802294c:	9907      	ldr	r1, [sp, #28]
 802294e:	b29b      	uxth	r3, r3
 8022950:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022954:	9902      	ldr	r1, [sp, #8]
 8022956:	9308      	str	r3, [sp, #32]
 8022958:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802295c:	fb93 f0f1 	sdiv	r0, r3, r1
 8022960:	b284      	uxth	r4, r0
 8022962:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8022966:	9403      	str	r4, [sp, #12]
 8022968:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802296c:	fb05 3414 	mls	r4, r5, r4, r3
 8022970:	fb14 f402 	smulbb	r4, r4, r2
 8022974:	440c      	add	r4, r1
 8022976:	b2a4      	uxth	r4, r4
 8022978:	2d00      	cmp	r5, #0
 802297a:	d056      	beq.n	8022a2a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x142>
 802297c:	1e6a      	subs	r2, r5, #1
 802297e:	9807      	ldr	r0, [sp, #28]
 8022980:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 8022984:	9a08      	ldr	r2, [sp, #32]
 8022986:	fa9a fa8a 	rev.w	sl, sl
 802298a:	4492      	add	sl, r2
 802298c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022990:	f04f 0600 	mov.w	r6, #0
 8022994:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8022998:	4411      	add	r1, r2
 802299a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802299e:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 8022c90 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a8>
 80229a2:	4413      	add	r3, r2
 80229a4:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80229a8:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80229ac:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80229b0:	9300      	str	r3, [sp, #0]
 80229b2:	4bb5      	ldr	r3, [pc, #724]	@ (8022c88 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a0>)
 80229b4:	6818      	ldr	r0, [r3, #0]
 80229b6:	6803      	ldr	r3, [r0, #0]
 80229b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80229ba:	4798      	blx	r3
 80229bc:	4bb3      	ldr	r3, [pc, #716]	@ (8022c8c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a4>)
 80229be:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80229c2:	881b      	ldrh	r3, [r3, #0]
 80229c4:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 80229c8:	fb03 1202 	mla	r2, r3, r2, r1
 80229cc:	2100      	movs	r1, #0
 80229ce:	436b      	muls	r3, r5
 80229d0:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 80229d4:	2280      	movs	r2, #128	@ 0x80
 80229d6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80229da:	930a      	str	r3, [sp, #40]	@ 0x28
 80229dc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80229e0:	fb94 f3f3 	sdiv	r3, r4, r3
 80229e4:	9305      	str	r3, [sp, #20]
 80229e6:	9b01      	ldr	r3, [sp, #4]
 80229e8:	3304      	adds	r3, #4
 80229ea:	4618      	mov	r0, r3
 80229ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80229ee:	f00b faa7 	bl	802df40 <memset>
 80229f2:	2300      	movs	r3, #0
 80229f4:	9304      	str	r3, [sp, #16]
 80229f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80229f8:	455b      	cmp	r3, fp
 80229fa:	f240 81e0 	bls.w	8022dbe <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4d6>
 80229fe:	f04f 0e07 	mov.w	lr, #7
 8022a02:	2c00      	cmp	r4, #0
 8022a04:	f000 8104 	beq.w	8022c10 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x328>
 8022a08:	f89a 5000 	ldrb.w	r5, [sl]
 8022a0c:	f10a 0701 	add.w	r7, sl, #1
 8022a10:	b2ed      	uxtb	r5, r5
 8022a12:	11aa      	asrs	r2, r5, #6
 8022a14:	d10c      	bne.n	8022a30 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x148>
 8022a16:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8022a1a:	9b01      	ldr	r3, [sp, #4]
 8022a1c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8022a20:	88ae      	ldrh	r6, [r5, #4]
 8022a22:	3c01      	subs	r4, #1
 8022a24:	b2a4      	uxth	r4, r4
 8022a26:	46ba      	mov	sl, r7
 8022a28:	e7eb      	b.n	8022a02 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x11a>
 8022a2a:	f8dd a020 	ldr.w	sl, [sp, #32]
 8022a2e:	e7ad      	b.n	802298c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa4>
 8022a30:	2a01      	cmp	r2, #1
 8022a32:	d129      	bne.n	8022a88 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1a0>
 8022a34:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8022a38:	f005 0203 	and.w	r2, r5, #3
 8022a3c:	2103      	movs	r1, #3
 8022a3e:	3b02      	subs	r3, #2
 8022a40:	4413      	add	r3, r2
 8022a42:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8022a46:	f3c5 1501 	ubfx	r5, r5, #4, #2
 8022a4a:	f003 031f 	and.w	r3, r3, #31
 8022a4e:	3a02      	subs	r2, #2
 8022a50:	3d02      	subs	r5, #2
 8022a52:	f363 0604 	bfi	r6, r3, #0, #5
 8022a56:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8022a5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022a5e:	f362 164a 	bfi	r6, r2, #5, #6
 8022a62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022a66:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8022a6a:	f005 051f 	and.w	r5, r5, #31
 8022a6e:	fb11 2205 	smlabb	r2, r1, r5, r2
 8022a72:	f365 26cf 	bfi	r6, r5, #11, #5
 8022a76:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8022a7a:	9a01      	ldr	r2, [sp, #4]
 8022a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022a80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022a84:	809e      	strh	r6, [r3, #4]
 8022a86:	e7cc      	b.n	8022a22 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x13a>
 8022a88:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8022a8c:	2a02      	cmp	r2, #2
 8022a8e:	b2ab      	uxth	r3, r5
 8022a90:	d136      	bne.n	8022b00 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x218>
 8022a92:	2101      	movs	r1, #1
 8022a94:	fb12 1205 	smlabb	r2, r2, r5, r1
 8022a98:	4492      	add	sl, r2
 8022a9a:	463a      	mov	r2, r7
 8022a9c:	4552      	cmp	r2, sl
 8022a9e:	d01d      	beq.n	8022adc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1f4>
 8022aa0:	4694      	mov	ip, r2
 8022aa2:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8022aa6:	7852      	ldrb	r2, [r2, #1]
 8022aa8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8022aac:	f001 021f 	and.w	r2, r1, #31
 8022ab0:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8022ab4:	ea4f 29d1 	mov.w	r9, r1, lsr #11
 8022ab8:	460e      	mov	r6, r1
 8022aba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022abc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022ac0:	2203      	movs	r2, #3
 8022ac2:	fb12 0009 	smlabb	r0, r2, r9, r0
 8022ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022ac8:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8022acc:	9a01      	ldr	r2, [sp, #4]
 8022ace:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8022ad2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8022ad6:	4662      	mov	r2, ip
 8022ad8:	8081      	strh	r1, [r0, #4]
 8022ada:	e7df      	b.n	8022a9c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b4>
 8022adc:	429c      	cmp	r4, r3
 8022ade:	d20b      	bcs.n	8022af8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x210>
 8022ae0:	1b2d      	subs	r5, r5, r4
 8022ae2:	eb07 0744 	add.w	r7, r7, r4, lsl #1
 8022ae6:	2d00      	cmp	r5, #0
 8022ae8:	f300 8171 	bgt.w	8022dce <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4e6>
 8022aec:	f8dd 9000 	ldr.w	r9, [sp]
 8022af0:	2400      	movs	r4, #0
 8022af2:	2301      	movs	r3, #1
 8022af4:	9304      	str	r3, [sp, #16]
 8022af6:	e00b      	b.n	8022b10 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022af8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022afc:	1ae4      	subs	r4, r4, r3
 8022afe:	e791      	b.n	8022a24 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x13c>
 8022b00:	429c      	cmp	r4, r3
 8022b02:	d2fb      	bcs.n	8022afc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x214>
 8022b04:	1b2d      	subs	r5, r5, r4
 8022b06:	2d00      	cmp	r5, #0
 8022b08:	dc3b      	bgt.n	8022b82 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x29a>
 8022b0a:	f8dd 9000 	ldr.w	r9, [sp]
 8022b0e:	2400      	movs	r4, #0
 8022b10:	f1b9 0f00 	cmp.w	r9, #0
 8022b14:	f340 8113 	ble.w	8022d3e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x456>
 8022b18:	783b      	ldrb	r3, [r7, #0]
 8022b1a:	f107 0a01 	add.w	sl, r7, #1
 8022b1e:	b2db      	uxtb	r3, r3
 8022b20:	119a      	asrs	r2, r3, #6
 8022b22:	d17d      	bne.n	8022c20 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x338>
 8022b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022b28:	9a01      	ldr	r2, [sp, #4]
 8022b2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022b2e:	889e      	ldrh	r6, [r3, #4]
 8022b30:	2c3f      	cmp	r4, #63	@ 0x3f
 8022b32:	f340 80a2 	ble.w	8022c7a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x392>
 8022b36:	2301      	movs	r3, #1
 8022b38:	461f      	mov	r7, r3
 8022b3a:	1bdd      	subs	r5, r3, r7
 8022b3c:	19e3      	adds	r3, r4, r7
 8022b3e:	eba9 0907 	sub.w	r9, r9, r7
 8022b42:	2b40      	cmp	r3, #64	@ 0x40
 8022b44:	dd13      	ble.n	8022b6e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8022b46:	4640      	mov	r0, r8
 8022b48:	0061      	lsls	r1, r4, #1
 8022b4a:	f7f0 fa1b 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 8022b4e:	4641      	mov	r1, r8
 8022b50:	9b06      	ldr	r3, [sp, #24]
 8022b52:	b222      	sxth	r2, r4
 8022b54:	4658      	mov	r0, fp
 8022b56:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8022b5a:	f7f0 fa85 	bl	8013068 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>
 8022b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8022c90 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a8>)
 8022b60:	2400      	movs	r4, #0
 8022b62:	4598      	cmp	r8, r3
 8022b64:	bf0c      	ite	eq
 8022b66:	f8df 812c 	ldreq.w	r8, [pc, #300]	@ 8022c94 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ac>
 8022b6a:	f8df 8124 	ldrne.w	r8, [pc, #292]	@ 8022c90 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a8>
 8022b6e:	b2b1      	uxth	r1, r6
 8022b70:	463b      	mov	r3, r7
 8022b72:	eb08 0244 	add.w	r2, r8, r4, lsl #1
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d04f      	beq.n	8022c1a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x332>
 8022b7a:	f822 1b02 	strh.w	r1, [r2], #2
 8022b7e:	3b01      	subs	r3, #1
 8022b80:	e7f9      	b.n	8022b76 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x28e>
 8022b82:	9b00      	ldr	r3, [sp, #0]
 8022b84:	9a00      	ldr	r2, [sp, #0]
 8022b86:	42ab      	cmp	r3, r5
 8022b88:	bfa8      	it	ge
 8022b8a:	462b      	movge	r3, r5
 8022b8c:	eba2 0903 	sub.w	r9, r2, r3
 8022b90:	9a04      	ldr	r2, [sp, #16]
 8022b92:	1ae8      	subs	r0, r5, r3
 8022b94:	b94a      	cbnz	r2, 8022baa <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2c2>
 8022b96:	b2b4      	uxth	r4, r6
 8022b98:	f1a8 0102 	sub.w	r1, r8, #2
 8022b9c:	461a      	mov	r2, r3
 8022b9e:	2a00      	cmp	r2, #0
 8022ba0:	dc32      	bgt.n	8022c08 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x320>
 8022ba2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ba6:	4605      	mov	r5, r0
 8022ba8:	e7b2      	b.n	8022b10 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022baa:	46aa      	mov	sl, r5
 8022bac:	4605      	mov	r5, r0
 8022bae:	2400      	movs	r4, #0
 8022bb0:	4639      	mov	r1, r7
 8022bb2:	9404      	str	r4, [sp, #16]
 8022bb4:	f817 2b02 	ldrb.w	r2, [r7], #2
 8022bb8:	7849      	ldrb	r1, [r1, #1]
 8022bba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022bbe:	f002 011f 	and.w	r1, r2, #31
 8022bc2:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 8022bc6:	ea4f 2ed2 	mov.w	lr, r2, lsr #11
 8022bca:	4616      	mov	r6, r2
 8022bcc:	4608      	mov	r0, r1
 8022bce:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8022bd2:	2103      	movs	r1, #3
 8022bd4:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8022bd8:	2107      	movs	r1, #7
 8022bda:	fb11 cc00 	smlabb	ip, r1, r0, ip
 8022bde:	9901      	ldr	r1, [sp, #4]
 8022be0:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8022be4:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 8022be8:	9904      	ldr	r1, [sp, #16]
 8022bea:	428b      	cmp	r3, r1
 8022bec:	f8ac 2004 	strh.w	r2, [ip, #4]
 8022bf0:	4639      	mov	r1, r7
 8022bf2:	bfc4      	itt	gt
 8022bf4:	f828 2014 	strhgt.w	r2, [r8, r4, lsl #1]
 8022bf8:	3401      	addgt	r4, #1
 8022bfa:	9a04      	ldr	r2, [sp, #16]
 8022bfc:	3201      	adds	r2, #1
 8022bfe:	4552      	cmp	r2, sl
 8022c00:	9204      	str	r2, [sp, #16]
 8022c02:	dbd7      	blt.n	8022bb4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2cc>
 8022c04:	2300      	movs	r3, #0
 8022c06:	e775      	b.n	8022af4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x20c>
 8022c08:	f821 4f02 	strh.w	r4, [r1, #2]!
 8022c0c:	3a01      	subs	r2, #1
 8022c0e:	e7c6      	b.n	8022b9e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2b6>
 8022c10:	f8dd 9000 	ldr.w	r9, [sp]
 8022c14:	4657      	mov	r7, sl
 8022c16:	4625      	mov	r5, r4
 8022c18:	e77a      	b.n	8022b10 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022c1a:	443c      	add	r4, r7
 8022c1c:	4657      	mov	r7, sl
 8022c1e:	e777      	b.n	8022b10 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022c20:	2a01      	cmp	r2, #1
 8022c22:	d139      	bne.n	8022c98 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3b0>
 8022c24:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8022c28:	f003 0203 	and.w	r2, r3, #3
 8022c2c:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8022c30:	3902      	subs	r1, #2
 8022c32:	3802      	subs	r0, #2
 8022c34:	4411      	add	r1, r2
 8022c36:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8022c3a:	f001 011f 	and.w	r1, r1, #31
 8022c3e:	3a02      	subs	r2, #2
 8022c40:	f361 0604 	bfi	r6, r1, #0, #5
 8022c44:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8022c48:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8022c4c:	f360 164a 	bfi	r6, r0, #5, #6
 8022c50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022c54:	eb02 22d6 	add.w	r2, r2, r6, lsr #11
 8022c58:	f002 031f 	and.w	r3, r2, #31
 8022c5c:	2203      	movs	r2, #3
 8022c5e:	f363 26cf 	bfi	r6, r3, #11, #5
 8022c62:	fb12 0303 	smlabb	r3, r2, r3, r0
 8022c66:	2207      	movs	r2, #7
 8022c68:	fb12 3301 	smlabb	r3, r2, r1, r3
 8022c6c:	9a01      	ldr	r2, [sp, #4]
 8022c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022c72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022c76:	809e      	strh	r6, [r3, #4]
 8022c78:	e75a      	b.n	8022b30 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x248>
 8022c7a:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
 8022c7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8022c82:	3401      	adds	r4, #1
 8022c84:	e7ca      	b.n	8022c1c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x334>
 8022c86:	bf00      	nop
 8022c88:	200122c4 	.word	0x200122c4
 8022c8c:	200122be 	.word	0x200122be
 8022c90:	20000100 	.word	0x20000100
 8022c94:	20000200 	.word	0x20000200
 8022c98:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8022c9c:	464f      	mov	r7, r9
 8022c9e:	45a9      	cmp	r9, r5
 8022ca0:	462b      	mov	r3, r5
 8022ca2:	bfa8      	it	ge
 8022ca4:	462f      	movge	r7, r5
 8022ca6:	2a02      	cmp	r2, #2
 8022ca8:	f47f af47 	bne.w	8022b3a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x252>
 8022cac:	19e3      	adds	r3, r4, r7
 8022cae:	2b40      	cmp	r3, #64	@ 0x40
 8022cb0:	dd13      	ble.n	8022cda <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f2>
 8022cb2:	4640      	mov	r0, r8
 8022cb4:	0061      	lsls	r1, r4, #1
 8022cb6:	f7f0 f965 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 8022cba:	4641      	mov	r1, r8
 8022cbc:	9b06      	ldr	r3, [sp, #24]
 8022cbe:	b222      	sxth	r2, r4
 8022cc0:	4658      	mov	r0, fp
 8022cc2:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8022cc6:	f7f0 f9cf 	bl	8013068 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>
 8022cca:	4b46      	ldr	r3, [pc, #280]	@ (8022de4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4fc>)
 8022ccc:	2400      	movs	r4, #0
 8022cce:	4598      	cmp	r8, r3
 8022cd0:	bf0c      	ite	eq
 8022cd2:	f8df 811c 	ldreq.w	r8, [pc, #284]	@ 8022df0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8022cd6:	f8df 810c 	ldrne.w	r8, [pc, #268]	@ 8022de4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4fc>
 8022cda:	4652      	mov	r2, sl
 8022cdc:	2100      	movs	r1, #0
 8022cde:	42a9      	cmp	r1, r5
 8022ce0:	da27      	bge.n	8022d32 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x44a>
 8022ce2:	4694      	mov	ip, r2
 8022ce4:	42b9      	cmp	r1, r7
 8022ce6:	f101 0101 	add.w	r1, r1, #1
 8022cea:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8022cee:	7852      	ldrb	r2, [r2, #1]
 8022cf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022cf4:	f003 021f 	and.w	r2, r3, #31
 8022cf8:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8022cfc:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8022d00:	461e      	mov	r6, r3
 8022d02:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022d04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022d08:	f04f 0203 	mov.w	r2, #3
 8022d0c:	fb12 0e0e 	smlabb	lr, r2, lr, r0
 8022d10:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022d12:	f04f 0207 	mov.w	r2, #7
 8022d16:	fb12 e200 	smlabb	r2, r2, r0, lr
 8022d1a:	9801      	ldr	r0, [sp, #4]
 8022d1c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022d20:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022d24:	8093      	strh	r3, [r2, #4]
 8022d26:	4662      	mov	r2, ip
 8022d28:	bfbc      	itt	lt
 8022d2a:	f828 3014 	strhlt.w	r3, [r8, r4, lsl #1]
 8022d2e:	3401      	addlt	r4, #1
 8022d30:	e7d5      	b.n	8022cde <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f6>
 8022d32:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8022d36:	eba9 0907 	sub.w	r9, r9, r7
 8022d3a:	1bed      	subs	r5, r5, r7
 8022d3c:	e76e      	b.n	8022c1c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x334>
 8022d3e:	b15c      	cbz	r4, 8022d58 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x470>
 8022d40:	0061      	lsls	r1, r4, #1
 8022d42:	4640      	mov	r0, r8
 8022d44:	f7f0 f91e 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 8022d48:	4658      	mov	r0, fp
 8022d4a:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8022d4e:	9b06      	ldr	r3, [sp, #24]
 8022d50:	b222      	sxth	r2, r4
 8022d52:	4641      	mov	r1, r8
 8022d54:	f7f0 f988 	bl	8013068 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>
 8022d58:	4b23      	ldr	r3, [pc, #140]	@ (8022de8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x500>)
 8022d5a:	9a00      	ldr	r2, [sp, #0]
 8022d5c:	881b      	ldrh	r3, [r3, #0]
 8022d5e:	1a9b      	subs	r3, r3, r2
 8022d60:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 8022d64:	9b05      	ldr	r3, [sp, #20]
 8022d66:	3301      	adds	r3, #1
 8022d68:	9305      	str	r3, [sp, #20]
 8022d6a:	9a05      	ldr	r2, [sp, #20]
 8022d6c:	9b02      	ldr	r3, [sp, #8]
 8022d6e:	4293      	cmp	r3, r2
 8022d70:	d11e      	bne.n	8022db0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4c8>
 8022d72:	9b03      	ldr	r3, [sp, #12]
 8022d74:	2100      	movs	r1, #0
 8022d76:	9a03      	ldr	r2, [sp, #12]
 8022d78:	f04f 0600 	mov.w	r6, #0
 8022d7c:	f103 0901 	add.w	r9, r3, #1
 8022d80:	9b07      	ldr	r3, [sp, #28]
 8022d82:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8022d86:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8022d8a:	2280      	movs	r2, #128	@ 0x80
 8022d8c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8022d90:	9b08      	ldr	r3, [sp, #32]
 8022d92:	ba3f      	rev	r7, r7
 8022d94:	1b64      	subs	r4, r4, r5
 8022d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022d98:	441f      	add	r7, r3
 8022d9a:	f00b f8d1 	bl	802df40 <memset>
 8022d9e:	b2a4      	uxth	r4, r4
 8022da0:	2300      	movs	r3, #0
 8022da2:	f8cd 900c 	str.w	r9, [sp, #12]
 8022da6:	9305      	str	r3, [sp, #20]
 8022da8:	f7f0 f8d4 	bl	8012f54 <_ZN8touchgfx5paint8tearDownEv>
 8022dac:	46ba      	mov	sl, r7
 8022dae:	e622      	b.n	80229f6 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x10e>
 8022db0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
 8022db4:	9b00      	ldr	r3, [sp, #0]
 8022db6:	1ae4      	subs	r4, r4, r3
 8022db8:	1b64      	subs	r4, r4, r5
 8022dba:	b2a4      	uxth	r4, r4
 8022dbc:	e7f4      	b.n	8022da8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4c0>
 8022dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8022dec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x504>)
 8022dc0:	6818      	ldr	r0, [r3, #0]
 8022dc2:	6803      	ldr	r3, [r0, #0]
 8022dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022dc6:	4798      	blx	r3
 8022dc8:	b011      	add	sp, #68	@ 0x44
 8022dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dce:	9b00      	ldr	r3, [sp, #0]
 8022dd0:	46aa      	mov	sl, r5
 8022dd2:	9a00      	ldr	r2, [sp, #0]
 8022dd4:	42ab      	cmp	r3, r5
 8022dd6:	bfa8      	it	ge
 8022dd8:	462b      	movge	r3, r5
 8022dda:	eba2 0903 	sub.w	r9, r2, r3
 8022dde:	1aed      	subs	r5, r5, r3
 8022de0:	e6e5      	b.n	8022bae <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2c6>
 8022de2:	bf00      	nop
 8022de4:	20000100 	.word	0x20000100
 8022de8:	200122be 	.word	0x200122be
 8022dec:	200122c4 	.word	0x200122c4
 8022df0:	20000200 	.word	0x20000200

08022df4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8022df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022df8:	b093      	sub	sp, #76	@ 0x4c
 8022dfa:	4616      	mov	r6, r2
 8022dfc:	4682      	mov	sl, r0
 8022dfe:	460c      	mov	r4, r1
 8022e00:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8022e04:	9208      	str	r2, [sp, #32]
 8022e06:	2a00      	cmp	r2, #0
 8022e08:	f000 82e9 	beq.w	80233de <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5ea>
 8022e0c:	6830      	ldr	r0, [r6, #0]
 8022e0e:	ad0e      	add	r5, sp, #56	@ 0x38
 8022e10:	6871      	ldr	r1, [r6, #4]
 8022e12:	c503      	stmia	r5!, {r0, r1}
 8022e14:	6818      	ldr	r0, [r3, #0]
 8022e16:	ad10      	add	r5, sp, #64	@ 0x40
 8022e18:	6859      	ldr	r1, [r3, #4]
 8022e1a:	c503      	stmia	r5!, {r0, r1}
 8022e1c:	a80e      	add	r0, sp, #56	@ 0x38
 8022e1e:	f7f7 ff71 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022e22:	4631      	mov	r1, r6
 8022e24:	a810      	add	r0, sp, #64	@ 0x40
 8022e26:	f7f7 ff95 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022e2a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022e2e:	7825      	ldrb	r5, [r4, #0]
 8022e30:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022e34:	7860      	ldrb	r0, [r4, #1]
 8022e36:	bfdb      	ittet	le
 8022e38:	b293      	uxthle	r3, r2
 8022e3a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022e3e:	2301      	movgt	r3, #1
 8022e40:	fb91 f3f3 	sdivle	r3, r1, r3
 8022e44:	9303      	str	r3, [sp, #12]
 8022e46:	2d05      	cmp	r5, #5
 8022e48:	9903      	ldr	r1, [sp, #12]
 8022e4a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8022e4e:	440b      	add	r3, r1
 8022e50:	f103 33ff 	add.w	r3, r3, #4294967295
 8022e54:	fb93 f3f1 	sdiv	r3, r3, r1
 8022e58:	f103 33ff 	add.w	r3, r3, #4294967295
 8022e5c:	78a1      	ldrb	r1, [r4, #2]
 8022e5e:	b29b      	uxth	r3, r3
 8022e60:	f040 8094 	bne.w	8022f8c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x198>
 8022e64:	2806      	cmp	r0, #6
 8022e66:	f040 8091 	bne.w	8022f8c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x198>
 8022e6a:	2905      	cmp	r1, #5
 8022e6c:	f040 808e 	bne.w	8022f8c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x198>
 8022e70:	2102      	movs	r1, #2
 8022e72:	9102      	str	r1, [sp, #8]
 8022e74:	2103      	movs	r1, #3
 8022e76:	9101      	str	r1, [sp, #4]
 8022e78:	f104 0108 	add.w	r1, r4, #8
 8022e7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022e80:	9109      	str	r1, [sp, #36]	@ 0x24
 8022e82:	9903      	ldr	r1, [sp, #12]
 8022e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8022e86:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022e8a:	fb93 f0f1 	sdiv	r0, r3, r1
 8022e8e:	b284      	uxth	r4, r0
 8022e90:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8022e94:	b280      	uxth	r0, r0
 8022e96:	9405      	str	r4, [sp, #20]
 8022e98:	9d05      	ldr	r5, [sp, #20]
 8022e9a:	9c03      	ldr	r4, [sp, #12]
 8022e9c:	fb05 3514 	mls	r5, r5, r4, r3
 8022ea0:	fb15 f502 	smulbb	r5, r5, r2
 8022ea4:	440d      	add	r5, r1
 8022ea6:	b2ad      	uxth	r5, r5
 8022ea8:	2800      	cmp	r0, #0
 8022eaa:	d072      	beq.n	8022f92 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x19e>
 8022eac:	1e42      	subs	r2, r0, #1
 8022eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022eb0:	f850 b022 	ldr.w	fp, [r0, r2, lsl #2]
 8022eb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022eb6:	fa9b fb8b 	rev.w	fp, fp
 8022eba:	4493      	add	fp, r2
 8022ebc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8022ec0:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	@ 0x46
 8022ec4:	4411      	add	r1, r2
 8022ec6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022eca:	f8df 9338 	ldr.w	r9, [pc, #824]	@ 8023204 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x410>
 8022ece:	4413      	add	r3, r2
 8022ed0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8022ed4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022ed8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8022edc:	9304      	str	r3, [sp, #16]
 8022ede:	4bc7      	ldr	r3, [pc, #796]	@ (80231fc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>)
 8022ee0:	6818      	ldr	r0, [r3, #0]
 8022ee2:	6803      	ldr	r3, [r0, #0]
 8022ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022ee6:	4798      	blx	r3
 8022ee8:	4bc5      	ldr	r3, [pc, #788]	@ (8023200 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x40c>)
 8022eea:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8022eee:	881b      	ldrh	r3, [r3, #0]
 8022ef0:	f9bd 7042 	ldrsh.w	r7, [sp, #66]	@ 0x42
 8022ef4:	fb03 2707 	mla	r7, r3, r7, r2
 8022ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022efc:	4363      	muls	r3, r4
 8022efe:	2400      	movs	r4, #0
 8022f00:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8022f04:	4621      	mov	r1, r4
 8022f06:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8022f0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8022f0c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022f10:	fb95 f3f3 	sdiv	r3, r5, r3
 8022f14:	9307      	str	r3, [sp, #28]
 8022f16:	f10a 0304 	add.w	r3, sl, #4
 8022f1a:	4618      	mov	r0, r3
 8022f1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022f1e:	f00b f80f 	bl	802df40 <memset>
 8022f22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f24:	42bb      	cmp	r3, r7
 8022f26:	f240 8255 	bls.w	80233d4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5e0>
 8022f2a:	2107      	movs	r1, #7
 8022f2c:	200b      	movs	r0, #11
 8022f2e:	2d00      	cmp	r5, #0
 8022f30:	f000 8132 	beq.w	8023198 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a4>
 8022f34:	f89b 3000 	ldrb.w	r3, [fp]
 8022f38:	b2db      	uxtb	r3, r3
 8022f3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8022f3c:	d12c      	bne.n	8022f98 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1a4>
 8022f3e:	f89b e001 	ldrb.w	lr, [fp, #1]
 8022f42:	2203      	movs	r2, #3
 8022f44:	f89b c002 	ldrb.w	ip, [fp, #2]
 8022f48:	3d01      	subs	r5, #1
 8022f4a:	fa5f fe8e 	uxtb.w	lr, lr
 8022f4e:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8022f52:	fa5f fc8c 	uxtb.w	ip, ip
 8022f56:	f10b 0604 	add.w	r6, fp, #4
 8022f5a:	f36e 0407 	bfi	r4, lr, #0, #8
 8022f5e:	fa5f f888 	uxtb.w	r8, r8
 8022f62:	b2ad      	uxth	r5, r5
 8022f64:	f36c 240f 	bfi	r4, ip, #8, #8
 8022f68:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8022f6c:	fb12 cc08 	smlabb	ip, r2, r8, ip
 8022f70:	f368 4417 	bfi	r4, r8, #16, #8
 8022f74:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8022f78:	0e23      	lsrs	r3, r4, #24
 8022f7a:	fb10 c303 	smlabb	r3, r0, r3, ip
 8022f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022f82:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8022f86:	605c      	str	r4, [r3, #4]
 8022f88:	46b3      	mov	fp, r6
 8022f8a:	e7d0      	b.n	8022f2e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x13a>
 8022f8c:	2100      	movs	r1, #0
 8022f8e:	9102      	str	r1, [sp, #8]
 8022f90:	e771      	b.n	8022e76 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x82>
 8022f92:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8022f96:	e791      	b.n	8022ebc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xc8>
 8022f98:	2bff      	cmp	r3, #255	@ 0xff
 8022f9a:	d12a      	bne.n	8022ff2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1fe>
 8022f9c:	f89b c001 	ldrb.w	ip, [fp, #1]
 8022fa0:	2203      	movs	r2, #3
 8022fa2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022fa6:	3d01      	subs	r5, #1
 8022fa8:	fa5f fc8c 	uxtb.w	ip, ip
 8022fac:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022fb0:	b2db      	uxtb	r3, r3
 8022fb2:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022fb6:	f36c 0407 	bfi	r4, ip, #0, #8
 8022fba:	fa5f fe8e 	uxtb.w	lr, lr
 8022fbe:	fa5f f888 	uxtb.w	r8, r8
 8022fc2:	f10b 0605 	add.w	r6, fp, #5
 8022fc6:	f363 240f 	bfi	r4, r3, #8, #8
 8022fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022fce:	b2ad      	uxth	r5, r5
 8022fd0:	fb12 330e 	smlabb	r3, r2, lr, r3
 8022fd4:	f36e 4417 	bfi	r4, lr, #16, #8
 8022fd8:	fb11 330c 	smlabb	r3, r1, ip, r3
 8022fdc:	f368 641f 	bfi	r4, r8, #24, #8
 8022fe0:	fb10 3808 	smlabb	r8, r0, r8, r3
 8022fe4:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8022fe8:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
 8022fec:	f8c8 4004 	str.w	r4, [r8, #4]
 8022ff0:	e7ca      	b.n	8022f88 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x194>
 8022ff2:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 8022ff6:	f10b 0601 	add.w	r6, fp, #1
 8022ffa:	d107      	bne.n	802300c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x218>
 8022ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023000:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023004:	685c      	ldr	r4, [r3, #4]
 8023006:	3d01      	subs	r5, #1
 8023008:	b2ad      	uxth	r5, r5
 802300a:	e7bd      	b.n	8022f88 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x194>
 802300c:	f1bc 0f01 	cmp.w	ip, #1
 8023010:	d135      	bne.n	802307e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x28a>
 8023012:	f003 0e03 	and.w	lr, r3, #3
 8023016:	9a01      	ldr	r2, [sp, #4]
 8023018:	f3c3 0c81 	ubfx	ip, r3, #2, #2
 802301c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023020:	f1ae 0e02 	sub.w	lr, lr, #2
 8023024:	f1ac 0c02 	sub.w	ip, ip, #2
 8023028:	3b02      	subs	r3, #2
 802302a:	fa0e fe02 	lsl.w	lr, lr, r2
 802302e:	9a02      	ldr	r2, [sp, #8]
 8023030:	44a6      	add	lr, r4
 8023032:	fa0c fc02 	lsl.w	ip, ip, r2
 8023036:	9a01      	ldr	r2, [sp, #4]
 8023038:	fa5f fe8e 	uxtb.w	lr, lr
 802303c:	4093      	lsls	r3, r2
 802303e:	2203      	movs	r2, #3
 8023040:	f36e 0407 	bfi	r4, lr, #0, #8
 8023044:	eb0c 2c14 	add.w	ip, ip, r4, lsr #8
 8023048:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 802304c:	f36c 240f 	bfi	r4, ip, #8, #8
 8023050:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8023054:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8023058:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802305c:	fb12 cc03 	smlabb	ip, r2, r3, ip
 8023060:	f363 4417 	bfi	r4, r3, #16, #8
 8023064:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8023068:	ea4f 6814 	mov.w	r8, r4, lsr #24
 802306c:	fb10 c808 	smlabb	r8, r0, r8, ip
 8023070:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8023074:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
 8023078:	f8c8 4004 	str.w	r4, [r8, #4]
 802307c:	e7c3      	b.n	8023006 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x212>
 802307e:	f1bc 0f02 	cmp.w	ip, #2
 8023082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023086:	d135      	bne.n	80230f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x300>
 8023088:	f89b 8001 	ldrb.w	r8, [fp, #1]
 802308c:	3b20      	subs	r3, #32
 802308e:	9a01      	ldr	r2, [sp, #4]
 8023090:	f10b 0602 	add.w	r6, fp, #2
 8023094:	fa5f f888 	uxtb.w	r8, r8
 8023098:	f008 0c0f 	and.w	ip, r8, #15
 802309c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80230a0:	f1ac 0c08 	sub.w	ip, ip, #8
 80230a4:	f1a8 0808 	sub.w	r8, r8, #8
 80230a8:	449c      	add	ip, r3
 80230aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80230ae:	9a02      	ldr	r2, [sp, #8]
 80230b0:	44a4      	add	ip, r4
 80230b2:	fa03 fe02 	lsl.w	lr, r3, r2
 80230b6:	4443      	add	r3, r8
 80230b8:	9a01      	ldr	r2, [sp, #4]
 80230ba:	fa5f fc8c 	uxtb.w	ip, ip
 80230be:	4093      	lsls	r3, r2
 80230c0:	2203      	movs	r2, #3
 80230c2:	f36c 0407 	bfi	r4, ip, #0, #8
 80230c6:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80230ca:	f00e 0eff 	and.w	lr, lr, #255	@ 0xff
 80230ce:	f36e 240f 	bfi	r4, lr, #8, #8
 80230d2:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80230d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80230da:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80230de:	fb12 ee03 	smlabb	lr, r2, r3, lr
 80230e2:	f363 4417 	bfi	r4, r3, #16, #8
 80230e6:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 80230ea:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80230ee:	fb10 e808 	smlabb	r8, r0, r8, lr
 80230f2:	e7bd      	b.n	8023070 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x27c>
 80230f4:	3301      	adds	r3, #1
 80230f6:	42ab      	cmp	r3, r5
 80230f8:	dd30      	ble.n	802315c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 80230fa:	1b5d      	subs	r5, r3, r5
 80230fc:	2d00      	cmp	r5, #0
 80230fe:	dc2f      	bgt.n	8023160 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x36c>
 8023100:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023104:	2200      	movs	r2, #0
 8023106:	f1b8 0f00 	cmp.w	r8, #0
 802310a:	f340 8121 	ble.w	8023350 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55c>
 802310e:	7833      	ldrb	r3, [r6, #0]
 8023110:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8023114:	b2db      	uxtb	r3, r3
 8023116:	2bfe      	cmp	r3, #254	@ 0xfe
 8023118:	d142      	bne.n	80231a0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3ac>
 802311a:	7870      	ldrb	r0, [r6, #1]
 802311c:	1d33      	adds	r3, r6, #4
 802311e:	78b1      	ldrb	r1, [r6, #2]
 8023120:	f04f 0c03 	mov.w	ip, #3
 8023124:	b2c0      	uxtb	r0, r0
 8023126:	9306      	str	r3, [sp, #24]
 8023128:	b2c9      	uxtb	r1, r1
 802312a:	78f3      	ldrb	r3, [r6, #3]
 802312c:	f360 0407 	bfi	r4, r0, #0, #8
 8023130:	b2db      	uxtb	r3, r3
 8023132:	f361 240f 	bfi	r4, r1, #8, #8
 8023136:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802313a:	fb1c 1103 	smlabb	r1, ip, r3, r1
 802313e:	f363 4417 	bfi	r4, r3, #16, #8
 8023142:	2307      	movs	r3, #7
 8023144:	0e26      	lsrs	r6, r4, #24
 8023146:	fb13 1100 	smlabb	r1, r3, r0, r1
 802314a:	230b      	movs	r3, #11
 802314c:	fb13 1306 	smlabb	r3, r3, r6, r1
 8023150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023154:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023158:	605c      	str	r4, [r3, #4]
 802315a:	e049      	b.n	80231f0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>
 802315c:	1aed      	subs	r5, r5, r3
 802315e:	e753      	b.n	8023008 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x214>
 8023160:	9b04      	ldr	r3, [sp, #16]
 8023162:	42ab      	cmp	r3, r5
 8023164:	bfa8      	it	ge
 8023166:	462b      	movge	r3, r5
 8023168:	469b      	mov	fp, r3
 802316a:	9b04      	ldr	r3, [sp, #16]
 802316c:	eba3 080b 	sub.w	r8, r3, fp
 8023170:	0e23      	lsrs	r3, r4, #24
 8023172:	eba5 050b 	sub.w	r5, r5, fp
 8023176:	d00c      	beq.n	8023192 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x39e>
 8023178:	9a08      	ldr	r2, [sp, #32]
 802317a:	fa0f f18b 	sxth.w	r1, fp
 802317e:	4638      	mov	r0, r7
 8023180:	4353      	muls	r3, r2
 8023182:	1c5a      	adds	r2, r3, #1
 8023184:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8023188:	4622      	mov	r2, r4
 802318a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802318e:	f7ef ff13 	bl	8012fb8 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>
 8023192:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 8023196:	e7b5      	b.n	8023104 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8023198:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802319c:	465e      	mov	r6, fp
 802319e:	e7b1      	b.n	8023104 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80231a0:	2bff      	cmp	r3, #255	@ 0xff
 80231a2:	d11c      	bne.n	80231de <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3ea>
 80231a4:	f896 c001 	ldrb.w	ip, [r6, #1]
 80231a8:	1d73      	adds	r3, r6, #5
 80231aa:	78b1      	ldrb	r1, [r6, #2]
 80231ac:	fa5f fc8c 	uxtb.w	ip, ip
 80231b0:	78f0      	ldrb	r0, [r6, #3]
 80231b2:	b2c9      	uxtb	r1, r1
 80231b4:	9306      	str	r3, [sp, #24]
 80231b6:	f36c 0407 	bfi	r4, ip, #0, #8
 80231ba:	7933      	ldrb	r3, [r6, #4]
 80231bc:	b2c0      	uxtb	r0, r0
 80231be:	f361 240f 	bfi	r4, r1, #8, #8
 80231c2:	b2de      	uxtb	r6, r3
 80231c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80231c8:	2303      	movs	r3, #3
 80231ca:	f360 4417 	bfi	r4, r0, #16, #8
 80231ce:	fb13 1100 	smlabb	r1, r3, r0, r1
 80231d2:	2307      	movs	r3, #7
 80231d4:	f366 641f 	bfi	r4, r6, #24, #8
 80231d8:	fb13 110c 	smlabb	r1, r3, ip, r1
 80231dc:	e7b5      	b.n	802314a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 80231de:	1c71      	adds	r1, r6, #1
 80231e0:	9106      	str	r1, [sp, #24]
 80231e2:	1199      	asrs	r1, r3, #6
 80231e4:	d110      	bne.n	8023208 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x414>
 80231e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80231ea:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80231ee:	685c      	ldr	r4, [r3, #4]
 80231f0:	2a3f      	cmp	r2, #63	@ 0x3f
 80231f2:	dd48      	ble.n	8023286 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x492>
 80231f4:	2101      	movs	r1, #1
 80231f6:	460e      	mov	r6, r1
 80231f8:	e085      	b.n	8023306 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x512>
 80231fa:	bf00      	nop
 80231fc:	200122c4 	.word	0x200122c4
 8023200:	200122be 	.word	0x200122be
 8023204:	20000100 	.word	0x20000100
 8023208:	2901      	cmp	r1, #1
 802320a:	d142      	bne.n	8023292 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x49e>
 802320c:	f003 0603 	and.w	r6, r3, #3
 8023210:	9801      	ldr	r0, [sp, #4]
 8023212:	2a3f      	cmp	r2, #63	@ 0x3f
 8023214:	f1a6 0602 	sub.w	r6, r6, #2
 8023218:	fa06 f600 	lsl.w	r6, r6, r0
 802321c:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8023220:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023224:	4426      	add	r6, r4
 8023226:	f1a0 0002 	sub.w	r0, r0, #2
 802322a:	f1a3 0302 	sub.w	r3, r3, #2
 802322e:	fa5f fe86 	uxtb.w	lr, r6
 8023232:	9e02      	ldr	r6, [sp, #8]
 8023234:	f36e 0407 	bfi	r4, lr, #0, #8
 8023238:	fa00 f006 	lsl.w	r0, r0, r6
 802323c:	9e01      	ldr	r6, [sp, #4]
 802323e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023242:	fa03 f306 	lsl.w	r3, r3, r6
 8023246:	f04f 0603 	mov.w	r6, #3
 802324a:	f000 00ff 	and.w	r0, r0, #255	@ 0xff
 802324e:	f360 240f 	bfi	r4, r0, #8, #8
 8023252:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8023256:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802325a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802325e:	fb16 0003 	smlabb	r0, r6, r3, r0
 8023262:	f363 4417 	bfi	r4, r3, #16, #8
 8023266:	f04f 0307 	mov.w	r3, #7
 802326a:	f04f 060b 	mov.w	r6, #11
 802326e:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8023272:	fb13 000e 	smlabb	r0, r3, lr, r0
 8023276:	fb16 060c 	smlabb	r6, r6, ip, r0
 802327a:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 802327e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8023282:	6074      	str	r4, [r6, #4]
 8023284:	dcb7      	bgt.n	80231f6 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x402>
 8023286:	3201      	adds	r2, #1
 8023288:	f849 400b 	str.w	r4, [r9, fp]
 802328c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023290:	e05c      	b.n	802334c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x558>
 8023292:	2902      	cmp	r1, #2
 8023294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023298:	d130      	bne.n	80232fc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x508>
 802329a:	1cb1      	adds	r1, r6, #2
 802329c:	3b20      	subs	r3, #32
 802329e:	f04f 0c03 	mov.w	ip, #3
 80232a2:	9106      	str	r1, [sp, #24]
 80232a4:	7871      	ldrb	r1, [r6, #1]
 80232a6:	9e01      	ldr	r6, [sp, #4]
 80232a8:	b2c9      	uxtb	r1, r1
 80232aa:	f001 000f 	and.w	r0, r1, #15
 80232ae:	1109      	asrs	r1, r1, #4
 80232b0:	3808      	subs	r0, #8
 80232b2:	3908      	subs	r1, #8
 80232b4:	4418      	add	r0, r3
 80232b6:	40b0      	lsls	r0, r6
 80232b8:	9e02      	ldr	r6, [sp, #8]
 80232ba:	4420      	add	r0, r4
 80232bc:	fa03 f606 	lsl.w	r6, r3, r6
 80232c0:	440b      	add	r3, r1
 80232c2:	9901      	ldr	r1, [sp, #4]
 80232c4:	b2c0      	uxtb	r0, r0
 80232c6:	408b      	lsls	r3, r1
 80232c8:	f360 0407 	bfi	r4, r0, #0, #8
 80232cc:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80232d0:	f006 06ff 	and.w	r6, r6, #255	@ 0xff
 80232d4:	f366 240f 	bfi	r4, r6, #8, #8
 80232d8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80232dc:	eb03 4114 	add.w	r1, r3, r4, lsr #16
 80232e0:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 80232e4:	f363 4417 	bfi	r4, r3, #16, #8
 80232e8:	fb1c 6303 	smlabb	r3, ip, r3, r6
 80232ec:	2607      	movs	r6, #7
 80232ee:	0e21      	lsrs	r1, r4, #24
 80232f0:	fb16 3000 	smlabb	r0, r6, r0, r3
 80232f4:	230b      	movs	r3, #11
 80232f6:	fb13 0301 	smlabb	r3, r3, r1, r0
 80232fa:	e729      	b.n	8023150 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x35c>
 80232fc:	1c59      	adds	r1, r3, #1
 80232fe:	4646      	mov	r6, r8
 8023300:	4588      	cmp	r8, r1
 8023302:	bfa8      	it	ge
 8023304:	460e      	movge	r6, r1
 8023306:	1993      	adds	r3, r2, r6
 8023308:	eba8 0806 	sub.w	r8, r8, r6
 802330c:	1b8d      	subs	r5, r1, r6
 802330e:	2b40      	cmp	r3, #64	@ 0x40
 8023310:	dd14      	ble.n	802333c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 8023312:	4648      	mov	r0, r9
 8023314:	0091      	lsls	r1, r2, #2
 8023316:	920d      	str	r2, [sp, #52]	@ 0x34
 8023318:	f7ef fe34 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 802331c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802331e:	4649      	mov	r1, r9
 8023320:	9b08      	ldr	r3, [sp, #32]
 8023322:	4638      	mov	r0, r7
 8023324:	b212      	sxth	r2, r2
 8023326:	445f      	add	r7, fp
 8023328:	f7ef feec 	bl	8013104 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 802332c:	4b2d      	ldr	r3, [pc, #180]	@ (80233e4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f0>)
 802332e:	2200      	movs	r2, #0
 8023330:	4599      	cmp	r9, r3
 8023332:	bf0c      	ite	eq
 8023334:	f8df 90b8 	ldreq.w	r9, [pc, #184]	@ 80233f0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5fc>
 8023338:	f8df 90a8 	ldrne.w	r9, [pc, #168]	@ 80233e4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f0>
 802333c:	eb09 0182 	add.w	r1, r9, r2, lsl #2
 8023340:	4633      	mov	r3, r6
 8023342:	3b01      	subs	r3, #1
 8023344:	f841 4b04 	str.w	r4, [r1], #4
 8023348:	d1fb      	bne.n	8023342 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x54e>
 802334a:	4432      	add	r2, r6
 802334c:	9e06      	ldr	r6, [sp, #24]
 802334e:	e6da      	b.n	8023106 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8023350:	b172      	cbz	r2, 8023370 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 8023352:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8023356:	4648      	mov	r0, r9
 8023358:	9206      	str	r2, [sp, #24]
 802335a:	4641      	mov	r1, r8
 802335c:	f7ef fe12 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 8023360:	9a06      	ldr	r2, [sp, #24]
 8023362:	4638      	mov	r0, r7
 8023364:	4447      	add	r7, r8
 8023366:	9b08      	ldr	r3, [sp, #32]
 8023368:	b212      	sxth	r2, r2
 802336a:	4649      	mov	r1, r9
 802336c:	f7ef feca 	bl	8013104 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 8023370:	4b1d      	ldr	r3, [pc, #116]	@ (80233e8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f4>)
 8023372:	9a04      	ldr	r2, [sp, #16]
 8023374:	881b      	ldrh	r3, [r3, #0]
 8023376:	1a9b      	subs	r3, r3, r2
 8023378:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 802337c:	9b07      	ldr	r3, [sp, #28]
 802337e:	3301      	adds	r3, #1
 8023380:	9307      	str	r3, [sp, #28]
 8023382:	9a07      	ldr	r2, [sp, #28]
 8023384:	9b03      	ldr	r3, [sp, #12]
 8023386:	4293      	cmp	r3, r2
 8023388:	d11d      	bne.n	80233c6 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5d2>
 802338a:	9b05      	ldr	r3, [sp, #20]
 802338c:	2400      	movs	r4, #0
 802338e:	9a05      	ldr	r2, [sp, #20]
 8023390:	f103 0801 	add.w	r8, r3, #1
 8023394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023396:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 802339a:	4621      	mov	r1, r4
 802339c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80233a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80233a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80233a6:	ba36      	rev	r6, r6
 80233a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80233aa:	441e      	add	r6, r3
 80233ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80233b0:	1aed      	subs	r5, r5, r3
 80233b2:	f00a fdc5 	bl	802df40 <memset>
 80233b6:	f8cd 8014 	str.w	r8, [sp, #20]
 80233ba:	b2ad      	uxth	r5, r5
 80233bc:	9407      	str	r4, [sp, #28]
 80233be:	f7ef fdc9 	bl	8012f54 <_ZN8touchgfx5paint8tearDownEv>
 80233c2:	46b3      	mov	fp, r6
 80233c4:	e5ad      	b.n	8022f22 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x12e>
 80233c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80233ca:	9a04      	ldr	r2, [sp, #16]
 80233cc:	1a9b      	subs	r3, r3, r2
 80233ce:	1b5d      	subs	r5, r3, r5
 80233d0:	b2ad      	uxth	r5, r5
 80233d2:	e7f4      	b.n	80233be <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5ca>
 80233d4:	4b05      	ldr	r3, [pc, #20]	@ (80233ec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f8>)
 80233d6:	6818      	ldr	r0, [r3, #0]
 80233d8:	6803      	ldr	r3, [r0, #0]
 80233da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80233dc:	4798      	blx	r3
 80233de:	b013      	add	sp, #76	@ 0x4c
 80233e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233e4:	20000100 	.word	0x20000100
 80233e8:	200122be 	.word	0x200122be
 80233ec:	200122c4 	.word	0x200122c4
 80233f0:	20000200 	.word	0x20000200

080233f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80233f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233f8:	b091      	sub	sp, #68	@ 0x44
 80233fa:	4616      	mov	r6, r2
 80233fc:	4682      	mov	sl, r0
 80233fe:	460d      	mov	r5, r1
 8023400:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 8023404:	9205      	str	r2, [sp, #20]
 8023406:	2a00      	cmp	r2, #0
 8023408:	f000 824e 	beq.w	80238a8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 802340c:	6830      	ldr	r0, [r6, #0]
 802340e:	ac0c      	add	r4, sp, #48	@ 0x30
 8023410:	6871      	ldr	r1, [r6, #4]
 8023412:	c403      	stmia	r4!, {r0, r1}
 8023414:	6818      	ldr	r0, [r3, #0]
 8023416:	ac0e      	add	r4, sp, #56	@ 0x38
 8023418:	6859      	ldr	r1, [r3, #4]
 802341a:	c403      	stmia	r4!, {r0, r1}
 802341c:	a80c      	add	r0, sp, #48	@ 0x30
 802341e:	f7f7 fc71 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023422:	4631      	mov	r1, r6
 8023424:	a80e      	add	r0, sp, #56	@ 0x38
 8023426:	f7f7 fc95 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802342a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 802342e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8023432:	bfdb      	ittet	le
 8023434:	b293      	uxthle	r3, r2
 8023436:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802343a:	2301      	movgt	r3, #1
 802343c:	fb91 f3f3 	sdivle	r3, r1, r3
 8023440:	9301      	str	r3, [sp, #4]
 8023442:	f105 0308 	add.w	r3, r5, #8
 8023446:	9901      	ldr	r1, [sp, #4]
 8023448:	9306      	str	r3, [sp, #24]
 802344a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 802344e:	440b      	add	r3, r1
 8023450:	3b01      	subs	r3, #1
 8023452:	fb93 f3f1 	sdiv	r3, r3, r1
 8023456:	3b01      	subs	r3, #1
 8023458:	9906      	ldr	r1, [sp, #24]
 802345a:	b29b      	uxth	r3, r3
 802345c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023460:	9901      	ldr	r1, [sp, #4]
 8023462:	9307      	str	r3, [sp, #28]
 8023464:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023468:	fb93 f0f1 	sdiv	r0, r3, r1
 802346c:	b284      	uxth	r4, r0
 802346e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8023472:	b280      	uxth	r0, r0
 8023474:	9403      	str	r4, [sp, #12]
 8023476:	9d03      	ldr	r5, [sp, #12]
 8023478:	9c01      	ldr	r4, [sp, #4]
 802347a:	fb05 3514 	mls	r5, r5, r4, r3
 802347e:	fb15 f502 	smulbb	r5, r5, r2
 8023482:	440d      	add	r5, r1
 8023484:	b2ad      	uxth	r5, r5
 8023486:	2800      	cmp	r0, #0
 8023488:	d06d      	beq.n	8023566 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 802348a:	1e42      	subs	r2, r0, #1
 802348c:	9806      	ldr	r0, [sp, #24]
 802348e:	f850 b022 	ldr.w	fp, [r0, r2, lsl #2]
 8023492:	9a07      	ldr	r2, [sp, #28]
 8023494:	fa9b fb8b 	rev.w	fp, fp
 8023498:	4493      	add	fp, r2
 802349a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 802349e:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	@ 0x3e
 80234a2:	4411      	add	r1, r2
 80234a4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80234a8:	f8df 835c 	ldr.w	r8, [pc, #860]	@ 8023808 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 80234ac:	4413      	add	r3, r2
 80234ae:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80234b2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80234b6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80234ba:	9302      	str	r3, [sp, #8]
 80234bc:	4bd0      	ldr	r3, [pc, #832]	@ (8023800 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80234be:	6818      	ldr	r0, [r3, #0]
 80234c0:	6803      	ldr	r3, [r0, #0]
 80234c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80234c4:	4798      	blx	r3
 80234c6:	4bcf      	ldr	r3, [pc, #828]	@ (8023804 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>)
 80234c8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80234cc:	2100      	movs	r1, #0
 80234ce:	881b      	ldrh	r3, [r3, #0]
 80234d0:	f9bd 703a 	ldrsh.w	r7, [sp, #58]	@ 0x3a
 80234d4:	fb03 2707 	mla	r7, r3, r7, r2
 80234d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80234dc:	4363      	muls	r3, r4
 80234de:	f04f 447f 	mov.w	r4, #4278190080	@ 0xff000000
 80234e2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80234e6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80234ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80234ec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80234f0:	fb95 f3f3 	sdiv	r3, r5, r3
 80234f4:	9304      	str	r3, [sp, #16]
 80234f6:	f10a 0304 	add.w	r3, sl, #4
 80234fa:	4618      	mov	r0, r3
 80234fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80234fe:	f00a fd1f 	bl	802df40 <memset>
 8023502:	23ff      	movs	r3, #255	@ 0xff
 8023504:	f88a 3007 	strb.w	r3, [sl, #7]
 8023508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802350a:	42bb      	cmp	r3, r7
 802350c:	f240 81c7 	bls.w	802389e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4aa>
 8023510:	2003      	movs	r0, #3
 8023512:	f04f 0c07 	mov.w	ip, #7
 8023516:	2d00      	cmp	r5, #0
 8023518:	f000 80c0 	beq.w	802369c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2a8>
 802351c:	f89b 3000 	ldrb.w	r3, [fp]
 8023520:	b2db      	uxtb	r3, r3
 8023522:	2bfe      	cmp	r3, #254	@ 0xfe
 8023524:	d122      	bne.n	802356c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x178>
 8023526:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802352a:	3d01      	subs	r5, #1
 802352c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8023530:	f10b 0604 	add.w	r6, fp, #4
 8023534:	b2db      	uxtb	r3, r3
 8023536:	f89b 1003 	ldrb.w	r1, [fp, #3]
 802353a:	b2d2      	uxtb	r2, r2
 802353c:	f363 0407 	bfi	r4, r3, #0, #8
 8023540:	b2c9      	uxtb	r1, r1
 8023542:	b2ad      	uxth	r5, r5
 8023544:	f362 240f 	bfi	r4, r2, #8, #8
 8023548:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802354c:	fb10 2201 	smlabb	r2, r0, r1, r2
 8023550:	f361 4417 	bfi	r4, r1, #16, #8
 8023554:	fb1c 2303 	smlabb	r3, ip, r3, r2
 8023558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802355c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023560:	605c      	str	r4, [r3, #4]
 8023562:	46b3      	mov	fp, r6
 8023564:	e7d7      	b.n	8023516 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x122>
 8023566:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802356a:	e796      	b.n	802349a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa6>
 802356c:	119a      	asrs	r2, r3, #6
 802356e:	f10b 0601 	add.w	r6, fp, #1
 8023572:	d107      	bne.n	8023584 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x190>
 8023574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023578:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 802357c:	685c      	ldr	r4, [r3, #4]
 802357e:	3d01      	subs	r5, #1
 8023580:	b2ad      	uxth	r5, r5
 8023582:	e7ee      	b.n	8023562 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16e>
 8023584:	2a01      	cmp	r2, #1
 8023586:	d124      	bne.n	80235d2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1de>
 8023588:	f003 0103 	and.w	r1, r3, #3
 802358c:	1ea2      	subs	r2, r4, #2
 802358e:	440a      	add	r2, r1
 8023590:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8023594:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023598:	b2d2      	uxtb	r2, r2
 802359a:	3902      	subs	r1, #2
 802359c:	3b02      	subs	r3, #2
 802359e:	f362 0407 	bfi	r4, r2, #0, #8
 80235a2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80235a6:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80235aa:	f361 240f 	bfi	r4, r1, #8, #8
 80235ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80235b2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80235b6:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80235ba:	fb10 1103 	smlabb	r1, r0, r3, r1
 80235be:	f363 4417 	bfi	r4, r3, #16, #8
 80235c2:	fb1c 1202 	smlabb	r2, ip, r2, r1
 80235c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80235ca:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80235ce:	6054      	str	r4, [r2, #4]
 80235d0:	e7d5      	b.n	802357e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18a>
 80235d2:	2a02      	cmp	r2, #2
 80235d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80235d8:	d12b      	bne.n	8023632 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 80235da:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80235de:	f1a3 0e20 	sub.w	lr, r3, #32
 80235e2:	f10b 0602 	add.w	r6, fp, #2
 80235e6:	b2d2      	uxtb	r2, r2
 80235e8:	f002 010f 	and.w	r1, r2, #15
 80235ec:	1112      	asrs	r2, r2, #4
 80235ee:	3908      	subs	r1, #8
 80235f0:	3a08      	subs	r2, #8
 80235f2:	4471      	add	r1, lr
 80235f4:	4496      	add	lr, r2
 80235f6:	4421      	add	r1, r4
 80235f8:	b2c9      	uxtb	r1, r1
 80235fa:	f361 0407 	bfi	r4, r1, #0, #8
 80235fe:	f3c4 2907 	ubfx	r9, r4, #8, #8
 8023602:	f1a9 0920 	sub.w	r9, r9, #32
 8023606:	444b      	add	r3, r9
 8023608:	b2db      	uxtb	r3, r3
 802360a:	f363 240f 	bfi	r4, r3, #8, #8
 802360e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8023612:	eb0e 4e14 	add.w	lr, lr, r4, lsr #16
 8023616:	f00e 0eff 	and.w	lr, lr, #255	@ 0xff
 802361a:	fb10 330e 	smlabb	r3, r0, lr, r3
 802361e:	f36e 4417 	bfi	r4, lr, #16, #8
 8023622:	fb1c 3101 	smlabb	r1, ip, r1, r3
 8023626:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802362a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 802362e:	604c      	str	r4, [r1, #4]
 8023630:	e7a5      	b.n	802357e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18a>
 8023632:	3301      	adds	r3, #1
 8023634:	42ab      	cmp	r3, r5
 8023636:	dd1b      	ble.n	8023670 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x27c>
 8023638:	1b5d      	subs	r5, r3, r5
 802363a:	2d00      	cmp	r5, #0
 802363c:	dc1a      	bgt.n	8023674 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x280>
 802363e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8023642:	2200      	movs	r2, #0
 8023644:	f1b9 0f00 	cmp.w	r9, #0
 8023648:	f340 80e2 	ble.w	8023810 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x41c>
 802364c:	1c73      	adds	r3, r6, #1
 802364e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8023652:	9308      	str	r3, [sp, #32]
 8023654:	7833      	ldrb	r3, [r6, #0]
 8023656:	b2db      	uxtb	r3, r3
 8023658:	1198      	asrs	r0, r3, #6
 802365a:	d123      	bne.n	80236a4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b0>
 802365c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023660:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023664:	685c      	ldr	r4, [r3, #4]
 8023666:	2a3f      	cmp	r2, #63	@ 0x3f
 8023668:	dd4a      	ble.n	8023700 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x30c>
 802366a:	2001      	movs	r0, #1
 802366c:	4606      	mov	r6, r0
 802366e:	e0a2      	b.n	80237b6 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3c2>
 8023670:	1aed      	subs	r5, r5, r3
 8023672:	e785      	b.n	8023580 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8023674:	9b02      	ldr	r3, [sp, #8]
 8023676:	4638      	mov	r0, r7
 8023678:	4622      	mov	r2, r4
 802367a:	42ab      	cmp	r3, r5
 802367c:	bfa8      	it	ge
 802367e:	462b      	movge	r3, r5
 8023680:	469b      	mov	fp, r3
 8023682:	9b02      	ldr	r3, [sp, #8]
 8023684:	fa0f f18b 	sxth.w	r1, fp
 8023688:	eba3 090b 	sub.w	r9, r3, fp
 802368c:	9b05      	ldr	r3, [sp, #20]
 802368e:	eba5 050b 	sub.w	r5, r5, fp
 8023692:	f7ef fc91 	bl	8012fb8 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>
 8023696:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 802369a:	e7d2      	b.n	8023642 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x24e>
 802369c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80236a0:	465e      	mov	r6, fp
 80236a2:	e7ce      	b.n	8023642 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x24e>
 80236a4:	2801      	cmp	r0, #1
 80236a6:	d131      	bne.n	802370c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x318>
 80236a8:	f003 0103 	and.w	r1, r3, #3
 80236ac:	1ea6      	subs	r6, r4, #2
 80236ae:	f3c3 0c81 	ubfx	ip, r3, #2, #2
 80236b2:	2a3f      	cmp	r2, #63	@ 0x3f
 80236b4:	440e      	add	r6, r1
 80236b6:	f3c3 1101 	ubfx	r1, r3, #4, #2
 80236ba:	f1ac 0c02 	sub.w	ip, ip, #2
 80236be:	f04f 0303 	mov.w	r3, #3
 80236c2:	b2f6      	uxtb	r6, r6
 80236c4:	f1a1 0102 	sub.w	r1, r1, #2
 80236c8:	f366 0407 	bfi	r4, r6, #0, #8
 80236cc:	eb0c 2c14 	add.w	ip, ip, r4, lsr #8
 80236d0:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80236d4:	f36c 240f 	bfi	r4, ip, #8, #8
 80236d8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80236dc:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 80236e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80236e4:	f361 4417 	bfi	r4, r1, #16, #8
 80236e8:	fb13 c101 	smlabb	r1, r3, r1, ip
 80236ec:	f04f 0307 	mov.w	r3, #7
 80236f0:	fb13 1106 	smlabb	r1, r3, r6, r1
 80236f4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80236f8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80236fc:	604c      	str	r4, [r1, #4]
 80236fe:	dcb5      	bgt.n	802366c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x278>
 8023700:	3201      	adds	r2, #1
 8023702:	f848 400b 	str.w	r4, [r8, fp]
 8023706:	f109 39ff 	add.w	r9, r9, #4294967295
 802370a:	e077      	b.n	80237fc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>
 802370c:	2802      	cmp	r0, #2
 802370e:	d12d      	bne.n	802376c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x378>
 8023710:	1cb1      	adds	r1, r6, #2
 8023712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023716:	9108      	str	r1, [sp, #32]
 8023718:	f1a3 0c20 	sub.w	ip, r3, #32
 802371c:	7871      	ldrb	r1, [r6, #1]
 802371e:	b2c9      	uxtb	r1, r1
 8023720:	f001 000f 	and.w	r0, r1, #15
 8023724:	1109      	asrs	r1, r1, #4
 8023726:	3808      	subs	r0, #8
 8023728:	3908      	subs	r1, #8
 802372a:	4460      	add	r0, ip
 802372c:	4461      	add	r1, ip
 802372e:	4420      	add	r0, r4
 8023730:	b2c0      	uxtb	r0, r0
 8023732:	f360 0407 	bfi	r4, r0, #0, #8
 8023736:	f3c4 2607 	ubfx	r6, r4, #8, #8
 802373a:	3e20      	subs	r6, #32
 802373c:	4433      	add	r3, r6
 802373e:	2603      	movs	r6, #3
 8023740:	b2db      	uxtb	r3, r3
 8023742:	f363 240f 	bfi	r4, r3, #8, #8
 8023746:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802374a:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 802374e:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8023752:	f361 4417 	bfi	r4, r1, #16, #8
 8023756:	fb16 3101 	smlabb	r1, r6, r1, r3
 802375a:	2307      	movs	r3, #7
 802375c:	fb13 1100 	smlabb	r1, r3, r0, r1
 8023760:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8023764:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8023768:	604c      	str	r4, [r1, #4]
 802376a:	e77c      	b.n	8023666 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x272>
 802376c:	2bfe      	cmp	r3, #254	@ 0xfe
 802376e:	d11b      	bne.n	80237a8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b4>
 8023770:	7873      	ldrb	r3, [r6, #1]
 8023772:	78b1      	ldrb	r1, [r6, #2]
 8023774:	b2d8      	uxtb	r0, r3
 8023776:	1d33      	adds	r3, r6, #4
 8023778:	b2c9      	uxtb	r1, r1
 802377a:	f360 0407 	bfi	r4, r0, #0, #8
 802377e:	9308      	str	r3, [sp, #32]
 8023780:	78f3      	ldrb	r3, [r6, #3]
 8023782:	2603      	movs	r6, #3
 8023784:	f361 240f 	bfi	r4, r1, #8, #8
 8023788:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802378c:	b2db      	uxtb	r3, r3
 802378e:	fb16 1103 	smlabb	r1, r6, r3, r1
 8023792:	f363 4417 	bfi	r4, r3, #16, #8
 8023796:	2307      	movs	r3, #7
 8023798:	fb13 1300 	smlabb	r3, r3, r0, r1
 802379c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80237a0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80237a4:	605c      	str	r4, [r3, #4]
 80237a6:	e75e      	b.n	8023666 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x272>
 80237a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80237ac:	464e      	mov	r6, r9
 80237ae:	1c58      	adds	r0, r3, #1
 80237b0:	4581      	cmp	r9, r0
 80237b2:	bfa8      	it	ge
 80237b4:	4606      	movge	r6, r0
 80237b6:	1993      	adds	r3, r2, r6
 80237b8:	eba9 0906 	sub.w	r9, r9, r6
 80237bc:	1b85      	subs	r5, r0, r6
 80237be:	2b40      	cmp	r3, #64	@ 0x40
 80237c0:	dd14      	ble.n	80237ec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3f8>
 80237c2:	4640      	mov	r0, r8
 80237c4:	0091      	lsls	r1, r2, #2
 80237c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80237c8:	f7ef fbdc 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 80237cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80237ce:	4641      	mov	r1, r8
 80237d0:	9b05      	ldr	r3, [sp, #20]
 80237d2:	4638      	mov	r0, r7
 80237d4:	b212      	sxth	r2, r2
 80237d6:	445f      	add	r7, fp
 80237d8:	f7ef fc94 	bl	8013104 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 80237dc:	4b0a      	ldr	r3, [pc, #40]	@ (8023808 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>)
 80237de:	2200      	movs	r2, #0
 80237e0:	4598      	cmp	r8, r3
 80237e2:	bf0c      	ite	eq
 80237e4:	f8df 8024 	ldreq.w	r8, [pc, #36]	@ 802380c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x418>
 80237e8:	f8df 801c 	ldrne.w	r8, [pc, #28]	@ 8023808 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 80237ec:	eb08 0182 	add.w	r1, r8, r2, lsl #2
 80237f0:	4633      	mov	r3, r6
 80237f2:	3b01      	subs	r3, #1
 80237f4:	f841 4b04 	str.w	r4, [r1], #4
 80237f8:	d1fb      	bne.n	80237f2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3fe>
 80237fa:	4432      	add	r2, r6
 80237fc:	9e08      	ldr	r6, [sp, #32]
 80237fe:	e721      	b.n	8023644 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8023800:	200122c4 	.word	0x200122c4
 8023804:	200122be 	.word	0x200122be
 8023808:	20000100 	.word	0x20000100
 802380c:	20000200 	.word	0x20000200
 8023810:	b172      	cbz	r2, 8023830 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x43c>
 8023812:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8023816:	4640      	mov	r0, r8
 8023818:	9208      	str	r2, [sp, #32]
 802381a:	4649      	mov	r1, r9
 802381c:	f7ef fbb2 	bl	8012f84 <_ZN8touchgfx5paint9flushLineEPmi>
 8023820:	9a08      	ldr	r2, [sp, #32]
 8023822:	4638      	mov	r0, r7
 8023824:	444f      	add	r7, r9
 8023826:	9b05      	ldr	r3, [sp, #20]
 8023828:	b212      	sxth	r2, r2
 802382a:	4641      	mov	r1, r8
 802382c:	f7ef fc6a 	bl	8013104 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 8023830:	4b1f      	ldr	r3, [pc, #124]	@ (80238b0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>)
 8023832:	9a02      	ldr	r2, [sp, #8]
 8023834:	881b      	ldrh	r3, [r3, #0]
 8023836:	1a9b      	subs	r3, r3, r2
 8023838:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 802383c:	9b04      	ldr	r3, [sp, #16]
 802383e:	3301      	adds	r3, #1
 8023840:	9304      	str	r3, [sp, #16]
 8023842:	9a04      	ldr	r2, [sp, #16]
 8023844:	9b01      	ldr	r3, [sp, #4]
 8023846:	4293      	cmp	r3, r2
 8023848:	d122      	bne.n	8023890 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x49c>
 802384a:	9b03      	ldr	r3, [sp, #12]
 802384c:	2100      	movs	r1, #0
 802384e:	9a03      	ldr	r2, [sp, #12]
 8023850:	f04f 447f 	mov.w	r4, #4278190080	@ 0xff000000
 8023854:	f103 0901 	add.w	r9, r3, #1
 8023858:	9b06      	ldr	r3, [sp, #24]
 802385a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 802385e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023866:	9b07      	ldr	r3, [sp, #28]
 8023868:	ba36      	rev	r6, r6
 802386a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802386c:	441e      	add	r6, r3
 802386e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8023872:	1aed      	subs	r5, r5, r3
 8023874:	f00a fb64 	bl	802df40 <memset>
 8023878:	23ff      	movs	r3, #255	@ 0xff
 802387a:	f8cd 900c 	str.w	r9, [sp, #12]
 802387e:	b2ad      	uxth	r5, r5
 8023880:	f88a 3007 	strb.w	r3, [sl, #7]
 8023884:	2300      	movs	r3, #0
 8023886:	9304      	str	r3, [sp, #16]
 8023888:	f7ef fb64 	bl	8012f54 <_ZN8touchgfx5paint8tearDownEv>
 802388c:	46b3      	mov	fp, r6
 802388e:	e63b      	b.n	8023508 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x114>
 8023890:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023894:	9a02      	ldr	r2, [sp, #8]
 8023896:	1a9b      	subs	r3, r3, r2
 8023898:	1b5d      	subs	r5, r3, r5
 802389a:	b2ad      	uxth	r5, r5
 802389c:	e7f4      	b.n	8023888 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 802389e:	4b05      	ldr	r3, [pc, #20]	@ (80238b4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>)
 80238a0:	6818      	ldr	r0, [r3, #0]
 80238a2:	6803      	ldr	r3, [r0, #0]
 80238a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80238a6:	4798      	blx	r3
 80238a8:	b011      	add	sp, #68	@ 0x44
 80238aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238ae:	bf00      	nop
 80238b0:	200122be 	.word	0x200122be
 80238b4:	200122c4 	.word	0x200122c4

080238b8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80238b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238ba:	4606      	mov	r6, r0
 80238bc:	b087      	sub	sp, #28
 80238be:	4615      	mov	r5, r2
 80238c0:	461f      	mov	r7, r3
 80238c2:	b353      	cbz	r3, 802391a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80238c4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	dd26      	ble.n	802391a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80238cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	dd22      	ble.n	802391a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80238d4:	6808      	ldr	r0, [r1, #0]
 80238d6:	aa04      	add	r2, sp, #16
 80238d8:	6849      	ldr	r1, [r1, #4]
 80238da:	4c1b      	ldr	r4, [pc, #108]	@ (8023948 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80238dc:	c203      	stmia	r2!, {r0, r1}
 80238de:	a804      	add	r0, sp, #16
 80238e0:	f7f7 fa10 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80238e4:	6820      	ldr	r0, [r4, #0]
 80238e6:	6803      	ldr	r3, [r0, #0]
 80238e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80238ea:	4798      	blx	r3
 80238ec:	2fff      	cmp	r7, #255	@ 0xff
 80238ee:	d016      	beq.n	802391e <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80238f0:	f010 0f08 	tst.w	r0, #8
 80238f4:	6820      	ldr	r0, [r4, #0]
 80238f6:	d015      	beq.n	8023924 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80238f8:	2400      	movs	r4, #0
 80238fa:	6801      	ldr	r1, [r0, #0]
 80238fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023900:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023904:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8023908:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802390c:	9401      	str	r4, [sp, #4]
 802390e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8023912:	9400      	str	r4, [sp, #0]
 8023914:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8023916:	4629      	mov	r1, r5
 8023918:	47a0      	blx	r4
 802391a:	b007      	add	sp, #28
 802391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802391e:	f010 0f02 	tst.w	r0, #2
 8023922:	e7e7      	b.n	80238f4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8023924:	6803      	ldr	r3, [r0, #0]
 8023926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023928:	4798      	blx	r3
 802392a:	4b08      	ldr	r3, [pc, #32]	@ (802394c <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 802392c:	4601      	mov	r1, r0
 802392e:	4630      	mov	r0, r6
 8023930:	881a      	ldrh	r2, [r3, #0]
 8023932:	6833      	ldr	r3, [r6, #0]
 8023934:	e9cd 5700 	strd	r5, r7, [sp]
 8023938:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 802393a:	ab04      	add	r3, sp, #16
 802393c:	47a8      	blx	r5
 802393e:	6820      	ldr	r0, [r4, #0]
 8023940:	6803      	ldr	r3, [r0, #0]
 8023942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023944:	4798      	blx	r3
 8023946:	e7e8      	b.n	802391a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023948:	200122c4 	.word	0x200122c4
 802394c:	200122be 	.word	0x200122be

08023950 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8023950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023954:	b08d      	sub	sp, #52	@ 0x34
 8023956:	469b      	mov	fp, r3
 8023958:	4617      	mov	r7, r2
 802395a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802395e:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	@ 0x5c
 8023962:	4604      	mov	r4, r0
 8023964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023968:	a806      	add	r0, sp, #24
 802396a:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	@ 0x60
 802396e:	460d      	mov	r5, r1
 8023970:	4659      	mov	r1, fp
 8023972:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023976:	f8ad 301a 	strh.w	r3, [sp, #26]
 802397a:	f8ad a01c 	strh.w	sl, [sp, #28]
 802397e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8023982:	f7f1 f8c3 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 8023986:	4639      	mov	r1, r7
 8023988:	a806      	add	r0, sp, #24
 802398a:	f7f1 f8bf 	bl	8014b0c <_ZN8touchgfx4RectaNERKS0_>
 802398e:	4b6b      	ldr	r3, [pc, #428]	@ (8023b3c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ec>)
 8023990:	f8b3 9000 	ldrh.w	r9, [r3]
 8023994:	4b6a      	ldr	r3, [pc, #424]	@ (8023b40 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>)
 8023996:	fa0f f289 	sxth.w	r2, r9
 802399a:	8819      	ldrh	r1, [r3, #0]
 802399c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80239a0:	b208      	sxth	r0, r1
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	da07      	bge.n	80239b6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80239a6:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80239aa:	443b      	add	r3, r7
 80239ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80239b0:	2300      	movs	r3, #0
 80239b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80239b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80239ba:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 80239be:	1ad2      	subs	r2, r2, r3
 80239c0:	4297      	cmp	r7, r2
 80239c2:	bfc4      	itt	gt
 80239c4:	eba9 0203 	subgt.w	r2, r9, r3
 80239c8:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 80239cc:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80239d0:	2a00      	cmp	r2, #0
 80239d2:	da07      	bge.n	80239e4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 80239d4:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 80239d8:	443a      	add	r2, r7
 80239da:	f8ad 201e 	strh.w	r2, [sp, #30]
 80239de:	2200      	movs	r2, #0
 80239e0:	f8ad 201a 	strh.w	r2, [sp, #26]
 80239e4:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80239e8:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 80239ec:	1a80      	subs	r0, r0, r2
 80239ee:	4287      	cmp	r7, r0
 80239f0:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 80239f4:	bfc4      	itt	gt
 80239f6:	1a88      	subgt	r0, r1, r2
 80239f8:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 80239fc:	4851      	ldr	r0, [pc, #324]	@ (8023b44 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f4>)
 80239fe:	7800      	ldrb	r0, [r0, #0]
 8023a00:	2800      	cmp	r0, #0
 8023a02:	d178      	bne.n	8023af6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a6>
 8023a04:	454f      	cmp	r7, r9
 8023a06:	bf14      	ite	ne
 8023a08:	f04f 0900 	movne.w	r9, #0
 8023a0c:	f04f 0901 	moveq.w	r9, #1
 8023a10:	2f00      	cmp	r7, #0
 8023a12:	dd74      	ble.n	8023afe <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ae>
 8023a14:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 8023a18:	f1b8 0f00 	cmp.w	r8, #0
 8023a1c:	dd6f      	ble.n	8023afe <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ae>
 8023a1e:	f8bb 1000 	ldrh.w	r1, [fp]
 8023a22:	a808      	add	r0, sp, #32
 8023a24:	f8ad a02c 	strh.w	sl, [sp, #44]	@ 0x2c
 8023a28:	1a5b      	subs	r3, r3, r1
 8023a2a:	a90a      	add	r1, sp, #40	@ 0x28
 8023a2c:	f8ad 602e 	strh.w	r6, [sp, #46]	@ 0x2e
 8023a30:	b21b      	sxth	r3, r3
 8023a32:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8023a36:	f8ad 8026 	strh.w	r8, [sp, #38]	@ 0x26
 8023a3a:	9302      	str	r3, [sp, #8]
 8023a3c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023a40:	1ad2      	subs	r2, r2, r3
 8023a42:	b213      	sxth	r3, r2
 8023a44:	9303      	str	r3, [sp, #12]
 8023a46:	9b02      	ldr	r3, [sp, #8]
 8023a48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8023a4c:	9b03      	ldr	r3, [sp, #12]
 8023a4e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8023a52:	2300      	movs	r3, #0
 8023a54:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a56:	f7f7 f97d 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023a5a:	a806      	add	r0, sp, #24
 8023a5c:	f7f7 f952 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a60:	a80a      	add	r0, sp, #40	@ 0x28
 8023a62:	f7f7 f94f 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a66:	4b38      	ldr	r3, [pc, #224]	@ (8023b48 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f8>)
 8023a68:	4628      	mov	r0, r5
 8023a6a:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	@ 0x2c
 8023a6e:	881a      	ldrh	r2, [r3, #0]
 8023a70:	682b      	ldr	r3, [r5, #0]
 8023a72:	9205      	str	r2, [sp, #20]
 8023a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023a76:	4798      	blx	r3
 8023a78:	f8bd 6022 	ldrh.w	r6, [sp, #34]	@ 0x22
 8023a7c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8023a80:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 8023a84:	fb1a 3306 	smlabb	r3, sl, r6, r3
 8023a88:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8023a8a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8023a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8023b4c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fc>)
 8023a90:	6818      	ldr	r0, [r3, #0]
 8023a92:	9304      	str	r3, [sp, #16]
 8023a94:	6801      	ldr	r1, [r0, #0]
 8023a96:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8023a98:	4788      	blx	r1
 8023a9a:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8023a9e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8023aa2:	fb0b 1505 	mla	r5, fp, r5, r1
 8023aa6:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8023aaa:	9301      	str	r3, [sp, #4]
 8023aac:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8023ab0:	f1b9 0f00 	cmp.w	r9, #0
 8023ab4:	d12c      	bne.n	8023b10 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c0>
 8023ab6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023aba:	f04f 0900 	mov.w	r9, #0
 8023abe:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8023ac2:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8023b4c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fc>
 8023ac6:	9304      	str	r3, [sp, #16]
 8023ac8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8023acc:	454b      	cmp	r3, r9
 8023ace:	dd2d      	ble.n	8023b2c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1dc>
 8023ad0:	f8db 0000 	ldr.w	r0, [fp]
 8023ad4:	4631      	mov	r1, r6
 8023ad6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8023ada:	4456      	add	r6, sl
 8023adc:	6802      	ldr	r2, [r0, #0]
 8023ade:	f109 0901 	add.w	r9, r9, #1
 8023ae2:	009b      	lsls	r3, r3, #2
 8023ae4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8023ae6:	4615      	mov	r5, r2
 8023ae8:	9a01      	ldr	r2, [sp, #4]
 8023aea:	47a8      	blx	r5
 8023aec:	9a01      	ldr	r2, [sp, #4]
 8023aee:	9b04      	ldr	r3, [sp, #16]
 8023af0:	441a      	add	r2, r3
 8023af2:	9201      	str	r2, [sp, #4]
 8023af4:	e7e8      	b.n	8023ac8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8023af6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8023afa:	4589      	cmp	r9, r1
 8023afc:	e783      	b.n	8023a06 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8023afe:	2300      	movs	r3, #0
 8023b00:	8023      	strh	r3, [r4, #0]
 8023b02:	8063      	strh	r3, [r4, #2]
 8023b04:	80a3      	strh	r3, [r4, #4]
 8023b06:	80e3      	strh	r3, [r4, #6]
 8023b08:	4620      	mov	r0, r4
 8023b0a:	b00d      	add	sp, #52	@ 0x34
 8023b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b10:	4592      	cmp	sl, r2
 8023b12:	d1d0      	bne.n	8023ab6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x166>
 8023b14:	6818      	ldr	r0, [r3, #0]
 8023b16:	4631      	mov	r1, r6
 8023b18:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8023b1c:	6802      	ldr	r2, [r0, #0]
 8023b1e:	fb0b f303 	mul.w	r3, fp, r3
 8023b22:	f8d2 9034 	ldr.w	r9, [r2, #52]	@ 0x34
 8023b26:	009b      	lsls	r3, r3, #2
 8023b28:	9a01      	ldr	r2, [sp, #4]
 8023b2a:	47c8      	blx	r9
 8023b2c:	9b02      	ldr	r3, [sp, #8]
 8023b2e:	80a7      	strh	r7, [r4, #4]
 8023b30:	8023      	strh	r3, [r4, #0]
 8023b32:	9b03      	ldr	r3, [sp, #12]
 8023b34:	f8a4 8006 	strh.w	r8, [r4, #6]
 8023b38:	8063      	strh	r3, [r4, #2]
 8023b3a:	e7e5      	b.n	8023b08 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8023b3c:	200122b8 	.word	0x200122b8
 8023b40:	200122ba 	.word	0x200122ba
 8023b44:	200122bc 	.word	0x200122bc
 8023b48:	200122be 	.word	0x200122be
 8023b4c:	200122c4 	.word	0x200122c4

08023b50 <_ZN8touchgfx8LCD32bppC1Ev>:
 8023b50:	2200      	movs	r2, #0
 8023b52:	4912      	ldr	r1, [pc, #72]	@ (8023b9c <_ZN8touchgfx8LCD32bppC1Ev+0x4c>)
 8023b54:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8023b58:	6001      	str	r1, [r0, #0]
 8023b5a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8023b5e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8023b62:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8023b66:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8023b6a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8023b6e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8023b72:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8023b76:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8023b7a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8023b7e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8023b82:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8023b86:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8023b8a:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8023b8e:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8023b92:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8023b96:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8023b9a:	4770      	bx	lr
 8023b9c:	0803262c 	.word	0x0803262c

08023ba0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 8023ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ba4:	4604      	mov	r4, r0
 8023ba6:	b08f      	sub	sp, #60	@ 0x3c
 8023ba8:	460d      	mov	r5, r1
 8023baa:	461e      	mov	r6, r3
 8023bac:	2b00      	cmp	r3, #0
 8023bae:	d052      	beq.n	8023c56 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8023bb0:	6808      	ldr	r0, [r1, #0]
 8023bb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8023bb4:	6849      	ldr	r1, [r1, #4]
 8023bb6:	4f70      	ldr	r7, [pc, #448]	@ (8023d78 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8023bb8:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 8023d7c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8023bbc:	c303      	stmia	r3!, {r0, r1}
 8023bbe:	6810      	ldr	r0, [r2, #0]
 8023bc0:	ab0c      	add	r3, sp, #48	@ 0x30
 8023bc2:	6851      	ldr	r1, [r2, #4]
 8023bc4:	c303      	stmia	r3!, {r0, r1}
 8023bc6:	a80a      	add	r0, sp, #40	@ 0x28
 8023bc8:	f7f7 f89c 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023bcc:	4629      	mov	r1, r5
 8023bce:	a80c      	add	r0, sp, #48	@ 0x30
 8023bd0:	f7f7 f8c0 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023bd4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023bd8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8023bdc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023be0:	6838      	ldr	r0, [r7, #0]
 8023be2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023be6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8023bea:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8023bee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023bf2:	440c      	add	r4, r1
 8023bf4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8023bf8:	440a      	add	r2, r1
 8023bfa:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023bfe:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8023c02:	4413      	add	r3, r2
 8023c04:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023c08:	6803      	ldr	r3, [r0, #0]
 8023c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023c0c:	4798      	blx	r3
 8023c0e:	2eff      	cmp	r6, #255	@ 0xff
 8023c10:	d024      	beq.n	8023c5c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 8023c12:	f010 0f04 	tst.w	r0, #4
 8023c16:	6838      	ldr	r0, [r7, #0]
 8023c18:	d023      	beq.n	8023c62 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 8023c1a:	2100      	movs	r1, #0
 8023c1c:	f04f 0c02 	mov.w	ip, #2
 8023c20:	6807      	ldr	r7, [r0, #0]
 8023c22:	b2ad      	uxth	r5, r5
 8023c24:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8023c28:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8023c2c:	e9cd c107 	strd	ip, r1, [sp, #28]
 8023c30:	f04f 0c01 	mov.w	ip, #1
 8023c34:	f8cd c018 	str.w	ip, [sp, #24]
 8023c38:	f8b9 c000 	ldrh.w	ip, [r9]
 8023c3c:	9603      	str	r6, [sp, #12]
 8023c3e:	9501      	str	r5, [sp, #4]
 8023c40:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8023c44:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023c48:	9102      	str	r1, [sp, #8]
 8023c4a:	fa1f f188 	uxth.w	r1, r8
 8023c4e:	9100      	str	r1, [sp, #0]
 8023c50:	4621      	mov	r1, r4
 8023c52:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8023c54:	47a8      	blx	r5
 8023c56:	b00f      	add	sp, #60	@ 0x3c
 8023c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c5c:	f010 0f01 	tst.w	r0, #1
 8023c60:	e7d9      	b.n	8023c16 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 8023c62:	6803      	ldr	r3, [r0, #0]
 8023c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023c66:	4798      	blx	r3
 8023c68:	f8b9 3000 	ldrh.w	r3, [r9]
 8023c6c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8023c70:	2eff      	cmp	r6, #255	@ 0xff
 8023c72:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8023c76:	fb03 f505 	mul.w	r5, r3, r5
 8023c7a:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8023c7e:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8023c82:	fb03 1202 	mla	r2, r3, r2, r1
 8023c86:	eba3 0308 	sub.w	r3, r3, r8
 8023c8a:	eba7 0708 	sub.w	r7, r7, r8
 8023c8e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8023c92:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023c96:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8023c9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023c9e:	d04c      	beq.n	8023d3a <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 8023ca0:	42a8      	cmp	r0, r5
 8023ca2:	d263      	bcs.n	8023d6c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8023ca4:	eb00 0e0c 	add.w	lr, r0, ip
 8023ca8:	4621      	mov	r1, r4
 8023caa:	4570      	cmp	r0, lr
 8023cac:	460c      	mov	r4, r1
 8023cae:	f101 0103 	add.w	r1, r1, #3
 8023cb2:	d23d      	bcs.n	8023d30 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8023cb4:	6802      	ldr	r2, [r0, #0]
 8023cb6:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8023cba:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023cbe:	fb1b fb06 	smulbb	fp, fp, r6
 8023cc2:	fa5f fa82 	uxtb.w	sl, r2
 8023cc6:	fb06 f809 	mul.w	r8, r6, r9
 8023cca:	f108 0401 	add.w	r4, r8, #1
 8023cce:	eb04 2428 	add.w	r4, r4, r8, asr #8
 8023cd2:	eb06 0809 	add.w	r8, r6, r9
 8023cd6:	1224      	asrs	r4, r4, #8
 8023cd8:	eba9 0904 	sub.w	r9, r9, r4
 8023cdc:	eba8 0804 	sub.w	r8, r8, r4
 8023ce0:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8023ce4:	fb09 fa0a 	mul.w	sl, r9, sl
 8023ce8:	fa5f f888 	uxtb.w	r8, r8
 8023cec:	fb04 a406 	mla	r4, r4, r6, sl
 8023cf0:	fbb4 f4f8 	udiv	r4, r4, r8
 8023cf4:	b2e4      	uxtb	r4, r4
 8023cf6:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8023cfa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8023cfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023d02:	fb09 b404 	mla	r4, r9, r4, fp
 8023d06:	fbb4 f4f8 	udiv	r4, r4, r8
 8023d0a:	0424      	lsls	r4, r4, #16
 8023d0c:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8023d10:	ea4a 0404 	orr.w	r4, sl, r4
 8023d14:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 8023d18:	fb1a fa06 	smulbb	sl, sl, r6
 8023d1c:	fb09 a202 	mla	r2, r9, r2, sl
 8023d20:	fbb2 f2f8 	udiv	r2, r2, r8
 8023d24:	0212      	lsls	r2, r2, #8
 8023d26:	b292      	uxth	r2, r2
 8023d28:	4322      	orrs	r2, r4
 8023d2a:	f840 2b04 	str.w	r2, [r0], #4
 8023d2e:	e7bc      	b.n	8023caa <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 8023d30:	4418      	add	r0, r3
 8023d32:	443c      	add	r4, r7
 8023d34:	e7b4      	b.n	8023ca0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 8023d36:	4418      	add	r0, r3
 8023d38:	443c      	add	r4, r7
 8023d3a:	42a8      	cmp	r0, r5
 8023d3c:	d216      	bcs.n	8023d6c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8023d3e:	eb00 060c 	add.w	r6, r0, ip
 8023d42:	4621      	mov	r1, r4
 8023d44:	42b0      	cmp	r0, r6
 8023d46:	460c      	mov	r4, r1
 8023d48:	f101 0103 	add.w	r1, r1, #3
 8023d4c:	d2f3      	bcs.n	8023d36 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 8023d4e:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8023d52:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8023d56:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8023d5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8023d5e:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 8023d62:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8023d66:	f840 2b04 	str.w	r2, [r0], #4
 8023d6a:	e7eb      	b.n	8023d44 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8023d6c:	4b02      	ldr	r3, [pc, #8]	@ (8023d78 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8023d6e:	6818      	ldr	r0, [r3, #0]
 8023d70:	6803      	ldr	r3, [r0, #0]
 8023d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d74:	4798      	blx	r3
 8023d76:	e76e      	b.n	8023c56 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8023d78:	200122c4 	.word	0x200122c4
 8023d7c:	200122be 	.word	0x200122be

08023d80 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8023d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d84:	4607      	mov	r7, r0
 8023d86:	b091      	sub	sp, #68	@ 0x44
 8023d88:	460c      	mov	r4, r1
 8023d8a:	4698      	mov	r8, r3
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	d04f      	beq.n	8023e30 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 8023d90:	6808      	ldr	r0, [r1, #0]
 8023d92:	ab0c      	add	r3, sp, #48	@ 0x30
 8023d94:	6849      	ldr	r1, [r1, #4]
 8023d96:	4e7e      	ldr	r6, [pc, #504]	@ (8023f90 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8023d98:	f8df 91f8 	ldr.w	r9, [pc, #504]	@ 8023f94 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8023d9c:	c303      	stmia	r3!, {r0, r1}
 8023d9e:	6810      	ldr	r0, [r2, #0]
 8023da0:	ab0e      	add	r3, sp, #56	@ 0x38
 8023da2:	6851      	ldr	r1, [r2, #4]
 8023da4:	c303      	stmia	r3!, {r0, r1}
 8023da6:	a80c      	add	r0, sp, #48	@ 0x30
 8023da8:	f7f6 ffac 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023dac:	4621      	mov	r1, r4
 8023dae:	a80e      	add	r0, sp, #56	@ 0x38
 8023db0:	f7f6 ffd0 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023db4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8023db8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023dbc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8023dc0:	6830      	ldr	r0, [r6, #0]
 8023dc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023dc6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8023dca:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8023dce:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8023dd2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8023dd6:	440a      	add	r2, r1
 8023dd8:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8023ddc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8023de0:	4413      	add	r3, r2
 8023de2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8023de6:	6803      	ldr	r3, [r0, #0]
 8023de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023dea:	4798      	blx	r3
 8023dec:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8023df0:	d021      	beq.n	8023e36 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023df2:	f010 0f04 	tst.w	r0, #4
 8023df6:	6830      	ldr	r0, [r6, #0]
 8023df8:	d020      	beq.n	8023e3c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8023dfa:	2100      	movs	r1, #0
 8023dfc:	f04f 0c02 	mov.w	ip, #2
 8023e00:	6806      	ldr	r6, [r0, #0]
 8023e02:	b2a4      	uxth	r4, r4
 8023e04:	9106      	str	r1, [sp, #24]
 8023e06:	b2ad      	uxth	r5, r5
 8023e08:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8023e0c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8023e10:	e9cd c107 	strd	ip, r1, [sp, #28]
 8023e14:	f8b9 c000 	ldrh.w	ip, [r9]
 8023e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8023e1c:	9501      	str	r5, [sp, #4]
 8023e1e:	9400      	str	r4, [sp, #0]
 8023e20:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8023e24:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8023e28:	9102      	str	r1, [sp, #8]
 8023e2a:	4639      	mov	r1, r7
 8023e2c:	6c34      	ldr	r4, [r6, #64]	@ 0x40
 8023e2e:	47a0      	blx	r4
 8023e30:	b011      	add	sp, #68	@ 0x44
 8023e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e36:	f010 0f01 	tst.w	r0, #1
 8023e3a:	e7dc      	b.n	8023df6 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 8023e3c:	6803      	ldr	r3, [r0, #0]
 8023e3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023e44:	4798      	blx	r3
 8023e46:	f8b9 c000 	ldrh.w	ip, [r9]
 8023e4a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023e4e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8023e52:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8023e56:	f9bd a034 	ldrsh.w	sl, [sp, #52]	@ 0x34
 8023e5a:	fb0c 2303 	mla	r3, ip, r3, r2
 8023e5e:	ebaa 0a04 	sub.w	sl, sl, r4
 8023e62:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023e66:	fb0c f305 	mul.w	r3, ip, r5
 8023e6a:	ebac 0c04 	sub.w	ip, ip, r4
 8023e6e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8023e72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023e76:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023e7a:	d02d      	beq.n	8023ed8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8023e7c:	ea4f 6208 	mov.w	r2, r8, lsl #24
 8023e80:	920a      	str	r2, [sp, #40]	@ 0x28
 8023e82:	4298      	cmp	r0, r3
 8023e84:	d27d      	bcs.n	8023f82 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8023e86:	eb00 020b 	add.w	r2, r0, fp
 8023e8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023e8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023e8e:	4290      	cmp	r0, r2
 8023e90:	d274      	bcs.n	8023f7c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 8023e92:	f837 eb02 	ldrh.w	lr, [r7], #2
 8023e96:	f850 4b04 	ldr.w	r4, [r0], #4
 8023e9a:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 8023e9e:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8023ea2:	ea4f 262e 	mov.w	r6, lr, asr #8
 8023ea6:	b2ed      	uxtb	r5, r5
 8023ea8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023eac:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023eb0:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8023eb4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023eb8:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023ebc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023ec0:	d129      	bne.n	8023f16 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 8023ec2:	0212      	lsls	r2, r2, #8
 8023ec4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8023ec8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023eca:	4335      	orrs	r5, r6
 8023ecc:	4315      	orrs	r5, r2
 8023ece:	f840 5c04 	str.w	r5, [r0, #-4]
 8023ed2:	e7db      	b.n	8023e8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8023ed4:	4460      	add	r0, ip
 8023ed6:	4457      	add	r7, sl
 8023ed8:	4298      	cmp	r0, r3
 8023eda:	d252      	bcs.n	8023f82 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8023edc:	eb00 040b 	add.w	r4, r0, fp
 8023ee0:	42a0      	cmp	r0, r4
 8023ee2:	d2f7      	bcs.n	8023ed4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8023ee4:	f837 5b02 	ldrh.w	r5, [r7], #2
 8023ee8:	10e9      	asrs	r1, r5, #3
 8023eea:	122e      	asrs	r6, r5, #8
 8023eec:	f001 02fc 	and.w	r2, r1, #252	@ 0xfc
 8023ef0:	00ed      	lsls	r5, r5, #3
 8023ef2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023ef6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023efa:	b2ed      	uxtb	r5, r5
 8023efc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023f00:	0212      	lsls	r2, r2, #8
 8023f02:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023f06:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8023f0a:	432a      	orrs	r2, r5
 8023f0c:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8023f10:	f840 2b04 	str.w	r2, [r0], #4
 8023f14:	e7e4      	b.n	8023ee0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 8023f16:	fb18 f505 	smulbb	r5, r8, r5
 8023f1a:	fb08 fe09 	mul.w	lr, r8, r9
 8023f1e:	fb18 f606 	smulbb	r6, r8, r6
 8023f22:	fb18 f202 	smulbb	r2, r8, r2
 8023f26:	f10e 0101 	add.w	r1, lr, #1
 8023f2a:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8023f2e:	eb08 0e09 	add.w	lr, r8, r9
 8023f32:	1209      	asrs	r1, r1, #8
 8023f34:	eba9 0901 	sub.w	r9, r9, r1
 8023f38:	ebae 0e01 	sub.w	lr, lr, r1
 8023f3c:	b2e1      	uxtb	r1, r4
 8023f3e:	fa5f fe8e 	uxtb.w	lr, lr
 8023f42:	fb09 5101 	mla	r1, r9, r1, r5
 8023f46:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8023f4a:	fb09 6605 	mla	r6, r9, r5, r6
 8023f4e:	fbb1 f1fe 	udiv	r1, r1, lr
 8023f52:	fbb6 f6fe 	udiv	r6, r6, lr
 8023f56:	b2c9      	uxtb	r1, r1
 8023f58:	0436      	lsls	r6, r6, #16
 8023f5a:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 8023f5e:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 8023f62:	4331      	orrs	r1, r6
 8023f64:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8023f68:	fb09 2606 	mla	r6, r9, r6, r2
 8023f6c:	fbb6 f6fe 	udiv	r6, r6, lr
 8023f70:	0236      	lsls	r6, r6, #8
 8023f72:	b2b6      	uxth	r6, r6
 8023f74:	4331      	orrs	r1, r6
 8023f76:	f840 1c04 	str.w	r1, [r0, #-4]
 8023f7a:	e787      	b.n	8023e8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8023f7c:	4460      	add	r0, ip
 8023f7e:	4457      	add	r7, sl
 8023f80:	e77f      	b.n	8023e82 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 8023f82:	4b03      	ldr	r3, [pc, #12]	@ (8023f90 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8023f84:	6818      	ldr	r0, [r3, #0]
 8023f86:	6803      	ldr	r3, [r0, #0]
 8023f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023f8a:	4798      	blx	r3
 8023f8c:	e750      	b.n	8023e30 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 8023f8e:	bf00      	nop
 8023f90:	200122c4 	.word	0x200122c4
 8023f94:	200122be 	.word	0x200122be

08023f98 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8023f98:	b4f0      	push	{r4, r5, r6, r7}
 8023f9a:	4616      	mov	r6, r2
 8023f9c:	461c      	mov	r4, r3
 8023f9e:	460d      	mov	r5, r1
 8023fa0:	9a04      	ldr	r2, [sp, #16]
 8023fa2:	2e01      	cmp	r6, #1
 8023fa4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8023fa8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8023fac:	d012      	beq.n	8023fd4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8023fae:	d303      	bcc.n	8023fb8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8023fb0:	2e02      	cmp	r6, #2
 8023fb2:	d006      	beq.n	8023fc2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8023fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8023fb6:	4770      	bx	lr
 8023fb8:	4621      	mov	r1, r4
 8023fba:	4628      	mov	r0, r5
 8023fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8023fbe:	f7ff bedf 	b.w	8023d80 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023fc2:	6805      	ldr	r5, [r0, #0]
 8023fc4:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8023fc8:	68ed      	ldr	r5, [r5, #12]
 8023fca:	4613      	mov	r3, r2
 8023fcc:	4622      	mov	r2, r4
 8023fce:	46ac      	mov	ip, r5
 8023fd0:	bcf0      	pop	{r4, r5, r6, r7}
 8023fd2:	4760      	bx	ip
 8023fd4:	4621      	mov	r1, r4
 8023fd6:	4628      	mov	r0, r5
 8023fd8:	bcf0      	pop	{r4, r5, r6, r7}
 8023fda:	f7ff bde1 	b.w	8023ba0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

08023fe0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fe4:	b093      	sub	sp, #76	@ 0x4c
 8023fe6:	4681      	mov	r9, r0
 8023fe8:	460f      	mov	r7, r1
 8023fea:	6810      	ldr	r0, [r2, #0]
 8023fec:	6851      	ldr	r1, [r2, #4]
 8023fee:	ac0e      	add	r4, sp, #56	@ 0x38
 8023ff0:	4616      	mov	r6, r2
 8023ff2:	f89d 8070 	ldrb.w	r8, [sp, #112]	@ 0x70
 8023ff6:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 80241a4 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 8023ffa:	c403      	stmia	r4!, {r0, r1}
 8023ffc:	6818      	ldr	r0, [r3, #0]
 8023ffe:	ac10      	add	r4, sp, #64	@ 0x40
 8024000:	6859      	ldr	r1, [r3, #4]
 8024002:	c403      	stmia	r4!, {r0, r1}
 8024004:	a80e      	add	r0, sp, #56	@ 0x38
 8024006:	f7f6 fe7d 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802400a:	4631      	mov	r1, r6
 802400c:	a810      	add	r0, sp, #64	@ 0x40
 802400e:	4e64      	ldr	r6, [pc, #400]	@ (80241a0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024010:	f7f6 fea0 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024014:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8024018:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802401c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8024020:	6830      	ldr	r0, [r6, #0]
 8024022:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024026:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 802402a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802402e:	4489      	add	r9, r1
 8024030:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8024034:	440a      	add	r2, r1
 8024036:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802403a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802403e:	4413      	add	r3, r2
 8024040:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8024044:	6803      	ldr	r3, [r0, #0]
 8024046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024048:	4798      	blx	r3
 802404a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802404e:	6830      	ldr	r0, [r6, #0]
 8024050:	d01f      	beq.n	8024092 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8024052:	2102      	movs	r1, #2
 8024054:	2600      	movs	r6, #0
 8024056:	6802      	ldr	r2, [r0, #0]
 8024058:	b2a4      	uxth	r4, r4
 802405a:	b2ad      	uxth	r5, r5
 802405c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8024060:	e9cd 1608 	strd	r1, r6, [sp, #32]
 8024064:	210b      	movs	r1, #11
 8024066:	9107      	str	r1, [sp, #28]
 8024068:	f8ba 1000 	ldrh.w	r1, [sl]
 802406c:	9502      	str	r5, [sp, #8]
 802406e:	9106      	str	r1, [sp, #24]
 8024070:	2101      	movs	r1, #1
 8024072:	9401      	str	r4, [sp, #4]
 8024074:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8024078:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802407c:	9103      	str	r1, [sp, #12]
 802407e:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8024082:	9100      	str	r1, [sp, #0]
 8024084:	4649      	mov	r1, r9
 8024086:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8024088:	463a      	mov	r2, r7
 802408a:	47a0      	blx	r4
 802408c:	b013      	add	sp, #76	@ 0x4c
 802408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024092:	6803      	ldr	r3, [r0, #0]
 8024094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024096:	4798      	blx	r3
 8024098:	f8ba 3000 	ldrh.w	r3, [sl]
 802409c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80240a0:	f04f 0e04 	mov.w	lr, #4
 80240a4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80240a8:	435d      	muls	r5, r3
 80240aa:	fb03 1202 	mla	r2, r3, r2, r1
 80240ae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80240b2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80240b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80240b8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80240bc:	1b12      	subs	r2, r2, r4
 80240be:	920d      	str	r2, [sp, #52]	@ 0x34
 80240c0:	00a2      	lsls	r2, r4, #2
 80240c2:	1b1c      	subs	r4, r3, r4
 80240c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80240c6:	00a3      	lsls	r3, r4, #2
 80240c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80240ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240cc:	4298      	cmp	r0, r3
 80240ce:	d261      	bcs.n	8024194 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80240d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240d2:	eb00 0a03 	add.w	sl, r0, r3
 80240d6:	4550      	cmp	r0, sl
 80240d8:	d257      	bcs.n	802418a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80240da:	f819 2b01 	ldrb.w	r2, [r9], #1
 80240de:	fb1e e202 	smlabb	r2, lr, r2, lr
 80240e2:	eb07 0c02 	add.w	ip, r7, r2
 80240e6:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80240ea:	fb03 f308 	mul.w	r3, r3, r8
 80240ee:	1c5c      	adds	r4, r3, #1
 80240f0:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80240f4:	1224      	asrs	r4, r4, #8
 80240f6:	2cff      	cmp	r4, #255	@ 0xff
 80240f8:	d003      	beq.n	8024102 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 80240fa:	6803      	ldr	r3, [r0, #0]
 80240fc:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 8024100:	d10d      	bne.n	802411e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8024102:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024106:	f89c 1002 	ldrb.w	r1, [ip, #2]
 802410a:	021b      	lsls	r3, r3, #8
 802410c:	5cba      	ldrb	r2, [r7, r2]
 802410e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8024112:	4313      	orrs	r3, r2
 8024114:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 8024118:	6004      	str	r4, [r0, #0]
 802411a:	3004      	adds	r0, #4
 802411c:	e7db      	b.n	80240d6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 802411e:	b2e5      	uxtb	r5, r4
 8024120:	2c00      	cmp	r4, #0
 8024122:	d0fa      	beq.n	802411a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8024124:	fb05 f10b 	mul.w	r1, r5, fp
 8024128:	445d      	add	r5, fp
 802412a:	5cba      	ldrb	r2, [r7, r2]
 802412c:	1c4e      	adds	r6, r1, #1
 802412e:	eb06 2121 	add.w	r1, r6, r1, asr #8
 8024132:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8024136:	1209      	asrs	r1, r1, #8
 8024138:	1a6d      	subs	r5, r5, r1
 802413a:	ebab 0101 	sub.w	r1, fp, r1
 802413e:	f89c b002 	ldrb.w	fp, [ip, #2]
 8024142:	b2ed      	uxtb	r5, r5
 8024144:	fb04 fb0b 	mul.w	fp, r4, fp
 8024148:	fb01 b606 	mla	r6, r1, r6, fp
 802414c:	fa5f fb83 	uxtb.w	fp, r3
 8024150:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024154:	fb01 fb0b 	mul.w	fp, r1, fp
 8024158:	fb04 b202 	mla	r2, r4, r2, fp
 802415c:	fbb6 f6f5 	udiv	r6, r6, r5
 8024160:	fbb2 f2f5 	udiv	r2, r2, r5
 8024164:	0436      	lsls	r6, r6, #16
 8024166:	b2d2      	uxtb	r2, r2
 8024168:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 802416c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8024170:	4316      	orrs	r6, r2
 8024172:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024176:	4354      	muls	r4, r2
 8024178:	fb01 4203 	mla	r2, r1, r3, r4
 802417c:	fbb2 f2f5 	udiv	r2, r2, r5
 8024180:	0212      	lsls	r2, r2, #8
 8024182:	b292      	uxth	r2, r2
 8024184:	4316      	orrs	r6, r2
 8024186:	6006      	str	r6, [r0, #0]
 8024188:	e7c7      	b.n	802411a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 802418a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802418c:	4418      	add	r0, r3
 802418e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024190:	4499      	add	r9, r3
 8024192:	e79a      	b.n	80240ca <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8024194:	4b02      	ldr	r3, [pc, #8]	@ (80241a0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024196:	6818      	ldr	r0, [r3, #0]
 8024198:	6803      	ldr	r3, [r0, #0]
 802419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802419c:	4798      	blx	r3
 802419e:	e775      	b.n	802408c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80241a0:	200122c4 	.word	0x200122c4
 80241a4:	200122be 	.word	0x200122be

080241a8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80241a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ac:	b093      	sub	sp, #76	@ 0x4c
 80241ae:	4606      	mov	r6, r0
 80241b0:	4689      	mov	r9, r1
 80241b2:	6810      	ldr	r0, [r2, #0]
 80241b4:	6851      	ldr	r1, [r2, #4]
 80241b6:	ac0e      	add	r4, sp, #56	@ 0x38
 80241b8:	4615      	mov	r5, r2
 80241ba:	f89d 8070 	ldrb.w	r8, [sp, #112]	@ 0x70
 80241be:	f8df a1e4 	ldr.w	sl, [pc, #484]	@ 80243a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 80241c2:	c403      	stmia	r4!, {r0, r1}
 80241c4:	6818      	ldr	r0, [r3, #0]
 80241c6:	ac10      	add	r4, sp, #64	@ 0x40
 80241c8:	6859      	ldr	r1, [r3, #4]
 80241ca:	c403      	stmia	r4!, {r0, r1}
 80241cc:	a80e      	add	r0, sp, #56	@ 0x38
 80241ce:	f7f6 fd99 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80241d2:	4629      	mov	r1, r5
 80241d4:	a810      	add	r0, sp, #64	@ 0x40
 80241d6:	f7f6 fdbd 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80241da:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80241de:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80241e2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80241e6:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 80241ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 80241ee:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	@ 0x46
 80241f2:	1875      	adds	r5, r6, r1
 80241f4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 80241f8:	4e69      	ldr	r6, [pc, #420]	@ (80243a0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80241fa:	440a      	add	r2, r1
 80241fc:	6830      	ldr	r0, [r6, #0]
 80241fe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8024202:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8024206:	4413      	add	r3, r2
 8024208:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802420c:	6803      	ldr	r3, [r0, #0]
 802420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024210:	4798      	blx	r3
 8024212:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8024216:	d020      	beq.n	802425a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 8024218:	6830      	ldr	r0, [r6, #0]
 802421a:	2200      	movs	r2, #0
 802421c:	2602      	movs	r6, #2
 802421e:	b2a4      	uxth	r4, r4
 8024220:	6801      	ldr	r1, [r0, #0]
 8024222:	b2bf      	uxth	r7, r7
 8024224:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8024228:	e9cd 6208 	strd	r6, r2, [sp, #32]
 802422c:	260b      	movs	r6, #11
 802422e:	9607      	str	r6, [sp, #28]
 8024230:	f8ba 6000 	ldrh.w	r6, [sl]
 8024234:	f8cd 8010 	str.w	r8, [sp, #16]
 8024238:	9702      	str	r7, [sp, #8]
 802423a:	9401      	str	r4, [sp, #4]
 802423c:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8024240:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8024244:	9203      	str	r2, [sp, #12]
 8024246:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 802424a:	9200      	str	r2, [sp, #0]
 802424c:	464a      	mov	r2, r9
 802424e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8024250:	4629      	mov	r1, r5
 8024252:	47a0      	blx	r4
 8024254:	b013      	add	sp, #76	@ 0x4c
 8024256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802425a:	6830      	ldr	r0, [r6, #0]
 802425c:	f109 0904 	add.w	r9, r9, #4
 8024260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024264:	6803      	ldr	r3, [r0, #0]
 8024266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024268:	4798      	blx	r3
 802426a:	f8ba c000 	ldrh.w	ip, [sl]
 802426e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8024272:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024276:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802427a:	fb0c f707 	mul.w	r7, ip, r7
 802427e:	fb0c 2303 	mla	r3, ip, r3, r2
 8024282:	ebac 0c04 	sub.w	ip, ip, r4
 8024286:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802428a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802428e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8024292:	eba3 0304 	sub.w	r3, r3, r4
 8024296:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 802429a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802429c:	d025      	beq.n	80242ea <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 802429e:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80242a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80242a4:	42b8      	cmp	r0, r7
 80242a6:	d274      	bcs.n	8024392 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 80242a8:	eb00 030b 	add.w	r3, r0, fp
 80242ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80242ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242b0:	4298      	cmp	r0, r3
 80242b2:	d26a      	bcs.n	802438a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 80242b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80242b8:	f850 3b04 	ldr.w	r3, [r0], #4
 80242bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80242c0:	0e1c      	lsrs	r4, r3, #24
 80242c2:	eb09 0201 	add.w	r2, r9, r1
 80242c6:	f819 6001 	ldrb.w	r6, [r9, r1]
 80242ca:	f892 a002 	ldrb.w	sl, [r2, #2]
 80242ce:	7851      	ldrb	r1, [r2, #1]
 80242d0:	d124      	bne.n	802431c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 80242d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242d4:	431e      	orrs	r6, r3
 80242d6:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 80242da:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 80242de:	f840 1c04 	str.w	r1, [r0, #-4]
 80242e2:	e7e4      	b.n	80242ae <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80242e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80242e6:	4460      	add	r0, ip
 80242e8:	441d      	add	r5, r3
 80242ea:	42b8      	cmp	r0, r7
 80242ec:	d251      	bcs.n	8024392 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 80242ee:	eb00 010b 	add.w	r1, r0, fp
 80242f2:	4288      	cmp	r0, r1
 80242f4:	d2f6      	bcs.n	80242e4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 80242f6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80242fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80242fe:	f819 3002 	ldrb.w	r3, [r9, r2]
 8024302:	eb09 0402 	add.w	r4, r9, r2
 8024306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802430a:	78a6      	ldrb	r6, [r4, #2]
 802430c:	7862      	ldrb	r2, [r4, #1]
 802430e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8024312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024316:	f840 3b04 	str.w	r3, [r0], #4
 802431a:	e7ea      	b.n	80242f2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 802431c:	fb18 f606 	smulbb	r6, r8, r6
 8024320:	fb08 fe04 	mul.w	lr, r8, r4
 8024324:	fb18 fa0a 	smulbb	sl, r8, sl
 8024328:	fb18 f101 	smulbb	r1, r8, r1
 802432c:	f10e 0201 	add.w	r2, lr, #1
 8024330:	eb02 222e 	add.w	r2, r2, lr, asr #8
 8024334:	eb08 0e04 	add.w	lr, r8, r4
 8024338:	1212      	asrs	r2, r2, #8
 802433a:	ebae 0e02 	sub.w	lr, lr, r2
 802433e:	1aa2      	subs	r2, r4, r2
 8024340:	b2dc      	uxtb	r4, r3
 8024342:	fa5f fe8e 	uxtb.w	lr, lr
 8024346:	fb02 6604 	mla	r6, r2, r4, r6
 802434a:	f3c3 4407 	ubfx	r4, r3, #16, #8
 802434e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024352:	fb02 aa04 	mla	sl, r2, r4, sl
 8024356:	fb02 1303 	mla	r3, r2, r3, r1
 802435a:	fbb6 f6fe 	udiv	r6, r6, lr
 802435e:	fbba fafe 	udiv	sl, sl, lr
 8024362:	b2f6      	uxtb	r6, r6
 8024364:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8024368:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 802436c:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 8024370:	ea46 060a 	orr.w	r6, r6, sl
 8024374:	fbb3 fafe 	udiv	sl, r3, lr
 8024378:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 802437c:	fa1f fa8a 	uxth.w	sl, sl
 8024380:	ea46 060a 	orr.w	r6, r6, sl
 8024384:	f840 6c04 	str.w	r6, [r0, #-4]
 8024388:	e791      	b.n	80242ae <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 802438a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802438c:	4460      	add	r0, ip
 802438e:	441d      	add	r5, r3
 8024390:	e788      	b.n	80242a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 8024392:	4b03      	ldr	r3, [pc, #12]	@ (80243a0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8024394:	6818      	ldr	r0, [r3, #0]
 8024396:	6803      	ldr	r3, [r0, #0]
 8024398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802439a:	4798      	blx	r3
 802439c:	e75a      	b.n	8024254 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 802439e:	bf00      	nop
 80243a0:	200122c4 	.word	0x200122c4
 80243a4:	200122be 	.word	0x200122be

080243a8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80243a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243ac:	b089      	sub	sp, #36	@ 0x24
 80243ae:	4605      	mov	r5, r0
 80243b0:	4689      	mov	r9, r1
 80243b2:	6810      	ldr	r0, [r2, #0]
 80243b4:	6851      	ldr	r1, [r2, #4]
 80243b6:	ac04      	add	r4, sp, #16
 80243b8:	4616      	mov	r6, r2
 80243ba:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80243be:	f109 0904 	add.w	r9, r9, #4
 80243c2:	c403      	stmia	r4!, {r0, r1}
 80243c4:	6818      	ldr	r0, [r3, #0]
 80243c6:	ac06      	add	r4, sp, #24
 80243c8:	6859      	ldr	r1, [r3, #4]
 80243ca:	c403      	stmia	r4!, {r0, r1}
 80243cc:	a804      	add	r0, sp, #16
 80243ce:	f7f6 fc99 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80243d2:	4631      	mov	r1, r6
 80243d4:	a806      	add	r0, sp, #24
 80243d6:	f7f6 fcbd 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80243da:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80243de:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80243e2:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80243e6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80243ea:	fb16 2103 	smlabb	r1, r6, r3, r2
 80243ee:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 80243f2:	186e      	adds	r6, r5, r1
 80243f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80243f8:	440a      	add	r2, r1
 80243fa:	f8ad 2018 	strh.w	r2, [sp, #24]
 80243fe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8024402:	4413      	add	r3, r2
 8024404:	f8ad 301a 	strh.w	r3, [sp, #26]
 8024408:	4b57      	ldr	r3, [pc, #348]	@ (8024568 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 802440a:	6818      	ldr	r0, [r3, #0]
 802440c:	6803      	ldr	r3, [r0, #0]
 802440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024410:	4798      	blx	r3
 8024412:	4b56      	ldr	r3, [pc, #344]	@ (802456c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8024414:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8024418:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802441c:	f8b3 c000 	ldrh.w	ip, [r3]
 8024420:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8024424:	fb0a fa0c 	mul.w	sl, sl, ip
 8024428:	fb0c 2303 	mla	r3, ip, r3, r2
 802442c:	ebac 0c0b 	sub.w	ip, ip, fp
 8024430:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024434:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024438:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802443c:	eba3 030b 	sub.w	r3, r3, fp
 8024440:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8024444:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8024448:	9301      	str	r3, [sp, #4]
 802444a:	d02e      	beq.n	80244aa <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 802444c:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8024450:	9302      	str	r3, [sp, #8]
 8024452:	4550      	cmp	r0, sl
 8024454:	d27f      	bcs.n	8024556 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8024456:	eb00 030b 	add.w	r3, r0, fp
 802445a:	9303      	str	r3, [sp, #12]
 802445c:	9b03      	ldr	r3, [sp, #12]
 802445e:	4298      	cmp	r0, r3
 8024460:	d275      	bcs.n	802454e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 8024462:	f816 3b01 	ldrb.w	r3, [r6], #1
 8024466:	6802      	ldr	r2, [r0, #0]
 8024468:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 802446c:	0e17      	lsrs	r7, r2, #24
 802446e:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8024472:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8024476:	ea4f 2521 	mov.w	r5, r1, asr #8
 802447a:	b2e4      	uxtb	r4, r4
 802447c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024480:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024484:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024488:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802448c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8024490:	d12c      	bne.n	80244ec <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 8024492:	021b      	lsls	r3, r3, #8
 8024494:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8024498:	9b02      	ldr	r3, [sp, #8]
 802449a:	432c      	orrs	r4, r5
 802449c:	431c      	orrs	r4, r3
 802449e:	6004      	str	r4, [r0, #0]
 80244a0:	3004      	adds	r0, #4
 80244a2:	e7db      	b.n	802445c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 80244a4:	9b01      	ldr	r3, [sp, #4]
 80244a6:	4460      	add	r0, ip
 80244a8:	441e      	add	r6, r3
 80244aa:	4550      	cmp	r0, sl
 80244ac:	d253      	bcs.n	8024556 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 80244ae:	eb00 020b 	add.w	r2, r0, fp
 80244b2:	4290      	cmp	r0, r2
 80244b4:	d2f6      	bcs.n	80244a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 80244b6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80244ba:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 80244be:	10e9      	asrs	r1, r5, #3
 80244c0:	122c      	asrs	r4, r5, #8
 80244c2:	f001 03fc 	and.w	r3, r1, #252	@ 0xfc
 80244c6:	00e9      	lsls	r1, r5, #3
 80244c8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80244cc:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80244d0:	b2c9      	uxtb	r1, r1
 80244d2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80244d6:	021b      	lsls	r3, r3, #8
 80244d8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80244dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80244e0:	430b      	orrs	r3, r1
 80244e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80244e6:	f840 3b04 	str.w	r3, [r0], #4
 80244ea:	e7e2      	b.n	80244b2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 80244ec:	fb18 f404 	smulbb	r4, r8, r4
 80244f0:	fb08 fe07 	mul.w	lr, r8, r7
 80244f4:	fb18 f505 	smulbb	r5, r8, r5
 80244f8:	fb18 f303 	smulbb	r3, r8, r3
 80244fc:	f10e 0101 	add.w	r1, lr, #1
 8024500:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8024504:	eb08 0e07 	add.w	lr, r8, r7
 8024508:	1209      	asrs	r1, r1, #8
 802450a:	ebae 0e01 	sub.w	lr, lr, r1
 802450e:	1a79      	subs	r1, r7, r1
 8024510:	b2d7      	uxtb	r7, r2
 8024512:	fa5f fe8e 	uxtb.w	lr, lr
 8024516:	fb01 4707 	mla	r7, r1, r7, r4
 802451a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 802451e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024522:	fb01 5504 	mla	r5, r1, r4, r5
 8024526:	fb01 3202 	mla	r2, r1, r2, r3
 802452a:	fbb7 f7fe 	udiv	r7, r7, lr
 802452e:	fbb5 f5fe 	udiv	r5, r5, lr
 8024532:	b2ff      	uxtb	r7, r7
 8024534:	042d      	lsls	r5, r5, #16
 8024536:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 802453a:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 802453e:	432f      	orrs	r7, r5
 8024540:	fbb2 f5fe 	udiv	r5, r2, lr
 8024544:	022d      	lsls	r5, r5, #8
 8024546:	b2ad      	uxth	r5, r5
 8024548:	432f      	orrs	r7, r5
 802454a:	6007      	str	r7, [r0, #0]
 802454c:	e7a8      	b.n	80244a0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 802454e:	9b01      	ldr	r3, [sp, #4]
 8024550:	4460      	add	r0, ip
 8024552:	441e      	add	r6, r3
 8024554:	e77d      	b.n	8024452 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 8024556:	4b04      	ldr	r3, [pc, #16]	@ (8024568 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024558:	6818      	ldr	r0, [r3, #0]
 802455a:	6803      	ldr	r3, [r0, #0]
 802455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802455e:	4798      	blx	r3
 8024560:	b009      	add	sp, #36	@ 0x24
 8024562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024566:	bf00      	nop
 8024568:	200122c4 	.word	0x200122c4
 802456c:	200122be 	.word	0x200122be

08024570 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024570:	b4f0      	push	{r4, r5, r6, r7}
 8024572:	460c      	mov	r4, r1
 8024574:	4611      	mov	r1, r2
 8024576:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802457a:	461a      	mov	r2, r3
 802457c:	780f      	ldrb	r7, [r1, #0]
 802457e:	9b04      	ldr	r3, [sp, #16]
 8024580:	2f01      	cmp	r7, #1
 8024582:	784e      	ldrb	r6, [r1, #1]
 8024584:	d038      	beq.n	80245f8 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8024586:	d31f      	bcc.n	80245c8 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8024588:	2f02      	cmp	r7, #2
 802458a:	d14d      	bne.n	8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802458c:	2e03      	cmp	r6, #3
 802458e:	d84b      	bhi.n	8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8024590:	e8df f006 	tbb	[pc, r6]
 8024594:	17140702 	.word	0x17140702
 8024598:	9504      	str	r5, [sp, #16]
 802459a:	4620      	mov	r0, r4
 802459c:	bcf0      	pop	{r4, r5, r6, r7}
 802459e:	f7ff bf03 	b.w	80243a8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80245a2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80245a4:	2800      	cmp	r0, #0
 80245a6:	d03f      	beq.n	8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80245a8:	6806      	ldr	r6, [r0, #0]
 80245aa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80245ae:	68b5      	ldr	r5, [r6, #8]
 80245b0:	4613      	mov	r3, r2
 80245b2:	46ac      	mov	ip, r5
 80245b4:	460a      	mov	r2, r1
 80245b6:	4621      	mov	r1, r4
 80245b8:	bcf0      	pop	{r4, r5, r6, r7}
 80245ba:	4760      	bx	ip
 80245bc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80245c0:	e7f0      	b.n	80245a4 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80245c2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80245c6:	e7ed      	b.n	80245a4 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80245c8:	2e03      	cmp	r6, #3
 80245ca:	d82d      	bhi.n	8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80245cc:	e8df f006 	tbb	[pc, r6]
 80245d0:	110e0702 	.word	0x110e0702
 80245d4:	9504      	str	r5, [sp, #16]
 80245d6:	4620      	mov	r0, r4
 80245d8:	bcf0      	pop	{r4, r5, r6, r7}
 80245da:	f7ff bd01 	b.w	8023fe0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80245de:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80245e0:	b310      	cbz	r0, 8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80245e2:	6806      	ldr	r6, [r0, #0]
 80245e4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80245e8:	6935      	ldr	r5, [r6, #16]
 80245ea:	e7e1      	b.n	80245b0 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80245ec:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80245f0:	e7f6      	b.n	80245e0 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80245f2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80245f6:	e7f3      	b.n	80245e0 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80245f8:	2e03      	cmp	r6, #3
 80245fa:	d815      	bhi.n	8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80245fc:	e8df f006 	tbb	[pc, r6]
 8024600:	110e0702 	.word	0x110e0702
 8024604:	9504      	str	r5, [sp, #16]
 8024606:	4620      	mov	r0, r4
 8024608:	bcf0      	pop	{r4, r5, r6, r7}
 802460a:	f7ff bdcd 	b.w	80241a8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802460e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8024610:	b150      	cbz	r0, 8024628 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8024612:	6806      	ldr	r6, [r0, #0]
 8024614:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8024618:	68f5      	ldr	r5, [r6, #12]
 802461a:	e7c9      	b.n	80245b0 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802461c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8024620:	e7f6      	b.n	8024610 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8024622:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8024626:	e7f3      	b.n	8024610 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8024628:	bcf0      	pop	{r4, r5, r6, r7}
 802462a:	4770      	bx	lr

0802462c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802462c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024630:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8024634:	4607      	mov	r7, r0
 8024636:	460c      	mov	r4, r1
 8024638:	4692      	mov	sl, r2
 802463a:	4699      	mov	r9, r3
 802463c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802463e:	b1d5      	cbz	r5, 8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024640:	4608      	mov	r0, r1
 8024642:	f7f9 ff87 	bl	801e554 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024646:	4680      	mov	r8, r0
 8024648:	4620      	mov	r0, r4
 802464a:	f7f9 ffb7 	bl	801e5bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 802464e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8024652:	4620      	mov	r0, r4
 8024654:	f8ad a008 	strh.w	sl, [sp, #8]
 8024658:	f8ad 900a 	strh.w	r9, [sp, #10]
 802465c:	f8ad 800c 	strh.w	r8, [sp, #12]
 8024660:	f7fa f8ee 	bl	801e840 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024664:	b950      	cbnz	r0, 802467c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8024666:	4620      	mov	r0, r4
 8024668:	f7fa f866 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 802466c:	462b      	mov	r3, r5
 802466e:	4632      	mov	r2, r6
 8024670:	a902      	add	r1, sp, #8
 8024672:	f7ff fb85 	bl	8023d80 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024676:	b004      	add	sp, #16
 8024678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802467c:	2801      	cmp	r0, #1
 802467e:	d108      	bne.n	8024692 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8024680:	4620      	mov	r0, r4
 8024682:	f7fa f859 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024686:	462b      	mov	r3, r5
 8024688:	4632      	mov	r2, r6
 802468a:	a902      	add	r1, sp, #8
 802468c:	f7ff fa88 	bl	8023ba0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8024690:	e7f1      	b.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024692:	2802      	cmp	r0, #2
 8024694:	d111      	bne.n	80246ba <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8e>
 8024696:	683b      	ldr	r3, [r7, #0]
 8024698:	4620      	mov	r0, r4
 802469a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802469e:	f7fa f84b 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 80246a2:	4681      	mov	r9, r0
 80246a4:	4620      	mov	r0, r4
 80246a6:	f7fa f80f 	bl	801e6c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80246aa:	4633      	mov	r3, r6
 80246ac:	aa02      	add	r2, sp, #8
 80246ae:	4649      	mov	r1, r9
 80246b0:	e9cd 5000 	strd	r5, r0, [sp]
 80246b4:	4638      	mov	r0, r7
 80246b6:	47c0      	blx	r8
 80246b8:	e7dd      	b.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80246ba:	280b      	cmp	r0, #11
 80246bc:	d10f      	bne.n	80246de <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80246be:	4620      	mov	r0, r4
 80246c0:	f7fa f83a 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 80246c4:	4680      	mov	r8, r0
 80246c6:	4620      	mov	r0, r4
 80246c8:	f7fa f866 	bl	801e798 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80246cc:	ab02      	add	r3, sp, #8
 80246ce:	4602      	mov	r2, r0
 80246d0:	4641      	mov	r1, r8
 80246d2:	4638      	mov	r0, r7
 80246d4:	e9cd 6500 	strd	r6, r5, [sp]
 80246d8:	f7ff ff4a 	bl	8024570 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80246dc:	e7cb      	b.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80246de:	280e      	cmp	r0, #14
 80246e0:	d110      	bne.n	8024704 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xd8>
 80246e2:	f8d7 7088 	ldr.w	r7, [r7, #136]	@ 0x88
 80246e6:	2f00      	cmp	r7, #0
 80246e8:	d0c5      	beq.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80246ea:	683b      	ldr	r3, [r7, #0]
 80246ec:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80246f0:	4620      	mov	r0, r4
 80246f2:	f7fa f821 	bl	801e738 <_ZNK8touchgfx6Bitmap7getDataEv>
 80246f6:	9500      	str	r5, [sp, #0]
 80246f8:	4601      	mov	r1, r0
 80246fa:	4633      	mov	r3, r6
 80246fc:	aa02      	add	r2, sp, #8
 80246fe:	4638      	mov	r0, r7
 8024700:	47c0      	blx	r8
 8024702:	e7b8      	b.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024704:	280f      	cmp	r0, #15
 8024706:	d107      	bne.n	8024718 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xec>
 8024708:	f8d7 7088 	ldr.w	r7, [r7, #136]	@ 0x88
 802470c:	2f00      	cmp	r7, #0
 802470e:	d0b2      	beq.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024710:	683b      	ldr	r3, [r7, #0]
 8024712:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8024716:	e7eb      	b.n	80246f0 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8024718:	2810      	cmp	r0, #16
 802471a:	d1ac      	bne.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 802471c:	f8d7 7088 	ldr.w	r7, [r7, #136]	@ 0x88
 8024720:	2f00      	cmp	r7, #0
 8024722:	d0a8      	beq.n	8024676 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024724:	683b      	ldr	r3, [r7, #0]
 8024726:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802472a:	e7e1      	b.n	80246f0 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0802472c <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 802472c:	b160      	cbz	r0, 8024748 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 802472e:	2903      	cmp	r1, #3
 8024730:	d818      	bhi.n	8024764 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8024732:	e8df f001 	tbb	[pc, r1]
 8024736:	1902      	.short	0x1902
 8024738:	1b06      	.short	0x1b06
 802473a:	4b0e      	ldr	r3, [pc, #56]	@ (8024774 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 802473c:	8818      	ldrh	r0, [r3, #0]
 802473e:	4240      	negs	r0, r0
 8024740:	4770      	bx	lr
 8024742:	4b0c      	ldr	r3, [pc, #48]	@ (8024774 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024744:	8818      	ldrh	r0, [r3, #0]
 8024746:	4770      	bx	lr
 8024748:	2903      	cmp	r1, #3
 802474a:	d80b      	bhi.n	8024764 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 802474c:	a301      	add	r3, pc, #4	@ (adr r3, 8024754 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 802474e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024752:	bf00      	nop
 8024754:	08024769 	.word	0x08024769
 8024758:	08024743 	.word	0x08024743
 802475c:	0802476d 	.word	0x0802476d
 8024760:	0802473b 	.word	0x0802473b
 8024764:	2000      	movs	r0, #0
 8024766:	4770      	bx	lr
 8024768:	2001      	movs	r0, #1
 802476a:	4770      	bx	lr
 802476c:	f04f 30ff 	mov.w	r0, #4294967295
 8024770:	4770      	bx	lr
 8024772:	bf00      	nop
 8024774:	200122be 	.word	0x200122be

08024778 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8024778:	b160      	cbz	r0, 8024794 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 802477a:	2903      	cmp	r1, #3
 802477c:	d818      	bhi.n	80247b0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 802477e:	e8df f001 	tbb	[pc, r1]
 8024782:	0219      	.short	0x0219
 8024784:	051b      	.short	0x051b
 8024786:	4b0e      	ldr	r3, [pc, #56]	@ (80247c0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8024788:	8818      	ldrh	r0, [r3, #0]
 802478a:	4770      	bx	lr
 802478c:	4b0c      	ldr	r3, [pc, #48]	@ (80247c0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 802478e:	8818      	ldrh	r0, [r3, #0]
 8024790:	4240      	negs	r0, r0
 8024792:	4770      	bx	lr
 8024794:	2903      	cmp	r1, #3
 8024796:	d80b      	bhi.n	80247b0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8024798:	a301      	add	r3, pc, #4	@ (adr r3, 80247a0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 802479a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802479e:	bf00      	nop
 80247a0:	08024787 	.word	0x08024787
 80247a4:	080247b9 	.word	0x080247b9
 80247a8:	0802478d 	.word	0x0802478d
 80247ac:	080247b5 	.word	0x080247b5
 80247b0:	2000      	movs	r0, #0
 80247b2:	4770      	bx	lr
 80247b4:	2001      	movs	r0, #1
 80247b6:	4770      	bx	lr
 80247b8:	f04f 30ff 	mov.w	r0, #4294967295
 80247bc:	4770      	bx	lr
 80247be:	bf00      	nop
 80247c0:	200122be 	.word	0x200122be

080247c4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80247c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247c8:	b099      	sub	sp, #100	@ 0x64
 80247ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80247cc:	a914      	add	r1, sp, #80	@ 0x50
 80247ce:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	@ 0x88
 80247d2:	f8bd 7090 	ldrh.w	r7, [sp, #144]	@ 0x90
 80247d6:	f8bd 4094 	ldrh.w	r4, [sp, #148]	@ 0x94
 80247da:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80247de:	f89d 90b4 	ldrb.w	r9, [sp, #180]	@ 0xb4
 80247e2:	e881 000c 	stmia.w	r1, {r2, r3}
 80247e6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80247ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80247ec:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80247f0:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80247f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80247f6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80247fa:	798d      	ldrb	r5, [r1, #6]
 80247fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80247fe:	7b4b      	ldrb	r3, [r1, #13]
 8024800:	0158      	lsls	r0, r3, #5
 8024802:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8024806:	4328      	orrs	r0, r5
 8024808:	9009      	str	r0, [sp, #36]	@ 0x24
 802480a:	f000 815d 	beq.w	8024ac8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802480e:	011b      	lsls	r3, r3, #4
 8024810:	79c8      	ldrb	r0, [r1, #7]
 8024812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024816:	4303      	orrs	r3, r0
 8024818:	930d      	str	r3, [sp, #52]	@ 0x34
 802481a:	f000 8155 	beq.w	8024ac8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802481e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8024822:	b29b      	uxth	r3, r3
 8024824:	2f00      	cmp	r7, #0
 8024826:	f000 80f5 	beq.w	8024a14 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 802482a:	1aff      	subs	r7, r7, r3
 802482c:	b2bf      	uxth	r7, r7
 802482e:	043b      	lsls	r3, r7, #16
 8024830:	d502      	bpl.n	8024838 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024832:	1bf6      	subs	r6, r6, r7
 8024834:	2700      	movs	r7, #0
 8024836:	b236      	sxth	r6, r6
 8024838:	f9b2 1000 	ldrsh.w	r1, [r2]
 802483c:	a814      	add	r0, sp, #80	@ 0x50
 802483e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8024842:	428e      	cmp	r6, r1
 8024844:	b28b      	uxth	r3, r1
 8024846:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 802484a:	bfbf      	itttt	lt
 802484c:	18ff      	addlt	r7, r7, r3
 802484e:	1bbe      	sublt	r6, r7, r6
 8024850:	b2b7      	uxthlt	r7, r6
 8024852:	460e      	movlt	r6, r1
 8024854:	8891      	ldrh	r1, [r2, #4]
 8024856:	440b      	add	r3, r1
 8024858:	4631      	mov	r1, r6
 802485a:	b21b      	sxth	r3, r3
 802485c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802485e:	88d3      	ldrh	r3, [r2, #6]
 8024860:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024862:	449a      	add	sl, r3
 8024864:	fa0f f38a 	sxth.w	r3, sl
 8024868:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 802486c:	930e      	str	r3, [sp, #56]	@ 0x38
 802486e:	4bb2      	ldr	r3, [pc, #712]	@ (8024b38 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8024870:	f893 b000 	ldrb.w	fp, [r3]
 8024874:	f10b 3cff 	add.w	ip, fp, #4294967295
 8024878:	f1dc 0300 	rsbs	r3, ip, #0
 802487c:	eb43 030c 	adc.w	r3, r3, ip
 8024880:	930c      	str	r3, [sp, #48]	@ 0x30
 8024882:	464b      	mov	r3, r9
 8024884:	f7f6 f8b3 	bl	801a9ee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024888:	4631      	mov	r1, r6
 802488a:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 802488e:	464b      	mov	r3, r9
 8024890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024892:	a814      	add	r0, sp, #80	@ 0x50
 8024894:	f7f6 f8c8 	bl	801aa28 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024898:	a918      	add	r1, sp, #96	@ 0x60
 802489a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802489e:	a817      	add	r0, sp, #92	@ 0x5c
 80248a0:	f7f6 f9ee 	bl	801ac80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80248a4:	f1b9 0f00 	cmp.w	r9, #0
 80248a8:	f040 80b7 	bne.w	8024a1a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x256>
 80248ac:	f1bb 0f01 	cmp.w	fp, #1
 80248b0:	f040 80bb 	bne.w	8024a2a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80248b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248b6:	b153      	cbz	r3, 80248ce <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80248b8:	2508      	movs	r5, #8
 80248ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80248bc:	fb95 f3f8 	sdiv	r3, r5, r8
 80248c0:	1e5d      	subs	r5, r3, #1
 80248c2:	4415      	add	r5, r2
 80248c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80248c8:	fb15 f503 	smulbb	r5, r5, r3
 80248cc:	b2ad      	uxth	r5, r5
 80248ce:	b907      	cbnz	r7, 80248d2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80248d0:	b16c      	cbz	r4, 80248ee <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80248d2:	fb04 7305 	mla	r3, r4, r5, r7
 80248d6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80248d8:	ebaa 0a04 	sub.w	sl, sl, r4
 80248dc:	fb08 f303 	mul.w	r3, r8, r3
 80248e0:	fa1f fa8a 	uxth.w	sl, sl
 80248e4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80248e8:	f003 0407 	and.w	r4, r3, #7
 80248ec:	9228      	str	r2, [sp, #160]	@ 0xa0
 80248ee:	4649      	mov	r1, r9
 80248f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80248f2:	f7ff ff1b 	bl	802472c <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 80248f6:	4683      	mov	fp, r0
 80248f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80248fa:	f7ff ff3d 	bl	8024778 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 80248fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024900:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024902:	4681      	mov	r9, r0
 8024904:	1a9b      	subs	r3, r3, r2
 8024906:	459a      	cmp	sl, r3
 8024908:	bfa8      	it	ge
 802490a:	469a      	movge	sl, r3
 802490c:	f1ba 0f00 	cmp.w	sl, #0
 8024910:	f340 80da 	ble.w	8024ac8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024914:	1bf6      	subs	r6, r6, r7
 8024916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024918:	1b9e      	subs	r6, r3, r6
 802491a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802491c:	429e      	cmp	r6, r3
 802491e:	bfd4      	ite	le
 8024920:	ebc7 0706 	rsble	r7, r7, r6
 8024924:	ebc7 0703 	rsbgt	r7, r7, r3
 8024928:	2f00      	cmp	r7, #0
 802492a:	f340 80cd 	ble.w	8024ac8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802492e:	1bed      	subs	r5, r5, r7
 8024930:	fb08 f305 	mul.w	r3, r8, r5
 8024934:	930d      	str	r3, [sp, #52]	@ 0x34
 8024936:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024938:	0c1d      	lsrs	r5, r3, #16
 802493a:	0a1e      	lsrs	r6, r3, #8
 802493c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8024940:	930e      	str	r3, [sp, #56]	@ 0x38
 8024942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024944:	2b00      	cmp	r3, #0
 8024946:	f040 80c4 	bne.w	8024ad2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 802494a:	4b7c      	ldr	r3, [pc, #496]	@ (8024b3c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 802494c:	6818      	ldr	r0, [r3, #0]
 802494e:	6803      	ldr	r3, [r0, #0]
 8024950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024952:	4798      	blx	r3
 8024954:	2301      	movs	r3, #1
 8024956:	4a7a      	ldr	r2, [pc, #488]	@ (8024b40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8024958:	fa03 f308 	lsl.w	r3, r3, r8
 802495c:	8811      	ldrh	r1, [r2, #0]
 802495e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8024962:	3b01      	subs	r3, #1
 8024964:	b2db      	uxtb	r3, r3
 8024966:	930c      	str	r3, [sp, #48]	@ 0x30
 8024968:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 802496c:	fb01 2303 	mla	r3, r1, r3, r2
 8024970:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024972:	22ff      	movs	r2, #255	@ 0xff
 8024974:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024978:	fb92 f2f1 	sdiv	r2, r2, r1
 802497c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802497e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024980:	4351      	muls	r1, r2
 8024982:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8024986:	fb07 9b1b 	mls	fp, r7, fp, r9
 802498a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802498c:	fb02 f907 	mul.w	r9, r2, r7
 8024990:	920a      	str	r2, [sp, #40]	@ 0x28
 8024992:	eb09 028b 	add.w	r2, r9, fp, lsl #2
 8024996:	781b      	ldrb	r3, [r3, #0]
 8024998:	9110      	str	r1, [sp, #64]	@ 0x40
 802499a:	920f      	str	r2, [sp, #60]	@ 0x3c
 802499c:	b2f2      	uxtb	r2, r6
 802499e:	4123      	asrs	r3, r4
 80249a0:	9211      	str	r2, [sp, #68]	@ 0x44
 80249a2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80249a4:	b2db      	uxtb	r3, r3
 80249a6:	b2d2      	uxtb	r2, r2
 80249a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80249aa:	b2ea      	uxtb	r2, r5
 80249ac:	9213      	str	r2, [sp, #76]	@ 0x4c
 80249ae:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80249b2:	f0c0 80d9 	bcc.w	8024b68 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80249b6:	46b9      	mov	r9, r7
 80249b8:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 80249bc:	f119 39ff 	adds.w	r9, r9, #4294967295
 80249c0:	f0c0 80c0 	bcc.w	8024b44 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80249c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80249c6:	401a      	ands	r2, r3
 80249c8:	d013      	beq.n	80249f2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 80249ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80249cc:	fb12 f201 	smulbb	r2, r2, r1
 80249d0:	b292      	uxth	r2, r2
 80249d2:	1c51      	adds	r1, r2, #1
 80249d4:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80249d8:	1209      	asrs	r1, r1, #8
 80249da:	b2ce      	uxtb	r6, r1
 80249dc:	2eff      	cmp	r6, #255	@ 0xff
 80249de:	d003      	beq.n	80249e8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x224>
 80249e0:	f8dc 5000 	ldr.w	r5, [ip]
 80249e4:	0e2a      	lsrs	r2, r5, #24
 80249e6:	d176      	bne.n	8024ad6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x312>
 80249e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80249ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80249ee:	f8cc 1000 	str.w	r1, [ip]
 80249f2:	4444      	add	r4, r8
 80249f4:	b2a4      	uxth	r4, r4
 80249f6:	2c07      	cmp	r4, #7
 80249f8:	bf89      	itett	hi
 80249fa:	9a28      	ldrhi	r2, [sp, #160]	@ 0xa0
 80249fc:	fa43 f308 	asrls.w	r3, r3, r8
 8024a00:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8024a02:	2400      	movhi	r4, #0
 8024a04:	bf89      	itett	hi
 8024a06:	3201      	addhi	r2, #1
 8024a08:	b2db      	uxtbls	r3, r3
 8024a0a:	785b      	ldrbhi	r3, [r3, #1]
 8024a0c:	9228      	strhi	r2, [sp, #160]	@ 0xa0
 8024a0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a10:	4494      	add	ip, r2
 8024a12:	e7d3      	b.n	80249bc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8024a14:	441e      	add	r6, r3
 8024a16:	b236      	sxth	r6, r6
 8024a18:	e70e      	b.n	8024838 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024a1a:	f1b9 0f01 	cmp.w	r9, #1
 8024a1e:	f47f af49 	bne.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024a22:	f1bb 0f01 	cmp.w	fp, #1
 8024a26:	f47f af45 	bne.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024a2a:	f8df b110 	ldr.w	fp, [pc, #272]	@ 8024b3c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8024a2e:	f8db 0000 	ldr.w	r0, [fp]
 8024a32:	6803      	ldr	r3, [r0, #0]
 8024a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024a36:	4798      	blx	r3
 8024a38:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8024a3c:	465a      	mov	r2, fp
 8024a3e:	d006      	beq.n	8024a4e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8024a40:	f1b8 0f04 	cmp.w	r8, #4
 8024a44:	d143      	bne.n	8024ace <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8024a46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024a48:	3300      	adds	r3, #0
 8024a4a:	bf18      	it	ne
 8024a4c:	2301      	movne	r3, #1
 8024a4e:	0580      	lsls	r0, r0, #22
 8024a50:	f140 8093 	bpl.w	8024b7a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8024a54:	f1b8 0f08 	cmp.w	r8, #8
 8024a58:	f040 808f 	bne.w	8024b7a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	bf0c      	ite	eq
 8024a60:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8024a64:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8024a68:	2f00      	cmp	r7, #0
 8024a6a:	f47f af23 	bne.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024a6e:	2c00      	cmp	r4, #0
 8024a70:	f47f af20 	bne.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a76:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024a78:	18f3      	adds	r3, r6, r3
 8024a7a:	4283      	cmp	r3, r0
 8024a7c:	f73f af1a 	bgt.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024a80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024a84:	4403      	add	r3, r0
 8024a86:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024a88:	4283      	cmp	r3, r0
 8024a8a:	f73f af13 	bgt.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024a8e:	f1b8 0f08 	cmp.w	r8, #8
 8024a92:	6810      	ldr	r0, [r2, #0]
 8024a94:	f04f 0600 	mov.w	r6, #0
 8024a98:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8024a9c:	bf18      	it	ne
 8024a9e:	3501      	addne	r5, #1
 8024aa0:	6804      	ldr	r4, [r0, #0]
 8024aa2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8024aa6:	bf18      	it	ne
 8024aa8:	f025 0501 	bicne.w	r5, r5, #1
 8024aac:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8024ab0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024ab2:	bf18      	it	ne
 8024ab4:	b2ad      	uxthne	r5, r5
 8024ab6:	9104      	str	r1, [sp, #16]
 8024ab8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024aba:	e9cd 5a00 	strd	r5, sl, [sp]
 8024abe:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8024ac2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024ac4:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8024ac6:	47a0      	blx	r4
 8024ac8:	b019      	add	sp, #100	@ 0x64
 8024aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ace:	2300      	movs	r3, #0
 8024ad0:	e7bd      	b.n	8024a4e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8024ad2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024ad4:	e73e      	b.n	8024954 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x190>
 8024ad6:	2e00      	cmp	r6, #0
 8024ad8:	d08b      	beq.n	80249f2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 8024ada:	fb06 f102 	mul.w	r1, r6, r2
 8024ade:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024ae0:	f101 0e01 	add.w	lr, r1, #1
 8024ae4:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8024ae8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024aec:	eba2 0b0e 	sub.w	fp, r2, lr
 8024af0:	4432      	add	r2, r6
 8024af2:	eba2 020e 	sub.w	r2, r2, lr
 8024af6:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8024afa:	b2d1      	uxtb	r1, r2
 8024afc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024afe:	4372      	muls	r2, r6
 8024b00:	fb0b 2e0e 	mla	lr, fp, lr, r2
 8024b04:	b2ea      	uxtb	r2, r5
 8024b06:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8024b0a:	fb0b f202 	mul.w	r2, fp, r2
 8024b0e:	fb06 2200 	mla	r2, r6, r0, r2
 8024b12:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024b14:	fb92 f2f1 	sdiv	r2, r2, r1
 8024b18:	4346      	muls	r6, r0
 8024b1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8024b1e:	fb9e fef1 	sdiv	lr, lr, r1
 8024b22:	fb0b 6505 	mla	r5, fp, r5, r6
 8024b26:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8024b2a:	fb95 f5f1 	sdiv	r5, r5, r1
 8024b2e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8024b32:	f8cc 5000 	str.w	r5, [ip]
 8024b36:	e75c      	b.n	80249f2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 8024b38:	200122bc 	.word	0x200122bc
 8024b3c:	200122c4 	.word	0x200122c4
 8024b40:	200122be 	.word	0x200122be
 8024b44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024b46:	b152      	cbz	r2, 8024b5e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8024b48:	4414      	add	r4, r2
 8024b4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b4c:	b2a4      	uxth	r4, r4
 8024b4e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8024b52:	f004 0407 	and.w	r4, r4, #7
 8024b56:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024b58:	781b      	ldrb	r3, [r3, #0]
 8024b5a:	4123      	asrs	r3, r4
 8024b5c:	b2db      	uxtb	r3, r3
 8024b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024b60:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024b62:	4411      	add	r1, r2
 8024b64:	9109      	str	r1, [sp, #36]	@ 0x24
 8024b66:	e722      	b.n	80249ae <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8024b68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	d1ac      	bne.n	8024ac8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024b6e:	4b06      	ldr	r3, [pc, #24]	@ (8024b88 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 8024b70:	6818      	ldr	r0, [r3, #0]
 8024b72:	6803      	ldr	r3, [r0, #0]
 8024b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024b76:	4798      	blx	r3
 8024b78:	e7a6      	b.n	8024ac8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	f43f ae9a 	beq.w	80248b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024b84:	e770      	b.n	8024a68 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8024b86:	bf00      	nop
 8024b88:	200122c4 	.word	0x200122c4

08024b8c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024b8c:	b538      	push	{r3, r4, r5, lr}
 8024b8e:	4c15      	ldr	r4, [pc, #84]	@ (8024be4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024b90:	4605      	mov	r5, r0
 8024b92:	7823      	ldrb	r3, [r4, #0]
 8024b94:	f3bf 8f5b 	dmb	ish
 8024b98:	07da      	lsls	r2, r3, #31
 8024b9a:	d40b      	bmi.n	8024bb4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024b9c:	4620      	mov	r0, r4
 8024b9e:	f008 f964 	bl	802ce6a <__cxa_guard_acquire>
 8024ba2:	b138      	cbz	r0, 8024bb4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024ba4:	4620      	mov	r0, r4
 8024ba6:	f008 f96c 	bl	802ce82 <__cxa_guard_release>
 8024baa:	4a0f      	ldr	r2, [pc, #60]	@ (8024be8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024bac:	490f      	ldr	r1, [pc, #60]	@ (8024bec <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8024bae:	4810      	ldr	r0, [pc, #64]	@ (8024bf0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024bb0:	f008 f954 	bl	802ce5c <__aeabi_atexit>
 8024bb4:	4c0f      	ldr	r4, [pc, #60]	@ (8024bf4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8024bb6:	7823      	ldrb	r3, [r4, #0]
 8024bb8:	f3bf 8f5b 	dmb	ish
 8024bbc:	07db      	lsls	r3, r3, #31
 8024bbe:	d40b      	bmi.n	8024bd8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024bc0:	4620      	mov	r0, r4
 8024bc2:	f008 f952 	bl	802ce6a <__cxa_guard_acquire>
 8024bc6:	b138      	cbz	r0, 8024bd8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024bc8:	4620      	mov	r0, r4
 8024bca:	f008 f95a 	bl	802ce82 <__cxa_guard_release>
 8024bce:	4a06      	ldr	r2, [pc, #24]	@ (8024be8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024bd0:	4909      	ldr	r1, [pc, #36]	@ (8024bf8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024bd2:	480a      	ldr	r0, [pc, #40]	@ (8024bfc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024bd4:	f008 f942 	bl	802ce5c <__aeabi_atexit>
 8024bd8:	4b05      	ldr	r3, [pc, #20]	@ (8024bf0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024bda:	616b      	str	r3, [r5, #20]
 8024bdc:	4b07      	ldr	r3, [pc, #28]	@ (8024bfc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024bde:	61ab      	str	r3, [r5, #24]
 8024be0:	bd38      	pop	{r3, r4, r5, pc}
 8024be2:	bf00      	nop
 8024be4:	200123ac 	.word	0x200123ac
 8024be8:	20000000 	.word	0x20000000
 8024bec:	0802100b 	.word	0x0802100b
 8024bf0:	20000068 	.word	0x20000068
 8024bf4:	200123b0 	.word	0x200123b0
 8024bf8:	08021009 	.word	0x08021009
 8024bfc:	2000006c 	.word	0x2000006c

08024c00 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024c00:	b538      	push	{r3, r4, r5, lr}
 8024c02:	4c15      	ldr	r4, [pc, #84]	@ (8024c58 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024c04:	4605      	mov	r5, r0
 8024c06:	7823      	ldrb	r3, [r4, #0]
 8024c08:	f3bf 8f5b 	dmb	ish
 8024c0c:	07da      	lsls	r2, r3, #31
 8024c0e:	d40b      	bmi.n	8024c28 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024c10:	4620      	mov	r0, r4
 8024c12:	f008 f92a 	bl	802ce6a <__cxa_guard_acquire>
 8024c16:	b138      	cbz	r0, 8024c28 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024c18:	4620      	mov	r0, r4
 8024c1a:	f008 f932 	bl	802ce82 <__cxa_guard_release>
 8024c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8024c5c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024c20:	490f      	ldr	r1, [pc, #60]	@ (8024c60 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8024c22:	4810      	ldr	r0, [pc, #64]	@ (8024c64 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024c24:	f008 f91a 	bl	802ce5c <__aeabi_atexit>
 8024c28:	4c0f      	ldr	r4, [pc, #60]	@ (8024c68 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8024c2a:	7823      	ldrb	r3, [r4, #0]
 8024c2c:	f3bf 8f5b 	dmb	ish
 8024c30:	07db      	lsls	r3, r3, #31
 8024c32:	d40b      	bmi.n	8024c4c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024c34:	4620      	mov	r0, r4
 8024c36:	f008 f918 	bl	802ce6a <__cxa_guard_acquire>
 8024c3a:	b138      	cbz	r0, 8024c4c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024c3c:	4620      	mov	r0, r4
 8024c3e:	f008 f920 	bl	802ce82 <__cxa_guard_release>
 8024c42:	4a06      	ldr	r2, [pc, #24]	@ (8024c5c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024c44:	4909      	ldr	r1, [pc, #36]	@ (8024c6c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8024c46:	480a      	ldr	r0, [pc, #40]	@ (8024c70 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024c48:	f008 f908 	bl	802ce5c <__aeabi_atexit>
 8024c4c:	4b05      	ldr	r3, [pc, #20]	@ (8024c64 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024c4e:	60eb      	str	r3, [r5, #12]
 8024c50:	4b07      	ldr	r3, [pc, #28]	@ (8024c70 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024c52:	612b      	str	r3, [r5, #16]
 8024c54:	bd38      	pop	{r3, r4, r5, pc}
 8024c56:	bf00      	nop
 8024c58:	20012384 	.word	0x20012384
 8024c5c:	20000000 	.word	0x20000000
 8024c60:	0802100f 	.word	0x0802100f
 8024c64:	20000040 	.word	0x20000040
 8024c68:	20012388 	.word	0x20012388
 8024c6c:	0802100d 	.word	0x0802100d
 8024c70:	20000044 	.word	0x20000044

08024c74 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 8024c74:	b510      	push	{r4, lr}
 8024c76:	4604      	mov	r4, r0
 8024c78:	f7ff ff88 	bl	8024b8c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024c7c:	4620      	mov	r0, r4
 8024c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c82:	f7ff bfbd 	b.w	8024c00 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08024c88 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8024c88:	b538      	push	{r3, r4, r5, lr}
 8024c8a:	4c15      	ldr	r4, [pc, #84]	@ (8024ce0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024c8c:	4605      	mov	r5, r0
 8024c8e:	7823      	ldrb	r3, [r4, #0]
 8024c90:	f3bf 8f5b 	dmb	ish
 8024c94:	07da      	lsls	r2, r3, #31
 8024c96:	d40b      	bmi.n	8024cb0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024c98:	4620      	mov	r0, r4
 8024c9a:	f008 f8e6 	bl	802ce6a <__cxa_guard_acquire>
 8024c9e:	b138      	cbz	r0, 8024cb0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024ca0:	4620      	mov	r0, r4
 8024ca2:	f008 f8ee 	bl	802ce82 <__cxa_guard_release>
 8024ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8024ce4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024ca8:	490f      	ldr	r1, [pc, #60]	@ (8024ce8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024caa:	4810      	ldr	r0, [pc, #64]	@ (8024cec <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024cac:	f008 f8d6 	bl	802ce5c <__aeabi_atexit>
 8024cb0:	4c0f      	ldr	r4, [pc, #60]	@ (8024cf0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8024cb2:	7823      	ldrb	r3, [r4, #0]
 8024cb4:	f3bf 8f5b 	dmb	ish
 8024cb8:	07db      	lsls	r3, r3, #31
 8024cba:	d40b      	bmi.n	8024cd4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024cbc:	4620      	mov	r0, r4
 8024cbe:	f008 f8d4 	bl	802ce6a <__cxa_guard_acquire>
 8024cc2:	b138      	cbz	r0, 8024cd4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024cc4:	4620      	mov	r0, r4
 8024cc6:	f008 f8dc 	bl	802ce82 <__cxa_guard_release>
 8024cca:	4a06      	ldr	r2, [pc, #24]	@ (8024ce4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024ccc:	4909      	ldr	r1, [pc, #36]	@ (8024cf4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024cce:	480a      	ldr	r0, [pc, #40]	@ (8024cf8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024cd0:	f008 f8c4 	bl	802ce5c <__aeabi_atexit>
 8024cd4:	4b05      	ldr	r3, [pc, #20]	@ (8024cec <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024cd6:	626b      	str	r3, [r5, #36]	@ 0x24
 8024cd8:	4b07      	ldr	r3, [pc, #28]	@ (8024cf8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024cda:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024cdc:	bd38      	pop	{r3, r4, r5, pc}
 8024cde:	bf00      	nop
 8024ce0:	200123b4 	.word	0x200123b4
 8024ce4:	20000000 	.word	0x20000000
 8024ce8:	08021003 	.word	0x08021003
 8024cec:	20000070 	.word	0x20000070
 8024cf0:	200123b8 	.word	0x200123b8
 8024cf4:	08021001 	.word	0x08021001
 8024cf8:	20000074 	.word	0x20000074

08024cfc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024cfc:	b538      	push	{r3, r4, r5, lr}
 8024cfe:	4c15      	ldr	r4, [pc, #84]	@ (8024d54 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024d00:	4605      	mov	r5, r0
 8024d02:	7823      	ldrb	r3, [r4, #0]
 8024d04:	f3bf 8f5b 	dmb	ish
 8024d08:	07da      	lsls	r2, r3, #31
 8024d0a:	d40b      	bmi.n	8024d24 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024d0c:	4620      	mov	r0, r4
 8024d0e:	f008 f8ac 	bl	802ce6a <__cxa_guard_acquire>
 8024d12:	b138      	cbz	r0, 8024d24 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024d14:	4620      	mov	r0, r4
 8024d16:	f008 f8b4 	bl	802ce82 <__cxa_guard_release>
 8024d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8024d58 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024d1c:	490f      	ldr	r1, [pc, #60]	@ (8024d5c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024d1e:	4810      	ldr	r0, [pc, #64]	@ (8024d60 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024d20:	f008 f89c 	bl	802ce5c <__aeabi_atexit>
 8024d24:	4c0f      	ldr	r4, [pc, #60]	@ (8024d64 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8024d26:	7823      	ldrb	r3, [r4, #0]
 8024d28:	f3bf 8f5b 	dmb	ish
 8024d2c:	07db      	lsls	r3, r3, #31
 8024d2e:	d40b      	bmi.n	8024d48 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024d30:	4620      	mov	r0, r4
 8024d32:	f008 f89a 	bl	802ce6a <__cxa_guard_acquire>
 8024d36:	b138      	cbz	r0, 8024d48 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024d38:	4620      	mov	r0, r4
 8024d3a:	f008 f8a2 	bl	802ce82 <__cxa_guard_release>
 8024d3e:	4a06      	ldr	r2, [pc, #24]	@ (8024d58 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024d40:	4909      	ldr	r1, [pc, #36]	@ (8024d68 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8024d42:	480a      	ldr	r0, [pc, #40]	@ (8024d6c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024d44:	f008 f88a 	bl	802ce5c <__aeabi_atexit>
 8024d48:	4b05      	ldr	r3, [pc, #20]	@ (8024d60 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024d4a:	61eb      	str	r3, [r5, #28]
 8024d4c:	4b07      	ldr	r3, [pc, #28]	@ (8024d6c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024d4e:	622b      	str	r3, [r5, #32]
 8024d50:	bd38      	pop	{r3, r4, r5, pc}
 8024d52:	bf00      	nop
 8024d54:	2001238c 	.word	0x2001238c
 8024d58:	20000000 	.word	0x20000000
 8024d5c:	08021007 	.word	0x08021007
 8024d60:	20000048 	.word	0x20000048
 8024d64:	20012390 	.word	0x20012390
 8024d68:	08021005 	.word	0x08021005
 8024d6c:	2000004c 	.word	0x2000004c

08024d70 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 8024d70:	b510      	push	{r4, lr}
 8024d72:	4604      	mov	r4, r0
 8024d74:	f7ff ff88 	bl	8024c88 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8024d78:	4620      	mov	r0, r4
 8024d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d7e:	f7ff bfbd 	b.w	8024cfc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024d84 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024d84:	b538      	push	{r3, r4, r5, lr}
 8024d86:	4c0b      	ldr	r4, [pc, #44]	@ (8024db4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 8024d88:	4605      	mov	r5, r0
 8024d8a:	7823      	ldrb	r3, [r4, #0]
 8024d8c:	f3bf 8f5b 	dmb	ish
 8024d90:	07db      	lsls	r3, r3, #31
 8024d92:	d40b      	bmi.n	8024dac <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024d94:	4620      	mov	r0, r4
 8024d96:	f008 f868 	bl	802ce6a <__cxa_guard_acquire>
 8024d9a:	b138      	cbz	r0, 8024dac <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024d9c:	4620      	mov	r0, r4
 8024d9e:	f008 f870 	bl	802ce82 <__cxa_guard_release>
 8024da2:	4a05      	ldr	r2, [pc, #20]	@ (8024db8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 8024da4:	4905      	ldr	r1, [pc, #20]	@ (8024dbc <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 8024da6:	4806      	ldr	r0, [pc, #24]	@ (8024dc0 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8024da8:	f008 f858 	bl	802ce5c <__aeabi_atexit>
 8024dac:	4b04      	ldr	r3, [pc, #16]	@ (8024dc0 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8024dae:	632b      	str	r3, [r5, #48]	@ 0x30
 8024db0:	bd38      	pop	{r3, r4, r5, pc}
 8024db2:	bf00      	nop
 8024db4:	200123c4 	.word	0x200123c4
 8024db8:	20000000 	.word	0x20000000
 8024dbc:	08020ffd 	.word	0x08020ffd
 8024dc0:	20000080 	.word	0x20000080

08024dc4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024dc4:	b538      	push	{r3, r4, r5, lr}
 8024dc6:	4c0b      	ldr	r4, [pc, #44]	@ (8024df4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 8024dc8:	4605      	mov	r5, r0
 8024dca:	7823      	ldrb	r3, [r4, #0]
 8024dcc:	f3bf 8f5b 	dmb	ish
 8024dd0:	07db      	lsls	r3, r3, #31
 8024dd2:	d40b      	bmi.n	8024dec <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024dd4:	4620      	mov	r0, r4
 8024dd6:	f008 f848 	bl	802ce6a <__cxa_guard_acquire>
 8024dda:	b138      	cbz	r0, 8024dec <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024ddc:	4620      	mov	r0, r4
 8024dde:	f008 f850 	bl	802ce82 <__cxa_guard_release>
 8024de2:	4a05      	ldr	r2, [pc, #20]	@ (8024df8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 8024de4:	4905      	ldr	r1, [pc, #20]	@ (8024dfc <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 8024de6:	4806      	ldr	r0, [pc, #24]	@ (8024e00 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8024de8:	f008 f838 	bl	802ce5c <__aeabi_atexit>
 8024dec:	4b04      	ldr	r3, [pc, #16]	@ (8024e00 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8024dee:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8024df0:	bd38      	pop	{r3, r4, r5, pc}
 8024df2:	bf00      	nop
 8024df4:	20012394 	.word	0x20012394
 8024df8:	20000000 	.word	0x20000000
 8024dfc:	08020fff 	.word	0x08020fff
 8024e00:	20000050 	.word	0x20000050

08024e04 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024e04:	b510      	push	{r4, lr}
 8024e06:	4604      	mov	r4, r0
 8024e08:	f7ff ffbc 	bl	8024d84 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024e0c:	4620      	mov	r0, r4
 8024e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024e12:	f7ff bfd7 	b.w	8024dc4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024e18 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8024e18:	b538      	push	{r3, r4, r5, lr}
 8024e1a:	4c15      	ldr	r4, [pc, #84]	@ (8024e70 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8024e1c:	4605      	mov	r5, r0
 8024e1e:	7823      	ldrb	r3, [r4, #0]
 8024e20:	f3bf 8f5b 	dmb	ish
 8024e24:	07da      	lsls	r2, r3, #31
 8024e26:	d40b      	bmi.n	8024e40 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024e28:	4620      	mov	r0, r4
 8024e2a:	f008 f81e 	bl	802ce6a <__cxa_guard_acquire>
 8024e2e:	b138      	cbz	r0, 8024e40 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024e30:	4620      	mov	r0, r4
 8024e32:	f008 f826 	bl	802ce82 <__cxa_guard_release>
 8024e36:	4a0f      	ldr	r2, [pc, #60]	@ (8024e74 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024e38:	490f      	ldr	r1, [pc, #60]	@ (8024e78 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024e3a:	4810      	ldr	r0, [pc, #64]	@ (8024e7c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024e3c:	f008 f80e 	bl	802ce5c <__aeabi_atexit>
 8024e40:	4c0f      	ldr	r4, [pc, #60]	@ (8024e80 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8024e42:	7823      	ldrb	r3, [r4, #0]
 8024e44:	f3bf 8f5b 	dmb	ish
 8024e48:	07db      	lsls	r3, r3, #31
 8024e4a:	d40b      	bmi.n	8024e64 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024e4c:	4620      	mov	r0, r4
 8024e4e:	f008 f80c 	bl	802ce6a <__cxa_guard_acquire>
 8024e52:	b138      	cbz	r0, 8024e64 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024e54:	4620      	mov	r0, r4
 8024e56:	f008 f814 	bl	802ce82 <__cxa_guard_release>
 8024e5a:	4a06      	ldr	r2, [pc, #24]	@ (8024e74 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024e5c:	4909      	ldr	r1, [pc, #36]	@ (8024e84 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8024e5e:	480a      	ldr	r0, [pc, #40]	@ (8024e88 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024e60:	f007 fffc 	bl	802ce5c <__aeabi_atexit>
 8024e64:	4b05      	ldr	r3, [pc, #20]	@ (8024e7c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024e66:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8024e68:	4b07      	ldr	r3, [pc, #28]	@ (8024e88 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024e6a:	652b      	str	r3, [r5, #80]	@ 0x50
 8024e6c:	bd38      	pop	{r3, r4, r5, pc}
 8024e6e:	bf00      	nop
 8024e70:	200123c8 	.word	0x200123c8
 8024e74:	20000000 	.word	0x20000000
 8024e78:	08020fef 	.word	0x08020fef
 8024e7c:	20000084 	.word	0x20000084
 8024e80:	200123cc 	.word	0x200123cc
 8024e84:	08020fed 	.word	0x08020fed
 8024e88:	20000088 	.word	0x20000088

08024e8c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024e8c:	b538      	push	{r3, r4, r5, lr}
 8024e8e:	4c15      	ldr	r4, [pc, #84]	@ (8024ee4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8024e90:	4605      	mov	r5, r0
 8024e92:	7823      	ldrb	r3, [r4, #0]
 8024e94:	f3bf 8f5b 	dmb	ish
 8024e98:	07da      	lsls	r2, r3, #31
 8024e9a:	d40b      	bmi.n	8024eb4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024e9c:	4620      	mov	r0, r4
 8024e9e:	f007 ffe4 	bl	802ce6a <__cxa_guard_acquire>
 8024ea2:	b138      	cbz	r0, 8024eb4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024ea4:	4620      	mov	r0, r4
 8024ea6:	f007 ffec 	bl	802ce82 <__cxa_guard_release>
 8024eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8024ee8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024eac:	490f      	ldr	r1, [pc, #60]	@ (8024eec <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8024eae:	4810      	ldr	r0, [pc, #64]	@ (8024ef0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024eb0:	f007 ffd4 	bl	802ce5c <__aeabi_atexit>
 8024eb4:	4c0f      	ldr	r4, [pc, #60]	@ (8024ef4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024eb6:	7823      	ldrb	r3, [r4, #0]
 8024eb8:	f3bf 8f5b 	dmb	ish
 8024ebc:	07db      	lsls	r3, r3, #31
 8024ebe:	d40b      	bmi.n	8024ed8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024ec0:	4620      	mov	r0, r4
 8024ec2:	f007 ffd2 	bl	802ce6a <__cxa_guard_acquire>
 8024ec6:	b138      	cbz	r0, 8024ed8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024ec8:	4620      	mov	r0, r4
 8024eca:	f007 ffda 	bl	802ce82 <__cxa_guard_release>
 8024ece:	4a06      	ldr	r2, [pc, #24]	@ (8024ee8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024ed0:	4909      	ldr	r1, [pc, #36]	@ (8024ef8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8024ed2:	480a      	ldr	r0, [pc, #40]	@ (8024efc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024ed4:	f007 ffc2 	bl	802ce5c <__aeabi_atexit>
 8024ed8:	4b05      	ldr	r3, [pc, #20]	@ (8024ef0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024eda:	646b      	str	r3, [r5, #68]	@ 0x44
 8024edc:	4b07      	ldr	r3, [pc, #28]	@ (8024efc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024ede:	64ab      	str	r3, [r5, #72]	@ 0x48
 8024ee0:	bd38      	pop	{r3, r4, r5, pc}
 8024ee2:	bf00      	nop
 8024ee4:	200123d0 	.word	0x200123d0
 8024ee8:	20000000 	.word	0x20000000
 8024eec:	08020ff7 	.word	0x08020ff7
 8024ef0:	2000008c 	.word	0x2000008c
 8024ef4:	200123d4 	.word	0x200123d4
 8024ef8:	08020ff5 	.word	0x08020ff5
 8024efc:	20000090 	.word	0x20000090

08024f00 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8024f00:	b538      	push	{r3, r4, r5, lr}
 8024f02:	4c15      	ldr	r4, [pc, #84]	@ (8024f58 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8024f04:	4605      	mov	r5, r0
 8024f06:	7823      	ldrb	r3, [r4, #0]
 8024f08:	f3bf 8f5b 	dmb	ish
 8024f0c:	07da      	lsls	r2, r3, #31
 8024f0e:	d40b      	bmi.n	8024f28 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024f10:	4620      	mov	r0, r4
 8024f12:	f007 ffaa 	bl	802ce6a <__cxa_guard_acquire>
 8024f16:	b138      	cbz	r0, 8024f28 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024f18:	4620      	mov	r0, r4
 8024f1a:	f007 ffb2 	bl	802ce82 <__cxa_guard_release>
 8024f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8024f5c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024f20:	490f      	ldr	r1, [pc, #60]	@ (8024f60 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8024f22:	4810      	ldr	r0, [pc, #64]	@ (8024f64 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024f24:	f007 ff9a 	bl	802ce5c <__aeabi_atexit>
 8024f28:	4c0f      	ldr	r4, [pc, #60]	@ (8024f68 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8024f2a:	7823      	ldrb	r3, [r4, #0]
 8024f2c:	f3bf 8f5b 	dmb	ish
 8024f30:	07db      	lsls	r3, r3, #31
 8024f32:	d40b      	bmi.n	8024f4c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024f34:	4620      	mov	r0, r4
 8024f36:	f007 ff98 	bl	802ce6a <__cxa_guard_acquire>
 8024f3a:	b138      	cbz	r0, 8024f4c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024f3c:	4620      	mov	r0, r4
 8024f3e:	f007 ffa0 	bl	802ce82 <__cxa_guard_release>
 8024f42:	4a06      	ldr	r2, [pc, #24]	@ (8024f5c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024f44:	4909      	ldr	r1, [pc, #36]	@ (8024f6c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024f46:	480a      	ldr	r0, [pc, #40]	@ (8024f70 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024f48:	f007 ff88 	bl	802ce5c <__aeabi_atexit>
 8024f4c:	4b05      	ldr	r3, [pc, #20]	@ (8024f64 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024f4e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8024f50:	4b07      	ldr	r3, [pc, #28]	@ (8024f70 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024f52:	642b      	str	r3, [r5, #64]	@ 0x40
 8024f54:	bd38      	pop	{r3, r4, r5, pc}
 8024f56:	bf00      	nop
 8024f58:	200123a0 	.word	0x200123a0
 8024f5c:	20000000 	.word	0x20000000
 8024f60:	08020ff3 	.word	0x08020ff3
 8024f64:	2000005c 	.word	0x2000005c
 8024f68:	200123a4 	.word	0x200123a4
 8024f6c:	08020ff1 	.word	0x08020ff1
 8024f70:	20000060 	.word	0x20000060

08024f74 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024f74:	b538      	push	{r3, r4, r5, lr}
 8024f76:	4c15      	ldr	r4, [pc, #84]	@ (8024fcc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024f78:	4605      	mov	r5, r0
 8024f7a:	7823      	ldrb	r3, [r4, #0]
 8024f7c:	f3bf 8f5b 	dmb	ish
 8024f80:	07da      	lsls	r2, r3, #31
 8024f82:	d40b      	bmi.n	8024f9c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024f84:	4620      	mov	r0, r4
 8024f86:	f007 ff70 	bl	802ce6a <__cxa_guard_acquire>
 8024f8a:	b138      	cbz	r0, 8024f9c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024f8c:	4620      	mov	r0, r4
 8024f8e:	f007 ff78 	bl	802ce82 <__cxa_guard_release>
 8024f92:	4a0f      	ldr	r2, [pc, #60]	@ (8024fd0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024f94:	490f      	ldr	r1, [pc, #60]	@ (8024fd4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024f96:	4810      	ldr	r0, [pc, #64]	@ (8024fd8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024f98:	f007 ff60 	bl	802ce5c <__aeabi_atexit>
 8024f9c:	4c0f      	ldr	r4, [pc, #60]	@ (8024fdc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8024f9e:	7823      	ldrb	r3, [r4, #0]
 8024fa0:	f3bf 8f5b 	dmb	ish
 8024fa4:	07db      	lsls	r3, r3, #31
 8024fa6:	d40b      	bmi.n	8024fc0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024fa8:	4620      	mov	r0, r4
 8024faa:	f007 ff5e 	bl	802ce6a <__cxa_guard_acquire>
 8024fae:	b138      	cbz	r0, 8024fc0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024fb0:	4620      	mov	r0, r4
 8024fb2:	f007 ff66 	bl	802ce82 <__cxa_guard_release>
 8024fb6:	4a06      	ldr	r2, [pc, #24]	@ (8024fd0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024fb8:	4909      	ldr	r1, [pc, #36]	@ (8024fe0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8024fba:	480a      	ldr	r0, [pc, #40]	@ (8024fe4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024fbc:	f007 ff4e 	bl	802ce5c <__aeabi_atexit>
 8024fc0:	4b05      	ldr	r3, [pc, #20]	@ (8024fd8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024fc2:	636b      	str	r3, [r5, #52]	@ 0x34
 8024fc4:	4b07      	ldr	r3, [pc, #28]	@ (8024fe4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024fc6:	63ab      	str	r3, [r5, #56]	@ 0x38
 8024fc8:	bd38      	pop	{r3, r4, r5, pc}
 8024fca:	bf00      	nop
 8024fcc:	200123bc 	.word	0x200123bc
 8024fd0:	20000000 	.word	0x20000000
 8024fd4:	08020ffb 	.word	0x08020ffb
 8024fd8:	20000078 	.word	0x20000078
 8024fdc:	200123c0 	.word	0x200123c0
 8024fe0:	08020ff9 	.word	0x08020ff9
 8024fe4:	2000007c 	.word	0x2000007c

08024fe8 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 8024fe8:	b510      	push	{r4, lr}
 8024fea:	4604      	mov	r4, r0
 8024fec:	f7ff ff14 	bl	8024e18 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8024ff0:	4620      	mov	r0, r4
 8024ff2:	f7ff ff85 	bl	8024f00 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8024ff6:	4620      	mov	r0, r4
 8024ff8:	f7ff ff48 	bl	8024e8c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8024ffc:	4620      	mov	r0, r4
 8024ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025002:	f7ff bfb7 	b.w	8024f74 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08025008 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8025008:	b538      	push	{r3, r4, r5, lr}
 802500a:	4c15      	ldr	r4, [pc, #84]	@ (8025060 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 802500c:	4605      	mov	r5, r0
 802500e:	7823      	ldrb	r3, [r4, #0]
 8025010:	f3bf 8f5b 	dmb	ish
 8025014:	07da      	lsls	r2, r3, #31
 8025016:	d40b      	bmi.n	8025030 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025018:	4620      	mov	r0, r4
 802501a:	f007 ff26 	bl	802ce6a <__cxa_guard_acquire>
 802501e:	b138      	cbz	r0, 8025030 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025020:	4620      	mov	r0, r4
 8025022:	f007 ff2e 	bl	802ce82 <__cxa_guard_release>
 8025026:	4a0f      	ldr	r2, [pc, #60]	@ (8025064 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025028:	490f      	ldr	r1, [pc, #60]	@ (8025068 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802502a:	4810      	ldr	r0, [pc, #64]	@ (802506c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802502c:	f007 ff16 	bl	802ce5c <__aeabi_atexit>
 8025030:	4c0f      	ldr	r4, [pc, #60]	@ (8025070 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8025032:	7823      	ldrb	r3, [r4, #0]
 8025034:	f3bf 8f5b 	dmb	ish
 8025038:	07db      	lsls	r3, r3, #31
 802503a:	d40b      	bmi.n	8025054 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802503c:	4620      	mov	r0, r4
 802503e:	f007 ff14 	bl	802ce6a <__cxa_guard_acquire>
 8025042:	b138      	cbz	r0, 8025054 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025044:	4620      	mov	r0, r4
 8025046:	f007 ff1c 	bl	802ce82 <__cxa_guard_release>
 802504a:	4a06      	ldr	r2, [pc, #24]	@ (8025064 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802504c:	4909      	ldr	r1, [pc, #36]	@ (8025074 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802504e:	480a      	ldr	r0, [pc, #40]	@ (8025078 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8025050:	f007 ff04 	bl	802ce5c <__aeabi_atexit>
 8025054:	4b05      	ldr	r3, [pc, #20]	@ (802506c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025056:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8025058:	4b07      	ldr	r3, [pc, #28]	@ (8025078 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802505a:	662b      	str	r3, [r5, #96]	@ 0x60
 802505c:	bd38      	pop	{r3, r4, r5, pc}
 802505e:	bf00      	nop
 8025060:	20012398 	.word	0x20012398
 8025064:	20000000 	.word	0x20000000
 8025068:	08020fe7 	.word	0x08020fe7
 802506c:	20000054 	.word	0x20000054
 8025070:	2001239c 	.word	0x2001239c
 8025074:	08020fe5 	.word	0x08020fe5
 8025078:	20000058 	.word	0x20000058

0802507c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 802507c:	b538      	push	{r3, r4, r5, lr}
 802507e:	4c15      	ldr	r4, [pc, #84]	@ (80250d4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8025080:	4605      	mov	r5, r0
 8025082:	7823      	ldrb	r3, [r4, #0]
 8025084:	f3bf 8f5b 	dmb	ish
 8025088:	07da      	lsls	r2, r3, #31
 802508a:	d40b      	bmi.n	80250a4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802508c:	4620      	mov	r0, r4
 802508e:	f007 feec 	bl	802ce6a <__cxa_guard_acquire>
 8025092:	b138      	cbz	r0, 80250a4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8025094:	4620      	mov	r0, r4
 8025096:	f007 fef4 	bl	802ce82 <__cxa_guard_release>
 802509a:	4a0f      	ldr	r2, [pc, #60]	@ (80250d8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802509c:	490f      	ldr	r1, [pc, #60]	@ (80250dc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802509e:	4810      	ldr	r0, [pc, #64]	@ (80250e0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80250a0:	f007 fedc 	bl	802ce5c <__aeabi_atexit>
 80250a4:	4c0f      	ldr	r4, [pc, #60]	@ (80250e4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80250a6:	7823      	ldrb	r3, [r4, #0]
 80250a8:	f3bf 8f5b 	dmb	ish
 80250ac:	07db      	lsls	r3, r3, #31
 80250ae:	d40b      	bmi.n	80250c8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80250b0:	4620      	mov	r0, r4
 80250b2:	f007 feda 	bl	802ce6a <__cxa_guard_acquire>
 80250b6:	b138      	cbz	r0, 80250c8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80250b8:	4620      	mov	r0, r4
 80250ba:	f007 fee2 	bl	802ce82 <__cxa_guard_release>
 80250be:	4a06      	ldr	r2, [pc, #24]	@ (80250d8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80250c0:	4909      	ldr	r1, [pc, #36]	@ (80250e8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80250c2:	480a      	ldr	r0, [pc, #40]	@ (80250ec <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80250c4:	f007 feca 	bl	802ce5c <__aeabi_atexit>
 80250c8:	4b05      	ldr	r3, [pc, #20]	@ (80250e0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80250ca:	656b      	str	r3, [r5, #84]	@ 0x54
 80250cc:	4b07      	ldr	r3, [pc, #28]	@ (80250ec <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80250ce:	65ab      	str	r3, [r5, #88]	@ 0x58
 80250d0:	bd38      	pop	{r3, r4, r5, pc}
 80250d2:	bf00      	nop
 80250d4:	20012370 	.word	0x20012370
 80250d8:	20000000 	.word	0x20000000
 80250dc:	08020feb 	.word	0x08020feb
 80250e0:	2000002c 	.word	0x2000002c
 80250e4:	20012374 	.word	0x20012374
 80250e8:	08020fe9 	.word	0x08020fe9
 80250ec:	20000030 	.word	0x20000030

080250f0 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 80250f0:	b510      	push	{r4, lr}
 80250f2:	4604      	mov	r4, r0
 80250f4:	f7ff ff88 	bl	8025008 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80250f8:	4620      	mov	r0, r4
 80250fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80250fe:	f7ff bfbd 	b.w	802507c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08025104 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8025104:	b538      	push	{r3, r4, r5, lr}
 8025106:	4c0b      	ldr	r4, [pc, #44]	@ (8025134 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 8025108:	4605      	mov	r5, r0
 802510a:	7823      	ldrb	r3, [r4, #0]
 802510c:	f3bf 8f5b 	dmb	ish
 8025110:	07db      	lsls	r3, r3, #31
 8025112:	d40b      	bmi.n	802512c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025114:	4620      	mov	r0, r4
 8025116:	f007 fea8 	bl	802ce6a <__cxa_guard_acquire>
 802511a:	b138      	cbz	r0, 802512c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802511c:	4620      	mov	r0, r4
 802511e:	f007 feb0 	bl	802ce82 <__cxa_guard_release>
 8025122:	4a05      	ldr	r2, [pc, #20]	@ (8025138 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8025124:	4905      	ldr	r1, [pc, #20]	@ (802513c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 8025126:	4806      	ldr	r0, [pc, #24]	@ (8025140 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 8025128:	f007 fe98 	bl	802ce5c <__aeabi_atexit>
 802512c:	4b04      	ldr	r3, [pc, #16]	@ (8025140 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 802512e:	66ab      	str	r3, [r5, #104]	@ 0x68
 8025130:	bd38      	pop	{r3, r4, r5, pc}
 8025132:	bf00      	nop
 8025134:	200123a8 	.word	0x200123a8
 8025138:	20000000 	.word	0x20000000
 802513c:	08020fe1 	.word	0x08020fe1
 8025140:	20000064 	.word	0x20000064

08025144 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025144:	b538      	push	{r3, r4, r5, lr}
 8025146:	4c0b      	ldr	r4, [pc, #44]	@ (8025174 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 8025148:	4605      	mov	r5, r0
 802514a:	7823      	ldrb	r3, [r4, #0]
 802514c:	f3bf 8f5b 	dmb	ish
 8025150:	07db      	lsls	r3, r3, #31
 8025152:	d40b      	bmi.n	802516c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025154:	4620      	mov	r0, r4
 8025156:	f007 fe88 	bl	802ce6a <__cxa_guard_acquire>
 802515a:	b138      	cbz	r0, 802516c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802515c:	4620      	mov	r0, r4
 802515e:	f007 fe90 	bl	802ce82 <__cxa_guard_release>
 8025162:	4a05      	ldr	r2, [pc, #20]	@ (8025178 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 8025164:	4905      	ldr	r1, [pc, #20]	@ (802517c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 8025166:	4806      	ldr	r0, [pc, #24]	@ (8025180 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8025168:	f007 fe78 	bl	802ce5c <__aeabi_atexit>
 802516c:	4b04      	ldr	r3, [pc, #16]	@ (8025180 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 802516e:	666b      	str	r3, [r5, #100]	@ 0x64
 8025170:	bd38      	pop	{r3, r4, r5, pc}
 8025172:	bf00      	nop
 8025174:	20012380 	.word	0x20012380
 8025178:	20000000 	.word	0x20000000
 802517c:	08020fe3 	.word	0x08020fe3
 8025180:	2000003c 	.word	0x2000003c

08025184 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 8025184:	b510      	push	{r4, lr}
 8025186:	4604      	mov	r4, r0
 8025188:	f7ff ffbc 	bl	8025104 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 802518c:	4620      	mov	r0, r4
 802518e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025192:	f7ff bfd7 	b.w	8025144 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08025198 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8025198:	b538      	push	{r3, r4, r5, lr}
 802519a:	4c15      	ldr	r4, [pc, #84]	@ (80251f0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 802519c:	4605      	mov	r5, r0
 802519e:	7823      	ldrb	r3, [r4, #0]
 80251a0:	f3bf 8f5b 	dmb	ish
 80251a4:	07da      	lsls	r2, r3, #31
 80251a6:	d40b      	bmi.n	80251c0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80251a8:	4620      	mov	r0, r4
 80251aa:	f007 fe5e 	bl	802ce6a <__cxa_guard_acquire>
 80251ae:	b138      	cbz	r0, 80251c0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80251b0:	4620      	mov	r0, r4
 80251b2:	f007 fe66 	bl	802ce82 <__cxa_guard_release>
 80251b6:	4a0f      	ldr	r2, [pc, #60]	@ (80251f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80251b8:	490f      	ldr	r1, [pc, #60]	@ (80251f8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80251ba:	4810      	ldr	r0, [pc, #64]	@ (80251fc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80251bc:	f007 fe4e 	bl	802ce5c <__aeabi_atexit>
 80251c0:	4c0f      	ldr	r4, [pc, #60]	@ (8025200 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80251c2:	7823      	ldrb	r3, [r4, #0]
 80251c4:	f3bf 8f5b 	dmb	ish
 80251c8:	07db      	lsls	r3, r3, #31
 80251ca:	d40b      	bmi.n	80251e4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80251cc:	4620      	mov	r0, r4
 80251ce:	f007 fe4c 	bl	802ce6a <__cxa_guard_acquire>
 80251d2:	b138      	cbz	r0, 80251e4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80251d4:	4620      	mov	r0, r4
 80251d6:	f007 fe54 	bl	802ce82 <__cxa_guard_release>
 80251da:	4a06      	ldr	r2, [pc, #24]	@ (80251f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80251dc:	4909      	ldr	r1, [pc, #36]	@ (8025204 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80251de:	480a      	ldr	r0, [pc, #40]	@ (8025208 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80251e0:	f007 fe3c 	bl	802ce5c <__aeabi_atexit>
 80251e4:	4b05      	ldr	r3, [pc, #20]	@ (80251fc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80251e6:	676b      	str	r3, [r5, #116]	@ 0x74
 80251e8:	4b07      	ldr	r3, [pc, #28]	@ (8025208 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80251ea:	67ab      	str	r3, [r5, #120]	@ 0x78
 80251ec:	bd38      	pop	{r3, r4, r5, pc}
 80251ee:	bf00      	nop
 80251f0:	20012378 	.word	0x20012378
 80251f4:	20000000 	.word	0x20000000
 80251f8:	08020fdb 	.word	0x08020fdb
 80251fc:	20000034 	.word	0x20000034
 8025200:	2001237c 	.word	0x2001237c
 8025204:	08020fd9 	.word	0x08020fd9
 8025208:	20000038 	.word	0x20000038

0802520c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 802520c:	b538      	push	{r3, r4, r5, lr}
 802520e:	4c15      	ldr	r4, [pc, #84]	@ (8025264 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8025210:	4605      	mov	r5, r0
 8025212:	7823      	ldrb	r3, [r4, #0]
 8025214:	f3bf 8f5b 	dmb	ish
 8025218:	07da      	lsls	r2, r3, #31
 802521a:	d40b      	bmi.n	8025234 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802521c:	4620      	mov	r0, r4
 802521e:	f007 fe24 	bl	802ce6a <__cxa_guard_acquire>
 8025222:	b138      	cbz	r0, 8025234 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025224:	4620      	mov	r0, r4
 8025226:	f007 fe2c 	bl	802ce82 <__cxa_guard_release>
 802522a:	4a0f      	ldr	r2, [pc, #60]	@ (8025268 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802522c:	490f      	ldr	r1, [pc, #60]	@ (802526c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802522e:	4810      	ldr	r0, [pc, #64]	@ (8025270 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025230:	f007 fe14 	bl	802ce5c <__aeabi_atexit>
 8025234:	4c0f      	ldr	r4, [pc, #60]	@ (8025274 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8025236:	7823      	ldrb	r3, [r4, #0]
 8025238:	f3bf 8f5b 	dmb	ish
 802523c:	07db      	lsls	r3, r3, #31
 802523e:	d40b      	bmi.n	8025258 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025240:	4620      	mov	r0, r4
 8025242:	f007 fe12 	bl	802ce6a <__cxa_guard_acquire>
 8025246:	b138      	cbz	r0, 8025258 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025248:	4620      	mov	r0, r4
 802524a:	f007 fe1a 	bl	802ce82 <__cxa_guard_release>
 802524e:	4a06      	ldr	r2, [pc, #24]	@ (8025268 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025250:	4909      	ldr	r1, [pc, #36]	@ (8025278 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8025252:	480a      	ldr	r0, [pc, #40]	@ (802527c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025254:	f007 fe02 	bl	802ce5c <__aeabi_atexit>
 8025258:	4b05      	ldr	r3, [pc, #20]	@ (8025270 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802525a:	66eb      	str	r3, [r5, #108]	@ 0x6c
 802525c:	4b07      	ldr	r3, [pc, #28]	@ (802527c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802525e:	672b      	str	r3, [r5, #112]	@ 0x70
 8025260:	bd38      	pop	{r3, r4, r5, pc}
 8025262:	bf00      	nop
 8025264:	20012368 	.word	0x20012368
 8025268:	20000000 	.word	0x20000000
 802526c:	08020fdf 	.word	0x08020fdf
 8025270:	20000024 	.word	0x20000024
 8025274:	2001236c 	.word	0x2001236c
 8025278:	08020fdd 	.word	0x08020fdd
 802527c:	20000028 	.word	0x20000028

08025280 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 8025280:	b510      	push	{r4, lr}
 8025282:	4604      	mov	r4, r0
 8025284:	f7ff ff88 	bl	8025198 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8025288:	4620      	mov	r0, r4
 802528a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802528e:	f7ff bfbd 	b.w	802520c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

08025292 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 8025292:	b510      	push	{r4, lr}
 8025294:	4604      	mov	r4, r0
 8025296:	f7ff fff3 	bl	8025280 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 802529a:	4620      	mov	r0, r4
 802529c:	f7ff ff72 	bl	8025184 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 80252a0:	4620      	mov	r0, r4
 80252a2:	f7ff fdaf 	bl	8024e04 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 80252a6:	4620      	mov	r0, r4
 80252a8:	f7ff fce4 	bl	8024c74 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 80252ac:	4620      	mov	r0, r4
 80252ae:	f7ff fd5f 	bl	8024d70 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 80252b2:	4620      	mov	r0, r4
 80252b4:	f7ff fe98 	bl	8024fe8 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 80252b8:	4620      	mov	r0, r4
 80252ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80252be:	f7ff bf17 	b.w	80250f0 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>
	...

080252c4 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev>:
 80252c4:	b538      	push	{r3, r4, r5, lr}
 80252c6:	4c0b      	ldr	r4, [pc, #44]	@ (80252f4 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x30>)
 80252c8:	4605      	mov	r5, r0
 80252ca:	7823      	ldrb	r3, [r4, #0]
 80252cc:	f3bf 8f5b 	dmb	ish
 80252d0:	07db      	lsls	r3, r3, #31
 80252d2:	d40b      	bmi.n	80252ec <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x28>
 80252d4:	4620      	mov	r0, r4
 80252d6:	f007 fdc8 	bl	802ce6a <__cxa_guard_acquire>
 80252da:	b138      	cbz	r0, 80252ec <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x28>
 80252dc:	4620      	mov	r0, r4
 80252de:	f007 fdd0 	bl	802ce82 <__cxa_guard_release>
 80252e2:	4a05      	ldr	r2, [pc, #20]	@ (80252f8 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x34>)
 80252e4:	4905      	ldr	r1, [pc, #20]	@ (80252fc <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x38>)
 80252e6:	4806      	ldr	r0, [pc, #24]	@ (8025300 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x3c>)
 80252e8:	f007 fdb8 	bl	802ce5c <__aeabi_atexit>
 80252ec:	4b04      	ldr	r3, [pc, #16]	@ (8025300 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x3c>)
 80252ee:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80252f0:	bd38      	pop	{r3, r4, r5, pc}
 80252f2:	bf00      	nop
 80252f4:	2001235c 	.word	0x2001235c
 80252f8:	20000000 	.word	0x20000000
 80252fc:	08020fd7 	.word	0x08020fd7
 8025300:	2000001c 	.word	0x2000001c

08025304 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv>:
 8025304:	b538      	push	{r3, r4, r5, lr}
 8025306:	4c0b      	ldr	r4, [pc, #44]	@ (8025334 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x30>)
 8025308:	4605      	mov	r5, r0
 802530a:	7823      	ldrb	r3, [r4, #0]
 802530c:	f3bf 8f5b 	dmb	ish
 8025310:	07db      	lsls	r3, r3, #31
 8025312:	d40b      	bmi.n	802532c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x28>
 8025314:	4620      	mov	r0, r4
 8025316:	f007 fda8 	bl	802ce6a <__cxa_guard_acquire>
 802531a:	b138      	cbz	r0, 802532c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x28>
 802531c:	4620      	mov	r0, r4
 802531e:	f007 fdb0 	bl	802ce82 <__cxa_guard_release>
 8025322:	4a05      	ldr	r2, [pc, #20]	@ (8025338 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x34>)
 8025324:	4905      	ldr	r1, [pc, #20]	@ (802533c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x38>)
 8025326:	4806      	ldr	r0, [pc, #24]	@ (8025340 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x3c>)
 8025328:	f007 fd98 	bl	802ce5c <__aeabi_atexit>
 802532c:	4b04      	ldr	r3, [pc, #16]	@ (8025340 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x3c>)
 802532e:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8025332:	bd38      	pop	{r3, r4, r5, pc}
 8025334:	20012360 	.word	0x20012360
 8025338:	20000000 	.word	0x20000000
 802533c:	08020fd5 	.word	0x08020fd5
 8025340:	20000020 	.word	0x20000020

08025344 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev>:
 8025344:	b570      	push	{r4, r5, r6, lr}
 8025346:	4d0d      	ldr	r5, [pc, #52]	@ (802537c <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8025348:	4606      	mov	r6, r0
 802534a:	4c0d      	ldr	r4, [pc, #52]	@ (8025380 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802534c:	782b      	ldrb	r3, [r5, #0]
 802534e:	f3bf 8f5b 	dmb	ish
 8025352:	f013 0f01 	tst.w	r3, #1
 8025356:	d10d      	bne.n	8025374 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025358:	4628      	mov	r0, r5
 802535a:	f007 fd86 	bl	802ce6a <__cxa_guard_acquire>
 802535e:	b148      	cbz	r0, 8025374 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025360:	4b08      	ldr	r3, [pc, #32]	@ (8025384 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8025362:	4628      	mov	r0, r5
 8025364:	6023      	str	r3, [r4, #0]
 8025366:	f007 fd8c 	bl	802ce82 <__cxa_guard_release>
 802536a:	4a07      	ldr	r2, [pc, #28]	@ (8025388 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x44>)
 802536c:	4620      	mov	r0, r4
 802536e:	4907      	ldr	r1, [pc, #28]	@ (802538c <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8025370:	f007 fd74 	bl	802ce5c <__aeabi_atexit>
 8025374:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8025378:	bd70      	pop	{r4, r5, r6, pc}
 802537a:	bf00      	nop
 802537c:	20012364 	.word	0x20012364
 8025380:	200124dc 	.word	0x200124dc
 8025384:	080323c4 	.word	0x080323c4
 8025388:	20000000 	.word	0x20000000
 802538c:	08020fd3 	.word	0x08020fd3

08025390 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_AllEv>:
 8025390:	b510      	push	{r4, lr}
 8025392:	4604      	mov	r4, r0
 8025394:	f7ff ff96 	bl	80252c4 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev>
 8025398:	4620      	mov	r0, r4
 802539a:	f7ff ffb3 	bl	8025304 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv>
 802539e:	4620      	mov	r0, r4
 80253a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253a4:	f7ff bfce 	b.w	8025344 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev>

080253a8 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv>:
 80253a8:	b570      	push	{r4, r5, r6, lr}
 80253aa:	4d0d      	ldr	r5, [pc, #52]	@ (80253e0 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x38>)
 80253ac:	4606      	mov	r6, r0
 80253ae:	4c0d      	ldr	r4, [pc, #52]	@ (80253e4 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x3c>)
 80253b0:	782b      	ldrb	r3, [r5, #0]
 80253b2:	f3bf 8f5b 	dmb	ish
 80253b6:	f013 0f01 	tst.w	r3, #1
 80253ba:	d10d      	bne.n	80253d8 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x30>
 80253bc:	4628      	mov	r0, r5
 80253be:	f007 fd54 	bl	802ce6a <__cxa_guard_acquire>
 80253c2:	b148      	cbz	r0, 80253d8 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x30>
 80253c4:	4b08      	ldr	r3, [pc, #32]	@ (80253e8 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x40>)
 80253c6:	4628      	mov	r0, r5
 80253c8:	6023      	str	r3, [r4, #0]
 80253ca:	f007 fd5a 	bl	802ce82 <__cxa_guard_release>
 80253ce:	4a07      	ldr	r2, [pc, #28]	@ (80253ec <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x44>)
 80253d0:	4620      	mov	r0, r4
 80253d2:	4907      	ldr	r1, [pc, #28]	@ (80253f0 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x48>)
 80253d4:	f007 fd42 	bl	802ce5c <__aeabi_atexit>
 80253d8:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 80253dc:	bd70      	pop	{r4, r5, r6, pc}
 80253de:	bf00      	nop
 80253e0:	20012358 	.word	0x20012358
 80253e4:	200123d8 	.word	0x200123d8
 80253e8:	080323e0 	.word	0x080323e0
 80253ec:	20000000 	.word	0x20000000
 80253f0:	08020fd1 	.word	0x08020fd1

080253f4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 80253f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253f8:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	@ 0x38
 80253fc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8025400:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8025404:	f1b8 0f00 	cmp.w	r8, #0
 8025408:	fb08 640e 	mla	r4, r8, lr, r6
 802540c:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8025410:	9001      	str	r0, [sp, #4]
 8025412:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8025416:	eb02 0a04 	add.w	sl, r2, r4
 802541a:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
 802541e:	6808      	ldr	r0, [r1, #0]
 8025420:	f2c0 80dc 	blt.w	80255dc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8025424:	45c3      	cmp	fp, r8
 8025426:	f340 80d9 	ble.w	80255dc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 802542a:	2e00      	cmp	r6, #0
 802542c:	f2c0 80d4 	blt.w	80255d8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8025430:	45b6      	cmp	lr, r6
 8025432:	f340 80d1 	ble.w	80255d8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8025436:	5d12      	ldrb	r2, [r2, r4]
 8025438:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802543c:	ea4f 222c 	mov.w	r2, ip, asr #8
 8025440:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8025444:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025448:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802544c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8025450:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 8025454:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 8025458:	fa5f fc8c 	uxtb.w	ip, ip
 802545c:	0212      	lsls	r2, r2, #8
 802545e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025462:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8025466:	ea42 020c 	orr.w	r2, r2, ip
 802546a:	1c74      	adds	r4, r6, #1
 802546c:	f100 80b7 	bmi.w	80255de <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8025470:	45a6      	cmp	lr, r4
 8025472:	f340 80b4 	ble.w	80255de <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8025476:	2d00      	cmp	r5, #0
 8025478:	f000 80b1 	beq.w	80255de <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 802547c:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8025480:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8025484:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8025488:	ea4f 292c 	mov.w	r9, ip, asr #8
 802548c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8025490:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025494:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8025498:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802549c:	fa5f fc8c 	uxtb.w	ip, ip
 80254a0:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 80254a4:	0224      	lsls	r4, r4, #8
 80254a6:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80254aa:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80254ae:	ea49 090c 	orr.w	r9, r9, ip
 80254b2:	f118 0801 	adds.w	r8, r8, #1
 80254b6:	f100 8096 	bmi.w	80255e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80254ba:	45c3      	cmp	fp, r8
 80254bc:	f340 8093 	ble.w	80255e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80254c0:	9c01      	ldr	r4, [sp, #4]
 80254c2:	2c00      	cmp	r4, #0
 80254c4:	f000 808f 	beq.w	80255e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80254c8:	2e00      	cmp	r6, #0
 80254ca:	f2c0 808a 	blt.w	80255e2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80254ce:	45b6      	cmp	lr, r6
 80254d0:	f340 8087 	ble.w	80255e2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80254d4:	f81a 400e 	ldrb.w	r4, [sl, lr]
 80254d8:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 80254dc:	ea4f 2824 	mov.w	r8, r4, asr #8
 80254e0:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80254e4:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80254e8:	00e4      	lsls	r4, r4, #3
 80254ea:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80254ee:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 80254f2:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 80254f6:	b2e4      	uxtb	r4, r4
 80254f8:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80254fc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025500:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 8025504:	ea48 0804 	orr.w	r8, r8, r4
 8025508:	3601      	adds	r6, #1
 802550a:	d419      	bmi.n	8025540 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 802550c:	45b6      	cmp	lr, r6
 802550e:	dd17      	ble.n	8025540 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8025510:	b1b5      	cbz	r5, 8025540 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8025512:	44d6      	add	lr, sl
 8025514:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025518:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 802551c:	10dc      	asrs	r4, r3, #3
 802551e:	1218      	asrs	r0, r3, #8
 8025520:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8025524:	00db      	lsls	r3, r3, #3
 8025526:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802552a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802552e:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 8025532:	b2db      	uxtb	r3, r3
 8025534:	0220      	lsls	r0, r4, #8
 8025536:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802553a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802553e:	4318      	orrs	r0, r3
 8025540:	b2ad      	uxth	r5, r5
 8025542:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8025546:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 802554a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802554e:	fb05 fa03 	mul.w	sl, r5, r3
 8025552:	012d      	lsls	r5, r5, #4
 8025554:	2fff      	cmp	r7, #255	@ 0xff
 8025556:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 802555a:	f5c5 7b80 	rsb	fp, r5, #256	@ 0x100
 802555e:	eba5 050a 	sub.w	r5, r5, sl
 8025562:	fa1f fe83 	uxth.w	lr, r3
 8025566:	f009 13ff 	and.w	r3, r9, #16711935	@ 0xff00ff
 802556a:	b2ad      	uxth	r5, r5
 802556c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025570:	ebab 0b0e 	sub.w	fp, fp, lr
 8025574:	fb05 f303 	mul.w	r3, r5, r3
 8025578:	fa1f fb8b 	uxth.w	fp, fp
 802557c:	fb05 f509 	mul.w	r5, r5, r9
 8025580:	fb0b 3606 	mla	r6, fp, r6, r3
 8025584:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8025588:	fb0b 5502 	mla	r5, fp, r2, r5
 802558c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025590:	fb0a 6603 	mla	r6, sl, r3, r6
 8025594:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
 8025598:	fb0a 5000 	mla	r0, sl, r0, r5
 802559c:	fb0e 6303 	mla	r3, lr, r3, r6
 80255a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80255a4:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80255a8:	f408 437f 	and.w	r3, r8, #65280	@ 0xff00
 80255ac:	fb0e 0303 	mla	r3, lr, r3, r0
 80255b0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80255b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80255b8:	ea43 0306 	orr.w	r3, r3, r6
 80255bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80255c0:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80255c4:	b2d4      	uxtb	r4, r2
 80255c6:	b2c5      	uxtb	r5, r0
 80255c8:	d10f      	bne.n	80255ea <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 80255ca:	700b      	strb	r3, [r1, #0]
 80255cc:	7048      	strb	r0, [r1, #1]
 80255ce:	708a      	strb	r2, [r1, #2]
 80255d0:	70cf      	strb	r7, [r1, #3]
 80255d2:	b003      	add	sp, #12
 80255d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255d8:	4602      	mov	r2, r0
 80255da:	e746      	b.n	802546a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 80255dc:	4602      	mov	r2, r0
 80255de:	4681      	mov	r9, r0
 80255e0:	e767      	b.n	80254b2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 80255e2:	4680      	mov	r8, r0
 80255e4:	e790      	b.n	8025508 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 80255e6:	4680      	mov	r8, r0
 80255e8:	e7aa      	b.n	8025540 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80255ea:	2f00      	cmp	r7, #0
 80255ec:	d0f1      	beq.n	80255d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 80255ee:	78ce      	ldrb	r6, [r1, #3]
 80255f0:	b2db      	uxtb	r3, r3
 80255f2:	fb17 f505 	smulbb	r5, r7, r5
 80255f6:	fb07 f206 	mul.w	r2, r7, r6
 80255fa:	1c50      	adds	r0, r2, #1
 80255fc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025600:	19ba      	adds	r2, r7, r6
 8025602:	1200      	asrs	r0, r0, #8
 8025604:	1a12      	subs	r2, r2, r0
 8025606:	1a30      	subs	r0, r6, r0
 8025608:	780e      	ldrb	r6, [r1, #0]
 802560a:	b2d2      	uxtb	r2, r2
 802560c:	4346      	muls	r6, r0
 802560e:	70ca      	strb	r2, [r1, #3]
 8025610:	fb07 6303 	mla	r3, r7, r3, r6
 8025614:	fb17 f704 	smulbb	r7, r7, r4
 8025618:	fb93 f3f2 	sdiv	r3, r3, r2
 802561c:	700b      	strb	r3, [r1, #0]
 802561e:	784b      	ldrb	r3, [r1, #1]
 8025620:	fb00 5303 	mla	r3, r0, r3, r5
 8025624:	fb93 f3f2 	sdiv	r3, r3, r2
 8025628:	704b      	strb	r3, [r1, #1]
 802562a:	788b      	ldrb	r3, [r1, #2]
 802562c:	fb00 7703 	mla	r7, r0, r3, r7
 8025630:	fb97 f7f2 	sdiv	r7, r7, r2
 8025634:	708f      	strb	r7, [r1, #2]
 8025636:	e7cc      	b.n	80255d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

08025638 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802563c:	b097      	sub	sp, #92	@ 0x5c
 802563e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025642:	9213      	str	r2, [sp, #76]	@ 0x4c
 8025644:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8025646:	9014      	str	r0, [sp, #80]	@ 0x50
 8025648:	910c      	str	r1, [sp, #48]	@ 0x30
 802564a:	6850      	ldr	r0, [r2, #4]
 802564c:	9309      	str	r3, [sp, #36]	@ 0x24
 802564e:	6812      	ldr	r2, [r2, #0]
 8025650:	f89d 40a4 	ldrb.w	r4, [sp, #164]	@ 0xa4
 8025654:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8025658:	e9dd a621 	ldrd	sl, r6, [sp, #132]	@ 0x84
 802565c:	fb00 1303 	mla	r3, r0, r3, r1
 8025660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025664:	930a      	str	r3, [sp, #40]	@ 0x28
 8025666:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025668:	681b      	ldr	r3, [r3, #0]
 802566a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802566c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802566e:	685f      	ldr	r7, [r3, #4]
 8025670:	3704      	adds	r7, #4
 8025672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025674:	2b00      	cmp	r3, #0
 8025676:	dc03      	bgt.n	8025680 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025678:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802567a:	2b00      	cmp	r3, #0
 802567c:	f340 826a 	ble.w	8025b54 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8025680:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025682:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025686:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802568a:	1e48      	subs	r0, r1, #1
 802568c:	f102 3cff 	add.w	ip, r2, #4294967295
 8025690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025692:	2b00      	cmp	r3, #0
 8025694:	f340 80ce 	ble.w	8025834 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025698:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 802569c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80256a0:	d406      	bmi.n	80256b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80256a2:	4586      	cmp	lr, r0
 80256a4:	da04      	bge.n	80256b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80256a6:	2b00      	cmp	r3, #0
 80256a8:	db02      	blt.n	80256b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80256aa:	4563      	cmp	r3, ip
 80256ac:	f2c0 80c3 	blt.w	8025836 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80256b0:	f11e 0e01 	adds.w	lr, lr, #1
 80256b4:	f100 80b3 	bmi.w	802581e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80256b8:	4571      	cmp	r1, lr
 80256ba:	f2c0 80b0 	blt.w	802581e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80256be:	3301      	adds	r3, #1
 80256c0:	f100 80ad 	bmi.w	802581e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80256c4:	429a      	cmp	r2, r3
 80256c6:	f2c0 80aa 	blt.w	802581e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80256ca:	e9dd b809 	ldrd	fp, r8, [sp, #36]	@ 0x24
 80256ce:	f1bb 0f00 	cmp.w	fp, #0
 80256d2:	f340 80ce 	ble.w	8025872 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80256d6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80256d8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80256dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80256de:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80256e2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80256e6:	ea5f 422a 	movs.w	r2, sl, asr #16
 80256ea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80256ee:	689b      	ldr	r3, [r3, #8]
 80256f0:	f100 8141 	bmi.w	8025976 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80256f4:	f103 39ff 	add.w	r9, r3, #4294967295
 80256f8:	454a      	cmp	r2, r9
 80256fa:	f280 813c 	bge.w	8025976 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80256fe:	f1bc 0f00 	cmp.w	ip, #0
 8025702:	f2c0 8138 	blt.w	8025976 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025706:	f10e 39ff 	add.w	r9, lr, #4294967295
 802570a:	45cc      	cmp	ip, r9
 802570c:	f280 8133 	bge.w	8025976 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025710:	b21b      	sxth	r3, r3
 8025712:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025714:	fb0c 2203 	mla	r2, ip, r3, r2
 8025718:	eb05 0902 	add.w	r9, r5, r2
 802571c:	5caa      	ldrb	r2, [r5, r2]
 802571e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8025722:	2800      	cmp	r0, #0
 8025724:	f000 80e9 	beq.w	80258fa <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8025728:	f899 2001 	ldrb.w	r2, [r9, #1]
 802572c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025730:	920f      	str	r2, [sp, #60]	@ 0x3c
 8025732:	b151      	cbz	r1, 802574a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025734:	eb09 0203 	add.w	r2, r9, r3
 8025738:	f819 3003 	ldrb.w	r3, [r9, r3]
 802573c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025740:	930d      	str	r3, [sp, #52]	@ 0x34
 8025742:	7853      	ldrb	r3, [r2, #1]
 8025744:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025748:	9310      	str	r3, [sp, #64]	@ 0x40
 802574a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802574c:	fb10 f201 	smulbb	r2, r0, r1
 8025750:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8025752:	2cff      	cmp	r4, #255	@ 0xff
 8025754:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025758:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802575c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025760:	ea4f 02e2 	mov.w	r2, r2, asr #3
 8025764:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025768:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802576c:	ea4c 0c03 	orr.w	ip, ip, r3
 8025770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025772:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8025776:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802577a:	ea43 0305 	orr.w	r3, r3, r5
 802577e:	fb02 f303 	mul.w	r3, r2, r3
 8025782:	fb09 330c 	mla	r3, r9, ip, r3
 8025786:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802578a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802578e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025792:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025796:	f1c1 0c10 	rsb	ip, r1, #16
 802579a:	ebac 0c00 	sub.w	ip, ip, r0
 802579e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80257a2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80257a6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80257aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80257ac:	ea4f 4003 	mov.w	r0, r3, lsl #16
 80257b0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80257b4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80257b8:	ea40 0003 	orr.w	r0, r0, r3
 80257bc:	fb02 c200 	mla	r2, r2, r0, ip
 80257c0:	ea4f 5352 	mov.w	r3, r2, lsr #21
 80257c4:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80257c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80257cc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80257d0:	ea42 0203 	orr.w	r2, r2, r3
 80257d4:	b293      	uxth	r3, r2
 80257d6:	ea4f 2223 	mov.w	r2, r3, asr #8
 80257da:	ea4f 01e3 	mov.w	r1, r3, asr #3
 80257de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80257e2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80257e6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80257ea:	b2db      	uxtb	r3, r3
 80257ec:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80257f0:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80257f4:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80257f8:	f040 8088 	bne.w	802590c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80257fc:	f888 3000 	strb.w	r3, [r8]
 8025800:	f888 1001 	strb.w	r1, [r8, #1]
 8025804:	f888 2002 	strb.w	r2, [r8, #2]
 8025808:	f888 4003 	strb.w	r4, [r8, #3]
 802580c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802580e:	f108 0804 	add.w	r8, r8, #4
 8025812:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025816:	449a      	add	sl, r3
 8025818:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802581a:	441e      	add	r6, r3
 802581c:	e757      	b.n	80256ce <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802581e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025820:	449a      	add	sl, r3
 8025822:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025824:	441e      	add	r6, r3
 8025826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025828:	3b01      	subs	r3, #1
 802582a:	9309      	str	r3, [sp, #36]	@ 0x24
 802582c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802582e:	3304      	adds	r3, #4
 8025830:	930a      	str	r3, [sp, #40]	@ 0x28
 8025832:	e72d      	b.n	8025690 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025834:	d024      	beq.n	8025880 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025838:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802583a:	3b01      	subs	r3, #1
 802583c:	fb00 a003 	mla	r0, r0, r3, sl
 8025840:	1400      	asrs	r0, r0, #16
 8025842:	f53f af42 	bmi.w	80256ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025846:	3901      	subs	r1, #1
 8025848:	4288      	cmp	r0, r1
 802584a:	f6bf af3e 	bge.w	80256ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802584e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8025850:	fb01 6303 	mla	r3, r1, r3, r6
 8025854:	141b      	asrs	r3, r3, #16
 8025856:	f53f af38 	bmi.w	80256ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802585a:	3a01      	subs	r2, #1
 802585c:	4293      	cmp	r3, r2
 802585e:	f6bf af34 	bge.w	80256ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025864:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8025868:	3304      	adds	r3, #4
 802586a:	f1b9 0f00 	cmp.w	r9, #0
 802586e:	f300 80a1 	bgt.w	80259b4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025874:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802587a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802587e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025882:	2b00      	cmp	r3, #0
 8025884:	f340 8166 	ble.w	8025b54 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8025888:	ee30 0a04 	vadd.f32	s0, s0, s8
 802588c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802588e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025892:	eeb0 6a62 	vmov.f32	s12, s5
 8025896:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802589a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802589e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80258a2:	ee16 aa10 	vmov	sl, s12
 80258a6:	eeb0 6a43 	vmov.f32	s12, s6
 80258aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80258ae:	ee16 6a10 	vmov	r6, s12
 80258b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80258b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80258ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80258be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80258c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80258c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80258ca:	ee12 2a90 	vmov	r2, s5
 80258ce:	eef0 2a47 	vmov.f32	s5, s14
 80258d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80258d6:	ee13 2a10 	vmov	r2, s6
 80258da:	9323      	str	r3, [sp, #140]	@ 0x8c
 80258dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80258de:	eeb0 3a67 	vmov.f32	s6, s15
 80258e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80258e6:	9324      	str	r3, [sp, #144]	@ 0x90
 80258e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80258ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80258ec:	3b01      	subs	r3, #1
 80258ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80258f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80258f2:	bf08      	it	eq
 80258f4:	4613      	moveq	r3, r2
 80258f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80258f8:	e6bb      	b.n	8025672 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80258fa:	2900      	cmp	r1, #0
 80258fc:	f43f af25 	beq.w	802574a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025900:	f819 3003 	ldrb.w	r3, [r9, r3]
 8025904:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025908:	930d      	str	r3, [sp, #52]	@ 0x34
 802590a:	e71e      	b.n	802574a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802590c:	2c00      	cmp	r4, #0
 802590e:	f43f af7d 	beq.w	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025912:	f898 e003 	ldrb.w	lr, [r8, #3]
 8025916:	fb13 f304 	smulbb	r3, r3, r4
 802591a:	fb14 f101 	smulbb	r1, r4, r1
 802591e:	fb14 f202 	smulbb	r2, r4, r2
 8025922:	fb04 fc0e 	mul.w	ip, r4, lr
 8025926:	f10c 0001 	add.w	r0, ip, #1
 802592a:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802592e:	eb04 0c0e 	add.w	ip, r4, lr
 8025932:	1200      	asrs	r0, r0, #8
 8025934:	ebac 0c00 	sub.w	ip, ip, r0
 8025938:	ebae 0000 	sub.w	r0, lr, r0
 802593c:	f898 e000 	ldrb.w	lr, [r8]
 8025940:	fa5f fc8c 	uxtb.w	ip, ip
 8025944:	fb00 330e 	mla	r3, r0, lr, r3
 8025948:	f888 c003 	strb.w	ip, [r8, #3]
 802594c:	fb93 f3fc 	sdiv	r3, r3, ip
 8025950:	f888 3000 	strb.w	r3, [r8]
 8025954:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025958:	fb00 1103 	mla	r1, r0, r3, r1
 802595c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8025960:	fb00 2003 	mla	r0, r0, r3, r2
 8025964:	fb91 f1fc 	sdiv	r1, r1, ip
 8025968:	fb90 f0fc 	sdiv	r0, r0, ip
 802596c:	f888 1001 	strb.w	r1, [r8, #1]
 8025970:	f888 0002 	strb.w	r0, [r8, #2]
 8025974:	e74a      	b.n	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025976:	f112 0901 	adds.w	r9, r2, #1
 802597a:	f53f af47 	bmi.w	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802597e:	454b      	cmp	r3, r9
 8025980:	f6ff af44 	blt.w	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025984:	f11c 0901 	adds.w	r9, ip, #1
 8025988:	f53f af40 	bmi.w	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802598c:	45ce      	cmp	lr, r9
 802598e:	f6ff af3d 	blt.w	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025992:	9202      	str	r2, [sp, #8]
 8025994:	b21b      	sxth	r3, r3
 8025996:	fa0f f28e 	sxth.w	r2, lr
 802599a:	9300      	str	r3, [sp, #0]
 802599c:	463b      	mov	r3, r7
 802599e:	9201      	str	r2, [sp, #4]
 80259a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80259a2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80259a6:	e9cd c003 	strd	ip, r0, [sp, #12]
 80259aa:	4641      	mov	r1, r8
 80259ac:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80259ae:	f7ff fd21 	bl	80253f4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 80259b2:	e72b      	b.n	802580c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80259b4:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80259b6:	ea4f 412a 	mov.w	r1, sl, asr #16
 80259ba:	1430      	asrs	r0, r6, #16
 80259bc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80259be:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80259c2:	f3ca 3803 	ubfx	r8, sl, #12, #4
 80259c6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80259ca:	fb02 1000 	mla	r0, r2, r0, r1
 80259ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80259d0:	4401      	add	r1, r0
 80259d2:	5c28      	ldrb	r0, [r5, r0]
 80259d4:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 80259d8:	f1b8 0f00 	cmp.w	r8, #0
 80259dc:	d07d      	beq.n	8025ada <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 80259de:	f891 e001 	ldrb.w	lr, [r1, #1]
 80259e2:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 80259e6:	9511      	str	r5, [sp, #68]	@ 0x44
 80259e8:	f1bc 0f00 	cmp.w	ip, #0
 80259ec:	d00a      	beq.n	8025a04 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80259ee:	eb01 0e02 	add.w	lr, r1, r2
 80259f2:	5c8a      	ldrb	r2, [r1, r2]
 80259f4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80259f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80259fa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80259fe:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025a02:	9212      	str	r2, [sp, #72]	@ 0x48
 8025a04:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025a06:	fb18 f10c 	smulbb	r1, r8, ip
 8025a0a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8025a0c:	2cff      	cmp	r4, #255	@ 0xff
 8025a0e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8025a12:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025a16:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8025a1a:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8025a1e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025a22:	ea4e 0e02 	orr.w	lr, lr, r2
 8025a26:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8025a2a:	9215      	str	r2, [sp, #84]	@ 0x54
 8025a2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025a2e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8025a30:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025a34:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025a38:	ea42 020b 	orr.w	r2, r2, fp
 8025a3c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025a40:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025a44:	fb01 f202 	mul.w	r2, r1, r2
 8025a48:	fb05 2e0e 	mla	lr, r5, lr, r2
 8025a4c:	f00b 62fc 	and.w	r2, fp, #132120576	@ 0x7e00000
 8025a50:	ea42 0b00 	orr.w	fp, r2, r0
 8025a54:	f1cc 0010 	rsb	r0, ip, #16
 8025a58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025a5a:	eba0 0808 	sub.w	r8, r0, r8
 8025a5e:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8025a62:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8025a66:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025a6a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025a6e:	f422 68fc 	bic.w	r8, r2, #2016	@ 0x7e0
 8025a72:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025a76:	ea4b 0808 	orr.w	r8, fp, r8
 8025a7a:	fb01 ee08 	mla	lr, r1, r8, lr
 8025a7e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025a82:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025a86:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025a8a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025a8e:	ea42 0e0e 	orr.w	lr, r2, lr
 8025a92:	fa1f f28e 	uxth.w	r2, lr
 8025a96:	ea4f 2122 	mov.w	r1, r2, asr #8
 8025a9a:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8025a9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025aa2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025aa6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025aaa:	b2d2      	uxtb	r2, r2
 8025aac:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025ab0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025ab4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025ab8:	d117      	bne.n	8025aea <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8025aba:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025abe:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025ac2:	f803 1c02 	strb.w	r1, [r3, #-2]
 8025ac6:	f803 4c01 	strb.w	r4, [r3, #-1]
 8025aca:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025acc:	3304      	adds	r3, #4
 8025ace:	f109 39ff 	add.w	r9, r9, #4294967295
 8025ad2:	4492      	add	sl, r2
 8025ad4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025ad6:	4416      	add	r6, r2
 8025ad8:	e6c7      	b.n	802586a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025ada:	f1bc 0f00 	cmp.w	ip, #0
 8025ade:	d091      	beq.n	8025a04 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025ae0:	5c8a      	ldrb	r2, [r1, r2]
 8025ae2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025ae6:	920e      	str	r2, [sp, #56]	@ 0x38
 8025ae8:	e78c      	b.n	8025a04 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025aea:	2c00      	cmp	r4, #0
 8025aec:	d0ed      	beq.n	8025aca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8025aee:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8025af2:	fb12 f204 	smulbb	r2, r2, r4
 8025af6:	fb14 f000 	smulbb	r0, r4, r0
 8025afa:	fb14 f101 	smulbb	r1, r4, r1
 8025afe:	fb04 fc08 	mul.w	ip, r4, r8
 8025b02:	f10c 0e01 	add.w	lr, ip, #1
 8025b06:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8025b0a:	eb04 0c08 	add.w	ip, r4, r8
 8025b0e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025b12:	ebac 0c0e 	sub.w	ip, ip, lr
 8025b16:	eba8 0e0e 	sub.w	lr, r8, lr
 8025b1a:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8025b1e:	fa5f fc8c 	uxtb.w	ip, ip
 8025b22:	fb0e 2208 	mla	r2, lr, r8, r2
 8025b26:	f803 cc01 	strb.w	ip, [r3, #-1]
 8025b2a:	fb92 f2fc 	sdiv	r2, r2, ip
 8025b2e:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025b32:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8025b36:	fb0e 0002 	mla	r0, lr, r2, r0
 8025b3a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8025b3e:	fb0e 1e02 	mla	lr, lr, r2, r1
 8025b42:	fb90 f0fc 	sdiv	r0, r0, ip
 8025b46:	fb9e fefc 	sdiv	lr, lr, ip
 8025b4a:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025b4e:	f803 ec02 	strb.w	lr, [r3, #-2]
 8025b52:	e7ba      	b.n	8025aca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8025b54:	b017      	add	sp, #92	@ 0x5c
 8025b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025b5a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 8025b5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b5e:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	@ 0x2c
 8025b62:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8025b66:	f1be 0f00 	cmp.w	lr, #0
 8025b6a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8025b6e:	fb0e 7409 	mla	r4, lr, r9, r7
 8025b72:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8025b76:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8025b7a:	eb02 0a04 	add.w	sl, r2, r4
 8025b7e:	6808      	ldr	r0, [r1, #0]
 8025b80:	f2c0 80c5 	blt.w	8025d0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8025b84:	45f0      	cmp	r8, lr
 8025b86:	f340 80c2 	ble.w	8025d0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8025b8a:	2f00      	cmp	r7, #0
 8025b8c:	f2c0 80bd 	blt.w	8025d0a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8025b90:	45b9      	cmp	r9, r7
 8025b92:	f340 80ba 	ble.w	8025d0a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8025b96:	5d12      	ldrb	r2, [r2, r4]
 8025b98:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8025b9c:	122c      	asrs	r4, r5, #8
 8025b9e:	10ea      	asrs	r2, r5, #3
 8025ba0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8025ba4:	00ed      	lsls	r5, r5, #3
 8025ba6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025baa:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8025bae:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8025bb2:	b2ed      	uxtb	r5, r5
 8025bb4:	0224      	lsls	r4, r4, #8
 8025bb6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8025bba:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8025bbe:	432c      	orrs	r4, r5
 8025bc0:	1c7a      	adds	r2, r7, #1
 8025bc2:	f100 80a7 	bmi.w	8025d14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025bc6:	4591      	cmp	r9, r2
 8025bc8:	f340 80a4 	ble.w	8025d14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025bcc:	2e00      	cmp	r6, #0
 8025bce:	f000 80a1 	beq.w	8025d14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025bd2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025bd6:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 8025bda:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8025bde:	ea4f 252b 	mov.w	r5, fp, asr #8
 8025be2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025be6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8025bea:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025bee:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025bf2:	fa5f fb8b 	uxtb.w	fp, fp
 8025bf6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8025bfa:	0212      	lsls	r2, r2, #8
 8025bfc:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8025c00:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8025c04:	ea45 050b 	orr.w	r5, r5, fp
 8025c08:	f11e 0e01 	adds.w	lr, lr, #1
 8025c0c:	f100 8086 	bmi.w	8025d1c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025c10:	45f0      	cmp	r8, lr
 8025c12:	f340 8083 	ble.w	8025d1c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025c16:	f1bc 0f00 	cmp.w	ip, #0
 8025c1a:	d07f      	beq.n	8025d1c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025c1c:	2f00      	cmp	r7, #0
 8025c1e:	db7b      	blt.n	8025d18 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8025c20:	45b9      	cmp	r9, r7
 8025c22:	dd79      	ble.n	8025d18 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8025c24:	f81a 2009 	ldrb.w	r2, [sl, r9]
 8025c28:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8025c2c:	ea4f 222e 	mov.w	r2, lr, asr #8
 8025c30:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8025c34:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025c38:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025c3c:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8025c40:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8025c44:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 8025c48:	fa5f fe8e 	uxtb.w	lr, lr
 8025c4c:	0212      	lsls	r2, r2, #8
 8025c4e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8025c52:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8025c56:	ea42 020e 	orr.w	r2, r2, lr
 8025c5a:	3701      	adds	r7, #1
 8025c5c:	d419      	bmi.n	8025c92 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8025c5e:	45b9      	cmp	r9, r7
 8025c60:	dd17      	ble.n	8025c92 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8025c62:	b1b6      	cbz	r6, 8025c92 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8025c64:	44d1      	add	r9, sl
 8025c66:	f899 0001 	ldrb.w	r0, [r9, #1]
 8025c6a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8025c6e:	10df      	asrs	r7, r3, #3
 8025c70:	1218      	asrs	r0, r3, #8
 8025c72:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025c76:	00db      	lsls	r3, r3, #3
 8025c78:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025c7c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8025c80:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8025c84:	b2db      	uxtb	r3, r3
 8025c86:	0238      	lsls	r0, r7, #8
 8025c88:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025c8c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8025c90:	4318      	orrs	r0, r3
 8025c92:	b2b6      	uxth	r6, r6
 8025c94:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 8025c98:	fa1f f78c 	uxth.w	r7, ip
 8025c9c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025ca0:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8025ca4:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025ca8:	fb06 fc07 	mul.w	ip, r6, r7
 8025cac:	0136      	lsls	r6, r6, #4
 8025cae:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8025cb2:	f5c6 7e80 	rsb	lr, r6, #256	@ 0x100
 8025cb6:	eba6 060c 	sub.w	r6, r6, ip
 8025cba:	b2bf      	uxth	r7, r7
 8025cbc:	b2b6      	uxth	r6, r6
 8025cbe:	ebae 0e07 	sub.w	lr, lr, r7
 8025cc2:	4373      	muls	r3, r6
 8025cc4:	fa1f fe8e 	uxth.w	lr, lr
 8025cc8:	4375      	muls	r5, r6
 8025cca:	fb0e 3808 	mla	r8, lr, r8, r3
 8025cce:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8025cd2:	fb0e 5404 	mla	r4, lr, r4, r5
 8025cd6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025cda:	fb0c 8803 	mla	r8, ip, r3, r8
 8025cde:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8025ce2:	fb0c 4000 	mla	r0, ip, r0, r4
 8025ce6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025cea:	fb07 8303 	mla	r3, r7, r3, r8
 8025cee:	fb07 0002 	mla	r0, r7, r2, r0
 8025cf2:	0a1b      	lsrs	r3, r3, #8
 8025cf4:	0a00      	lsrs	r0, r0, #8
 8025cf6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025cfa:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025cfe:	4318      	orrs	r0, r3
 8025d00:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8025d04:	6008      	str	r0, [r1, #0]
 8025d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d0a:	4604      	mov	r4, r0
 8025d0c:	e758      	b.n	8025bc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 8025d0e:	4605      	mov	r5, r0
 8025d10:	4604      	mov	r4, r0
 8025d12:	e779      	b.n	8025c08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8025d14:	4605      	mov	r5, r0
 8025d16:	e777      	b.n	8025c08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8025d18:	4602      	mov	r2, r0
 8025d1a:	e79e      	b.n	8025c5a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 8025d1c:	4602      	mov	r2, r0
 8025d1e:	e7b8      	b.n	8025c92 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08025d20 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d24:	b093      	sub	sp, #76	@ 0x4c
 8025d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025d2a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8025d2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025d2e:	9010      	str	r0, [sp, #64]	@ 0x40
 8025d30:	9108      	str	r1, [sp, #32]
 8025d32:	6850      	ldr	r0, [r2, #4]
 8025d34:	9306      	str	r3, [sp, #24]
 8025d36:	6812      	ldr	r2, [r2, #0]
 8025d38:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8025d3c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8025d40:	fb00 1303 	mla	r3, r0, r3, r1
 8025d44:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8025d48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d4a:	681b      	ldr	r3, [r3, #0]
 8025d4c:	9307      	str	r3, [sp, #28]
 8025d4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d50:	685f      	ldr	r7, [r3, #4]
 8025d52:	3704      	adds	r7, #4
 8025d54:	9b08      	ldr	r3, [sp, #32]
 8025d56:	2b00      	cmp	r3, #0
 8025d58:	dc03      	bgt.n	8025d62 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8025d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	f340 81d9 	ble.w	8026114 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025d62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d6c:	1e48      	subs	r0, r1, #1
 8025d6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025d72:	9b06      	ldr	r3, [sp, #24]
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	f340 80bc 	ble.w	8025ef2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025d7a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025d7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025d82:	d406      	bmi.n	8025d92 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025d84:	4586      	cmp	lr, r0
 8025d86:	da04      	bge.n	8025d92 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	db02      	blt.n	8025d92 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025d8c:	4563      	cmp	r3, ip
 8025d8e:	f2c0 80b1 	blt.w	8025ef4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d92:	f11e 0e01 	adds.w	lr, lr, #1
 8025d96:	f100 80a2 	bmi.w	8025ede <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025d9a:	4571      	cmp	r1, lr
 8025d9c:	f2c0 809f 	blt.w	8025ede <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025da0:	3301      	adds	r3, #1
 8025da2:	f100 809c 	bmi.w	8025ede <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025da6:	429a      	cmp	r2, r3
 8025da8:	f2c0 8099 	blt.w	8025ede <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025dac:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025db0:	46c8      	mov	r8, r9
 8025db2:	f1bb 0f00 	cmp.w	fp, #0
 8025db6:	f340 80b9 	ble.w	8025f2c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025dba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025dbc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025dc0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025dc2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025dc6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025dca:	1422      	asrs	r2, r4, #16
 8025dcc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025dd0:	689b      	ldr	r3, [r3, #8]
 8025dd2:	f100 80f6 	bmi.w	8025fc2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025dd6:	f103 3aff 	add.w	sl, r3, #4294967295
 8025dda:	4552      	cmp	r2, sl
 8025ddc:	f280 80f1 	bge.w	8025fc2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025de0:	f1bc 0f00 	cmp.w	ip, #0
 8025de4:	f2c0 80ed 	blt.w	8025fc2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025de8:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025dec:	45d4      	cmp	ip, sl
 8025dee:	f280 80e8 	bge.w	8025fc2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025df2:	b21b      	sxth	r3, r3
 8025df4:	9d07      	ldr	r5, [sp, #28]
 8025df6:	fb0c 2203 	mla	r2, ip, r3, r2
 8025dfa:	eb05 0a02 	add.w	sl, r5, r2
 8025dfe:	5caa      	ldrb	r2, [r5, r2]
 8025e00:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8025e04:	2800      	cmp	r0, #0
 8025e06:	f000 80d3 	beq.w	8025fb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025e0a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025e0e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025e12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025e14:	b151      	cbz	r1, 8025e2c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025e16:	eb0a 0203 	add.w	r2, sl, r3
 8025e1a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025e1e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e24:	7853      	ldrb	r3, [r2, #1]
 8025e26:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025e2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025e2e:	fb10 f201 	smulbb	r2, r0, r1
 8025e32:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025e34:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025e38:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025e3c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025e40:	10d2      	asrs	r2, r2, #3
 8025e42:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025e46:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8025e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8025e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e50:	041b      	lsls	r3, r3, #16
 8025e52:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025e56:	432b      	orrs	r3, r5
 8025e58:	4353      	muls	r3, r2
 8025e5a:	fb0a 330c 	mla	r3, sl, ip, r3
 8025e5e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025e62:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025e66:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025e6a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025e6e:	f1c1 0c10 	rsb	ip, r1, #16
 8025e72:	ebac 0c00 	sub.w	ip, ip, r0
 8025e76:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025e7a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025e7e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e84:	0418      	lsls	r0, r3, #16
 8025e86:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025e8a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025e8e:	4318      	orrs	r0, r3
 8025e90:	fb02 c200 	mla	r2, r2, r0, ip
 8025e94:	0d51      	lsrs	r1, r2, #21
 8025e96:	0952      	lsrs	r2, r2, #5
 8025e98:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025e9c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025ea0:	430a      	orrs	r2, r1
 8025ea2:	b291      	uxth	r1, r2
 8025ea4:	10ca      	asrs	r2, r1, #3
 8025ea6:	1208      	asrs	r0, r1, #8
 8025ea8:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 8025eac:	00c9      	lsls	r1, r1, #3
 8025eae:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025eb2:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8025eb6:	b2c9      	uxtb	r1, r1
 8025eb8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025ebc:	021b      	lsls	r3, r3, #8
 8025ebe:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025ec2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8025ec6:	430b      	orrs	r3, r1
 8025ec8:	f8c8 3000 	str.w	r3, [r8]
 8025ecc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025ece:	f108 0804 	add.w	r8, r8, #4
 8025ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025ed6:	441c      	add	r4, r3
 8025ed8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025eda:	441e      	add	r6, r3
 8025edc:	e769      	b.n	8025db2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ede:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025ee0:	f109 0904 	add.w	r9, r9, #4
 8025ee4:	441c      	add	r4, r3
 8025ee6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025ee8:	441e      	add	r6, r3
 8025eea:	9b06      	ldr	r3, [sp, #24]
 8025eec:	3b01      	subs	r3, #1
 8025eee:	9306      	str	r3, [sp, #24]
 8025ef0:	e73f      	b.n	8025d72 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025ef2:	d020      	beq.n	8025f36 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ef4:	9b06      	ldr	r3, [sp, #24]
 8025ef6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025ef8:	3b01      	subs	r3, #1
 8025efa:	fb00 4003 	mla	r0, r0, r3, r4
 8025efe:	1400      	asrs	r0, r0, #16
 8025f00:	f53f af54 	bmi.w	8025dac <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025f04:	3901      	subs	r1, #1
 8025f06:	4288      	cmp	r0, r1
 8025f08:	f6bf af50 	bge.w	8025dac <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025f0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025f0e:	fb01 6303 	mla	r3, r1, r3, r6
 8025f12:	141b      	asrs	r3, r3, #16
 8025f14:	f53f af4a 	bmi.w	8025dac <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025f18:	3a01      	subs	r2, #1
 8025f1a:	4293      	cmp	r3, r2
 8025f1c:	f6bf af46 	bge.w	8025dac <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025f20:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025f24:	46ca      	mov	sl, r9
 8025f26:	f1b8 0f00 	cmp.w	r8, #0
 8025f2a:	dc67      	bgt.n	8025ffc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025f2c:	9b06      	ldr	r3, [sp, #24]
 8025f2e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025f32:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8025f36:	9b08      	ldr	r3, [sp, #32]
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	f340 80eb 	ble.w	8026114 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025f3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f42:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025f48:	eeb0 6a62 	vmov.f32	s12, s5
 8025f4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025f50:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025f54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025f58:	ee16 4a10 	vmov	r4, s12
 8025f5c:	eeb0 6a43 	vmov.f32	s12, s6
 8025f60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025f64:	ee16 6a10 	vmov	r6, s12
 8025f68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025f7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025f80:	ee12 2a90 	vmov	r2, s5
 8025f84:	eef0 2a47 	vmov.f32	s5, s14
 8025f88:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f8c:	ee13 2a10 	vmov	r2, s6
 8025f90:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025f92:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f94:	eeb0 3a67 	vmov.f32	s6, s15
 8025f98:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8025f9e:	9b08      	ldr	r3, [sp, #32]
 8025fa0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025fa2:	3b01      	subs	r3, #1
 8025fa4:	9308      	str	r3, [sp, #32]
 8025fa6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025fa8:	bf08      	it	eq
 8025faa:	4613      	moveq	r3, r2
 8025fac:	9306      	str	r3, [sp, #24]
 8025fae:	e6d1      	b.n	8025d54 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025fb0:	2900      	cmp	r1, #0
 8025fb2:	f43f af3b 	beq.w	8025e2c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025fb6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025fba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8025fc0:	e734      	b.n	8025e2c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025fc2:	f112 0a01 	adds.w	sl, r2, #1
 8025fc6:	d481      	bmi.n	8025ecc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025fc8:	4553      	cmp	r3, sl
 8025fca:	f6ff af7f 	blt.w	8025ecc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025fce:	f11c 0a01 	adds.w	sl, ip, #1
 8025fd2:	f53f af7b 	bmi.w	8025ecc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025fd6:	45d6      	cmp	lr, sl
 8025fd8:	f6ff af78 	blt.w	8025ecc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025fdc:	b21b      	sxth	r3, r3
 8025fde:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8025fe2:	fa0f f28e 	sxth.w	r2, lr
 8025fe6:	9300      	str	r3, [sp, #0]
 8025fe8:	463b      	mov	r3, r7
 8025fea:	9201      	str	r2, [sp, #4]
 8025fec:	9a07      	ldr	r2, [sp, #28]
 8025fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025ff2:	4641      	mov	r1, r8
 8025ff4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025ff6:	f7ff fdb0 	bl	8025b5a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 8025ffa:	e767      	b.n	8025ecc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025ffc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025ffe:	1422      	asrs	r2, r4, #16
 8026000:	1431      	asrs	r1, r6, #16
 8026002:	9d07      	ldr	r5, [sp, #28]
 8026004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026008:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802600c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026010:	fb03 2101 	mla	r1, r3, r1, r2
 8026014:	9a07      	ldr	r2, [sp, #28]
 8026016:	440a      	add	r2, r1
 8026018:	5c69      	ldrb	r1, [r5, r1]
 802601a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802601e:	f1be 0f00 	cmp.w	lr, #0
 8026022:	d070      	beq.n	8026106 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026024:	f892 c001 	ldrb.w	ip, [r2, #1]
 8026028:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802602c:	950d      	str	r5, [sp, #52]	@ 0x34
 802602e:	b150      	cbz	r0, 8026046 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8026030:	eb02 0c03 	add.w	ip, r2, r3
 8026034:	5cd3      	ldrb	r3, [r2, r3]
 8026036:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802603a:	930a      	str	r3, [sp, #40]	@ 0x28
 802603c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026040:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026044:	930e      	str	r3, [sp, #56]	@ 0x38
 8026046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026048:	fb1e f200 	smulbb	r2, lr, r0
 802604c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802604e:	f108 38ff 	add.w	r8, r8, #4294967295
 8026052:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026056:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802605a:	10d2      	asrs	r2, r2, #3
 802605c:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8026060:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026064:	ea4c 0c03 	orr.w	ip, ip, r3
 8026068:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802606c:	9311      	str	r3, [sp, #68]	@ 0x44
 802606e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026070:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026072:	041b      	lsls	r3, r3, #16
 8026074:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026078:	ea43 030b 	orr.w	r3, r3, fp
 802607c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026080:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026084:	4353      	muls	r3, r2
 8026086:	fb05 3c0c 	mla	ip, r5, ip, r3
 802608a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802608e:	ea43 0b01 	orr.w	fp, r3, r1
 8026092:	f1c0 0110 	rsb	r1, r0, #16
 8026096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026098:	eba1 0e0e 	sub.w	lr, r1, lr
 802609c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80260a0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80260a4:	fb0e cc0b 	mla	ip, lr, fp, ip
 80260a8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80260ac:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80260b0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80260b4:	ea4b 0e0e 	orr.w	lr, fp, lr
 80260b8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80260bc:	ea4f 525c 	mov.w	r2, ip, lsr #21
 80260c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80260c4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80260c8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80260cc:	ea42 0c0c 	orr.w	ip, r2, ip
 80260d0:	fa1f f28c 	uxth.w	r2, ip
 80260d4:	10d3      	asrs	r3, r2, #3
 80260d6:	1211      	asrs	r1, r2, #8
 80260d8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80260dc:	00d2      	lsls	r2, r2, #3
 80260de:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80260e2:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80260e6:	b2d2      	uxtb	r2, r2
 80260e8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80260ec:	021b      	lsls	r3, r3, #8
 80260ee:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80260f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80260f6:	431a      	orrs	r2, r3
 80260f8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80260fa:	441c      	add	r4, r3
 80260fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80260fe:	f84a 2b04 	str.w	r2, [sl], #4
 8026102:	441e      	add	r6, r3
 8026104:	e70f      	b.n	8025f26 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026106:	2800      	cmp	r0, #0
 8026108:	d09d      	beq.n	8026046 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802610a:	5cd3      	ldrb	r3, [r2, r3]
 802610c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026110:	930a      	str	r3, [sp, #40]	@ 0x28
 8026112:	e798      	b.n	8026046 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8026114:	b013      	add	sp, #76	@ 0x4c
 8026116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802611a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 802611a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802611e:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	@ 0x38
 8026122:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8026126:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 802612a:	f1b8 0f00 	cmp.w	r8, #0
 802612e:	fb08 750e 	mla	r5, r8, lr, r7
 8026132:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8026136:	9001      	str	r0, [sp, #4]
 8026138:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 802613c:	eb02 0a05 	add.w	sl, r2, r5
 8026140:	f89d c048 	ldrb.w	ip, [sp, #72]	@ 0x48
 8026144:	6808      	ldr	r0, [r1, #0]
 8026146:	f2c0 80b2 	blt.w	80262ae <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 802614a:	45c3      	cmp	fp, r8
 802614c:	f340 80af 	ble.w	80262ae <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 8026150:	2f00      	cmp	r7, #0
 8026152:	f2c0 80aa 	blt.w	80262aa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8026156:	45be      	cmp	lr, r7
 8026158:	f340 80a7 	ble.w	80262aa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 802615c:	5d55      	ldrb	r5, [r2, r5]
 802615e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026162:	195a      	adds	r2, r3, r5
 8026164:	5d5d      	ldrb	r5, [r3, r5]
 8026166:	f892 9001 	ldrb.w	r9, [r2, #1]
 802616a:	7892      	ldrb	r2, [r2, #2]
 802616c:	0412      	lsls	r2, r2, #16
 802616e:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8026172:	432a      	orrs	r2, r5
 8026174:	1c7d      	adds	r5, r7, #1
 8026176:	f100 809b 	bmi.w	80262b0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 802617a:	45ae      	cmp	lr, r5
 802617c:	f340 8098 	ble.w	80262b0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8026180:	2c00      	cmp	r4, #0
 8026182:	f000 8095 	beq.w	80262b0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8026186:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802618a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802618e:	eb03 0509 	add.w	r5, r3, r9
 8026192:	f813 9009 	ldrb.w	r9, [r3, r9]
 8026196:	786e      	ldrb	r6, [r5, #1]
 8026198:	78ad      	ldrb	r5, [r5, #2]
 802619a:	042d      	lsls	r5, r5, #16
 802619c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80261a0:	ea45 0509 	orr.w	r5, r5, r9
 80261a4:	f118 0801 	adds.w	r8, r8, #1
 80261a8:	f100 8086 	bmi.w	80262b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80261ac:	45c3      	cmp	fp, r8
 80261ae:	f340 8083 	ble.w	80262b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80261b2:	9e01      	ldr	r6, [sp, #4]
 80261b4:	2e00      	cmp	r6, #0
 80261b6:	d07f      	beq.n	80262b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80261b8:	2f00      	cmp	r7, #0
 80261ba:	eb0a 090e 	add.w	r9, sl, lr
 80261be:	db79      	blt.n	80262b4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80261c0:	45be      	cmp	lr, r7
 80261c2:	dd77      	ble.n	80262b4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80261c4:	f81a a00e 	ldrb.w	sl, [sl, lr]
 80261c8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80261cc:	eb03 080a 	add.w	r8, r3, sl
 80261d0:	f813 a00a 	ldrb.w	sl, [r3, sl]
 80261d4:	f898 b001 	ldrb.w	fp, [r8, #1]
 80261d8:	f898 8002 	ldrb.w	r8, [r8, #2]
 80261dc:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80261e0:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 80261e4:	ea48 080a 	orr.w	r8, r8, sl
 80261e8:	3701      	adds	r7, #1
 80261ea:	d411      	bmi.n	8026210 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80261ec:	45be      	cmp	lr, r7
 80261ee:	dd0f      	ble.n	8026210 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80261f0:	b174      	cbz	r4, 8026210 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80261f2:	f899 7001 	ldrb.w	r7, [r9, #1]
 80261f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80261fa:	eb03 0e07 	add.w	lr, r3, r7
 80261fe:	5ddb      	ldrb	r3, [r3, r7]
 8026200:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8026204:	f89e 9001 	ldrb.w	r9, [lr, #1]
 8026208:	0400      	lsls	r0, r0, #16
 802620a:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 802620e:	4318      	orrs	r0, r3
 8026210:	b2a4      	uxth	r4, r4
 8026212:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8026216:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 802621a:	f002 17ff 	and.w	r7, r2, #16711935	@ 0xff00ff
 802621e:	fb04 fe06 	mul.w	lr, r4, r6
 8026222:	0124      	lsls	r4, r4, #4
 8026224:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026228:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802622c:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 8026230:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8026234:	eba4 040e 	sub.w	r4, r4, lr
 8026238:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802623c:	b2b6      	uxth	r6, r6
 802623e:	b2a4      	uxth	r4, r4
 8026240:	eba9 0906 	sub.w	r9, r9, r6
 8026244:	fb04 f303 	mul.w	r3, r4, r3
 8026248:	fa1f f989 	uxth.w	r9, r9
 802624c:	fb04 f405 	mul.w	r4, r4, r5
 8026250:	fb09 3707 	mla	r7, r9, r7, r3
 8026254:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8026258:	fb09 4402 	mla	r4, r9, r2, r4
 802625c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026260:	fb0e 7703 	mla	r7, lr, r3, r7
 8026264:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
 8026268:	fb0e 4000 	mla	r0, lr, r0, r4
 802626c:	fb06 7303 	mla	r3, r6, r3, r7
 8026270:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026274:	f003 17ff 	and.w	r7, r3, #16711935	@ 0xff00ff
 8026278:	f408 437f 	and.w	r3, r8, #65280	@ 0xff00
 802627c:	fb06 0303 	mla	r3, r6, r3, r0
 8026280:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026284:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026288:	ea43 0307 	orr.w	r3, r3, r7
 802628c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026290:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026294:	b2d4      	uxtb	r4, r2
 8026296:	b2c5      	uxtb	r5, r0
 8026298:	d110      	bne.n	80262bc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 802629a:	700b      	strb	r3, [r1, #0]
 802629c:	7048      	strb	r0, [r1, #1]
 802629e:	708a      	strb	r2, [r1, #2]
 80262a0:	f881 c003 	strb.w	ip, [r1, #3]
 80262a4:	b003      	add	sp, #12
 80262a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262aa:	4602      	mov	r2, r0
 80262ac:	e762      	b.n	8026174 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 80262ae:	4602      	mov	r2, r0
 80262b0:	4605      	mov	r5, r0
 80262b2:	e777      	b.n	80261a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 80262b4:	4680      	mov	r8, r0
 80262b6:	e797      	b.n	80261e8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 80262b8:	4680      	mov	r8, r0
 80262ba:	e7a9      	b.n	8026210 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80262bc:	f1bc 0f00 	cmp.w	ip, #0
 80262c0:	d0f0      	beq.n	80262a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 80262c2:	78ce      	ldrb	r6, [r1, #3]
 80262c4:	b2db      	uxtb	r3, r3
 80262c6:	fb1c f505 	smulbb	r5, ip, r5
 80262ca:	fb0c f206 	mul.w	r2, ip, r6
 80262ce:	1c50      	adds	r0, r2, #1
 80262d0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80262d4:	eb0c 0206 	add.w	r2, ip, r6
 80262d8:	1200      	asrs	r0, r0, #8
 80262da:	1a12      	subs	r2, r2, r0
 80262dc:	1a30      	subs	r0, r6, r0
 80262de:	780e      	ldrb	r6, [r1, #0]
 80262e0:	b2d2      	uxtb	r2, r2
 80262e2:	4346      	muls	r6, r0
 80262e4:	70ca      	strb	r2, [r1, #3]
 80262e6:	fb0c 6303 	mla	r3, ip, r3, r6
 80262ea:	fb1c fc04 	smulbb	ip, ip, r4
 80262ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80262f2:	700b      	strb	r3, [r1, #0]
 80262f4:	784b      	ldrb	r3, [r1, #1]
 80262f6:	fb00 5303 	mla	r3, r0, r3, r5
 80262fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80262fe:	704b      	strb	r3, [r1, #1]
 8026300:	788b      	ldrb	r3, [r1, #2]
 8026302:	fb00 cc03 	mla	ip, r0, r3, ip
 8026306:	fb9c fcf2 	sdiv	ip, ip, r2
 802630a:	f881 c002 	strb.w	ip, [r1, #2]
 802630e:	e7c9      	b.n	80262a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

08026310 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026314:	b091      	sub	sp, #68	@ 0x44
 8026316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802631a:	920e      	str	r2, [sp, #56]	@ 0x38
 802631c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802631e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026320:	910c      	str	r1, [sp, #48]	@ 0x30
 8026322:	6850      	ldr	r0, [r2, #4]
 8026324:	9309      	str	r3, [sp, #36]	@ 0x24
 8026326:	6812      	ldr	r2, [r2, #0]
 8026328:	f89d 408c 	ldrb.w	r4, [sp, #140]	@ 0x8c
 802632c:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	@ 0x80
 8026330:	fb00 1303 	mla	r3, r0, r3, r1
 8026334:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026338:	930a      	str	r3, [sp, #40]	@ 0x28
 802633a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802633c:	681b      	ldr	r3, [r3, #0]
 802633e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026340:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026342:	685d      	ldr	r5, [r3, #4]
 8026344:	3504      	adds	r5, #4
 8026346:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026348:	2b00      	cmp	r3, #0
 802634a:	dc03      	bgt.n	8026354 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802634c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802634e:	2b00      	cmp	r3, #0
 8026350:	f340 825d 	ble.w	802680e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8026354:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026356:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802635a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802635e:	1e48      	subs	r0, r1, #1
 8026360:	1e56      	subs	r6, r2, #1
 8026362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026364:	2b00      	cmp	r3, #0
 8026366:	f340 80c9 	ble.w	80264fc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802636a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 802636c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802636e:	143f      	asrs	r7, r7, #16
 8026370:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026374:	d406      	bmi.n	8026384 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026376:	4287      	cmp	r7, r0
 8026378:	da04      	bge.n	8026384 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802637a:	2b00      	cmp	r3, #0
 802637c:	db02      	blt.n	8026384 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802637e:	42b3      	cmp	r3, r6
 8026380:	f2c0 80bd 	blt.w	80264fe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026384:	3701      	adds	r7, #1
 8026386:	f100 80aa 	bmi.w	80264de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802638a:	42b9      	cmp	r1, r7
 802638c:	f2c0 80a7 	blt.w	80264de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026390:	3301      	adds	r3, #1
 8026392:	f100 80a4 	bmi.w	80264de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026396:	429a      	cmp	r2, r3
 8026398:	f2c0 80a1 	blt.w	80264de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802639c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802639e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80263a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80263a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80263a4:	2b00      	cmp	r3, #0
 80263a6:	f340 80ca 	ble.w	802653e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80263aa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80263ac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80263ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80263b0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80263b4:	141f      	asrs	r7, r3, #16
 80263b6:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80263b8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80263bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80263be:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80263c0:	1400      	asrs	r0, r0, #16
 80263c2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80263c6:	6892      	ldr	r2, [r2, #8]
 80263c8:	f100 8138 	bmi.w	802663c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80263cc:	f102 3eff 	add.w	lr, r2, #4294967295
 80263d0:	4570      	cmp	r0, lr
 80263d2:	f280 8133 	bge.w	802663c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80263d6:	2f00      	cmp	r7, #0
 80263d8:	f2c0 8130 	blt.w	802663c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80263dc:	f10c 3eff 	add.w	lr, ip, #4294967295
 80263e0:	4577      	cmp	r7, lr
 80263e2:	f280 812b 	bge.w	802663c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80263e6:	b212      	sxth	r2, r2
 80263e8:	fb07 0002 	mla	r0, r7, r2, r0
 80263ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80263ee:	eb07 0c00 	add.w	ip, r7, r0
 80263f2:	5c38      	ldrb	r0, [r7, r0]
 80263f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80263f8:	eb05 0800 	add.w	r8, r5, r0
 80263fc:	2b00      	cmp	r3, #0
 80263fe:	f000 80e2 	beq.w	80265c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8026402:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026406:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802640a:	44ae      	add	lr, r5
 802640c:	2900      	cmp	r1, #0
 802640e:	f000 80e3 	beq.w	80265d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8026412:	eb0c 0702 	add.w	r7, ip, r2
 8026416:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802641a:	f897 c001 	ldrb.w	ip, [r7, #1]
 802641e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026422:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026426:	442a      	add	r2, r5
 8026428:	44ac      	add	ip, r5
 802642a:	b29b      	uxth	r3, r3
 802642c:	5c2f      	ldrb	r7, [r5, r0]
 802642e:	b289      	uxth	r1, r1
 8026430:	f89e 0000 	ldrb.w	r0, [lr]
 8026434:	f89e a001 	ldrb.w	sl, [lr, #1]
 8026438:	2cff      	cmp	r4, #255	@ 0xff
 802643a:	fb03 fb01 	mul.w	fp, r3, r1
 802643e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8026442:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026446:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802644a:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 802644e:	eba3 030b 	sub.w	r3, r3, fp
 8026452:	b289      	uxth	r1, r1
 8026454:	b29b      	uxth	r3, r3
 8026456:	eba9 0901 	sub.w	r9, r9, r1
 802645a:	fb03 f000 	mul.w	r0, r3, r0
 802645e:	fa1f f989 	uxth.w	r9, r9
 8026462:	fb03 fa0a 	mul.w	sl, r3, sl
 8026466:	fb03 f30e 	mul.w	r3, r3, lr
 802646a:	f892 e002 	ldrb.w	lr, [r2, #2]
 802646e:	fb09 0007 	mla	r0, r9, r7, r0
 8026472:	7817      	ldrb	r7, [r2, #0]
 8026474:	fb01 0007 	mla	r0, r1, r7, r0
 8026478:	f89c 7000 	ldrb.w	r7, [ip]
 802647c:	fb0b 0707 	mla	r7, fp, r7, r0
 8026480:	f898 0001 	ldrb.w	r0, [r8, #1]
 8026484:	f898 8002 	ldrb.w	r8, [r8, #2]
 8026488:	fb09 aa00 	mla	sl, r9, r0, sl
 802648c:	7850      	ldrb	r0, [r2, #1]
 802648e:	fb09 3308 	mla	r3, r9, r8, r3
 8026492:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8026496:	fb01 aa00 	mla	sl, r1, r0, sl
 802649a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802649e:	fb01 330e 	mla	r3, r1, lr, r3
 80264a2:	ea4f 2727 	mov.w	r7, r7, asr #8
 80264a6:	fb0b a000 	mla	r0, fp, r0, sl
 80264aa:	fb0b 3b02 	mla	fp, fp, r2, r3
 80264ae:	ea4f 2020 	mov.w	r0, r0, asr #8
 80264b2:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80264b6:	f040 8095 	bne.w	80265e4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80264ba:	7037      	strb	r7, [r6, #0]
 80264bc:	7070      	strb	r0, [r6, #1]
 80264be:	f886 b002 	strb.w	fp, [r6, #2]
 80264c2:	70f4      	strb	r4, [r6, #3]
 80264c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80264c6:	3604      	adds	r6, #4
 80264c8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80264ca:	4413      	add	r3, r2
 80264cc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80264ce:	931b      	str	r3, [sp, #108]	@ 0x6c
 80264d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80264d2:	4413      	add	r3, r2
 80264d4:	931c      	str	r3, [sp, #112]	@ 0x70
 80264d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80264d8:	3b01      	subs	r3, #1
 80264da:	930d      	str	r3, [sp, #52]	@ 0x34
 80264dc:	e761      	b.n	80263a2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80264de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80264e0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80264e2:	443b      	add	r3, r7
 80264e4:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 80264e6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80264e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80264ea:	443b      	add	r3, r7
 80264ec:	931c      	str	r3, [sp, #112]	@ 0x70
 80264ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264f0:	3b01      	subs	r3, #1
 80264f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80264f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80264f6:	3304      	adds	r3, #4
 80264f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80264fa:	e732      	b.n	8026362 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80264fc:	d026      	beq.n	802654c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 80264fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026500:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026502:	3b01      	subs	r3, #1
 8026504:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8026506:	fb00 6003 	mla	r0, r0, r3, r6
 802650a:	1400      	asrs	r0, r0, #16
 802650c:	f53f af46 	bmi.w	802639c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026510:	3901      	subs	r1, #1
 8026512:	4288      	cmp	r0, r1
 8026514:	f6bf af42 	bge.w	802639c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026518:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802651a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802651c:	fb01 0303 	mla	r3, r1, r3, r0
 8026520:	141b      	asrs	r3, r3, #16
 8026522:	f53f af3b 	bmi.w	802639c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026526:	3a01      	subs	r2, #1
 8026528:	4293      	cmp	r3, r2
 802652a:	f6bf af37 	bge.w	802639c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802652e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026530:	1d19      	adds	r1, r3, #4
 8026532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026534:	930d      	str	r3, [sp, #52]	@ 0x34
 8026536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026538:	2b00      	cmp	r3, #0
 802653a:	f300 809e 	bgt.w	802667a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802653e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026540:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026542:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802654a:	930a      	str	r3, [sp, #40]	@ 0x28
 802654c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802654e:	2b00      	cmp	r3, #0
 8026550:	f340 815d 	ble.w	802680e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8026554:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026558:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802655a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802655e:	eeb0 6a62 	vmov.f32	s12, s5
 8026562:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026566:	ee31 1a05 	vadd.f32	s2, s2, s10
 802656a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802656e:	ed8d 6a1b 	vstr	s12, [sp, #108]	@ 0x6c
 8026572:	eeb0 6a43 	vmov.f32	s12, s6
 8026576:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802657a:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 802657e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026582:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026586:	ee77 2a62 	vsub.f32	s5, s14, s5
 802658a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802658e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026596:	ee12 2a90 	vmov	r2, s5
 802659a:	eef0 2a47 	vmov.f32	s5, s14
 802659e:	fb92 f3f3 	sdiv	r3, r2, r3
 80265a2:	ee13 2a10 	vmov	r2, s6
 80265a6:	931d      	str	r3, [sp, #116]	@ 0x74
 80265a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80265aa:	eeb0 3a67 	vmov.f32	s6, s15
 80265ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80265b2:	931e      	str	r3, [sp, #120]	@ 0x78
 80265b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80265b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80265b8:	3b01      	subs	r3, #1
 80265ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80265bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80265be:	bf08      	it	eq
 80265c0:	4613      	moveq	r3, r2
 80265c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80265c4:	e6bf      	b.n	8026346 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80265c6:	b151      	cbz	r1, 80265de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80265c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80265cc:	46c4      	mov	ip, r8
 80265ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80265d2:	442a      	add	r2, r5
 80265d4:	46c6      	mov	lr, r8
 80265d6:	e728      	b.n	802642a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80265d8:	46c4      	mov	ip, r8
 80265da:	4642      	mov	r2, r8
 80265dc:	e725      	b.n	802642a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80265de:	46c4      	mov	ip, r8
 80265e0:	4642      	mov	r2, r8
 80265e2:	e7f7      	b.n	80265d4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80265e4:	2c00      	cmp	r4, #0
 80265e6:	f43f af6d 	beq.w	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80265ea:	78f1      	ldrb	r1, [r6, #3]
 80265ec:	b2ff      	uxtb	r7, r7
 80265ee:	f896 a001 	ldrb.w	sl, [r6, #1]
 80265f2:	b2c0      	uxtb	r0, r0
 80265f4:	fb04 f201 	mul.w	r2, r4, r1
 80265f8:	fa5f fb8b 	uxtb.w	fp, fp
 80265fc:	1c53      	adds	r3, r2, #1
 80265fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026602:	1862      	adds	r2, r4, r1
 8026604:	121b      	asrs	r3, r3, #8
 8026606:	1ad2      	subs	r2, r2, r3
 8026608:	1acb      	subs	r3, r1, r3
 802660a:	7831      	ldrb	r1, [r6, #0]
 802660c:	fb03 fa0a 	mul.w	sl, r3, sl
 8026610:	b2d2      	uxtb	r2, r2
 8026612:	4359      	muls	r1, r3
 8026614:	fb04 a000 	mla	r0, r4, r0, sl
 8026618:	fb04 1707 	mla	r7, r4, r7, r1
 802661c:	78b1      	ldrb	r1, [r6, #2]
 802661e:	70f2      	strb	r2, [r6, #3]
 8026620:	434b      	muls	r3, r1
 8026622:	fb04 3b0b 	mla	fp, r4, fp, r3
 8026626:	fb97 f7f2 	sdiv	r7, r7, r2
 802662a:	fb90 f0f2 	sdiv	r0, r0, r2
 802662e:	fb9b fbf2 	sdiv	fp, fp, r2
 8026632:	7037      	strb	r7, [r6, #0]
 8026634:	7070      	strb	r0, [r6, #1]
 8026636:	f886 b002 	strb.w	fp, [r6, #2]
 802663a:	e743      	b.n	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802663c:	f110 0e01 	adds.w	lr, r0, #1
 8026640:	f53f af40 	bmi.w	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026644:	4572      	cmp	r2, lr
 8026646:	f6ff af3d 	blt.w	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802664a:	f117 0e01 	adds.w	lr, r7, #1
 802664e:	f53f af39 	bmi.w	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026652:	45f4      	cmp	ip, lr
 8026654:	f6ff af36 	blt.w	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026658:	b212      	sxth	r2, r2
 802665a:	9002      	str	r0, [sp, #8]
 802665c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802665e:	9200      	str	r2, [sp, #0]
 8026660:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026662:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8026666:	fa0f f38c 	sxth.w	r3, ip
 802666a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802666e:	9301      	str	r3, [sp, #4]
 8026670:	4631      	mov	r1, r6
 8026672:	462b      	mov	r3, r5
 8026674:	f7ff fd51 	bl	802611a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8026678:	e724      	b.n	80264c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802667a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802667c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802667e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8026682:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8026684:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026686:	1436      	asrs	r6, r6, #16
 8026688:	143f      	asrs	r7, r7, #16
 802668a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802668c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026690:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8026694:	fb02 7606 	mla	r6, r2, r6, r7
 8026698:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802669a:	eb07 0c06 	add.w	ip, r7, r6
 802669e:	5dbe      	ldrb	r6, [r7, r6]
 80266a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80266a4:	eb05 0806 	add.w	r8, r5, r6
 80266a8:	2b00      	cmp	r3, #0
 80266aa:	d06d      	beq.n	8026788 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80266ac:	f89c e001 	ldrb.w	lr, [ip, #1]
 80266b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80266b4:	44ae      	add	lr, r5
 80266b6:	2800      	cmp	r0, #0
 80266b8:	d06f      	beq.n	802679a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80266ba:	eb0c 0702 	add.w	r7, ip, r2
 80266be:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80266c2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80266c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80266ca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80266ce:	442a      	add	r2, r5
 80266d0:	44ac      	add	ip, r5
 80266d2:	b29b      	uxth	r3, r3
 80266d4:	5daf      	ldrb	r7, [r5, r6]
 80266d6:	b280      	uxth	r0, r0
 80266d8:	f89e 6000 	ldrb.w	r6, [lr]
 80266dc:	f89e a001 	ldrb.w	sl, [lr, #1]
 80266e0:	2cff      	cmp	r4, #255	@ 0xff
 80266e2:	fb03 fb00 	mul.w	fp, r3, r0
 80266e6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80266ea:	f89e e002 	ldrb.w	lr, [lr, #2]
 80266ee:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80266f2:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 80266f6:	eba3 030b 	sub.w	r3, r3, fp
 80266fa:	b280      	uxth	r0, r0
 80266fc:	b29b      	uxth	r3, r3
 80266fe:	eba9 0900 	sub.w	r9, r9, r0
 8026702:	fb03 f606 	mul.w	r6, r3, r6
 8026706:	fa1f f989 	uxth.w	r9, r9
 802670a:	fb03 fa0a 	mul.w	sl, r3, sl
 802670e:	fb03 f30e 	mul.w	r3, r3, lr
 8026712:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026716:	fb09 6607 	mla	r6, r9, r7, r6
 802671a:	7817      	ldrb	r7, [r2, #0]
 802671c:	fb00 6607 	mla	r6, r0, r7, r6
 8026720:	f89c 7000 	ldrb.w	r7, [ip]
 8026724:	fb0b 6707 	mla	r7, fp, r7, r6
 8026728:	f898 6001 	ldrb.w	r6, [r8, #1]
 802672c:	f898 8002 	ldrb.w	r8, [r8, #2]
 8026730:	fb09 aa06 	mla	sl, r9, r6, sl
 8026734:	7856      	ldrb	r6, [r2, #1]
 8026736:	fb09 3308 	mla	r3, r9, r8, r3
 802673a:	ea4f 2727 	mov.w	r7, r7, asr #8
 802673e:	fb00 aa06 	mla	sl, r0, r6, sl
 8026742:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8026746:	fb00 330e 	mla	r3, r0, lr, r3
 802674a:	f89c e002 	ldrb.w	lr, [ip, #2]
 802674e:	fb0b a606 	mla	r6, fp, r6, sl
 8026752:	fb0b 330e 	mla	r3, fp, lr, r3
 8026756:	ea4f 2626 	mov.w	r6, r6, asr #8
 802675a:	ea4f 2b23 	mov.w	fp, r3, asr #8
 802675e:	d122      	bne.n	80267a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8026760:	f801 7c04 	strb.w	r7, [r1, #-4]
 8026764:	f801 6c03 	strb.w	r6, [r1, #-3]
 8026768:	f801 bc02 	strb.w	fp, [r1, #-2]
 802676c:	f801 4c01 	strb.w	r4, [r1, #-1]
 8026770:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026772:	3104      	adds	r1, #4
 8026774:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026776:	4413      	add	r3, r2
 8026778:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802677a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802677c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802677e:	4413      	add	r3, r2
 8026780:	931c      	str	r3, [sp, #112]	@ 0x70
 8026782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026784:	3b01      	subs	r3, #1
 8026786:	e6d5      	b.n	8026534 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026788:	b150      	cbz	r0, 80267a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802678a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802678e:	46c4      	mov	ip, r8
 8026790:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026794:	442a      	add	r2, r5
 8026796:	46c6      	mov	lr, r8
 8026798:	e79b      	b.n	80266d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802679a:	46c4      	mov	ip, r8
 802679c:	4642      	mov	r2, r8
 802679e:	e798      	b.n	80266d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80267a0:	46c4      	mov	ip, r8
 80267a2:	4642      	mov	r2, r8
 80267a4:	e7f7      	b.n	8026796 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80267a6:	2c00      	cmp	r4, #0
 80267a8:	d0e2      	beq.n	8026770 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 80267aa:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80267ae:	b2ff      	uxtb	r7, r7
 80267b0:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 80267b4:	b2f6      	uxtb	r6, r6
 80267b6:	fb04 f300 	mul.w	r3, r4, r0
 80267ba:	eb04 0c00 	add.w	ip, r4, r0
 80267be:	fa5f fb8b 	uxtb.w	fp, fp
 80267c2:	1c5a      	adds	r2, r3, #1
 80267c4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80267c8:	1213      	asrs	r3, r2, #8
 80267ca:	1ac2      	subs	r2, r0, r3
 80267cc:	ebac 0c03 	sub.w	ip, ip, r3
 80267d0:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80267d4:	fb02 fa0a 	mul.w	sl, r2, sl
 80267d8:	fa5f fc8c 	uxtb.w	ip, ip
 80267dc:	4353      	muls	r3, r2
 80267de:	fb04 a606 	mla	r6, r4, r6, sl
 80267e2:	fb04 3707 	mla	r7, r4, r7, r3
 80267e6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80267ea:	f801 cc01 	strb.w	ip, [r1, #-1]
 80267ee:	435a      	muls	r2, r3
 80267f0:	fb04 2b0b 	mla	fp, r4, fp, r2
 80267f4:	fb97 f7fc 	sdiv	r7, r7, ip
 80267f8:	fb96 f6fc 	sdiv	r6, r6, ip
 80267fc:	fb9b fbfc 	sdiv	fp, fp, ip
 8026800:	f801 7c04 	strb.w	r7, [r1, #-4]
 8026804:	f801 6c03 	strb.w	r6, [r1, #-3]
 8026808:	f801 bc02 	strb.w	fp, [r1, #-2]
 802680c:	e7b0      	b.n	8026770 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802680e:	b011      	add	sp, #68	@ 0x44
 8026810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026814 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8026814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026818:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	@ 0x2c
 802681c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8026820:	f1b8 0f00 	cmp.w	r8, #0
 8026824:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8026828:	fb08 740e 	mla	r4, r8, lr, r7
 802682c:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8026830:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8026834:	eb02 0904 	add.w	r9, r2, r4
 8026838:	6808      	ldr	r0, [r1, #0]
 802683a:	f2c0 8099 	blt.w	8026970 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 802683e:	45c2      	cmp	sl, r8
 8026840:	f340 8096 	ble.w	8026970 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8026844:	2f00      	cmp	r7, #0
 8026846:	f2c0 8091 	blt.w	802696c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 802684a:	45be      	cmp	lr, r7
 802684c:	f340 808e 	ble.w	802696c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8026850:	5d12      	ldrb	r2, [r2, r4]
 8026852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026856:	189c      	adds	r4, r3, r2
 8026858:	5c9a      	ldrb	r2, [r3, r2]
 802685a:	7866      	ldrb	r6, [r4, #1]
 802685c:	78a4      	ldrb	r4, [r4, #2]
 802685e:	0424      	lsls	r4, r4, #16
 8026860:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8026864:	4314      	orrs	r4, r2
 8026866:	1c7a      	adds	r2, r7, #1
 8026868:	f100 8085 	bmi.w	8026976 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 802686c:	4596      	cmp	lr, r2
 802686e:	f340 8082 	ble.w	8026976 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026872:	2d00      	cmp	r5, #0
 8026874:	d07f      	beq.n	8026976 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026876:	f899 2001 	ldrb.w	r2, [r9, #1]
 802687a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802687e:	189e      	adds	r6, r3, r2
 8026880:	5c9a      	ldrb	r2, [r3, r2]
 8026882:	f896 b001 	ldrb.w	fp, [r6, #1]
 8026886:	78b6      	ldrb	r6, [r6, #2]
 8026888:	0436      	lsls	r6, r6, #16
 802688a:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 802688e:	4316      	orrs	r6, r2
 8026890:	f118 0801 	adds.w	r8, r8, #1
 8026894:	d473      	bmi.n	802697e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8026896:	45c2      	cmp	sl, r8
 8026898:	dd71      	ble.n	802697e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 802689a:	f1bc 0f00 	cmp.w	ip, #0
 802689e:	d06e      	beq.n	802697e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 80268a0:	2f00      	cmp	r7, #0
 80268a2:	eb09 080e 	add.w	r8, r9, lr
 80268a6:	db68      	blt.n	802697a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 80268a8:	45be      	cmp	lr, r7
 80268aa:	dd66      	ble.n	802697a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 80268ac:	f819 900e 	ldrb.w	r9, [r9, lr]
 80268b0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80268b4:	eb03 0209 	add.w	r2, r3, r9
 80268b8:	f813 9009 	ldrb.w	r9, [r3, r9]
 80268bc:	f892 a001 	ldrb.w	sl, [r2, #1]
 80268c0:	7892      	ldrb	r2, [r2, #2]
 80268c2:	0412      	lsls	r2, r2, #16
 80268c4:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 80268c8:	ea42 0209 	orr.w	r2, r2, r9
 80268cc:	3701      	adds	r7, #1
 80268ce:	d411      	bmi.n	80268f4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 80268d0:	45be      	cmp	lr, r7
 80268d2:	dd0f      	ble.n	80268f4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 80268d4:	b175      	cbz	r5, 80268f4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 80268d6:	f898 7001 	ldrb.w	r7, [r8, #1]
 80268da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80268de:	eb03 0e07 	add.w	lr, r3, r7
 80268e2:	5ddb      	ldrb	r3, [r3, r7]
 80268e4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80268e8:	f89e 8001 	ldrb.w	r8, [lr, #1]
 80268ec:	0400      	lsls	r0, r0, #16
 80268ee:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 80268f2:	4318      	orrs	r0, r3
 80268f4:	b2ad      	uxth	r5, r5
 80268f6:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 80268fa:	fa1f f78c 	uxth.w	r7, ip
 80268fe:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026902:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8026906:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802690a:	fb05 fc07 	mul.w	ip, r5, r7
 802690e:	012d      	lsls	r5, r5, #4
 8026910:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026914:	f5c5 7e80 	rsb	lr, r5, #256	@ 0x100
 8026918:	eba5 050c 	sub.w	r5, r5, ip
 802691c:	b2bf      	uxth	r7, r7
 802691e:	b2ad      	uxth	r5, r5
 8026920:	ebae 0e07 	sub.w	lr, lr, r7
 8026924:	436b      	muls	r3, r5
 8026926:	fa1f fe8e 	uxth.w	lr, lr
 802692a:	436e      	muls	r6, r5
 802692c:	fb0e 3808 	mla	r8, lr, r8, r3
 8026930:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8026934:	fb0e 6404 	mla	r4, lr, r4, r6
 8026938:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802693c:	fb0c 8803 	mla	r8, ip, r3, r8
 8026940:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8026944:	fb0c 4000 	mla	r0, ip, r0, r4
 8026948:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802694c:	fb07 8303 	mla	r3, r7, r3, r8
 8026950:	fb07 0002 	mla	r0, r7, r2, r0
 8026954:	0a1b      	lsrs	r3, r3, #8
 8026956:	0a00      	lsrs	r0, r0, #8
 8026958:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802695c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026960:	4318      	orrs	r0, r3
 8026962:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8026966:	6008      	str	r0, [r1, #0]
 8026968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802696c:	4604      	mov	r4, r0
 802696e:	e77a      	b.n	8026866 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8026970:	4606      	mov	r6, r0
 8026972:	4604      	mov	r4, r0
 8026974:	e78c      	b.n	8026890 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8026976:	4606      	mov	r6, r0
 8026978:	e78a      	b.n	8026890 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 802697a:	4602      	mov	r2, r0
 802697c:	e7a6      	b.n	80268cc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 802697e:	4602      	mov	r2, r0
 8026980:	e7b8      	b.n	80268f4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08026982 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026986:	b08f      	sub	sp, #60	@ 0x3c
 8026988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802698c:	920c      	str	r2, [sp, #48]	@ 0x30
 802698e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026990:	900d      	str	r0, [sp, #52]	@ 0x34
 8026992:	910a      	str	r1, [sp, #40]	@ 0x28
 8026994:	6850      	ldr	r0, [r2, #4]
 8026996:	9306      	str	r3, [sp, #24]
 8026998:	6812      	ldr	r2, [r2, #0]
 802699a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 802699e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 80269a2:	fb00 1303 	mla	r3, r0, r3, r1
 80269a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80269aa:	9307      	str	r3, [sp, #28]
 80269ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	9308      	str	r3, [sp, #32]
 80269b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80269b4:	685c      	ldr	r4, [r3, #4]
 80269b6:	3404      	adds	r4, #4
 80269b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80269ba:	2b00      	cmp	r3, #0
 80269bc:	dc03      	bgt.n	80269c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80269be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80269c0:	2b00      	cmp	r3, #0
 80269c2:	f340 81dc 	ble.w	8026d7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80269c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80269c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80269d0:	1e48      	subs	r0, r1, #1
 80269d2:	1e56      	subs	r6, r2, #1
 80269d4:	9b06      	ldr	r3, [sp, #24]
 80269d6:	2b00      	cmp	r3, #0
 80269d8:	f340 80ba 	ble.w	8026b50 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80269dc:	ea5f 472b 	movs.w	r7, fp, asr #16
 80269e0:	ea4f 4325 	mov.w	r3, r5, asr #16
 80269e4:	d406      	bmi.n	80269f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80269e6:	4287      	cmp	r7, r0
 80269e8:	da04      	bge.n	80269f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	db02      	blt.n	80269f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80269ee:	42b3      	cmp	r3, r6
 80269f0:	f2c0 80af 	blt.w	8026b52 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80269f4:	3701      	adds	r7, #1
 80269f6:	f100 80a0 	bmi.w	8026b3a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80269fa:	42b9      	cmp	r1, r7
 80269fc:	f2c0 809d 	blt.w	8026b3a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026a00:	3301      	adds	r3, #1
 8026a02:	f100 809a 	bmi.w	8026b3a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026a06:	429a      	cmp	r2, r3
 8026a08:	f2c0 8097 	blt.w	8026b3a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026a0c:	9b06      	ldr	r3, [sp, #24]
 8026a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026a10:	9b07      	ldr	r3, [sp, #28]
 8026a12:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a16:	2b00      	cmp	r3, #0
 8026a18:	f340 80b8 	ble.w	8026b8c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8026a1c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8026a1e:	142e      	asrs	r6, r5, #16
 8026a20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026a22:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026a26:	68c7      	ldr	r7, [r0, #12]
 8026a28:	ea5f 402b 	movs.w	r0, fp, asr #16
 8026a2c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026a30:	6892      	ldr	r2, [r2, #8]
 8026a32:	f100 80fe 	bmi.w	8026c32 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026a36:	f102 3cff 	add.w	ip, r2, #4294967295
 8026a3a:	4560      	cmp	r0, ip
 8026a3c:	f280 80f9 	bge.w	8026c32 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026a40:	2e00      	cmp	r6, #0
 8026a42:	f2c0 80f6 	blt.w	8026c32 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026a46:	f107 3cff 	add.w	ip, r7, #4294967295
 8026a4a:	4566      	cmp	r6, ip
 8026a4c:	f280 80f1 	bge.w	8026c32 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026a50:	b212      	sxth	r2, r2
 8026a52:	fb06 0002 	mla	r0, r6, r2, r0
 8026a56:	9e08      	ldr	r6, [sp, #32]
 8026a58:	5c37      	ldrb	r7, [r6, r0]
 8026a5a:	eb06 0e00 	add.w	lr, r6, r0
 8026a5e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026a62:	eb04 0c07 	add.w	ip, r4, r7
 8026a66:	2b00      	cmp	r3, #0
 8026a68:	f000 80d4 	beq.w	8026c14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8026a6c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026a70:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026a74:	4426      	add	r6, r4
 8026a76:	2900      	cmp	r1, #0
 8026a78:	f000 80d5 	beq.w	8026c26 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026a7c:	eb0e 0002 	add.w	r0, lr, r2
 8026a80:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026a84:	7840      	ldrb	r0, [r0, #1]
 8026a86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026a8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026a8e:	4422      	add	r2, r4
 8026a90:	4420      	add	r0, r4
 8026a92:	b29b      	uxth	r3, r3
 8026a94:	f814 a007 	ldrb.w	sl, [r4, r7]
 8026a98:	b289      	uxth	r1, r1
 8026a9a:	7837      	ldrb	r7, [r6, #0]
 8026a9c:	f896 8001 	ldrb.w	r8, [r6, #1]
 8026aa0:	fb03 f901 	mul.w	r9, r3, r1
 8026aa4:	011b      	lsls	r3, r3, #4
 8026aa6:	78b6      	ldrb	r6, [r6, #2]
 8026aa8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026aac:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026ab0:	eba3 0309 	sub.w	r3, r3, r9
 8026ab4:	b289      	uxth	r1, r1
 8026ab6:	b29b      	uxth	r3, r3
 8026ab8:	ebae 0e01 	sub.w	lr, lr, r1
 8026abc:	435f      	muls	r7, r3
 8026abe:	fa1f fe8e 	uxth.w	lr, lr
 8026ac2:	fb03 f808 	mul.w	r8, r3, r8
 8026ac6:	4373      	muls	r3, r6
 8026ac8:	fb0e 770a 	mla	r7, lr, sl, r7
 8026acc:	f892 a000 	ldrb.w	sl, [r2]
 8026ad0:	fb01 770a 	mla	r7, r1, sl, r7
 8026ad4:	f890 a000 	ldrb.w	sl, [r0]
 8026ad8:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026adc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8026ae0:	f89c c002 	ldrb.w	ip, [ip, #2]
 8026ae4:	fb0e 8807 	mla	r8, lr, r7, r8
 8026ae8:	7857      	ldrb	r7, [r2, #1]
 8026aea:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026aee:	fb0e 330c 	mla	r3, lr, ip, r3
 8026af2:	fb01 8807 	mla	r8, r1, r7, r8
 8026af6:	7847      	ldrb	r7, [r0, #1]
 8026af8:	fb09 8707 	mla	r7, r9, r7, r8
 8026afc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026b00:	ea4a 0707 	orr.w	r7, sl, r7
 8026b04:	f892 a002 	ldrb.w	sl, [r2, #2]
 8026b08:	fb01 310a 	mla	r1, r1, sl, r3
 8026b0c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b12:	fb09 1a0a 	mla	sl, r9, sl, r1
 8026b16:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8026b1a:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 8026b1e:	ea47 070a 	orr.w	r7, r7, sl
 8026b22:	601f      	str	r7, [r3, #0]
 8026b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b26:	3304      	adds	r3, #4
 8026b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b2a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026b2c:	449b      	add	fp, r3
 8026b2e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026b30:	441d      	add	r5, r3
 8026b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b34:	3b01      	subs	r3, #1
 8026b36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026b38:	e76c      	b.n	8026a14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026b3a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026b3c:	449b      	add	fp, r3
 8026b3e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026b40:	441d      	add	r5, r3
 8026b42:	9b06      	ldr	r3, [sp, #24]
 8026b44:	3b01      	subs	r3, #1
 8026b46:	9306      	str	r3, [sp, #24]
 8026b48:	9b07      	ldr	r3, [sp, #28]
 8026b4a:	3304      	adds	r3, #4
 8026b4c:	9307      	str	r3, [sp, #28]
 8026b4e:	e741      	b.n	80269d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026b50:	d023      	beq.n	8026b9a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8026b52:	9b06      	ldr	r3, [sp, #24]
 8026b54:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026b56:	3b01      	subs	r3, #1
 8026b58:	fb00 b003 	mla	r0, r0, r3, fp
 8026b5c:	1400      	asrs	r0, r0, #16
 8026b5e:	f53f af55 	bmi.w	8026a0c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026b62:	3901      	subs	r1, #1
 8026b64:	4288      	cmp	r0, r1
 8026b66:	f6bf af51 	bge.w	8026a0c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026b6a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026b6c:	fb01 5303 	mla	r3, r1, r3, r5
 8026b70:	141b      	asrs	r3, r3, #16
 8026b72:	f53f af4b 	bmi.w	8026a0c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026b76:	3a01      	subs	r2, #1
 8026b78:	4293      	cmp	r3, r2
 8026b7a:	f6bf af47 	bge.w	8026a0c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026b7e:	9b06      	ldr	r3, [sp, #24]
 8026b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b82:	9b07      	ldr	r3, [sp, #28]
 8026b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	dc6f      	bgt.n	8026c6c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026b8c:	9b06      	ldr	r3, [sp, #24]
 8026b8e:	9a07      	ldr	r2, [sp, #28]
 8026b90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026b94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026b98:	9307      	str	r3, [sp, #28]
 8026b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026b9c:	2b00      	cmp	r3, #0
 8026b9e:	f340 80ee 	ble.w	8026d7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026ba2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026ba6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026ba8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026bac:	eeb0 6a62 	vmov.f32	s12, s5
 8026bb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026bb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026bb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026bbc:	ee16 ba10 	vmov	fp, s12
 8026bc0:	eeb0 6a43 	vmov.f32	s12, s6
 8026bc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026bc8:	ee16 5a10 	vmov	r5, s12
 8026bcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026bd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026bd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026bd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026bdc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026be0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026be4:	ee12 2a90 	vmov	r2, s5
 8026be8:	eef0 2a47 	vmov.f32	s5, s14
 8026bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bf0:	ee13 2a10 	vmov	r2, s6
 8026bf4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026bf6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026bf8:	eeb0 3a67 	vmov.f32	s6, s15
 8026bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c00:	931c      	str	r3, [sp, #112]	@ 0x70
 8026c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026c04:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026c06:	3b01      	subs	r3, #1
 8026c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8026c0a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026c0c:	bf08      	it	eq
 8026c0e:	4613      	moveq	r3, r2
 8026c10:	9306      	str	r3, [sp, #24]
 8026c12:	e6d1      	b.n	80269b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8026c14:	b151      	cbz	r1, 8026c2c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026c16:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026c1a:	4660      	mov	r0, ip
 8026c1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c20:	4422      	add	r2, r4
 8026c22:	4666      	mov	r6, ip
 8026c24:	e735      	b.n	8026a92 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026c26:	4660      	mov	r0, ip
 8026c28:	4662      	mov	r2, ip
 8026c2a:	e732      	b.n	8026a92 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026c2c:	4660      	mov	r0, ip
 8026c2e:	4662      	mov	r2, ip
 8026c30:	e7f7      	b.n	8026c22 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8026c32:	f110 0c01 	adds.w	ip, r0, #1
 8026c36:	f53f af75 	bmi.w	8026b24 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026c3a:	4562      	cmp	r2, ip
 8026c3c:	f6ff af72 	blt.w	8026b24 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026c40:	f116 0c01 	adds.w	ip, r6, #1
 8026c44:	f53f af6e 	bmi.w	8026b24 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026c48:	4567      	cmp	r7, ip
 8026c4a:	f6ff af6b 	blt.w	8026b24 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026c4e:	b23f      	sxth	r7, r7
 8026c50:	b212      	sxth	r2, r2
 8026c52:	9701      	str	r7, [sp, #4]
 8026c54:	9200      	str	r2, [sp, #0]
 8026c56:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8026c5a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8026c5e:	4623      	mov	r3, r4
 8026c60:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026c62:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8026c66:	f7ff fdd5 	bl	8026814 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8026c6a:	e75b      	b.n	8026b24 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026c6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026c6e:	ea4f 462b 	mov.w	r6, fp, asr #16
 8026c72:	1428      	asrs	r0, r5, #16
 8026c74:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026c78:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026c7c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026c80:	fb02 6000 	mla	r0, r2, r0, r6
 8026c84:	9e08      	ldr	r6, [sp, #32]
 8026c86:	5c37      	ldrb	r7, [r6, r0]
 8026c88:	eb06 0e00 	add.w	lr, r6, r0
 8026c8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026c90:	eb04 0c07 	add.w	ip, r4, r7
 8026c94:	2b00      	cmp	r3, #0
 8026c96:	d063      	beq.n	8026d60 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8026c98:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026c9c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026ca0:	4426      	add	r6, r4
 8026ca2:	2900      	cmp	r1, #0
 8026ca4:	d065      	beq.n	8026d72 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8026ca6:	eb0e 0002 	add.w	r0, lr, r2
 8026caa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026cae:	7840      	ldrb	r0, [r0, #1]
 8026cb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026cb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026cb8:	4422      	add	r2, r4
 8026cba:	4420      	add	r0, r4
 8026cbc:	b29b      	uxth	r3, r3
 8026cbe:	f814 a007 	ldrb.w	sl, [r4, r7]
 8026cc2:	b289      	uxth	r1, r1
 8026cc4:	7837      	ldrb	r7, [r6, #0]
 8026cc6:	f896 8001 	ldrb.w	r8, [r6, #1]
 8026cca:	fb03 f901 	mul.w	r9, r3, r1
 8026cce:	011b      	lsls	r3, r3, #4
 8026cd0:	78b6      	ldrb	r6, [r6, #2]
 8026cd2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026cd6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026cda:	eba3 0309 	sub.w	r3, r3, r9
 8026cde:	b289      	uxth	r1, r1
 8026ce0:	b29b      	uxth	r3, r3
 8026ce2:	ebae 0e01 	sub.w	lr, lr, r1
 8026ce6:	435f      	muls	r7, r3
 8026ce8:	fa1f fe8e 	uxth.w	lr, lr
 8026cec:	fb03 f808 	mul.w	r8, r3, r8
 8026cf0:	4373      	muls	r3, r6
 8026cf2:	7896      	ldrb	r6, [r2, #2]
 8026cf4:	fb0e 770a 	mla	r7, lr, sl, r7
 8026cf8:	f892 a000 	ldrb.w	sl, [r2]
 8026cfc:	fb01 770a 	mla	r7, r1, sl, r7
 8026d00:	f890 a000 	ldrb.w	sl, [r0]
 8026d04:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026d08:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8026d0c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8026d10:	fb0e 8807 	mla	r8, lr, r7, r8
 8026d14:	7857      	ldrb	r7, [r2, #1]
 8026d16:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026d1a:	fb0e 330c 	mla	r3, lr, ip, r3
 8026d1e:	fb01 8807 	mla	r8, r1, r7, r8
 8026d22:	7847      	ldrb	r7, [r0, #1]
 8026d24:	fb01 3306 	mla	r3, r1, r6, r3
 8026d28:	fb09 8707 	mla	r7, r9, r7, r8
 8026d2c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026d30:	ea4a 0707 	orr.w	r7, sl, r7
 8026d34:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026d38:	fb09 3a0a 	mla	sl, r9, sl, r3
 8026d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d3e:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8026d42:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 8026d46:	ea47 070a 	orr.w	r7, r7, sl
 8026d4a:	f843 7b04 	str.w	r7, [r3], #4
 8026d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026d50:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026d52:	449b      	add	fp, r3
 8026d54:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d56:	441d      	add	r5, r3
 8026d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d5a:	3b01      	subs	r3, #1
 8026d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d5e:	e712      	b.n	8026b86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026d60:	b151      	cbz	r1, 8026d78 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026d62:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026d66:	4660      	mov	r0, ip
 8026d68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026d6c:	4422      	add	r2, r4
 8026d6e:	4666      	mov	r6, ip
 8026d70:	e7a4      	b.n	8026cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026d72:	4660      	mov	r0, ip
 8026d74:	4662      	mov	r2, ip
 8026d76:	e7a1      	b.n	8026cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026d78:	4660      	mov	r0, ip
 8026d7a:	4662      	mov	r2, ip
 8026d7c:	e7f7      	b.n	8026d6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026d7e:	b00f      	add	sp, #60	@ 0x3c
 8026d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d84 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8026d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d88:	b085      	sub	sp, #20
 8026d8a:	6808      	ldr	r0, [r1, #0]
 8026d8c:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	@ 0x40
 8026d90:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	@ 0x38
 8026d94:	f1b9 0f00 	cmp.w	r9, #0
 8026d98:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8026d9c:	fb09 6408 	mla	r4, r9, r8, r6
 8026da0:	f89d c048 	ldrb.w	ip, [sp, #72]	@ 0x48
 8026da4:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026da8:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 8026dac:	eb02 0a04 	add.w	sl, r2, r4
 8026db0:	f2c0 8103 	blt.w	8026fba <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8026db4:	45cb      	cmp	fp, r9
 8026db6:	f340 8100 	ble.w	8026fba <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8026dba:	2e00      	cmp	r6, #0
 8026dbc:	f2c0 80fb 	blt.w	8026fb6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8026dc0:	45b0      	cmp	r8, r6
 8026dc2:	f340 80f8 	ble.w	8026fb6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8026dc6:	5d12      	ldrb	r2, [r2, r4]
 8026dc8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026dcc:	1c72      	adds	r2, r6, #1
 8026dce:	f100 80f5 	bmi.w	8026fbc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8026dd2:	4590      	cmp	r8, r2
 8026dd4:	f340 80f2 	ble.w	8026fbc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8026dd8:	f1bc 0f00 	cmp.w	ip, #0
 8026ddc:	f000 80ee 	beq.w	8026fbc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8026de0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026de4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8026de8:	f119 0901 	adds.w	r9, r9, #1
 8026dec:	f100 80ea 	bmi.w	8026fc4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8026df0:	45cb      	cmp	fp, r9
 8026df2:	f340 80e7 	ble.w	8026fc4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8026df6:	f1be 0f00 	cmp.w	lr, #0
 8026dfa:	f000 80e3 	beq.w	8026fc4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8026dfe:	2e00      	cmp	r6, #0
 8026e00:	f2c0 80de 	blt.w	8026fc0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8026e04:	45b0      	cmp	r8, r6
 8026e06:	f340 80db 	ble.w	8026fc0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8026e0a:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8026e0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026e12:	3601      	adds	r6, #1
 8026e14:	d409      	bmi.n	8026e2a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026e16:	45b0      	cmp	r8, r6
 8026e18:	dd07      	ble.n	8026e2a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026e1a:	f1bc 0f00 	cmp.w	ip, #0
 8026e1e:	d004      	beq.n	8026e2a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026e20:	44d0      	add	r8, sl
 8026e22:	f898 0001 	ldrb.w	r0, [r8, #1]
 8026e26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8026e2a:	fa1f fc8c 	uxth.w	ip, ip
 8026e2e:	fa1f f38e 	uxth.w	r3, lr
 8026e32:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8026e36:	fb03 fe0c 	mul.w	lr, r3, ip
 8026e3a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026e3e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026e42:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8026e46:	ebac 060e 	sub.w	r6, ip, lr
 8026e4a:	f5cc 7c80 	rsb	ip, ip, #256	@ 0x100
 8026e4e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8026e52:	b29b      	uxth	r3, r3
 8026e54:	b2b6      	uxth	r6, r6
 8026e56:	ebac 0c03 	sub.w	ip, ip, r3
 8026e5a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026e5e:	9601      	str	r6, [sp, #4]
 8026e60:	fa1f f68c 	uxth.w	r6, ip
 8026e64:	9602      	str	r6, [sp, #8]
 8026e66:	9e01      	ldr	r6, [sp, #4]
 8026e68:	fb06 fc0a 	mul.w	ip, r6, sl
 8026e6c:	9e02      	ldr	r6, [sp, #8]
 8026e6e:	fb06 cc0b 	mla	ip, r6, fp, ip
 8026e72:	fb03 cc09 	mla	ip, r3, r9, ip
 8026e76:	fb0e cc08 	mla	ip, lr, r8, ip
 8026e7a:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8026e7e:	9603      	str	r6, [sp, #12]
 8026e80:	2e00      	cmp	r6, #0
 8026e82:	f000 8095 	beq.w	8026fb0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8026e86:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026e8a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026e8e:	fb0b fc0c 	mul.w	ip, fp, ip
 8026e92:	fb0b f505 	mul.w	r5, fp, r5
 8026e96:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026e9a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026e9e:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026ea2:	44dc      	add	ip, fp
 8026ea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ea8:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 8026eac:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026eb0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026eb4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026eb8:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026ebc:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ec0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026ec4:	fb0a fa04 	mul.w	sl, sl, r4
 8026ec8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026ecc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026ed0:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 8026ed4:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026ed8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026edc:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8026ee0:	4465      	add	r5, ip
 8026ee2:	f002 1cff 	and.w	ip, r2, #16711935	@ 0xff00ff
 8026ee6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026eea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026eee:	fb09 fc0c 	mul.w	ip, r9, ip
 8026ef2:	0a2d      	lsrs	r5, r5, #8
 8026ef4:	fb09 f902 	mul.w	r9, r9, r2
 8026ef8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026efc:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8026f00:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026f04:	f509 7280 	add.w	r2, r9, #256	@ 0x100
 8026f08:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026f0c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026f10:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026f14:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
 8026f18:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026f1c:	4464      	add	r4, ip
 8026f1e:	fb08 f202 	mul.w	r2, r8, r2
 8026f22:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f26:	fb08 f800 	mul.w	r8, r8, r0
 8026f2a:	0a24      	lsrs	r4, r4, #8
 8026f2c:	0a10      	lsrs	r0, r2, #8
 8026f2e:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8026f32:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026f36:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026f3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026f3e:	4402      	add	r2, r0
 8026f40:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8026f44:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8026f48:	9801      	ldr	r0, [sp, #4]
 8026f4a:	0a12      	lsrs	r2, r2, #8
 8026f4c:	4345      	muls	r5, r0
 8026f4e:	9802      	ldr	r0, [sp, #8]
 8026f50:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026f54:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026f58:	fb06 5500 	mla	r5, r6, r0, r5
 8026f5c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8026f60:	fb02 520e 	mla	r2, r2, lr, r5
 8026f64:	fb04 2403 	mla	r4, r4, r3, r2
 8026f68:	9a01      	ldr	r2, [sp, #4]
 8026f6a:	fb02 f60a 	mul.w	r6, r2, sl
 8026f6e:	0a24      	lsrs	r4, r4, #8
 8026f70:	9a03      	ldr	r2, [sp, #12]
 8026f72:	fb00 660b 	mla	r6, r0, fp, r6
 8026f76:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026f7a:	fb07 fc02 	mul.w	ip, r7, r2
 8026f7e:	fb0e 6e08 	mla	lr, lr, r8, r6
 8026f82:	fb03 e309 	mla	r3, r3, r9, lr
 8026f86:	0a1b      	lsrs	r3, r3, #8
 8026f88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026f8c:	4323      	orrs	r3, r4
 8026f8e:	f10c 0401 	add.w	r4, ip, #1
 8026f92:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8026f96:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026f9a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026f9e:	1224      	asrs	r4, r4, #8
 8026fa0:	b2d5      	uxtb	r5, r2
 8026fa2:	2cff      	cmp	r4, #255	@ 0xff
 8026fa4:	b2c6      	uxtb	r6, r0
 8026fa6:	d10f      	bne.n	8026fc8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 8026fa8:	700b      	strb	r3, [r1, #0]
 8026faa:	7048      	strb	r0, [r1, #1]
 8026fac:	708a      	strb	r2, [r1, #2]
 8026fae:	70cc      	strb	r4, [r1, #3]
 8026fb0:	b005      	add	sp, #20
 8026fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fb6:	4605      	mov	r5, r0
 8026fb8:	e708      	b.n	8026dcc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 8026fba:	4605      	mov	r5, r0
 8026fbc:	4604      	mov	r4, r0
 8026fbe:	e713      	b.n	8026de8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 8026fc0:	4602      	mov	r2, r0
 8026fc2:	e726      	b.n	8026e12 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 8026fc4:	4602      	mov	r2, r0
 8026fc6:	e730      	b.n	8026e2a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026fc8:	b2e2      	uxtb	r2, r4
 8026fca:	2c00      	cmp	r4, #0
 8026fcc:	d0f0      	beq.n	8026fb0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8026fce:	78cc      	ldrb	r4, [r1, #3]
 8026fd0:	b2db      	uxtb	r3, r3
 8026fd2:	fb17 f606 	smulbb	r6, r7, r6
 8026fd6:	fb02 fc04 	mul.w	ip, r2, r4
 8026fda:	4422      	add	r2, r4
 8026fdc:	f10c 0001 	add.w	r0, ip, #1
 8026fe0:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8026fe4:	1200      	asrs	r0, r0, #8
 8026fe6:	1a24      	subs	r4, r4, r0
 8026fe8:	1a12      	subs	r2, r2, r0
 8026fea:	7808      	ldrb	r0, [r1, #0]
 8026fec:	b2d2      	uxtb	r2, r2
 8026fee:	4360      	muls	r0, r4
 8026ff0:	70ca      	strb	r2, [r1, #3]
 8026ff2:	fb07 0303 	mla	r3, r7, r3, r0
 8026ff6:	7848      	ldrb	r0, [r1, #1]
 8026ff8:	fb17 f705 	smulbb	r7, r7, r5
 8026ffc:	fb04 6000 	mla	r0, r4, r0, r6
 8027000:	fb93 f3f2 	sdiv	r3, r3, r2
 8027004:	2bff      	cmp	r3, #255	@ 0xff
 8027006:	bfd6      	itet	le
 8027008:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802700c:	23ff      	movgt	r3, #255	@ 0xff
 802700e:	b2db      	uxtble	r3, r3
 8027010:	fb90 f0f2 	sdiv	r0, r0, r2
 8027014:	700b      	strb	r3, [r1, #0]
 8027016:	28ff      	cmp	r0, #255	@ 0xff
 8027018:	788b      	ldrb	r3, [r1, #2]
 802701a:	bfd4      	ite	le
 802701c:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027020:	20ff      	movgt	r0, #255	@ 0xff
 8027022:	fb04 7303 	mla	r3, r4, r3, r7
 8027026:	bfd8      	it	le
 8027028:	b2c0      	uxtble	r0, r0
 802702a:	fb93 f3f2 	sdiv	r3, r3, r2
 802702e:	2bff      	cmp	r3, #255	@ 0xff
 8027030:	7048      	strb	r0, [r1, #1]
 8027032:	bfd6      	itet	le
 8027034:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027038:	23ff      	movgt	r3, #255	@ 0xff
 802703a:	b2db      	uxtble	r3, r3
 802703c:	708b      	strb	r3, [r1, #2]
 802703e:	e7b7      	b.n	8026fb0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

08027040 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027044:	b09d      	sub	sp, #116	@ 0x74
 8027046:	921a      	str	r2, [sp, #104]	@ 0x68
 8027048:	9308      	str	r3, [sp, #32]
 802704a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802704c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8027050:	901b      	str	r0, [sp, #108]	@ 0x6c
 8027052:	9118      	str	r1, [sp, #96]	@ 0x60
 8027054:	6850      	ldr	r0, [r2, #4]
 8027056:	9309      	str	r3, [sp, #36]	@ 0x24
 8027058:	6812      	ldr	r2, [r2, #0]
 802705a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802705e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8027062:	fb00 1303 	mla	r3, r0, r3, r1
 8027066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802706a:	930c      	str	r3, [sp, #48]	@ 0x30
 802706c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802706e:	681b      	ldr	r3, [r3, #0]
 8027070:	9311      	str	r3, [sp, #68]	@ 0x44
 8027072:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027074:	685f      	ldr	r7, [r3, #4]
 8027076:	3704      	adds	r7, #4
 8027078:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802707a:	2b00      	cmp	r3, #0
 802707c:	dc03      	bgt.n	8027086 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802707e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8027080:	2b00      	cmp	r3, #0
 8027082:	f340 83cd 	ble.w	8027820 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 8027086:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027088:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802708c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027090:	1e48      	subs	r0, r1, #1
 8027092:	f102 3cff 	add.w	ip, r2, #4294967295
 8027096:	9b08      	ldr	r3, [sp, #32]
 8027098:	2b00      	cmp	r3, #0
 802709a:	f340 816c 	ble.w	8027376 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 802709e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80270a2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80270a6:	d406      	bmi.n	80270b6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80270a8:	4586      	cmp	lr, r0
 80270aa:	da04      	bge.n	80270b6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80270ac:	2b00      	cmp	r3, #0
 80270ae:	db02      	blt.n	80270b6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80270b0:	4563      	cmp	r3, ip
 80270b2:	f2c0 8161 	blt.w	8027378 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80270b6:	f11e 0e01 	adds.w	lr, lr, #1
 80270ba:	f100 8151 	bmi.w	8027360 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80270be:	4571      	cmp	r1, lr
 80270c0:	f2c0 814e 	blt.w	8027360 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80270c4:	3301      	adds	r3, #1
 80270c6:	f100 814b 	bmi.w	8027360 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80270ca:	429a      	cmp	r2, r3
 80270cc:	f2c0 8148 	blt.w	8027360 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80270d0:	9b08      	ldr	r3, [sp, #32]
 80270d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80270d6:	9319      	str	r3, [sp, #100]	@ 0x64
 80270d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80270da:	2b00      	cmp	r3, #0
 80270dc:	f340 8169 	ble.w	80273b2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80270e0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80270e2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80270e6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80270ea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80270ee:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80270f2:	1423      	asrs	r3, r4, #16
 80270f4:	f100 81f7 	bmi.w	80274e6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80270f8:	f100 39ff 	add.w	r9, r0, #4294967295
 80270fc:	454b      	cmp	r3, r9
 80270fe:	f280 81f2 	bge.w	80274e6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8027102:	f1bc 0f00 	cmp.w	ip, #0
 8027106:	f2c0 81ee 	blt.w	80274e6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802710a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802710e:	45cc      	cmp	ip, r9
 8027110:	f280 81e9 	bge.w	80274e6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8027114:	b200      	sxth	r0, r0
 8027116:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027118:	fb0c 3300 	mla	r3, ip, r0, r3
 802711c:	eb05 0903 	add.w	r9, r5, r3
 8027120:	5ceb      	ldrb	r3, [r5, r3]
 8027122:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8027126:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802712a:	2a00      	cmp	r2, #0
 802712c:	f000 8187 	beq.w	802743e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8027130:	f899 c001 	ldrb.w	ip, [r9, #1]
 8027134:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8027138:	950d      	str	r5, [sp, #52]	@ 0x34
 802713a:	0e2d      	lsrs	r5, r5, #24
 802713c:	9514      	str	r5, [sp, #80]	@ 0x50
 802713e:	b179      	cbz	r1, 8027160 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027140:	eb09 0c00 	add.w	ip, r9, r0
 8027144:	f819 0000 	ldrb.w	r0, [r9, r0]
 8027148:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802714c:	900a      	str	r0, [sp, #40]	@ 0x28
 802714e:	0e00      	lsrs	r0, r0, #24
 8027150:	9012      	str	r0, [sp, #72]	@ 0x48
 8027152:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027156:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802715a:	900e      	str	r0, [sp, #56]	@ 0x38
 802715c:	0e00      	lsrs	r0, r0, #24
 802715e:	9015      	str	r0, [sp, #84]	@ 0x54
 8027160:	b292      	uxth	r2, r2
 8027162:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8027164:	b289      	uxth	r1, r1
 8027166:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027168:	fb02 fa01 	mul.w	sl, r2, r1
 802716c:	0112      	lsls	r2, r2, #4
 802716e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8027172:	eba2 090a 	sub.w	r9, r2, sl
 8027176:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802717a:	b289      	uxth	r1, r1
 802717c:	fa1f f989 	uxth.w	r9, r9
 8027180:	1a52      	subs	r2, r2, r1
 8027182:	fb09 f000 	mul.w	r0, r9, r0
 8027186:	b292      	uxth	r2, r2
 8027188:	fb02 000e 	mla	r0, r2, lr, r0
 802718c:	fb01 0005 	mla	r0, r1, r5, r0
 8027190:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027192:	fb0a 0005 	mla	r0, sl, r5, r0
 8027196:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802719a:	2800      	cmp	r0, #0
 802719c:	f000 80d6 	beq.w	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80271a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80271a4:	d01b      	beq.n	80271de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80271a6:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
 80271aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80271ae:	fb0e fb0b 	mul.w	fp, lr, fp
 80271b2:	fb0e fe03 	mul.w	lr, lr, r3
 80271b6:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80271ba:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80271be:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80271c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80271c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80271ca:	445b      	add	r3, fp
 80271cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80271d0:	0a1b      	lsrs	r3, r3, #8
 80271d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80271d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80271da:	ea43 030c 	orr.w	r3, r3, ip
 80271de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80271e0:	2dff      	cmp	r5, #255	@ 0xff
 80271e2:	d021      	beq.n	8027228 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80271e4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80271e6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80271ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80271ec:	fb05 fc0c 	mul.w	ip, r5, ip
 80271f0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80271f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80271f6:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 80271fa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80271fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027200:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027204:	fb05 fb0b 	mul.w	fp, r5, fp
 8027208:	44e6      	add	lr, ip
 802720a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802720e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027212:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027216:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802721a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802721e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027222:	ea4e 050b 	orr.w	r5, lr, fp
 8027226:	950d      	str	r5, [sp, #52]	@ 0x34
 8027228:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802722a:	2dff      	cmp	r5, #255	@ 0xff
 802722c:	d021      	beq.n	8027272 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802722e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027230:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027234:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027236:	fb05 fc0c 	mul.w	ip, r5, ip
 802723a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802723c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027240:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8027244:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027246:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802724a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802724e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027252:	44e6      	add	lr, ip
 8027254:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8027258:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802725c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027260:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027264:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027268:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802726c:	ea4e 050b 	orr.w	r5, lr, fp
 8027270:	950a      	str	r5, [sp, #40]	@ 0x28
 8027272:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027274:	2dff      	cmp	r5, #255	@ 0xff
 8027276:	d021      	beq.n	80272bc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8027278:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802727a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802727e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027280:	fb05 fc0c 	mul.w	ip, r5, ip
 8027284:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027286:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802728a:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 802728e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027290:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027294:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027298:	fb05 fb0b 	mul.w	fp, r5, fp
 802729c:	44e6      	add	lr, ip
 802729e:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80272a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272a6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80272aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272ae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80272b2:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80272b6:	ea4e 050b 	orr.w	r5, lr, fp
 80272ba:	950e      	str	r5, [sp, #56]	@ 0x38
 80272bc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80272be:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80272c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80272c6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80272ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80272cc:	fb09 fc0c 	mul.w	ip, r9, ip
 80272d0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80272d4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80272d8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80272da:	fb01 cc0e 	mla	ip, r1, lr, ip
 80272de:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80272e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80272e4:	fb0a cc0e 	mla	ip, sl, lr, ip
 80272e8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80272ec:	fb09 f90e 	mul.w	r9, r9, lr
 80272f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272f4:	fb02 9303 	mla	r3, r2, r3, r9
 80272f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80272fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80272fe:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
 8027302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027304:	fb01 330b 	mla	r3, r1, fp, r3
 8027308:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802730c:	fb0a 3a01 	mla	sl, sl, r1, r3
 8027310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027312:	4358      	muls	r0, r3
 8027314:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027318:	1c43      	adds	r3, r0, #1
 802731a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802731e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027322:	ea4c 0c0a 	orr.w	ip, ip, sl
 8027326:	1200      	asrs	r0, r0, #8
 8027328:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802732c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8027330:	28ff      	cmp	r0, #255	@ 0xff
 8027332:	b2d9      	uxtb	r1, r3
 8027334:	fa5f fe82 	uxtb.w	lr, r2
 8027338:	f040 808c 	bne.w	8027454 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 802733c:	f888 c000 	strb.w	ip, [r8]
 8027340:	f888 2001 	strb.w	r2, [r8, #1]
 8027344:	f888 3002 	strb.w	r3, [r8, #2]
 8027348:	f888 0003 	strb.w	r0, [r8, #3]
 802734c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802734e:	f108 0804 	add.w	r8, r8, #4
 8027352:	441c      	add	r4, r3
 8027354:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027356:	441e      	add	r6, r3
 8027358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802735a:	3b01      	subs	r3, #1
 802735c:	9319      	str	r3, [sp, #100]	@ 0x64
 802735e:	e6bb      	b.n	80270d8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027360:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027362:	441c      	add	r4, r3
 8027364:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027366:	441e      	add	r6, r3
 8027368:	9b08      	ldr	r3, [sp, #32]
 802736a:	3b01      	subs	r3, #1
 802736c:	9308      	str	r3, [sp, #32]
 802736e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027370:	3304      	adds	r3, #4
 8027372:	930c      	str	r3, [sp, #48]	@ 0x30
 8027374:	e68f      	b.n	8027096 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027376:	d023      	beq.n	80273c0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027378:	9b08      	ldr	r3, [sp, #32]
 802737a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802737c:	3b01      	subs	r3, #1
 802737e:	fb00 4003 	mla	r0, r0, r3, r4
 8027382:	1400      	asrs	r0, r0, #16
 8027384:	f53f aea4 	bmi.w	80270d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027388:	3901      	subs	r1, #1
 802738a:	4288      	cmp	r0, r1
 802738c:	f6bf aea0 	bge.w	80270d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027390:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8027392:	fb01 6303 	mla	r3, r1, r3, r6
 8027396:	141b      	asrs	r3, r3, #16
 8027398:	f53f ae9a 	bmi.w	80270d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802739c:	3a01      	subs	r2, #1
 802739e:	4293      	cmp	r3, r2
 80273a0:	f6bf ae96 	bge.w	80270d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80273a4:	9b08      	ldr	r3, [sp, #32]
 80273a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80273a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80273aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	f300 80ba 	bgt.w	8027526 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80273b2:	9b08      	ldr	r3, [sp, #32]
 80273b4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80273b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80273ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80273be:	930c      	str	r3, [sp, #48]	@ 0x30
 80273c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80273c2:	2b00      	cmp	r3, #0
 80273c4:	f340 822c 	ble.w	8027820 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 80273c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80273cc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80273ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80273d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80273d6:	eef0 6a62 	vmov.f32	s13, s5
 80273da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80273de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80273e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80273e6:	ee16 4a90 	vmov	r4, s13
 80273ea:	eef0 6a43 	vmov.f32	s13, s6
 80273ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80273f2:	ee16 6a90 	vmov	r6, s13
 80273f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80273fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80273fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027402:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027406:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802740a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802740e:	ee12 2a90 	vmov	r2, s5
 8027412:	eef0 2a47 	vmov.f32	s5, s14
 8027416:	fb92 f3f3 	sdiv	r3, r2, r3
 802741a:	ee13 2a10 	vmov	r2, s6
 802741e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8027420:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027422:	eeb0 3a67 	vmov.f32	s6, s15
 8027426:	fb92 f3f3 	sdiv	r3, r2, r3
 802742a:	932a      	str	r3, [sp, #168]	@ 0xa8
 802742c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802742e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027430:	3b01      	subs	r3, #1
 8027432:	9318      	str	r3, [sp, #96]	@ 0x60
 8027434:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027436:	bf08      	it	eq
 8027438:	4613      	moveq	r3, r2
 802743a:	9308      	str	r3, [sp, #32]
 802743c:	e61c      	b.n	8027078 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802743e:	2900      	cmp	r1, #0
 8027440:	f43f ae8e 	beq.w	8027160 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027444:	f819 0000 	ldrb.w	r0, [r9, r0]
 8027448:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802744c:	900a      	str	r0, [sp, #40]	@ 0x28
 802744e:	0e00      	lsrs	r0, r0, #24
 8027450:	9012      	str	r0, [sp, #72]	@ 0x48
 8027452:	e685      	b.n	8027160 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027454:	b2c3      	uxtb	r3, r0
 8027456:	2800      	cmp	r0, #0
 8027458:	f43f af78 	beq.w	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802745c:	f898 0003 	ldrb.w	r0, [r8, #3]
 8027460:	fa5f fc8c 	uxtb.w	ip, ip
 8027464:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027466:	fb03 f900 	mul.w	r9, r3, r0
 802746a:	4403      	add	r3, r0
 802746c:	f109 0201 	add.w	r2, r9, #1
 8027470:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8027474:	1212      	asrs	r2, r2, #8
 8027476:	1a80      	subs	r0, r0, r2
 8027478:	1a9b      	subs	r3, r3, r2
 802747a:	f898 2000 	ldrb.w	r2, [r8]
 802747e:	b2db      	uxtb	r3, r3
 8027480:	4342      	muls	r2, r0
 8027482:	f888 3003 	strb.w	r3, [r8, #3]
 8027486:	fb05 220c 	mla	r2, r5, ip, r2
 802748a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802748c:	fb92 f2f3 	sdiv	r2, r2, r3
 8027490:	fb15 fe0e 	smulbb	lr, r5, lr
 8027494:	2aff      	cmp	r2, #255	@ 0xff
 8027496:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027498:	bfd4      	ite	le
 802749a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802749e:	22ff      	movgt	r2, #255	@ 0xff
 80274a0:	fb15 f101 	smulbb	r1, r5, r1
 80274a4:	bfd8      	it	le
 80274a6:	b2d2      	uxtble	r2, r2
 80274a8:	f888 2000 	strb.w	r2, [r8]
 80274ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 80274b0:	fb00 e202 	mla	r2, r0, r2, lr
 80274b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80274b8:	2aff      	cmp	r2, #255	@ 0xff
 80274ba:	bfd6      	itet	le
 80274bc:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80274c0:	22ff      	movgt	r2, #255	@ 0xff
 80274c2:	b2d2      	uxtble	r2, r2
 80274c4:	f888 2001 	strb.w	r2, [r8, #1]
 80274c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80274cc:	fb00 1202 	mla	r2, r0, r2, r1
 80274d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80274d4:	2aff      	cmp	r2, #255	@ 0xff
 80274d6:	bfd6      	itet	le
 80274d8:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80274dc:	22ff      	movgt	r2, #255	@ 0xff
 80274de:	b2d2      	uxtble	r2, r2
 80274e0:	f888 2002 	strb.w	r2, [r8, #2]
 80274e4:	e732      	b.n	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80274e6:	f113 0901 	adds.w	r9, r3, #1
 80274ea:	f53f af2f 	bmi.w	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80274ee:	4548      	cmp	r0, r9
 80274f0:	f6ff af2c 	blt.w	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80274f4:	f11c 0901 	adds.w	r9, ip, #1
 80274f8:	f53f af28 	bmi.w	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80274fc:	45ce      	cmp	lr, r9
 80274fe:	f6ff af25 	blt.w	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027502:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027504:	b200      	sxth	r0, r0
 8027506:	9302      	str	r3, [sp, #8]
 8027508:	fa0f f38e 	sxth.w	r3, lr
 802750c:	9000      	str	r0, [sp, #0]
 802750e:	9301      	str	r3, [sp, #4]
 8027510:	463b      	mov	r3, r7
 8027512:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8027514:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027518:	e9cd c203 	strd	ip, r2, [sp, #12]
 802751c:	4641      	mov	r1, r8
 802751e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027520:	f7ff fc30 	bl	8026d84 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8027524:	e712      	b.n	802734c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027526:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027528:	ea4f 4e24 	mov.w	lr, r4, asr #16
 802752c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802752e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027532:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8027536:	1433      	asrs	r3, r6, #16
 8027538:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802753c:	fb0c e303 	mla	r3, ip, r3, lr
 8027540:	eb05 0e03 	add.w	lr, r5, r3
 8027544:	5ceb      	ldrb	r3, [r5, r3]
 8027546:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 802754a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802754e:	2a00      	cmp	r2, #0
 8027550:	f000 8116 	beq.w	8027780 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8027554:	f89e 9001 	ldrb.w	r9, [lr, #1]
 8027558:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 802755c:	950f      	str	r5, [sp, #60]	@ 0x3c
 802755e:	0e2d      	lsrs	r5, r5, #24
 8027560:	9516      	str	r5, [sp, #88]	@ 0x58
 8027562:	b178      	cbz	r0, 8027584 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027564:	eb0e 090c 	add.w	r9, lr, ip
 8027568:	f81e c00c 	ldrb.w	ip, [lr, ip]
 802756c:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8027570:	f899 c001 	ldrb.w	ip, [r9, #1]
 8027574:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027576:	0e2d      	lsrs	r5, r5, #24
 8027578:	9513      	str	r5, [sp, #76]	@ 0x4c
 802757a:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802757e:	9510      	str	r5, [sp, #64]	@ 0x40
 8027580:	0e2d      	lsrs	r5, r5, #24
 8027582:	9517      	str	r5, [sp, #92]	@ 0x5c
 8027584:	b292      	uxth	r2, r2
 8027586:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027588:	b280      	uxth	r0, r0
 802758a:	fb02 fa00 	mul.w	sl, r2, r0
 802758e:	0112      	lsls	r2, r2, #4
 8027590:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027594:	eba2 090a 	sub.w	r9, r2, sl
 8027598:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802759c:	fa1f fc80 	uxth.w	ip, r0
 80275a0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80275a2:	fa1f f989 	uxth.w	r9, r9
 80275a6:	eba2 020c 	sub.w	r2, r2, ip
 80275aa:	fb09 f000 	mul.w	r0, r9, r0
 80275ae:	b292      	uxth	r2, r2
 80275b0:	fb02 0008 	mla	r0, r2, r8, r0
 80275b4:	fb0c 0005 	mla	r0, ip, r5, r0
 80275b8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80275ba:	fb0a 0005 	mla	r0, sl, r5, r0
 80275be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80275c2:	2800      	cmp	r0, #0
 80275c4:	f000 80d3 	beq.w	802776e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80275c8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80275cc:	d01b      	beq.n	8027606 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80275ce:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
 80275d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80275d6:	fb08 fb0b 	mul.w	fp, r8, fp
 80275da:	fb08 f803 	mul.w	r8, r8, r3
 80275de:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80275e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80275e6:	f508 7e80 	add.w	lr, r8, #256	@ 0x100
 80275ea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80275ee:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 80275f2:	445b      	add	r3, fp
 80275f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275f8:	0a1b      	lsrs	r3, r3, #8
 80275fa:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80275fe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027602:	ea43 030e 	orr.w	r3, r3, lr
 8027606:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027608:	2dff      	cmp	r5, #255	@ 0xff
 802760a:	d021      	beq.n	8027650 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802760c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802760e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027612:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027614:	fb05 fe0e 	mul.w	lr, r5, lr
 8027618:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802761a:	ea4f 281e 	mov.w	r8, lr, lsr #8
 802761e:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8027622:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027624:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027628:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802762c:	fb05 fb0b 	mul.w	fp, r5, fp
 8027630:	44f0      	add	r8, lr
 8027632:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 8027636:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802763a:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 802763e:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8027642:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027646:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802764a:	ea48 050b 	orr.w	r5, r8, fp
 802764e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027650:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027652:	2dff      	cmp	r5, #255	@ 0xff
 8027654:	d021      	beq.n	802769a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8027656:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027658:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802765c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802765e:	fb05 fe0e 	mul.w	lr, r5, lr
 8027662:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027664:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8027668:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 802766c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802766e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027672:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8027676:	fb05 fb0b 	mul.w	fp, r5, fp
 802767a:	44f0      	add	r8, lr
 802767c:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 8027680:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027684:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8027688:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802768c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027690:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027694:	ea48 050b 	orr.w	r5, r8, fp
 8027698:	950b      	str	r5, [sp, #44]	@ 0x2c
 802769a:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 802769c:	2dff      	cmp	r5, #255	@ 0xff
 802769e:	d021      	beq.n	80276e4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 80276a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80276a2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80276a6:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80276a8:	fb05 fe0e 	mul.w	lr, r5, lr
 80276ac:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80276ae:	ea4f 281e 	mov.w	r8, lr, lsr #8
 80276b2:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 80276b6:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80276b8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80276bc:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80276c0:	fb05 fb0b 	mul.w	fp, r5, fp
 80276c4:	44f0      	add	r8, lr
 80276c6:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 80276ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80276ce:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 80276d2:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80276d6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80276da:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80276de:	ea48 050b 	orr.w	r5, r8, fp
 80276e2:	9510      	str	r5, [sp, #64]	@ 0x40
 80276e4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80276e6:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 80276ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80276ee:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80276f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80276f4:	fb09 fe0e 	mul.w	lr, r9, lr
 80276f8:	fb02 ee08 	mla	lr, r2, r8, lr
 80276fc:	f005 18ff 	and.w	r8, r5, #16711935	@ 0xff00ff
 8027700:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027702:	fb0c ee08 	mla	lr, ip, r8, lr
 8027706:	f005 18ff 	and.w	r8, r5, #16711935	@ 0xff00ff
 802770a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802770c:	fb0a ee08 	mla	lr, sl, r8, lr
 8027710:	f405 487f 	and.w	r8, r5, #65280	@ 0xff00
 8027714:	fb09 f908 	mul.w	r9, r9, r8
 8027718:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802771c:	fb02 9303 	mla	r3, r2, r3, r9
 8027720:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027722:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027726:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
 802772a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802772c:	fb0c 330b 	mla	r3, ip, fp, r3
 8027730:	f402 487f 	and.w	r8, r2, #65280	@ 0xff00
 8027734:	fb0a 3808 	mla	r8, sl, r8, r3
 8027738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802773a:	4358      	muls	r0, r3
 802773c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027740:	1c43      	adds	r3, r0, #1
 8027742:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027746:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802774a:	ea4e 0e08 	orr.w	lr, lr, r8
 802774e:	1200      	asrs	r0, r0, #8
 8027750:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8027754:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8027758:	28ff      	cmp	r0, #255	@ 0xff
 802775a:	fa5f fc83 	uxtb.w	ip, r3
 802775e:	fa5f f882 	uxtb.w	r8, r2
 8027762:	d118      	bne.n	8027796 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8027764:	f881 e000 	strb.w	lr, [r1]
 8027768:	704a      	strb	r2, [r1, #1]
 802776a:	708b      	strb	r3, [r1, #2]
 802776c:	70c8      	strb	r0, [r1, #3]
 802776e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027770:	3104      	adds	r1, #4
 8027772:	441c      	add	r4, r3
 8027774:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027776:	441e      	add	r6, r3
 8027778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802777a:	3b01      	subs	r3, #1
 802777c:	9319      	str	r3, [sp, #100]	@ 0x64
 802777e:	e614      	b.n	80273aa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8027780:	2800      	cmp	r0, #0
 8027782:	f43f aeff 	beq.w	8027584 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027786:	f81e c00c 	ldrb.w	ip, [lr, ip]
 802778a:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802778e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027790:	0e2d      	lsrs	r5, r5, #24
 8027792:	9513      	str	r5, [sp, #76]	@ 0x4c
 8027794:	e6f6      	b.n	8027584 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027796:	b2c3      	uxtb	r3, r0
 8027798:	2800      	cmp	r0, #0
 802779a:	d0e8      	beq.n	802776e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802779c:	78c8      	ldrb	r0, [r1, #3]
 802779e:	fa5f fe8e 	uxtb.w	lr, lr
 80277a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80277a4:	fb03 f900 	mul.w	r9, r3, r0
 80277a8:	4403      	add	r3, r0
 80277aa:	f109 0201 	add.w	r2, r9, #1
 80277ae:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 80277b2:	1212      	asrs	r2, r2, #8
 80277b4:	1a9b      	subs	r3, r3, r2
 80277b6:	1a82      	subs	r2, r0, r2
 80277b8:	7808      	ldrb	r0, [r1, #0]
 80277ba:	b2db      	uxtb	r3, r3
 80277bc:	4350      	muls	r0, r2
 80277be:	70cb      	strb	r3, [r1, #3]
 80277c0:	fb05 0e0e 	mla	lr, r5, lr, r0
 80277c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80277c6:	7848      	ldrb	r0, [r1, #1]
 80277c8:	fb15 f808 	smulbb	r8, r5, r8
 80277cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80277ce:	fb9e fef3 	sdiv	lr, lr, r3
 80277d2:	fb02 8000 	mla	r0, r2, r0, r8
 80277d6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80277da:	fb15 fc0c 	smulbb	ip, r5, ip
 80277de:	bfd4      	ite	le
 80277e0:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 80277e4:	f04f 0eff 	movgt.w	lr, #255	@ 0xff
 80277e8:	fb90 f0f3 	sdiv	r0, r0, r3
 80277ec:	bfd8      	it	le
 80277ee:	fa5f fe8e 	uxtble.w	lr, lr
 80277f2:	28ff      	cmp	r0, #255	@ 0xff
 80277f4:	bfd4      	ite	le
 80277f6:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80277fa:	20ff      	movgt	r0, #255	@ 0xff
 80277fc:	f881 e000 	strb.w	lr, [r1]
 8027800:	bfd8      	it	le
 8027802:	b2c0      	uxtble	r0, r0
 8027804:	7048      	strb	r0, [r1, #1]
 8027806:	7888      	ldrb	r0, [r1, #2]
 8027808:	fb02 c200 	mla	r2, r2, r0, ip
 802780c:	fb92 f2f3 	sdiv	r2, r2, r3
 8027810:	2aff      	cmp	r2, #255	@ 0xff
 8027812:	bfd6      	itet	le
 8027814:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027818:	22ff      	movgt	r2, #255	@ 0xff
 802781a:	b2d2      	uxtble	r2, r2
 802781c:	708a      	strb	r2, [r1, #2]
 802781e:	e7a6      	b.n	802776e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027820:	b01d      	add	sp, #116	@ 0x74
 8027822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027826 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8027826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802782a:	b087      	sub	sp, #28
 802782c:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 8027830:	f89d 0058 	ldrb.w	r0, [sp, #88]	@ 0x58
 8027834:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	@ 0x40
 8027838:	2e00      	cmp	r6, #0
 802783a:	9002      	str	r0, [sp, #8]
 802783c:	fb06 8005 	mla	r0, r6, r5, r8
 8027840:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8027844:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8027848:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 802784c:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8027850:	9703      	str	r7, [sp, #12]
 8027852:	eb03 0700 	add.w	r7, r3, r0
 8027856:	9704      	str	r7, [sp, #16]
 8027858:	f2c0 8133 	blt.w	8027ac2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 802785c:	45b3      	cmp	fp, r6
 802785e:	f340 8130 	ble.w	8027ac2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8027862:	f1b8 0f00 	cmp.w	r8, #0
 8027866:	f2c0 8128 	blt.w	8027aba <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 802786a:	4545      	cmp	r5, r8
 802786c:	f340 8125 	ble.w	8027aba <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8027870:	f813 c000 	ldrb.w	ip, [r3, r0]
 8027874:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8027878:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 802787c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027880:	f423 6afc 	bic.w	sl, r3, #2016	@ 0x7e0
 8027884:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027888:	fb0c f303 	mul.w	r3, ip, r3
 802788c:	fb0a f202 	mul.w	r2, sl, r2
 8027890:	f103 0a20 	add.w	sl, r3, #32
 8027894:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8027898:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 802789c:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 80278a0:	4402      	add	r2, r0
 80278a2:	0a1b      	lsrs	r3, r3, #8
 80278a4:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 80278a8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80278ac:	ea47 0a03 	orr.w	sl, r7, r3
 80278b0:	f118 0301 	adds.w	r3, r8, #1
 80278b4:	f100 810a 	bmi.w	8027acc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 80278b8:	429d      	cmp	r5, r3
 80278ba:	f340 8107 	ble.w	8027acc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 80278be:	2c00      	cmp	r4, #0
 80278c0:	f000 8107 	beq.w	8027ad2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 80278c4:	9b04      	ldr	r3, [sp, #16]
 80278c6:	785a      	ldrb	r2, [r3, #1]
 80278c8:	9b03      	ldr	r3, [sp, #12]
 80278ca:	10d7      	asrs	r7, r2, #3
 80278cc:	885b      	ldrh	r3, [r3, #2]
 80278ce:	f423 60fc 	bic.w	r0, r3, #2016	@ 0x7e0
 80278d2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80278d6:	4347      	muls	r7, r0
 80278d8:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80278dc:	4353      	muls	r3, r2
 80278de:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 80278e2:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 80278e6:	444f      	add	r7, r9
 80278e8:	f103 0920 	add.w	r9, r3, #32
 80278ec:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 80278f0:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 80278f4:	0a1b      	lsrs	r3, r3, #8
 80278f6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80278fa:	4303      	orrs	r3, r0
 80278fc:	9301      	str	r3, [sp, #4]
 80278fe:	3601      	adds	r6, #1
 8027900:	f100 80ed 	bmi.w	8027ade <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8027904:	45b3      	cmp	fp, r6
 8027906:	f340 80ea 	ble.w	8027ade <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 802790a:	f1be 0f00 	cmp.w	lr, #0
 802790e:	f000 80eb 	beq.w	8027ae8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8027912:	f1b8 0f00 	cmp.w	r8, #0
 8027916:	f2c0 80df 	blt.w	8027ad8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 802791a:	4545      	cmp	r5, r8
 802791c:	f340 80dc 	ble.w	8027ad8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8027920:	9b04      	ldr	r3, [sp, #16]
 8027922:	5d5f      	ldrb	r7, [r3, r5]
 8027924:	9b03      	ldr	r3, [sp, #12]
 8027926:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802792a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 802792e:	f423 66fc 	bic.w	r6, r3, #2016	@ 0x7e0
 8027932:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027936:	fb09 f906 	mul.w	r9, r9, r6
 802793a:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802793e:	437b      	muls	r3, r7
 8027940:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8027944:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8027948:	44d9      	add	r9, fp
 802794a:	f103 0b20 	add.w	fp, r3, #32
 802794e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8027952:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8027956:	0a1b      	lsrs	r3, r3, #8
 8027958:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802795c:	431e      	orrs	r6, r3
 802795e:	f118 0801 	adds.w	r8, r8, #1
 8027962:	f100 80c6 	bmi.w	8027af2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8027966:	4545      	cmp	r5, r8
 8027968:	f340 80c3 	ble.w	8027af2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 802796c:	2c00      	cmp	r4, #0
 802796e:	f000 80c3 	beq.w	8027af8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8027972:	3501      	adds	r5, #1
 8027974:	9b04      	ldr	r3, [sp, #16]
 8027976:	9803      	ldr	r0, [sp, #12]
 8027978:	5d5b      	ldrb	r3, [r3, r5]
 802797a:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 802797e:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8027982:	f428 65fc 	bic.w	r5, r8, #2016	@ 0x7e0
 8027986:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802798a:	fb09 f905 	mul.w	r9, r9, r5
 802798e:	f64f 051f 	movw	r5, #63519	@ 0xf81f
 8027992:	fb03 f808 	mul.w	r8, r3, r8
 8027996:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 802799a:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 802799e:	44d9      	add	r9, fp
 80279a0:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 80279a4:	f108 0920 	add.w	r9, r8, #32
 80279a8:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80279ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80279b0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80279b4:	ea45 0508 	orr.w	r5, r5, r8
 80279b8:	fa1f f984 	uxth.w	r9, r4
 80279bc:	fa1f f88e 	uxth.w	r8, lr
 80279c0:	fb09 f008 	mul.w	r0, r9, r8
 80279c4:	9003      	str	r0, [sp, #12]
 80279c6:	ea4f 1009 	mov.w	r0, r9, lsl #4
 80279ca:	ea4f 490a 	mov.w	r9, sl, lsl #16
 80279ce:	f42a 6afc 	bic.w	sl, sl, #2016	@ 0x7e0
 80279d2:	9004      	str	r0, [sp, #16]
 80279d4:	9803      	ldr	r0, [sp, #12]
 80279d6:	f009 69fc 	and.w	r9, r9, #132120576	@ 0x7e00000
 80279da:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 80279de:	ea49 090a 	orr.w	r9, r9, sl
 80279e2:	f1ce 0a10 	rsb	sl, lr, #16
 80279e6:	fa1f f088 	uxth.w	r0, r8
 80279ea:	fb14 f80e 	smulbb	r8, r4, lr
 80279ee:	ebaa 0a04 	sub.w	sl, sl, r4
 80279f2:	9005      	str	r0, [sp, #20]
 80279f4:	9801      	ldr	r0, [sp, #4]
 80279f6:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 80279fa:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80279fe:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027a02:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8027a06:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027a0a:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8027a0e:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8027a12:	ea4b 0000 	orr.w	r0, fp, r0
 8027a16:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027a1a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027a1e:	4360      	muls	r0, r4
 8027a20:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027a24:	9c04      	ldr	r4, [sp, #16]
 8027a26:	ea4b 0505 	orr.w	r5, fp, r5
 8027a2a:	fb0a 0009 	mla	r0, sl, r9, r0
 8027a2e:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8027a32:	fb08 0005 	mla	r0, r8, r5, r0
 8027a36:	0435      	lsls	r5, r6, #16
 8027a38:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8027a3c:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8027a40:	432e      	orrs	r6, r5
 8027a42:	9d05      	ldr	r5, [sp, #20]
 8027a44:	fb0e 0e06 	mla	lr, lr, r6, r0
 8027a48:	1b64      	subs	r4, r4, r5
 8027a4a:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8027a4e:	b2a4      	uxth	r4, r4
 8027a50:	1bad      	subs	r5, r5, r6
 8027a52:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8027a56:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027a5a:	b2ad      	uxth	r5, r5
 8027a5c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027a60:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027a64:	436a      	muls	r2, r5
 8027a66:	ea40 0e0e 	orr.w	lr, r0, lr
 8027a6a:	fb0c 2204 	mla	r2, ip, r4, r2
 8027a6e:	9c05      	ldr	r4, [sp, #20]
 8027a70:	fa1f f08e 	uxth.w	r0, lr
 8027a74:	fb04 2707 	mla	r7, r4, r7, r2
 8027a78:	9a02      	ldr	r2, [sp, #8]
 8027a7a:	1205      	asrs	r5, r0, #8
 8027a7c:	fb06 7303 	mla	r3, r6, r3, r7
 8027a80:	10c7      	asrs	r7, r0, #3
 8027a82:	00c0      	lsls	r0, r0, #3
 8027a84:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027a88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a8c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027a90:	b2c0      	uxtb	r0, r0
 8027a92:	4353      	muls	r3, r2
 8027a94:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8027a98:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8027a9c:	1c5a      	adds	r2, r3, #1
 8027a9e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8027aa2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027aa6:	121b      	asrs	r3, r3, #8
 8027aa8:	2bff      	cmp	r3, #255	@ 0xff
 8027aaa:	d128      	bne.n	8027afe <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 8027aac:	7008      	strb	r0, [r1, #0]
 8027aae:	704f      	strb	r7, [r1, #1]
 8027ab0:	708d      	strb	r5, [r1, #2]
 8027ab2:	70cb      	strb	r3, [r1, #3]
 8027ab4:	b007      	add	sp, #28
 8027ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027aba:	f04f 0c00 	mov.w	ip, #0
 8027abe:	46e2      	mov	sl, ip
 8027ac0:	e6f6      	b.n	80278b0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8027ac2:	2200      	movs	r2, #0
 8027ac4:	4694      	mov	ip, r2
 8027ac6:	9201      	str	r2, [sp, #4]
 8027ac8:	4692      	mov	sl, r2
 8027aca:	e718      	b.n	80278fe <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027acc:	2200      	movs	r2, #0
 8027ace:	9201      	str	r2, [sp, #4]
 8027ad0:	e715      	b.n	80278fe <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027ad2:	4622      	mov	r2, r4
 8027ad4:	9401      	str	r4, [sp, #4]
 8027ad6:	e712      	b.n	80278fe <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027ad8:	2700      	movs	r7, #0
 8027ada:	463e      	mov	r6, r7
 8027adc:	e73f      	b.n	802795e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8027ade:	2300      	movs	r3, #0
 8027ae0:	461f      	mov	r7, r3
 8027ae2:	461d      	mov	r5, r3
 8027ae4:	461e      	mov	r6, r3
 8027ae6:	e767      	b.n	80279b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027ae8:	4673      	mov	r3, lr
 8027aea:	4677      	mov	r7, lr
 8027aec:	4675      	mov	r5, lr
 8027aee:	4676      	mov	r6, lr
 8027af0:	e762      	b.n	80279b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027af2:	2300      	movs	r3, #0
 8027af4:	461d      	mov	r5, r3
 8027af6:	e75f      	b.n	80279b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027af8:	4623      	mov	r3, r4
 8027afa:	4625      	mov	r5, r4
 8027afc:	e75c      	b.n	80279b8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027afe:	b2dc      	uxtb	r4, r3
 8027b00:	2b00      	cmp	r3, #0
 8027b02:	d0d7      	beq.n	8027ab4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8027b04:	f891 c003 	ldrb.w	ip, [r1, #3]
 8027b08:	fb04 f20c 	mul.w	r2, r4, ip
 8027b0c:	eb0c 0304 	add.w	r3, ip, r4
 8027b10:	780c      	ldrb	r4, [r1, #0]
 8027b12:	1c56      	adds	r6, r2, #1
 8027b14:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8027b18:	1232      	asrs	r2, r6, #8
 8027b1a:	ebac 0602 	sub.w	r6, ip, r2
 8027b1e:	1a9b      	subs	r3, r3, r2
 8027b20:	9a02      	ldr	r2, [sp, #8]
 8027b22:	b2db      	uxtb	r3, r3
 8027b24:	fb10 f002 	smulbb	r0, r0, r2
 8027b28:	9a02      	ldr	r2, [sp, #8]
 8027b2a:	fb06 0404 	mla	r4, r6, r4, r0
 8027b2e:	fb12 f707 	smulbb	r7, r2, r7
 8027b32:	7848      	ldrb	r0, [r1, #1]
 8027b34:	788a      	ldrb	r2, [r1, #2]
 8027b36:	fb06 7000 	mla	r0, r6, r0, r7
 8027b3a:	fb94 f4f3 	sdiv	r4, r4, r3
 8027b3e:	fb90 f0f3 	sdiv	r0, r0, r3
 8027b42:	2cff      	cmp	r4, #255	@ 0xff
 8027b44:	bfd6      	itet	le
 8027b46:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8027b4a:	24ff      	movgt	r4, #255	@ 0xff
 8027b4c:	b2e4      	uxtble	r4, r4
 8027b4e:	28ff      	cmp	r0, #255	@ 0xff
 8027b50:	bfd4      	ite	le
 8027b52:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027b56:	20ff      	movgt	r0, #255	@ 0xff
 8027b58:	700c      	strb	r4, [r1, #0]
 8027b5a:	bfd8      	it	le
 8027b5c:	b2c0      	uxtble	r0, r0
 8027b5e:	7048      	strb	r0, [r1, #1]
 8027b60:	9802      	ldr	r0, [sp, #8]
 8027b62:	fb10 f505 	smulbb	r5, r0, r5
 8027b66:	fb06 5202 	mla	r2, r6, r2, r5
 8027b6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8027b6e:	2aff      	cmp	r2, #255	@ 0xff
 8027b70:	bfd6      	itet	le
 8027b72:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027b76:	22ff      	movgt	r2, #255	@ 0xff
 8027b78:	b2d2      	uxtble	r2, r2
 8027b7a:	708a      	strb	r2, [r1, #2]
 8027b7c:	e799      	b.n	8027ab2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08027b7e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b82:	b097      	sub	sp, #92	@ 0x5c
 8027b84:	9214      	str	r2, [sp, #80]	@ 0x50
 8027b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b88:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027b8a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027b8e:	9015      	str	r0, [sp, #84]	@ 0x54
 8027b90:	9112      	str	r1, [sp, #72]	@ 0x48
 8027b92:	6850      	ldr	r0, [r2, #4]
 8027b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b96:	6812      	ldr	r2, [r2, #0]
 8027b98:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027b9c:	fb00 1303 	mla	r3, r0, r3, r1
 8027ba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027ba6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027ba8:	681b      	ldr	r3, [r3, #0]
 8027baa:	930c      	str	r3, [sp, #48]	@ 0x30
 8027bac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027bae:	685b      	ldr	r3, [r3, #4]
 8027bb0:	930d      	str	r3, [sp, #52]	@ 0x34
 8027bb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027bb4:	2b00      	cmp	r3, #0
 8027bb6:	dc03      	bgt.n	8027bc0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8027bb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027bba:	2b00      	cmp	r3, #0
 8027bbc:	f340 8407 	ble.w	80283ce <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8027bc0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027bc2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027bc6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027bca:	1e48      	subs	r0, r1, #1
 8027bcc:	1e55      	subs	r5, r2, #1
 8027bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	f340 81b7 	ble.w	8027f44 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8027bd6:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8027bd8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027bda:	1436      	asrs	r6, r6, #16
 8027bdc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027be0:	d406      	bmi.n	8027bf0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027be2:	4286      	cmp	r6, r0
 8027be4:	da04      	bge.n	8027bf0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027be6:	2b00      	cmp	r3, #0
 8027be8:	db02      	blt.n	8027bf0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027bea:	42ab      	cmp	r3, r5
 8027bec:	f2c0 81ab 	blt.w	8027f46 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027bf0:	3601      	adds	r6, #1
 8027bf2:	f100 8198 	bmi.w	8027f26 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027bf6:	42b1      	cmp	r1, r6
 8027bf8:	f2c0 8195 	blt.w	8027f26 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027bfc:	3301      	adds	r3, #1
 8027bfe:	f100 8192 	bmi.w	8027f26 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027c02:	429a      	cmp	r2, r3
 8027c04:	f2c0 818f 	blt.w	8027f26 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c0a:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8027c0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027c10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027c12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027c14:	2b00      	cmp	r3, #0
 8027c16:	f340 81b7 	ble.w	8027f88 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8027c1a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027c1c:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8027c1e:	1418      	asrs	r0, r3, #16
 8027c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027c22:	1436      	asrs	r6, r6, #16
 8027c24:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027c28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027c2a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027c2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027c30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027c34:	f100 820f 	bmi.w	8028056 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027c38:	f102 3eff 	add.w	lr, r2, #4294967295
 8027c3c:	4576      	cmp	r6, lr
 8027c3e:	f280 820a 	bge.w	8028056 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027c42:	2800      	cmp	r0, #0
 8027c44:	f2c0 8207 	blt.w	8028056 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027c48:	f103 3eff 	add.w	lr, r3, #4294967295
 8027c4c:	4570      	cmp	r0, lr
 8027c4e:	f280 8202 	bge.w	8028056 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027c52:	b212      	sxth	r2, r2
 8027c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027c56:	fa1f fe81 	uxth.w	lr, r1
 8027c5a:	fb00 6002 	mla	r0, r0, r2, r6
 8027c5e:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8027c62:	eb03 0a00 	add.w	sl, r3, r0
 8027c66:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027c6a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8027c6e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027c72:	b29b      	uxth	r3, r3
 8027c74:	f1bc 0f00 	cmp.w	ip, #0
 8027c78:	f000 81cc 	beq.w	8028014 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8027c7c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027c80:	eb0a 0b02 	add.w	fp, sl, r2
 8027c84:	fa1f fa8c 	uxth.w	sl, ip
 8027c88:	940e      	str	r4, [sp, #56]	@ 0x38
 8027c8a:	fb0a fe0e 	mul.w	lr, sl, lr
 8027c8e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027c92:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027c96:	eba6 060e 	sub.w	r6, r6, lr
 8027c9a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8027c9c:	fa1f fa8a 	uxth.w	sl, sl
 8027ca0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027ca2:	b2b6      	uxth	r6, r6
 8027ca4:	eba3 030a 	sub.w	r3, r3, sl
 8027ca8:	fb08 f606 	mul.w	r6, r8, r6
 8027cac:	b29b      	uxth	r3, r3
 8027cae:	fb09 6303 	mla	r3, r9, r3, r6
 8027cb2:	fb0a 3304 	mla	r3, sl, r4, r3
 8027cb6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027cb8:	fb0e 3304 	mla	r3, lr, r4, r3
 8027cbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027cc0:	2b00      	cmp	r3, #0
 8027cc2:	f000 8123 	beq.w	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027cc6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027cc8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027ccc:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8027cd0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027cd4:	f000 81a3 	beq.w	802801e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 8027cd8:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027cdc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027ce0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027ce4:	fb0a fe0e 	mul.w	lr, sl, lr
 8027ce8:	fb09 f000 	mul.w	r0, r9, r0
 8027cec:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8027cf0:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027cf4:	f100 0b20 	add.w	fp, r0, #32
 8027cf8:	44ce      	add	lr, r9
 8027cfa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027cfe:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8027d02:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d06:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027d0a:	ea4e 0909 	orr.w	r9, lr, r9
 8027d0e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027d12:	8870      	ldrh	r0, [r6, #2]
 8027d14:	d019      	beq.n	8027d4a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8027d16:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027d1a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027d1e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027d22:	fb0a fe0e 	mul.w	lr, sl, lr
 8027d26:	fb08 f800 	mul.w	r8, r8, r0
 8027d2a:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8027d2e:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027d32:	f108 0b20 	add.w	fp, r8, #32
 8027d36:	4486      	add	lr, r0
 8027d38:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027d3c:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8027d40:	0a00      	lsrs	r0, r0, #8
 8027d42:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027d46:	ea4e 0000 	orr.w	r0, lr, r0
 8027d4a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027d4e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027d52:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027d56:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027d5a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027d5e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027d62:	ea4e 0909 	orr.w	r9, lr, r9
 8027d66:	ea4a 0000 	orr.w	r0, sl, r0
 8027d6a:	f1bc 0f00 	cmp.w	ip, #0
 8027d6e:	f000 8158 	beq.w	8028022 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8027d72:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8027d76:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027d78:	3a01      	subs	r2, #1
 8027d7a:	2cff      	cmp	r4, #255	@ 0xff
 8027d7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027d80:	f102 0202 	add.w	r2, r2, #2
 8027d84:	eb06 0e02 	add.w	lr, r6, r2
 8027d88:	5ab2      	ldrh	r2, [r6, r2]
 8027d8a:	d018      	beq.n	8027dbe <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8027d8c:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8027d90:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027d94:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d98:	fb04 fa02 	mul.w	sl, r4, r2
 8027d9c:	fb08 f806 	mul.w	r8, r8, r6
 8027da0:	f10a 0620 	add.w	r6, sl, #32
 8027da4:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8027da8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027dac:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8027db0:	4442      	add	r2, r8
 8027db2:	0a36      	lsrs	r6, r6, #8
 8027db4:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8027db8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8027dbc:	4332      	orrs	r2, r6
 8027dbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027dc0:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8027dc4:	2cff      	cmp	r4, #255	@ 0xff
 8027dc6:	d01a      	beq.n	8027dfe <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8027dc8:	f426 6efc 	bic.w	lr, r6, #2016	@ 0x7e0
 8027dcc:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8027dd0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027dd4:	fb04 fa06 	mul.w	sl, r4, r6
 8027dd8:	fb08 f80e 	mul.w	r8, r8, lr
 8027ddc:	f10a 0e20 	add.w	lr, sl, #32
 8027de0:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8027de4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027de8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027dec:	4446      	add	r6, r8
 8027dee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027df2:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8027df6:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8027dfa:	ea46 060e 	orr.w	r6, r6, lr
 8027dfe:	fb1c fe01 	smulbb	lr, ip, r1
 8027e02:	f1cc 0810 	rsb	r8, ip, #16
 8027e06:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027e0a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027e0e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027e12:	eba8 0801 	sub.w	r8, r8, r1
 8027e16:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8027e1a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027e1e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027e22:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8027e26:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027e2a:	ea4a 0202 	orr.w	r2, sl, r2
 8027e2e:	4341      	muls	r1, r0
 8027e30:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027e34:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027e38:	fb09 1108 	mla	r1, r9, r8, r1
 8027e3c:	ea4b 0606 	orr.w	r6, fp, r6
 8027e40:	fb0c 1102 	mla	r1, ip, r2, r1
 8027e44:	fb0e 1e06 	mla	lr, lr, r6, r1
 8027e48:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8027e4c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027e50:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027e54:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027e58:	ea40 0e0e 	orr.w	lr, r0, lr
 8027e5c:	fa1f f08e 	uxth.w	r0, lr
 8027e60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027e62:	1206      	asrs	r6, r0, #8
 8027e64:	10c1      	asrs	r1, r0, #3
 8027e66:	4353      	muls	r3, r2
 8027e68:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8027e6c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027e70:	1c5a      	adds	r2, r3, #1
 8027e72:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8027e76:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8027e7a:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8027e7e:	00c2      	lsls	r2, r0, #3
 8027e80:	121b      	asrs	r3, r3, #8
 8027e82:	b2d2      	uxtb	r2, r2
 8027e84:	2bff      	cmp	r3, #255	@ 0xff
 8027e86:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8027e8a:	f000 80de 	beq.w	802804a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8027e8e:	b2d8      	uxtb	r0, r3
 8027e90:	2b00      	cmp	r3, #0
 8027e92:	d03b      	beq.n	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027e94:	f895 c003 	ldrb.w	ip, [r5, #3]
 8027e98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027e9a:	fb00 fe0c 	mul.w	lr, r0, ip
 8027e9e:	4460      	add	r0, ip
 8027ea0:	fb12 f204 	smulbb	r2, r2, r4
 8027ea4:	f10e 0301 	add.w	r3, lr, #1
 8027ea8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8027eac:	121b      	asrs	r3, r3, #8
 8027eae:	ebac 0c03 	sub.w	ip, ip, r3
 8027eb2:	1ac0      	subs	r0, r0, r3
 8027eb4:	782b      	ldrb	r3, [r5, #0]
 8027eb6:	b2c0      	uxtb	r0, r0
 8027eb8:	fb0c 2303 	mla	r3, ip, r3, r2
 8027ebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027ebe:	70e8      	strb	r0, [r5, #3]
 8027ec0:	fb12 f101 	smulbb	r1, r2, r1
 8027ec4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027ec6:	fb93 f3f0 	sdiv	r3, r3, r0
 8027eca:	fb12 f606 	smulbb	r6, r2, r6
 8027ece:	2bff      	cmp	r3, #255	@ 0xff
 8027ed0:	bfd6      	itet	le
 8027ed2:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027ed6:	23ff      	movgt	r3, #255	@ 0xff
 8027ed8:	b2db      	uxtble	r3, r3
 8027eda:	702b      	strb	r3, [r5, #0]
 8027edc:	786b      	ldrb	r3, [r5, #1]
 8027ede:	fb0c 1303 	mla	r3, ip, r3, r1
 8027ee2:	fb93 f3f0 	sdiv	r3, r3, r0
 8027ee6:	2bff      	cmp	r3, #255	@ 0xff
 8027ee8:	bfd6      	itet	le
 8027eea:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027eee:	23ff      	movgt	r3, #255	@ 0xff
 8027ef0:	b2db      	uxtble	r3, r3
 8027ef2:	706b      	strb	r3, [r5, #1]
 8027ef4:	78ab      	ldrb	r3, [r5, #2]
 8027ef6:	fb0c 6303 	mla	r3, ip, r3, r6
 8027efa:	fb93 f3f0 	sdiv	r3, r3, r0
 8027efe:	2bff      	cmp	r3, #255	@ 0xff
 8027f00:	bfd6      	itet	le
 8027f02:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027f06:	23ff      	movgt	r3, #255	@ 0xff
 8027f08:	b2db      	uxtble	r3, r3
 8027f0a:	70ab      	strb	r3, [r5, #2]
 8027f0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027f0e:	3504      	adds	r5, #4
 8027f10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027f12:	4413      	add	r3, r2
 8027f14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027f16:	9321      	str	r3, [sp, #132]	@ 0x84
 8027f18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027f1a:	441a      	add	r2, r3
 8027f1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027f1e:	3b01      	subs	r3, #1
 8027f20:	9222      	str	r2, [sp, #136]	@ 0x88
 8027f22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027f24:	e675      	b.n	8027c12 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027f28:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8027f2a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8027f2c:	4433      	add	r3, r6
 8027f2e:	9321      	str	r3, [sp, #132]	@ 0x84
 8027f30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027f32:	441c      	add	r4, r3
 8027f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f36:	3b01      	subs	r3, #1
 8027f38:	9422      	str	r4, [sp, #136]	@ 0x88
 8027f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027f3e:	3304      	adds	r3, #4
 8027f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027f42:	e644      	b.n	8027bce <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8027f44:	d027      	beq.n	8027f96 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8027f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f48:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027f4a:	3b01      	subs	r3, #1
 8027f4c:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8027f4e:	fb00 5003 	mla	r0, r0, r3, r5
 8027f52:	1400      	asrs	r0, r0, #16
 8027f54:	f53f ae58 	bmi.w	8027c08 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f58:	3901      	subs	r1, #1
 8027f5a:	4288      	cmp	r0, r1
 8027f5c:	f6bf ae54 	bge.w	8027c08 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f60:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027f62:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8027f64:	fb01 0303 	mla	r3, r1, r3, r0
 8027f68:	141b      	asrs	r3, r3, #16
 8027f6a:	f53f ae4d 	bmi.w	8027c08 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f6e:	3a01      	subs	r2, #1
 8027f70:	4293      	cmp	r3, r2
 8027f72:	f6bf ae49 	bge.w	8027c08 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f78:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8027f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027f7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027f80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027f82:	2b00      	cmp	r3, #0
 8027f84:	f300 8086 	bgt.w	8028094 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8027f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f8a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027f90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027f96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027f98:	2b00      	cmp	r3, #0
 8027f9a:	f340 8218 	ble.w	80283ce <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8027f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027fa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027fa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027fa8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027fac:	eef0 6a62 	vmov.f32	s13, s5
 8027fb0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027fb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027fb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fbc:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8027fc0:	eef0 6a43 	vmov.f32	s13, s6
 8027fc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fc8:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8027fcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027fd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027fd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027fd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027fdc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027fe0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027fe4:	ee12 2a90 	vmov	r2, s5
 8027fe8:	eef0 2a47 	vmov.f32	s5, s14
 8027fec:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ff0:	ee13 2a10 	vmov	r2, s6
 8027ff4:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027ff6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ff8:	eeb0 3a67 	vmov.f32	s6, s15
 8027ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8028000:	9324      	str	r3, [sp, #144]	@ 0x90
 8028002:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028004:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8028006:	3b01      	subs	r3, #1
 8028008:	9312      	str	r3, [sp, #72]	@ 0x48
 802800a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802800c:	bf08      	it	eq
 802800e:	4613      	moveq	r3, r2
 8028010:	9309      	str	r3, [sp, #36]	@ 0x24
 8028012:	e5ce      	b.n	8027bb2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028014:	fb08 f606 	mul.w	r6, r8, r6
 8028018:	fb09 6303 	mla	r3, r9, r3, r6
 802801c:	e64e      	b.n	8027cbc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802801e:	4681      	mov	r9, r0
 8028020:	e675      	b.n	8027d0e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8028022:	f1c1 0210 	rsb	r2, r1, #16
 8028026:	4341      	muls	r1, r0
 8028028:	fb09 1902 	mla	r9, r9, r2, r1
 802802c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028030:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028034:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028038:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802803c:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028040:	ea40 0909 	orr.w	r9, r0, r9
 8028044:	fa1f f089 	uxth.w	r0, r9
 8028048:	e70a      	b.n	8027e60 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802804a:	0209      	lsls	r1, r1, #8
 802804c:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8028050:	4332      	orrs	r2, r6
 8028052:	602a      	str	r2, [r5, #0]
 8028054:	e75a      	b.n	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028056:	f116 0e01 	adds.w	lr, r6, #1
 802805a:	f53f af57 	bmi.w	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802805e:	4572      	cmp	r2, lr
 8028060:	f6ff af54 	blt.w	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028064:	f110 0e01 	adds.w	lr, r0, #1
 8028068:	f53f af50 	bmi.w	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802806c:	4573      	cmp	r3, lr
 802806e:	f6ff af4d 	blt.w	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028074:	b21b      	sxth	r3, r3
 8028076:	b212      	sxth	r2, r2
 8028078:	9602      	str	r6, [sp, #8]
 802807a:	9301      	str	r3, [sp, #4]
 802807c:	9200      	str	r2, [sp, #0]
 802807e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8028082:	e9cd c405 	strd	ip, r4, [sp, #20]
 8028086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802808a:	4629      	mov	r1, r5
 802808c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802808e:	f7ff fbca 	bl	8027826 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 8028092:	e73b      	b.n	8027f0c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028096:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802809a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802809c:	f3c3 3603 	ubfx	r6, r3, #12, #4
 80280a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80280a2:	fa1f fe82 	uxth.w	lr, r2
 80280a6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80280aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80280ac:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80280b0:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80280b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80280b6:	141b      	asrs	r3, r3, #16
 80280b8:	fb00 3c0c 	mla	ip, r0, ip, r3
 80280bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80280be:	eb03 0a0c 	add.w	sl, r3, ip
 80280c2:	f813 900c 	ldrb.w	r9, [r3, ip]
 80280c6:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80280ca:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80280ce:	b29b      	uxth	r3, r3
 80280d0:	2e00      	cmp	r6, #0
 80280d2:	f000 815c 	beq.w	802838e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 80280d6:	f81a 4000 	ldrb.w	r4, [sl, r0]
 80280da:	eb0a 0b00 	add.w	fp, sl, r0
 80280de:	fa1f fa86 	uxth.w	sl, r6
 80280e2:	9410      	str	r4, [sp, #64]	@ 0x40
 80280e4:	fb0a fe0e 	mul.w	lr, sl, lr
 80280e8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80280ec:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80280f0:	eba5 050e 	sub.w	r5, r5, lr
 80280f4:	9411      	str	r4, [sp, #68]	@ 0x44
 80280f6:	fa1f fa8a 	uxth.w	sl, sl
 80280fa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80280fc:	b2ad      	uxth	r5, r5
 80280fe:	eba3 030a 	sub.w	r3, r3, sl
 8028102:	fb08 f505 	mul.w	r5, r8, r5
 8028106:	b29b      	uxth	r3, r3
 8028108:	fb09 5303 	mla	r3, r9, r3, r5
 802810c:	fb0a 3304 	mla	r3, sl, r4, r3
 8028110:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8028112:	fb0e 3304 	mla	r3, lr, r4, r3
 8028116:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802811a:	2b00      	cmp	r3, #0
 802811c:	f000 812a 	beq.w	8028374 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8028120:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028122:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028126:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 802812a:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 802812e:	f000 8133 	beq.w	8028398 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 8028132:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 8028136:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802813a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802813e:	fb0a fe0e 	mul.w	lr, sl, lr
 8028142:	fb09 fc0c 	mul.w	ip, r9, ip
 8028146:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 802814a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802814e:	f10c 0b20 	add.w	fp, ip, #32
 8028152:	44ce      	add	lr, r9
 8028154:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 8028158:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802815c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028160:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028164:	ea4e 0909 	orr.w	r9, lr, r9
 8028168:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802816c:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8028170:	d01a      	beq.n	80281a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 8028172:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 8028176:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802817a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802817e:	fb0a fe0e 	mul.w	lr, sl, lr
 8028182:	fb08 f80c 	mul.w	r8, r8, ip
 8028186:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 802818a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802818e:	f108 0b20 	add.w	fp, r8, #32
 8028192:	44e6      	add	lr, ip
 8028194:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 8028198:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802819c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281a0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80281a4:	ea4e 0c0c 	orr.w	ip, lr, ip
 80281a8:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80281ac:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80281b0:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 80281b4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80281b8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80281bc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80281c0:	ea4e 0909 	orr.w	r9, lr, r9
 80281c4:	ea4a 0c0c 	orr.w	ip, sl, ip
 80281c8:	2e00      	cmp	r6, #0
 80281ca:	f000 80e7 	beq.w	802839c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 80281ce:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80281d2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80281d4:	3801      	subs	r0, #1
 80281d6:	2cff      	cmp	r4, #255	@ 0xff
 80281d8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80281dc:	f100 0002 	add.w	r0, r0, #2
 80281e0:	eb05 0e00 	add.w	lr, r5, r0
 80281e4:	5a28      	ldrh	r0, [r5, r0]
 80281e6:	d018      	beq.n	802821a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80281e8:	f420 65fc 	bic.w	r5, r0, #2016	@ 0x7e0
 80281ec:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80281f0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80281f4:	fb04 fa00 	mul.w	sl, r4, r0
 80281f8:	fb08 f805 	mul.w	r8, r8, r5
 80281fc:	f10a 0520 	add.w	r5, sl, #32
 8028200:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 8028204:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028208:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802820c:	4440      	add	r0, r8
 802820e:	0a2d      	lsrs	r5, r5, #8
 8028210:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8028214:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028218:	4328      	orrs	r0, r5
 802821a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802821c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028220:	2cff      	cmp	r4, #255	@ 0xff
 8028222:	d01a      	beq.n	802825a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028224:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8028228:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802822c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028230:	fb04 fa05 	mul.w	sl, r4, r5
 8028234:	fb08 f80e 	mul.w	r8, r8, lr
 8028238:	f10a 0e20 	add.w	lr, sl, #32
 802823c:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 8028240:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028244:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028248:	4445      	add	r5, r8
 802824a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802824e:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 8028252:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028256:	ea45 050e 	orr.w	r5, r5, lr
 802825a:	fb16 fe02 	smulbb	lr, r6, r2
 802825e:	f1c6 0810 	rsb	r8, r6, #16
 8028262:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028266:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802826a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802826e:	eba8 0802 	sub.w	r8, r8, r2
 8028272:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028276:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802827a:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 802827e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028282:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028286:	ea4a 0000 	orr.w	r0, sl, r0
 802828a:	fb0c f202 	mul.w	r2, ip, r2
 802828e:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8028292:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028296:	fb09 2208 	mla	r2, r9, r8, r2
 802829a:	ea4b 0505 	orr.w	r5, fp, r5
 802829e:	fb06 2200 	mla	r2, r6, r0, r2
 80282a2:	fb0e 2205 	mla	r2, lr, r5, r2
 80282a6:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 80282aa:	0952      	lsrs	r2, r2, #5
 80282ac:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80282b0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80282b4:	ea4c 0c05 	orr.w	ip, ip, r5
 80282b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80282ba:	fa1f fc8c 	uxth.w	ip, ip
 80282be:	4353      	muls	r3, r2
 80282c0:	ea4f 262c 	mov.w	r6, ip, asr #8
 80282c4:	ea4f 00ec 	mov.w	r0, ip, asr #3
 80282c8:	1c5a      	adds	r2, r3, #1
 80282ca:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80282ce:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80282d2:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80282d6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80282da:	121b      	asrs	r3, r3, #8
 80282dc:	b2d2      	uxtb	r2, r2
 80282de:	2bff      	cmp	r3, #255	@ 0xff
 80282e0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80282e4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80282e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80282ec:	d069      	beq.n	80283c2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 80282ee:	b2dd      	uxtb	r5, r3
 80282f0:	2b00      	cmp	r3, #0
 80282f2:	d03f      	beq.n	8028374 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80282f4:	f891 c003 	ldrb.w	ip, [r1, #3]
 80282f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80282fa:	fb05 fe0c 	mul.w	lr, r5, ip
 80282fe:	4465      	add	r5, ip
 8028300:	f891 8000 	ldrb.w	r8, [r1]
 8028304:	fb12 f204 	smulbb	r2, r2, r4
 8028308:	f10e 0301 	add.w	r3, lr, #1
 802830c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8028310:	121b      	asrs	r3, r3, #8
 8028312:	1aed      	subs	r5, r5, r3
 8028314:	ebac 0303 	sub.w	r3, ip, r3
 8028318:	f891 c001 	ldrb.w	ip, [r1, #1]
 802831c:	b2ed      	uxtb	r5, r5
 802831e:	fb03 2208 	mla	r2, r3, r8, r2
 8028322:	fb92 f2f5 	sdiv	r2, r2, r5
 8028326:	2aff      	cmp	r2, #255	@ 0xff
 8028328:	70cd      	strb	r5, [r1, #3]
 802832a:	bfd6      	itet	le
 802832c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028330:	22ff      	movgt	r2, #255	@ 0xff
 8028332:	b2d2      	uxtble	r2, r2
 8028334:	700a      	strb	r2, [r1, #0]
 8028336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028338:	fb12 f000 	smulbb	r0, r2, r0
 802833c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802833e:	fb03 000c 	mla	r0, r3, ip, r0
 8028342:	fb12 f606 	smulbb	r6, r2, r6
 8028346:	f891 c002 	ldrb.w	ip, [r1, #2]
 802834a:	fb90 f0f5 	sdiv	r0, r0, r5
 802834e:	fb03 630c 	mla	r3, r3, ip, r6
 8028352:	28ff      	cmp	r0, #255	@ 0xff
 8028354:	fb93 f3f5 	sdiv	r3, r3, r5
 8028358:	bfd6      	itet	le
 802835a:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802835e:	20ff      	movgt	r0, #255	@ 0xff
 8028360:	b2c0      	uxtble	r0, r0
 8028362:	2bff      	cmp	r3, #255	@ 0xff
 8028364:	bfd4      	ite	le
 8028366:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802836a:	23ff      	movgt	r3, #255	@ 0xff
 802836c:	7048      	strb	r0, [r1, #1]
 802836e:	bfd8      	it	le
 8028370:	b2db      	uxtble	r3, r3
 8028372:	708b      	strb	r3, [r1, #2]
 8028374:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028376:	3104      	adds	r1, #4
 8028378:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802837a:	4413      	add	r3, r2
 802837c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802837e:	9321      	str	r3, [sp, #132]	@ 0x84
 8028380:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028382:	441a      	add	r2, r3
 8028384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028386:	3b01      	subs	r3, #1
 8028388:	9222      	str	r2, [sp, #136]	@ 0x88
 802838a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802838c:	e5f8      	b.n	8027f80 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802838e:	fb08 f505 	mul.w	r5, r8, r5
 8028392:	fb09 5303 	mla	r3, r9, r3, r5
 8028396:	e6be      	b.n	8028116 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8028398:	46e1      	mov	r9, ip
 802839a:	e6e5      	b.n	8028168 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 802839c:	f1c2 0010 	rsb	r0, r2, #16
 80283a0:	fb0c f202 	mul.w	r2, ip, r2
 80283a4:	fb09 2900 	mla	r9, r9, r0, r2
 80283a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80283ac:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 80283b0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80283b4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80283b8:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80283bc:	ea4c 0c09 	orr.w	ip, ip, r9
 80283c0:	e77a      	b.n	80282b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80283c2:	0200      	lsls	r0, r0, #8
 80283c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80283c8:	4302      	orrs	r2, r0
 80283ca:	600a      	str	r2, [r1, #0]
 80283cc:	e7d2      	b.n	8028374 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80283ce:	b017      	add	sp, #92	@ 0x5c
 80283d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080283d4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 80283d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283d8:	b085      	sub	sp, #20
 80283da:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	@ 0x40
 80283de:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	@ 0x38
 80283e2:	2800      	cmp	r0, #0
 80283e4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 80283e8:	fb00 8504 	mla	r5, r0, r4, r8
 80283ec:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80283f0:	f89d c04c 	ldrb.w	ip, [sp, #76]	@ 0x4c
 80283f4:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 80283f8:	9702      	str	r7, [sp, #8]
 80283fa:	eb03 0705 	add.w	r7, r3, r5
 80283fe:	9703      	str	r7, [sp, #12]
 8028400:	f2c0 812e 	blt.w	8028660 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 8028404:	4582      	cmp	sl, r0
 8028406:	f340 812b 	ble.w	8028660 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 802840a:	f1b8 0f00 	cmp.w	r8, #0
 802840e:	f2c0 8122 	blt.w	8028656 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8028412:	4544      	cmp	r4, r8
 8028414:	f340 811f 	ble.w	8028656 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8028418:	f813 e005 	ldrb.w	lr, [r3, r5]
 802841c:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8028420:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8028424:	f423 67fc 	bic.w	r7, r3, #2016	@ 0x7e0
 8028428:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802842c:	4357      	muls	r7, r2
 802842e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8028432:	fb0e f503 	mul.w	r5, lr, r3
 8028436:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 802843a:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 802843e:	441f      	add	r7, r3
 8028440:	f105 0320 	add.w	r3, r5, #32
 8028444:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8028448:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 802844c:	0a1b      	lsrs	r3, r3, #8
 802844e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028452:	4313      	orrs	r3, r2
 8028454:	9301      	str	r3, [sp, #4]
 8028456:	f118 0301 	adds.w	r3, r8, #1
 802845a:	f100 8106 	bmi.w	802866a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 802845e:	429c      	cmp	r4, r3
 8028460:	f340 8103 	ble.w	802866a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8028464:	2e00      	cmp	r6, #0
 8028466:	f000 8103 	beq.w	8028670 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 802846a:	9b03      	ldr	r3, [sp, #12]
 802846c:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8028470:	785a      	ldrb	r2, [r3, #1]
 8028472:	9b02      	ldr	r3, [sp, #8]
 8028474:	10d7      	asrs	r7, r2, #3
 8028476:	885b      	ldrh	r3, [r3, #2]
 8028478:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802847c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028480:	436f      	muls	r7, r5
 8028482:	4353      	muls	r3, r2
 8028484:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 8028488:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 802848c:	444f      	add	r7, r9
 802848e:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 8028492:	f103 0b20 	add.w	fp, r3, #32
 8028496:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802849a:	0a1b      	lsrs	r3, r3, #8
 802849c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80284a0:	431d      	orrs	r5, r3
 80284a2:	3001      	adds	r0, #1
 80284a4:	f100 80ea 	bmi.w	802867c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 80284a8:	4582      	cmp	sl, r0
 80284aa:	f340 80e7 	ble.w	802867c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 80284ae:	f1bc 0f00 	cmp.w	ip, #0
 80284b2:	f000 80e8 	beq.w	8028686 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 80284b6:	f1b8 0f00 	cmp.w	r8, #0
 80284ba:	f2c0 80dc 	blt.w	8028676 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80284be:	4544      	cmp	r4, r8
 80284c0:	f340 80d9 	ble.w	8028676 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80284c4:	9b03      	ldr	r3, [sp, #12]
 80284c6:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80284ca:	5d1f      	ldrb	r7, [r3, r4]
 80284cc:	9b02      	ldr	r3, [sp, #8]
 80284ce:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80284d2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80284d6:	f423 60fc 	bic.w	r0, r3, #2016	@ 0x7e0
 80284da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80284de:	fb09 f900 	mul.w	r9, r9, r0
 80284e2:	437b      	muls	r3, r7
 80284e4:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 80284e8:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80284ec:	44d1      	add	r9, sl
 80284ee:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 80284f2:	f103 0b20 	add.w	fp, r3, #32
 80284f6:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80284fa:	0a1b      	lsrs	r3, r3, #8
 80284fc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028500:	4318      	orrs	r0, r3
 8028502:	f118 0801 	adds.w	r8, r8, #1
 8028506:	f100 80c3 	bmi.w	8028690 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 802850a:	4544      	cmp	r4, r8
 802850c:	f340 80c0 	ble.w	8028690 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8028510:	2e00      	cmp	r6, #0
 8028512:	f000 80c0 	beq.w	8028696 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 8028516:	f104 0801 	add.w	r8, r4, #1
 802851a:	9b03      	ldr	r3, [sp, #12]
 802851c:	9c02      	ldr	r4, [sp, #8]
 802851e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028522:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 8028526:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 802852a:	f424 68fc 	bic.w	r8, r4, #2016	@ 0x7e0
 802852e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028532:	fb0a fa08 	mul.w	sl, sl, r8
 8028536:	fb03 f904 	mul.w	r9, r3, r4
 802853a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802853e:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 8028542:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8028546:	44da      	add	sl, fp
 8028548:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 802854c:	f109 0420 	add.w	r4, r9, #32
 8028550:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8028554:	0a24      	lsrs	r4, r4, #8
 8028556:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802855a:	ea48 0404 	orr.w	r4, r8, r4
 802855e:	fa1f f886 	uxth.w	r8, r6
 8028562:	fa1f fa8c 	uxth.w	sl, ip
 8028566:	fb08 fb0a 	mul.w	fp, r8, sl
 802856a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 802856e:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 8028572:	f5c8 7980 	rsb	r9, r8, #256	@ 0x100
 8028576:	eba8 080b 	sub.w	r8, r8, fp
 802857a:	fa1f fa8a 	uxth.w	sl, sl
 802857e:	fa1f f888 	uxth.w	r8, r8
 8028582:	eba9 090a 	sub.w	r9, r9, sl
 8028586:	fb02 f808 	mul.w	r8, r2, r8
 802858a:	9a01      	ldr	r2, [sp, #4]
 802858c:	fa1f f989 	uxth.w	r9, r9
 8028590:	0412      	lsls	r2, r2, #16
 8028592:	fb0e 8809 	mla	r8, lr, r9, r8
 8028596:	f002 6efc 	and.w	lr, r2, #132120576	@ 0x7e00000
 802859a:	9a01      	ldr	r2, [sp, #4]
 802859c:	fb0a 8707 	mla	r7, sl, r7, r8
 80285a0:	ea4f 4805 	mov.w	r8, r5, lsl #16
 80285a4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80285a8:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80285ac:	fb0b 7303 	mla	r3, fp, r3, r7
 80285b0:	fb16 f70c 	smulbb	r7, r6, ip
 80285b4:	ea4e 0202 	orr.w	r2, lr, r2
 80285b8:	f008 68fc 	and.w	r8, r8, #132120576	@ 0x7e00000
 80285bc:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 80285c0:	f1cc 0e10 	rsb	lr, ip, #16
 80285c4:	ea48 0505 	orr.w	r5, r8, r5
 80285c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80285cc:	ebae 0e06 	sub.w	lr, lr, r6
 80285d0:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 80285d4:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 80285d8:	2bff      	cmp	r3, #255	@ 0xff
 80285da:	fb06 f605 	mul.w	r6, r6, r5
 80285de:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 80285e2:	fb0e 6202 	mla	r2, lr, r2, r6
 80285e6:	ea4f 4604 	mov.w	r6, r4, lsl #16
 80285ea:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80285ee:	f006 66fc 	and.w	r6, r6, #132120576	@ 0x7e00000
 80285f2:	ea44 0406 	orr.w	r4, r4, r6
 80285f6:	fb07 2604 	mla	r6, r7, r4, r2
 80285fa:	ea4f 4200 	mov.w	r2, r0, lsl #16
 80285fe:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028602:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028606:	ea40 0002 	orr.w	r0, r0, r2
 802860a:	fb0c 6c00 	mla	ip, ip, r0, r6
 802860e:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8028612:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028616:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802861a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802861e:	ea42 020c 	orr.w	r2, r2, ip
 8028622:	b292      	uxth	r2, r2
 8028624:	ea4f 2022 	mov.w	r0, r2, asr #8
 8028628:	ea4f 05e2 	mov.w	r5, r2, asr #3
 802862c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8028630:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028634:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8028638:	b2d2      	uxtb	r2, r2
 802863a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802863e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8028642:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028646:	d129      	bne.n	802869c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 8028648:	700a      	strb	r2, [r1, #0]
 802864a:	704d      	strb	r5, [r1, #1]
 802864c:	7088      	strb	r0, [r1, #2]
 802864e:	70cb      	strb	r3, [r1, #3]
 8028650:	b005      	add	sp, #20
 8028652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028656:	f04f 0e00 	mov.w	lr, #0
 802865a:	f8cd e004 	str.w	lr, [sp, #4]
 802865e:	e6fa      	b.n	8028456 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 8028660:	2200      	movs	r2, #0
 8028662:	4696      	mov	lr, r2
 8028664:	4615      	mov	r5, r2
 8028666:	9201      	str	r2, [sp, #4]
 8028668:	e71b      	b.n	80284a2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 802866a:	2200      	movs	r2, #0
 802866c:	4615      	mov	r5, r2
 802866e:	e718      	b.n	80284a2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028670:	4632      	mov	r2, r6
 8028672:	4635      	mov	r5, r6
 8028674:	e715      	b.n	80284a2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028676:	2700      	movs	r7, #0
 8028678:	4638      	mov	r0, r7
 802867a:	e742      	b.n	8028502 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 802867c:	2300      	movs	r3, #0
 802867e:	461f      	mov	r7, r3
 8028680:	461c      	mov	r4, r3
 8028682:	4618      	mov	r0, r3
 8028684:	e76b      	b.n	802855e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028686:	4663      	mov	r3, ip
 8028688:	4667      	mov	r7, ip
 802868a:	4664      	mov	r4, ip
 802868c:	4660      	mov	r0, ip
 802868e:	e766      	b.n	802855e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028690:	2300      	movs	r3, #0
 8028692:	461c      	mov	r4, r3
 8028694:	e763      	b.n	802855e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028696:	4633      	mov	r3, r6
 8028698:	4634      	mov	r4, r6
 802869a:	e760      	b.n	802855e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 802869c:	2b00      	cmp	r3, #0
 802869e:	d0d7      	beq.n	8028650 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 80286a0:	78cf      	ldrb	r7, [r1, #3]
 80286a2:	fb03 f607 	mul.w	r6, r3, r7
 80286a6:	443b      	add	r3, r7
 80286a8:	1c74      	adds	r4, r6, #1
 80286aa:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80286ae:	780e      	ldrb	r6, [r1, #0]
 80286b0:	1224      	asrs	r4, r4, #8
 80286b2:	1b3f      	subs	r7, r7, r4
 80286b4:	1b1b      	subs	r3, r3, r4
 80286b6:	24ff      	movs	r4, #255	@ 0xff
 80286b8:	437e      	muls	r6, r7
 80286ba:	b2db      	uxtb	r3, r3
 80286bc:	fb14 6202 	smlabb	r2, r4, r2, r6
 80286c0:	fb92 f6f3 	sdiv	r6, r2, r3
 80286c4:	42a6      	cmp	r6, r4
 80286c6:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 80286ca:	bfc8      	it	gt
 80286cc:	4626      	movgt	r6, r4
 80286ce:	784c      	ldrb	r4, [r1, #1]
 80286d0:	bfd8      	it	le
 80286d2:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 80286d6:	fb07 f404 	mul.w	r4, r7, r4
 80286da:	bfd8      	it	le
 80286dc:	b2f6      	uxtble	r6, r6
 80286de:	fb12 4505 	smlabb	r5, r2, r5, r4
 80286e2:	700e      	strb	r6, [r1, #0]
 80286e4:	fb95 f4f3 	sdiv	r4, r5, r3
 80286e8:	4294      	cmp	r4, r2
 80286ea:	bfd4      	ite	le
 80286ec:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 80286f0:	4614      	movgt	r4, r2
 80286f2:	788a      	ldrb	r2, [r1, #2]
 80286f4:	bfd8      	it	le
 80286f6:	b2e4      	uxtble	r4, r4
 80286f8:	437a      	muls	r2, r7
 80286fa:	704c      	strb	r4, [r1, #1]
 80286fc:	24ff      	movs	r4, #255	@ 0xff
 80286fe:	fb14 2000 	smlabb	r0, r4, r0, r2
 8028702:	fb90 f2f3 	sdiv	r2, r0, r3
 8028706:	42a2      	cmp	r2, r4
 8028708:	bfd6      	itet	le
 802870a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802870e:	4622      	movgt	r2, r4
 8028710:	b2d2      	uxtble	r2, r2
 8028712:	708a      	strb	r2, [r1, #2]
 8028714:	e79b      	b.n	802864e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08028716 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802871a:	b093      	sub	sp, #76	@ 0x4c
 802871c:	9210      	str	r2, [sp, #64]	@ 0x40
 802871e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028720:	9011      	str	r0, [sp, #68]	@ 0x44
 8028722:	910e      	str	r1, [sp, #56]	@ 0x38
 8028724:	6850      	ldr	r0, [r2, #4]
 8028726:	9306      	str	r3, [sp, #24]
 8028728:	6812      	ldr	r2, [r2, #0]
 802872a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802872e:	fb00 1303 	mla	r3, r0, r3, r1
 8028732:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028736:	9307      	str	r3, [sp, #28]
 8028738:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802873a:	681b      	ldr	r3, [r3, #0]
 802873c:	9308      	str	r3, [sp, #32]
 802873e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028740:	685b      	ldr	r3, [r3, #4]
 8028742:	9309      	str	r3, [sp, #36]	@ 0x24
 8028744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028746:	2b00      	cmp	r3, #0
 8028748:	dc03      	bgt.n	8028752 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802874a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802874c:	2b00      	cmp	r3, #0
 802874e:	f340 83f9 	ble.w	8028f44 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8028752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028754:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028758:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802875c:	1e48      	subs	r0, r1, #1
 802875e:	1e55      	subs	r5, r2, #1
 8028760:	9b06      	ldr	r3, [sp, #24]
 8028762:	2b00      	cmp	r3, #0
 8028764:	f340 81b4 	ble.w	8028ad0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8028768:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802876a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802876c:	1436      	asrs	r6, r6, #16
 802876e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028772:	d406      	bmi.n	8028782 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028774:	4286      	cmp	r6, r0
 8028776:	da04      	bge.n	8028782 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028778:	2b00      	cmp	r3, #0
 802877a:	db02      	blt.n	8028782 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802877c:	42ab      	cmp	r3, r5
 802877e:	f2c0 81a8 	blt.w	8028ad2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8028782:	3601      	adds	r6, #1
 8028784:	f100 8195 	bmi.w	8028ab2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028788:	42b1      	cmp	r1, r6
 802878a:	f2c0 8192 	blt.w	8028ab2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802878e:	3301      	adds	r3, #1
 8028790:	f100 818f 	bmi.w	8028ab2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028794:	429a      	cmp	r2, r3
 8028796:	f2c0 818c 	blt.w	8028ab2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802879a:	9b06      	ldr	r3, [sp, #24]
 802879c:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 80287a0:	9d07      	ldr	r5, [sp, #28]
 80287a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80287a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	f340 81b5 	ble.w	8028b16 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80287ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80287ae:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80287b0:	1418      	asrs	r0, r3, #16
 80287b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80287b4:	1436      	asrs	r6, r6, #16
 80287b6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80287ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80287bc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80287c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80287c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80287c6:	f100 820e 	bmi.w	8028be6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80287ca:	f102 3eff 	add.w	lr, r2, #4294967295
 80287ce:	4576      	cmp	r6, lr
 80287d0:	f280 8209 	bge.w	8028be6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80287d4:	2800      	cmp	r0, #0
 80287d6:	f2c0 8206 	blt.w	8028be6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80287da:	f103 3eff 	add.w	lr, r3, #4294967295
 80287de:	4570      	cmp	r0, lr
 80287e0:	f280 8201 	bge.w	8028be6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80287e4:	b212      	sxth	r2, r2
 80287e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287e8:	fa1f fe81 	uxth.w	lr, r1
 80287ec:	fb00 6002 	mla	r0, r0, r2, r6
 80287f0:	ea4f 160e 	mov.w	r6, lr, lsl #4
 80287f4:	eb03 0a00 	add.w	sl, r3, r0
 80287f8:	f813 9000 	ldrb.w	r9, [r3, r0]
 80287fc:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8028800:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028804:	b29b      	uxth	r3, r3
 8028806:	f1bc 0f00 	cmp.w	ip, #0
 802880a:	f000 81ca 	beq.w	8028ba2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802880e:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028812:	eb0a 0b02 	add.w	fp, sl, r2
 8028816:	fa1f fa8c 	uxth.w	sl, ip
 802881a:	940a      	str	r4, [sp, #40]	@ 0x28
 802881c:	fb0a fe0e 	mul.w	lr, sl, lr
 8028820:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028824:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028828:	eba6 060e 	sub.w	r6, r6, lr
 802882c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802882e:	fa1f fa8a 	uxth.w	sl, sl
 8028832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028834:	b2b6      	uxth	r6, r6
 8028836:	eba3 030a 	sub.w	r3, r3, sl
 802883a:	fb08 f606 	mul.w	r6, r8, r6
 802883e:	b29b      	uxth	r3, r3
 8028840:	fb09 6303 	mla	r3, r9, r3, r6
 8028844:	fb0a 3304 	mla	r3, sl, r4, r3
 8028848:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802884a:	fb0e 3304 	mla	r3, lr, r4, r3
 802884e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028852:	2b00      	cmp	r3, #0
 8028854:	f000 8120 	beq.w	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028858:	9c08      	ldr	r4, [sp, #32]
 802885a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802885e:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8028862:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8028866:	f000 81a1 	beq.w	8028bac <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802886a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802886e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028872:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028876:	fb0a fe0e 	mul.w	lr, sl, lr
 802887a:	fb09 f000 	mul.w	r0, r9, r0
 802887e:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8028882:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028886:	f100 0b20 	add.w	fp, r0, #32
 802888a:	44ce      	add	lr, r9
 802888c:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8028890:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028894:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028898:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802889c:	ea4e 0909 	orr.w	r9, lr, r9
 80288a0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80288a4:	8870      	ldrh	r0, [r6, #2]
 80288a6:	d019      	beq.n	80288dc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80288a8:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80288ac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80288b0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80288b4:	fb0a fe0e 	mul.w	lr, sl, lr
 80288b8:	fb08 f800 	mul.w	r8, r8, r0
 80288bc:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 80288c0:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80288c4:	f108 0b20 	add.w	fp, r8, #32
 80288c8:	4486      	add	lr, r0
 80288ca:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80288ce:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80288d2:	0a00      	lsrs	r0, r0, #8
 80288d4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80288d8:	ea4e 0000 	orr.w	r0, lr, r0
 80288dc:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80288e0:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80288e4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80288e8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80288ec:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80288f0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80288f4:	ea4e 0909 	orr.w	r9, lr, r9
 80288f8:	ea4a 0000 	orr.w	r0, sl, r0
 80288fc:	f1bc 0f00 	cmp.w	ip, #0
 8028900:	f000 8156 	beq.w	8028bb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8028904:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8028908:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802890a:	3a01      	subs	r2, #1
 802890c:	2cff      	cmp	r4, #255	@ 0xff
 802890e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8028912:	f102 0202 	add.w	r2, r2, #2
 8028916:	eb06 0e02 	add.w	lr, r6, r2
 802891a:	5ab2      	ldrh	r2, [r6, r2]
 802891c:	d018      	beq.n	8028950 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802891e:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8028922:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028926:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802892a:	fb04 fa02 	mul.w	sl, r4, r2
 802892e:	fb08 f806 	mul.w	r8, r8, r6
 8028932:	f10a 0620 	add.w	r6, sl, #32
 8028936:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 802893a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802893e:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8028942:	4442      	add	r2, r8
 8028944:	0a36      	lsrs	r6, r6, #8
 8028946:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 802894a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802894e:	4332      	orrs	r2, r6
 8028950:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028952:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8028956:	2cff      	cmp	r4, #255	@ 0xff
 8028958:	d01a      	beq.n	8028990 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802895a:	f426 6efc 	bic.w	lr, r6, #2016	@ 0x7e0
 802895e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8028962:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028966:	fb04 fa06 	mul.w	sl, r4, r6
 802896a:	fb08 f80e 	mul.w	r8, r8, lr
 802896e:	f10a 0e20 	add.w	lr, sl, #32
 8028972:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8028976:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802897a:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802897e:	4446      	add	r6, r8
 8028980:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028984:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8028988:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802898c:	ea46 060e 	orr.w	r6, r6, lr
 8028990:	fb1c fe01 	smulbb	lr, ip, r1
 8028994:	f1cc 0810 	rsb	r8, ip, #16
 8028998:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802899c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80289a0:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80289a4:	eba8 0801 	sub.w	r8, r8, r1
 80289a8:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 80289ac:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80289b0:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80289b4:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 80289b8:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80289bc:	ea4a 0202 	orr.w	r2, sl, r2
 80289c0:	4341      	muls	r1, r0
 80289c2:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80289c6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80289ca:	fb09 1108 	mla	r1, r9, r8, r1
 80289ce:	ea4b 0606 	orr.w	r6, fp, r6
 80289d2:	fb0c 1102 	mla	r1, ip, r2, r1
 80289d6:	fb0e 1e06 	mla	lr, lr, r6, r1
 80289da:	ea4f 515e 	mov.w	r1, lr, lsr #21
 80289de:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80289e2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80289e6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80289ea:	ea41 0e0e 	orr.w	lr, r1, lr
 80289ee:	fa1f f18e 	uxth.w	r1, lr
 80289f2:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80289f6:	2bff      	cmp	r3, #255	@ 0xff
 80289f8:	ea4f 00e1 	mov.w	r0, r1, asr #3
 80289fc:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8028a00:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028a04:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028a08:	b2d2      	uxtb	r2, r2
 8028a0a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028a0e:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8028a12:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028a16:	f000 80df 	beq.w	8028bd8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8028a1a:	f895 8003 	ldrb.w	r8, [r5, #3]
 8028a1e:	24ff      	movs	r4, #255	@ 0xff
 8028a20:	fb03 f608 	mul.w	r6, r3, r8
 8028a24:	4443      	add	r3, r8
 8028a26:	1c71      	adds	r1, r6, #1
 8028a28:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8028a2c:	782e      	ldrb	r6, [r5, #0]
 8028a2e:	1209      	asrs	r1, r1, #8
 8028a30:	1a5b      	subs	r3, r3, r1
 8028a32:	eba8 0101 	sub.w	r1, r8, r1
 8028a36:	f895 8002 	ldrb.w	r8, [r5, #2]
 8028a3a:	434e      	muls	r6, r1
 8028a3c:	b2db      	uxtb	r3, r3
 8028a3e:	fb14 6202 	smlabb	r2, r4, r2, r6
 8028a42:	24ff      	movs	r4, #255	@ 0xff
 8028a44:	70eb      	strb	r3, [r5, #3]
 8028a46:	fb92 f2f3 	sdiv	r2, r2, r3
 8028a4a:	2aff      	cmp	r2, #255	@ 0xff
 8028a4c:	bfd6      	itet	le
 8028a4e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028a52:	22ff      	movgt	r2, #255	@ 0xff
 8028a54:	b2d2      	uxtble	r2, r2
 8028a56:	702a      	strb	r2, [r5, #0]
 8028a58:	786a      	ldrb	r2, [r5, #1]
 8028a5a:	434a      	muls	r2, r1
 8028a5c:	fb01 f108 	mul.w	r1, r1, r8
 8028a60:	fb14 2000 	smlabb	r0, r4, r0, r2
 8028a64:	22ff      	movs	r2, #255	@ 0xff
 8028a66:	fb90 f0f3 	sdiv	r0, r0, r3
 8028a6a:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8028a6e:	28ff      	cmp	r0, #255	@ 0xff
 8028a70:	fb9c fcf3 	sdiv	ip, ip, r3
 8028a74:	bfd6      	itet	le
 8028a76:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028a7a:	20ff      	movgt	r0, #255	@ 0xff
 8028a7c:	b2c0      	uxtble	r0, r0
 8028a7e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028a82:	bfd4      	ite	le
 8028a84:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8028a88:	f04f 0cff 	movgt.w	ip, #255	@ 0xff
 8028a8c:	7068      	strb	r0, [r5, #1]
 8028a8e:	bfd8      	it	le
 8028a90:	fa5f fc8c 	uxtble.w	ip, ip
 8028a94:	f885 c002 	strb.w	ip, [r5, #2]
 8028a98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028a9a:	3504      	adds	r5, #4
 8028a9c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028a9e:	4413      	add	r3, r2
 8028aa0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028aa2:	931d      	str	r3, [sp, #116]	@ 0x74
 8028aa4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028aa6:	441a      	add	r2, r3
 8028aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028aaa:	3b01      	subs	r3, #1
 8028aac:	921e      	str	r2, [sp, #120]	@ 0x78
 8028aae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ab0:	e678      	b.n	80287a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028ab2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028ab4:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8028ab6:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8028ab8:	4433      	add	r3, r6
 8028aba:	931d      	str	r3, [sp, #116]	@ 0x74
 8028abc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028abe:	441c      	add	r4, r3
 8028ac0:	9b06      	ldr	r3, [sp, #24]
 8028ac2:	3b01      	subs	r3, #1
 8028ac4:	941e      	str	r4, [sp, #120]	@ 0x78
 8028ac6:	9306      	str	r3, [sp, #24]
 8028ac8:	9b07      	ldr	r3, [sp, #28]
 8028aca:	3304      	adds	r3, #4
 8028acc:	9307      	str	r3, [sp, #28]
 8028ace:	e647      	b.n	8028760 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028ad0:	d028      	beq.n	8028b24 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8028ad2:	9b06      	ldr	r3, [sp, #24]
 8028ad4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028ad6:	3b01      	subs	r3, #1
 8028ad8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8028ada:	fb00 5003 	mla	r0, r0, r3, r5
 8028ade:	1400      	asrs	r0, r0, #16
 8028ae0:	f53f ae5b 	bmi.w	802879a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028ae4:	3901      	subs	r1, #1
 8028ae6:	4288      	cmp	r0, r1
 8028ae8:	f6bf ae57 	bge.w	802879a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028aec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028aee:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8028af0:	fb01 0303 	mla	r3, r1, r3, r0
 8028af4:	141b      	asrs	r3, r3, #16
 8028af6:	f53f ae50 	bmi.w	802879a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028afa:	3a01      	subs	r2, #1
 8028afc:	4293      	cmp	r3, r2
 8028afe:	f6bf ae4c 	bge.w	802879a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028b02:	9b07      	ldr	r3, [sp, #28]
 8028b04:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8028b08:	1d19      	adds	r1, r3, #4
 8028b0a:	9b06      	ldr	r3, [sp, #24]
 8028b0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028b10:	2b00      	cmp	r3, #0
 8028b12:	f300 8085 	bgt.w	8028c20 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8028b16:	9b06      	ldr	r3, [sp, #24]
 8028b18:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028b1c:	9b07      	ldr	r3, [sp, #28]
 8028b1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028b22:	9307      	str	r3, [sp, #28]
 8028b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028b26:	2b00      	cmp	r3, #0
 8028b28:	f340 820c 	ble.w	8028f44 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8028b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028b30:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028b32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028b36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028b3a:	eef0 6a62 	vmov.f32	s13, s5
 8028b3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028b42:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028b46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b4a:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8028b4e:	eef0 6a43 	vmov.f32	s13, s6
 8028b52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b56:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8028b5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028b5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028b62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028b66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028b6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028b6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028b72:	ee12 2a90 	vmov	r2, s5
 8028b76:	eef0 2a47 	vmov.f32	s5, s14
 8028b7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b7e:	ee13 2a10 	vmov	r2, s6
 8028b82:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028b84:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028b86:	eeb0 3a67 	vmov.f32	s6, s15
 8028b8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b8e:	9320      	str	r3, [sp, #128]	@ 0x80
 8028b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028b92:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028b94:	3b01      	subs	r3, #1
 8028b96:	930e      	str	r3, [sp, #56]	@ 0x38
 8028b98:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028b9a:	bf08      	it	eq
 8028b9c:	4613      	moveq	r3, r2
 8028b9e:	9306      	str	r3, [sp, #24]
 8028ba0:	e5d0      	b.n	8028744 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8028ba2:	fb08 f606 	mul.w	r6, r8, r6
 8028ba6:	fb09 6303 	mla	r3, r9, r3, r6
 8028baa:	e650      	b.n	802884e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8028bac:	4681      	mov	r9, r0
 8028bae:	e677      	b.n	80288a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8028bb0:	f1c1 0210 	rsb	r2, r1, #16
 8028bb4:	4341      	muls	r1, r0
 8028bb6:	fb09 1902 	mla	r9, r9, r2, r1
 8028bba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028bbe:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8028bc2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028bc6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028bca:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028bce:	ea41 0909 	orr.w	r9, r1, r9
 8028bd2:	fa1f f189 	uxth.w	r1, r9
 8028bd6:	e70c      	b.n	80289f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8028bd8:	0200      	lsls	r0, r0, #8
 8028bda:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8028bde:	ea4c 0202 	orr.w	r2, ip, r2
 8028be2:	602a      	str	r2, [r5, #0]
 8028be4:	e758      	b.n	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028be6:	f116 0e01 	adds.w	lr, r6, #1
 8028bea:	f53f af55 	bmi.w	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028bee:	4572      	cmp	r2, lr
 8028bf0:	f6ff af52 	blt.w	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028bf4:	f110 0e01 	adds.w	lr, r0, #1
 8028bf8:	f53f af4e 	bmi.w	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028bfc:	4573      	cmp	r3, lr
 8028bfe:	f6ff af4b 	blt.w	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028c02:	b21b      	sxth	r3, r3
 8028c04:	b212      	sxth	r2, r2
 8028c06:	9301      	str	r3, [sp, #4]
 8028c08:	9200      	str	r2, [sp, #0]
 8028c0a:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028c0e:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8028c12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8028c16:	4629      	mov	r1, r5
 8028c18:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028c1a:	f7ff fbdb 	bl	80283d4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8028c1e:	e73b      	b.n	8028a98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028c20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028c22:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028c26:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028c28:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8028c2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028c2e:	fa1f fe82 	uxth.w	lr, r2
 8028c32:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8028c36:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028c38:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8028c3c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8028c40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028c42:	141b      	asrs	r3, r3, #16
 8028c44:	fb00 3c0c 	mla	ip, r0, ip, r3
 8028c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028c4a:	eb03 0a0c 	add.w	sl, r3, ip
 8028c4e:	f813 900c 	ldrb.w	r9, [r3, ip]
 8028c52:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8028c56:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028c5a:	b29b      	uxth	r3, r3
 8028c5c:	2e00      	cmp	r6, #0
 8028c5e:	f000 8152 	beq.w	8028f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 8028c62:	f81a 4000 	ldrb.w	r4, [sl, r0]
 8028c66:	eb0a 0b00 	add.w	fp, sl, r0
 8028c6a:	fa1f fa86 	uxth.w	sl, r6
 8028c6e:	940c      	str	r4, [sp, #48]	@ 0x30
 8028c70:	fb0a fe0e 	mul.w	lr, sl, lr
 8028c74:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028c78:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028c7c:	eba5 050e 	sub.w	r5, r5, lr
 8028c80:	940d      	str	r4, [sp, #52]	@ 0x34
 8028c82:	fa1f fa8a 	uxth.w	sl, sl
 8028c86:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028c88:	b2ad      	uxth	r5, r5
 8028c8a:	eba3 030a 	sub.w	r3, r3, sl
 8028c8e:	fb08 f505 	mul.w	r5, r8, r5
 8028c92:	b29b      	uxth	r3, r3
 8028c94:	fb09 5303 	mla	r3, r9, r3, r5
 8028c98:	fb0a 3304 	mla	r3, sl, r4, r3
 8028c9c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028c9e:	fb0e 3304 	mla	r3, lr, r4, r3
 8028ca2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ca6:	2b00      	cmp	r3, #0
 8028ca8:	f000 8120 	beq.w	8028eec <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8028cac:	9c08      	ldr	r4, [sp, #32]
 8028cae:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028cb2:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 8028cb6:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 8028cba:	f000 8129 	beq.w	8028f10 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 8028cbe:	f425 6cfc 	bic.w	ip, r5, #2016	@ 0x7e0
 8028cc2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028cc6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028cca:	fb0a fc0c 	mul.w	ip, sl, ip
 8028cce:	fb09 f505 	mul.w	r5, r9, r5
 8028cd2:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 8028cd6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028cda:	f105 0b20 	add.w	fp, r5, #32
 8028cde:	44cc      	add	ip, r9
 8028ce0:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 8028ce4:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8028ce8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028cec:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028cf0:	ea4c 0909 	orr.w	r9, ip, r9
 8028cf4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028cf8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028cfc:	d019      	beq.n	8028d32 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8028cfe:	f425 6cfc 	bic.w	ip, r5, #2016	@ 0x7e0
 8028d02:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028d06:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028d0a:	fb0a fc0c 	mul.w	ip, sl, ip
 8028d0e:	fb08 f805 	mul.w	r8, r8, r5
 8028d12:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 8028d16:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028d1a:	f108 0b20 	add.w	fp, r8, #32
 8028d1e:	44ac      	add	ip, r5
 8028d20:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8028d24:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8028d28:	0a2d      	lsrs	r5, r5, #8
 8028d2a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028d2e:	ea4c 0505 	orr.w	r5, ip, r5
 8028d32:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028d36:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028d3a:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8028d3e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028d42:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028d46:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028d4a:	ea4c 0909 	orr.w	r9, ip, r9
 8028d4e:	ea4a 0505 	orr.w	r5, sl, r5
 8028d52:	2e00      	cmp	r6, #0
 8028d54:	f000 80de 	beq.w	8028f14 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 8028d58:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8028d5c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028d5e:	3801      	subs	r0, #1
 8028d60:	2cff      	cmp	r4, #255	@ 0xff
 8028d62:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8028d66:	f100 0002 	add.w	r0, r0, #2
 8028d6a:	eb0e 0800 	add.w	r8, lr, r0
 8028d6e:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8028d72:	d01a      	beq.n	8028daa <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8028d74:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8028d78:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028d7c:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8028d80:	fb04 fa00 	mul.w	sl, r4, r0
 8028d84:	fb0e fe0c 	mul.w	lr, lr, ip
 8028d88:	f10a 0c20 	add.w	ip, sl, #32
 8028d8c:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8028d90:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028d94:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028d98:	4470      	add	r0, lr
 8028d9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d9e:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8028da2:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028da6:	ea40 000c 	orr.w	r0, r0, ip
 8028daa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028dac:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 8028db0:	2cff      	cmp	r4, #255	@ 0xff
 8028db2:	d01a      	beq.n	8028dea <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8028db4:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 8028db8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028dbc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028dc0:	fb04 fa0c 	mul.w	sl, r4, ip
 8028dc4:	fb08 f80e 	mul.w	r8, r8, lr
 8028dc8:	f10a 0e20 	add.w	lr, sl, #32
 8028dcc:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 8028dd0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028dd4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028dd8:	44c4      	add	ip, r8
 8028dda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028dde:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8028de2:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028de6:	ea4c 0c0e 	orr.w	ip, ip, lr
 8028dea:	fb16 fe02 	smulbb	lr, r6, r2
 8028dee:	f1c6 0810 	rsb	r8, r6, #16
 8028df2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028df6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028dfa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028dfe:	eba8 0802 	sub.w	r8, r8, r2
 8028e02:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 8028e06:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028e0a:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8028e0e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028e12:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028e16:	ea4a 0000 	orr.w	r0, sl, r0
 8028e1a:	436a      	muls	r2, r5
 8028e1c:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8028e20:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028e24:	fb09 2208 	mla	r2, r9, r8, r2
 8028e28:	ea4b 0c0c 	orr.w	ip, fp, ip
 8028e2c:	fb06 2200 	mla	r2, r6, r0, r2
 8028e30:	fb0e 220c 	mla	r2, lr, ip, r2
 8028e34:	0d55      	lsrs	r5, r2, #21
 8028e36:	0952      	lsrs	r2, r2, #5
 8028e38:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028e3c:	f422 6cfc 	bic.w	ip, r2, #2016	@ 0x7e0
 8028e40:	ea45 000c 	orr.w	r0, r5, ip
 8028e44:	b280      	uxth	r0, r0
 8028e46:	2bff      	cmp	r3, #255	@ 0xff
 8028e48:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8028e4c:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8028e50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8028e54:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028e58:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8028e5c:	b2d2      	uxtb	r2, r2
 8028e5e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028e62:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8028e66:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028e6a:	d064      	beq.n	8028f36 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 8028e6c:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8028e70:	24ff      	movs	r4, #255	@ 0xff
 8028e72:	fb03 f508 	mul.w	r5, r3, r8
 8028e76:	4443      	add	r3, r8
 8028e78:	1c68      	adds	r0, r5, #1
 8028e7a:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8028e7e:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8028e82:	1200      	asrs	r0, r0, #8
 8028e84:	1a1b      	subs	r3, r3, r0
 8028e86:	eba8 0000 	sub.w	r0, r8, r0
 8028e8a:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8028e8e:	4345      	muls	r5, r0
 8028e90:	b2db      	uxtb	r3, r3
 8028e92:	fb14 5202 	smlabb	r2, r4, r2, r5
 8028e96:	24ff      	movs	r4, #255	@ 0xff
 8028e98:	f801 3c01 	strb.w	r3, [r1, #-1]
 8028e9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8028ea0:	2aff      	cmp	r2, #255	@ 0xff
 8028ea2:	bfd6      	itet	le
 8028ea4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028ea8:	22ff      	movgt	r2, #255	@ 0xff
 8028eaa:	b2d2      	uxtble	r2, r2
 8028eac:	f801 2c04 	strb.w	r2, [r1, #-4]
 8028eb0:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8028eb4:	4342      	muls	r2, r0
 8028eb6:	fb00 f008 	mul.w	r0, r0, r8
 8028eba:	fb14 2206 	smlabb	r2, r4, r6, r2
 8028ebe:	fb92 f2f3 	sdiv	r2, r2, r3
 8028ec2:	2aff      	cmp	r2, #255	@ 0xff
 8028ec4:	bfd6      	itet	le
 8028ec6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028eca:	22ff      	movgt	r2, #255	@ 0xff
 8028ecc:	b2d2      	uxtble	r2, r2
 8028ece:	f801 2c03 	strb.w	r2, [r1, #-3]
 8028ed2:	22ff      	movs	r2, #255	@ 0xff
 8028ed4:	fb12 000c 	smlabb	r0, r2, ip, r0
 8028ed8:	fb90 f0f3 	sdiv	r0, r0, r3
 8028edc:	28ff      	cmp	r0, #255	@ 0xff
 8028ede:	bfd6      	itet	le
 8028ee0:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028ee4:	20ff      	movgt	r0, #255	@ 0xff
 8028ee6:	b2c0      	uxtble	r0, r0
 8028ee8:	f801 0c02 	strb.w	r0, [r1, #-2]
 8028eec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028eee:	3104      	adds	r1, #4
 8028ef0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028ef2:	4413      	add	r3, r2
 8028ef4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028ef6:	931d      	str	r3, [sp, #116]	@ 0x74
 8028ef8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028efa:	441a      	add	r2, r3
 8028efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028efe:	3b01      	subs	r3, #1
 8028f00:	921e      	str	r2, [sp, #120]	@ 0x78
 8028f02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028f04:	e603      	b.n	8028b0e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028f06:	fb08 f505 	mul.w	r5, r8, r5
 8028f0a:	fb09 5303 	mla	r3, r9, r3, r5
 8028f0e:	e6c8      	b.n	8028ca2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8028f10:	46a9      	mov	r9, r5
 8028f12:	e6ef      	b.n	8028cf4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8028f14:	f1c2 0010 	rsb	r0, r2, #16
 8028f18:	436a      	muls	r2, r5
 8028f1a:	fb09 2900 	mla	r9, r9, r0, r2
 8028f1e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028f22:	ea4f 5659 	mov.w	r6, r9, lsr #21
 8028f26:	ea4f 1059 	mov.w	r0, r9, lsr #5
 8028f2a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8028f2e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028f32:	4330      	orrs	r0, r6
 8028f34:	e786      	b.n	8028e44 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8028f36:	0236      	lsls	r6, r6, #8
 8028f38:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8028f3c:	4332      	orrs	r2, r6
 8028f3e:	f841 2c04 	str.w	r2, [r1, #-4]
 8028f42:	e7d3      	b.n	8028eec <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8028f44:	b013      	add	sp, #76	@ 0x4c
 8028f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028f4a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 8028f4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f4e:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	@ 0x28
 8028f52:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028f56:	fb08 6703 	mla	r7, r8, r3, r6
 8028f5a:	f1b8 0f00 	cmp.w	r8, #0
 8028f5e:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8028f62:	f89d e034 	ldrb.w	lr, [sp, #52]	@ 0x34
 8028f66:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 8028f6a:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 8028f6e:	6808      	ldr	r0, [r1, #0]
 8028f70:	f2c0 80d5 	blt.w	802911e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8028f74:	45c1      	cmp	r9, r8
 8028f76:	f340 80d2 	ble.w	802911e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8028f7a:	2e00      	cmp	r6, #0
 8028f7c:	f2c0 80cd 	blt.w	802911a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8028f80:	42b3      	cmp	r3, r6
 8028f82:	f340 80ca 	ble.w	802911a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8028f86:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8028f8a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8028f8e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028f92:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8028f96:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028f9a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028f9e:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 8028fa2:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 8028fa6:	fa5f fc8c 	uxtb.w	ip, ip
 8028faa:	023f      	lsls	r7, r7, #8
 8028fac:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028fb0:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 8028fb4:	ea47 070c 	orr.w	r7, r7, ip
 8028fb8:	1c72      	adds	r2, r6, #1
 8028fba:	f100 80b3 	bmi.w	8029124 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8028fbe:	4293      	cmp	r3, r2
 8028fc0:	f340 80b0 	ble.w	8029124 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8028fc4:	2c00      	cmp	r4, #0
 8028fc6:	f000 80ad 	beq.w	8029124 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8028fca:	f8ba b002 	ldrh.w	fp, [sl, #2]
 8028fce:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8028fd2:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 8028fd6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028fda:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8028fde:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028fe2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8028fe6:	fa5f fb8b 	uxtb.w	fp, fp
 8028fea:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028fee:	0212      	lsls	r2, r2, #8
 8028ff0:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8028ff4:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8028ff8:	ea4c 0c0b 	orr.w	ip, ip, fp
 8028ffc:	f118 0801 	adds.w	r8, r8, #1
 8029000:	f100 8094 	bmi.w	802912c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8029004:	45c1      	cmp	r9, r8
 8029006:	f340 8091 	ble.w	802912c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 802900a:	f1be 0f00 	cmp.w	lr, #0
 802900e:	f000 808d 	beq.w	802912c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8029012:	2e00      	cmp	r6, #0
 8029014:	f2c0 8088 	blt.w	8029128 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 8029018:	42b3      	cmp	r3, r6
 802901a:	f340 8085 	ble.w	8029128 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 802901e:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8029022:	ea4f 2228 	mov.w	r2, r8, asr #8
 8029026:	ea4f 09e8 	mov.w	r9, r8, asr #3
 802902a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802902e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8029032:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8029036:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 802903a:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 802903e:	fa5f f888 	uxtb.w	r8, r8
 8029042:	0212      	lsls	r2, r2, #8
 8029044:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8029048:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 802904c:	ea42 0208 	orr.w	r2, r2, r8
 8029050:	3601      	adds	r6, #1
 8029052:	d417      	bmi.n	8029084 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029054:	42b3      	cmp	r3, r6
 8029056:	dd15      	ble.n	8029084 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029058:	b1a4      	cbz	r4, 8029084 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802905a:	3301      	adds	r3, #1
 802905c:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 8029060:	10f3      	asrs	r3, r6, #3
 8029062:	1230      	asrs	r0, r6, #8
 8029064:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029068:	00f6      	lsls	r6, r6, #3
 802906a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802906e:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029072:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 8029076:	b2f6      	uxtb	r6, r6
 8029078:	0218      	lsls	r0, r3, #8
 802907a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802907e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8029082:	4330      	orrs	r0, r6
 8029084:	b2a4      	uxth	r4, r4
 8029086:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802908a:	fa1f fe8e 	uxth.w	lr, lr
 802908e:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 8029092:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029096:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802909a:	fb04 f80e 	mul.w	r8, r4, lr
 802909e:	0124      	lsls	r4, r4, #4
 80290a0:	2dff      	cmp	r5, #255	@ 0xff
 80290a2:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 80290a6:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 80290aa:	eba4 0408 	sub.w	r4, r4, r8
 80290ae:	fa1f fe8e 	uxth.w	lr, lr
 80290b2:	b2a4      	uxth	r4, r4
 80290b4:	eba9 090e 	sub.w	r9, r9, lr
 80290b8:	fb04 f303 	mul.w	r3, r4, r3
 80290bc:	fa1f f989 	uxth.w	r9, r9
 80290c0:	fb04 f40c 	mul.w	r4, r4, ip
 80290c4:	fb09 3606 	mla	r6, r9, r6, r3
 80290c8:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80290cc:	fb09 4407 	mla	r4, r9, r7, r4
 80290d0:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80290d4:	fb08 6603 	mla	r6, r8, r3, r6
 80290d8:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80290dc:	fb08 4000 	mla	r0, r8, r0, r4
 80290e0:	fb0e 6303 	mla	r3, lr, r3, r6
 80290e4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80290e8:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80290ec:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 80290f0:	fb0e 0303 	mla	r3, lr, r3, r0
 80290f4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80290f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80290fc:	ea43 0306 	orr.w	r3, r3, r6
 8029100:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8029104:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8029108:	b2d4      	uxtb	r4, r2
 802910a:	b2c6      	uxtb	r6, r0
 802910c:	d110      	bne.n	8029130 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 802910e:	700b      	strb	r3, [r1, #0]
 8029110:	7048      	strb	r0, [r1, #1]
 8029112:	708a      	strb	r2, [r1, #2]
 8029114:	70cd      	strb	r5, [r1, #3]
 8029116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802911a:	4607      	mov	r7, r0
 802911c:	e74c      	b.n	8028fb8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 802911e:	4684      	mov	ip, r0
 8029120:	4607      	mov	r7, r0
 8029122:	e76b      	b.n	8028ffc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8029124:	4684      	mov	ip, r0
 8029126:	e769      	b.n	8028ffc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8029128:	4602      	mov	r2, r0
 802912a:	e791      	b.n	8029050 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 802912c:	4602      	mov	r2, r0
 802912e:	e7a9      	b.n	8029084 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029130:	2d00      	cmp	r5, #0
 8029132:	d0f0      	beq.n	8029116 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 8029134:	78cf      	ldrb	r7, [r1, #3]
 8029136:	b2db      	uxtb	r3, r3
 8029138:	fb15 f606 	smulbb	r6, r5, r6
 802913c:	fb05 f207 	mul.w	r2, r5, r7
 8029140:	1c50      	adds	r0, r2, #1
 8029142:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029146:	19ea      	adds	r2, r5, r7
 8029148:	1200      	asrs	r0, r0, #8
 802914a:	1a12      	subs	r2, r2, r0
 802914c:	1a38      	subs	r0, r7, r0
 802914e:	780f      	ldrb	r7, [r1, #0]
 8029150:	b2d2      	uxtb	r2, r2
 8029152:	4347      	muls	r7, r0
 8029154:	70ca      	strb	r2, [r1, #3]
 8029156:	fb05 7303 	mla	r3, r5, r3, r7
 802915a:	fb15 f504 	smulbb	r5, r5, r4
 802915e:	fb93 f3f2 	sdiv	r3, r3, r2
 8029162:	700b      	strb	r3, [r1, #0]
 8029164:	784b      	ldrb	r3, [r1, #1]
 8029166:	fb00 6303 	mla	r3, r0, r3, r6
 802916a:	fb93 f3f2 	sdiv	r3, r3, r2
 802916e:	704b      	strb	r3, [r1, #1]
 8029170:	788b      	ldrb	r3, [r1, #2]
 8029172:	fb00 5503 	mla	r5, r0, r3, r5
 8029176:	fb95 f5f2 	sdiv	r5, r5, r2
 802917a:	708d      	strb	r5, [r1, #2]
 802917c:	e7cb      	b.n	8029116 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

0802917e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802917e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029182:	b08f      	sub	sp, #60	@ 0x3c
 8029184:	461f      	mov	r7, r3
 8029186:	920c      	str	r2, [sp, #48]	@ 0x30
 8029188:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802918a:	900d      	str	r0, [sp, #52]	@ 0x34
 802918c:	9107      	str	r1, [sp, #28]
 802918e:	6850      	ldr	r0, [r2, #4]
 8029190:	6812      	ldr	r2, [r2, #0]
 8029192:	f89d 4084 	ldrb.w	r4, [sp, #132]	@ 0x84
 8029196:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 802919a:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	@ 0x64
 802919e:	fb00 1303 	mla	r3, r0, r3, r1
 80291a2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80291a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80291a8:	681b      	ldr	r3, [r3, #0]
 80291aa:	9306      	str	r3, [sp, #24]
 80291ac:	9b07      	ldr	r3, [sp, #28]
 80291ae:	2b00      	cmp	r3, #0
 80291b0:	dc03      	bgt.n	80291ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80291b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80291b4:	2b00      	cmp	r3, #0
 80291b6:	f340 8230 	ble.w	802961a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80291ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80291bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80291c4:	1e48      	subs	r0, r1, #1
 80291c6:	1e56      	subs	r6, r2, #1
 80291c8:	2f00      	cmp	r7, #0
 80291ca:	f340 80bd 	ble.w	8029348 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80291ce:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80291d2:	ea4f 4328 	mov.w	r3, r8, asr #16
 80291d6:	d406      	bmi.n	80291e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80291d8:	4584      	cmp	ip, r0
 80291da:	da04      	bge.n	80291e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80291dc:	2b00      	cmp	r3, #0
 80291de:	db02      	blt.n	80291e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80291e0:	42b3      	cmp	r3, r6
 80291e2:	f2c0 80b2 	blt.w	802934a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 80291e6:	f11c 0c01 	adds.w	ip, ip, #1
 80291ea:	f100 80a5 	bmi.w	8029338 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80291ee:	4561      	cmp	r1, ip
 80291f0:	f2c0 80a2 	blt.w	8029338 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80291f4:	3301      	adds	r3, #1
 80291f6:	f100 809f 	bmi.w	8029338 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80291fa:	429a      	cmp	r2, r3
 80291fc:	f2c0 809c 	blt.w	8029338 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8029200:	46ba      	mov	sl, r7
 8029202:	464e      	mov	r6, r9
 8029204:	f1ba 0f00 	cmp.w	sl, #0
 8029208:	f340 80bb 	ble.w	8029382 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802920c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802920e:	1429      	asrs	r1, r5, #16
 8029210:	ea4f 4028 	mov.w	r0, r8, asr #16
 8029214:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8029218:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 802921c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8029220:	f100 8122 	bmi.w	8029468 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029224:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029228:	4559      	cmp	r1, fp
 802922a:	f280 811d 	bge.w	8029468 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 802922e:	2800      	cmp	r0, #0
 8029230:	f2c0 811a 	blt.w	8029468 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029234:	f103 3bff 	add.w	fp, r3, #4294967295
 8029238:	4558      	cmp	r0, fp
 802923a:	f280 8115 	bge.w	8029468 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 802923e:	fa0f fe8e 	sxth.w	lr, lr
 8029242:	9b06      	ldr	r3, [sp, #24]
 8029244:	fb00 110e 	mla	r1, r0, lr, r1
 8029248:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 802924c:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 8029250:	8841      	ldrh	r1, [r0, #2]
 8029252:	f1bc 0f00 	cmp.w	ip, #0
 8029256:	d00b      	beq.n	8029270 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 8029258:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802925c:	3b01      	subs	r3, #1
 802925e:	005b      	lsls	r3, r3, #1
 8029260:	3302      	adds	r3, #2
 8029262:	eb00 0e03 	add.w	lr, r0, r3
 8029266:	5ac3      	ldrh	r3, [r0, r3]
 8029268:	9308      	str	r3, [sp, #32]
 802926a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802926e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029270:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8029274:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8029278:	fb12 f30c 	smulbb	r3, r2, ip
 802927c:	f1cc 0e10 	rsb	lr, ip, #16
 8029280:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8029284:	2cff      	cmp	r4, #255	@ 0xff
 8029286:	ea4f 03e3 	mov.w	r3, r3, asr #3
 802928a:	ebae 0e02 	sub.w	lr, lr, r2
 802928e:	ea40 000b 	orr.w	r0, r0, fp
 8029292:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029296:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802929a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802929e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80292a2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80292a6:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 80292aa:	ea4b 0101 	orr.w	r1, fp, r1
 80292ae:	fb02 f101 	mul.w	r1, r2, r1
 80292b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80292b4:	fb0e 1e00 	mla	lr, lr, r0, r1
 80292b8:	ea4f 4002 	mov.w	r0, r2, lsl #16
 80292bc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80292c0:	9908      	ldr	r1, [sp, #32]
 80292c2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80292c6:	ea40 0002 	orr.w	r0, r0, r2
 80292ca:	9a08      	ldr	r2, [sp, #32]
 80292cc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80292d0:	fb03 e000 	mla	r0, r3, r0, lr
 80292d4:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80292d8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80292dc:	ea42 020e 	orr.w	r2, r2, lr
 80292e0:	fb0c 0c02 	mla	ip, ip, r2, r0
 80292e4:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80292e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80292ec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80292f0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80292f4:	ea43 0c0c 	orr.w	ip, r3, ip
 80292f8:	fa1f f38c 	uxth.w	r3, ip
 80292fc:	ea4f 2223 	mov.w	r2, r3, asr #8
 8029300:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8029304:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8029308:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802930c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029310:	b2db      	uxtb	r3, r3
 8029312:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029316:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802931a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802931e:	d174      	bne.n	802940a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8029320:	7033      	strb	r3, [r6, #0]
 8029322:	7071      	strb	r1, [r6, #1]
 8029324:	70b2      	strb	r2, [r6, #2]
 8029326:	70f4      	strb	r4, [r6, #3]
 8029328:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802932a:	3604      	adds	r6, #4
 802932c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029330:	441d      	add	r5, r3
 8029332:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029334:	4498      	add	r8, r3
 8029336:	e765      	b.n	8029204 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8029338:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802933a:	3f01      	subs	r7, #1
 802933c:	f109 0904 	add.w	r9, r9, #4
 8029340:	441d      	add	r5, r3
 8029342:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029344:	4498      	add	r8, r3
 8029346:	e73f      	b.n	80291c8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8029348:	d01f      	beq.n	802938a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802934a:	1e7b      	subs	r3, r7, #1
 802934c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802934e:	fb00 5003 	mla	r0, r0, r3, r5
 8029352:	1400      	asrs	r0, r0, #16
 8029354:	f53f af54 	bmi.w	8029200 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029358:	3901      	subs	r1, #1
 802935a:	4288      	cmp	r0, r1
 802935c:	f6bf af50 	bge.w	8029200 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029360:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8029362:	fb01 8303 	mla	r3, r1, r3, r8
 8029366:	141b      	asrs	r3, r3, #16
 8029368:	f53f af4a 	bmi.w	8029200 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802936c:	3a01      	subs	r2, #1
 802936e:	4293      	cmp	r3, r2
 8029370:	f6bf af46 	bge.w	8029200 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029374:	f109 0304 	add.w	r3, r9, #4
 8029378:	46ba      	mov	sl, r7
 802937a:	f1ba 0f00 	cmp.w	sl, #0
 802937e:	f300 8090 	bgt.w	80294a2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8029382:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8029386:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 802938a:	9b07      	ldr	r3, [sp, #28]
 802938c:	2b00      	cmp	r3, #0
 802938e:	f340 8144 	ble.w	802961a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8029392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029396:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029398:	ee30 0a04 	vadd.f32	s0, s0, s8
 802939c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80293a0:	eef0 6a62 	vmov.f32	s13, s5
 80293a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80293a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80293ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293b0:	ee16 5a90 	vmov	r5, s13
 80293b4:	eef0 6a43 	vmov.f32	s13, s6
 80293b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293bc:	ee16 8a90 	vmov	r8, s13
 80293c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80293c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80293c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80293cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80293d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80293d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80293d8:	ee12 2a90 	vmov	r2, s5
 80293dc:	eef0 2a47 	vmov.f32	s5, s14
 80293e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80293e4:	ee13 2a10 	vmov	r2, s6
 80293e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80293ea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80293ec:	eeb0 3a67 	vmov.f32	s6, s15
 80293f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80293f4:	931c      	str	r3, [sp, #112]	@ 0x70
 80293f6:	9b07      	ldr	r3, [sp, #28]
 80293f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80293fa:	3b01      	subs	r3, #1
 80293fc:	9307      	str	r3, [sp, #28]
 80293fe:	bf08      	it	eq
 8029400:	4617      	moveq	r7, r2
 8029402:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029404:	bf18      	it	ne
 8029406:	461f      	movne	r7, r3
 8029408:	e6d0      	b.n	80291ac <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802940a:	2c00      	cmp	r4, #0
 802940c:	d08c      	beq.n	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802940e:	f896 e003 	ldrb.w	lr, [r6, #3]
 8029412:	fb13 f304 	smulbb	r3, r3, r4
 8029416:	fb14 f101 	smulbb	r1, r4, r1
 802941a:	fb14 f202 	smulbb	r2, r4, r2
 802941e:	fb04 fc0e 	mul.w	ip, r4, lr
 8029422:	f10c 0001 	add.w	r0, ip, #1
 8029426:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802942a:	eb04 0c0e 	add.w	ip, r4, lr
 802942e:	1200      	asrs	r0, r0, #8
 8029430:	ebac 0c00 	sub.w	ip, ip, r0
 8029434:	ebae 0000 	sub.w	r0, lr, r0
 8029438:	f896 e000 	ldrb.w	lr, [r6]
 802943c:	fa5f fc8c 	uxtb.w	ip, ip
 8029440:	fb00 330e 	mla	r3, r0, lr, r3
 8029444:	f886 c003 	strb.w	ip, [r6, #3]
 8029448:	fb93 f3fc 	sdiv	r3, r3, ip
 802944c:	7033      	strb	r3, [r6, #0]
 802944e:	7873      	ldrb	r3, [r6, #1]
 8029450:	fb00 1103 	mla	r1, r0, r3, r1
 8029454:	78b3      	ldrb	r3, [r6, #2]
 8029456:	fb00 2003 	mla	r0, r0, r3, r2
 802945a:	fb91 f1fc 	sdiv	r1, r1, ip
 802945e:	fb90 f0fc 	sdiv	r0, r0, ip
 8029462:	7071      	strb	r1, [r6, #1]
 8029464:	70b0      	strb	r0, [r6, #2]
 8029466:	e75f      	b.n	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029468:	f111 0b01 	adds.w	fp, r1, #1
 802946c:	f53f af5c 	bmi.w	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029470:	45de      	cmp	lr, fp
 8029472:	f6ff af59 	blt.w	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029476:	f110 0b01 	adds.w	fp, r0, #1
 802947a:	f53f af55 	bmi.w	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802947e:	455b      	cmp	r3, fp
 8029480:	f6ff af52 	blt.w	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029484:	b21b      	sxth	r3, r3
 8029486:	9101      	str	r1, [sp, #4]
 8029488:	4631      	mov	r1, r6
 802948a:	9300      	str	r3, [sp, #0]
 802948c:	fa0f f38e 	sxth.w	r3, lr
 8029490:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8029494:	e9cd c404 	strd	ip, r4, [sp, #16]
 8029498:	9a06      	ldr	r2, [sp, #24]
 802949a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802949c:	f7ff fd55 	bl	8028f4a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 80294a0:	e742      	b.n	8029328 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80294a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80294a4:	142e      	asrs	r6, r5, #16
 80294a6:	ea4f 4028 	mov.w	r0, r8, asr #16
 80294aa:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80294ae:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 80294b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80294b6:	9a06      	ldr	r2, [sp, #24]
 80294b8:	fb0b 6000 	mla	r0, fp, r0, r6
 80294bc:	9e06      	ldr	r6, [sp, #24]
 80294be:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80294c2:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 80294c6:	8870      	ldrh	r0, [r6, #2]
 80294c8:	f1be 0f00 	cmp.w	lr, #0
 80294cc:	d00b      	beq.n	80294e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80294ce:	f10b 4200 	add.w	r2, fp, #2147483648	@ 0x80000000
 80294d2:	3a01      	subs	r2, #1
 80294d4:	0052      	lsls	r2, r2, #1
 80294d6:	3202      	adds	r2, #2
 80294d8:	eb06 0b02 	add.w	fp, r6, r2
 80294dc:	5ab2      	ldrh	r2, [r6, r2]
 80294de:	920a      	str	r2, [sp, #40]	@ 0x28
 80294e0:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80294e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80294e6:	ea4f 460c 	mov.w	r6, ip, lsl #16
 80294ea:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80294ee:	fb11 f20e 	smulbb	r2, r1, lr
 80294f2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80294f6:	f006 66fc 	and.w	r6, r6, #132120576	@ 0x7e00000
 80294fa:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80294fe:	10d2      	asrs	r2, r2, #3
 8029500:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029504:	ea46 060c 	orr.w	r6, r6, ip
 8029508:	f1ce 0c10 	rsb	ip, lr, #16
 802950c:	ea4b 0000 	orr.w	r0, fp, r0
 8029510:	2cff      	cmp	r4, #255	@ 0xff
 8029512:	ebac 0c01 	sub.w	ip, ip, r1
 8029516:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 802951a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802951e:	fb01 f000 	mul.w	r0, r1, r0
 8029522:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029524:	fb0c 0c06 	mla	ip, ip, r6, r0
 8029528:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802952a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802952e:	f421 66fc 	bic.w	r6, r1, #2016	@ 0x7e0
 8029532:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029534:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029538:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802953c:	ea4b 0606 	orr.w	r6, fp, r6
 8029540:	f420 6bfc 	bic.w	fp, r0, #2016	@ 0x7e0
 8029544:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8029548:	fb02 c606 	mla	r6, r2, r6, ip
 802954c:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8029550:	ea41 0b0b 	orr.w	fp, r1, fp
 8029554:	fb02 660b 	mla	r6, r2, fp, r6
 8029558:	ea4f 5256 	mov.w	r2, r6, lsr #21
 802955c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8029560:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029564:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8029568:	ea46 0602 	orr.w	r6, r6, r2
 802956c:	b2b2      	uxth	r2, r6
 802956e:	ea4f 2122 	mov.w	r1, r2, asr #8
 8029572:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8029576:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802957a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802957e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029582:	b2d2      	uxtb	r2, r2
 8029584:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029588:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802958c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029590:	d10f      	bne.n	80295b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8029592:	f803 2c04 	strb.w	r2, [r3, #-4]
 8029596:	f803 0c03 	strb.w	r0, [r3, #-3]
 802959a:	f803 1c02 	strb.w	r1, [r3, #-2]
 802959e:	f803 4c01 	strb.w	r4, [r3, #-1]
 80295a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80295a4:	3304      	adds	r3, #4
 80295a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80295aa:	4415      	add	r5, r2
 80295ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80295ae:	4490      	add	r8, r2
 80295b0:	e6e3      	b.n	802937a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80295b2:	2c00      	cmp	r4, #0
 80295b4:	d0f5      	beq.n	80295a2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80295b6:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 80295ba:	fb12 f204 	smulbb	r2, r2, r4
 80295be:	fb14 f000 	smulbb	r0, r4, r0
 80295c2:	fb14 f101 	smulbb	r1, r4, r1
 80295c6:	fb04 f60e 	mul.w	r6, r4, lr
 80295ca:	f106 0c01 	add.w	ip, r6, #1
 80295ce:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80295d2:	eb04 060e 	add.w	r6, r4, lr
 80295d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80295da:	eba6 060c 	sub.w	r6, r6, ip
 80295de:	ebae 0c0c 	sub.w	ip, lr, ip
 80295e2:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 80295e6:	b2f6      	uxtb	r6, r6
 80295e8:	fb0c 220e 	mla	r2, ip, lr, r2
 80295ec:	f803 6c01 	strb.w	r6, [r3, #-1]
 80295f0:	fb92 f2f6 	sdiv	r2, r2, r6
 80295f4:	f803 2c04 	strb.w	r2, [r3, #-4]
 80295f8:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80295fc:	fb0c 0002 	mla	r0, ip, r2, r0
 8029600:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8029604:	fb0c 1c02 	mla	ip, ip, r2, r1
 8029608:	fb90 f0f6 	sdiv	r0, r0, r6
 802960c:	fb9c fcf6 	sdiv	ip, ip, r6
 8029610:	f803 0c03 	strb.w	r0, [r3, #-3]
 8029614:	f803 cc02 	strb.w	ip, [r3, #-2]
 8029618:	e7c3      	b.n	80295a2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802961a:	b00f      	add	sp, #60	@ 0x3c
 802961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029620 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 8029620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029624:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	@ 0x28
 8029628:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 802962c:	fb08 7403 	mla	r4, r8, r3, r7
 8029630:	f1b8 0f00 	cmp.w	r8, #0
 8029634:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8029638:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802963c:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 8029640:	6808      	ldr	r0, [r1, #0]
 8029642:	f2c0 80be 	blt.w	80297c2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8029646:	45c2      	cmp	sl, r8
 8029648:	f340 80bb 	ble.w	80297c2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 802964c:	2f00      	cmp	r7, #0
 802964e:	f2c0 80b6 	blt.w	80297be <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8029652:	42bb      	cmp	r3, r7
 8029654:	f340 80b3 	ble.w	80297be <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8029658:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 802965c:	10d5      	asrs	r5, r2, #3
 802965e:	1214      	asrs	r4, r2, #8
 8029660:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8029664:	00d2      	lsls	r2, r2, #3
 8029666:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802966a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802966e:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 8029672:	b2d2      	uxtb	r2, r2
 8029674:	022c      	lsls	r4, r5, #8
 8029676:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802967a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 802967e:	4314      	orrs	r4, r2
 8029680:	1c7a      	adds	r2, r7, #1
 8029682:	f100 80a1 	bmi.w	80297c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029686:	4293      	cmp	r3, r2
 8029688:	f340 809e 	ble.w	80297c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 802968c:	2e00      	cmp	r6, #0
 802968e:	f000 809b 	beq.w	80297c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029692:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8029696:	ea4f 252e 	mov.w	r5, lr, asr #8
 802969a:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802969e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80296a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80296a6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80296aa:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 80296ae:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 80296b2:	fa5f fe8e 	uxtb.w	lr, lr
 80296b6:	022d      	lsls	r5, r5, #8
 80296b8:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80296bc:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 80296c0:	ea45 050e 	orr.w	r5, r5, lr
 80296c4:	f118 0801 	adds.w	r8, r8, #1
 80296c8:	f100 8082 	bmi.w	80297d0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 80296cc:	45c2      	cmp	sl, r8
 80296ce:	dd7f      	ble.n	80297d0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 80296d0:	f1bc 0f00 	cmp.w	ip, #0
 80296d4:	d07c      	beq.n	80297d0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 80296d6:	2f00      	cmp	r7, #0
 80296d8:	db78      	blt.n	80297cc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 80296da:	42bb      	cmp	r3, r7
 80296dc:	dd76      	ble.n	80297cc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 80296de:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 80296e2:	ea4f 08ee 	mov.w	r8, lr, asr #3
 80296e6:	ea4f 222e 	mov.w	r2, lr, asr #8
 80296ea:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 80296ee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80296f2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80296f6:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 80296fa:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 80296fe:	fa5f fe8e 	uxtb.w	lr, lr
 8029702:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8029706:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802970a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 802970e:	ea42 020e 	orr.w	r2, r2, lr
 8029712:	3701      	adds	r7, #1
 8029714:	d417      	bmi.n	8029746 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029716:	42bb      	cmp	r3, r7
 8029718:	dd15      	ble.n	8029746 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 802971a:	b1a6      	cbz	r6, 8029746 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 802971c:	3301      	adds	r3, #1
 802971e:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8029722:	10df      	asrs	r7, r3, #3
 8029724:	1218      	asrs	r0, r3, #8
 8029726:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802972a:	00db      	lsls	r3, r3, #3
 802972c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029730:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8029734:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8029738:	b2db      	uxtb	r3, r3
 802973a:	0238      	lsls	r0, r7, #8
 802973c:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8029740:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8029744:	4318      	orrs	r0, r3
 8029746:	b2b6      	uxth	r6, r6
 8029748:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 802974c:	fa1f f78c 	uxth.w	r7, ip
 8029750:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029754:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8029758:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802975c:	fb06 fc07 	mul.w	ip, r6, r7
 8029760:	0136      	lsls	r6, r6, #4
 8029762:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029766:	f5c6 7e80 	rsb	lr, r6, #256	@ 0x100
 802976a:	eba6 060c 	sub.w	r6, r6, ip
 802976e:	b2bf      	uxth	r7, r7
 8029770:	b2b6      	uxth	r6, r6
 8029772:	ebae 0e07 	sub.w	lr, lr, r7
 8029776:	4373      	muls	r3, r6
 8029778:	fa1f fe8e 	uxth.w	lr, lr
 802977c:	4375      	muls	r5, r6
 802977e:	fb0e 3808 	mla	r8, lr, r8, r3
 8029782:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8029786:	fb0e 5404 	mla	r4, lr, r4, r5
 802978a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802978e:	fb0c 8803 	mla	r8, ip, r3, r8
 8029792:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8029796:	fb0c 4000 	mla	r0, ip, r0, r4
 802979a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802979e:	fb07 8303 	mla	r3, r7, r3, r8
 80297a2:	fb07 0002 	mla	r0, r7, r2, r0
 80297a6:	0a1b      	lsrs	r3, r3, #8
 80297a8:	0a00      	lsrs	r0, r0, #8
 80297aa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80297ae:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80297b2:	4318      	orrs	r0, r3
 80297b4:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80297b8:	6008      	str	r0, [r1, #0]
 80297ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297be:	4604      	mov	r4, r0
 80297c0:	e75e      	b.n	8029680 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 80297c2:	4605      	mov	r5, r0
 80297c4:	4604      	mov	r4, r0
 80297c6:	e77d      	b.n	80296c4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 80297c8:	4605      	mov	r5, r0
 80297ca:	e77b      	b.n	80296c4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 80297cc:	4602      	mov	r2, r0
 80297ce:	e7a0      	b.n	8029712 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 80297d0:	4602      	mov	r2, r0
 80297d2:	e7b8      	b.n	8029746 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

080297d4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80297d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297d8:	b08f      	sub	sp, #60	@ 0x3c
 80297da:	461d      	mov	r5, r3
 80297dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80297de:	9107      	str	r1, [sp, #28]
 80297e0:	920c      	str	r2, [sp, #48]	@ 0x30
 80297e2:	6859      	ldr	r1, [r3, #4]
 80297e4:	681b      	ldr	r3, [r3, #0]
 80297e6:	900d      	str	r0, [sp, #52]	@ 0x34
 80297e8:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 80297ec:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 80297f0:	fb01 2707 	mla	r7, r1, r7, r2
 80297f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80297f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80297fa:	f8d3 8000 	ldr.w	r8, [r3]
 80297fe:	9b07      	ldr	r3, [sp, #28]
 8029800:	2b00      	cmp	r3, #0
 8029802:	dc03      	bgt.n	802980c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029804:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029806:	2b00      	cmp	r3, #0
 8029808:	f340 81aa 	ble.w	8029b60 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802980c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802980e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029812:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029816:	1e48      	subs	r0, r1, #1
 8029818:	f102 3cff 	add.w	ip, r2, #4294967295
 802981c:	2d00      	cmp	r5, #0
 802981e:	f340 80b0 	ble.w	8029982 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8029822:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029826:	ea4f 4326 	mov.w	r3, r6, asr #16
 802982a:	d406      	bmi.n	802983a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802982c:	4586      	cmp	lr, r0
 802982e:	da04      	bge.n	802983a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029830:	2b00      	cmp	r3, #0
 8029832:	db02      	blt.n	802983a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029834:	4563      	cmp	r3, ip
 8029836:	f2c0 80a5 	blt.w	8029984 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802983a:	f11e 0e01 	adds.w	lr, lr, #1
 802983e:	f100 8099 	bmi.w	8029974 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029842:	4571      	cmp	r1, lr
 8029844:	f2c0 8096 	blt.w	8029974 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029848:	3301      	adds	r3, #1
 802984a:	f100 8093 	bmi.w	8029974 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802984e:	429a      	cmp	r2, r3
 8029850:	f2c0 8090 	blt.w	8029974 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029854:	46aa      	mov	sl, r5
 8029856:	46b9      	mov	r9, r7
 8029858:	f1ba 0f00 	cmp.w	sl, #0
 802985c:	f340 80ac 	ble.w	80299b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8029860:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029862:	1421      	asrs	r1, r4, #16
 8029864:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029868:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802986c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029870:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8029874:	f100 80e4 	bmi.w	8029a40 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029878:	f10e 3bff 	add.w	fp, lr, #4294967295
 802987c:	4559      	cmp	r1, fp
 802987e:	f280 80df 	bge.w	8029a40 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029882:	2800      	cmp	r0, #0
 8029884:	f2c0 80dc 	blt.w	8029a40 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029888:	f103 3bff 	add.w	fp, r3, #4294967295
 802988c:	4558      	cmp	r0, fp
 802988e:	f280 80d7 	bge.w	8029a40 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029892:	fa0f fe8e 	sxth.w	lr, lr
 8029896:	fb00 110e 	mla	r1, r0, lr, r1
 802989a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802989e:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80298a2:	8841      	ldrh	r1, [r0, #2]
 80298a4:	f1bc 0f00 	cmp.w	ip, #0
 80298a8:	d00b      	beq.n	80298c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 80298aa:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 80298ae:	3b01      	subs	r3, #1
 80298b0:	005b      	lsls	r3, r3, #1
 80298b2:	3302      	adds	r3, #2
 80298b4:	eb00 0e03 	add.w	lr, r0, r3
 80298b8:	5ac3      	ldrh	r3, [r0, r3]
 80298ba:	9308      	str	r3, [sp, #32]
 80298bc:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80298c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80298c2:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80298c6:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80298ca:	fb12 f30c 	smulbb	r3, r2, ip
 80298ce:	f1cc 0e10 	rsb	lr, ip, #16
 80298d2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80298d6:	10db      	asrs	r3, r3, #3
 80298d8:	ebae 0e02 	sub.w	lr, lr, r2
 80298dc:	ea40 000b 	orr.w	r0, r0, fp
 80298e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80298e4:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80298e8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80298ec:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80298f0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80298f4:	ea4b 0101 	orr.w	r1, fp, r1
 80298f8:	4351      	muls	r1, r2
 80298fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80298fc:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029900:	0410      	lsls	r0, r2, #16
 8029902:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8029906:	9908      	ldr	r1, [sp, #32]
 8029908:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802990c:	4310      	orrs	r0, r2
 802990e:	9a08      	ldr	r2, [sp, #32]
 8029910:	0412      	lsls	r2, r2, #16
 8029912:	fb03 e000 	mla	r0, r3, r0, lr
 8029916:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 802991a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802991e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029922:	ea42 020e 	orr.w	r2, r2, lr
 8029926:	fb03 0302 	mla	r3, r3, r2, r0
 802992a:	0d59      	lsrs	r1, r3, #21
 802992c:	095b      	lsrs	r3, r3, #5
 802992e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8029932:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8029936:	430b      	orrs	r3, r1
 8029938:	b299      	uxth	r1, r3
 802993a:	10ca      	asrs	r2, r1, #3
 802993c:	1208      	asrs	r0, r1, #8
 802993e:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 8029942:	00c9      	lsls	r1, r1, #3
 8029944:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029948:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802994c:	b2c9      	uxtb	r1, r1
 802994e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8029952:	021b      	lsls	r3, r3, #8
 8029954:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029958:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802995c:	430b      	orrs	r3, r1
 802995e:	f8c9 3000 	str.w	r3, [r9]
 8029962:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029964:	f109 0904 	add.w	r9, r9, #4
 8029968:	f10a 3aff 	add.w	sl, sl, #4294967295
 802996c:	441c      	add	r4, r3
 802996e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029970:	441e      	add	r6, r3
 8029972:	e771      	b.n	8029858 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8029974:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029976:	3d01      	subs	r5, #1
 8029978:	3704      	adds	r7, #4
 802997a:	441c      	add	r4, r3
 802997c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802997e:	441e      	add	r6, r3
 8029980:	e74c      	b.n	802981c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029982:	d01d      	beq.n	80299c0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029984:	1e6b      	subs	r3, r5, #1
 8029986:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029988:	fb00 4003 	mla	r0, r0, r3, r4
 802998c:	1400      	asrs	r0, r0, #16
 802998e:	f53f af61 	bmi.w	8029854 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029992:	3901      	subs	r1, #1
 8029994:	4288      	cmp	r0, r1
 8029996:	f6bf af5d 	bge.w	8029854 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802999a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802999c:	fb01 6303 	mla	r3, r1, r3, r6
 80299a0:	141b      	asrs	r3, r3, #16
 80299a2:	f53f af57 	bmi.w	8029854 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80299a6:	3a01      	subs	r2, #1
 80299a8:	4293      	cmp	r3, r2
 80299aa:	f6bf af53 	bge.w	8029854 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80299ae:	46a9      	mov	r9, r5
 80299b0:	46ba      	mov	sl, r7
 80299b2:	f1b9 0f00 	cmp.w	r9, #0
 80299b6:	dc5b      	bgt.n	8029a70 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80299b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80299bc:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 80299c0:	9b07      	ldr	r3, [sp, #28]
 80299c2:	2b00      	cmp	r3, #0
 80299c4:	f340 80cc 	ble.w	8029b60 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80299c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80299cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80299ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80299d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80299d6:	eef0 6a62 	vmov.f32	s13, s5
 80299da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80299de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80299e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80299e6:	ee16 4a90 	vmov	r4, s13
 80299ea:	eef0 6a43 	vmov.f32	s13, s6
 80299ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80299f2:	ee16 6a90 	vmov	r6, s13
 80299f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80299fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80299fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029a02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029a06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029a0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029a0e:	ee12 2a90 	vmov	r2, s5
 8029a12:	eef0 2a47 	vmov.f32	s5, s14
 8029a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8029a1a:	ee13 2a10 	vmov	r2, s6
 8029a1e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029a20:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029a22:	eeb0 3a67 	vmov.f32	s6, s15
 8029a26:	fb92 f3f3 	sdiv	r3, r2, r3
 8029a2a:	931c      	str	r3, [sp, #112]	@ 0x70
 8029a2c:	9b07      	ldr	r3, [sp, #28]
 8029a2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029a30:	3b01      	subs	r3, #1
 8029a32:	9307      	str	r3, [sp, #28]
 8029a34:	bf08      	it	eq
 8029a36:	4615      	moveq	r5, r2
 8029a38:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029a3a:	bf18      	it	ne
 8029a3c:	461d      	movne	r5, r3
 8029a3e:	e6de      	b.n	80297fe <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8029a40:	f111 0b01 	adds.w	fp, r1, #1
 8029a44:	d48d      	bmi.n	8029962 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029a46:	45de      	cmp	lr, fp
 8029a48:	db8b      	blt.n	8029962 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029a4a:	f110 0b01 	adds.w	fp, r0, #1
 8029a4e:	d488      	bmi.n	8029962 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029a50:	455b      	cmp	r3, fp
 8029a52:	db86      	blt.n	8029962 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029a54:	b21b      	sxth	r3, r3
 8029a56:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8029a5a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8029a5e:	9300      	str	r3, [sp, #0]
 8029a60:	4642      	mov	r2, r8
 8029a62:	fa0f f38e 	sxth.w	r3, lr
 8029a66:	4649      	mov	r1, r9
 8029a68:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029a6a:	f7ff fdd9 	bl	8029620 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8029a6e:	e778      	b.n	8029962 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029a70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029a72:	1420      	asrs	r0, r4, #16
 8029a74:	1431      	asrs	r1, r6, #16
 8029a76:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029a7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029a7e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029a82:	fb03 0101 	mla	r1, r3, r1, r0
 8029a86:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029a8a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8029a8e:	8841      	ldrh	r1, [r0, #2]
 8029a90:	f1be 0f00 	cmp.w	lr, #0
 8029a94:	d00b      	beq.n	8029aae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8029a96:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029a9a:	3b01      	subs	r3, #1
 8029a9c:	005b      	lsls	r3, r3, #1
 8029a9e:	3302      	adds	r3, #2
 8029aa0:	eb00 0b03 	add.w	fp, r0, r3
 8029aa4:	5ac3      	ldrh	r3, [r0, r3]
 8029aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8029aa8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8029aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029aae:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029ab2:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8029ab6:	fb12 f30e 	smulbb	r3, r2, lr
 8029aba:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029abe:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8029ac2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8029ac6:	10db      	asrs	r3, r3, #3
 8029ac8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029acc:	ea40 000c 	orr.w	r0, r0, ip
 8029ad0:	f1ce 0c10 	rsb	ip, lr, #16
 8029ad4:	ea4b 0101 	orr.w	r1, fp, r1
 8029ad8:	f109 39ff 	add.w	r9, r9, #4294967295
 8029adc:	ebac 0c02 	sub.w	ip, ip, r2
 8029ae0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029ae4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029ae8:	4351      	muls	r1, r2
 8029aea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029aec:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029af0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029af2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029af6:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8029afa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029afc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029b00:	0412      	lsls	r2, r2, #16
 8029b02:	ea4b 0000 	orr.w	r0, fp, r0
 8029b06:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8029b0a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029b0e:	fb03 c000 	mla	r0, r3, r0, ip
 8029b12:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029b16:	ea42 0b0b 	orr.w	fp, r2, fp
 8029b1a:	fb03 000b 	mla	r0, r3, fp, r0
 8029b1e:	0d42      	lsrs	r2, r0, #21
 8029b20:	0940      	lsrs	r0, r0, #5
 8029b22:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029b26:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029b2a:	4310      	orrs	r0, r2
 8029b2c:	b282      	uxth	r2, r0
 8029b2e:	10d3      	asrs	r3, r2, #3
 8029b30:	1211      	asrs	r1, r2, #8
 8029b32:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029b36:	00d2      	lsls	r2, r2, #3
 8029b38:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8029b3c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029b40:	b2d2      	uxtb	r2, r2
 8029b42:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029b46:	021b      	lsls	r3, r3, #8
 8029b48:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8029b50:	431a      	orrs	r2, r3
 8029b52:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029b54:	441c      	add	r4, r3
 8029b56:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029b58:	f84a 2b04 	str.w	r2, [sl], #4
 8029b5c:	441e      	add	r6, r3
 8029b5e:	e728      	b.n	80299b2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8029b60:	b00f      	add	sp, #60	@ 0x3c
 8029b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029b66 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8029b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b6a:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	@ 0x28
 8029b6e:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8029b72:	fb09 6c03 	mla	ip, r9, r3, r6
 8029b76:	f1b9 0f00 	cmp.w	r9, #0
 8029b7a:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8029b7e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8029b82:	f89d e034 	ldrb.w	lr, [sp, #52]	@ 0x34
 8029b86:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 8029b8a:	eb02 080c 	add.w	r8, r2, ip
 8029b8e:	6808      	ldr	r0, [r1, #0]
 8029b90:	f2c0 80a0 	blt.w	8029cd4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8029b94:	45ca      	cmp	sl, r9
 8029b96:	f340 809d 	ble.w	8029cd4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8029b9a:	2e00      	cmp	r6, #0
 8029b9c:	f2c0 8098 	blt.w	8029cd0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8029ba0:	42b3      	cmp	r3, r6
 8029ba2:	f340 8095 	ble.w	8029cd0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8029ba6:	f898 7002 	ldrb.w	r7, [r8, #2]
 8029baa:	f898 b001 	ldrb.w	fp, [r8, #1]
 8029bae:	043f      	lsls	r7, r7, #16
 8029bb0:	f812 200c 	ldrb.w	r2, [r2, ip]
 8029bb4:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8029bb8:	4317      	orrs	r7, r2
 8029bba:	1c72      	adds	r2, r6, #1
 8029bbc:	f100 808b 	bmi.w	8029cd6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029bc0:	4293      	cmp	r3, r2
 8029bc2:	f340 8088 	ble.w	8029cd6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029bc6:	2c00      	cmp	r4, #0
 8029bc8:	f000 8085 	beq.w	8029cd6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029bcc:	f898 c005 	ldrb.w	ip, [r8, #5]
 8029bd0:	f898 2004 	ldrb.w	r2, [r8, #4]
 8029bd4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8029bd8:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8029bdc:	f898 2003 	ldrb.w	r2, [r8, #3]
 8029be0:	ea4c 0c02 	orr.w	ip, ip, r2
 8029be4:	f119 0901 	adds.w	r9, r9, #1
 8029be8:	d479      	bmi.n	8029cde <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029bea:	45ca      	cmp	sl, r9
 8029bec:	dd77      	ble.n	8029cde <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029bee:	f1be 0f00 	cmp.w	lr, #0
 8029bf2:	d074      	beq.n	8029cde <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029bf4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8029bf8:	2e00      	cmp	r6, #0
 8029bfa:	eb08 090a 	add.w	r9, r8, sl
 8029bfe:	db6c      	blt.n	8029cda <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8029c00:	42b3      	cmp	r3, r6
 8029c02:	dd6a      	ble.n	8029cda <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8029c04:	f899 2002 	ldrb.w	r2, [r9, #2]
 8029c08:	f899 b001 	ldrb.w	fp, [r9, #1]
 8029c0c:	0412      	lsls	r2, r2, #16
 8029c0e:	f818 800a 	ldrb.w	r8, [r8, sl]
 8029c12:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8029c16:	ea42 0208 	orr.w	r2, r2, r8
 8029c1a:	3601      	adds	r6, #1
 8029c1c:	d40c      	bmi.n	8029c38 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029c1e:	42b3      	cmp	r3, r6
 8029c20:	dd0a      	ble.n	8029c38 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029c22:	b14c      	cbz	r4, 8029c38 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029c24:	f899 0005 	ldrb.w	r0, [r9, #5]
 8029c28:	f899 3004 	ldrb.w	r3, [r9, #4]
 8029c2c:	0400      	lsls	r0, r0, #16
 8029c2e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8029c32:	f899 3003 	ldrb.w	r3, [r9, #3]
 8029c36:	4318      	orrs	r0, r3
 8029c38:	fa1f f38e 	uxth.w	r3, lr
 8029c3c:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 8029c40:	b2a4      	uxth	r4, r4
 8029c42:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029c46:	2dff      	cmp	r5, #255	@ 0xff
 8029c48:	fb04 f803 	mul.w	r8, r4, r3
 8029c4c:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8029c50:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 8029c54:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8029c58:	eba4 0408 	sub.w	r4, r4, r8
 8029c5c:	fa1f fe83 	uxth.w	lr, r3
 8029c60:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8029c64:	b2a4      	uxth	r4, r4
 8029c66:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029c6a:	eba9 090e 	sub.w	r9, r9, lr
 8029c6e:	fb04 f303 	mul.w	r3, r4, r3
 8029c72:	fa1f f989 	uxth.w	r9, r9
 8029c76:	fb04 f40c 	mul.w	r4, r4, ip
 8029c7a:	fb09 3606 	mla	r6, r9, r6, r3
 8029c7e:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8029c82:	fb09 4407 	mla	r4, r9, r7, r4
 8029c86:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8029c8a:	fb08 6603 	mla	r6, r8, r3, r6
 8029c8e:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8029c92:	fb08 4000 	mla	r0, r8, r0, r4
 8029c96:	fb0e 6303 	mla	r3, lr, r3, r6
 8029c9a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8029c9e:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 8029ca2:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8029ca6:	fb0e 0303 	mla	r3, lr, r3, r0
 8029caa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8029cae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029cb2:	ea43 0306 	orr.w	r3, r3, r6
 8029cb6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8029cba:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8029cbe:	b2d4      	uxtb	r4, r2
 8029cc0:	b2c6      	uxtb	r6, r0
 8029cc2:	d10e      	bne.n	8029ce2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 8029cc4:	700b      	strb	r3, [r1, #0]
 8029cc6:	7048      	strb	r0, [r1, #1]
 8029cc8:	708a      	strb	r2, [r1, #2]
 8029cca:	70cd      	strb	r5, [r1, #3]
 8029ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029cd0:	4607      	mov	r7, r0
 8029cd2:	e772      	b.n	8029bba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 8029cd4:	4607      	mov	r7, r0
 8029cd6:	4684      	mov	ip, r0
 8029cd8:	e784      	b.n	8029be4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 8029cda:	4602      	mov	r2, r0
 8029cdc:	e79d      	b.n	8029c1a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 8029cde:	4602      	mov	r2, r0
 8029ce0:	e7aa      	b.n	8029c38 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029ce2:	2d00      	cmp	r5, #0
 8029ce4:	d0f2      	beq.n	8029ccc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 8029ce6:	78cf      	ldrb	r7, [r1, #3]
 8029ce8:	b2db      	uxtb	r3, r3
 8029cea:	fb15 f606 	smulbb	r6, r5, r6
 8029cee:	fb05 f207 	mul.w	r2, r5, r7
 8029cf2:	1c50      	adds	r0, r2, #1
 8029cf4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029cf8:	19ea      	adds	r2, r5, r7
 8029cfa:	1200      	asrs	r0, r0, #8
 8029cfc:	1a12      	subs	r2, r2, r0
 8029cfe:	1a38      	subs	r0, r7, r0
 8029d00:	780f      	ldrb	r7, [r1, #0]
 8029d02:	b2d2      	uxtb	r2, r2
 8029d04:	4347      	muls	r7, r0
 8029d06:	70ca      	strb	r2, [r1, #3]
 8029d08:	fb05 7303 	mla	r3, r5, r3, r7
 8029d0c:	fb15 f504 	smulbb	r5, r5, r4
 8029d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8029d14:	700b      	strb	r3, [r1, #0]
 8029d16:	784b      	ldrb	r3, [r1, #1]
 8029d18:	fb00 6303 	mla	r3, r0, r3, r6
 8029d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8029d20:	704b      	strb	r3, [r1, #1]
 8029d22:	788b      	ldrb	r3, [r1, #2]
 8029d24:	fb00 5503 	mla	r5, r0, r3, r5
 8029d28:	fb95 f5f2 	sdiv	r5, r5, r2
 8029d2c:	708d      	strb	r5, [r1, #2]
 8029d2e:	e7cd      	b.n	8029ccc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

08029d30 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d34:	b09b      	sub	sp, #108	@ 0x6c
 8029d36:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8029d3a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8029d3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8029d3e:	9307      	str	r3, [sp, #28]
 8029d40:	6850      	ldr	r0, [r2, #4]
 8029d42:	6812      	ldr	r2, [r2, #0]
 8029d44:	f89d 40b4 	ldrb.w	r4, [sp, #180]	@ 0xb4
 8029d48:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8029d4c:	fb00 1303 	mla	r3, r0, r3, r1
 8029d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029d54:	9308      	str	r3, [sp, #32]
 8029d56:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029d58:	681b      	ldr	r3, [r3, #0]
 8029d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029d5e:	2b00      	cmp	r3, #0
 8029d60:	dc03      	bgt.n	8029d6a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d64:	2b00      	cmp	r3, #0
 8029d66:	f340 8231 	ble.w	802a1cc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8029d6a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029d6c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029d70:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029d74:	1e48      	subs	r0, r1, #1
 8029d76:	1e55      	subs	r5, r2, #1
 8029d78:	9b07      	ldr	r3, [sp, #28]
 8029d7a:	2b00      	cmp	r3, #0
 8029d7c:	f340 80c3 	ble.w	8029f06 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029d80:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8029d82:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029d84:	1436      	asrs	r6, r6, #16
 8029d86:	ea4f 4323 	mov.w	r3, r3, asr #16
 8029d8a:	d406      	bmi.n	8029d9a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029d8c:	4286      	cmp	r6, r0
 8029d8e:	da04      	bge.n	8029d9a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029d90:	2b00      	cmp	r3, #0
 8029d92:	db02      	blt.n	8029d9a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029d94:	42ab      	cmp	r3, r5
 8029d96:	f2c0 80b7 	blt.w	8029f08 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8029d9a:	3601      	adds	r6, #1
 8029d9c:	f100 80a4 	bmi.w	8029ee8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029da0:	42b1      	cmp	r1, r6
 8029da2:	f2c0 80a1 	blt.w	8029ee8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029da6:	3301      	adds	r3, #1
 8029da8:	f100 809e 	bmi.w	8029ee8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029dac:	429a      	cmp	r2, r3
 8029dae:	f2c0 809b 	blt.w	8029ee8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029db2:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8029db6:	f1bb 0f00 	cmp.w	fp, #0
 8029dba:	f340 80c5 	ble.w	8029f48 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8029dbe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029dc0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8029dc2:	1418      	asrs	r0, r3, #16
 8029dc4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029dc6:	68cf      	ldr	r7, [r1, #12]
 8029dc8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029dcc:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8029dce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029dd0:	1409      	asrs	r1, r1, #16
 8029dd2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8029dd6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029dd8:	689b      	ldr	r3, [r3, #8]
 8029dda:	f100 8127 	bmi.w	802a02c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029dde:	f103 3cff 	add.w	ip, r3, #4294967295
 8029de2:	4561      	cmp	r1, ip
 8029de4:	f280 8122 	bge.w	802a02c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029de8:	2800      	cmp	r0, #0
 8029dea:	f2c0 811f 	blt.w	802a02c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029dee:	f107 3cff 	add.w	ip, r7, #4294967295
 8029df2:	4560      	cmp	r0, ip
 8029df4:	f280 811a 	bge.w	802a02c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029df8:	b21b      	sxth	r3, r3
 8029dfa:	fb00 1103 	mla	r1, r0, r3, r1
 8029dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029e00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029e04:	1847      	adds	r7, r0, r1
 8029e06:	5c40      	ldrb	r0, [r0, r1]
 8029e08:	7879      	ldrb	r1, [r7, #1]
 8029e0a:	f897 e002 	ldrb.w	lr, [r7, #2]
 8029e0e:	910c      	str	r1, [sp, #48]	@ 0x30
 8029e10:	f897 9003 	ldrb.w	r9, [r7, #3]
 8029e14:	f897 8004 	ldrb.w	r8, [r7, #4]
 8029e18:	f897 a005 	ldrb.w	sl, [r7, #5]
 8029e1c:	b1cd      	cbz	r5, 8029e52 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8029e1e:	f04f 0c03 	mov.w	ip, #3
 8029e22:	f06f 0104 	mvn.w	r1, #4
 8029e26:	3705      	adds	r7, #5
 8029e28:	fb13 130c 	smlabb	r3, r3, ip, r1
 8029e2c:	eb07 0c03 	add.w	ip, r7, r3
 8029e30:	5cfb      	ldrb	r3, [r7, r3]
 8029e32:	930d      	str	r3, [sp, #52]	@ 0x34
 8029e34:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8029e38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029e3a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8029e3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8029e40:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8029e44:	930e      	str	r3, [sp, #56]	@ 0x38
 8029e46:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8029e4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8029e4c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8029e50:	9312      	str	r3, [sp, #72]	@ 0x48
 8029e52:	b292      	uxth	r2, r2
 8029e54:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029e56:	b2ad      	uxth	r5, r5
 8029e58:	2cff      	cmp	r4, #255	@ 0xff
 8029e5a:	fb02 f305 	mul.w	r3, r2, r5
 8029e5e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8029e62:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 8029e66:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8029e6a:	eba2 0203 	sub.w	r2, r2, r3
 8029e6e:	b2ad      	uxth	r5, r5
 8029e70:	b292      	uxth	r2, r2
 8029e72:	eba7 0705 	sub.w	r7, r7, r5
 8029e76:	fb02 f909 	mul.w	r9, r2, r9
 8029e7a:	b2bf      	uxth	r7, r7
 8029e7c:	fb02 f808 	mul.w	r8, r2, r8
 8029e80:	fb02 fa0a 	mul.w	sl, r2, sl
 8029e84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029e86:	fb07 9900 	mla	r9, r7, r0, r9
 8029e8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029e8c:	fb07 8801 	mla	r8, r7, r1, r8
 8029e90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029e92:	fb07 aa0e 	mla	sl, r7, lr, sl
 8029e96:	fb05 9900 	mla	r9, r5, r0, r9
 8029e9a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029e9c:	fb05 8801 	mla	r8, r5, r1, r8
 8029ea0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8029ea2:	fb05 a502 	mla	r5, r5, r2, sl
 8029ea6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029ea8:	fb03 9900 	mla	r9, r3, r0, r9
 8029eac:	fb03 8801 	mla	r8, r3, r1, r8
 8029eb0:	fb03 5302 	mla	r3, r3, r2, r5
 8029eb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8029eb8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8029ebc:	ea4f 2323 	mov.w	r3, r3, asr #8
 8029ec0:	f040 8088 	bne.w	8029fd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8029ec4:	f886 9000 	strb.w	r9, [r6]
 8029ec8:	f886 8001 	strb.w	r8, [r6, #1]
 8029ecc:	70b3      	strb	r3, [r6, #2]
 8029ece:	70f4      	strb	r4, [r6, #3]
 8029ed0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029ed2:	3604      	adds	r6, #4
 8029ed4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8029ed6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029eda:	4413      	add	r3, r2
 8029edc:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8029ede:	9325      	str	r3, [sp, #148]	@ 0x94
 8029ee0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029ee2:	4413      	add	r3, r2
 8029ee4:	9326      	str	r3, [sp, #152]	@ 0x98
 8029ee6:	e766      	b.n	8029db6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8029ee8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029eea:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8029eec:	4433      	add	r3, r6
 8029eee:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8029ef0:	9325      	str	r3, [sp, #148]	@ 0x94
 8029ef2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029ef4:	4433      	add	r3, r6
 8029ef6:	9326      	str	r3, [sp, #152]	@ 0x98
 8029ef8:	9b07      	ldr	r3, [sp, #28]
 8029efa:	3b01      	subs	r3, #1
 8029efc:	9307      	str	r3, [sp, #28]
 8029efe:	9b08      	ldr	r3, [sp, #32]
 8029f00:	3304      	adds	r3, #4
 8029f02:	9308      	str	r3, [sp, #32]
 8029f04:	e738      	b.n	8029d78 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029f06:	d026      	beq.n	8029f56 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8029f08:	9b07      	ldr	r3, [sp, #28]
 8029f0a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8029f0c:	3b01      	subs	r3, #1
 8029f0e:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8029f10:	fb00 5003 	mla	r0, r0, r3, r5
 8029f14:	1400      	asrs	r0, r0, #16
 8029f16:	f53f af4c 	bmi.w	8029db2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029f1a:	3901      	subs	r1, #1
 8029f1c:	4288      	cmp	r0, r1
 8029f1e:	f6bf af48 	bge.w	8029db2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029f22:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8029f24:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8029f26:	fb01 0303 	mla	r3, r1, r3, r0
 8029f2a:	141b      	asrs	r3, r3, #16
 8029f2c:	f53f af41 	bmi.w	8029db2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029f30:	3a01      	subs	r2, #1
 8029f32:	4293      	cmp	r3, r2
 8029f34:	f6bf af3d 	bge.w	8029db2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029f38:	9b08      	ldr	r3, [sp, #32]
 8029f3a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8029f3e:	1d18      	adds	r0, r3, #4
 8029f40:	f1be 0f00 	cmp.w	lr, #0
 8029f44:	f300 808e 	bgt.w	802a064 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8029f48:	9b07      	ldr	r3, [sp, #28]
 8029f4a:	9a08      	ldr	r2, [sp, #32]
 8029f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029f54:	9308      	str	r3, [sp, #32]
 8029f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029f58:	2b00      	cmp	r3, #0
 8029f5a:	f340 8137 	ble.w	802a1cc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8029f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029f62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029f68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029f6c:	eef0 6a62 	vmov.f32	s13, s5
 8029f70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029f74:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029f78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f7c:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8029f80:	eef0 6a43 	vmov.f32	s13, s6
 8029f84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f88:	edcd 6a26 	vstr	s13, [sp, #152]	@ 0x98
 8029f8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029f90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029f94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029f98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029f9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029fa0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029fa4:	ee12 2a90 	vmov	r2, s5
 8029fa8:	eef0 2a47 	vmov.f32	s5, s14
 8029fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8029fb0:	ee13 2a10 	vmov	r2, s6
 8029fb4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029fb6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029fb8:	eeb0 3a67 	vmov.f32	s6, s15
 8029fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8029fc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029fc4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029fc6:	3b01      	subs	r3, #1
 8029fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8029fca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029fcc:	bf08      	it	eq
 8029fce:	4613      	moveq	r3, r2
 8029fd0:	9307      	str	r3, [sp, #28]
 8029fd2:	e6c3      	b.n	8029d5c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8029fd4:	2c00      	cmp	r4, #0
 8029fd6:	f43f af7b 	beq.w	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029fda:	78f0      	ldrb	r0, [r6, #3]
 8029fdc:	fa5f f989 	uxtb.w	r9, r9
 8029fe0:	fa5f f888 	uxtb.w	r8, r8
 8029fe4:	fb04 f100 	mul.w	r1, r4, r0
 8029fe8:	1822      	adds	r2, r4, r0
 8029fea:	b2db      	uxtb	r3, r3
 8029fec:	1c4d      	adds	r5, r1, #1
 8029fee:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029ff2:	1229      	asrs	r1, r5, #8
 8029ff4:	1a45      	subs	r5, r0, r1
 8029ff6:	1a52      	subs	r2, r2, r1
 8029ff8:	7831      	ldrb	r1, [r6, #0]
 8029ffa:	b2d2      	uxtb	r2, r2
 8029ffc:	4369      	muls	r1, r5
 8029ffe:	70f2      	strb	r2, [r6, #3]
 802a000:	fb04 1909 	mla	r9, r4, r9, r1
 802a004:	7871      	ldrb	r1, [r6, #1]
 802a006:	4369      	muls	r1, r5
 802a008:	fb04 1808 	mla	r8, r4, r8, r1
 802a00c:	78b1      	ldrb	r1, [r6, #2]
 802a00e:	434d      	muls	r5, r1
 802a010:	fb04 5303 	mla	r3, r4, r3, r5
 802a014:	fb99 f9f2 	sdiv	r9, r9, r2
 802a018:	fb98 f8f2 	sdiv	r8, r8, r2
 802a01c:	fb93 f3f2 	sdiv	r3, r3, r2
 802a020:	f886 9000 	strb.w	r9, [r6]
 802a024:	f886 8001 	strb.w	r8, [r6, #1]
 802a028:	70b3      	strb	r3, [r6, #2]
 802a02a:	e751      	b.n	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a02c:	f111 0c01 	adds.w	ip, r1, #1
 802a030:	f53f af4e 	bmi.w	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a034:	4563      	cmp	r3, ip
 802a036:	f6ff af4b 	blt.w	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a03a:	f110 0c01 	adds.w	ip, r0, #1
 802a03e:	f53f af47 	bmi.w	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a042:	4567      	cmp	r7, ip
 802a044:	f6ff af44 	blt.w	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a048:	b23f      	sxth	r7, r7
 802a04a:	9101      	str	r1, [sp, #4]
 802a04c:	b21b      	sxth	r3, r3
 802a04e:	4631      	mov	r1, r6
 802a050:	9700      	str	r7, [sp, #0]
 802a052:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802a056:	e9cd 5404 	strd	r5, r4, [sp, #16]
 802a05a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a05c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a05e:	f7ff fd82 	bl	8029b66 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 802a062:	e735      	b.n	8029ed0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a064:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a066:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a068:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802a06c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a06e:	1412      	asrs	r2, r2, #16
 802a070:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802a074:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a076:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802a07a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a07c:	141b      	asrs	r3, r3, #16
 802a07e:	fb0c 2303 	mla	r3, ip, r3, r2
 802a082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a088:	18d6      	adds	r6, r2, r3
 802a08a:	5cd2      	ldrb	r2, [r2, r3]
 802a08c:	7873      	ldrb	r3, [r6, #1]
 802a08e:	f896 8002 	ldrb.w	r8, [r6, #2]
 802a092:	930c      	str	r3, [sp, #48]	@ 0x30
 802a094:	f896 a003 	ldrb.w	sl, [r6, #3]
 802a098:	f896 9004 	ldrb.w	r9, [r6, #4]
 802a09c:	f896 b005 	ldrb.w	fp, [r6, #5]
 802a0a0:	b1a5      	cbz	r5, 802a0cc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802a0a2:	2703      	movs	r7, #3
 802a0a4:	f06f 0304 	mvn.w	r3, #4
 802a0a8:	3605      	adds	r6, #5
 802a0aa:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802a0ae:	eb06 070c 	add.w	r7, r6, ip
 802a0b2:	f816 600c 	ldrb.w	r6, [r6, ip]
 802a0b6:	9613      	str	r6, [sp, #76]	@ 0x4c
 802a0b8:	787e      	ldrb	r6, [r7, #1]
 802a0ba:	9615      	str	r6, [sp, #84]	@ 0x54
 802a0bc:	78be      	ldrb	r6, [r7, #2]
 802a0be:	9617      	str	r6, [sp, #92]	@ 0x5c
 802a0c0:	78fe      	ldrb	r6, [r7, #3]
 802a0c2:	9614      	str	r6, [sp, #80]	@ 0x50
 802a0c4:	793e      	ldrb	r6, [r7, #4]
 802a0c6:	9616      	str	r6, [sp, #88]	@ 0x58
 802a0c8:	797e      	ldrb	r6, [r7, #5]
 802a0ca:	9618      	str	r6, [sp, #96]	@ 0x60
 802a0cc:	b289      	uxth	r1, r1
 802a0ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a0d0:	b2ad      	uxth	r5, r5
 802a0d2:	2cff      	cmp	r4, #255	@ 0xff
 802a0d4:	fb01 f605 	mul.w	r6, r1, r5
 802a0d8:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802a0dc:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 802a0e0:	f5c1 7780 	rsb	r7, r1, #256	@ 0x100
 802a0e4:	eba1 0106 	sub.w	r1, r1, r6
 802a0e8:	b2ad      	uxth	r5, r5
 802a0ea:	b289      	uxth	r1, r1
 802a0ec:	eba7 0705 	sub.w	r7, r7, r5
 802a0f0:	fb01 f909 	mul.w	r9, r1, r9
 802a0f4:	b2bf      	uxth	r7, r7
 802a0f6:	fb01 fa0a 	mul.w	sl, r1, sl
 802a0fa:	fb01 fb0b 	mul.w	fp, r1, fp
 802a0fe:	fb07 9903 	mla	r9, r7, r3, r9
 802a102:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802a104:	fb07 aa02 	mla	sl, r7, r2, sl
 802a108:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a10a:	fb05 9903 	mla	r9, r5, r3, r9
 802a10e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a110:	fb07 bb08 	mla	fp, r7, r8, fp
 802a114:	fb06 9903 	mla	r9, r6, r3, r9
 802a118:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a11a:	fb05 aa02 	mla	sl, r5, r2, sl
 802a11e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a120:	fb05 bb03 	mla	fp, r5, r3, fp
 802a124:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a126:	fb06 aa02 	mla	sl, r6, r2, sl
 802a12a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802a12e:	fb06 b603 	mla	r6, r6, r3, fp
 802a132:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802a136:	ea4f 2626 	mov.w	r6, r6, asr #8
 802a13a:	d113      	bne.n	802a164 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802a13c:	f800 ac04 	strb.w	sl, [r0, #-4]
 802a140:	f800 9c03 	strb.w	r9, [r0, #-3]
 802a144:	f800 6c02 	strb.w	r6, [r0, #-2]
 802a148:	f800 4c01 	strb.w	r4, [r0, #-1]
 802a14c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a14e:	3004      	adds	r0, #4
 802a150:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802a152:	f10e 3eff 	add.w	lr, lr, #4294967295
 802a156:	4413      	add	r3, r2
 802a158:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802a15a:	9325      	str	r3, [sp, #148]	@ 0x94
 802a15c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a15e:	4413      	add	r3, r2
 802a160:	9326      	str	r3, [sp, #152]	@ 0x98
 802a162:	e6ed      	b.n	8029f40 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802a164:	2c00      	cmp	r4, #0
 802a166:	d0f1      	beq.n	802a14c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a168:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 802a16c:	fa5f fa8a 	uxtb.w	sl, sl
 802a170:	fa5f f989 	uxtb.w	r9, r9
 802a174:	fb04 f302 	mul.w	r3, r4, r2
 802a178:	eb04 0c02 	add.w	ip, r4, r2
 802a17c:	b2f6      	uxtb	r6, r6
 802a17e:	1c59      	adds	r1, r3, #1
 802a180:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a184:	120b      	asrs	r3, r1, #8
 802a186:	1ad1      	subs	r1, r2, r3
 802a188:	ebac 0c03 	sub.w	ip, ip, r3
 802a18c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 802a190:	fa5f fc8c 	uxtb.w	ip, ip
 802a194:	434b      	muls	r3, r1
 802a196:	f800 cc01 	strb.w	ip, [r0, #-1]
 802a19a:	fb04 3a0a 	mla	sl, r4, sl, r3
 802a19e:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 802a1a2:	434b      	muls	r3, r1
 802a1a4:	fb04 3909 	mla	r9, r4, r9, r3
 802a1a8:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 802a1ac:	4359      	muls	r1, r3
 802a1ae:	fb04 1606 	mla	r6, r4, r6, r1
 802a1b2:	fb9a fafc 	sdiv	sl, sl, ip
 802a1b6:	fb99 f9fc 	sdiv	r9, r9, ip
 802a1ba:	fb96 f6fc 	sdiv	r6, r6, ip
 802a1be:	f800 ac04 	strb.w	sl, [r0, #-4]
 802a1c2:	f800 9c03 	strb.w	r9, [r0, #-3]
 802a1c6:	f800 6c02 	strb.w	r6, [r0, #-2]
 802a1ca:	e7bf      	b.n	802a14c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a1cc:	b01b      	add	sp, #108	@ 0x6c
 802a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a1d2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 802a1d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a1d6:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	@ 0x24
 802a1da:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 802a1de:	fb08 7603 	mla	r6, r8, r3, r7
 802a1e2:	f1b8 0f00 	cmp.w	r8, #0
 802a1e6:	f89d 502c 	ldrb.w	r5, [sp, #44]	@ 0x2c
 802a1ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802a1ee:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 802a1f2:	6808      	ldr	r0, [r1, #0]
 802a1f4:	eb02 0e06 	add.w	lr, r2, r6
 802a1f8:	f2c0 8089 	blt.w	802a30e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802a1fc:	45c1      	cmp	r9, r8
 802a1fe:	f340 8086 	ble.w	802a30e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802a202:	2f00      	cmp	r7, #0
 802a204:	f2c0 8081 	blt.w	802a30a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802a208:	42bb      	cmp	r3, r7
 802a20a:	dd7e      	ble.n	802a30a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802a20c:	f89e 4002 	ldrb.w	r4, [lr, #2]
 802a210:	f89e a001 	ldrb.w	sl, [lr, #1]
 802a214:	0424      	lsls	r4, r4, #16
 802a216:	5d92      	ldrb	r2, [r2, r6]
 802a218:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 802a21c:	4314      	orrs	r4, r2
 802a21e:	1c7a      	adds	r2, r7, #1
 802a220:	d478      	bmi.n	802a314 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a222:	4293      	cmp	r3, r2
 802a224:	dd76      	ble.n	802a314 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a226:	2d00      	cmp	r5, #0
 802a228:	d074      	beq.n	802a314 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a22a:	f89e 6005 	ldrb.w	r6, [lr, #5]
 802a22e:	f89e 2004 	ldrb.w	r2, [lr, #4]
 802a232:	0436      	lsls	r6, r6, #16
 802a234:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 802a238:	f89e 2003 	ldrb.w	r2, [lr, #3]
 802a23c:	4316      	orrs	r6, r2
 802a23e:	f118 0801 	adds.w	r8, r8, #1
 802a242:	d46b      	bmi.n	802a31c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a244:	45c1      	cmp	r9, r8
 802a246:	dd69      	ble.n	802a31c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a248:	f1bc 0f00 	cmp.w	ip, #0
 802a24c:	d066      	beq.n	802a31c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a24e:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 802a252:	2f00      	cmp	r7, #0
 802a254:	eb0e 0809 	add.w	r8, lr, r9
 802a258:	db5e      	blt.n	802a318 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802a25a:	42bb      	cmp	r3, r7
 802a25c:	dd5c      	ble.n	802a318 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802a25e:	f898 2002 	ldrb.w	r2, [r8, #2]
 802a262:	f898 a001 	ldrb.w	sl, [r8, #1]
 802a266:	0412      	lsls	r2, r2, #16
 802a268:	f81e e009 	ldrb.w	lr, [lr, r9]
 802a26c:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 802a270:	ea42 020e 	orr.w	r2, r2, lr
 802a274:	3701      	adds	r7, #1
 802a276:	d40c      	bmi.n	802a292 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a278:	42bb      	cmp	r3, r7
 802a27a:	dd0a      	ble.n	802a292 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a27c:	b14d      	cbz	r5, 802a292 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a27e:	f898 0005 	ldrb.w	r0, [r8, #5]
 802a282:	f898 3004 	ldrb.w	r3, [r8, #4]
 802a286:	0400      	lsls	r0, r0, #16
 802a288:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 802a28c:	f898 3003 	ldrb.w	r3, [r8, #3]
 802a290:	4318      	orrs	r0, r3
 802a292:	b2ad      	uxth	r5, r5
 802a294:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 802a298:	fa1f f78c 	uxth.w	r7, ip
 802a29c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802a2a0:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 802a2a4:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a2a8:	fb05 fc07 	mul.w	ip, r5, r7
 802a2ac:	012d      	lsls	r5, r5, #4
 802a2ae:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a2b2:	f5c5 7e80 	rsb	lr, r5, #256	@ 0x100
 802a2b6:	eba5 050c 	sub.w	r5, r5, ip
 802a2ba:	b2bf      	uxth	r7, r7
 802a2bc:	b2ad      	uxth	r5, r5
 802a2be:	ebae 0e07 	sub.w	lr, lr, r7
 802a2c2:	436b      	muls	r3, r5
 802a2c4:	fa1f fe8e 	uxth.w	lr, lr
 802a2c8:	436e      	muls	r6, r5
 802a2ca:	fb0e 3808 	mla	r8, lr, r8, r3
 802a2ce:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802a2d2:	fb0e 6404 	mla	r4, lr, r4, r6
 802a2d6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a2da:	fb0c 8803 	mla	r8, ip, r3, r8
 802a2de:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 802a2e2:	fb0c 4000 	mla	r0, ip, r0, r4
 802a2e6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a2ea:	fb07 8303 	mla	r3, r7, r3, r8
 802a2ee:	fb07 0002 	mla	r0, r7, r2, r0
 802a2f2:	0a1b      	lsrs	r3, r3, #8
 802a2f4:	0a00      	lsrs	r0, r0, #8
 802a2f6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a2fa:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a2fe:	4318      	orrs	r0, r3
 802a300:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 802a304:	6008      	str	r0, [r1, #0]
 802a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a30a:	4604      	mov	r4, r0
 802a30c:	e787      	b.n	802a21e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 802a30e:	4606      	mov	r6, r0
 802a310:	4604      	mov	r4, r0
 802a312:	e794      	b.n	802a23e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802a314:	4606      	mov	r6, r0
 802a316:	e792      	b.n	802a23e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802a318:	4602      	mov	r2, r0
 802a31a:	e7ab      	b.n	802a274 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 802a31c:	4602      	mov	r2, r0
 802a31e:	e7b8      	b.n	802a292 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

0802a320 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a324:	b09b      	sub	sp, #108	@ 0x6c
 802a326:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 802a32a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a32c:	9019      	str	r0, [sp, #100]	@ 0x64
 802a32e:	9306      	str	r3, [sp, #24]
 802a330:	6850      	ldr	r0, [r2, #4]
 802a332:	6812      	ldr	r2, [r2, #0]
 802a334:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a338:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	@ 0x94
 802a33c:	fb00 1303 	mla	r3, r0, r3, r1
 802a340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a344:	9307      	str	r3, [sp, #28]
 802a346:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a348:	681b      	ldr	r3, [r3, #0]
 802a34a:	9308      	str	r3, [sp, #32]
 802a34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a34e:	2b00      	cmp	r3, #0
 802a350:	dc03      	bgt.n	802a35a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a354:	2b00      	cmp	r3, #0
 802a356:	f340 81a6 	ble.w	802a6a6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802a35a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a35c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a360:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a364:	1e48      	subs	r0, r1, #1
 802a366:	1e55      	subs	r5, r2, #1
 802a368:	9b06      	ldr	r3, [sp, #24]
 802a36a:	2b00      	cmp	r3, #0
 802a36c:	f340 80b0 	ble.w	802a4d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802a370:	1426      	asrs	r6, r4, #16
 802a372:	ea4f 432a 	mov.w	r3, sl, asr #16
 802a376:	d406      	bmi.n	802a386 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a378:	4286      	cmp	r6, r0
 802a37a:	da04      	bge.n	802a386 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a37c:	2b00      	cmp	r3, #0
 802a37e:	db02      	blt.n	802a386 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a380:	42ab      	cmp	r3, r5
 802a382:	f2c0 80a6 	blt.w	802a4d2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a386:	3601      	adds	r6, #1
 802a388:	f100 8097 	bmi.w	802a4ba <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a38c:	42b1      	cmp	r1, r6
 802a38e:	f2c0 8094 	blt.w	802a4ba <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a392:	3301      	adds	r3, #1
 802a394:	f100 8091 	bmi.w	802a4ba <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a398:	429a      	cmp	r2, r3
 802a39a:	f2c0 808e 	blt.w	802a4ba <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a39e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802a3a2:	f1bb 0f00 	cmp.w	fp, #0
 802a3a6:	f340 80af 	ble.w	802a508 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802a3aa:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802a3ac:	ea4f 452a 	mov.w	r5, sl, asr #16
 802a3b0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a3b2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a3b6:	68c7      	ldr	r7, [r0, #12]
 802a3b8:	1420      	asrs	r0, r4, #16
 802a3ba:	f3ca 3103 	ubfx	r1, sl, #12, #4
 802a3be:	689b      	ldr	r3, [r3, #8]
 802a3c0:	f100 80e8 	bmi.w	802a594 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a3c4:	f103 3cff 	add.w	ip, r3, #4294967295
 802a3c8:	4560      	cmp	r0, ip
 802a3ca:	f280 80e3 	bge.w	802a594 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a3ce:	2d00      	cmp	r5, #0
 802a3d0:	f2c0 80e0 	blt.w	802a594 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a3d4:	f107 3cff 	add.w	ip, r7, #4294967295
 802a3d8:	4565      	cmp	r5, ip
 802a3da:	f280 80db 	bge.w	802a594 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a3de:	b21b      	sxth	r3, r3
 802a3e0:	fb05 0003 	mla	r0, r5, r3, r0
 802a3e4:	9d08      	ldr	r5, [sp, #32]
 802a3e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a3ea:	182f      	adds	r7, r5, r0
 802a3ec:	5c28      	ldrb	r0, [r5, r0]
 802a3ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 802a3f0:	7978      	ldrb	r0, [r7, #5]
 802a3f2:	787d      	ldrb	r5, [r7, #1]
 802a3f4:	f897 e002 	ldrb.w	lr, [r7, #2]
 802a3f8:	f897 9003 	ldrb.w	r9, [r7, #3]
 802a3fc:	f897 8004 	ldrb.w	r8, [r7, #4]
 802a400:	900c      	str	r0, [sp, #48]	@ 0x30
 802a402:	b1c1      	cbz	r1, 802a436 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802a404:	f06f 0c04 	mvn.w	ip, #4
 802a408:	2003      	movs	r0, #3
 802a40a:	3705      	adds	r7, #5
 802a40c:	fb13 c300 	smlabb	r3, r3, r0, ip
 802a410:	eb07 0c03 	add.w	ip, r7, r3
 802a414:	5cfb      	ldrb	r3, [r7, r3]
 802a416:	930d      	str	r3, [sp, #52]	@ 0x34
 802a418:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802a41c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a41e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802a422:	9311      	str	r3, [sp, #68]	@ 0x44
 802a424:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802a428:	930e      	str	r3, [sp, #56]	@ 0x38
 802a42a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802a42e:	9310      	str	r3, [sp, #64]	@ 0x40
 802a430:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802a434:	9312      	str	r3, [sp, #72]	@ 0x48
 802a436:	b292      	uxth	r2, r2
 802a438:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802a43a:	b289      	uxth	r1, r1
 802a43c:	fb02 f301 	mul.w	r3, r2, r1
 802a440:	0112      	lsls	r2, r2, #4
 802a442:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a446:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a44a:	1ad2      	subs	r2, r2, r3
 802a44c:	b289      	uxth	r1, r1
 802a44e:	b292      	uxth	r2, r2
 802a450:	1a7f      	subs	r7, r7, r1
 802a452:	fb02 f909 	mul.w	r9, r2, r9
 802a456:	b2bf      	uxth	r7, r7
 802a458:	fb02 f808 	mul.w	r8, r2, r8
 802a45c:	fb07 9900 	mla	r9, r7, r0, r9
 802a460:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a462:	fb07 8805 	mla	r8, r7, r5, r8
 802a466:	fb01 9900 	mla	r9, r1, r0, r9
 802a46a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a46c:	fb03 9900 	mla	r9, r3, r0, r9
 802a470:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a472:	fb01 8800 	mla	r8, r1, r0, r8
 802a476:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a478:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802a47c:	fb03 8800 	mla	r8, r3, r0, r8
 802a480:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a482:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a486:	4342      	muls	r2, r0
 802a488:	ea49 0908 	orr.w	r9, r9, r8
 802a48c:	fb07 280e 	mla	r8, r7, lr, r2
 802a490:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a492:	fb01 8802 	mla	r8, r1, r2, r8
 802a496:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a498:	fb03 8802 	mla	r8, r3, r2, r8
 802a49c:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802a4a0:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
 802a4a4:	ea49 0308 	orr.w	r3, r9, r8
 802a4a8:	6033      	str	r3, [r6, #0]
 802a4aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a4ac:	3604      	adds	r6, #4
 802a4ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a4b2:	441c      	add	r4, r3
 802a4b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a4b6:	449a      	add	sl, r3
 802a4b8:	e773      	b.n	802a3a2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a4ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a4bc:	441c      	add	r4, r3
 802a4be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a4c0:	449a      	add	sl, r3
 802a4c2:	9b06      	ldr	r3, [sp, #24]
 802a4c4:	3b01      	subs	r3, #1
 802a4c6:	9306      	str	r3, [sp, #24]
 802a4c8:	9b07      	ldr	r3, [sp, #28]
 802a4ca:	3304      	adds	r3, #4
 802a4cc:	9307      	str	r3, [sp, #28]
 802a4ce:	e74b      	b.n	802a368 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a4d0:	d021      	beq.n	802a516 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802a4d2:	9b06      	ldr	r3, [sp, #24]
 802a4d4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a4d6:	3b01      	subs	r3, #1
 802a4d8:	fb00 4003 	mla	r0, r0, r3, r4
 802a4dc:	1400      	asrs	r0, r0, #16
 802a4de:	f53f af5e 	bmi.w	802a39e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a4e2:	3901      	subs	r1, #1
 802a4e4:	4288      	cmp	r0, r1
 802a4e6:	f6bf af5a 	bge.w	802a39e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a4ea:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a4ec:	fb01 a303 	mla	r3, r1, r3, sl
 802a4f0:	141b      	asrs	r3, r3, #16
 802a4f2:	f53f af54 	bmi.w	802a39e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a4f6:	3a01      	subs	r2, #1
 802a4f8:	4293      	cmp	r3, r2
 802a4fa:	f6bf af50 	bge.w	802a39e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a4fe:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 802a502:	f1bc 0f00 	cmp.w	ip, #0
 802a506:	dc5c      	bgt.n	802a5c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802a508:	9b06      	ldr	r3, [sp, #24]
 802a50a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802a50e:	9b07      	ldr	r3, [sp, #28]
 802a510:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802a514:	9307      	str	r3, [sp, #28]
 802a516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a518:	2b00      	cmp	r3, #0
 802a51a:	f340 80c4 	ble.w	802a6a6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802a51e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a522:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a524:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a528:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a52c:	eef0 6a62 	vmov.f32	s13, s5
 802a530:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a534:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a538:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a53c:	ee16 4a90 	vmov	r4, s13
 802a540:	eef0 6a43 	vmov.f32	s13, s6
 802a544:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a548:	ee16 aa90 	vmov	sl, s13
 802a54c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a550:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a554:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a558:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a55c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a560:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a564:	ee12 2a90 	vmov	r2, s5
 802a568:	eef0 2a47 	vmov.f32	s5, s14
 802a56c:	fb92 f3f3 	sdiv	r3, r2, r3
 802a570:	ee13 2a10 	vmov	r2, s6
 802a574:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a576:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a578:	eeb0 3a67 	vmov.f32	s6, s15
 802a57c:	fb92 f3f3 	sdiv	r3, r2, r3
 802a580:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a586:	3b01      	subs	r3, #1
 802a588:	9309      	str	r3, [sp, #36]	@ 0x24
 802a58a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a58c:	bf08      	it	eq
 802a58e:	4613      	moveq	r3, r2
 802a590:	9306      	str	r3, [sp, #24]
 802a592:	e6db      	b.n	802a34c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a594:	f110 0c01 	adds.w	ip, r0, #1
 802a598:	d487      	bmi.n	802a4aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a59a:	4563      	cmp	r3, ip
 802a59c:	db85      	blt.n	802a4aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a59e:	f115 0c01 	adds.w	ip, r5, #1
 802a5a2:	d482      	bmi.n	802a4aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a5a4:	4567      	cmp	r7, ip
 802a5a6:	db80      	blt.n	802a4aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a5a8:	b23f      	sxth	r7, r7
 802a5aa:	b21b      	sxth	r3, r3
 802a5ac:	9700      	str	r7, [sp, #0]
 802a5ae:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802a5b2:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802a5b6:	9a08      	ldr	r2, [sp, #32]
 802a5b8:	4631      	mov	r1, r6
 802a5ba:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a5bc:	f7ff fe09 	bl	802a1d2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 802a5c0:	e773      	b.n	802a4aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a5c2:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802a5c4:	1420      	asrs	r0, r4, #16
 802a5c6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a5ca:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802a5ce:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802a5d2:	ea4f 412a 	mov.w	r1, sl, asr #16
 802a5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a5d8:	fb07 0101 	mla	r1, r7, r1, r0
 802a5dc:	9808      	ldr	r0, [sp, #32]
 802a5de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a5e2:	1845      	adds	r5, r0, r1
 802a5e4:	5c41      	ldrb	r1, [r0, r1]
 802a5e6:	78ae      	ldrb	r6, [r5, #2]
 802a5e8:	7868      	ldrb	r0, [r5, #1]
 802a5ea:	960c      	str	r6, [sp, #48]	@ 0x30
 802a5ec:	f895 9003 	ldrb.w	r9, [r5, #3]
 802a5f0:	f895 8004 	ldrb.w	r8, [r5, #4]
 802a5f4:	f895 b005 	ldrb.w	fp, [r5, #5]
 802a5f8:	b192      	cbz	r2, 802a620 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802a5fa:	2603      	movs	r6, #3
 802a5fc:	f06f 0304 	mvn.w	r3, #4
 802a600:	3505      	adds	r5, #5
 802a602:	fb17 3706 	smlabb	r7, r7, r6, r3
 802a606:	19ee      	adds	r6, r5, r7
 802a608:	5ded      	ldrb	r5, [r5, r7]
 802a60a:	9513      	str	r5, [sp, #76]	@ 0x4c
 802a60c:	7875      	ldrb	r5, [r6, #1]
 802a60e:	9515      	str	r5, [sp, #84]	@ 0x54
 802a610:	78b5      	ldrb	r5, [r6, #2]
 802a612:	9517      	str	r5, [sp, #92]	@ 0x5c
 802a614:	78f5      	ldrb	r5, [r6, #3]
 802a616:	9514      	str	r5, [sp, #80]	@ 0x50
 802a618:	7935      	ldrb	r5, [r6, #4]
 802a61a:	9516      	str	r5, [sp, #88]	@ 0x58
 802a61c:	7975      	ldrb	r5, [r6, #5]
 802a61e:	9518      	str	r5, [sp, #96]	@ 0x60
 802a620:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 802a624:	b292      	uxth	r2, r2
 802a626:	f10c 3cff 	add.w	ip, ip, #4294967295
 802a62a:	fb03 f502 	mul.w	r5, r3, r2
 802a62e:	011b      	lsls	r3, r3, #4
 802a630:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802a634:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 802a638:	1b5b      	subs	r3, r3, r5
 802a63a:	b292      	uxth	r2, r2
 802a63c:	b29b      	uxth	r3, r3
 802a63e:	1ab6      	subs	r6, r6, r2
 802a640:	fb03 f909 	mul.w	r9, r3, r9
 802a644:	b2b6      	uxth	r6, r6
 802a646:	fb03 f808 	mul.w	r8, r3, r8
 802a64a:	fb03 fb0b 	mul.w	fp, r3, fp
 802a64e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a650:	fb06 9901 	mla	r9, r6, r1, r9
 802a654:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802a656:	fb06 8800 	mla	r8, r6, r0, r8
 802a65a:	fb02 9901 	mla	r9, r2, r1, r9
 802a65e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802a660:	fb06 bb03 	mla	fp, r6, r3, fp
 802a664:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a666:	fb05 9901 	mla	r9, r5, r1, r9
 802a66a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802a66c:	fb02 bb03 	mla	fp, r2, r3, fp
 802a670:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a672:	fb02 8801 	mla	r8, r2, r1, r8
 802a676:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802a678:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802a67c:	fb05 8801 	mla	r8, r5, r1, r8
 802a680:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a684:	ea49 0908 	orr.w	r9, r9, r8
 802a688:	fb05 b803 	mla	r8, r5, r3, fp
 802a68c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a68e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802a692:	441c      	add	r4, r3
 802a694:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a696:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
 802a69a:	449a      	add	sl, r3
 802a69c:	ea49 0508 	orr.w	r5, r9, r8
 802a6a0:	f84e 5b04 	str.w	r5, [lr], #4
 802a6a4:	e72d      	b.n	802a502 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802a6a6:	b01b      	add	sp, #108	@ 0x6c
 802a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a6ac <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 802a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6b0:	b085      	sub	sp, #20
 802a6b2:	6808      	ldr	r0, [r1, #0]
 802a6b4:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	@ 0x3c
 802a6b8:	f9bd a038 	ldrsh.w	sl, [sp, #56]	@ 0x38
 802a6bc:	fb08 6403 	mla	r4, r8, r3, r6
 802a6c0:	f1b8 0f00 	cmp.w	r8, #0
 802a6c4:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 802a6c8:	f89d e048 	ldrb.w	lr, [sp, #72]	@ 0x48
 802a6cc:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 802a6d0:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 802a6d4:	f2c0 80fc 	blt.w	802a8d0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802a6d8:	45c2      	cmp	sl, r8
 802a6da:	f340 80f9 	ble.w	802a8d0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802a6de:	2e00      	cmp	r6, #0
 802a6e0:	f2c0 80f4 	blt.w	802a8cc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802a6e4:	42b3      	cmp	r3, r6
 802a6e6:	f340 80f1 	ble.w	802a8cc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802a6ea:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 802a6ee:	1c72      	adds	r2, r6, #1
 802a6f0:	f100 80ef 	bmi.w	802a8d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802a6f4:	4293      	cmp	r3, r2
 802a6f6:	f340 80ec 	ble.w	802a8d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802a6fa:	f1bc 0f00 	cmp.w	ip, #0
 802a6fe:	f000 80e8 	beq.w	802a8d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802a702:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802a706:	f118 0801 	adds.w	r8, r8, #1
 802a70a:	f100 80e6 	bmi.w	802a8da <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802a70e:	45c2      	cmp	sl, r8
 802a710:	f340 80e3 	ble.w	802a8da <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802a714:	f1be 0f00 	cmp.w	lr, #0
 802a718:	f000 80df 	beq.w	802a8da <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802a71c:	2e00      	cmp	r6, #0
 802a71e:	f2c0 80da 	blt.w	802a8d6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802a722:	42b3      	cmp	r3, r6
 802a724:	f340 80d7 	ble.w	802a8d6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802a728:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 802a72c:	3601      	adds	r6, #1
 802a72e:	d407      	bmi.n	802a740 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a730:	42b3      	cmp	r3, r6
 802a732:	dd05      	ble.n	802a740 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a734:	f1bc 0f00 	cmp.w	ip, #0
 802a738:	d002      	beq.n	802a740 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a73a:	3301      	adds	r3, #1
 802a73c:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 802a740:	fa1f fc8c 	uxth.w	ip, ip
 802a744:	fa1f f38e 	uxth.w	r3, lr
 802a748:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802a74c:	fb03 fe0c 	mul.w	lr, r3, ip
 802a750:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802a754:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802a758:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 802a75c:	ebac 060e 	sub.w	r6, ip, lr
 802a760:	f5cc 7c80 	rsb	ip, ip, #256	@ 0x100
 802a764:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802a768:	b29b      	uxth	r3, r3
 802a76a:	b2b6      	uxth	r6, r6
 802a76c:	ebac 0c03 	sub.w	ip, ip, r3
 802a770:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802a774:	9601      	str	r6, [sp, #4]
 802a776:	fa1f f68c 	uxth.w	r6, ip
 802a77a:	9602      	str	r6, [sp, #8]
 802a77c:	9e01      	ldr	r6, [sp, #4]
 802a77e:	fb06 fc0a 	mul.w	ip, r6, sl
 802a782:	9e02      	ldr	r6, [sp, #8]
 802a784:	fb06 cc0b 	mla	ip, r6, fp, ip
 802a788:	fb03 cc09 	mla	ip, r3, r9, ip
 802a78c:	fb0e cc08 	mla	ip, lr, r8, ip
 802a790:	f3cc 2607 	ubfx	r6, ip, #8, #8
 802a794:	9603      	str	r6, [sp, #12]
 802a796:	2e00      	cmp	r6, #0
 802a798:	f000 8095 	beq.w	802a8c6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802a79c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a7a0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802a7a4:	fb0b fc0c 	mul.w	ip, fp, ip
 802a7a8:	fb0b f505 	mul.w	r5, fp, r5
 802a7ac:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802a7b0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a7b4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802a7b8:	44dc      	add	ip, fp
 802a7ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a7be:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 802a7c2:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802a7c6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802a7ca:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a7ce:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a7d2:	fb0a fc0c 	mul.w	ip, sl, ip
 802a7d6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802a7da:	fb0a fa04 	mul.w	sl, sl, r4
 802a7de:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802a7e2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a7e6:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 802a7ea:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802a7ee:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a7f2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 802a7f6:	4465      	add	r5, ip
 802a7f8:	f002 1cff 	and.w	ip, r2, #16711935	@ 0xff00ff
 802a7fc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a804:	fb09 fc0c 	mul.w	ip, r9, ip
 802a808:	0a2d      	lsrs	r5, r5, #8
 802a80a:	fb09 f902 	mul.w	r9, r9, r2
 802a80e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a812:	ea4f 241c 	mov.w	r4, ip, lsr #8
 802a816:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a81a:	f509 7280 	add.w	r2, r9, #256	@ 0x100
 802a81e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a822:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a826:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802a82a:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
 802a82e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a832:	4464      	add	r4, ip
 802a834:	fb08 f202 	mul.w	r2, r8, r2
 802a838:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a83c:	fb08 f800 	mul.w	r8, r8, r0
 802a840:	0a24      	lsrs	r4, r4, #8
 802a842:	0a10      	lsrs	r0, r2, #8
 802a844:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 802a848:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a84c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a850:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802a854:	4402      	add	r2, r0
 802a856:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 802a85a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802a85e:	9801      	ldr	r0, [sp, #4]
 802a860:	0a12      	lsrs	r2, r2, #8
 802a862:	4345      	muls	r5, r0
 802a864:	9802      	ldr	r0, [sp, #8]
 802a866:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a86a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a86e:	fb06 5500 	mla	r5, r6, r0, r5
 802a872:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a876:	fb02 520e 	mla	r2, r2, lr, r5
 802a87a:	fb04 2403 	mla	r4, r4, r3, r2
 802a87e:	9a01      	ldr	r2, [sp, #4]
 802a880:	fb02 f60a 	mul.w	r6, r2, sl
 802a884:	0a24      	lsrs	r4, r4, #8
 802a886:	9a03      	ldr	r2, [sp, #12]
 802a888:	fb00 660b 	mla	r6, r0, fp, r6
 802a88c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a890:	fb07 fc02 	mul.w	ip, r7, r2
 802a894:	fb0e 6e08 	mla	lr, lr, r8, r6
 802a898:	fb03 e309 	mla	r3, r3, r9, lr
 802a89c:	0a1b      	lsrs	r3, r3, #8
 802a89e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a8a2:	4323      	orrs	r3, r4
 802a8a4:	f10c 0401 	add.w	r4, ip, #1
 802a8a8:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 802a8ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802a8b0:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802a8b4:	1224      	asrs	r4, r4, #8
 802a8b6:	b2d5      	uxtb	r5, r2
 802a8b8:	2cff      	cmp	r4, #255	@ 0xff
 802a8ba:	b2c6      	uxtb	r6, r0
 802a8bc:	d10f      	bne.n	802a8de <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 802a8be:	700b      	strb	r3, [r1, #0]
 802a8c0:	7048      	strb	r0, [r1, #1]
 802a8c2:	708a      	strb	r2, [r1, #2]
 802a8c4:	70cc      	strb	r4, [r1, #3]
 802a8c6:	b005      	add	sp, #20
 802a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8cc:	4605      	mov	r5, r0
 802a8ce:	e70e      	b.n	802a6ee <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 802a8d0:	4605      	mov	r5, r0
 802a8d2:	4604      	mov	r4, r0
 802a8d4:	e717      	b.n	802a706 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 802a8d6:	4602      	mov	r2, r0
 802a8d8:	e728      	b.n	802a72c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 802a8da:	4602      	mov	r2, r0
 802a8dc:	e730      	b.n	802a740 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a8de:	b2e2      	uxtb	r2, r4
 802a8e0:	2c00      	cmp	r4, #0
 802a8e2:	d0f0      	beq.n	802a8c6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802a8e4:	78cc      	ldrb	r4, [r1, #3]
 802a8e6:	b2db      	uxtb	r3, r3
 802a8e8:	fb17 f606 	smulbb	r6, r7, r6
 802a8ec:	fb02 fc04 	mul.w	ip, r2, r4
 802a8f0:	4422      	add	r2, r4
 802a8f2:	f10c 0001 	add.w	r0, ip, #1
 802a8f6:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802a8fa:	1200      	asrs	r0, r0, #8
 802a8fc:	1a24      	subs	r4, r4, r0
 802a8fe:	1a12      	subs	r2, r2, r0
 802a900:	7808      	ldrb	r0, [r1, #0]
 802a902:	b2d2      	uxtb	r2, r2
 802a904:	4360      	muls	r0, r4
 802a906:	70ca      	strb	r2, [r1, #3]
 802a908:	fb07 0303 	mla	r3, r7, r3, r0
 802a90c:	7848      	ldrb	r0, [r1, #1]
 802a90e:	fb17 f705 	smulbb	r7, r7, r5
 802a912:	fb04 6000 	mla	r0, r4, r0, r6
 802a916:	fb93 f3f2 	sdiv	r3, r3, r2
 802a91a:	2bff      	cmp	r3, #255	@ 0xff
 802a91c:	bfd6      	itet	le
 802a91e:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802a922:	23ff      	movgt	r3, #255	@ 0xff
 802a924:	b2db      	uxtble	r3, r3
 802a926:	fb90 f0f2 	sdiv	r0, r0, r2
 802a92a:	700b      	strb	r3, [r1, #0]
 802a92c:	28ff      	cmp	r0, #255	@ 0xff
 802a92e:	788b      	ldrb	r3, [r1, #2]
 802a930:	bfd4      	ite	le
 802a932:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802a936:	20ff      	movgt	r0, #255	@ 0xff
 802a938:	fb04 7303 	mla	r3, r4, r3, r7
 802a93c:	bfd8      	it	le
 802a93e:	b2c0      	uxtble	r0, r0
 802a940:	fb93 f3f2 	sdiv	r3, r3, r2
 802a944:	2bff      	cmp	r3, #255	@ 0xff
 802a946:	7048      	strb	r0, [r1, #1]
 802a948:	bfd6      	itet	le
 802a94a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802a94e:	23ff      	movgt	r3, #255	@ 0xff
 802a950:	b2db      	uxtble	r3, r3
 802a952:	708b      	strb	r3, [r1, #2]
 802a954:	e7b7      	b.n	802a8c6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

0802a956 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a95a:	b09b      	sub	sp, #108	@ 0x6c
 802a95c:	9218      	str	r2, [sp, #96]	@ 0x60
 802a95e:	9306      	str	r3, [sp, #24]
 802a960:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a962:	f89d 30b4 	ldrb.w	r3, [sp, #180]	@ 0xb4
 802a966:	9019      	str	r0, [sp, #100]	@ 0x64
 802a968:	9116      	str	r1, [sp, #88]	@ 0x58
 802a96a:	6850      	ldr	r0, [r2, #4]
 802a96c:	9307      	str	r3, [sp, #28]
 802a96e:	6812      	ldr	r2, [r2, #0]
 802a970:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a974:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802a978:	fb00 1303 	mla	r3, r0, r3, r1
 802a97c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a980:	930a      	str	r3, [sp, #40]	@ 0x28
 802a982:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a984:	681b      	ldr	r3, [r3, #0]
 802a986:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a988:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a98a:	2b00      	cmp	r3, #0
 802a98c:	dc03      	bgt.n	802a996 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802a98e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a990:	2b00      	cmp	r3, #0
 802a992:	f340 83b3 	ble.w	802b0fc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802a996:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a998:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a99c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a9a0:	1e48      	subs	r0, r1, #1
 802a9a2:	1e57      	subs	r7, r2, #1
 802a9a4:	9b06      	ldr	r3, [sp, #24]
 802a9a6:	2b00      	cmp	r3, #0
 802a9a8:	f340 8167 	ble.w	802ac7a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802a9ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a9b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a9b4:	d406      	bmi.n	802a9c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802a9b6:	4584      	cmp	ip, r0
 802a9b8:	da04      	bge.n	802a9c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802a9ba:	2b00      	cmp	r3, #0
 802a9bc:	db02      	blt.n	802a9c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802a9be:	42bb      	cmp	r3, r7
 802a9c0:	f2c0 815c 	blt.w	802ac7c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802a9c4:	f11c 0c01 	adds.w	ip, ip, #1
 802a9c8:	f100 814c 	bmi.w	802ac64 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802a9cc:	4561      	cmp	r1, ip
 802a9ce:	f2c0 8149 	blt.w	802ac64 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802a9d2:	3301      	adds	r3, #1
 802a9d4:	f100 8146 	bmi.w	802ac64 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802a9d8:	429a      	cmp	r2, r3
 802a9da:	f2c0 8143 	blt.w	802ac64 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802a9de:	9b06      	ldr	r3, [sp, #24]
 802a9e0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802a9e2:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a9e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a9e6:	2b00      	cmp	r3, #0
 802a9e8:	f340 8165 	ble.w	802acb6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802a9ec:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802a9ee:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a9f2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a9f4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a9f8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a9fc:	1422      	asrs	r2, r4, #16
 802a9fe:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802aa02:	689b      	ldr	r3, [r3, #8]
 802aa04:	f100 81e7 	bmi.w	802add6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802aa08:	f103 38ff 	add.w	r8, r3, #4294967295
 802aa0c:	4542      	cmp	r2, r8
 802aa0e:	f280 81e2 	bge.w	802add6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802aa12:	f1bc 0f00 	cmp.w	ip, #0
 802aa16:	f2c0 81de 	blt.w	802add6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802aa1a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802aa1e:	45c4      	cmp	ip, r8
 802aa20:	f280 81d9 	bge.w	802add6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802aa24:	b21b      	sxth	r3, r3
 802aa26:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802aa28:	fb0c 2203 	mla	r2, ip, r3, r2
 802aa2c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802aa30:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802aa34:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802aa38:	2800      	cmp	r0, #0
 802aa3a:	f000 8182 	beq.w	802ad42 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802aa3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802aa42:	950b      	str	r5, [sp, #44]	@ 0x2c
 802aa44:	0e2d      	lsrs	r5, r5, #24
 802aa46:	9512      	str	r5, [sp, #72]	@ 0x48
 802aa48:	b181      	cbz	r1, 802aa6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802aa4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802aa4e:	3b01      	subs	r3, #1
 802aa50:	009b      	lsls	r3, r3, #2
 802aa52:	3304      	adds	r3, #4
 802aa54:	eb08 0c03 	add.w	ip, r8, r3
 802aa58:	f858 3003 	ldr.w	r3, [r8, r3]
 802aa5c:	9308      	str	r3, [sp, #32]
 802aa5e:	0e1b      	lsrs	r3, r3, #24
 802aa60:	9310      	str	r3, [sp, #64]	@ 0x40
 802aa62:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802aa66:	930c      	str	r3, [sp, #48]	@ 0x30
 802aa68:	0e1b      	lsrs	r3, r3, #24
 802aa6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aa6c:	b280      	uxth	r0, r0
 802aa6e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802aa70:	b289      	uxth	r1, r1
 802aa72:	fb00 f901 	mul.w	r9, r0, r1
 802aa76:	0100      	lsls	r0, r0, #4
 802aa78:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802aa7c:	eba0 0809 	sub.w	r8, r0, r9
 802aa80:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802aa84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802aa86:	b289      	uxth	r1, r1
 802aa88:	fa1f f888 	uxth.w	r8, r8
 802aa8c:	1a5b      	subs	r3, r3, r1
 802aa8e:	fb08 f000 	mul.w	r0, r8, r0
 802aa92:	b29b      	uxth	r3, r3
 802aa94:	fb03 000e 	mla	r0, r3, lr, r0
 802aa98:	fb01 0005 	mla	r0, r1, r5, r0
 802aa9c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802aa9e:	fb09 0005 	mla	r0, r9, r5, r0
 802aaa2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802aaa6:	2800      	cmp	r0, #0
 802aaa8:	f000 80d3 	beq.w	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aaac:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802aab0:	d01b      	beq.n	802aaea <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 802aab2:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802aab6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802aaba:	fb0e fa0a 	mul.w	sl, lr, sl
 802aabe:	fb0e fe02 	mul.w	lr, lr, r2
 802aac2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802aac6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802aaca:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802aace:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802aad2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802aad6:	4452      	add	r2, sl
 802aad8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aadc:	0a12      	lsrs	r2, r2, #8
 802aade:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802aae2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802aae6:	ea42 020c 	orr.w	r2, r2, ip
 802aaea:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802aaec:	2dff      	cmp	r5, #255	@ 0xff
 802aaee:	d021      	beq.n	802ab34 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802aaf0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802aaf2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802aaf6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802aaf8:	fb05 fb0b 	mul.w	fp, r5, fp
 802aafc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802aafe:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802ab02:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802ab04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802ab08:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802ab0c:	fb05 fa0a 	mul.w	sl, r5, sl
 802ab10:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ab14:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802ab18:	44de      	add	lr, fp
 802ab1a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802ab1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802ab22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ab26:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ab2a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802ab2e:	ea4e 050a 	orr.w	r5, lr, sl
 802ab32:	950b      	str	r5, [sp, #44]	@ 0x2c
 802ab34:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ab36:	2dff      	cmp	r5, #255	@ 0xff
 802ab38:	d021      	beq.n	802ab7e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802ab3a:	9d08      	ldr	r5, [sp, #32]
 802ab3c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802ab40:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ab42:	fb05 fb0b 	mul.w	fp, r5, fp
 802ab46:	9d08      	ldr	r5, [sp, #32]
 802ab48:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802ab4c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ab4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802ab52:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802ab56:	fb05 fa0a 	mul.w	sl, r5, sl
 802ab5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ab5e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802ab62:	44de      	add	lr, fp
 802ab64:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802ab68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802ab6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ab70:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ab74:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802ab78:	ea4e 050a 	orr.w	r5, lr, sl
 802ab7c:	9508      	str	r5, [sp, #32]
 802ab7e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ab80:	2dff      	cmp	r5, #255	@ 0xff
 802ab82:	d021      	beq.n	802abc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802ab84:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802ab86:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802ab8a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ab8c:	fb05 fb0b 	mul.w	fp, r5, fp
 802ab90:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802ab92:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802ab96:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ab98:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802ab9c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802aba0:	fb05 fa0a 	mul.w	sl, r5, sl
 802aba4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802aba8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802abac:	44de      	add	lr, fp
 802abae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802abb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802abb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802abba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802abbe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802abc2:	ea4e 050a 	orr.w	r5, lr, sl
 802abc6:	950c      	str	r5, [sp, #48]	@ 0x30
 802abc8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802abca:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802abce:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802abd2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802abd6:	9d08      	ldr	r5, [sp, #32]
 802abd8:	fb08 fc0c 	mul.w	ip, r8, ip
 802abdc:	fb03 cc0e 	mla	ip, r3, lr, ip
 802abe0:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802abe4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802abe6:	fb01 cc0e 	mla	ip, r1, lr, ip
 802abea:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802abee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802abf0:	fb09 cc0e 	mla	ip, r9, lr, ip
 802abf4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802abf8:	fb08 f80e 	mul.w	r8, r8, lr
 802abfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ac00:	fb03 8202 	mla	r2, r3, r2, r8
 802ac04:	9b08      	ldr	r3, [sp, #32]
 802ac06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802ac0a:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802ac0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ac10:	fb01 220a 	mla	r2, r1, sl, r2
 802ac14:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 802ac18:	9b07      	ldr	r3, [sp, #28]
 802ac1a:	fb09 2901 	mla	r9, r9, r1, r2
 802ac1e:	4358      	muls	r0, r3
 802ac20:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802ac24:	1c43      	adds	r3, r0, #1
 802ac26:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802ac2a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ac2e:	ea4c 0c09 	orr.w	ip, ip, r9
 802ac32:	1200      	asrs	r0, r0, #8
 802ac34:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802ac38:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802ac3c:	28ff      	cmp	r0, #255	@ 0xff
 802ac3e:	b2d9      	uxtb	r1, r3
 802ac40:	fa5f fe82 	uxtb.w	lr, r2
 802ac44:	f040 8086 	bne.w	802ad54 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802ac48:	f887 c000 	strb.w	ip, [r7]
 802ac4c:	707a      	strb	r2, [r7, #1]
 802ac4e:	70bb      	strb	r3, [r7, #2]
 802ac50:	70f8      	strb	r0, [r7, #3]
 802ac52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac54:	3704      	adds	r7, #4
 802ac56:	441c      	add	r4, r3
 802ac58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ac5a:	441e      	add	r6, r3
 802ac5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ac5e:	3b01      	subs	r3, #1
 802ac60:	9317      	str	r3, [sp, #92]	@ 0x5c
 802ac62:	e6bf      	b.n	802a9e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802ac64:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac66:	441c      	add	r4, r3
 802ac68:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ac6a:	441e      	add	r6, r3
 802ac6c:	9b06      	ldr	r3, [sp, #24]
 802ac6e:	3b01      	subs	r3, #1
 802ac70:	9306      	str	r3, [sp, #24]
 802ac72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ac74:	3304      	adds	r3, #4
 802ac76:	930a      	str	r3, [sp, #40]	@ 0x28
 802ac78:	e694      	b.n	802a9a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802ac7a:	d023      	beq.n	802acc4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802ac7c:	9b06      	ldr	r3, [sp, #24]
 802ac7e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802ac80:	3b01      	subs	r3, #1
 802ac82:	fb00 4003 	mla	r0, r0, r3, r4
 802ac86:	1400      	asrs	r0, r0, #16
 802ac88:	f53f aea9 	bmi.w	802a9de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802ac8c:	3901      	subs	r1, #1
 802ac8e:	4288      	cmp	r0, r1
 802ac90:	f6bf aea5 	bge.w	802a9de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802ac94:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802ac96:	fb01 6303 	mla	r3, r1, r3, r6
 802ac9a:	141b      	asrs	r3, r3, #16
 802ac9c:	f53f ae9f 	bmi.w	802a9de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802aca0:	3a01      	subs	r2, #1
 802aca2:	4293      	cmp	r3, r2
 802aca4:	f6bf ae9b 	bge.w	802a9de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802aca8:	f8dd b018 	ldr.w	fp, [sp, #24]
 802acac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802acae:	f1bb 0f00 	cmp.w	fp, #0
 802acb2:	f300 80ae 	bgt.w	802ae12 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802acb6:	9b06      	ldr	r3, [sp, #24]
 802acb8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802acbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802acbe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802acc2:	930a      	str	r3, [sp, #40]	@ 0x28
 802acc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802acc6:	2b00      	cmp	r3, #0
 802acc8:	f340 8218 	ble.w	802b0fc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802accc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802acd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802acd2:	ee30 0a04 	vadd.f32	s0, s0, s8
 802acd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802acda:	eef0 6a62 	vmov.f32	s13, s5
 802acde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ace2:	ee31 1a05 	vadd.f32	s2, s2, s10
 802ace6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802acea:	ee16 4a90 	vmov	r4, s13
 802acee:	eef0 6a43 	vmov.f32	s13, s6
 802acf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802acf6:	ee16 6a90 	vmov	r6, s13
 802acfa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802acfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 802ad02:	ee77 2a62 	vsub.f32	s5, s14, s5
 802ad06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802ad0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802ad0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802ad12:	ee12 2a90 	vmov	r2, s5
 802ad16:	eef0 2a47 	vmov.f32	s5, s14
 802ad1a:	fb92 f3f3 	sdiv	r3, r2, r3
 802ad1e:	ee13 2a10 	vmov	r2, s6
 802ad22:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ad26:	eeb0 3a67 	vmov.f32	s6, s15
 802ad2a:	fb92 f3f3 	sdiv	r3, r2, r3
 802ad2e:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ad32:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802ad34:	3b01      	subs	r3, #1
 802ad36:	9316      	str	r3, [sp, #88]	@ 0x58
 802ad38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ad3a:	bf08      	it	eq
 802ad3c:	4613      	moveq	r3, r2
 802ad3e:	9306      	str	r3, [sp, #24]
 802ad40:	e622      	b.n	802a988 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802ad42:	2900      	cmp	r1, #0
 802ad44:	f43f ae92 	beq.w	802aa6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802ad48:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802ad4c:	9308      	str	r3, [sp, #32]
 802ad4e:	0e1b      	lsrs	r3, r3, #24
 802ad50:	9310      	str	r3, [sp, #64]	@ 0x40
 802ad52:	e68b      	b.n	802aa6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802ad54:	b2c3      	uxtb	r3, r0
 802ad56:	2800      	cmp	r0, #0
 802ad58:	f43f af7b 	beq.w	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802ad5c:	78f8      	ldrb	r0, [r7, #3]
 802ad5e:	fa5f fc8c 	uxtb.w	ip, ip
 802ad62:	9d07      	ldr	r5, [sp, #28]
 802ad64:	fb03 f800 	mul.w	r8, r3, r0
 802ad68:	4403      	add	r3, r0
 802ad6a:	f108 0201 	add.w	r2, r8, #1
 802ad6e:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 802ad72:	1212      	asrs	r2, r2, #8
 802ad74:	1a80      	subs	r0, r0, r2
 802ad76:	1a9b      	subs	r3, r3, r2
 802ad78:	783a      	ldrb	r2, [r7, #0]
 802ad7a:	b2db      	uxtb	r3, r3
 802ad7c:	4342      	muls	r2, r0
 802ad7e:	70fb      	strb	r3, [r7, #3]
 802ad80:	fb05 220c 	mla	r2, r5, ip, r2
 802ad84:	9d07      	ldr	r5, [sp, #28]
 802ad86:	fb92 f2f3 	sdiv	r2, r2, r3
 802ad8a:	fb15 fe0e 	smulbb	lr, r5, lr
 802ad8e:	2aff      	cmp	r2, #255	@ 0xff
 802ad90:	9d07      	ldr	r5, [sp, #28]
 802ad92:	bfd4      	ite	le
 802ad94:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802ad98:	22ff      	movgt	r2, #255	@ 0xff
 802ad9a:	fb15 f101 	smulbb	r1, r5, r1
 802ad9e:	bfd8      	it	le
 802ada0:	b2d2      	uxtble	r2, r2
 802ada2:	703a      	strb	r2, [r7, #0]
 802ada4:	787a      	ldrb	r2, [r7, #1]
 802ada6:	fb00 e202 	mla	r2, r0, r2, lr
 802adaa:	fb92 f2f3 	sdiv	r2, r2, r3
 802adae:	2aff      	cmp	r2, #255	@ 0xff
 802adb0:	bfd6      	itet	le
 802adb2:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802adb6:	22ff      	movgt	r2, #255	@ 0xff
 802adb8:	b2d2      	uxtble	r2, r2
 802adba:	707a      	strb	r2, [r7, #1]
 802adbc:	78ba      	ldrb	r2, [r7, #2]
 802adbe:	fb00 1202 	mla	r2, r0, r2, r1
 802adc2:	fb92 f2f3 	sdiv	r2, r2, r3
 802adc6:	2aff      	cmp	r2, #255	@ 0xff
 802adc8:	bfd6      	itet	le
 802adca:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802adce:	22ff      	movgt	r2, #255	@ 0xff
 802add0:	b2d2      	uxtble	r2, r2
 802add2:	70ba      	strb	r2, [r7, #2]
 802add4:	e73d      	b.n	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802add6:	f112 0801 	adds.w	r8, r2, #1
 802adda:	f53f af3a 	bmi.w	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802adde:	4543      	cmp	r3, r8
 802ade0:	f6ff af37 	blt.w	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802ade4:	f11c 0801 	adds.w	r8, ip, #1
 802ade8:	f53f af33 	bmi.w	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802adec:	45c6      	cmp	lr, r8
 802adee:	f6ff af30 	blt.w	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802adf2:	9d07      	ldr	r5, [sp, #28]
 802adf4:	b21b      	sxth	r3, r3
 802adf6:	9201      	str	r2, [sp, #4]
 802adf8:	fa0f f28e 	sxth.w	r2, lr
 802adfc:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802ae00:	e9cd c002 	strd	ip, r0, [sp, #8]
 802ae04:	9200      	str	r2, [sp, #0]
 802ae06:	4639      	mov	r1, r7
 802ae08:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802ae0a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802ae0c:	f7ff fc4e 	bl	802a6ac <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 802ae10:	e71f      	b.n	802ac52 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802ae12:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802ae14:	ea4f 4c24 	mov.w	ip, r4, asr #16
 802ae18:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802ae1a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ae1e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802ae22:	1433      	asrs	r3, r6, #16
 802ae24:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802ae28:	fb00 c303 	mla	r3, r0, r3, ip
 802ae2c:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 802ae30:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802ae34:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802ae38:	2a00      	cmp	r2, #0
 802ae3a:	f000 8111 	beq.w	802b060 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802ae3e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 802ae42:	950d      	str	r5, [sp, #52]	@ 0x34
 802ae44:	0e2d      	lsrs	r5, r5, #24
 802ae46:	9514      	str	r5, [sp, #80]	@ 0x50
 802ae48:	b187      	cbz	r7, 802ae6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802ae4a:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 802ae4e:	3801      	subs	r0, #1
 802ae50:	0080      	lsls	r0, r0, #2
 802ae52:	3004      	adds	r0, #4
 802ae54:	eb0c 0800 	add.w	r8, ip, r0
 802ae58:	f85c 0000 	ldr.w	r0, [ip, r0]
 802ae5c:	9009      	str	r0, [sp, #36]	@ 0x24
 802ae5e:	0e00      	lsrs	r0, r0, #24
 802ae60:	9011      	str	r0, [sp, #68]	@ 0x44
 802ae62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802ae66:	900e      	str	r0, [sp, #56]	@ 0x38
 802ae68:	0e00      	lsrs	r0, r0, #24
 802ae6a:	9015      	str	r0, [sp, #84]	@ 0x54
 802ae6c:	b292      	uxth	r2, r2
 802ae6e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802ae70:	b2bf      	uxth	r7, r7
 802ae72:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802ae74:	fb02 f907 	mul.w	r9, r2, r7
 802ae78:	0112      	lsls	r2, r2, #4
 802ae7a:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 802ae7e:	eba2 0809 	sub.w	r8, r2, r9
 802ae82:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802ae86:	b2bf      	uxth	r7, r7
 802ae88:	fa1f f888 	uxth.w	r8, r8
 802ae8c:	1bd2      	subs	r2, r2, r7
 802ae8e:	fb08 f000 	mul.w	r0, r8, r0
 802ae92:	b292      	uxth	r2, r2
 802ae94:	fb02 000e 	mla	r0, r2, lr, r0
 802ae98:	fb07 0005 	mla	r0, r7, r5, r0
 802ae9c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802ae9e:	fb09 0005 	mla	r0, r9, r5, r0
 802aea2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802aea6:	2800      	cmp	r0, #0
 802aea8:	f000 80d2 	beq.w	802b050 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802aeac:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802aeb0:	d01b      	beq.n	802aeea <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 802aeb2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802aeb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802aeba:	fb0e fa0a 	mul.w	sl, lr, sl
 802aebe:	fb0e fe03 	mul.w	lr, lr, r3
 802aec2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802aec6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802aeca:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802aece:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802aed2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802aed6:	4453      	add	r3, sl
 802aed8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aedc:	0a1b      	lsrs	r3, r3, #8
 802aede:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802aee2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802aee6:	ea43 030c 	orr.w	r3, r3, ip
 802aeea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802aeec:	2dff      	cmp	r5, #255	@ 0xff
 802aeee:	d021      	beq.n	802af34 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 802aef0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802aef2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802aef6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802aef8:	fb05 fc0c 	mul.w	ip, r5, ip
 802aefc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802aefe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802af02:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802af06:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802af08:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802af0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802af10:	fb05 fa0a 	mul.w	sl, r5, sl
 802af14:	44e6      	add	lr, ip
 802af16:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802af1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802af1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802af22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802af26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802af2a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802af2e:	ea4e 050a 	orr.w	r5, lr, sl
 802af32:	950d      	str	r5, [sp, #52]	@ 0x34
 802af34:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802af36:	2dff      	cmp	r5, #255	@ 0xff
 802af38:	d021      	beq.n	802af7e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802af3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802af3c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802af40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802af42:	fb05 fc0c 	mul.w	ip, r5, ip
 802af46:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802af48:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802af4c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802af50:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802af52:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802af56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802af5a:	fb05 fa0a 	mul.w	sl, r5, sl
 802af5e:	44e6      	add	lr, ip
 802af60:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802af64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802af68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802af6c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802af70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802af74:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802af78:	ea4e 050a 	orr.w	r5, lr, sl
 802af7c:	9509      	str	r5, [sp, #36]	@ 0x24
 802af7e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802af80:	2dff      	cmp	r5, #255	@ 0xff
 802af82:	d021      	beq.n	802afc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 802af84:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802af86:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802af8a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802af8c:	fb05 fc0c 	mul.w	ip, r5, ip
 802af90:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802af92:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802af96:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802af9a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802af9c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802afa0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802afa4:	fb05 fa0a 	mul.w	sl, r5, sl
 802afa8:	44e6      	add	lr, ip
 802afaa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802afae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802afb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802afb6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802afba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802afbe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802afc2:	ea4e 050a 	orr.w	r5, lr, sl
 802afc6:	950e      	str	r5, [sp, #56]	@ 0x38
 802afc8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802afca:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802afce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802afd2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802afd6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802afd8:	fb08 fc0c 	mul.w	ip, r8, ip
 802afdc:	fb02 cc0e 	mla	ip, r2, lr, ip
 802afe0:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802afe4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802afe6:	fb07 cc0e 	mla	ip, r7, lr, ip
 802afea:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802afee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802aff0:	fb09 cc0e 	mla	ip, r9, lr, ip
 802aff4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802aff8:	fb08 f80e 	mul.w	r8, r8, lr
 802affc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b000:	fb02 8303 	mla	r3, r2, r3, r8
 802b004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b006:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802b00a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802b00e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b010:	fb07 330a 	mla	r3, r7, sl, r3
 802b014:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 802b018:	fb09 3e0e 	mla	lr, r9, lr, r3
 802b01c:	9b07      	ldr	r3, [sp, #28]
 802b01e:	4358      	muls	r0, r3
 802b020:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b024:	1c43      	adds	r3, r0, #1
 802b026:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802b02a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b02e:	ea4c 0c0e 	orr.w	ip, ip, lr
 802b032:	1200      	asrs	r0, r0, #8
 802b034:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802b038:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802b03c:	28ff      	cmp	r0, #255	@ 0xff
 802b03e:	b2df      	uxtb	r7, r3
 802b040:	fa5f fe82 	uxtb.w	lr, r2
 802b044:	d115      	bne.n	802b072 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 802b046:	f881 c000 	strb.w	ip, [r1]
 802b04a:	704a      	strb	r2, [r1, #1]
 802b04c:	708b      	strb	r3, [r1, #2]
 802b04e:	70c8      	strb	r0, [r1, #3]
 802b050:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b052:	3104      	adds	r1, #4
 802b054:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b058:	441c      	add	r4, r3
 802b05a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b05c:	441e      	add	r6, r3
 802b05e:	e626      	b.n	802acae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b060:	2f00      	cmp	r7, #0
 802b062:	f43f af03 	beq.w	802ae6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b066:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 802b06a:	9009      	str	r0, [sp, #36]	@ 0x24
 802b06c:	0e00      	lsrs	r0, r0, #24
 802b06e:	9011      	str	r0, [sp, #68]	@ 0x44
 802b070:	e6fc      	b.n	802ae6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b072:	b2c3      	uxtb	r3, r0
 802b074:	2800      	cmp	r0, #0
 802b076:	d0eb      	beq.n	802b050 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b078:	78c8      	ldrb	r0, [r1, #3]
 802b07a:	fa5f fc8c 	uxtb.w	ip, ip
 802b07e:	9d07      	ldr	r5, [sp, #28]
 802b080:	fb03 f800 	mul.w	r8, r3, r0
 802b084:	4403      	add	r3, r0
 802b086:	f108 0201 	add.w	r2, r8, #1
 802b08a:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 802b08e:	1212      	asrs	r2, r2, #8
 802b090:	1a9b      	subs	r3, r3, r2
 802b092:	1a82      	subs	r2, r0, r2
 802b094:	7808      	ldrb	r0, [r1, #0]
 802b096:	b2db      	uxtb	r3, r3
 802b098:	4350      	muls	r0, r2
 802b09a:	70cb      	strb	r3, [r1, #3]
 802b09c:	fb05 0c0c 	mla	ip, r5, ip, r0
 802b0a0:	9d07      	ldr	r5, [sp, #28]
 802b0a2:	7848      	ldrb	r0, [r1, #1]
 802b0a4:	fb15 fe0e 	smulbb	lr, r5, lr
 802b0a8:	9d07      	ldr	r5, [sp, #28]
 802b0aa:	fb9c fcf3 	sdiv	ip, ip, r3
 802b0ae:	fb02 e000 	mla	r0, r2, r0, lr
 802b0b2:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802b0b6:	fb15 f707 	smulbb	r7, r5, r7
 802b0ba:	bfd4      	ite	le
 802b0bc:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 802b0c0:	f04f 0cff 	movgt.w	ip, #255	@ 0xff
 802b0c4:	fb90 f0f3 	sdiv	r0, r0, r3
 802b0c8:	bfd8      	it	le
 802b0ca:	fa5f fc8c 	uxtble.w	ip, ip
 802b0ce:	28ff      	cmp	r0, #255	@ 0xff
 802b0d0:	bfd4      	ite	le
 802b0d2:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802b0d6:	20ff      	movgt	r0, #255	@ 0xff
 802b0d8:	f881 c000 	strb.w	ip, [r1]
 802b0dc:	bfd8      	it	le
 802b0de:	b2c0      	uxtble	r0, r0
 802b0e0:	7048      	strb	r0, [r1, #1]
 802b0e2:	7888      	ldrb	r0, [r1, #2]
 802b0e4:	fb02 7200 	mla	r2, r2, r0, r7
 802b0e8:	fb92 f2f3 	sdiv	r2, r2, r3
 802b0ec:	2aff      	cmp	r2, #255	@ 0xff
 802b0ee:	bfd6      	itet	le
 802b0f0:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802b0f4:	22ff      	movgt	r2, #255	@ 0xff
 802b0f6:	b2d2      	uxtble	r2, r2
 802b0f8:	708a      	strb	r2, [r1, #2]
 802b0fa:	e7a9      	b.n	802b050 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b0fc:	b01b      	add	sp, #108	@ 0x6c
 802b0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802b104 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 802b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b108:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 802b10c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802b110:	2c00      	cmp	r4, #0
 802b112:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802b116:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802b11a:	fb00 4e03 	mla	lr, r0, r3, r4
 802b11e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802b122:	f2c0 808f 	blt.w	802b244 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b126:	45a1      	cmp	r9, r4
 802b128:	f340 808c 	ble.w	802b244 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b12c:	2800      	cmp	r0, #0
 802b12e:	f2c0 8089 	blt.w	802b244 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b132:	4580      	cmp	r8, r0
 802b134:	f340 8086 	ble.w	802b244 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b138:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802b13c:	f01e 0f01 	tst.w	lr, #1
 802b140:	5d56      	ldrb	r6, [r2, r5]
 802b142:	bf0c      	ite	eq
 802b144:	f006 060f 	andeq.w	r6, r6, #15
 802b148:	1136      	asrne	r6, r6, #4
 802b14a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b14e:	b2f6      	uxtb	r6, r6
 802b150:	f114 0a01 	adds.w	sl, r4, #1
 802b154:	d478      	bmi.n	802b248 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b156:	45d1      	cmp	r9, sl
 802b158:	dd76      	ble.n	802b248 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b15a:	2800      	cmp	r0, #0
 802b15c:	db74      	blt.n	802b248 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b15e:	4580      	cmp	r8, r0
 802b160:	dd72      	ble.n	802b248 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b162:	2f00      	cmp	r7, #0
 802b164:	d072      	beq.n	802b24c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 802b166:	f10e 0b01 	add.w	fp, lr, #1
 802b16a:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802b16e:	f01b 0f01 	tst.w	fp, #1
 802b172:	5d55      	ldrb	r5, [r2, r5]
 802b174:	bf0c      	ite	eq
 802b176:	f005 050f 	andeq.w	r5, r5, #15
 802b17a:	112d      	asrne	r5, r5, #4
 802b17c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b180:	b2ed      	uxtb	r5, r5
 802b182:	f1bc 0f00 	cmp.w	ip, #0
 802b186:	d065      	beq.n	802b254 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 802b188:	2c00      	cmp	r4, #0
 802b18a:	f100 0001 	add.w	r0, r0, #1
 802b18e:	db5f      	blt.n	802b250 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b190:	45a1      	cmp	r9, r4
 802b192:	dd5d      	ble.n	802b250 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b194:	2800      	cmp	r0, #0
 802b196:	db5b      	blt.n	802b250 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b198:	4580      	cmp	r8, r0
 802b19a:	dd59      	ble.n	802b250 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b19c:	eb03 0b0e 	add.w	fp, r3, lr
 802b1a0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802b1a4:	f01b 0f01 	tst.w	fp, #1
 802b1a8:	5d14      	ldrb	r4, [r2, r4]
 802b1aa:	bf0c      	ite	eq
 802b1ac:	f004 040f 	andeq.w	r4, r4, #15
 802b1b0:	1124      	asrne	r4, r4, #4
 802b1b2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b1b6:	b2e4      	uxtb	r4, r4
 802b1b8:	f1ba 0f00 	cmp.w	sl, #0
 802b1bc:	db4d      	blt.n	802b25a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b1be:	45d1      	cmp	r9, sl
 802b1c0:	dd4b      	ble.n	802b25a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b1c2:	2800      	cmp	r0, #0
 802b1c4:	db49      	blt.n	802b25a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b1c6:	4580      	cmp	r8, r0
 802b1c8:	dd47      	ble.n	802b25a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b1ca:	2f00      	cmp	r7, #0
 802b1cc:	d047      	beq.n	802b25e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802b1ce:	3301      	adds	r3, #1
 802b1d0:	449e      	add	lr, r3
 802b1d2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b1d6:	f01e 0f01 	tst.w	lr, #1
 802b1da:	5cd0      	ldrb	r0, [r2, r3]
 802b1dc:	bf0c      	ite	eq
 802b1de:	f000 000f 	andeq.w	r0, r0, #15
 802b1e2:	1100      	asrne	r0, r0, #4
 802b1e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b1e8:	b2c3      	uxtb	r3, r0
 802b1ea:	b2ba      	uxth	r2, r7
 802b1ec:	fa1f fc8c 	uxth.w	ip, ip
 802b1f0:	fb02 f00c 	mul.w	r0, r2, ip
 802b1f4:	0112      	lsls	r2, r2, #4
 802b1f6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b1fa:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802b1fe:	1a12      	subs	r2, r2, r0
 802b200:	fa1f fc8c 	uxth.w	ip, ip
 802b204:	b292      	uxth	r2, r2
 802b206:	eba7 070c 	sub.w	r7, r7, ip
 802b20a:	436a      	muls	r2, r5
 802b20c:	b2bf      	uxth	r7, r7
 802b20e:	fb06 2207 	mla	r2, r6, r7, r2
 802b212:	fb0c 2404 	mla	r4, ip, r4, r2
 802b216:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802b21a:	fb00 4303 	mla	r3, r0, r3, r4
 802b21e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b222:	4353      	muls	r3, r2
 802b224:	1c5a      	adds	r2, r3, #1
 802b226:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b22a:	4a21      	ldr	r2, [pc, #132]	@ (802b2b0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 802b22c:	121b      	asrs	r3, r3, #8
 802b22e:	7895      	ldrb	r5, [r2, #2]
 802b230:	7857      	ldrb	r7, [r2, #1]
 802b232:	2bff      	cmp	r3, #255	@ 0xff
 802b234:	7814      	ldrb	r4, [r2, #0]
 802b236:	d114      	bne.n	802b262 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 802b238:	700c      	strb	r4, [r1, #0]
 802b23a:	704f      	strb	r7, [r1, #1]
 802b23c:	708d      	strb	r5, [r1, #2]
 802b23e:	70cb      	strb	r3, [r1, #3]
 802b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b244:	2600      	movs	r6, #0
 802b246:	e783      	b.n	802b150 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 802b248:	2500      	movs	r5, #0
 802b24a:	e79a      	b.n	802b182 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802b24c:	463d      	mov	r5, r7
 802b24e:	e798      	b.n	802b182 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802b250:	2400      	movs	r4, #0
 802b252:	e7b1      	b.n	802b1b8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 802b254:	4663      	mov	r3, ip
 802b256:	4664      	mov	r4, ip
 802b258:	e7c7      	b.n	802b1ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b25a:	2300      	movs	r3, #0
 802b25c:	e7c5      	b.n	802b1ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b25e:	463b      	mov	r3, r7
 802b260:	e7c3      	b.n	802b1ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b262:	b2da      	uxtb	r2, r3
 802b264:	2b00      	cmp	r3, #0
 802b266:	d0eb      	beq.n	802b240 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802b268:	78ce      	ldrb	r6, [r1, #3]
 802b26a:	435c      	muls	r4, r3
 802b26c:	435f      	muls	r7, r3
 802b26e:	fb02 fc06 	mul.w	ip, r2, r6
 802b272:	4432      	add	r2, r6
 802b274:	436b      	muls	r3, r5
 802b276:	f10c 0001 	add.w	r0, ip, #1
 802b27a:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802b27e:	1200      	asrs	r0, r0, #8
 802b280:	1a12      	subs	r2, r2, r0
 802b282:	1a30      	subs	r0, r6, r0
 802b284:	780e      	ldrb	r6, [r1, #0]
 802b286:	b2d2      	uxtb	r2, r2
 802b288:	fb00 4606 	mla	r6, r0, r6, r4
 802b28c:	784c      	ldrb	r4, [r1, #1]
 802b28e:	70ca      	strb	r2, [r1, #3]
 802b290:	fb00 7404 	mla	r4, r0, r4, r7
 802b294:	fb94 f4f2 	sdiv	r4, r4, r2
 802b298:	704c      	strb	r4, [r1, #1]
 802b29a:	788c      	ldrb	r4, [r1, #2]
 802b29c:	fb00 3304 	mla	r3, r0, r4, r3
 802b2a0:	fb96 f6f2 	sdiv	r6, r6, r2
 802b2a4:	fb93 f3f2 	sdiv	r3, r3, r2
 802b2a8:	700e      	strb	r6, [r1, #0]
 802b2aa:	708b      	strb	r3, [r1, #2]
 802b2ac:	e7c8      	b.n	802b240 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802b2ae:	bf00      	nop
 802b2b0:	200122d4 	.word	0x200122d4

0802b2b4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b2b8:	b097      	sub	sp, #92	@ 0x5c
 802b2ba:	9214      	str	r2, [sp, #80]	@ 0x50
 802b2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 802b2be:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802b2c0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802b2c4:	9015      	str	r0, [sp, #84]	@ 0x54
 802b2c6:	910d      	str	r1, [sp, #52]	@ 0x34
 802b2c8:	6850      	ldr	r0, [r2, #4]
 802b2ca:	930e      	str	r3, [sp, #56]	@ 0x38
 802b2cc:	6812      	ldr	r2, [r2, #0]
 802b2ce:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802b2d2:	e9dd a521 	ldrd	sl, r5, [sp, #132]	@ 0x84
 802b2d6:	fb00 1303 	mla	r3, r0, r3, r1
 802b2da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802b2de:	930a      	str	r3, [sp, #40]	@ 0x28
 802b2e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b2e2:	689b      	ldr	r3, [r3, #8]
 802b2e4:	3301      	adds	r3, #1
 802b2e6:	f023 0301 	bic.w	r3, r3, #1
 802b2ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b2ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b2ee:	681e      	ldr	r6, [r3, #0]
 802b2f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b2f2:	2b00      	cmp	r3, #0
 802b2f4:	dc03      	bgt.n	802b2fe <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802b2f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802b2f8:	2b00      	cmp	r3, #0
 802b2fa:	f340 8255 	ble.w	802b7a8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802b2fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b300:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b304:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b308:	1e48      	subs	r0, r1, #1
 802b30a:	1e57      	subs	r7, r2, #1
 802b30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b30e:	2b00      	cmp	r3, #0
 802b310:	f340 80bb 	ble.w	802b48a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b314:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802b318:	ea4f 4325 	mov.w	r3, r5, asr #16
 802b31c:	d406      	bmi.n	802b32c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b31e:	4584      	cmp	ip, r0
 802b320:	da04      	bge.n	802b32c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b322:	2b00      	cmp	r3, #0
 802b324:	db02      	blt.n	802b32c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b326:	42bb      	cmp	r3, r7
 802b328:	f2c0 80b0 	blt.w	802b48c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802b32c:	f11c 0c01 	adds.w	ip, ip, #1
 802b330:	f100 80a0 	bmi.w	802b474 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b334:	4561      	cmp	r1, ip
 802b336:	f2c0 809d 	blt.w	802b474 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b33a:	3301      	adds	r3, #1
 802b33c:	f100 809a 	bmi.w	802b474 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b340:	429a      	cmp	r2, r3
 802b342:	f2c0 8097 	blt.w	802b474 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b346:	e9dd b709 	ldrd	fp, r7, [sp, #36]	@ 0x24
 802b34a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802b34e:	f1bb 0f00 	cmp.w	fp, #0
 802b352:	f340 80bb 	ble.w	802b4cc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802b356:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b358:	1428      	asrs	r0, r5, #16
 802b35a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802b35e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802b362:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b366:	ea5f 432a 	movs.w	r3, sl, asr #16
 802b36a:	f100 8134 	bmi.w	802b5d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b36e:	f10c 39ff 	add.w	r9, ip, #4294967295
 802b372:	454b      	cmp	r3, r9
 802b374:	f280 812f 	bge.w	802b5d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b378:	2800      	cmp	r0, #0
 802b37a:	f2c0 812c 	blt.w	802b5d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b37e:	f10e 39ff 	add.w	r9, lr, #4294967295
 802b382:	4548      	cmp	r0, r9
 802b384:	f280 8127 	bge.w	802b5d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b388:	fb00 3308 	mla	r3, r0, r8, r3
 802b38c:	0858      	lsrs	r0, r3, #1
 802b38e:	07dc      	lsls	r4, r3, #31
 802b390:	f816 c000 	ldrb.w	ip, [r6, r0]
 802b394:	bf54      	ite	pl
 802b396:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b39a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b39e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b3a2:	fa5f fc8c 	uxtb.w	ip, ip
 802b3a6:	2a00      	cmp	r2, #0
 802b3a8:	f000 80d6 	beq.w	802b558 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802b3ac:	1c58      	adds	r0, r3, #1
 802b3ae:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b3b2:	07c0      	lsls	r0, r0, #31
 802b3b4:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802b3b8:	bf54      	ite	pl
 802b3ba:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b3be:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b3c2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b3c6:	fa5f f08e 	uxtb.w	r0, lr
 802b3ca:	9010      	str	r0, [sp, #64]	@ 0x40
 802b3cc:	b1d9      	cbz	r1, 802b406 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b3ce:	4443      	add	r3, r8
 802b3d0:	0858      	lsrs	r0, r3, #1
 802b3d2:	07dc      	lsls	r4, r3, #31
 802b3d4:	f103 0301 	add.w	r3, r3, #1
 802b3d8:	5c30      	ldrb	r0, [r6, r0]
 802b3da:	bf54      	ite	pl
 802b3dc:	f000 000f 	andpl.w	r0, r0, #15
 802b3e0:	1100      	asrmi	r0, r0, #4
 802b3e2:	07dc      	lsls	r4, r3, #31
 802b3e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b3e8:	b2c0      	uxtb	r0, r0
 802b3ea:	900b      	str	r0, [sp, #44]	@ 0x2c
 802b3ec:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802b3f0:	f816 e000 	ldrb.w	lr, [r6, r0]
 802b3f4:	bf54      	ite	pl
 802b3f6:	f00e 030f 	andpl.w	r3, lr, #15
 802b3fa:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802b3fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b402:	b2db      	uxtb	r3, r3
 802b404:	9311      	str	r3, [sp, #68]	@ 0x44
 802b406:	b292      	uxth	r2, r2
 802b408:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802b40a:	b289      	uxth	r1, r1
 802b40c:	fb02 f301 	mul.w	r3, r2, r1
 802b410:	0112      	lsls	r2, r2, #4
 802b412:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b416:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802b41a:	1ad2      	subs	r2, r2, r3
 802b41c:	b289      	uxth	r1, r1
 802b41e:	b292      	uxth	r2, r2
 802b420:	1a40      	subs	r0, r0, r1
 802b422:	4362      	muls	r2, r4
 802b424:	b280      	uxth	r0, r0
 802b426:	fb0c 2c00 	mla	ip, ip, r0, r2
 802b42a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802b42c:	fb01 c102 	mla	r1, r1, r2, ip
 802b430:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b432:	fb03 1302 	mla	r3, r3, r2, r1
 802b436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b438:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b43c:	4353      	muls	r3, r2
 802b43e:	1c5a      	adds	r2, r3, #1
 802b440:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b444:	4abf      	ldr	r2, [pc, #764]	@ (802b744 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802b446:	121b      	asrs	r3, r3, #8
 802b448:	f892 9002 	ldrb.w	r9, [r2, #2]
 802b44c:	7850      	ldrb	r0, [r2, #1]
 802b44e:	2bff      	cmp	r3, #255	@ 0xff
 802b450:	f892 c000 	ldrb.w	ip, [r2]
 802b454:	f040 8091 	bne.w	802b57a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802b458:	f887 c000 	strb.w	ip, [r7]
 802b45c:	7078      	strb	r0, [r7, #1]
 802b45e:	f887 9002 	strb.w	r9, [r7, #2]
 802b462:	70fb      	strb	r3, [r7, #3]
 802b464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b466:	3704      	adds	r7, #4
 802b468:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b46c:	449a      	add	sl, r3
 802b46e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b470:	441d      	add	r5, r3
 802b472:	e76c      	b.n	802b34e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802b474:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b476:	449a      	add	sl, r3
 802b478:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b47a:	441d      	add	r5, r3
 802b47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b47e:	3b01      	subs	r3, #1
 802b480:	9309      	str	r3, [sp, #36]	@ 0x24
 802b482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b484:	3304      	adds	r3, #4
 802b486:	930a      	str	r3, [sp, #40]	@ 0x28
 802b488:	e740      	b.n	802b30c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b48a:	d026      	beq.n	802b4da <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802b48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b48e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802b490:	3b01      	subs	r3, #1
 802b492:	fb00 a003 	mla	r0, r0, r3, sl
 802b496:	1400      	asrs	r0, r0, #16
 802b498:	f53f af55 	bmi.w	802b346 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b49c:	3901      	subs	r1, #1
 802b49e:	4288      	cmp	r0, r1
 802b4a0:	f6bf af51 	bge.w	802b346 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b4a4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802b4a6:	fb01 5303 	mla	r3, r1, r3, r5
 802b4aa:	141b      	asrs	r3, r3, #16
 802b4ac:	f53f af4b 	bmi.w	802b346 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b4b0:	3a01      	subs	r2, #1
 802b4b2:	4293      	cmp	r3, r2
 802b4b4:	f6bf af47 	bge.w	802b346 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b4b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b4ba:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802b4be:	3304      	adds	r3, #4
 802b4c0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802b4c4:	f1be 0f00 	cmp.w	lr, #0
 802b4c8:	f300 80a6 	bgt.w	802b618 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 802b4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b4ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802b4d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b4d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802b4d8:	930a      	str	r3, [sp, #40]	@ 0x28
 802b4da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b4dc:	2b00      	cmp	r3, #0
 802b4de:	f340 8163 	ble.w	802b7a8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802b4e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b4e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b4e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b4ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b4f0:	eef0 6a62 	vmov.f32	s13, s5
 802b4f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b4f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b4fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b500:	ee16 aa90 	vmov	sl, s13
 802b504:	eef0 6a43 	vmov.f32	s13, s6
 802b508:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b50c:	ee16 5a90 	vmov	r5, s13
 802b510:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b514:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b518:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b51c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b520:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b524:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b528:	ee12 2a90 	vmov	r2, s5
 802b52c:	eef0 2a47 	vmov.f32	s5, s14
 802b530:	fb92 f3f3 	sdiv	r3, r2, r3
 802b534:	ee13 2a10 	vmov	r2, s6
 802b538:	9323      	str	r3, [sp, #140]	@ 0x8c
 802b53a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b53c:	eeb0 3a67 	vmov.f32	s6, s15
 802b540:	fb92 f3f3 	sdiv	r3, r2, r3
 802b544:	9324      	str	r3, [sp, #144]	@ 0x90
 802b546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b548:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b54a:	3b01      	subs	r3, #1
 802b54c:	930d      	str	r3, [sp, #52]	@ 0x34
 802b54e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b550:	bf08      	it	eq
 802b552:	4613      	moveq	r3, r2
 802b554:	9309      	str	r3, [sp, #36]	@ 0x24
 802b556:	e6cb      	b.n	802b2f0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802b558:	2900      	cmp	r1, #0
 802b55a:	f43f af54 	beq.w	802b406 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b55e:	eb08 0003 	add.w	r0, r8, r3
 802b562:	0843      	lsrs	r3, r0, #1
 802b564:	07c0      	lsls	r0, r0, #31
 802b566:	5cf3      	ldrb	r3, [r6, r3]
 802b568:	bf54      	ite	pl
 802b56a:	f003 030f 	andpl.w	r3, r3, #15
 802b56e:	111b      	asrmi	r3, r3, #4
 802b570:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b574:	b2db      	uxtb	r3, r3
 802b576:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b578:	e745      	b.n	802b406 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b57a:	b2da      	uxtb	r2, r3
 802b57c:	2b00      	cmp	r3, #0
 802b57e:	f43f af71 	beq.w	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b582:	f897 e003 	ldrb.w	lr, [r7, #3]
 802b586:	fb03 fc0c 	mul.w	ip, r3, ip
 802b58a:	4358      	muls	r0, r3
 802b58c:	fb02 f10e 	mul.w	r1, r2, lr
 802b590:	4472      	add	r2, lr
 802b592:	fb03 f309 	mul.w	r3, r3, r9
 802b596:	1c4c      	adds	r4, r1, #1
 802b598:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802b59c:	1209      	asrs	r1, r1, #8
 802b59e:	1a52      	subs	r2, r2, r1
 802b5a0:	ebae 0101 	sub.w	r1, lr, r1
 802b5a4:	f897 e000 	ldrb.w	lr, [r7]
 802b5a8:	b2d2      	uxtb	r2, r2
 802b5aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 802b5ae:	f897 e002 	ldrb.w	lr, [r7, #2]
 802b5b2:	70fa      	strb	r2, [r7, #3]
 802b5b4:	fb9c fcf2 	sdiv	ip, ip, r2
 802b5b8:	f887 c000 	strb.w	ip, [r7]
 802b5bc:	f897 c001 	ldrb.w	ip, [r7, #1]
 802b5c0:	fb01 000c 	mla	r0, r1, ip, r0
 802b5c4:	fb01 310e 	mla	r1, r1, lr, r3
 802b5c8:	fb90 f0f2 	sdiv	r0, r0, r2
 802b5cc:	fb91 f1f2 	sdiv	r1, r1, r2
 802b5d0:	7078      	strb	r0, [r7, #1]
 802b5d2:	70b9      	strb	r1, [r7, #2]
 802b5d4:	e746      	b.n	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b5d6:	f113 0901 	adds.w	r9, r3, #1
 802b5da:	f53f af43 	bmi.w	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b5de:	45cc      	cmp	ip, r9
 802b5e0:	f6ff af40 	blt.w	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b5e4:	f110 0901 	adds.w	r9, r0, #1
 802b5e8:	f53f af3c 	bmi.w	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b5ec:	45ce      	cmp	lr, r9
 802b5ee:	f6ff af39 	blt.w	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b5f2:	9302      	str	r3, [sp, #8]
 802b5f4:	fa0f f38e 	sxth.w	r3, lr
 802b5f8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802b5fa:	9301      	str	r3, [sp, #4]
 802b5fc:	fa0f f38c 	sxth.w	r3, ip
 802b600:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b604:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802b608:	9300      	str	r3, [sp, #0]
 802b60a:	4632      	mov	r2, r6
 802b60c:	4643      	mov	r3, r8
 802b60e:	4639      	mov	r1, r7
 802b610:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802b612:	f7ff fd77 	bl	802b104 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 802b616:	e725      	b.n	802b464 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b618:	ea4f 412a 	mov.w	r1, sl, asr #16
 802b61c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802b620:	142a      	asrs	r2, r5, #16
 802b622:	f3c5 3703 	ubfx	r7, r5, #12, #4
 802b626:	fb08 1202 	mla	r2, r8, r2, r1
 802b62a:	0851      	lsrs	r1, r2, #1
 802b62c:	07d4      	lsls	r4, r2, #31
 802b62e:	5c71      	ldrb	r1, [r6, r1]
 802b630:	bf54      	ite	pl
 802b632:	f001 010f 	andpl.w	r1, r1, #15
 802b636:	1109      	asrmi	r1, r1, #4
 802b638:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b63c:	b2c9      	uxtb	r1, r1
 802b63e:	2800      	cmp	r0, #0
 802b640:	d06d      	beq.n	802b71e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802b642:	f102 0901 	add.w	r9, r2, #1
 802b646:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 802b64a:	f019 0f01 	tst.w	r9, #1
 802b64e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b652:	bf0c      	ite	eq
 802b654:	f00c 0c0f 	andeq.w	ip, ip, #15
 802b658:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802b65c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b660:	fa5f f48c 	uxtb.w	r4, ip
 802b664:	9412      	str	r4, [sp, #72]	@ 0x48
 802b666:	b307      	cbz	r7, 802b6aa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802b668:	4442      	add	r2, r8
 802b66a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802b66e:	07d4      	lsls	r4, r2, #31
 802b670:	f102 0201 	add.w	r2, r2, #1
 802b674:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b678:	bf54      	ite	pl
 802b67a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b67e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b682:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b686:	fa5f f48c 	uxtb.w	r4, ip
 802b68a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802b68e:	940c      	str	r4, [sp, #48]	@ 0x30
 802b690:	07d4      	lsls	r4, r2, #31
 802b692:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b696:	bf54      	ite	pl
 802b698:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b69c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b6a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b6a4:	fa5f f28c 	uxtb.w	r2, ip
 802b6a8:	9213      	str	r2, [sp, #76]	@ 0x4c
 802b6aa:	b280      	uxth	r0, r0
 802b6ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802b6ae:	b2bf      	uxth	r7, r7
 802b6b0:	fb00 f207 	mul.w	r2, r0, r7
 802b6b4:	0100      	lsls	r0, r0, #4
 802b6b6:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 802b6ba:	f5c0 7c80 	rsb	ip, r0, #256	@ 0x100
 802b6be:	1a80      	subs	r0, r0, r2
 802b6c0:	b2bf      	uxth	r7, r7
 802b6c2:	b280      	uxth	r0, r0
 802b6c4:	ebac 0c07 	sub.w	ip, ip, r7
 802b6c8:	4360      	muls	r0, r4
 802b6ca:	fa1f fc8c 	uxth.w	ip, ip
 802b6ce:	fb01 010c 	mla	r1, r1, ip, r0
 802b6d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802b6d4:	fb07 1700 	mla	r7, r7, r0, r1
 802b6d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802b6da:	fb02 7201 	mla	r2, r2, r1, r7
 802b6de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802b6e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802b6e4:	434a      	muls	r2, r1
 802b6e6:	1c51      	adds	r1, r2, #1
 802b6e8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b6ec:	4915      	ldr	r1, [pc, #84]	@ (802b744 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802b6ee:	1212      	asrs	r2, r2, #8
 802b6f0:	7888      	ldrb	r0, [r1, #2]
 802b6f2:	784f      	ldrb	r7, [r1, #1]
 802b6f4:	2aff      	cmp	r2, #255	@ 0xff
 802b6f6:	4604      	mov	r4, r0
 802b6f8:	f891 c000 	ldrb.w	ip, [r1]
 802b6fc:	d124      	bne.n	802b748 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802b6fe:	f803 cc04 	strb.w	ip, [r3, #-4]
 802b702:	f803 7c03 	strb.w	r7, [r3, #-3]
 802b706:	f803 0c02 	strb.w	r0, [r3, #-2]
 802b70a:	f803 2c01 	strb.w	r2, [r3, #-1]
 802b70e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b710:	3304      	adds	r3, #4
 802b712:	f10e 3eff 	add.w	lr, lr, #4294967295
 802b716:	4492      	add	sl, r2
 802b718:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802b71a:	4415      	add	r5, r2
 802b71c:	e6d2      	b.n	802b4c4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802b71e:	2f00      	cmp	r7, #0
 802b720:	d0c3      	beq.n	802b6aa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802b722:	4442      	add	r2, r8
 802b724:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802b728:	07d2      	lsls	r2, r2, #31
 802b72a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b72e:	bf54      	ite	pl
 802b730:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b734:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b738:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b73c:	fa5f f28c 	uxtb.w	r2, ip
 802b740:	920c      	str	r2, [sp, #48]	@ 0x30
 802b742:	e7b2      	b.n	802b6aa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802b744:	200122d4 	.word	0x200122d4
 802b748:	b2d1      	uxtb	r1, r2
 802b74a:	2a00      	cmp	r2, #0
 802b74c:	d0df      	beq.n	802b70e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802b74e:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 802b752:	fb02 fc0c 	mul.w	ip, r2, ip
 802b756:	4357      	muls	r7, r2
 802b758:	fb01 fb09 	mul.w	fp, r1, r9
 802b75c:	4449      	add	r1, r9
 802b75e:	4362      	muls	r2, r4
 802b760:	f10b 0001 	add.w	r0, fp, #1
 802b764:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802b768:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 802b76c:	1200      	asrs	r0, r0, #8
 802b76e:	1a09      	subs	r1, r1, r0
 802b770:	eba9 0000 	sub.w	r0, r9, r0
 802b774:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 802b778:	b2c9      	uxtb	r1, r1
 802b77a:	fb00 cc0b 	mla	ip, r0, fp, ip
 802b77e:	fb9c fcf1 	sdiv	ip, ip, r1
 802b782:	f803 cc04 	strb.w	ip, [r3, #-4]
 802b786:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 802b78a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802b78e:	fb00 770c 	mla	r7, r0, ip, r7
 802b792:	fb00 2009 	mla	r0, r0, r9, r2
 802b796:	fb97 f7f1 	sdiv	r7, r7, r1
 802b79a:	fb90 f0f1 	sdiv	r0, r0, r1
 802b79e:	f803 7c03 	strb.w	r7, [r3, #-3]
 802b7a2:	f803 0c02 	strb.w	r0, [r3, #-2]
 802b7a6:	e7b2      	b.n	802b70e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802b7a8:	b017      	add	sp, #92	@ 0x5c
 802b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7ae:	bf00      	nop

0802b7b0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 802b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b7b4:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	@ 0x2c
 802b7b8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802b7bc:	2800      	cmp	r0, #0
 802b7be:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802b7c2:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 802b7c6:	fb0c 0e03 	mla	lr, ip, r3, r0
 802b7ca:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 802b7ce:	f2c0 8088 	blt.w	802b8e2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b7d2:	4581      	cmp	r9, r0
 802b7d4:	f340 8085 	ble.w	802b8e2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b7d8:	f1bc 0f00 	cmp.w	ip, #0
 802b7dc:	f2c0 8081 	blt.w	802b8e2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b7e0:	45e0      	cmp	r8, ip
 802b7e2:	dd7e      	ble.n	802b8e2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b7e4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802b7e8:	f01e 0f01 	tst.w	lr, #1
 802b7ec:	5d15      	ldrb	r5, [r2, r4]
 802b7ee:	bf0c      	ite	eq
 802b7f0:	f005 050f 	andeq.w	r5, r5, #15
 802b7f4:	112d      	asrne	r5, r5, #4
 802b7f6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b7fa:	b2ed      	uxtb	r5, r5
 802b7fc:	f110 0a01 	adds.w	sl, r0, #1
 802b800:	d471      	bmi.n	802b8e6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b802:	45d1      	cmp	r9, sl
 802b804:	dd6f      	ble.n	802b8e6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b806:	f1bc 0f00 	cmp.w	ip, #0
 802b80a:	db6c      	blt.n	802b8e6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b80c:	45e0      	cmp	r8, ip
 802b80e:	dd6a      	ble.n	802b8e6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b810:	2e00      	cmp	r6, #0
 802b812:	d06a      	beq.n	802b8ea <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 802b814:	f10e 0b01 	add.w	fp, lr, #1
 802b818:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802b81c:	f01b 0f01 	tst.w	fp, #1
 802b820:	5d14      	ldrb	r4, [r2, r4]
 802b822:	bf0c      	ite	eq
 802b824:	f004 040f 	andeq.w	r4, r4, #15
 802b828:	1124      	asrne	r4, r4, #4
 802b82a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b82e:	b2e4      	uxtb	r4, r4
 802b830:	2f00      	cmp	r7, #0
 802b832:	d05e      	beq.n	802b8f2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 802b834:	2800      	cmp	r0, #0
 802b836:	f10c 0c01 	add.w	ip, ip, #1
 802b83a:	db58      	blt.n	802b8ee <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b83c:	4581      	cmp	r9, r0
 802b83e:	dd56      	ble.n	802b8ee <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b840:	f1bc 0f00 	cmp.w	ip, #0
 802b844:	db53      	blt.n	802b8ee <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b846:	45e0      	cmp	r8, ip
 802b848:	dd51      	ble.n	802b8ee <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b84a:	eb03 0b0e 	add.w	fp, r3, lr
 802b84e:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802b852:	f01b 0f01 	tst.w	fp, #1
 802b856:	5c10      	ldrb	r0, [r2, r0]
 802b858:	bf0c      	ite	eq
 802b85a:	f000 000f 	andeq.w	r0, r0, #15
 802b85e:	1100      	asrne	r0, r0, #4
 802b860:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b864:	b2c0      	uxtb	r0, r0
 802b866:	f1ba 0f00 	cmp.w	sl, #0
 802b86a:	db45      	blt.n	802b8f8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b86c:	45d1      	cmp	r9, sl
 802b86e:	dd43      	ble.n	802b8f8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b870:	f1bc 0f00 	cmp.w	ip, #0
 802b874:	db40      	blt.n	802b8f8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b876:	45e0      	cmp	r8, ip
 802b878:	dd3e      	ble.n	802b8f8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b87a:	2e00      	cmp	r6, #0
 802b87c:	d03e      	beq.n	802b8fc <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 802b87e:	3301      	adds	r3, #1
 802b880:	449e      	add	lr, r3
 802b882:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b886:	f01e 0f01 	tst.w	lr, #1
 802b88a:	5cd3      	ldrb	r3, [r2, r3]
 802b88c:	bf0c      	ite	eq
 802b88e:	f003 030f 	andeq.w	r3, r3, #15
 802b892:	111b      	asrne	r3, r3, #4
 802b894:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b898:	b2db      	uxtb	r3, r3
 802b89a:	b2b2      	uxth	r2, r6
 802b89c:	b2bf      	uxth	r7, r7
 802b89e:	fb02 f607 	mul.w	r6, r2, r7
 802b8a2:	0112      	lsls	r2, r2, #4
 802b8a4:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 802b8a8:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802b8ac:	1b92      	subs	r2, r2, r6
 802b8ae:	b2bf      	uxth	r7, r7
 802b8b0:	b292      	uxth	r2, r2
 802b8b2:	ebac 0c07 	sub.w	ip, ip, r7
 802b8b6:	4362      	muls	r2, r4
 802b8b8:	fa1f fc8c 	uxth.w	ip, ip
 802b8bc:	fb05 220c 	mla	r2, r5, ip, r2
 802b8c0:	fb07 2000 	mla	r0, r7, r0, r2
 802b8c4:	4a22      	ldr	r2, [pc, #136]	@ (802b950 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 802b8c6:	fb06 0303 	mla	r3, r6, r3, r0
 802b8ca:	7817      	ldrb	r7, [r2, #0]
 802b8cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b8d0:	2bff      	cmp	r3, #255	@ 0xff
 802b8d2:	d115      	bne.n	802b900 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 802b8d4:	700f      	strb	r7, [r1, #0]
 802b8d6:	7853      	ldrb	r3, [r2, #1]
 802b8d8:	704b      	strb	r3, [r1, #1]
 802b8da:	7893      	ldrb	r3, [r2, #2]
 802b8dc:	708b      	strb	r3, [r1, #2]
 802b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b8e2:	2500      	movs	r5, #0
 802b8e4:	e78a      	b.n	802b7fc <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 802b8e6:	2400      	movs	r4, #0
 802b8e8:	e7a2      	b.n	802b830 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802b8ea:	4634      	mov	r4, r6
 802b8ec:	e7a0      	b.n	802b830 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802b8ee:	2000      	movs	r0, #0
 802b8f0:	e7b9      	b.n	802b866 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 802b8f2:	463b      	mov	r3, r7
 802b8f4:	4638      	mov	r0, r7
 802b8f6:	e7d0      	b.n	802b89a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802b8f8:	2300      	movs	r3, #0
 802b8fa:	e7ce      	b.n	802b89a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802b8fc:	4633      	mov	r3, r6
 802b8fe:	e7cc      	b.n	802b89a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802b900:	2b00      	cmp	r3, #0
 802b902:	d0ec      	beq.n	802b8de <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 802b904:	78cc      	ldrb	r4, [r1, #3]
 802b906:	435f      	muls	r7, r3
 802b908:	7896      	ldrb	r6, [r2, #2]
 802b90a:	f892 c001 	ldrb.w	ip, [r2, #1]
 802b90e:	fb03 f204 	mul.w	r2, r3, r4
 802b912:	780d      	ldrb	r5, [r1, #0]
 802b914:	1c50      	adds	r0, r2, #1
 802b916:	fb03 fc0c 	mul.w	ip, r3, ip
 802b91a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802b91e:	191a      	adds	r2, r3, r4
 802b920:	4373      	muls	r3, r6
 802b922:	1200      	asrs	r0, r0, #8
 802b924:	1a12      	subs	r2, r2, r0
 802b926:	1a20      	subs	r0, r4, r0
 802b928:	784c      	ldrb	r4, [r1, #1]
 802b92a:	b2d2      	uxtb	r2, r2
 802b92c:	fb00 7505 	mla	r5, r0, r5, r7
 802b930:	fb00 c404 	mla	r4, r0, r4, ip
 802b934:	70ca      	strb	r2, [r1, #3]
 802b936:	fb94 f4f2 	sdiv	r4, r4, r2
 802b93a:	704c      	strb	r4, [r1, #1]
 802b93c:	788c      	ldrb	r4, [r1, #2]
 802b93e:	fb00 3304 	mla	r3, r0, r4, r3
 802b942:	fb95 f5f2 	sdiv	r5, r5, r2
 802b946:	fb93 f3f2 	sdiv	r3, r3, r2
 802b94a:	700d      	strb	r5, [r1, #0]
 802b94c:	708b      	strb	r3, [r1, #2]
 802b94e:	e7c6      	b.n	802b8de <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 802b950:	200122d4 	.word	0x200122d4

0802b954 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b958:	b095      	sub	sp, #84	@ 0x54
 802b95a:	461c      	mov	r4, r3
 802b95c:	4fc4      	ldr	r7, [pc, #784]	@ (802bc70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 802b95e:	920d      	str	r2, [sp, #52]	@ 0x34
 802b960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b962:	9013      	str	r0, [sp, #76]	@ 0x4c
 802b964:	9108      	str	r1, [sp, #32]
 802b966:	6850      	ldr	r0, [r2, #4]
 802b968:	6812      	ldr	r2, [r2, #0]
 802b96a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 802b96e:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	@ 0x7c
 802b972:	fb00 1303 	mla	r3, r0, r3, r1
 802b976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802b97a:	9307      	str	r3, [sp, #28]
 802b97c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802b97e:	689b      	ldr	r3, [r3, #8]
 802b980:	3301      	adds	r3, #1
 802b982:	f023 0301 	bic.w	r3, r3, #1
 802b986:	930a      	str	r3, [sp, #40]	@ 0x28
 802b988:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802b98a:	681e      	ldr	r6, [r3, #0]
 802b98c:	9b08      	ldr	r3, [sp, #32]
 802b98e:	2b00      	cmp	r3, #0
 802b990:	dc03      	bgt.n	802b99a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802b992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b994:	2b00      	cmp	r3, #0
 802b996:	f340 824e 	ble.w	802be36 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802b99a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802b99c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b9a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b9a4:	1e48      	subs	r0, r1, #1
 802b9a6:	f102 3cff 	add.w	ip, r2, #4294967295
 802b9aa:	2c00      	cmp	r4, #0
 802b9ac:	f340 80b3 	ble.w	802bb16 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b9b0:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 802b9b4:	ea4f 4325 	mov.w	r3, r5, asr #16
 802b9b8:	d406      	bmi.n	802b9c8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802b9ba:	4586      	cmp	lr, r0
 802b9bc:	da04      	bge.n	802b9c8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802b9be:	2b00      	cmp	r3, #0
 802b9c0:	db02      	blt.n	802b9c8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802b9c2:	4563      	cmp	r3, ip
 802b9c4:	f2c0 80a8 	blt.w	802bb18 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802b9c8:	f11e 0e01 	adds.w	lr, lr, #1
 802b9cc:	f100 809a 	bmi.w	802bb04 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9d0:	4571      	cmp	r1, lr
 802b9d2:	f2c0 8097 	blt.w	802bb04 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9d6:	3301      	adds	r3, #1
 802b9d8:	f100 8094 	bmi.w	802bb04 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9dc:	429a      	cmp	r2, r3
 802b9de:	f2c0 8091 	blt.w	802bb04 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802b9e6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 802b9ea:	9409      	str	r4, [sp, #36]	@ 0x24
 802b9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b9ee:	2b00      	cmp	r3, #0
 802b9f0:	f340 80b0 	ble.w	802bb54 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802b9f4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802b9f6:	1428      	asrs	r0, r5, #16
 802b9f8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802b9fc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802ba00:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ba04:	ea5f 432b 	movs.w	r3, fp, asr #16
 802ba08:	f100 8134 	bmi.w	802bc74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802ba0c:	f10c 3aff 	add.w	sl, ip, #4294967295
 802ba10:	4553      	cmp	r3, sl
 802ba12:	f280 812f 	bge.w	802bc74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802ba16:	2800      	cmp	r0, #0
 802ba18:	f2c0 812c 	blt.w	802bc74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802ba1c:	f10e 3aff 	add.w	sl, lr, #4294967295
 802ba20:	4550      	cmp	r0, sl
 802ba22:	f280 8127 	bge.w	802bc74 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802ba26:	fb00 3309 	mla	r3, r0, r9, r3
 802ba2a:	0858      	lsrs	r0, r3, #1
 802ba2c:	f816 c000 	ldrb.w	ip, [r6, r0]
 802ba30:	07d8      	lsls	r0, r3, #31
 802ba32:	bf54      	ite	pl
 802ba34:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ba38:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ba3c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ba40:	fa5f fc8c 	uxtb.w	ip, ip
 802ba44:	2a00      	cmp	r2, #0
 802ba46:	f000 80cb 	beq.w	802bbe0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802ba4a:	1c58      	adds	r0, r3, #1
 802ba4c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802ba50:	07c0      	lsls	r0, r0, #31
 802ba52:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802ba56:	bf54      	ite	pl
 802ba58:	f00e 0e0f 	andpl.w	lr, lr, #15
 802ba5c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802ba60:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802ba64:	fa5f fe8e 	uxtb.w	lr, lr
 802ba68:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 802ba6c:	b1c1      	cbz	r1, 802baa0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802ba6e:	444b      	add	r3, r9
 802ba70:	0858      	lsrs	r0, r3, #1
 802ba72:	f013 0f01 	tst.w	r3, #1
 802ba76:	5c30      	ldrb	r0, [r6, r0]
 802ba78:	bf0c      	ite	eq
 802ba7a:	f000 000f 	andeq.w	r0, r0, #15
 802ba7e:	1100      	asrne	r0, r0, #4
 802ba80:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ba84:	b2c0      	uxtb	r0, r0
 802ba86:	900b      	str	r0, [sp, #44]	@ 0x2c
 802ba88:	1c58      	adds	r0, r3, #1
 802ba8a:	0843      	lsrs	r3, r0, #1
 802ba8c:	07c0      	lsls	r0, r0, #31
 802ba8e:	5cf3      	ldrb	r3, [r6, r3]
 802ba90:	bf54      	ite	pl
 802ba92:	f003 030f 	andpl.w	r3, r3, #15
 802ba96:	111b      	asrmi	r3, r3, #4
 802ba98:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ba9c:	b2db      	uxtb	r3, r3
 802ba9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802baa0:	b292      	uxth	r2, r2
 802baa2:	b289      	uxth	r1, r1
 802baa4:	fb02 f301 	mul.w	r3, r2, r1
 802baa8:	0112      	lsls	r2, r2, #4
 802baaa:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802baae:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802bab2:	1ad2      	subs	r2, r2, r3
 802bab4:	b289      	uxth	r1, r1
 802bab6:	b292      	uxth	r2, r2
 802bab8:	1a40      	subs	r0, r0, r1
 802baba:	fa1f fe80 	uxth.w	lr, r0
 802babe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802bac0:	4342      	muls	r2, r0
 802bac2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802bac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802bac8:	fb01 c102 	mla	r1, r1, r2, ip
 802bacc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802bace:	f897 c000 	ldrb.w	ip, [r7]
 802bad2:	fb03 1302 	mla	r3, r3, r2, r1
 802bad6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bada:	2bff      	cmp	r3, #255	@ 0xff
 802badc:	f040 8091 	bne.w	802bc02 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802bae0:	f888 c000 	strb.w	ip, [r8]
 802bae4:	787b      	ldrb	r3, [r7, #1]
 802bae6:	f888 3001 	strb.w	r3, [r8, #1]
 802baea:	78bb      	ldrb	r3, [r7, #2]
 802baec:	f888 3002 	strb.w	r3, [r8, #2]
 802baf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802baf2:	f108 0804 	add.w	r8, r8, #4
 802baf6:	449b      	add	fp, r3
 802baf8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802bafa:	441d      	add	r5, r3
 802bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bafe:	3b01      	subs	r3, #1
 802bb00:	9309      	str	r3, [sp, #36]	@ 0x24
 802bb02:	e773      	b.n	802b9ec <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802bb04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bb06:	3c01      	subs	r4, #1
 802bb08:	449b      	add	fp, r3
 802bb0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802bb0c:	441d      	add	r5, r3
 802bb0e:	9b07      	ldr	r3, [sp, #28]
 802bb10:	3304      	adds	r3, #4
 802bb12:	9307      	str	r3, [sp, #28]
 802bb14:	e749      	b.n	802b9aa <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802bb16:	d023      	beq.n	802bb60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802bb18:	1e63      	subs	r3, r4, #1
 802bb1a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802bb1c:	fb00 b003 	mla	r0, r0, r3, fp
 802bb20:	1400      	asrs	r0, r0, #16
 802bb22:	f53f af5e 	bmi.w	802b9e2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bb26:	3901      	subs	r1, #1
 802bb28:	4288      	cmp	r0, r1
 802bb2a:	f6bf af5a 	bge.w	802b9e2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bb2e:	9922      	ldr	r1, [sp, #136]	@ 0x88
 802bb30:	fb01 5303 	mla	r3, r1, r3, r5
 802bb34:	141b      	asrs	r3, r3, #16
 802bb36:	f53f af54 	bmi.w	802b9e2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bb3a:	3a01      	subs	r2, #1
 802bb3c:	4293      	cmp	r3, r2
 802bb3e:	f6bf af50 	bge.w	802b9e2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bb42:	9b07      	ldr	r3, [sp, #28]
 802bb44:	46a0      	mov	r8, r4
 802bb46:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 802bb4a:	1d1a      	adds	r2, r3, #4
 802bb4c:	f1b8 0f00 	cmp.w	r8, #0
 802bb50:	f300 80af 	bgt.w	802bcb2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802bb54:	9b07      	ldr	r3, [sp, #28]
 802bb56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802bb5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802bb5e:	9307      	str	r3, [sp, #28]
 802bb60:	9b08      	ldr	r3, [sp, #32]
 802bb62:	2b00      	cmp	r3, #0
 802bb64:	f340 8167 	ble.w	802be36 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802bb68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802bb6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bb6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802bb72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802bb76:	eef0 6a62 	vmov.f32	s13, s5
 802bb7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802bb7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 802bb82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bb86:	ee16 ba90 	vmov	fp, s13
 802bb8a:	eef0 6a43 	vmov.f32	s13, s6
 802bb8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bb92:	ee16 5a90 	vmov	r5, s13
 802bb96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802bb9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802bb9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 802bba2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802bba6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802bbaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802bbae:	ee12 2a90 	vmov	r2, s5
 802bbb2:	eef0 2a47 	vmov.f32	s5, s14
 802bbb6:	fb92 f3f3 	sdiv	r3, r2, r3
 802bbba:	ee13 2a10 	vmov	r2, s6
 802bbbe:	9321      	str	r3, [sp, #132]	@ 0x84
 802bbc0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bbc2:	eeb0 3a67 	vmov.f32	s6, s15
 802bbc6:	fb92 f3f3 	sdiv	r3, r2, r3
 802bbca:	9322      	str	r3, [sp, #136]	@ 0x88
 802bbcc:	9b08      	ldr	r3, [sp, #32]
 802bbce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802bbd0:	3b01      	subs	r3, #1
 802bbd2:	9308      	str	r3, [sp, #32]
 802bbd4:	bf08      	it	eq
 802bbd6:	4614      	moveq	r4, r2
 802bbd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bbda:	bf18      	it	ne
 802bbdc:	461c      	movne	r4, r3
 802bbde:	e6d5      	b.n	802b98c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802bbe0:	2900      	cmp	r1, #0
 802bbe2:	f43f af5d 	beq.w	802baa0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bbe6:	eb09 0003 	add.w	r0, r9, r3
 802bbea:	0843      	lsrs	r3, r0, #1
 802bbec:	07c0      	lsls	r0, r0, #31
 802bbee:	5cf3      	ldrb	r3, [r6, r3]
 802bbf0:	bf54      	ite	pl
 802bbf2:	f003 030f 	andpl.w	r3, r3, #15
 802bbf6:	111b      	asrmi	r3, r3, #4
 802bbf8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802bbfc:	b2db      	uxtb	r3, r3
 802bbfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bc00:	e74e      	b.n	802baa0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bc02:	2b00      	cmp	r3, #0
 802bc04:	f43f af74 	beq.w	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bc08:	f898 a003 	ldrb.w	sl, [r8, #3]
 802bc0c:	fb03 fc0c 	mul.w	ip, r3, ip
 802bc10:	78ba      	ldrb	r2, [r7, #2]
 802bc12:	fb03 f00a 	mul.w	r0, r3, sl
 802bc16:	f897 e001 	ldrb.w	lr, [r7, #1]
 802bc1a:	9210      	str	r2, [sp, #64]	@ 0x40
 802bc1c:	eb03 020a 	add.w	r2, r3, sl
 802bc20:	1c41      	adds	r1, r0, #1
 802bc22:	fb03 fe0e 	mul.w	lr, r3, lr
 802bc26:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802bc2a:	1208      	asrs	r0, r1, #8
 802bc2c:	ebaa 0100 	sub.w	r1, sl, r0
 802bc30:	1a12      	subs	r2, r2, r0
 802bc32:	f898 0000 	ldrb.w	r0, [r8]
 802bc36:	b2d2      	uxtb	r2, r2
 802bc38:	fb01 cc00 	mla	ip, r1, r0, ip
 802bc3c:	f898 0001 	ldrb.w	r0, [r8, #1]
 802bc40:	f888 2003 	strb.w	r2, [r8, #3]
 802bc44:	fb01 ee00 	mla	lr, r1, r0, lr
 802bc48:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802bc4a:	fb9c fcf2 	sdiv	ip, ip, r2
 802bc4e:	4343      	muls	r3, r0
 802bc50:	f888 c000 	strb.w	ip, [r8]
 802bc54:	f898 c002 	ldrb.w	ip, [r8, #2]
 802bc58:	fb01 330c 	mla	r3, r1, ip, r3
 802bc5c:	fb9e fef2 	sdiv	lr, lr, r2
 802bc60:	fb93 f3f2 	sdiv	r3, r3, r2
 802bc64:	f888 e001 	strb.w	lr, [r8, #1]
 802bc68:	f888 3002 	strb.w	r3, [r8, #2]
 802bc6c:	e740      	b.n	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bc6e:	bf00      	nop
 802bc70:	200122d4 	.word	0x200122d4
 802bc74:	f113 0a01 	adds.w	sl, r3, #1
 802bc78:	f53f af3a 	bmi.w	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bc7c:	45d4      	cmp	ip, sl
 802bc7e:	f6ff af37 	blt.w	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bc82:	f110 0a01 	adds.w	sl, r0, #1
 802bc86:	f53f af33 	bmi.w	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bc8a:	45d6      	cmp	lr, sl
 802bc8c:	f6ff af30 	blt.w	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bc90:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802bc94:	fa0f f38e 	sxth.w	r3, lr
 802bc98:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802bc9a:	9301      	str	r3, [sp, #4]
 802bc9c:	fa0f f38c 	sxth.w	r3, ip
 802bca0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802bca4:	9300      	str	r3, [sp, #0]
 802bca6:	4632      	mov	r2, r6
 802bca8:	464b      	mov	r3, r9
 802bcaa:	4641      	mov	r1, r8
 802bcac:	f7ff fd80 	bl	802b7b0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 802bcb0:	e71e      	b.n	802baf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bcb2:	ea4f 412b 	mov.w	r1, fp, asr #16
 802bcb6:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 802bcba:	142b      	asrs	r3, r5, #16
 802bcbc:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 802bcc0:	fb09 1303 	mla	r3, r9, r3, r1
 802bcc4:	0859      	lsrs	r1, r3, #1
 802bcc6:	07d8      	lsls	r0, r3, #31
 802bcc8:	5c71      	ldrb	r1, [r6, r1]
 802bcca:	bf54      	ite	pl
 802bccc:	f001 010f 	andpl.w	r1, r1, #15
 802bcd0:	1109      	asrmi	r1, r1, #4
 802bcd2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802bcd6:	b2c9      	uxtb	r1, r1
 802bcd8:	f1bc 0f00 	cmp.w	ip, #0
 802bcdc:	d062      	beq.n	802bda4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802bcde:	f103 0a01 	add.w	sl, r3, #1
 802bce2:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802bce6:	f01a 0f01 	tst.w	sl, #1
 802bcea:	5c30      	ldrb	r0, [r6, r0]
 802bcec:	bf0c      	ite	eq
 802bcee:	f000 000f 	andeq.w	r0, r0, #15
 802bcf2:	1100      	asrne	r0, r0, #4
 802bcf4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bcf8:	b2c0      	uxtb	r0, r0
 802bcfa:	9011      	str	r0, [sp, #68]	@ 0x44
 802bcfc:	f1be 0f00 	cmp.w	lr, #0
 802bd00:	d019      	beq.n	802bd36 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802bd02:	444b      	add	r3, r9
 802bd04:	0858      	lsrs	r0, r3, #1
 802bd06:	f013 0f01 	tst.w	r3, #1
 802bd0a:	f103 0301 	add.w	r3, r3, #1
 802bd0e:	5c30      	ldrb	r0, [r6, r0]
 802bd10:	bf0c      	ite	eq
 802bd12:	f000 000f 	andeq.w	r0, r0, #15
 802bd16:	1100      	asrne	r0, r0, #4
 802bd18:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bd1c:	b2c0      	uxtb	r0, r0
 802bd1e:	900c      	str	r0, [sp, #48]	@ 0x30
 802bd20:	0858      	lsrs	r0, r3, #1
 802bd22:	07db      	lsls	r3, r3, #31
 802bd24:	5c30      	ldrb	r0, [r6, r0]
 802bd26:	bf54      	ite	pl
 802bd28:	f000 000f 	andpl.w	r0, r0, #15
 802bd2c:	1100      	asrmi	r0, r0, #4
 802bd2e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bd32:	b2c0      	uxtb	r0, r0
 802bd34:	9012      	str	r0, [sp, #72]	@ 0x48
 802bd36:	fa1f fc8c 	uxth.w	ip, ip
 802bd3a:	fa1f fe8e 	uxth.w	lr, lr
 802bd3e:	fb0c f30e 	mul.w	r3, ip, lr
 802bd42:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802bd46:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 802bd4a:	f5cc 7080 	rsb	r0, ip, #256	@ 0x100
 802bd4e:	ebac 0c03 	sub.w	ip, ip, r3
 802bd52:	fa1f fe8e 	uxth.w	lr, lr
 802bd56:	fa1f fc8c 	uxth.w	ip, ip
 802bd5a:	eba0 000e 	sub.w	r0, r0, lr
 802bd5e:	fa1f fa80 	uxth.w	sl, r0
 802bd62:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802bd64:	fb00 fc0c 	mul.w	ip, r0, ip
 802bd68:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802bd6a:	fb01 c10a 	mla	r1, r1, sl, ip
 802bd6e:	fb0e 1e00 	mla	lr, lr, r0, r1
 802bd72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802bd74:	fb03 e301 	mla	r3, r3, r1, lr
 802bd78:	f897 e000 	ldrb.w	lr, [r7]
 802bd7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bd80:	2bff      	cmp	r3, #255	@ 0xff
 802bd82:	d11f      	bne.n	802bdc4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802bd84:	f802 ec04 	strb.w	lr, [r2, #-4]
 802bd88:	787b      	ldrb	r3, [r7, #1]
 802bd8a:	f802 3c03 	strb.w	r3, [r2, #-3]
 802bd8e:	78bb      	ldrb	r3, [r7, #2]
 802bd90:	f802 3c02 	strb.w	r3, [r2, #-2]
 802bd94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bd96:	3204      	adds	r2, #4
 802bd98:	f108 38ff 	add.w	r8, r8, #4294967295
 802bd9c:	449b      	add	fp, r3
 802bd9e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802bda0:	441d      	add	r5, r3
 802bda2:	e6d3      	b.n	802bb4c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802bda4:	f1be 0f00 	cmp.w	lr, #0
 802bda8:	d0c5      	beq.n	802bd36 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802bdaa:	444b      	add	r3, r9
 802bdac:	0858      	lsrs	r0, r3, #1
 802bdae:	07db      	lsls	r3, r3, #31
 802bdb0:	5c30      	ldrb	r0, [r6, r0]
 802bdb2:	bf54      	ite	pl
 802bdb4:	f000 000f 	andpl.w	r0, r0, #15
 802bdb8:	1100      	asrmi	r0, r0, #4
 802bdba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bdbe:	b2c0      	uxtb	r0, r0
 802bdc0:	900c      	str	r0, [sp, #48]	@ 0x30
 802bdc2:	e7b8      	b.n	802bd36 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802bdc4:	2b00      	cmp	r3, #0
 802bdc6:	d0e5      	beq.n	802bd94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802bdc8:	78b9      	ldrb	r1, [r7, #2]
 802bdca:	fb03 fe0e 	mul.w	lr, r3, lr
 802bdce:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 802bdd2:	9110      	str	r1, [sp, #64]	@ 0x40
 802bdd4:	fb03 f100 	mul.w	r1, r3, r0
 802bdd8:	f897 a001 	ldrb.w	sl, [r7, #1]
 802bddc:	f101 0c01 	add.w	ip, r1, #1
 802bde0:	fb03 fa0a 	mul.w	sl, r3, sl
 802bde4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802bde8:	1819      	adds	r1, r3, r0
 802bdea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802bdee:	eba0 000c 	sub.w	r0, r0, ip
 802bdf2:	eba1 010c 	sub.w	r1, r1, ip
 802bdf6:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 802bdfa:	9009      	str	r0, [sp, #36]	@ 0x24
 802bdfc:	b2c9      	uxtb	r1, r1
 802bdfe:	fb00 ee0c 	mla	lr, r0, ip, lr
 802be02:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 802be06:	f802 1c01 	strb.w	r1, [r2, #-1]
 802be0a:	fb00 aa0c 	mla	sl, r0, ip, sl
 802be0e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802be10:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 802be14:	4343      	muls	r3, r0
 802be16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802be18:	fb00 330c 	mla	r3, r0, ip, r3
 802be1c:	fb9e fef1 	sdiv	lr, lr, r1
 802be20:	fb9a faf1 	sdiv	sl, sl, r1
 802be24:	fb93 f3f1 	sdiv	r3, r3, r1
 802be28:	f802 ec04 	strb.w	lr, [r2, #-4]
 802be2c:	f802 ac03 	strb.w	sl, [r2, #-3]
 802be30:	f802 3c02 	strb.w	r3, [r2, #-2]
 802be34:	e7ae      	b.n	802bd94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802be36:	b015      	add	sp, #84	@ 0x54
 802be38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802be3c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>:
 802be3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802be3e:	6810      	ldr	r0, [r2, #0]
 802be40:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 802be44:	10cc      	asrs	r4, r1, #3
 802be46:	120d      	asrs	r5, r1, #8
 802be48:	fa5f fc8c 	uxtb.w	ip, ip
 802be4c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802be50:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802be54:	0e07      	lsrs	r7, r0, #24
 802be56:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802be5a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802be5e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802be62:	d108      	bne.n	802be76 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh+0x3a>
 802be64:	0224      	lsls	r4, r4, #8
 802be66:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 802be6a:	ea45 0c0c 	orr.w	ip, r5, ip
 802be6e:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 802be72:	6013      	str	r3, [r2, #0]
 802be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802be76:	fb13 f505 	smulbb	r5, r3, r5
 802be7a:	fb03 f607 	mul.w	r6, r3, r7
 802be7e:	fb1c fc03 	smulbb	ip, ip, r3
 802be82:	1c71      	adds	r1, r6, #1
 802be84:	eb01 2126 	add.w	r1, r1, r6, asr #8
 802be88:	19de      	adds	r6, r3, r7
 802be8a:	fb13 f304 	smulbb	r3, r3, r4
 802be8e:	1209      	asrs	r1, r1, #8
 802be90:	1a7f      	subs	r7, r7, r1
 802be92:	1a76      	subs	r6, r6, r1
 802be94:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802be98:	b2f6      	uxtb	r6, r6
 802be9a:	fb07 5101 	mla	r1, r7, r1, r5
 802be9e:	b2c5      	uxtb	r5, r0
 802bea0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802bea4:	fb07 c505 	mla	r5, r7, r5, ip
 802bea8:	fb07 3300 	mla	r3, r7, r0, r3
 802beac:	fbb1 f1f6 	udiv	r1, r1, r6
 802beb0:	fbb5 f5f6 	udiv	r5, r5, r6
 802beb4:	fbb3 f3f6 	udiv	r3, r3, r6
 802beb8:	0409      	lsls	r1, r1, #16
 802beba:	b2ed      	uxtb	r5, r5
 802bebc:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 802bec0:	021b      	lsls	r3, r3, #8
 802bec2:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 802bec6:	b29b      	uxth	r3, r3
 802bec8:	4329      	orrs	r1, r5
 802beca:	430b      	orrs	r3, r1
 802becc:	e7d1      	b.n	802be72 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh+0x36>
	...

0802bed0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bed4:	461c      	mov	r4, r3
 802bed6:	b08b      	sub	sp, #44	@ 0x2c
 802bed8:	460d      	mov	r5, r1
 802beda:	4616      	mov	r6, r2
 802bedc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802bede:	4682      	mov	sl, r0
 802bee0:	6861      	ldr	r1, [r4, #4]
 802bee2:	aa06      	add	r2, sp, #24
 802bee4:	6820      	ldr	r0, [r4, #0]
 802bee6:	2702      	movs	r7, #2
 802bee8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802beec:	3604      	adds	r6, #4
 802beee:	c203      	stmia	r2!, {r0, r1}
 802bef0:	6818      	ldr	r0, [r3, #0]
 802bef2:	aa08      	add	r2, sp, #32
 802bef4:	6859      	ldr	r1, [r3, #4]
 802bef6:	c203      	stmia	r2!, {r0, r1}
 802bef8:	a806      	add	r0, sp, #24
 802befa:	f7ee ff03 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802befe:	4621      	mov	r1, r4
 802bf00:	a808      	add	r0, sp, #32
 802bf02:	f7ee ff27 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bf06:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802bf0a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802bf0e:	f002 0301 	and.w	r3, r2, #1
 802bf12:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802bf16:	9302      	str	r3, [sp, #8]
 802bf18:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802bf1c:	f003 0101 	and.w	r1, r3, #1
 802bf20:	9101      	str	r1, [sp, #4]
 802bf22:	9801      	ldr	r0, [sp, #4]
 802bf24:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802bf28:	4403      	add	r3, r0
 802bf2a:	fb01 2303 	mla	r3, r1, r3, r2
 802bf2e:	fb93 f3f7 	sdiv	r3, r3, r7
 802bf32:	441d      	add	r5, r3
 802bf34:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802bf38:	441a      	add	r2, r3
 802bf3a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802bf3e:	4419      	add	r1, r3
 802bf40:	4b84      	ldr	r3, [pc, #528]	@ (802c154 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x284>)
 802bf42:	f8ad 2020 	strh.w	r2, [sp, #32]
 802bf46:	6818      	ldr	r0, [r3, #0]
 802bf48:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802bf4c:	6803      	ldr	r3, [r0, #0]
 802bf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802bf50:	4798      	blx	r3
 802bf52:	4b81      	ldr	r3, [pc, #516]	@ (802c158 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>)
 802bf54:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802bf58:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802bf5c:	881a      	ldrh	r2, [r3, #0]
 802bf5e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802bf62:	fb0b fb02 	mul.w	fp, fp, r2
 802bf66:	fb02 1404 	mla	r4, r2, r4, r1
 802bf6a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802bf6e:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 802bf72:	9203      	str	r2, [sp, #12]
 802bf74:	461a      	mov	r2, r3
 802bf76:	d033      	beq.n	802bfe0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x110>
 802bf78:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802bf7c:	9b03      	ldr	r3, [sp, #12]
 802bf7e:	429c      	cmp	r4, r3
 802bf80:	f080 80df 	bcs.w	802c142 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 802bf84:	9b02      	ldr	r3, [sp, #8]
 802bf86:	2b00      	cmp	r3, #0
 802bf88:	f000 80be 	beq.w	802c108 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x238>
 802bf8c:	7829      	ldrb	r1, [r5, #0]
 802bf8e:	4622      	mov	r2, r4
 802bf90:	1c6f      	adds	r7, r5, #1
 802bf92:	3404      	adds	r4, #4
 802bf94:	f001 010f 	and.w	r1, r1, #15
 802bf98:	f108 3bff 	add.w	fp, r8, #4294967295
 802bf9c:	464b      	mov	r3, r9
 802bf9e:	4650      	mov	r0, sl
 802bfa0:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802bfa4:	f7ff ff4a 	bl	802be3c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802bfa8:	f1bb 0f01 	cmp.w	fp, #1
 802bfac:	f340 80af 	ble.w	802c10e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23e>
 802bfb0:	7839      	ldrb	r1, [r7, #0]
 802bfb2:	4622      	mov	r2, r4
 802bfb4:	464b      	mov	r3, r9
 802bfb6:	4650      	mov	r0, sl
 802bfb8:	0909      	lsrs	r1, r1, #4
 802bfba:	f1ab 0b02 	sub.w	fp, fp, #2
 802bfbe:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802bfc2:	f7ff ff3b 	bl	802be3c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802bfc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 802bfca:	1d22      	adds	r2, r4, #4
 802bfcc:	464b      	mov	r3, r9
 802bfce:	f001 010f 	and.w	r1, r1, #15
 802bfd2:	4650      	mov	r0, sl
 802bfd4:	3408      	adds	r4, #8
 802bfd6:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802bfda:	f7ff ff2f 	bl	802be3c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802bfde:	e7e3      	b.n	802bfa8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xd8>
 802bfe0:	4639      	mov	r1, r7
 802bfe2:	9b03      	ldr	r3, [sp, #12]
 802bfe4:	429c      	cmp	r4, r3
 802bfe6:	f080 80ac 	bcs.w	802c142 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 802bfea:	9b02      	ldr	r3, [sp, #8]
 802bfec:	2b00      	cmp	r3, #0
 802bfee:	d05f      	beq.n	802c0b0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802bff0:	782b      	ldrb	r3, [r5, #0]
 802bff2:	1c6f      	adds	r7, r5, #1
 802bff4:	f003 030f 	and.w	r3, r3, #15
 802bff8:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802bffc:	10c3      	asrs	r3, r0, #3
 802bffe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802c002:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c006:	00c0      	lsls	r0, r0, #3
 802c008:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802c00c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c010:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802c014:	b2c0      	uxtb	r0, r0
 802c016:	021b      	lsls	r3, r3, #8
 802c018:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802c01c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 802c020:	f108 3cff 	add.w	ip, r8, #4294967295
 802c024:	4303      	orrs	r3, r0
 802c026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c02a:	f844 3b04 	str.w	r3, [r4], #4
 802c02e:	f1bc 0f01 	cmp.w	ip, #1
 802c032:	4620      	mov	r0, r4
 802c034:	f104 0408 	add.w	r4, r4, #8
 802c038:	dd3d      	ble.n	802c0b6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e6>
 802c03a:	783b      	ldrb	r3, [r7, #0]
 802c03c:	f1ac 0c02 	sub.w	ip, ip, #2
 802c040:	091b      	lsrs	r3, r3, #4
 802c042:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802c046:	10c3      	asrs	r3, r0, #3
 802c048:	ea4f 2e20 	mov.w	lr, r0, asr #8
 802c04c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c050:	00c0      	lsls	r0, r0, #3
 802c052:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802c056:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c05a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802c05e:	b2c0      	uxtb	r0, r0
 802c060:	021b      	lsls	r3, r3, #8
 802c062:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802c066:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802c06a:	4303      	orrs	r3, r0
 802c06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c070:	f844 3c08 	str.w	r3, [r4, #-8]
 802c074:	f817 3b01 	ldrb.w	r3, [r7], #1
 802c078:	f003 030f 	and.w	r3, r3, #15
 802c07c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802c080:	10c3      	asrs	r3, r0, #3
 802c082:	ea4f 2e20 	mov.w	lr, r0, asr #8
 802c086:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c08a:	00c0      	lsls	r0, r0, #3
 802c08c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802c090:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c094:	b2c0      	uxtb	r0, r0
 802c096:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802c09a:	021b      	lsls	r3, r3, #8
 802c09c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802c0a0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802c0a4:	4303      	orrs	r3, r0
 802c0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c0aa:	f844 3c04 	str.w	r3, [r4, #-4]
 802c0ae:	e7be      	b.n	802c02e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x15e>
 802c0b0:	462f      	mov	r7, r5
 802c0b2:	46c4      	mov	ip, r8
 802c0b4:	e7bb      	b.n	802c02e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x15e>
 802c0b6:	d11a      	bne.n	802c0ee <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x21e>
 802c0b8:	783b      	ldrb	r3, [r7, #0]
 802c0ba:	3004      	adds	r0, #4
 802c0bc:	091b      	lsrs	r3, r3, #4
 802c0be:	f836 4013 	ldrh.w	r4, [r6, r3, lsl #1]
 802c0c2:	10e3      	asrs	r3, r4, #3
 802c0c4:	1227      	asrs	r7, r4, #8
 802c0c6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c0ca:	00e4      	lsls	r4, r4, #3
 802c0cc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802c0d0:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c0d4:	b2e4      	uxtb	r4, r4
 802c0d6:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 802c0da:	021b      	lsls	r3, r3, #8
 802c0dc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802c0e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c0e4:	4323      	orrs	r3, r4
 802c0e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c0ea:	f840 3c04 	str.w	r3, [r0, #-4]
 802c0ee:	8814      	ldrh	r4, [r2, #0]
 802c0f0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c0f4:	eba4 0408 	sub.w	r4, r4, r8
 802c0f8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c0fc:	9801      	ldr	r0, [sp, #4]
 802c0fe:	4403      	add	r3, r0
 802c100:	fb93 f3f1 	sdiv	r3, r3, r1
 802c104:	441d      	add	r5, r3
 802c106:	e76c      	b.n	802bfe2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x112>
 802c108:	462f      	mov	r7, r5
 802c10a:	46c3      	mov	fp, r8
 802c10c:	e74c      	b.n	802bfa8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xd8>
 802c10e:	d109      	bne.n	802c124 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 802c110:	7839      	ldrb	r1, [r7, #0]
 802c112:	4622      	mov	r2, r4
 802c114:	3404      	adds	r4, #4
 802c116:	464b      	mov	r3, r9
 802c118:	0909      	lsrs	r1, r1, #4
 802c11a:	4650      	mov	r0, sl
 802c11c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802c120:	f7ff fe8c 	bl	802be3c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802c124:	9b04      	ldr	r3, [sp, #16]
 802c126:	9a01      	ldr	r2, [sp, #4]
 802c128:	881b      	ldrh	r3, [r3, #0]
 802c12a:	eba3 0308 	sub.w	r3, r3, r8
 802c12e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802c132:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c136:	4413      	add	r3, r2
 802c138:	9a05      	ldr	r2, [sp, #20]
 802c13a:	fb93 f3f2 	sdiv	r3, r3, r2
 802c13e:	441d      	add	r5, r3
 802c140:	e71c      	b.n	802bf7c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xac>
 802c142:	4b04      	ldr	r3, [pc, #16]	@ (802c154 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x284>)
 802c144:	6818      	ldr	r0, [r3, #0]
 802c146:	6803      	ldr	r3, [r0, #0]
 802c148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c14a:	4798      	blx	r3
 802c14c:	b00b      	add	sp, #44	@ 0x2c
 802c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c152:	bf00      	nop
 802c154:	200122c4 	.word	0x200122c4
 802c158:	200122be 	.word	0x200122be

0802c15c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>:
 802c15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c15e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802c162:	436b      	muls	r3, r5
 802c164:	1c5d      	adds	r5, r3, #1
 802c166:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802c16a:	121d      	asrs	r5, r3, #8
 802c16c:	2dff      	cmp	r5, #255	@ 0xff
 802c16e:	d002      	beq.n	802c176 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x1a>
 802c170:	6810      	ldr	r0, [r2, #0]
 802c172:	0e03      	lsrs	r3, r0, #24
 802c174:	d10a      	bne.n	802c18c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x30>
 802c176:	784b      	ldrb	r3, [r1, #1]
 802c178:	7888      	ldrb	r0, [r1, #2]
 802c17a:	021b      	lsls	r3, r3, #8
 802c17c:	7809      	ldrb	r1, [r1, #0]
 802c17e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802c182:	430b      	orrs	r3, r1
 802c184:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 802c188:	6015      	str	r5, [r2, #0]
 802c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c18c:	b2ee      	uxtb	r6, r5
 802c18e:	2d00      	cmp	r5, #0
 802c190:	d0fb      	beq.n	802c18a <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x2e>
 802c192:	fb06 f703 	mul.w	r7, r6, r3
 802c196:	441e      	add	r6, r3
 802c198:	fa5f fc80 	uxtb.w	ip, r0
 802c19c:	1c7c      	adds	r4, r7, #1
 802c19e:	eb04 2427 	add.w	r4, r4, r7, asr #8
 802c1a2:	1224      	asrs	r4, r4, #8
 802c1a4:	1b1f      	subs	r7, r3, r4
 802c1a6:	788b      	ldrb	r3, [r1, #2]
 802c1a8:	1b36      	subs	r6, r6, r4
 802c1aa:	f3c0 4407 	ubfx	r4, r0, #16, #8
 802c1ae:	436b      	muls	r3, r5
 802c1b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802c1b4:	fb07 fc0c 	mul.w	ip, r7, ip
 802c1b8:	b2f6      	uxtb	r6, r6
 802c1ba:	fb07 3404 	mla	r4, r7, r4, r3
 802c1be:	780b      	ldrb	r3, [r1, #0]
 802c1c0:	fb05 c303 	mla	r3, r5, r3, ip
 802c1c4:	fbb4 f4f6 	udiv	r4, r4, r6
 802c1c8:	fbb3 f3f6 	udiv	r3, r3, r6
 802c1cc:	0424      	lsls	r4, r4, #16
 802c1ce:	b2db      	uxtb	r3, r3
 802c1d0:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 802c1d4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 802c1d8:	431c      	orrs	r4, r3
 802c1da:	784b      	ldrb	r3, [r1, #1]
 802c1dc:	436b      	muls	r3, r5
 802c1de:	fb07 3300 	mla	r3, r7, r0, r3
 802c1e2:	fbb3 f3f6 	udiv	r3, r3, r6
 802c1e6:	021b      	lsls	r3, r3, #8
 802c1e8:	b29b      	uxth	r3, r3
 802c1ea:	4323      	orrs	r3, r4
 802c1ec:	6013      	str	r3, [r2, #0]
 802c1ee:	e7cc      	b.n	802c18a <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x2e>

0802c1f0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c1f4:	461d      	mov	r5, r3
 802c1f6:	b08f      	sub	sp, #60	@ 0x3c
 802c1f8:	460c      	mov	r4, r1
 802c1fa:	4616      	mov	r6, r2
 802c1fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802c1fe:	4680      	mov	r8, r0
 802c200:	6869      	ldr	r1, [r5, #4]
 802c202:	aa0a      	add	r2, sp, #40	@ 0x28
 802c204:	6828      	ldr	r0, [r5, #0]
 802c206:	3604      	adds	r6, #4
 802c208:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 802c20c:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 802c36c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 802c210:	c203      	stmia	r2!, {r0, r1}
 802c212:	6818      	ldr	r0, [r3, #0]
 802c214:	aa0c      	add	r2, sp, #48	@ 0x30
 802c216:	6859      	ldr	r1, [r3, #4]
 802c218:	c203      	stmia	r2!, {r0, r1}
 802c21a:	a80a      	add	r0, sp, #40	@ 0x28
 802c21c:	f7ee fd72 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c220:	4629      	mov	r1, r5
 802c222:	a80c      	add	r0, sp, #48	@ 0x30
 802c224:	2502      	movs	r5, #2
 802c226:	f7ee fd95 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c22a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802c22e:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 802c232:	f002 0301 	and.w	r3, r2, #1
 802c236:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802c23a:	9304      	str	r3, [sp, #16]
 802c23c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802c240:	f003 0101 	and.w	r1, r3, #1
 802c244:	9103      	str	r1, [sp, #12]
 802c246:	9803      	ldr	r0, [sp, #12]
 802c248:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802c24c:	4403      	add	r3, r0
 802c24e:	f8da 0000 	ldr.w	r0, [sl]
 802c252:	fb01 2303 	mla	r3, r1, r3, r2
 802c256:	fb93 f3f5 	sdiv	r3, r3, r5
 802c25a:	18e5      	adds	r5, r4, r3
 802c25c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802c260:	441a      	add	r2, r3
 802c262:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802c266:	4419      	add	r1, r3
 802c268:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802c26c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802c270:	6803      	ldr	r3, [r0, #0]
 802c272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802c274:	4798      	blx	r3
 802c276:	4b3c      	ldr	r3, [pc, #240]	@ (802c368 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>)
 802c278:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802c27c:	881a      	ldrh	r2, [r3, #0]
 802c27e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802c282:	4357      	muls	r7, r2
 802c284:	fb02 1404 	mla	r4, r2, r4, r1
 802c288:	9307      	str	r3, [sp, #28]
 802c28a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c28e:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 802c292:	e9cd 2a05 	strd	r2, sl, [sp, #20]
 802c296:	9b05      	ldr	r3, [sp, #20]
 802c298:	429c      	cmp	r4, r3
 802c29a:	d25c      	bcs.n	802c356 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 802c29c:	9b04      	ldr	r3, [sp, #16]
 802c29e:	2b00      	cmp	r3, #0
 802c2a0:	d037      	beq.n	802c312 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802c2a2:	782b      	ldrb	r3, [r5, #0]
 802c2a4:	1c6f      	adds	r7, r5, #1
 802c2a6:	f003 030f 	and.w	r3, r3, #15
 802c2aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c2ae:	9309      	str	r3, [sp, #36]	@ 0x24
 802c2b0:	0e1b      	lsrs	r3, r3, #24
 802c2b2:	d006      	beq.n	802c2c2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd2>
 802c2b4:	9300      	str	r3, [sp, #0]
 802c2b6:	4622      	mov	r2, r4
 802c2b8:	464b      	mov	r3, r9
 802c2ba:	a909      	add	r1, sp, #36	@ 0x24
 802c2bc:	4640      	mov	r0, r8
 802c2be:	f7ff ff4d 	bl	802c15c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c2c2:	3404      	adds	r4, #4
 802c2c4:	f10b 3aff 	add.w	sl, fp, #4294967295
 802c2c8:	f1ba 0f01 	cmp.w	sl, #1
 802c2cc:	dd24      	ble.n	802c318 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 802c2ce:	783b      	ldrb	r3, [r7, #0]
 802c2d0:	091b      	lsrs	r3, r3, #4
 802c2d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c2d6:	9308      	str	r3, [sp, #32]
 802c2d8:	0e1b      	lsrs	r3, r3, #24
 802c2da:	d006      	beq.n	802c2ea <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfa>
 802c2dc:	9300      	str	r3, [sp, #0]
 802c2de:	4622      	mov	r2, r4
 802c2e0:	464b      	mov	r3, r9
 802c2e2:	a908      	add	r1, sp, #32
 802c2e4:	4640      	mov	r0, r8
 802c2e6:	f7ff ff39 	bl	802c15c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c2ea:	f817 3b01 	ldrb.w	r3, [r7], #1
 802c2ee:	f003 030f 	and.w	r3, r3, #15
 802c2f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 802c2f8:	0e1b      	lsrs	r3, r3, #24
 802c2fa:	d006      	beq.n	802c30a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11a>
 802c2fc:	9300      	str	r3, [sp, #0]
 802c2fe:	1d22      	adds	r2, r4, #4
 802c300:	464b      	mov	r3, r9
 802c302:	a909      	add	r1, sp, #36	@ 0x24
 802c304:	4640      	mov	r0, r8
 802c306:	f7ff ff29 	bl	802c15c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c30a:	3408      	adds	r4, #8
 802c30c:	f1aa 0a02 	sub.w	sl, sl, #2
 802c310:	e7da      	b.n	802c2c8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd8>
 802c312:	462f      	mov	r7, r5
 802c314:	46da      	mov	sl, fp
 802c316:	e7d7      	b.n	802c2c8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd8>
 802c318:	d10e      	bne.n	802c338 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802c31a:	783b      	ldrb	r3, [r7, #0]
 802c31c:	091b      	lsrs	r3, r3, #4
 802c31e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c322:	9309      	str	r3, [sp, #36]	@ 0x24
 802c324:	0e1b      	lsrs	r3, r3, #24
 802c326:	d006      	beq.n	802c336 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x146>
 802c328:	9300      	str	r3, [sp, #0]
 802c32a:	4622      	mov	r2, r4
 802c32c:	464b      	mov	r3, r9
 802c32e:	a909      	add	r1, sp, #36	@ 0x24
 802c330:	4640      	mov	r0, r8
 802c332:	f7ff ff13 	bl	802c15c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c336:	3404      	adds	r4, #4
 802c338:	9b07      	ldr	r3, [sp, #28]
 802c33a:	9a03      	ldr	r2, [sp, #12]
 802c33c:	881b      	ldrh	r3, [r3, #0]
 802c33e:	eba3 030b 	sub.w	r3, r3, fp
 802c342:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802c346:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802c34a:	4413      	add	r3, r2
 802c34c:	2202      	movs	r2, #2
 802c34e:	fb93 f3f2 	sdiv	r3, r3, r2
 802c352:	441d      	add	r5, r3
 802c354:	e79f      	b.n	802c296 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802c356:	9b06      	ldr	r3, [sp, #24]
 802c358:	6818      	ldr	r0, [r3, #0]
 802c35a:	6803      	ldr	r3, [r0, #0]
 802c35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c35e:	4798      	blx	r3
 802c360:	b00f      	add	sp, #60	@ 0x3c
 802c362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c366:	bf00      	nop
 802c368:	200122be 	.word	0x200122be
 802c36c:	200122c4 	.word	0x200122c4

0802c370 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>:
 802c370:	6810      	ldr	r0, [r2, #0]
 802c372:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c374:	0e06      	lsrs	r6, r0, #24
 802c376:	f891 c000 	ldrb.w	ip, [r1]
 802c37a:	784f      	ldrb	r7, [r1, #1]
 802c37c:	788c      	ldrb	r4, [r1, #2]
 802c37e:	d108      	bne.n	802c392 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh+0x22>
 802c380:	0424      	lsls	r4, r4, #16
 802c382:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 802c386:	ea43 030c 	orr.w	r3, r3, ip
 802c38a:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
 802c38e:	6017      	str	r7, [r2, #0]
 802c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c392:	fb13 f404 	smulbb	r4, r3, r4
 802c396:	fb03 f506 	mul.w	r5, r3, r6
 802c39a:	fb1c fc03 	smulbb	ip, ip, r3
 802c39e:	1c69      	adds	r1, r5, #1
 802c3a0:	eb01 2125 	add.w	r1, r1, r5, asr #8
 802c3a4:	199d      	adds	r5, r3, r6
 802c3a6:	fb13 f307 	smulbb	r3, r3, r7
 802c3aa:	1209      	asrs	r1, r1, #8
 802c3ac:	1a76      	subs	r6, r6, r1
 802c3ae:	1a6d      	subs	r5, r5, r1
 802c3b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802c3b4:	b2ed      	uxtb	r5, r5
 802c3b6:	fb06 4101 	mla	r1, r6, r1, r4
 802c3ba:	b2c4      	uxtb	r4, r0
 802c3bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802c3c0:	fb06 c404 	mla	r4, r6, r4, ip
 802c3c4:	fb06 3300 	mla	r3, r6, r0, r3
 802c3c8:	fbb1 f1f5 	udiv	r1, r1, r5
 802c3cc:	fbb4 f4f5 	udiv	r4, r4, r5
 802c3d0:	fbb3 f3f5 	udiv	r3, r3, r5
 802c3d4:	0409      	lsls	r1, r1, #16
 802c3d6:	b2e4      	uxtb	r4, r4
 802c3d8:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 802c3dc:	021b      	lsls	r3, r3, #8
 802c3de:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 802c3e2:	b29b      	uxth	r3, r3
 802c3e4:	4321      	orrs	r1, r4
 802c3e6:	430b      	orrs	r3, r1
 802c3e8:	6013      	str	r3, [r2, #0]
 802c3ea:	e7d1      	b.n	802c390 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh+0x20>

0802c3ec <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3f0:	461e      	mov	r6, r3
 802c3f2:	b08b      	sub	sp, #44	@ 0x2c
 802c3f4:	460c      	mov	r4, r1
 802c3f6:	4615      	mov	r5, r2
 802c3f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802c3fa:	4682      	mov	sl, r0
 802c3fc:	6871      	ldr	r1, [r6, #4]
 802c3fe:	aa06      	add	r2, sp, #24
 802c400:	6830      	ldr	r0, [r6, #0]
 802c402:	2702      	movs	r7, #2
 802c404:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802c408:	3504      	adds	r5, #4
 802c40a:	c203      	stmia	r2!, {r0, r1}
 802c40c:	6818      	ldr	r0, [r3, #0]
 802c40e:	aa08      	add	r2, sp, #32
 802c410:	6859      	ldr	r1, [r3, #4]
 802c412:	c203      	stmia	r2!, {r0, r1}
 802c414:	a806      	add	r0, sp, #24
 802c416:	f7ee fc75 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c41a:	4631      	mov	r1, r6
 802c41c:	a808      	add	r0, sp, #32
 802c41e:	f7ee fc99 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c422:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802c426:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802c42a:	f002 0301 	and.w	r3, r2, #1
 802c42e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802c432:	9302      	str	r3, [sp, #8]
 802c434:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c438:	f003 0101 	and.w	r1, r3, #1
 802c43c:	9101      	str	r1, [sp, #4]
 802c43e:	9801      	ldr	r0, [sp, #4]
 802c440:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802c444:	4403      	add	r3, r0
 802c446:	fb01 2303 	mla	r3, r1, r3, r2
 802c44a:	fb93 f3f7 	sdiv	r3, r3, r7
 802c44e:	18e6      	adds	r6, r4, r3
 802c450:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802c454:	441a      	add	r2, r3
 802c456:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802c45a:	4419      	add	r1, r3
 802c45c:	4b71      	ldr	r3, [pc, #452]	@ (802c624 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802c45e:	f8ad 2020 	strh.w	r2, [sp, #32]
 802c462:	6818      	ldr	r0, [r3, #0]
 802c464:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802c468:	6803      	ldr	r3, [r0, #0]
 802c46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802c46c:	4798      	blx	r3
 802c46e:	4b6e      	ldr	r3, [pc, #440]	@ (802c628 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23c>)
 802c470:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802c474:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802c478:	881a      	ldrh	r2, [r3, #0]
 802c47a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802c47e:	fb0b fb02 	mul.w	fp, fp, r2
 802c482:	fb02 1404 	mla	r4, r2, r4, r1
 802c486:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c48a:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 802c48e:	9203      	str	r2, [sp, #12]
 802c490:	461a      	mov	r2, r3
 802c492:	d056      	beq.n	802c542 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x156>
 802c494:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802c498:	9b03      	ldr	r3, [sp, #12]
 802c49a:	429c      	cmp	r4, r3
 802c49c:	f080 80b9 	bcs.w	802c612 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 802c4a0:	9b02      	ldr	r3, [sp, #8]
 802c4a2:	2b00      	cmp	r3, #0
 802c4a4:	f000 8097 	beq.w	802c5d6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802c4a8:	7831      	ldrb	r1, [r6, #0]
 802c4aa:	4622      	mov	r2, r4
 802c4ac:	1c77      	adds	r7, r6, #1
 802c4ae:	3404      	adds	r4, #4
 802c4b0:	f001 010f 	and.w	r1, r1, #15
 802c4b4:	f108 3bff 	add.w	fp, r8, #4294967295
 802c4b8:	464b      	mov	r3, r9
 802c4ba:	4650      	mov	r0, sl
 802c4bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c4c0:	4429      	add	r1, r5
 802c4c2:	f7ff ff55 	bl	802c370 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c4c6:	f1bb 0f01 	cmp.w	fp, #1
 802c4ca:	f340 8087 	ble.w	802c5dc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f0>
 802c4ce:	7839      	ldrb	r1, [r7, #0]
 802c4d0:	4622      	mov	r2, r4
 802c4d2:	464b      	mov	r3, r9
 802c4d4:	4650      	mov	r0, sl
 802c4d6:	0909      	lsrs	r1, r1, #4
 802c4d8:	f1ab 0b02 	sub.w	fp, fp, #2
 802c4dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c4e0:	4429      	add	r1, r5
 802c4e2:	f7ff ff45 	bl	802c370 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c4e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 802c4ea:	1d22      	adds	r2, r4, #4
 802c4ec:	464b      	mov	r3, r9
 802c4ee:	f001 010f 	and.w	r1, r1, #15
 802c4f2:	4650      	mov	r0, sl
 802c4f4:	3408      	adds	r4, #8
 802c4f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c4fa:	4429      	add	r1, r5
 802c4fc:	f7ff ff38 	bl	802c370 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c500:	e7e1      	b.n	802c4c6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802c502:	4633      	mov	r3, r6
 802c504:	4640      	mov	r0, r8
 802c506:	e037      	b.n	802c578 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 802c508:	d10f      	bne.n	802c52a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 802c50a:	781b      	ldrb	r3, [r3, #0]
 802c50c:	091b      	lsrs	r3, r3, #4
 802c50e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802c512:	18e8      	adds	r0, r5, r3
 802c514:	5ceb      	ldrb	r3, [r5, r3]
 802c516:	7884      	ldrb	r4, [r0, #2]
 802c518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c51c:	7840      	ldrb	r0, [r0, #1]
 802c51e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c522:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 802c526:	f841 3b04 	str.w	r3, [r1], #4
 802c52a:	8814      	ldrh	r4, [r2, #0]
 802c52c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c530:	eba4 0408 	sub.w	r4, r4, r8
 802c534:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802c538:	9901      	ldr	r1, [sp, #4]
 802c53a:	440b      	add	r3, r1
 802c53c:	fb93 f3f7 	sdiv	r3, r3, r7
 802c540:	441e      	add	r6, r3
 802c542:	9b03      	ldr	r3, [sp, #12]
 802c544:	429c      	cmp	r4, r3
 802c546:	d264      	bcs.n	802c612 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 802c548:	9b02      	ldr	r3, [sp, #8]
 802c54a:	2b00      	cmp	r3, #0
 802c54c:	d0d9      	beq.n	802c502 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x116>
 802c54e:	7831      	ldrb	r1, [r6, #0]
 802c550:	1c73      	adds	r3, r6, #1
 802c552:	f001 010f 	and.w	r1, r1, #15
 802c556:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c55a:	1868      	adds	r0, r5, r1
 802c55c:	5c69      	ldrb	r1, [r5, r1]
 802c55e:	f890 c002 	ldrb.w	ip, [r0, #2]
 802c562:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802c566:	7840      	ldrb	r0, [r0, #1]
 802c568:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 802c56c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 802c570:	f108 30ff 	add.w	r0, r8, #4294967295
 802c574:	f844 1b04 	str.w	r1, [r4], #4
 802c578:	2801      	cmp	r0, #1
 802c57a:	4621      	mov	r1, r4
 802c57c:	f104 0408 	add.w	r4, r4, #8
 802c580:	ddc2      	ble.n	802c508 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 802c582:	7819      	ldrb	r1, [r3, #0]
 802c584:	3802      	subs	r0, #2
 802c586:	0909      	lsrs	r1, r1, #4
 802c588:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c58c:	eb05 0c01 	add.w	ip, r5, r1
 802c590:	5c69      	ldrb	r1, [r5, r1]
 802c592:	f89c e002 	ldrb.w	lr, [ip, #2]
 802c596:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802c59a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802c59e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 802c5a2:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802c5a6:	f844 1c08 	str.w	r1, [r4, #-8]
 802c5aa:	f813 1b01 	ldrb.w	r1, [r3], #1
 802c5ae:	f001 010f 	and.w	r1, r1, #15
 802c5b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c5b6:	eb05 0c01 	add.w	ip, r5, r1
 802c5ba:	5c69      	ldrb	r1, [r5, r1]
 802c5bc:	f89c e002 	ldrb.w	lr, [ip, #2]
 802c5c0:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802c5c4:	f89c c001 	ldrb.w	ip, [ip, #1]
 802c5c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 802c5cc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802c5d0:	f844 1c04 	str.w	r1, [r4, #-4]
 802c5d4:	e7d0      	b.n	802c578 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 802c5d6:	4637      	mov	r7, r6
 802c5d8:	46c3      	mov	fp, r8
 802c5da:	e774      	b.n	802c4c6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802c5dc:	d10a      	bne.n	802c5f4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x208>
 802c5de:	7839      	ldrb	r1, [r7, #0]
 802c5e0:	4622      	mov	r2, r4
 802c5e2:	3404      	adds	r4, #4
 802c5e4:	464b      	mov	r3, r9
 802c5e6:	0909      	lsrs	r1, r1, #4
 802c5e8:	4650      	mov	r0, sl
 802c5ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c5ee:	4429      	add	r1, r5
 802c5f0:	f7ff febe 	bl	802c370 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c5f4:	9b04      	ldr	r3, [sp, #16]
 802c5f6:	9a01      	ldr	r2, [sp, #4]
 802c5f8:	881b      	ldrh	r3, [r3, #0]
 802c5fa:	eba3 0308 	sub.w	r3, r3, r8
 802c5fe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802c602:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c606:	4413      	add	r3, r2
 802c608:	9a05      	ldr	r2, [sp, #20]
 802c60a:	fb93 f3f2 	sdiv	r3, r3, r2
 802c60e:	441e      	add	r6, r3
 802c610:	e742      	b.n	802c498 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xac>
 802c612:	4b04      	ldr	r3, [pc, #16]	@ (802c624 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802c614:	6818      	ldr	r0, [r3, #0]
 802c616:	6803      	ldr	r3, [r0, #0]
 802c618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c61a:	4798      	blx	r3
 802c61c:	b00b      	add	sp, #44	@ 0x2c
 802c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c622:	bf00      	nop
 802c624:	200122c4 	.word	0x200122c4
 802c628:	200122be 	.word	0x200122be

0802c62c <CRC_Lock>:
 802c62c:	4a2d      	ldr	r2, [pc, #180]	@ (802c6e4 <CRC_Lock+0xb8>)
 802c62e:	b530      	push	{r4, r5, lr}
 802c630:	6813      	ldr	r3, [r2, #0]
 802c632:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802c636:	f023 0301 	bic.w	r3, r3, #1
 802c63a:	6013      	str	r3, [r2, #0]
 802c63c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802c640:	4b29      	ldr	r3, [pc, #164]	@ (802c6e8 <CRC_Lock+0xbc>)
 802c642:	681c      	ldr	r4, [r3, #0]
 802c644:	4014      	ands	r4, r2
 802c646:	42ac      	cmp	r4, r5
 802c648:	d005      	beq.n	802c656 <CRC_Lock+0x2a>
 802c64a:	681c      	ldr	r4, [r3, #0]
 802c64c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802c650:	4014      	ands	r4, r2
 802c652:	42ac      	cmp	r4, r5
 802c654:	d125      	bne.n	802c6a2 <CRC_Lock+0x76>
 802c656:	4b25      	ldr	r3, [pc, #148]	@ (802c6ec <CRC_Lock+0xc0>)
 802c658:	681b      	ldr	r3, [r3, #0]
 802c65a:	2b00      	cmp	r3, #0
 802c65c:	d139      	bne.n	802c6d2 <CRC_Lock+0xa6>
 802c65e:	4b24      	ldr	r3, [pc, #144]	@ (802c6f0 <CRC_Lock+0xc4>)
 802c660:	681a      	ldr	r2, [r3, #0]
 802c662:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c666:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802c66a:	d00d      	beq.n	802c688 <CRC_Lock+0x5c>
 802c66c:	681a      	ldr	r2, [r3, #0]
 802c66e:	f240 4483 	movw	r4, #1155	@ 0x483
 802c672:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c676:	42a2      	cmp	r2, r4
 802c678:	d006      	beq.n	802c688 <CRC_Lock+0x5c>
 802c67a:	681b      	ldr	r3, [r3, #0]
 802c67c:	f240 4285 	movw	r2, #1157	@ 0x485
 802c680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c684:	4293      	cmp	r3, r2
 802c686:	d124      	bne.n	802c6d2 <CRC_Lock+0xa6>
 802c688:	4b1a      	ldr	r3, [pc, #104]	@ (802c6f4 <CRC_Lock+0xc8>)
 802c68a:	2201      	movs	r2, #1
 802c68c:	601a      	str	r2, [r3, #0]
 802c68e:	681a      	ldr	r2, [r3, #0]
 802c690:	2a00      	cmp	r2, #0
 802c692:	d1fc      	bne.n	802c68e <CRC_Lock+0x62>
 802c694:	4b18      	ldr	r3, [pc, #96]	@ (802c6f8 <CRC_Lock+0xcc>)
 802c696:	6018      	str	r0, [r3, #0]
 802c698:	6818      	ldr	r0, [r3, #0]
 802c69a:	1a43      	subs	r3, r0, r1
 802c69c:	4258      	negs	r0, r3
 802c69e:	4158      	adcs	r0, r3
 802c6a0:	e00e      	b.n	802c6c0 <CRC_Lock+0x94>
 802c6a2:	681b      	ldr	r3, [r3, #0]
 802c6a4:	4013      	ands	r3, r2
 802c6a6:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802c6aa:	4293      	cmp	r3, r2
 802c6ac:	d111      	bne.n	802c6d2 <CRC_Lock+0xa6>
 802c6ae:	4b13      	ldr	r3, [pc, #76]	@ (802c6fc <CRC_Lock+0xd0>)
 802c6b0:	f240 4286 	movw	r2, #1158	@ 0x486
 802c6b4:	681b      	ldr	r3, [r3, #0]
 802c6b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c6ba:	4293      	cmp	r3, r2
 802c6bc:	d001      	beq.n	802c6c2 <CRC_Lock+0x96>
 802c6be:	2000      	movs	r0, #0
 802c6c0:	bd30      	pop	{r4, r5, pc}
 802c6c2:	4b0f      	ldr	r3, [pc, #60]	@ (802c700 <CRC_Lock+0xd4>)
 802c6c4:	2201      	movs	r2, #1
 802c6c6:	601a      	str	r2, [r3, #0]
 802c6c8:	681a      	ldr	r2, [r3, #0]
 802c6ca:	2a00      	cmp	r2, #0
 802c6cc:	d1fc      	bne.n	802c6c8 <CRC_Lock+0x9c>
 802c6ce:	4b0d      	ldr	r3, [pc, #52]	@ (802c704 <CRC_Lock+0xd8>)
 802c6d0:	e7e1      	b.n	802c696 <CRC_Lock+0x6a>
 802c6d2:	4b0d      	ldr	r3, [pc, #52]	@ (802c708 <CRC_Lock+0xdc>)
 802c6d4:	2201      	movs	r2, #1
 802c6d6:	601a      	str	r2, [r3, #0]
 802c6d8:	681a      	ldr	r2, [r3, #0]
 802c6da:	2a00      	cmp	r2, #0
 802c6dc:	d1fc      	bne.n	802c6d8 <CRC_Lock+0xac>
 802c6de:	4b0b      	ldr	r3, [pc, #44]	@ (802c70c <CRC_Lock+0xe0>)
 802c6e0:	e7d9      	b.n	802c696 <CRC_Lock+0x6a>
 802c6e2:	bf00      	nop
 802c6e4:	e0002000 	.word	0xe0002000
 802c6e8:	e000ed00 	.word	0xe000ed00
 802c6ec:	e0042000 	.word	0xe0042000
 802c6f0:	5c001000 	.word	0x5c001000
 802c6f4:	58024c08 	.word	0x58024c08
 802c6f8:	58024c00 	.word	0x58024c00
 802c6fc:	46008ff0 	.word	0x46008ff0
 802c700:	46024c08 	.word	0x46024c08
 802c704:	46024c00 	.word	0x46024c00
 802c708:	40023008 	.word	0x40023008
 802c70c:	40023000 	.word	0x40023000

0802c710 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802c710:	6101      	str	r1, [r0, #16]
 802c712:	4770      	bx	lr

0802c714 <_ZN8touchgfx8Gestures4tickEv>:
 802c714:	7b83      	ldrb	r3, [r0, #14]
 802c716:	b14b      	cbz	r3, 802c72c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802c718:	8903      	ldrh	r3, [r0, #8]
 802c71a:	3301      	adds	r3, #1
 802c71c:	b29b      	uxth	r3, r3
 802c71e:	2b07      	cmp	r3, #7
 802c720:	8103      	strh	r3, [r0, #8]
 802c722:	bf81      	itttt	hi
 802c724:	2300      	movhi	r3, #0
 802c726:	8143      	strhhi	r3, [r0, #10]
 802c728:	8183      	strhhi	r3, [r0, #12]
 802c72a:	7383      	strbhi	r3, [r0, #14]
 802c72c:	4770      	bx	lr
	...

0802c730 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802c730:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802c734:	4698      	mov	r8, r3
 802c736:	8883      	ldrh	r3, [r0, #4]
 802c738:	4604      	mov	r4, r0
 802c73a:	4617      	mov	r7, r2
 802c73c:	f8ad 3006 	strh.w	r3, [sp, #6]
 802c740:	eba8 0303 	sub.w	r3, r8, r3
 802c744:	4a19      	ldr	r2, [pc, #100]	@ (802c7ac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802c746:	460e      	mov	r6, r1
 802c748:	b21b      	sxth	r3, r3
 802c74a:	88c1      	ldrh	r1, [r0, #6]
 802c74c:	9200      	str	r2, [sp, #0]
 802c74e:	2000      	movs	r0, #0
 802c750:	2b00      	cmp	r3, #0
 802c752:	8aa2      	ldrh	r2, [r4, #20]
 802c754:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802c758:	bfb8      	it	lt
 802c75a:	425b      	neglt	r3, r3
 802c75c:	f88d 0004 	strb.w	r0, [sp, #4]
 802c760:	f8ad 1008 	strh.w	r1, [sp, #8]
 802c764:	b21b      	sxth	r3, r3
 802c766:	f8ad 800a 	strh.w	r8, [sp, #10]
 802c76a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802c76e:	4293      	cmp	r3, r2
 802c770:	dc07      	bgt.n	802c782 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802c772:	1a69      	subs	r1, r5, r1
 802c774:	b209      	sxth	r1, r1
 802c776:	2900      	cmp	r1, #0
 802c778:	bfb8      	it	lt
 802c77a:	4249      	neglt	r1, r1
 802c77c:	b209      	sxth	r1, r1
 802c77e:	428a      	cmp	r2, r1
 802c780:	da10      	bge.n	802c7a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802c782:	6920      	ldr	r0, [r4, #16]
 802c784:	4669      	mov	r1, sp
 802c786:	eba8 0606 	sub.w	r6, r8, r6
 802c78a:	1bef      	subs	r7, r5, r7
 802c78c:	6803      	ldr	r3, [r0, #0]
 802c78e:	685b      	ldr	r3, [r3, #4]
 802c790:	4798      	blx	r3
 802c792:	2300      	movs	r3, #0
 802c794:	2001      	movs	r0, #1
 802c796:	8166      	strh	r6, [r4, #10]
 802c798:	8123      	strh	r3, [r4, #8]
 802c79a:	81a7      	strh	r7, [r4, #12]
 802c79c:	f8a4 8004 	strh.w	r8, [r4, #4]
 802c7a0:	80e5      	strh	r5, [r4, #6]
 802c7a2:	73a0      	strb	r0, [r4, #14]
 802c7a4:	b004      	add	sp, #16
 802c7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c7aa:	bf00      	nop
 802c7ac:	08032330 	.word	0x08032330

0802c7b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802c7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c7b2:	461e      	mov	r6, r3
 802c7b4:	1e4b      	subs	r3, r1, #1
 802c7b6:	b085      	sub	sp, #20
 802c7b8:	4604      	mov	r4, r0
 802c7ba:	2b01      	cmp	r3, #1
 802c7bc:	460d      	mov	r5, r1
 802c7be:	4617      	mov	r7, r2
 802c7c0:	d84b      	bhi.n	802c85a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802c7c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802c7c6:	1cd3      	adds	r3, r2, #3
 802c7c8:	b29b      	uxth	r3, r3
 802c7ca:	2b06      	cmp	r3, #6
 802c7cc:	d916      	bls.n	802c7fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802c7ce:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802c870 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c7d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c7d6:	f8cd c004 	str.w	ip, [sp, #4]
 802c7da:	f04f 0c00 	mov.w	ip, #0
 802c7de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c7e2:	6900      	ldr	r0, [r0, #16]
 802c7e4:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c7e8:	a901      	add	r1, sp, #4
 802c7ea:	f88d c008 	strb.w	ip, [sp, #8]
 802c7ee:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c7f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c7f6:	6803      	ldr	r3, [r0, #0]
 802c7f8:	689b      	ldr	r3, [r3, #8]
 802c7fa:	4798      	blx	r3
 802c7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c800:	1cd3      	adds	r3, r2, #3
 802c802:	b29b      	uxth	r3, r3
 802c804:	2b06      	cmp	r3, #6
 802c806:	d916      	bls.n	802c836 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c808:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802c870 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c80c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c810:	f8cd c004 	str.w	ip, [sp, #4]
 802c814:	f04f 0c01 	mov.w	ip, #1
 802c818:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c81c:	6920      	ldr	r0, [r4, #16]
 802c81e:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c822:	a901      	add	r1, sp, #4
 802c824:	f88d c008 	strb.w	ip, [sp, #8]
 802c828:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c82c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c830:	6803      	ldr	r3, [r0, #0]
 802c832:	689b      	ldr	r3, [r3, #8]
 802c834:	4798      	blx	r3
 802c836:	4b0d      	ldr	r3, [pc, #52]	@ (802c86c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802c838:	a901      	add	r1, sp, #4
 802c83a:	6920      	ldr	r0, [r4, #16]
 802c83c:	9301      	str	r3, [sp, #4]
 802c83e:	2300      	movs	r3, #0
 802c840:	f88d 5008 	strb.w	r5, [sp, #8]
 802c844:	f8ad 700a 	strh.w	r7, [sp, #10]
 802c848:	f8ad 600c 	strh.w	r6, [sp, #12]
 802c84c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c850:	6803      	ldr	r3, [r0, #0]
 802c852:	681b      	ldr	r3, [r3, #0]
 802c854:	4798      	blx	r3
 802c856:	b005      	add	sp, #20
 802c858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c85a:	2900      	cmp	r1, #0
 802c85c:	d1eb      	bne.n	802c836 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c85e:	80a2      	strh	r2, [r4, #4]
 802c860:	80c6      	strh	r6, [r0, #6]
 802c862:	60a1      	str	r1, [r4, #8]
 802c864:	81a1      	strh	r1, [r4, #12]
 802c866:	73a1      	strb	r1, [r4, #14]
 802c868:	e7e5      	b.n	802c836 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c86a:	bf00      	nop
 802c86c:	0803231c 	.word	0x0803231c
 802c870:	08032344 	.word	0x08032344

0802c874 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802c874:	10c9      	asrs	r1, r1, #3
 802c876:	2900      	cmp	r1, #0
 802c878:	bfb8      	it	lt
 802c87a:	4249      	neglt	r1, r1
 802c87c:	2801      	cmp	r0, #1
 802c87e:	d108      	bne.n	802c892 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c880:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802c884:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802c888:	4601      	mov	r1, r0
 802c88a:	dd02      	ble.n	802c892 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c88c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802c890:	4770      	bx	lr
 802c892:	29ff      	cmp	r1, #255	@ 0xff
 802c894:	bfa8      	it	ge
 802c896:	21ff      	movge	r1, #255	@ 0xff
 802c898:	4608      	mov	r0, r1
 802c89a:	4770      	bx	lr

0802c89c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802c89c:	b410      	push	{r4}
 802c89e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802c8a2:	429c      	cmp	r4, r3
 802c8a4:	d803      	bhi.n	802c8ae <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802c8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c8aa:	f7ec bd1f 	b.w	80192ec <_ZN8touchgfx7Outline6lineToEii>
 802c8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c8b2:	4770      	bx	lr

0802c8b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c8b8:	b08b      	sub	sp, #44	@ 0x2c
 802c8ba:	4606      	mov	r6, r0
 802c8bc:	468a      	mov	sl, r1
 802c8be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c8c2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802c8c6:	9308      	str	r3, [sp, #32]
 802c8c8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802c8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 802c8ce:	f7ec fe78 	bl	80195c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802c8d2:	68b5      	ldr	r5, [r6, #8]
 802c8d4:	4604      	mov	r4, r0
 802c8d6:	2d00      	cmp	r5, #0
 802c8d8:	d044      	beq.n	802c964 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c8da:	6873      	ldr	r3, [r6, #4]
 802c8dc:	42ab      	cmp	r3, r5
 802c8de:	d33d      	bcc.n	802c95c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802c8e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802c8e4:	f04f 0800 	mov.w	r8, #0
 802c8e8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802c8ec:	eb02 0b03 	add.w	fp, r2, r3
 802c8f0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802c8f4:	fb02 1203 	mla	r2, r2, r3, r1
 802c8f8:	9205      	str	r2, [sp, #20]
 802c8fa:	1e6a      	subs	r2, r5, #1
 802c8fc:	9204      	str	r2, [sp, #16]
 802c8fe:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802c902:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c906:	454b      	cmp	r3, r9
 802c908:	463a      	mov	r2, r7
 802c90a:	d008      	beq.n	802c91e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802c90c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802c910:	eb03 0b09 	add.w	fp, r3, r9
 802c914:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802c918:	fb03 1309 	mla	r3, r3, r9, r1
 802c91c:	9305      	str	r3, [sp, #20]
 802c91e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802c922:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802c926:	4498      	add	r8, r3
 802c928:	9b04      	ldr	r3, [sp, #16]
 802c92a:	3b01      	subs	r3, #1
 802c92c:	9304      	str	r3, [sp, #16]
 802c92e:	9b04      	ldr	r3, [sp, #16]
 802c930:	3301      	adds	r3, #1
 802c932:	d015      	beq.n	802c960 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802c934:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802c938:	42bb      	cmp	r3, r7
 802c93a:	d117      	bne.n	802c96c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802c93c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802c940:	9b04      	ldr	r3, [sp, #16]
 802c942:	4548      	cmp	r0, r9
 802c944:	f103 33ff 	add.w	r3, r3, #4294967295
 802c948:	d17d      	bne.n	802ca46 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802c94a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802c94e:	4401      	add	r1, r0
 802c950:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802c954:	4480      	add	r8, r0
 802c956:	e7e9      	b.n	802c92c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802c958:	461f      	mov	r7, r3
 802c95a:	e042      	b.n	802c9e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802c95c:	2000      	movs	r0, #0
 802c95e:	e002      	b.n	802c966 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802c960:	2900      	cmp	r1, #0
 802c962:	d16d      	bne.n	802ca40 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802c964:	2001      	movs	r0, #1
 802c966:	b00b      	add	sp, #44	@ 0x2c
 802c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c96c:	b379      	cbz	r1, 802c9ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802c96e:	2f00      	cmp	r7, #0
 802c970:	db29      	blt.n	802c9c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c972:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802c976:	42bb      	cmp	r3, r7
 802c978:	dd25      	ble.n	802c9c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c97a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802c97e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802c982:	f7ff ff77 	bl	802c874 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802c986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c988:	fb10 f003 	smulbb	r0, r0, r3
 802c98c:	b280      	uxth	r0, r0
 802c98e:	1c41      	adds	r1, r0, #1
 802c990:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c994:	1209      	asrs	r1, r1, #8
 802c996:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802c99a:	d014      	beq.n	802c9c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c99c:	b2c9      	uxtb	r1, r1
 802c99e:	9808      	ldr	r0, [sp, #32]
 802c9a0:	b2ba      	uxth	r2, r7
 802c9a2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802c9a4:	9102      	str	r1, [sp, #8]
 802c9a6:	2101      	movs	r1, #1
 802c9a8:	4413      	add	r3, r2
 802c9aa:	4402      	add	r2, r0
 802c9ac:	9101      	str	r1, [sp, #4]
 802c9ae:	fa0f f18b 	sxth.w	r1, fp
 802c9b2:	f8da 0000 	ldr.w	r0, [sl]
 802c9b6:	b21b      	sxth	r3, r3
 802c9b8:	9100      	str	r1, [sp, #0]
 802c9ba:	b212      	sxth	r2, r2
 802c9bc:	6941      	ldr	r1, [r0, #20]
 802c9be:	4650      	mov	r0, sl
 802c9c0:	460d      	mov	r5, r1
 802c9c2:	9905      	ldr	r1, [sp, #20]
 802c9c4:	47a8      	blx	r5
 802c9c6:	9b04      	ldr	r3, [sp, #16]
 802c9c8:	1c7a      	adds	r2, r7, #1
 802c9ca:	3301      	adds	r3, #1
 802c9cc:	d0ca      	beq.n	802c964 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c9ce:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c9d2:	1abb      	subs	r3, r7, r2
 802c9d4:	2b00      	cmp	r3, #0
 802c9d6:	dd31      	ble.n	802ca3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c9d8:	2a00      	cmp	r2, #0
 802c9da:	dabd      	bge.n	802c958 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802c9dc:	2f00      	cmp	r7, #0
 802c9de:	dd2d      	ble.n	802ca3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c9e0:	2200      	movs	r2, #0
 802c9e2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802c9e6:	19d1      	adds	r1, r2, r7
 802c9e8:	4299      	cmp	r1, r3
 802c9ea:	db02      	blt.n	802c9f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802c9ec:	1a9f      	subs	r7, r3, r2
 802c9ee:	2f00      	cmp	r7, #0
 802c9f0:	dd24      	ble.n	802ca3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c9f2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802c9f6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802c9fa:	f7ff ff3b 	bl	802c874 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802c9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ca00:	fb10 f003 	smulbb	r0, r0, r3
 802ca04:	b280      	uxth	r0, r0
 802ca06:	1c41      	adds	r1, r0, #1
 802ca08:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802ca0c:	1209      	asrs	r1, r1, #8
 802ca0e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802ca12:	d013      	beq.n	802ca3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802ca14:	b292      	uxth	r2, r2
 802ca16:	9808      	ldr	r0, [sp, #32]
 802ca18:	b2c9      	uxtb	r1, r1
 802ca1a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802ca1c:	b23f      	sxth	r7, r7
 802ca1e:	4413      	add	r3, r2
 802ca20:	9102      	str	r1, [sp, #8]
 802ca22:	4402      	add	r2, r0
 802ca24:	fa0f f18b 	sxth.w	r1, fp
 802ca28:	f8da 0000 	ldr.w	r0, [sl]
 802ca2c:	b21b      	sxth	r3, r3
 802ca2e:	9100      	str	r1, [sp, #0]
 802ca30:	b212      	sxth	r2, r2
 802ca32:	9701      	str	r7, [sp, #4]
 802ca34:	9905      	ldr	r1, [sp, #20]
 802ca36:	6947      	ldr	r7, [r0, #20]
 802ca38:	4650      	mov	r0, sl
 802ca3a:	47b8      	blx	r7
 802ca3c:	464b      	mov	r3, r9
 802ca3e:	e75e      	b.n	802c8fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802ca40:	2f00      	cmp	r7, #0
 802ca42:	da96      	bge.n	802c972 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802ca44:	e78e      	b.n	802c964 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802ca46:	2900      	cmp	r1, #0
 802ca48:	d0f8      	beq.n	802ca3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802ca4a:	e790      	b.n	802c96e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802ca4c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802ca4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802ca50:	461e      	mov	r6, r3
 802ca52:	4b36      	ldr	r3, [pc, #216]	@ (802cb2c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802ca54:	2500      	movs	r5, #0
 802ca56:	f100 0814 	add.w	r8, r0, #20
 802ca5a:	4604      	mov	r4, r0
 802ca5c:	4617      	mov	r7, r2
 802ca5e:	e9c0 3100 	strd	r3, r1, [r0]
 802ca62:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802ca66:	8185      	strh	r5, [r0, #12]
 802ca68:	8103      	strh	r3, [r0, #8]
 802ca6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802ca6e:	81c5      	strh	r5, [r0, #14]
 802ca70:	7283      	strb	r3, [r0, #10]
 802ca72:	8205      	strh	r5, [r0, #16]
 802ca74:	8245      	strh	r5, [r0, #18]
 802ca76:	4640      	mov	r0, r8
 802ca78:	f7eb ff7e 	bl	8018978 <_ZN8touchgfx7OutlineC1Ev>
 802ca7c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802ca80:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802ca84:	466b      	mov	r3, sp
 802ca86:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802ca8a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802ca8e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802ca92:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802ca96:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802ca9a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802ca9e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802caa2:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802caa6:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802caaa:	6830      	ldr	r0, [r6, #0]
 802caac:	6871      	ldr	r1, [r6, #4]
 802caae:	8872      	ldrh	r2, [r6, #2]
 802cab0:	8835      	ldrh	r5, [r6, #0]
 802cab2:	c303      	stmia	r3!, {r0, r1}
 802cab4:	887b      	ldrh	r3, [r7, #2]
 802cab6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802caba:	4413      	add	r3, r2
 802cabc:	883a      	ldrh	r2, [r7, #0]
 802cabe:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802cac2:	442a      	add	r2, r5
 802cac4:	81e3      	strh	r3, [r4, #14]
 802cac6:	8220      	strh	r0, [r4, #16]
 802cac8:	4668      	mov	r0, sp
 802caca:	81a2      	strh	r2, [r4, #12]
 802cacc:	8261      	strh	r1, [r4, #18]
 802cace:	4639      	mov	r1, r7
 802cad0:	f7ee f940 	bl	801ad54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802cad4:	f104 000c 	add.w	r0, r4, #12
 802cad8:	f7ee f914 	bl	801ad04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802cadc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802cae0:	f8bd 2000 	ldrh.w	r2, [sp]
 802cae4:	4640      	mov	r0, r8
 802cae6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802caea:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802caee:	f7eb ff27 	bl	8018940 <_ZN8touchgfx7Outline5resetEv>
 802caf2:	f9bd 3000 	ldrsh.w	r3, [sp]
 802caf6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802cafa:	4620      	mov	r0, r4
 802cafc:	015b      	lsls	r3, r3, #5
 802cafe:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802cb00:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802cb04:	015b      	lsls	r3, r3, #5
 802cb06:	6523      	str	r3, [r4, #80]	@ 0x50
 802cb08:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802cb0c:	015b      	lsls	r3, r3, #5
 802cb0e:	6563      	str	r3, [r4, #84]	@ 0x54
 802cb10:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802cb14:	015b      	lsls	r3, r3, #5
 802cb16:	65a3      	str	r3, [r4, #88]	@ 0x58
 802cb18:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802cb1c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802cb20:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802cb24:	b002      	add	sp, #8
 802cb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cb2a:	bf00      	nop
 802cb2c:	08032684 	.word	0x08032684

0802cb30 <_ZN8touchgfx6Canvas5closeEv>:
 802cb30:	b538      	push	{r3, r4, r5, lr}
 802cb32:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802cb36:	4604      	mov	r4, r0
 802cb38:	b193      	cbz	r3, 802cb60 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802cb3a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802cb3e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802cb42:	4213      	tst	r3, r2
 802cb44:	d10c      	bne.n	802cb60 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802cb46:	f100 0514 	add.w	r5, r0, #20
 802cb4a:	b123      	cbz	r3, 802cb56 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802cb4c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802cb50:	4628      	mov	r0, r5
 802cb52:	f7ff fea3 	bl	802c89c <_ZN8touchgfx10Rasterizer6lineToEii>
 802cb56:	4628      	mov	r0, r5
 802cb58:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802cb5c:	f7ff fe9e 	bl	802c89c <_ZN8touchgfx10Rasterizer6lineToEii>
 802cb60:	2300      	movs	r3, #0
 802cb62:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802cb66:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802cb6a:	4298      	cmp	r0, r3
 802cb6c:	bf34      	ite	cc
 802cb6e:	2000      	movcc	r0, #0
 802cb70:	2001      	movcs	r0, #1
 802cb72:	bd38      	pop	{r3, r4, r5, pc}

0802cb74 <_ZN8touchgfx6Canvas6renderEh>:
 802cb74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802cb78:	7a85      	ldrb	r5, [r0, #10]
 802cb7a:	4604      	mov	r4, r0
 802cb7c:	4369      	muls	r1, r5
 802cb7e:	1c4d      	adds	r5, r1, #1
 802cb80:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802cb84:	122d      	asrs	r5, r5, #8
 802cb86:	f000 8098 	beq.w	802ccba <_ZN8touchgfx6Canvas6renderEh+0x146>
 802cb8a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802cb8e:	2b00      	cmp	r3, #0
 802cb90:	f000 8093 	beq.w	802ccba <_ZN8touchgfx6Canvas6renderEh+0x146>
 802cb94:	f7ff ffcc 	bl	802cb30 <_ZN8touchgfx6Canvas5closeEv>
 802cb98:	4607      	mov	r7, r0
 802cb9a:	2800      	cmp	r0, #0
 802cb9c:	d045      	beq.n	802cc2a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802cb9e:	6860      	ldr	r0, [r4, #4]
 802cba0:	4e47      	ldr	r6, [pc, #284]	@ (802ccc0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802cba2:	6803      	ldr	r3, [r0, #0]
 802cba4:	6837      	ldr	r7, [r6, #0]
 802cba6:	689b      	ldr	r3, [r3, #8]
 802cba8:	4798      	blx	r3
 802cbaa:	4601      	mov	r1, r0
 802cbac:	4638      	mov	r0, r7
 802cbae:	f7e9 f93f 	bl	8015e30 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802cbb2:	4607      	mov	r7, r0
 802cbb4:	f7dd ffcc 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 802cbb8:	6803      	ldr	r3, [r0, #0]
 802cbba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802cbbc:	4798      	blx	r3
 802cbbe:	4680      	mov	r8, r0
 802cbc0:	f7dd ffc6 	bl	800ab50 <_ZN8touchgfx3HAL3lcdEv>
 802cbc4:	6803      	ldr	r3, [r0, #0]
 802cbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cbc8:	4798      	blx	r3
 802cbca:	280b      	cmp	r0, #11
 802cbcc:	d85a      	bhi.n	802cc84 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802cbce:	e8df f000 	tbb	[pc, r0]
 802cbd2:	5b50      	.short	0x5b50
 802cbd4:	3059066b 	.word	0x3059066b
 802cbd8:	64646440 	.word	0x64646440
 802cbdc:	6464      	.short	0x6464
 802cbde:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802cbe2:	2208      	movs	r2, #8
 802cbe4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cbe8:	fb91 f2f2 	sdiv	r2, r1, r2
 802cbec:	fb08 2303 	mla	r3, r8, r3, r2
 802cbf0:	441f      	add	r7, r3
 802cbf2:	424b      	negs	r3, r1
 802cbf4:	f001 0107 	and.w	r1, r1, #7
 802cbf8:	f003 0307 	and.w	r3, r3, #7
 802cbfc:	bf58      	it	pl
 802cbfe:	4259      	negpl	r1, r3
 802cc00:	b2c9      	uxtb	r1, r1
 802cc02:	b2ed      	uxtb	r5, r5
 802cc04:	463a      	mov	r2, r7
 802cc06:	fa0f f388 	sxth.w	r3, r8
 802cc0a:	f104 0014 	add.w	r0, r4, #20
 802cc0e:	e9cd 1500 	strd	r1, r5, [sp]
 802cc12:	6861      	ldr	r1, [r4, #4]
 802cc14:	f7ff fe4e 	bl	802c8b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802cc18:	4607      	mov	r7, r0
 802cc1a:	6860      	ldr	r0, [r4, #4]
 802cc1c:	6803      	ldr	r3, [r0, #0]
 802cc1e:	691b      	ldr	r3, [r3, #16]
 802cc20:	4798      	blx	r3
 802cc22:	6830      	ldr	r0, [r6, #0]
 802cc24:	6803      	ldr	r3, [r0, #0]
 802cc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cc28:	4798      	blx	r3
 802cc2a:	4638      	mov	r0, r7
 802cc2c:	b002      	add	sp, #8
 802cc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc32:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802cc36:	2204      	movs	r2, #4
 802cc38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cc3c:	fb91 f2f2 	sdiv	r2, r1, r2
 802cc40:	fb08 2303 	mla	r3, r8, r3, r2
 802cc44:	441f      	add	r7, r3
 802cc46:	424b      	negs	r3, r1
 802cc48:	f001 0103 	and.w	r1, r1, #3
 802cc4c:	f003 0303 	and.w	r3, r3, #3
 802cc50:	e7d4      	b.n	802cbfc <_ZN8touchgfx6Canvas6renderEh+0x88>
 802cc52:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802cc56:	2202      	movs	r2, #2
 802cc58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cc5c:	2900      	cmp	r1, #0
 802cc5e:	fb91 f2f2 	sdiv	r2, r1, r2
 802cc62:	f001 0101 	and.w	r1, r1, #1
 802cc66:	fb08 2303 	mla	r3, r8, r3, r2
 802cc6a:	bfb8      	it	lt
 802cc6c:	4249      	neglt	r1, r1
 802cc6e:	441f      	add	r7, r3
 802cc70:	e7c6      	b.n	802cc00 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802cc72:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cc76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802cc7a:	fb08 f303 	mul.w	r3, r8, r3
 802cc7e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802cc82:	441f      	add	r7, r3
 802cc84:	2100      	movs	r1, #0
 802cc86:	e7bc      	b.n	802cc02 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802cc88:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cc8c:	2103      	movs	r1, #3
 802cc8e:	fb08 f203 	mul.w	r2, r8, r3
 802cc92:	89a3      	ldrh	r3, [r4, #12]
 802cc94:	fb13 2301 	smlabb	r3, r3, r1, r2
 802cc98:	e7f3      	b.n	802cc82 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802cc9a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cc9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802cca2:	fb08 2303 	mla	r3, r8, r3, r2
 802cca6:	e7ec      	b.n	802cc82 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802cca8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802ccac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ccb0:	fb08 f303 	mul.w	r3, r8, r3
 802ccb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802ccb8:	e7e3      	b.n	802cc82 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802ccba:	2701      	movs	r7, #1
 802ccbc:	e7b5      	b.n	802cc2a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802ccbe:	bf00      	nop
 802ccc0:	200122c4 	.word	0x200122c4

0802ccc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802ccc4:	4b06      	ldr	r3, [pc, #24]	@ (802cce0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802ccc6:	b510      	push	{r4, lr}
 802ccc8:	781b      	ldrb	r3, [r3, #0]
 802ccca:	2b01      	cmp	r3, #1
 802cccc:	d107      	bne.n	802ccde <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802ccce:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802ccd2:	680b      	ldr	r3, [r1, #0]
 802ccd4:	6814      	ldr	r4, [r2, #0]
 802ccd6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802ccda:	6013      	str	r3, [r2, #0]
 802ccdc:	600c      	str	r4, [r1, #0]
 802ccde:	bd10      	pop	{r4, pc}
 802cce0:	200122bc 	.word	0x200122bc

0802cce4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802cce4:	b513      	push	{r0, r1, r4, lr}
 802cce6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802ccea:	4604      	mov	r4, r0
 802ccec:	e9cd 2100 	strd	r2, r1, [sp]
 802ccf0:	b9a3      	cbnz	r3, 802cd1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802ccf2:	466a      	mov	r2, sp
 802ccf4:	a901      	add	r1, sp, #4
 802ccf6:	4620      	mov	r0, r4
 802ccf8:	f7ff ffe4 	bl	802ccc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802ccfc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802ccfe:	9901      	ldr	r1, [sp, #4]
 802cd00:	9a00      	ldr	r2, [sp, #0]
 802cd02:	1ac9      	subs	r1, r1, r3
 802cd04:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802cd06:	1ad2      	subs	r2, r2, r3
 802cd08:	9101      	str	r1, [sp, #4]
 802cd0a:	2a00      	cmp	r2, #0
 802cd0c:	9200      	str	r2, [sp, #0]
 802cd0e:	da0b      	bge.n	802cd28 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802cd10:	2301      	movs	r3, #1
 802cd12:	2900      	cmp	r1, #0
 802cd14:	da0e      	bge.n	802cd34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802cd16:	f043 0304 	orr.w	r3, r3, #4
 802cd1a:	e013      	b.n	802cd44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802cd1c:	f7ff ff08 	bl	802cb30 <_ZN8touchgfx6Canvas5closeEv>
 802cd20:	2800      	cmp	r0, #0
 802cd22:	d1e6      	bne.n	802ccf2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802cd24:	b002      	add	sp, #8
 802cd26:	bd10      	pop	{r4, pc}
 802cd28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802cd2a:	429a      	cmp	r2, r3
 802cd2c:	bfac      	ite	ge
 802cd2e:	2302      	movge	r3, #2
 802cd30:	2300      	movlt	r3, #0
 802cd32:	e7ee      	b.n	802cd12 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802cd34:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802cd36:	4281      	cmp	r1, r0
 802cd38:	bfac      	ite	ge
 802cd3a:	2008      	movge	r0, #8
 802cd3c:	2000      	movlt	r0, #0
 802cd3e:	4318      	orrs	r0, r3
 802cd40:	b2c3      	uxtb	r3, r0
 802cd42:	b158      	cbz	r0, 802cd5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802cd44:	2200      	movs	r2, #0
 802cd46:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802cd4a:	9901      	ldr	r1, [sp, #4]
 802cd4c:	9a00      	ldr	r2, [sp, #0]
 802cd4e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802cd50:	6722      	str	r2, [r4, #112]	@ 0x70
 802cd52:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802cd56:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802cd5a:	e7e3      	b.n	802cd24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802cd5c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802cd60:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802cd64:	4298      	cmp	r0, r3
 802cd66:	d803      	bhi.n	802cd70 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802cd68:	f104 0014 	add.w	r0, r4, #20
 802cd6c:	f7ec fad8 	bl	8019320 <_ZN8touchgfx7Outline6moveToEii>
 802cd70:	2301      	movs	r3, #1
 802cd72:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802cd76:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802cd7a:	2300      	movs	r3, #0
 802cd7c:	e7e5      	b.n	802cd4a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802cd7e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802cd7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802cd80:	ab02      	add	r3, sp, #8
 802cd82:	4604      	mov	r4, r0
 802cd84:	9101      	str	r1, [sp, #4]
 802cd86:	a901      	add	r1, sp, #4
 802cd88:	f843 2d08 	str.w	r2, [r3, #-8]!
 802cd8c:	461a      	mov	r2, r3
 802cd8e:	f7ff ff99 	bl	802ccc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802cd92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802cd94:	9901      	ldr	r1, [sp, #4]
 802cd96:	9a00      	ldr	r2, [sp, #0]
 802cd98:	1ac9      	subs	r1, r1, r3
 802cd9a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802cd9c:	1ad2      	subs	r2, r2, r3
 802cd9e:	9101      	str	r1, [sp, #4]
 802cda0:	2a00      	cmp	r2, #0
 802cda2:	9200      	str	r2, [sp, #0]
 802cda4:	db1c      	blt.n	802cde0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802cda6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802cda8:	429a      	cmp	r2, r3
 802cdaa:	bfac      	ite	ge
 802cdac:	2002      	movge	r0, #2
 802cdae:	2000      	movlt	r0, #0
 802cdb0:	2900      	cmp	r1, #0
 802cdb2:	db17      	blt.n	802cde4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802cdb4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802cdb6:	4299      	cmp	r1, r3
 802cdb8:	bfac      	ite	ge
 802cdba:	2308      	movge	r3, #8
 802cdbc:	2300      	movlt	r3, #0
 802cdbe:	4303      	orrs	r3, r0
 802cdc0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802cdc4:	b2dd      	uxtb	r5, r3
 802cdc6:	b978      	cbnz	r0, 802cde8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802cdc8:	f104 0014 	add.w	r0, r4, #20
 802cdcc:	f7ff fd66 	bl	802c89c <_ZN8touchgfx10Rasterizer6lineToEii>
 802cdd0:	9b01      	ldr	r3, [sp, #4]
 802cdd2:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802cdd6:	6623      	str	r3, [r4, #96]	@ 0x60
 802cdd8:	9b00      	ldr	r3, [sp, #0]
 802cdda:	6663      	str	r3, [r4, #100]	@ 0x64
 802cddc:	b002      	add	sp, #8
 802cdde:	bd70      	pop	{r4, r5, r6, pc}
 802cde0:	2001      	movs	r0, #1
 802cde2:	e7e5      	b.n	802cdb0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802cde4:	2304      	movs	r3, #4
 802cde6:	e7ea      	b.n	802cdbe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802cde8:	b113      	cbz	r3, 802cdf0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802cdea:	ea10 0305 	ands.w	r3, r0, r5
 802cdee:	d11c      	bne.n	802ce2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802cdf0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802cdf4:	f104 0614 	add.w	r6, r4, #20
 802cdf8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802cdfc:	b98b      	cbnz	r3, 802ce22 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802cdfe:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802ce02:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802ce06:	4298      	cmp	r0, r3
 802ce08:	d802      	bhi.n	802ce10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802ce0a:	4630      	mov	r0, r6
 802ce0c:	f7ec fa88 	bl	8019320 <_ZN8touchgfx7Outline6moveToEii>
 802ce10:	2301      	movs	r3, #1
 802ce12:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802ce16:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802ce1a:	4630      	mov	r0, r6
 802ce1c:	e9dd 2100 	ldrd	r2, r1, [sp]
 802ce20:	e7d4      	b.n	802cdcc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802ce22:	4630      	mov	r0, r6
 802ce24:	f7ff fd3a 	bl	802c89c <_ZN8touchgfx10Rasterizer6lineToEii>
 802ce28:	e7f7      	b.n	802ce1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802ce2a:	461d      	mov	r5, r3
 802ce2c:	e7d0      	b.n	802cdd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802ce30 <_ZN8touchgfx6CanvasD1Ev>:
 802ce30:	4b04      	ldr	r3, [pc, #16]	@ (802ce44 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802ce32:	b510      	push	{r4, lr}
 802ce34:	4604      	mov	r4, r0
 802ce36:	f840 3b14 	str.w	r3, [r0], #20
 802ce3a:	f7eb fd79 	bl	8018930 <_ZN8touchgfx7OutlineD1Ev>
 802ce3e:	4620      	mov	r0, r4
 802ce40:	bd10      	pop	{r4, pc}
 802ce42:	bf00      	nop
 802ce44:	08032684 	.word	0x08032684

0802ce48 <_ZN8touchgfx6CanvasD0Ev>:
 802ce48:	b510      	push	{r4, lr}
 802ce4a:	4604      	mov	r4, r0
 802ce4c:	f7ff fff0 	bl	802ce30 <_ZN8touchgfx6CanvasD1Ev>
 802ce50:	2174      	movs	r1, #116	@ 0x74
 802ce52:	4620      	mov	r0, r4
 802ce54:	f000 f807 	bl	802ce66 <_ZdlPvj>
 802ce58:	4620      	mov	r0, r4
 802ce5a:	bd10      	pop	{r4, pc}

0802ce5c <__aeabi_atexit>:
 802ce5c:	460b      	mov	r3, r1
 802ce5e:	4601      	mov	r1, r0
 802ce60:	4618      	mov	r0, r3
 802ce62:	f000 be43 	b.w	802daec <__cxa_atexit>

0802ce66 <_ZdlPvj>:
 802ce66:	f000 b812 	b.w	802ce8e <_ZdlPv>

0802ce6a <__cxa_guard_acquire>:
 802ce6a:	6802      	ldr	r2, [r0, #0]
 802ce6c:	07d2      	lsls	r2, r2, #31
 802ce6e:	4603      	mov	r3, r0
 802ce70:	d405      	bmi.n	802ce7e <__cxa_guard_acquire+0x14>
 802ce72:	7842      	ldrb	r2, [r0, #1]
 802ce74:	b102      	cbz	r2, 802ce78 <__cxa_guard_acquire+0xe>
 802ce76:	deff      	udf	#255	@ 0xff
 802ce78:	2001      	movs	r0, #1
 802ce7a:	7058      	strb	r0, [r3, #1]
 802ce7c:	4770      	bx	lr
 802ce7e:	2000      	movs	r0, #0
 802ce80:	4770      	bx	lr

0802ce82 <__cxa_guard_release>:
 802ce82:	2301      	movs	r3, #1
 802ce84:	6003      	str	r3, [r0, #0]
 802ce86:	4770      	bx	lr

0802ce88 <__cxa_pure_virtual>:
 802ce88:	b508      	push	{r3, lr}
 802ce8a:	f000 f80f 	bl	802ceac <_ZSt9terminatev>

0802ce8e <_ZdlPv>:
 802ce8e:	f000 bd77 	b.w	802d980 <free>

0802ce92 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802ce92:	b508      	push	{r3, lr}
 802ce94:	4780      	blx	r0
 802ce96:	f000 fd3f 	bl	802d918 <abort>
	...

0802ce9c <_ZSt13get_terminatev>:
 802ce9c:	4b02      	ldr	r3, [pc, #8]	@ (802cea8 <_ZSt13get_terminatev+0xc>)
 802ce9e:	6818      	ldr	r0, [r3, #0]
 802cea0:	f3bf 8f5b 	dmb	ish
 802cea4:	4770      	bx	lr
 802cea6:	bf00      	nop
 802cea8:	20000094 	.word	0x20000094

0802ceac <_ZSt9terminatev>:
 802ceac:	b508      	push	{r3, lr}
 802ceae:	f7ff fff5 	bl	802ce9c <_ZSt13get_terminatev>
 802ceb2:	f7ff ffee 	bl	802ce92 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802ceb8 <sinf>:
 802ceb8:	ee10 3a10 	vmov	r3, s0
 802cebc:	b507      	push	{r0, r1, r2, lr}
 802cebe:	4a1f      	ldr	r2, [pc, #124]	@ (802cf3c <sinf+0x84>)
 802cec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802cec4:	4293      	cmp	r3, r2
 802cec6:	d807      	bhi.n	802ced8 <sinf+0x20>
 802cec8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802cf40 <sinf+0x88>
 802cecc:	2000      	movs	r0, #0
 802cece:	b003      	add	sp, #12
 802ced0:	f85d eb04 	ldr.w	lr, [sp], #4
 802ced4:	f000 b88e 	b.w	802cff4 <__kernel_sinf>
 802ced8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802cedc:	d304      	bcc.n	802cee8 <sinf+0x30>
 802cede:	ee30 0a40 	vsub.f32	s0, s0, s0
 802cee2:	b003      	add	sp, #12
 802cee4:	f85d fb04 	ldr.w	pc, [sp], #4
 802cee8:	4668      	mov	r0, sp
 802ceea:	f000 f8cb 	bl	802d084 <__ieee754_rem_pio2f>
 802ceee:	f000 0003 	and.w	r0, r0, #3
 802cef2:	2801      	cmp	r0, #1
 802cef4:	d00a      	beq.n	802cf0c <sinf+0x54>
 802cef6:	2802      	cmp	r0, #2
 802cef8:	d00f      	beq.n	802cf1a <sinf+0x62>
 802cefa:	b9c0      	cbnz	r0, 802cf2e <sinf+0x76>
 802cefc:	eddd 0a01 	vldr	s1, [sp, #4]
 802cf00:	ed9d 0a00 	vldr	s0, [sp]
 802cf04:	2001      	movs	r0, #1
 802cf06:	f000 f875 	bl	802cff4 <__kernel_sinf>
 802cf0a:	e7ea      	b.n	802cee2 <sinf+0x2a>
 802cf0c:	eddd 0a01 	vldr	s1, [sp, #4]
 802cf10:	ed9d 0a00 	vldr	s0, [sp]
 802cf14:	f000 f816 	bl	802cf44 <__kernel_cosf>
 802cf18:	e7e3      	b.n	802cee2 <sinf+0x2a>
 802cf1a:	eddd 0a01 	vldr	s1, [sp, #4]
 802cf1e:	ed9d 0a00 	vldr	s0, [sp]
 802cf22:	2001      	movs	r0, #1
 802cf24:	f000 f866 	bl	802cff4 <__kernel_sinf>
 802cf28:	eeb1 0a40 	vneg.f32	s0, s0
 802cf2c:	e7d9      	b.n	802cee2 <sinf+0x2a>
 802cf2e:	eddd 0a01 	vldr	s1, [sp, #4]
 802cf32:	ed9d 0a00 	vldr	s0, [sp]
 802cf36:	f000 f805 	bl	802cf44 <__kernel_cosf>
 802cf3a:	e7f5      	b.n	802cf28 <sinf+0x70>
 802cf3c:	3f490fd8 	.word	0x3f490fd8
 802cf40:	00000000 	.word	0x00000000

0802cf44 <__kernel_cosf>:
 802cf44:	ee10 3a10 	vmov	r3, s0
 802cf48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802cf4c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802cf50:	eef0 6a40 	vmov.f32	s13, s0
 802cf54:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802cf58:	d204      	bcs.n	802cf64 <__kernel_cosf+0x20>
 802cf5a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802cf5e:	ee17 2a90 	vmov	r2, s15
 802cf62:	b342      	cbz	r2, 802cfb6 <__kernel_cosf+0x72>
 802cf64:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802cf68:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802cfd4 <__kernel_cosf+0x90>
 802cf6c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802cfd8 <__kernel_cosf+0x94>
 802cf70:	4a1a      	ldr	r2, [pc, #104]	@ (802cfdc <__kernel_cosf+0x98>)
 802cf72:	eea7 6a27 	vfma.f32	s12, s14, s15
 802cf76:	4293      	cmp	r3, r2
 802cf78:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802cfe0 <__kernel_cosf+0x9c>
 802cf7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802cf80:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 802cfe4 <__kernel_cosf+0xa0>
 802cf84:	eea7 6a87 	vfma.f32	s12, s15, s14
 802cf88:	eddf 7a17 	vldr	s15, [pc, #92]	@ 802cfe8 <__kernel_cosf+0xa4>
 802cf8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802cf90:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 802cfec <__kernel_cosf+0xa8>
 802cf94:	eea7 6a87 	vfma.f32	s12, s15, s14
 802cf98:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802cf9c:	ee26 6a07 	vmul.f32	s12, s12, s14
 802cfa0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802cfa4:	eee7 0a06 	vfma.f32	s1, s14, s12
 802cfa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 802cfac:	d804      	bhi.n	802cfb8 <__kernel_cosf+0x74>
 802cfae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802cfb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 802cfb6:	4770      	bx	lr
 802cfb8:	4a0d      	ldr	r2, [pc, #52]	@ (802cff0 <__kernel_cosf+0xac>)
 802cfba:	4293      	cmp	r3, r2
 802cfbc:	bf9a      	itte	ls
 802cfbe:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802cfc2:	ee07 3a10 	vmovls	s14, r3
 802cfc6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802cfca:	ee30 0a47 	vsub.f32	s0, s0, s14
 802cfce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cfd2:	e7ec      	b.n	802cfae <__kernel_cosf+0x6a>
 802cfd4:	ad47d74e 	.word	0xad47d74e
 802cfd8:	310f74f6 	.word	0x310f74f6
 802cfdc:	3e999999 	.word	0x3e999999
 802cfe0:	b493f27c 	.word	0xb493f27c
 802cfe4:	37d00d01 	.word	0x37d00d01
 802cfe8:	bab60b61 	.word	0xbab60b61
 802cfec:	3d2aaaab 	.word	0x3d2aaaab
 802cff0:	3f480000 	.word	0x3f480000

0802cff4 <__kernel_sinf>:
 802cff4:	ee10 3a10 	vmov	r3, s0
 802cff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802cffc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802d000:	d204      	bcs.n	802d00c <__kernel_sinf+0x18>
 802d002:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802d006:	ee17 3a90 	vmov	r3, s15
 802d00a:	b35b      	cbz	r3, 802d064 <__kernel_sinf+0x70>
 802d00c:	ee20 7a00 	vmul.f32	s14, s0, s0
 802d010:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802d068 <__kernel_sinf+0x74>
 802d014:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802d06c <__kernel_sinf+0x78>
 802d018:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d01c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802d070 <__kernel_sinf+0x7c>
 802d020:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d024:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 802d074 <__kernel_sinf+0x80>
 802d028:	eea7 6a87 	vfma.f32	s12, s15, s14
 802d02c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 802d078 <__kernel_sinf+0x84>
 802d030:	ee60 6a07 	vmul.f32	s13, s0, s14
 802d034:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d038:	b930      	cbnz	r0, 802d048 <__kernel_sinf+0x54>
 802d03a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802d07c <__kernel_sinf+0x88>
 802d03e:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d042:	eea6 0a26 	vfma.f32	s0, s12, s13
 802d046:	4770      	bx	lr
 802d048:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802d04c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802d050:	eee0 7a86 	vfma.f32	s15, s1, s12
 802d054:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802d058:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802d080 <__kernel_sinf+0x8c>
 802d05c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802d060:	ee30 0a60 	vsub.f32	s0, s0, s1
 802d064:	4770      	bx	lr
 802d066:	bf00      	nop
 802d068:	2f2ec9d3 	.word	0x2f2ec9d3
 802d06c:	b2d72f34 	.word	0xb2d72f34
 802d070:	3638ef1b 	.word	0x3638ef1b
 802d074:	b9500d01 	.word	0xb9500d01
 802d078:	3c088889 	.word	0x3c088889
 802d07c:	be2aaaab 	.word	0xbe2aaaab
 802d080:	3e2aaaab 	.word	0x3e2aaaab

0802d084 <__ieee754_rem_pio2f>:
 802d084:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d086:	ee10 6a10 	vmov	r6, s0
 802d08a:	4b88      	ldr	r3, [pc, #544]	@ (802d2ac <__ieee754_rem_pio2f+0x228>)
 802d08c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802d090:	429d      	cmp	r5, r3
 802d092:	b087      	sub	sp, #28
 802d094:	4604      	mov	r4, r0
 802d096:	d805      	bhi.n	802d0a4 <__ieee754_rem_pio2f+0x20>
 802d098:	2300      	movs	r3, #0
 802d09a:	ed80 0a00 	vstr	s0, [r0]
 802d09e:	6043      	str	r3, [r0, #4]
 802d0a0:	2000      	movs	r0, #0
 802d0a2:	e022      	b.n	802d0ea <__ieee754_rem_pio2f+0x66>
 802d0a4:	4b82      	ldr	r3, [pc, #520]	@ (802d2b0 <__ieee754_rem_pio2f+0x22c>)
 802d0a6:	429d      	cmp	r5, r3
 802d0a8:	d83a      	bhi.n	802d120 <__ieee754_rem_pio2f+0x9c>
 802d0aa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802d0ae:	2e00      	cmp	r6, #0
 802d0b0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 802d2b4 <__ieee754_rem_pio2f+0x230>
 802d0b4:	4a80      	ldr	r2, [pc, #512]	@ (802d2b8 <__ieee754_rem_pio2f+0x234>)
 802d0b6:	f023 030f 	bic.w	r3, r3, #15
 802d0ba:	dd18      	ble.n	802d0ee <__ieee754_rem_pio2f+0x6a>
 802d0bc:	4293      	cmp	r3, r2
 802d0be:	ee70 7a47 	vsub.f32	s15, s0, s14
 802d0c2:	bf09      	itett	eq
 802d0c4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 802d2bc <__ieee754_rem_pio2f+0x238>
 802d0c8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 802d2c0 <__ieee754_rem_pio2f+0x23c>
 802d0cc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 802d2c4 <__ieee754_rem_pio2f+0x240>
 802d0d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802d0d4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802d0d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d0dc:	ed80 7a00 	vstr	s14, [r0]
 802d0e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d0e4:	edc0 7a01 	vstr	s15, [r0, #4]
 802d0e8:	2001      	movs	r0, #1
 802d0ea:	b007      	add	sp, #28
 802d0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d0ee:	4293      	cmp	r3, r2
 802d0f0:	ee70 7a07 	vadd.f32	s15, s0, s14
 802d0f4:	bf09      	itett	eq
 802d0f6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 802d2bc <__ieee754_rem_pio2f+0x238>
 802d0fa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 802d2c0 <__ieee754_rem_pio2f+0x23c>
 802d0fe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 802d2c4 <__ieee754_rem_pio2f+0x240>
 802d102:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802d106:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d10a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d10e:	ed80 7a00 	vstr	s14, [r0]
 802d112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d116:	edc0 7a01 	vstr	s15, [r0, #4]
 802d11a:	f04f 30ff 	mov.w	r0, #4294967295
 802d11e:	e7e4      	b.n	802d0ea <__ieee754_rem_pio2f+0x66>
 802d120:	4b69      	ldr	r3, [pc, #420]	@ (802d2c8 <__ieee754_rem_pio2f+0x244>)
 802d122:	429d      	cmp	r5, r3
 802d124:	d873      	bhi.n	802d20e <__ieee754_rem_pio2f+0x18a>
 802d126:	f000 f8dd 	bl	802d2e4 <fabsf>
 802d12a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 802d2cc <__ieee754_rem_pio2f+0x248>
 802d12e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d132:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d13a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d13e:	ee17 0a90 	vmov	r0, s15
 802d142:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802d2b4 <__ieee754_rem_pio2f+0x230>
 802d146:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d14a:	281f      	cmp	r0, #31
 802d14c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802d2c0 <__ieee754_rem_pio2f+0x23c>
 802d150:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d154:	eeb1 6a47 	vneg.f32	s12, s14
 802d158:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d15c:	ee16 1a90 	vmov	r1, s13
 802d160:	dc09      	bgt.n	802d176 <__ieee754_rem_pio2f+0xf2>
 802d162:	4a5b      	ldr	r2, [pc, #364]	@ (802d2d0 <__ieee754_rem_pio2f+0x24c>)
 802d164:	1e47      	subs	r7, r0, #1
 802d166:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802d16a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802d16e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802d172:	4293      	cmp	r3, r2
 802d174:	d107      	bne.n	802d186 <__ieee754_rem_pio2f+0x102>
 802d176:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802d17a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802d17e:	2a08      	cmp	r2, #8
 802d180:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802d184:	dc14      	bgt.n	802d1b0 <__ieee754_rem_pio2f+0x12c>
 802d186:	6021      	str	r1, [r4, #0]
 802d188:	ed94 7a00 	vldr	s14, [r4]
 802d18c:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d190:	2e00      	cmp	r6, #0
 802d192:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d196:	ed84 0a01 	vstr	s0, [r4, #4]
 802d19a:	daa6      	bge.n	802d0ea <__ieee754_rem_pio2f+0x66>
 802d19c:	eeb1 7a47 	vneg.f32	s14, s14
 802d1a0:	eeb1 0a40 	vneg.f32	s0, s0
 802d1a4:	ed84 7a00 	vstr	s14, [r4]
 802d1a8:	ed84 0a01 	vstr	s0, [r4, #4]
 802d1ac:	4240      	negs	r0, r0
 802d1ae:	e79c      	b.n	802d0ea <__ieee754_rem_pio2f+0x66>
 802d1b0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 802d2bc <__ieee754_rem_pio2f+0x238>
 802d1b4:	eef0 6a40 	vmov.f32	s13, s0
 802d1b8:	eee6 6a25 	vfma.f32	s13, s12, s11
 802d1bc:	ee70 7a66 	vsub.f32	s15, s0, s13
 802d1c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d1c4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802d2c4 <__ieee754_rem_pio2f+0x240>
 802d1c8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802d1cc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802d1d0:	ee15 2a90 	vmov	r2, s11
 802d1d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d1d8:	1a5b      	subs	r3, r3, r1
 802d1da:	2b19      	cmp	r3, #25
 802d1dc:	dc04      	bgt.n	802d1e8 <__ieee754_rem_pio2f+0x164>
 802d1de:	edc4 5a00 	vstr	s11, [r4]
 802d1e2:	eeb0 0a66 	vmov.f32	s0, s13
 802d1e6:	e7cf      	b.n	802d188 <__ieee754_rem_pio2f+0x104>
 802d1e8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802d2d4 <__ieee754_rem_pio2f+0x250>
 802d1ec:	eeb0 0a66 	vmov.f32	s0, s13
 802d1f0:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d1f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d1f8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802d2d8 <__ieee754_rem_pio2f+0x254>
 802d1fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d200:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d204:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d208:	ed84 7a00 	vstr	s14, [r4]
 802d20c:	e7bc      	b.n	802d188 <__ieee754_rem_pio2f+0x104>
 802d20e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802d212:	d306      	bcc.n	802d222 <__ieee754_rem_pio2f+0x19e>
 802d214:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d218:	edc0 7a01 	vstr	s15, [r0, #4]
 802d21c:	edc0 7a00 	vstr	s15, [r0]
 802d220:	e73e      	b.n	802d0a0 <__ieee754_rem_pio2f+0x1c>
 802d222:	15ea      	asrs	r2, r5, #23
 802d224:	3a86      	subs	r2, #134	@ 0x86
 802d226:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d22a:	ee07 3a90 	vmov	s15, r3
 802d22e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d232:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 802d2dc <__ieee754_rem_pio2f+0x258>
 802d236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d23a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d23e:	ed8d 7a03 	vstr	s14, [sp, #12]
 802d242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d246:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d24a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d24e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d252:	ed8d 7a04 	vstr	s14, [sp, #16]
 802d256:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d25a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802d25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d262:	edcd 7a05 	vstr	s15, [sp, #20]
 802d266:	d11e      	bne.n	802d2a6 <__ieee754_rem_pio2f+0x222>
 802d268:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802d26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d270:	bf0c      	ite	eq
 802d272:	2301      	moveq	r3, #1
 802d274:	2302      	movne	r3, #2
 802d276:	491a      	ldr	r1, [pc, #104]	@ (802d2e0 <__ieee754_rem_pio2f+0x25c>)
 802d278:	9101      	str	r1, [sp, #4]
 802d27a:	2102      	movs	r1, #2
 802d27c:	9100      	str	r1, [sp, #0]
 802d27e:	a803      	add	r0, sp, #12
 802d280:	4621      	mov	r1, r4
 802d282:	f000 f89d 	bl	802d3c0 <__kernel_rem_pio2f>
 802d286:	2e00      	cmp	r6, #0
 802d288:	f6bf af2f 	bge.w	802d0ea <__ieee754_rem_pio2f+0x66>
 802d28c:	edd4 7a00 	vldr	s15, [r4]
 802d290:	eef1 7a67 	vneg.f32	s15, s15
 802d294:	edc4 7a00 	vstr	s15, [r4]
 802d298:	edd4 7a01 	vldr	s15, [r4, #4]
 802d29c:	eef1 7a67 	vneg.f32	s15, s15
 802d2a0:	edc4 7a01 	vstr	s15, [r4, #4]
 802d2a4:	e782      	b.n	802d1ac <__ieee754_rem_pio2f+0x128>
 802d2a6:	2303      	movs	r3, #3
 802d2a8:	e7e5      	b.n	802d276 <__ieee754_rem_pio2f+0x1f2>
 802d2aa:	bf00      	nop
 802d2ac:	3f490fd8 	.word	0x3f490fd8
 802d2b0:	4016cbe3 	.word	0x4016cbe3
 802d2b4:	3fc90f80 	.word	0x3fc90f80
 802d2b8:	3fc90fd0 	.word	0x3fc90fd0
 802d2bc:	37354400 	.word	0x37354400
 802d2c0:	37354443 	.word	0x37354443
 802d2c4:	2e85a308 	.word	0x2e85a308
 802d2c8:	43490f80 	.word	0x43490f80
 802d2cc:	3f22f984 	.word	0x3f22f984
 802d2d0:	08032690 	.word	0x08032690
 802d2d4:	2e85a300 	.word	0x2e85a300
 802d2d8:	248d3132 	.word	0x248d3132
 802d2dc:	43800000 	.word	0x43800000
 802d2e0:	08032710 	.word	0x08032710

0802d2e4 <fabsf>:
 802d2e4:	ee10 3a10 	vmov	r3, s0
 802d2e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802d2ec:	ee00 3a10 	vmov	s0, r3
 802d2f0:	4770      	bx	lr
	...

0802d2f4 <scalbnf>:
 802d2f4:	ee10 3a10 	vmov	r3, s0
 802d2f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802d2fc:	d02b      	beq.n	802d356 <scalbnf+0x62>
 802d2fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802d302:	d302      	bcc.n	802d30a <scalbnf+0x16>
 802d304:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d308:	4770      	bx	lr
 802d30a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802d30e:	d123      	bne.n	802d358 <scalbnf+0x64>
 802d310:	4b24      	ldr	r3, [pc, #144]	@ (802d3a4 <scalbnf+0xb0>)
 802d312:	eddf 7a25 	vldr	s15, [pc, #148]	@ 802d3a8 <scalbnf+0xb4>
 802d316:	4298      	cmp	r0, r3
 802d318:	ee20 0a27 	vmul.f32	s0, s0, s15
 802d31c:	db17      	blt.n	802d34e <scalbnf+0x5a>
 802d31e:	ee10 3a10 	vmov	r3, s0
 802d322:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d326:	3a19      	subs	r2, #25
 802d328:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802d32c:	4288      	cmp	r0, r1
 802d32e:	dd15      	ble.n	802d35c <scalbnf+0x68>
 802d330:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 802d3ac <scalbnf+0xb8>
 802d334:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 802d3b0 <scalbnf+0xbc>
 802d338:	ee10 3a10 	vmov	r3, s0
 802d33c:	eeb0 7a67 	vmov.f32	s14, s15
 802d340:	2b00      	cmp	r3, #0
 802d342:	bfb8      	it	lt
 802d344:	eef0 7a66 	vmovlt.f32	s15, s13
 802d348:	ee27 0a87 	vmul.f32	s0, s15, s14
 802d34c:	4770      	bx	lr
 802d34e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802d3b4 <scalbnf+0xc0>
 802d352:	ee27 0a80 	vmul.f32	s0, s15, s0
 802d356:	4770      	bx	lr
 802d358:	0dd2      	lsrs	r2, r2, #23
 802d35a:	e7e5      	b.n	802d328 <scalbnf+0x34>
 802d35c:	4410      	add	r0, r2
 802d35e:	28fe      	cmp	r0, #254	@ 0xfe
 802d360:	dce6      	bgt.n	802d330 <scalbnf+0x3c>
 802d362:	2800      	cmp	r0, #0
 802d364:	dd06      	ble.n	802d374 <scalbnf+0x80>
 802d366:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d36a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802d36e:	ee00 3a10 	vmov	s0, r3
 802d372:	4770      	bx	lr
 802d374:	f110 0f16 	cmn.w	r0, #22
 802d378:	da09      	bge.n	802d38e <scalbnf+0x9a>
 802d37a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 802d3b4 <scalbnf+0xc0>
 802d37e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 802d3b8 <scalbnf+0xc4>
 802d382:	ee10 3a10 	vmov	r3, s0
 802d386:	eeb0 7a67 	vmov.f32	s14, s15
 802d38a:	2b00      	cmp	r3, #0
 802d38c:	e7d9      	b.n	802d342 <scalbnf+0x4e>
 802d38e:	3019      	adds	r0, #25
 802d390:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d394:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802d398:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 802d3bc <scalbnf+0xc8>
 802d39c:	ee07 3a90 	vmov	s15, r3
 802d3a0:	e7d7      	b.n	802d352 <scalbnf+0x5e>
 802d3a2:	bf00      	nop
 802d3a4:	ffff3cb0 	.word	0xffff3cb0
 802d3a8:	4c000000 	.word	0x4c000000
 802d3ac:	7149f2ca 	.word	0x7149f2ca
 802d3b0:	f149f2ca 	.word	0xf149f2ca
 802d3b4:	0da24260 	.word	0x0da24260
 802d3b8:	8da24260 	.word	0x8da24260
 802d3bc:	33000000 	.word	0x33000000

0802d3c0 <__kernel_rem_pio2f>:
 802d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d3c4:	ed2d 8b04 	vpush	{d8-d9}
 802d3c8:	b0d9      	sub	sp, #356	@ 0x164
 802d3ca:	4690      	mov	r8, r2
 802d3cc:	9001      	str	r0, [sp, #4]
 802d3ce:	4ab6      	ldr	r2, [pc, #728]	@ (802d6a8 <__kernel_rem_pio2f+0x2e8>)
 802d3d0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802d3d2:	f118 0f04 	cmn.w	r8, #4
 802d3d6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802d3da:	460f      	mov	r7, r1
 802d3dc:	f103 3bff 	add.w	fp, r3, #4294967295
 802d3e0:	db26      	blt.n	802d430 <__kernel_rem_pio2f+0x70>
 802d3e2:	f1b8 0203 	subs.w	r2, r8, #3
 802d3e6:	bf48      	it	mi
 802d3e8:	f108 0204 	addmi.w	r2, r8, #4
 802d3ec:	10d2      	asrs	r2, r2, #3
 802d3ee:	1c55      	adds	r5, r2, #1
 802d3f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802d3f2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d3f6:	00e8      	lsls	r0, r5, #3
 802d3f8:	eba2 060b 	sub.w	r6, r2, fp
 802d3fc:	9002      	str	r0, [sp, #8]
 802d3fe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802d402:	eb0a 0c0b 	add.w	ip, sl, fp
 802d406:	ac1c      	add	r4, sp, #112	@ 0x70
 802d408:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802d40c:	2000      	movs	r0, #0
 802d40e:	4560      	cmp	r0, ip
 802d410:	dd10      	ble.n	802d434 <__kernel_rem_pio2f+0x74>
 802d412:	a91c      	add	r1, sp, #112	@ 0x70
 802d414:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802d418:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802d41c:	2600      	movs	r6, #0
 802d41e:	4556      	cmp	r6, sl
 802d420:	dc24      	bgt.n	802d46c <__kernel_rem_pio2f+0xac>
 802d422:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d426:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d42a:	4684      	mov	ip, r0
 802d42c:	2400      	movs	r4, #0
 802d42e:	e016      	b.n	802d45e <__kernel_rem_pio2f+0x9e>
 802d430:	2200      	movs	r2, #0
 802d432:	e7dc      	b.n	802d3ee <__kernel_rem_pio2f+0x2e>
 802d434:	42c6      	cmn	r6, r0
 802d436:	bf5d      	ittte	pl
 802d438:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802d43c:	ee07 1a90 	vmovpl	s15, r1
 802d440:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d444:	eef0 7a47 	vmovmi.f32	s15, s14
 802d448:	ece4 7a01 	vstmia	r4!, {s15}
 802d44c:	3001      	adds	r0, #1
 802d44e:	e7de      	b.n	802d40e <__kernel_rem_pio2f+0x4e>
 802d450:	ecfe 6a01 	vldmia	lr!, {s13}
 802d454:	ed3c 7a01 	vldmdb	ip!, {s14}
 802d458:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d45c:	3401      	adds	r4, #1
 802d45e:	455c      	cmp	r4, fp
 802d460:	ddf6      	ble.n	802d450 <__kernel_rem_pio2f+0x90>
 802d462:	ece9 7a01 	vstmia	r9!, {s15}
 802d466:	3601      	adds	r6, #1
 802d468:	3004      	adds	r0, #4
 802d46a:	e7d8      	b.n	802d41e <__kernel_rem_pio2f+0x5e>
 802d46c:	a908      	add	r1, sp, #32
 802d46e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802d472:	9104      	str	r1, [sp, #16]
 802d474:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802d476:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 802d6b4 <__kernel_rem_pio2f+0x2f4>
 802d47a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802d6b0 <__kernel_rem_pio2f+0x2f0>
 802d47e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802d482:	9203      	str	r2, [sp, #12]
 802d484:	4654      	mov	r4, sl
 802d486:	00a2      	lsls	r2, r4, #2
 802d488:	9205      	str	r2, [sp, #20]
 802d48a:	aa58      	add	r2, sp, #352	@ 0x160
 802d48c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802d490:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802d494:	a944      	add	r1, sp, #272	@ 0x110
 802d496:	aa08      	add	r2, sp, #32
 802d498:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802d49c:	4694      	mov	ip, r2
 802d49e:	4626      	mov	r6, r4
 802d4a0:	2e00      	cmp	r6, #0
 802d4a2:	dc4c      	bgt.n	802d53e <__kernel_rem_pio2f+0x17e>
 802d4a4:	4628      	mov	r0, r5
 802d4a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802d4aa:	f7ff ff23 	bl	802d2f4 <scalbnf>
 802d4ae:	eeb0 8a40 	vmov.f32	s16, s0
 802d4b2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802d4b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d4ba:	f000 f9e9 	bl	802d890 <floorf>
 802d4be:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802d4c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d4c6:	2d00      	cmp	r5, #0
 802d4c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802d4cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d4d0:	ee17 9a90 	vmov	r9, s15
 802d4d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d4d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 802d4dc:	dd41      	ble.n	802d562 <__kernel_rem_pio2f+0x1a2>
 802d4de:	f104 3cff 	add.w	ip, r4, #4294967295
 802d4e2:	a908      	add	r1, sp, #32
 802d4e4:	f1c5 0e08 	rsb	lr, r5, #8
 802d4e8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802d4ec:	fa46 f00e 	asr.w	r0, r6, lr
 802d4f0:	4481      	add	r9, r0
 802d4f2:	fa00 f00e 	lsl.w	r0, r0, lr
 802d4f6:	1a36      	subs	r6, r6, r0
 802d4f8:	f1c5 0007 	rsb	r0, r5, #7
 802d4fc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802d500:	4106      	asrs	r6, r0
 802d502:	2e00      	cmp	r6, #0
 802d504:	dd3c      	ble.n	802d580 <__kernel_rem_pio2f+0x1c0>
 802d506:	f04f 0e00 	mov.w	lr, #0
 802d50a:	f109 0901 	add.w	r9, r9, #1
 802d50e:	4670      	mov	r0, lr
 802d510:	4574      	cmp	r4, lr
 802d512:	dc68      	bgt.n	802d5e6 <__kernel_rem_pio2f+0x226>
 802d514:	2d00      	cmp	r5, #0
 802d516:	dd03      	ble.n	802d520 <__kernel_rem_pio2f+0x160>
 802d518:	2d01      	cmp	r5, #1
 802d51a:	d074      	beq.n	802d606 <__kernel_rem_pio2f+0x246>
 802d51c:	2d02      	cmp	r5, #2
 802d51e:	d07d      	beq.n	802d61c <__kernel_rem_pio2f+0x25c>
 802d520:	2e02      	cmp	r6, #2
 802d522:	d12d      	bne.n	802d580 <__kernel_rem_pio2f+0x1c0>
 802d524:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d528:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d52c:	b340      	cbz	r0, 802d580 <__kernel_rem_pio2f+0x1c0>
 802d52e:	4628      	mov	r0, r5
 802d530:	9306      	str	r3, [sp, #24]
 802d532:	f7ff fedf 	bl	802d2f4 <scalbnf>
 802d536:	9b06      	ldr	r3, [sp, #24]
 802d538:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d53c:	e020      	b.n	802d580 <__kernel_rem_pio2f+0x1c0>
 802d53e:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d542:	3e01      	subs	r6, #1
 802d544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d54c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d550:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d554:	ecac 0a01 	vstmia	ip!, {s0}
 802d558:	ed30 0a01 	vldmdb	r0!, {s0}
 802d55c:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d560:	e79e      	b.n	802d4a0 <__kernel_rem_pio2f+0xe0>
 802d562:	d105      	bne.n	802d570 <__kernel_rem_pio2f+0x1b0>
 802d564:	1e60      	subs	r0, r4, #1
 802d566:	a908      	add	r1, sp, #32
 802d568:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802d56c:	11f6      	asrs	r6, r6, #7
 802d56e:	e7c8      	b.n	802d502 <__kernel_rem_pio2f+0x142>
 802d570:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d574:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d57c:	da31      	bge.n	802d5e2 <__kernel_rem_pio2f+0x222>
 802d57e:	2600      	movs	r6, #0
 802d580:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d588:	f040 8098 	bne.w	802d6bc <__kernel_rem_pio2f+0x2fc>
 802d58c:	1e60      	subs	r0, r4, #1
 802d58e:	2200      	movs	r2, #0
 802d590:	4550      	cmp	r0, sl
 802d592:	da4b      	bge.n	802d62c <__kernel_rem_pio2f+0x26c>
 802d594:	2a00      	cmp	r2, #0
 802d596:	d065      	beq.n	802d664 <__kernel_rem_pio2f+0x2a4>
 802d598:	3c01      	subs	r4, #1
 802d59a:	ab08      	add	r3, sp, #32
 802d59c:	3d08      	subs	r5, #8
 802d59e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802d5a2:	2b00      	cmp	r3, #0
 802d5a4:	d0f8      	beq.n	802d598 <__kernel_rem_pio2f+0x1d8>
 802d5a6:	4628      	mov	r0, r5
 802d5a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d5ac:	f7ff fea2 	bl	802d2f4 <scalbnf>
 802d5b0:	1c63      	adds	r3, r4, #1
 802d5b2:	aa44      	add	r2, sp, #272	@ 0x110
 802d5b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802d6b4 <__kernel_rem_pio2f+0x2f4>
 802d5b8:	0099      	lsls	r1, r3, #2
 802d5ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802d5be:	4623      	mov	r3, r4
 802d5c0:	2b00      	cmp	r3, #0
 802d5c2:	f280 80a9 	bge.w	802d718 <__kernel_rem_pio2f+0x358>
 802d5c6:	4623      	mov	r3, r4
 802d5c8:	2b00      	cmp	r3, #0
 802d5ca:	f2c0 80c7 	blt.w	802d75c <__kernel_rem_pio2f+0x39c>
 802d5ce:	aa44      	add	r2, sp, #272	@ 0x110
 802d5d0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802d5d4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 802d6ac <__kernel_rem_pio2f+0x2ec>
 802d5d8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d5dc:	2000      	movs	r0, #0
 802d5de:	1ae2      	subs	r2, r4, r3
 802d5e0:	e0b1      	b.n	802d746 <__kernel_rem_pio2f+0x386>
 802d5e2:	2602      	movs	r6, #2
 802d5e4:	e78f      	b.n	802d506 <__kernel_rem_pio2f+0x146>
 802d5e6:	f852 1b04 	ldr.w	r1, [r2], #4
 802d5ea:	b948      	cbnz	r0, 802d600 <__kernel_rem_pio2f+0x240>
 802d5ec:	b121      	cbz	r1, 802d5f8 <__kernel_rem_pio2f+0x238>
 802d5ee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802d5f2:	f842 1c04 	str.w	r1, [r2, #-4]
 802d5f6:	2101      	movs	r1, #1
 802d5f8:	f10e 0e01 	add.w	lr, lr, #1
 802d5fc:	4608      	mov	r0, r1
 802d5fe:	e787      	b.n	802d510 <__kernel_rem_pio2f+0x150>
 802d600:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802d604:	e7f5      	b.n	802d5f2 <__kernel_rem_pio2f+0x232>
 802d606:	f104 3cff 	add.w	ip, r4, #4294967295
 802d60a:	aa08      	add	r2, sp, #32
 802d60c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802d614:	a908      	add	r1, sp, #32
 802d616:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802d61a:	e781      	b.n	802d520 <__kernel_rem_pio2f+0x160>
 802d61c:	f104 3cff 	add.w	ip, r4, #4294967295
 802d620:	aa08      	add	r2, sp, #32
 802d622:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d626:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802d62a:	e7f3      	b.n	802d614 <__kernel_rem_pio2f+0x254>
 802d62c:	a908      	add	r1, sp, #32
 802d62e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802d632:	3801      	subs	r0, #1
 802d634:	430a      	orrs	r2, r1
 802d636:	e7ab      	b.n	802d590 <__kernel_rem_pio2f+0x1d0>
 802d638:	3201      	adds	r2, #1
 802d63a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802d63e:	2e00      	cmp	r6, #0
 802d640:	d0fa      	beq.n	802d638 <__kernel_rem_pio2f+0x278>
 802d642:	9905      	ldr	r1, [sp, #20]
 802d644:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802d648:	eb0d 0001 	add.w	r0, sp, r1
 802d64c:	18e6      	adds	r6, r4, r3
 802d64e:	a91c      	add	r1, sp, #112	@ 0x70
 802d650:	f104 0c01 	add.w	ip, r4, #1
 802d654:	384c      	subs	r0, #76	@ 0x4c
 802d656:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802d65a:	4422      	add	r2, r4
 802d65c:	4562      	cmp	r2, ip
 802d65e:	da04      	bge.n	802d66a <__kernel_rem_pio2f+0x2aa>
 802d660:	4614      	mov	r4, r2
 802d662:	e710      	b.n	802d486 <__kernel_rem_pio2f+0xc6>
 802d664:	9804      	ldr	r0, [sp, #16]
 802d666:	2201      	movs	r2, #1
 802d668:	e7e7      	b.n	802d63a <__kernel_rem_pio2f+0x27a>
 802d66a:	9903      	ldr	r1, [sp, #12]
 802d66c:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d670:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802d674:	9105      	str	r1, [sp, #20]
 802d676:	ee07 1a90 	vmov	s15, r1
 802d67a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d67e:	2400      	movs	r4, #0
 802d680:	ece6 7a01 	vstmia	r6!, {s15}
 802d684:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d688:	46b1      	mov	r9, r6
 802d68a:	455c      	cmp	r4, fp
 802d68c:	dd04      	ble.n	802d698 <__kernel_rem_pio2f+0x2d8>
 802d68e:	ece0 7a01 	vstmia	r0!, {s15}
 802d692:	f10c 0c01 	add.w	ip, ip, #1
 802d696:	e7e1      	b.n	802d65c <__kernel_rem_pio2f+0x29c>
 802d698:	ecfe 6a01 	vldmia	lr!, {s13}
 802d69c:	ed39 7a01 	vldmdb	r9!, {s14}
 802d6a0:	3401      	adds	r4, #1
 802d6a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d6a6:	e7f0      	b.n	802d68a <__kernel_rem_pio2f+0x2ca>
 802d6a8:	08032a54 	.word	0x08032a54
 802d6ac:	08032a28 	.word	0x08032a28
 802d6b0:	43800000 	.word	0x43800000
 802d6b4:	3b800000 	.word	0x3b800000
 802d6b8:	00000000 	.word	0x00000000
 802d6bc:	9b02      	ldr	r3, [sp, #8]
 802d6be:	eeb0 0a48 	vmov.f32	s0, s16
 802d6c2:	eba3 0008 	sub.w	r0, r3, r8
 802d6c6:	f7ff fe15 	bl	802d2f4 <scalbnf>
 802d6ca:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802d6b0 <__kernel_rem_pio2f+0x2f0>
 802d6ce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802d6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d6d6:	db19      	blt.n	802d70c <__kernel_rem_pio2f+0x34c>
 802d6d8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802d6b4 <__kernel_rem_pio2f+0x2f4>
 802d6dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 802d6e0:	aa08      	add	r2, sp, #32
 802d6e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d6e6:	3508      	adds	r5, #8
 802d6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d6ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802d6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d6f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d6f8:	ee10 3a10 	vmov	r3, s0
 802d6fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d700:	ee17 3a90 	vmov	r3, s15
 802d704:	3401      	adds	r4, #1
 802d706:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d70a:	e74c      	b.n	802d5a6 <__kernel_rem_pio2f+0x1e6>
 802d70c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d710:	aa08      	add	r2, sp, #32
 802d712:	ee10 3a10 	vmov	r3, s0
 802d716:	e7f6      	b.n	802d706 <__kernel_rem_pio2f+0x346>
 802d718:	a808      	add	r0, sp, #32
 802d71a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802d71e:	9001      	str	r0, [sp, #4]
 802d720:	ee07 0a90 	vmov	s15, r0
 802d724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d728:	3b01      	subs	r3, #1
 802d72a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802d72e:	ee20 0a07 	vmul.f32	s0, s0, s14
 802d732:	ed62 7a01 	vstmdb	r2!, {s15}
 802d736:	e743      	b.n	802d5c0 <__kernel_rem_pio2f+0x200>
 802d738:	ecfc 6a01 	vldmia	ip!, {s13}
 802d73c:	ecb5 7a01 	vldmia	r5!, {s14}
 802d740:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d744:	3001      	adds	r0, #1
 802d746:	4550      	cmp	r0, sl
 802d748:	dc01      	bgt.n	802d74e <__kernel_rem_pio2f+0x38e>
 802d74a:	4290      	cmp	r0, r2
 802d74c:	ddf4      	ble.n	802d738 <__kernel_rem_pio2f+0x378>
 802d74e:	a858      	add	r0, sp, #352	@ 0x160
 802d750:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802d754:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802d758:	3b01      	subs	r3, #1
 802d75a:	e735      	b.n	802d5c8 <__kernel_rem_pio2f+0x208>
 802d75c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802d75e:	2b02      	cmp	r3, #2
 802d760:	dc09      	bgt.n	802d776 <__kernel_rem_pio2f+0x3b6>
 802d762:	2b00      	cmp	r3, #0
 802d764:	dc27      	bgt.n	802d7b6 <__kernel_rem_pio2f+0x3f6>
 802d766:	d040      	beq.n	802d7ea <__kernel_rem_pio2f+0x42a>
 802d768:	f009 0007 	and.w	r0, r9, #7
 802d76c:	b059      	add	sp, #356	@ 0x164
 802d76e:	ecbd 8b04 	vpop	{d8-d9}
 802d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d776:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802d778:	2b03      	cmp	r3, #3
 802d77a:	d1f5      	bne.n	802d768 <__kernel_rem_pio2f+0x3a8>
 802d77c:	aa30      	add	r2, sp, #192	@ 0xc0
 802d77e:	1f0b      	subs	r3, r1, #4
 802d780:	4413      	add	r3, r2
 802d782:	461a      	mov	r2, r3
 802d784:	4620      	mov	r0, r4
 802d786:	2800      	cmp	r0, #0
 802d788:	dc50      	bgt.n	802d82c <__kernel_rem_pio2f+0x46c>
 802d78a:	4622      	mov	r2, r4
 802d78c:	2a01      	cmp	r2, #1
 802d78e:	dc5d      	bgt.n	802d84c <__kernel_rem_pio2f+0x48c>
 802d790:	ab30      	add	r3, sp, #192	@ 0xc0
 802d792:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d796:	440b      	add	r3, r1
 802d798:	2c01      	cmp	r4, #1
 802d79a:	dc67      	bgt.n	802d86c <__kernel_rem_pio2f+0x4ac>
 802d79c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802d7a0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802d7a4:	2e00      	cmp	r6, #0
 802d7a6:	d167      	bne.n	802d878 <__kernel_rem_pio2f+0x4b8>
 802d7a8:	edc7 6a00 	vstr	s13, [r7]
 802d7ac:	ed87 7a01 	vstr	s14, [r7, #4]
 802d7b0:	edc7 7a02 	vstr	s15, [r7, #8]
 802d7b4:	e7d8      	b.n	802d768 <__kernel_rem_pio2f+0x3a8>
 802d7b6:	ab30      	add	r3, sp, #192	@ 0xc0
 802d7b8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d7bc:	440b      	add	r3, r1
 802d7be:	4622      	mov	r2, r4
 802d7c0:	2a00      	cmp	r2, #0
 802d7c2:	da24      	bge.n	802d80e <__kernel_rem_pio2f+0x44e>
 802d7c4:	b34e      	cbz	r6, 802d81a <__kernel_rem_pio2f+0x45a>
 802d7c6:	eef1 7a47 	vneg.f32	s15, s14
 802d7ca:	edc7 7a00 	vstr	s15, [r7]
 802d7ce:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802d7d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d7d6:	aa31      	add	r2, sp, #196	@ 0xc4
 802d7d8:	2301      	movs	r3, #1
 802d7da:	429c      	cmp	r4, r3
 802d7dc:	da20      	bge.n	802d820 <__kernel_rem_pio2f+0x460>
 802d7de:	b10e      	cbz	r6, 802d7e4 <__kernel_rem_pio2f+0x424>
 802d7e0:	eef1 7a67 	vneg.f32	s15, s15
 802d7e4:	edc7 7a01 	vstr	s15, [r7, #4]
 802d7e8:	e7be      	b.n	802d768 <__kernel_rem_pio2f+0x3a8>
 802d7ea:	ab30      	add	r3, sp, #192	@ 0xc0
 802d7ec:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802d6b8 <__kernel_rem_pio2f+0x2f8>
 802d7f0:	440b      	add	r3, r1
 802d7f2:	2c00      	cmp	r4, #0
 802d7f4:	da05      	bge.n	802d802 <__kernel_rem_pio2f+0x442>
 802d7f6:	b10e      	cbz	r6, 802d7fc <__kernel_rem_pio2f+0x43c>
 802d7f8:	eef1 7a67 	vneg.f32	s15, s15
 802d7fc:	edc7 7a00 	vstr	s15, [r7]
 802d800:	e7b2      	b.n	802d768 <__kernel_rem_pio2f+0x3a8>
 802d802:	ed33 7a01 	vldmdb	r3!, {s14}
 802d806:	3c01      	subs	r4, #1
 802d808:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d80c:	e7f1      	b.n	802d7f2 <__kernel_rem_pio2f+0x432>
 802d80e:	ed73 7a01 	vldmdb	r3!, {s15}
 802d812:	3a01      	subs	r2, #1
 802d814:	ee37 7a27 	vadd.f32	s14, s14, s15
 802d818:	e7d2      	b.n	802d7c0 <__kernel_rem_pio2f+0x400>
 802d81a:	eef0 7a47 	vmov.f32	s15, s14
 802d81e:	e7d4      	b.n	802d7ca <__kernel_rem_pio2f+0x40a>
 802d820:	ecb2 7a01 	vldmia	r2!, {s14}
 802d824:	3301      	adds	r3, #1
 802d826:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d82a:	e7d6      	b.n	802d7da <__kernel_rem_pio2f+0x41a>
 802d82c:	ed72 7a01 	vldmdb	r2!, {s15}
 802d830:	edd2 6a01 	vldr	s13, [r2, #4]
 802d834:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d838:	3801      	subs	r0, #1
 802d83a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d83e:	ed82 7a00 	vstr	s14, [r2]
 802d842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d846:	edc2 7a01 	vstr	s15, [r2, #4]
 802d84a:	e79c      	b.n	802d786 <__kernel_rem_pio2f+0x3c6>
 802d84c:	ed73 7a01 	vldmdb	r3!, {s15}
 802d850:	edd3 6a01 	vldr	s13, [r3, #4]
 802d854:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d858:	3a01      	subs	r2, #1
 802d85a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d85e:	ed83 7a00 	vstr	s14, [r3]
 802d862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d866:	edc3 7a01 	vstr	s15, [r3, #4]
 802d86a:	e78f      	b.n	802d78c <__kernel_rem_pio2f+0x3cc>
 802d86c:	ed33 7a01 	vldmdb	r3!, {s14}
 802d870:	3c01      	subs	r4, #1
 802d872:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d876:	e78f      	b.n	802d798 <__kernel_rem_pio2f+0x3d8>
 802d878:	eef1 6a66 	vneg.f32	s13, s13
 802d87c:	eeb1 7a47 	vneg.f32	s14, s14
 802d880:	edc7 6a00 	vstr	s13, [r7]
 802d884:	ed87 7a01 	vstr	s14, [r7, #4]
 802d888:	eef1 7a67 	vneg.f32	s15, s15
 802d88c:	e790      	b.n	802d7b0 <__kernel_rem_pio2f+0x3f0>
 802d88e:	bf00      	nop

0802d890 <floorf>:
 802d890:	ee10 3a10 	vmov	r3, s0
 802d894:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d898:	3a7f      	subs	r2, #127	@ 0x7f
 802d89a:	2a16      	cmp	r2, #22
 802d89c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802d8a0:	dc2b      	bgt.n	802d8fa <floorf+0x6a>
 802d8a2:	2a00      	cmp	r2, #0
 802d8a4:	da12      	bge.n	802d8cc <floorf+0x3c>
 802d8a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802d90c <floorf+0x7c>
 802d8aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d8ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d8b6:	dd06      	ble.n	802d8c6 <floorf+0x36>
 802d8b8:	2b00      	cmp	r3, #0
 802d8ba:	da24      	bge.n	802d906 <floorf+0x76>
 802d8bc:	2900      	cmp	r1, #0
 802d8be:	4b14      	ldr	r3, [pc, #80]	@ (802d910 <floorf+0x80>)
 802d8c0:	bf08      	it	eq
 802d8c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 802d8c6:	ee00 3a10 	vmov	s0, r3
 802d8ca:	4770      	bx	lr
 802d8cc:	4911      	ldr	r1, [pc, #68]	@ (802d914 <floorf+0x84>)
 802d8ce:	4111      	asrs	r1, r2
 802d8d0:	420b      	tst	r3, r1
 802d8d2:	d0fa      	beq.n	802d8ca <floorf+0x3a>
 802d8d4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802d90c <floorf+0x7c>
 802d8d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d8dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d8e4:	ddef      	ble.n	802d8c6 <floorf+0x36>
 802d8e6:	2b00      	cmp	r3, #0
 802d8e8:	bfbe      	ittt	lt
 802d8ea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 802d8ee:	fa40 f202 	asrlt.w	r2, r0, r2
 802d8f2:	189b      	addlt	r3, r3, r2
 802d8f4:	ea23 0301 	bic.w	r3, r3, r1
 802d8f8:	e7e5      	b.n	802d8c6 <floorf+0x36>
 802d8fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802d8fe:	d3e4      	bcc.n	802d8ca <floorf+0x3a>
 802d900:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d904:	4770      	bx	lr
 802d906:	2300      	movs	r3, #0
 802d908:	e7dd      	b.n	802d8c6 <floorf+0x36>
 802d90a:	bf00      	nop
 802d90c:	7149f2ca 	.word	0x7149f2ca
 802d910:	bf800000 	.word	0xbf800000
 802d914:	007fffff 	.word	0x007fffff

0802d918 <abort>:
 802d918:	b508      	push	{r3, lr}
 802d91a:	2006      	movs	r0, #6
 802d91c:	f000 fb40 	bl	802dfa0 <raise>
 802d920:	2001      	movs	r0, #1
 802d922:	f7d5 fa6b 	bl	8002dfc <_exit>
	...

0802d928 <__assert_func>:
 802d928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802d92a:	4614      	mov	r4, r2
 802d92c:	461a      	mov	r2, r3
 802d92e:	4b09      	ldr	r3, [pc, #36]	@ (802d954 <__assert_func+0x2c>)
 802d930:	681b      	ldr	r3, [r3, #0]
 802d932:	4605      	mov	r5, r0
 802d934:	68d8      	ldr	r0, [r3, #12]
 802d936:	b14c      	cbz	r4, 802d94c <__assert_func+0x24>
 802d938:	4b07      	ldr	r3, [pc, #28]	@ (802d958 <__assert_func+0x30>)
 802d93a:	9100      	str	r1, [sp, #0]
 802d93c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802d940:	4906      	ldr	r1, [pc, #24]	@ (802d95c <__assert_func+0x34>)
 802d942:	462b      	mov	r3, r5
 802d944:	f000 f984 	bl	802dc50 <fiprintf>
 802d948:	f7ff ffe6 	bl	802d918 <abort>
 802d94c:	4b04      	ldr	r3, [pc, #16]	@ (802d960 <__assert_func+0x38>)
 802d94e:	461c      	mov	r4, r3
 802d950:	e7f3      	b.n	802d93a <__assert_func+0x12>
 802d952:	bf00      	nop
 802d954:	200000a4 	.word	0x200000a4
 802d958:	08030f73 	.word	0x08030f73
 802d95c:	08030f80 	.word	0x08030f80
 802d960:	08030fae 	.word	0x08030fae

0802d964 <atexit>:
 802d964:	2300      	movs	r3, #0
 802d966:	4601      	mov	r1, r0
 802d968:	461a      	mov	r2, r3
 802d96a:	4618      	mov	r0, r3
 802d96c:	f000 bc24 	b.w	802e1b8 <__register_exitproc>

0802d970 <malloc>:
 802d970:	4b02      	ldr	r3, [pc, #8]	@ (802d97c <malloc+0xc>)
 802d972:	4601      	mov	r1, r0
 802d974:	6818      	ldr	r0, [r3, #0]
 802d976:	f000 b82d 	b.w	802d9d4 <_malloc_r>
 802d97a:	bf00      	nop
 802d97c:	200000a4 	.word	0x200000a4

0802d980 <free>:
 802d980:	4b02      	ldr	r3, [pc, #8]	@ (802d98c <free+0xc>)
 802d982:	4601      	mov	r1, r0
 802d984:	6818      	ldr	r0, [r3, #0]
 802d986:	f000 bc73 	b.w	802e270 <_free_r>
 802d98a:	bf00      	nop
 802d98c:	200000a4 	.word	0x200000a4

0802d990 <sbrk_aligned>:
 802d990:	b570      	push	{r4, r5, r6, lr}
 802d992:	4e0f      	ldr	r6, [pc, #60]	@ (802d9d0 <sbrk_aligned+0x40>)
 802d994:	460c      	mov	r4, r1
 802d996:	6831      	ldr	r1, [r6, #0]
 802d998:	4605      	mov	r5, r0
 802d99a:	b911      	cbnz	r1, 802d9a2 <sbrk_aligned+0x12>
 802d99c:	f000 fbae 	bl	802e0fc <_sbrk_r>
 802d9a0:	6030      	str	r0, [r6, #0]
 802d9a2:	4621      	mov	r1, r4
 802d9a4:	4628      	mov	r0, r5
 802d9a6:	f000 fba9 	bl	802e0fc <_sbrk_r>
 802d9aa:	1c43      	adds	r3, r0, #1
 802d9ac:	d103      	bne.n	802d9b6 <sbrk_aligned+0x26>
 802d9ae:	f04f 34ff 	mov.w	r4, #4294967295
 802d9b2:	4620      	mov	r0, r4
 802d9b4:	bd70      	pop	{r4, r5, r6, pc}
 802d9b6:	1cc4      	adds	r4, r0, #3
 802d9b8:	f024 0403 	bic.w	r4, r4, #3
 802d9bc:	42a0      	cmp	r0, r4
 802d9be:	d0f8      	beq.n	802d9b2 <sbrk_aligned+0x22>
 802d9c0:	1a21      	subs	r1, r4, r0
 802d9c2:	4628      	mov	r0, r5
 802d9c4:	f000 fb9a 	bl	802e0fc <_sbrk_r>
 802d9c8:	3001      	adds	r0, #1
 802d9ca:	d1f2      	bne.n	802d9b2 <sbrk_aligned+0x22>
 802d9cc:	e7ef      	b.n	802d9ae <sbrk_aligned+0x1e>
 802d9ce:	bf00      	nop
 802d9d0:	20012d20 	.word	0x20012d20

0802d9d4 <_malloc_r>:
 802d9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d9d8:	1ccd      	adds	r5, r1, #3
 802d9da:	f025 0503 	bic.w	r5, r5, #3
 802d9de:	3508      	adds	r5, #8
 802d9e0:	2d0c      	cmp	r5, #12
 802d9e2:	bf38      	it	cc
 802d9e4:	250c      	movcc	r5, #12
 802d9e6:	2d00      	cmp	r5, #0
 802d9e8:	4606      	mov	r6, r0
 802d9ea:	db01      	blt.n	802d9f0 <_malloc_r+0x1c>
 802d9ec:	42a9      	cmp	r1, r5
 802d9ee:	d904      	bls.n	802d9fa <_malloc_r+0x26>
 802d9f0:	230c      	movs	r3, #12
 802d9f2:	6033      	str	r3, [r6, #0]
 802d9f4:	2000      	movs	r0, #0
 802d9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d9fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802dad0 <_malloc_r+0xfc>
 802d9fe:	f000 f869 	bl	802dad4 <__malloc_lock>
 802da02:	f8d8 3000 	ldr.w	r3, [r8]
 802da06:	461c      	mov	r4, r3
 802da08:	bb44      	cbnz	r4, 802da5c <_malloc_r+0x88>
 802da0a:	4629      	mov	r1, r5
 802da0c:	4630      	mov	r0, r6
 802da0e:	f7ff ffbf 	bl	802d990 <sbrk_aligned>
 802da12:	1c43      	adds	r3, r0, #1
 802da14:	4604      	mov	r4, r0
 802da16:	d158      	bne.n	802daca <_malloc_r+0xf6>
 802da18:	f8d8 4000 	ldr.w	r4, [r8]
 802da1c:	4627      	mov	r7, r4
 802da1e:	2f00      	cmp	r7, #0
 802da20:	d143      	bne.n	802daaa <_malloc_r+0xd6>
 802da22:	2c00      	cmp	r4, #0
 802da24:	d04b      	beq.n	802dabe <_malloc_r+0xea>
 802da26:	6823      	ldr	r3, [r4, #0]
 802da28:	4639      	mov	r1, r7
 802da2a:	4630      	mov	r0, r6
 802da2c:	eb04 0903 	add.w	r9, r4, r3
 802da30:	f000 fb64 	bl	802e0fc <_sbrk_r>
 802da34:	4581      	cmp	r9, r0
 802da36:	d142      	bne.n	802dabe <_malloc_r+0xea>
 802da38:	6821      	ldr	r1, [r4, #0]
 802da3a:	1a6d      	subs	r5, r5, r1
 802da3c:	4629      	mov	r1, r5
 802da3e:	4630      	mov	r0, r6
 802da40:	f7ff ffa6 	bl	802d990 <sbrk_aligned>
 802da44:	3001      	adds	r0, #1
 802da46:	d03a      	beq.n	802dabe <_malloc_r+0xea>
 802da48:	6823      	ldr	r3, [r4, #0]
 802da4a:	442b      	add	r3, r5
 802da4c:	6023      	str	r3, [r4, #0]
 802da4e:	f8d8 3000 	ldr.w	r3, [r8]
 802da52:	685a      	ldr	r2, [r3, #4]
 802da54:	bb62      	cbnz	r2, 802dab0 <_malloc_r+0xdc>
 802da56:	f8c8 7000 	str.w	r7, [r8]
 802da5a:	e00f      	b.n	802da7c <_malloc_r+0xa8>
 802da5c:	6822      	ldr	r2, [r4, #0]
 802da5e:	1b52      	subs	r2, r2, r5
 802da60:	d420      	bmi.n	802daa4 <_malloc_r+0xd0>
 802da62:	2a0b      	cmp	r2, #11
 802da64:	d917      	bls.n	802da96 <_malloc_r+0xc2>
 802da66:	1961      	adds	r1, r4, r5
 802da68:	42a3      	cmp	r3, r4
 802da6a:	6025      	str	r5, [r4, #0]
 802da6c:	bf18      	it	ne
 802da6e:	6059      	strne	r1, [r3, #4]
 802da70:	6863      	ldr	r3, [r4, #4]
 802da72:	bf08      	it	eq
 802da74:	f8c8 1000 	streq.w	r1, [r8]
 802da78:	5162      	str	r2, [r4, r5]
 802da7a:	604b      	str	r3, [r1, #4]
 802da7c:	4630      	mov	r0, r6
 802da7e:	f000 f82f 	bl	802dae0 <__malloc_unlock>
 802da82:	f104 000b 	add.w	r0, r4, #11
 802da86:	1d23      	adds	r3, r4, #4
 802da88:	f020 0007 	bic.w	r0, r0, #7
 802da8c:	1ac2      	subs	r2, r0, r3
 802da8e:	bf1c      	itt	ne
 802da90:	1a1b      	subne	r3, r3, r0
 802da92:	50a3      	strne	r3, [r4, r2]
 802da94:	e7af      	b.n	802d9f6 <_malloc_r+0x22>
 802da96:	6862      	ldr	r2, [r4, #4]
 802da98:	42a3      	cmp	r3, r4
 802da9a:	bf0c      	ite	eq
 802da9c:	f8c8 2000 	streq.w	r2, [r8]
 802daa0:	605a      	strne	r2, [r3, #4]
 802daa2:	e7eb      	b.n	802da7c <_malloc_r+0xa8>
 802daa4:	4623      	mov	r3, r4
 802daa6:	6864      	ldr	r4, [r4, #4]
 802daa8:	e7ae      	b.n	802da08 <_malloc_r+0x34>
 802daaa:	463c      	mov	r4, r7
 802daac:	687f      	ldr	r7, [r7, #4]
 802daae:	e7b6      	b.n	802da1e <_malloc_r+0x4a>
 802dab0:	461a      	mov	r2, r3
 802dab2:	685b      	ldr	r3, [r3, #4]
 802dab4:	42a3      	cmp	r3, r4
 802dab6:	d1fb      	bne.n	802dab0 <_malloc_r+0xdc>
 802dab8:	2300      	movs	r3, #0
 802daba:	6053      	str	r3, [r2, #4]
 802dabc:	e7de      	b.n	802da7c <_malloc_r+0xa8>
 802dabe:	230c      	movs	r3, #12
 802dac0:	6033      	str	r3, [r6, #0]
 802dac2:	4630      	mov	r0, r6
 802dac4:	f000 f80c 	bl	802dae0 <__malloc_unlock>
 802dac8:	e794      	b.n	802d9f4 <_malloc_r+0x20>
 802daca:	6005      	str	r5, [r0, #0]
 802dacc:	e7d6      	b.n	802da7c <_malloc_r+0xa8>
 802dace:	bf00      	nop
 802dad0:	20012d24 	.word	0x20012d24

0802dad4 <__malloc_lock>:
 802dad4:	4801      	ldr	r0, [pc, #4]	@ (802dadc <__malloc_lock+0x8>)
 802dad6:	f000 bb5e 	b.w	802e196 <__retarget_lock_acquire_recursive>
 802dada:	bf00      	nop
 802dadc:	20012e68 	.word	0x20012e68

0802dae0 <__malloc_unlock>:
 802dae0:	4801      	ldr	r0, [pc, #4]	@ (802dae8 <__malloc_unlock+0x8>)
 802dae2:	f000 bb59 	b.w	802e198 <__retarget_lock_release_recursive>
 802dae6:	bf00      	nop
 802dae8:	20012e68 	.word	0x20012e68

0802daec <__cxa_atexit>:
 802daec:	b510      	push	{r4, lr}
 802daee:	4604      	mov	r4, r0
 802daf0:	4804      	ldr	r0, [pc, #16]	@ (802db04 <__cxa_atexit+0x18>)
 802daf2:	4613      	mov	r3, r2
 802daf4:	b120      	cbz	r0, 802db00 <__cxa_atexit+0x14>
 802daf6:	460a      	mov	r2, r1
 802daf8:	2002      	movs	r0, #2
 802dafa:	4621      	mov	r1, r4
 802dafc:	f000 fb5c 	bl	802e1b8 <__register_exitproc>
 802db00:	bd10      	pop	{r4, pc}
 802db02:	bf00      	nop
 802db04:	0802e1b9 	.word	0x0802e1b9

0802db08 <std>:
 802db08:	2300      	movs	r3, #0
 802db0a:	b510      	push	{r4, lr}
 802db0c:	4604      	mov	r4, r0
 802db0e:	e9c0 3300 	strd	r3, r3, [r0]
 802db12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802db16:	6083      	str	r3, [r0, #8]
 802db18:	8181      	strh	r1, [r0, #12]
 802db1a:	6643      	str	r3, [r0, #100]	@ 0x64
 802db1c:	81c2      	strh	r2, [r0, #14]
 802db1e:	6183      	str	r3, [r0, #24]
 802db20:	4619      	mov	r1, r3
 802db22:	2208      	movs	r2, #8
 802db24:	305c      	adds	r0, #92	@ 0x5c
 802db26:	f000 fa0b 	bl	802df40 <memset>
 802db2a:	4b0d      	ldr	r3, [pc, #52]	@ (802db60 <std+0x58>)
 802db2c:	6263      	str	r3, [r4, #36]	@ 0x24
 802db2e:	4b0d      	ldr	r3, [pc, #52]	@ (802db64 <std+0x5c>)
 802db30:	62a3      	str	r3, [r4, #40]	@ 0x28
 802db32:	4b0d      	ldr	r3, [pc, #52]	@ (802db68 <std+0x60>)
 802db34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802db36:	4b0d      	ldr	r3, [pc, #52]	@ (802db6c <std+0x64>)
 802db38:	6323      	str	r3, [r4, #48]	@ 0x30
 802db3a:	4b0d      	ldr	r3, [pc, #52]	@ (802db70 <std+0x68>)
 802db3c:	6224      	str	r4, [r4, #32]
 802db3e:	429c      	cmp	r4, r3
 802db40:	d006      	beq.n	802db50 <std+0x48>
 802db42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802db46:	4294      	cmp	r4, r2
 802db48:	d002      	beq.n	802db50 <std+0x48>
 802db4a:	33d0      	adds	r3, #208	@ 0xd0
 802db4c:	429c      	cmp	r4, r3
 802db4e:	d105      	bne.n	802db5c <std+0x54>
 802db50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802db54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802db58:	f000 bb1c 	b.w	802e194 <__retarget_lock_init_recursive>
 802db5c:	bd10      	pop	{r4, pc}
 802db5e:	bf00      	nop
 802db60:	0802dd91 	.word	0x0802dd91
 802db64:	0802ddb3 	.word	0x0802ddb3
 802db68:	0802ddeb 	.word	0x0802ddeb
 802db6c:	0802de0f 	.word	0x0802de0f
 802db70:	20012d28 	.word	0x20012d28

0802db74 <stdio_exit_handler>:
 802db74:	4a02      	ldr	r2, [pc, #8]	@ (802db80 <stdio_exit_handler+0xc>)
 802db76:	4903      	ldr	r1, [pc, #12]	@ (802db84 <stdio_exit_handler+0x10>)
 802db78:	4803      	ldr	r0, [pc, #12]	@ (802db88 <stdio_exit_handler+0x14>)
 802db7a:	f000 b87b 	b.w	802dc74 <_fwalk_sglue>
 802db7e:	bf00      	nop
 802db80:	20000098 	.word	0x20000098
 802db84:	0802e9a9 	.word	0x0802e9a9
 802db88:	200000a8 	.word	0x200000a8

0802db8c <cleanup_stdio>:
 802db8c:	6841      	ldr	r1, [r0, #4]
 802db8e:	4b0c      	ldr	r3, [pc, #48]	@ (802dbc0 <cleanup_stdio+0x34>)
 802db90:	4299      	cmp	r1, r3
 802db92:	b510      	push	{r4, lr}
 802db94:	4604      	mov	r4, r0
 802db96:	d001      	beq.n	802db9c <cleanup_stdio+0x10>
 802db98:	f000 ff06 	bl	802e9a8 <_fflush_r>
 802db9c:	68a1      	ldr	r1, [r4, #8]
 802db9e:	4b09      	ldr	r3, [pc, #36]	@ (802dbc4 <cleanup_stdio+0x38>)
 802dba0:	4299      	cmp	r1, r3
 802dba2:	d002      	beq.n	802dbaa <cleanup_stdio+0x1e>
 802dba4:	4620      	mov	r0, r4
 802dba6:	f000 feff 	bl	802e9a8 <_fflush_r>
 802dbaa:	68e1      	ldr	r1, [r4, #12]
 802dbac:	4b06      	ldr	r3, [pc, #24]	@ (802dbc8 <cleanup_stdio+0x3c>)
 802dbae:	4299      	cmp	r1, r3
 802dbb0:	d004      	beq.n	802dbbc <cleanup_stdio+0x30>
 802dbb2:	4620      	mov	r0, r4
 802dbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dbb8:	f000 bef6 	b.w	802e9a8 <_fflush_r>
 802dbbc:	bd10      	pop	{r4, pc}
 802dbbe:	bf00      	nop
 802dbc0:	20012d28 	.word	0x20012d28
 802dbc4:	20012d90 	.word	0x20012d90
 802dbc8:	20012df8 	.word	0x20012df8

0802dbcc <global_stdio_init.part.0>:
 802dbcc:	b510      	push	{r4, lr}
 802dbce:	4b0b      	ldr	r3, [pc, #44]	@ (802dbfc <global_stdio_init.part.0+0x30>)
 802dbd0:	4c0b      	ldr	r4, [pc, #44]	@ (802dc00 <global_stdio_init.part.0+0x34>)
 802dbd2:	4a0c      	ldr	r2, [pc, #48]	@ (802dc04 <global_stdio_init.part.0+0x38>)
 802dbd4:	601a      	str	r2, [r3, #0]
 802dbd6:	4620      	mov	r0, r4
 802dbd8:	2200      	movs	r2, #0
 802dbda:	2104      	movs	r1, #4
 802dbdc:	f7ff ff94 	bl	802db08 <std>
 802dbe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802dbe4:	2201      	movs	r2, #1
 802dbe6:	2109      	movs	r1, #9
 802dbe8:	f7ff ff8e 	bl	802db08 <std>
 802dbec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802dbf0:	2202      	movs	r2, #2
 802dbf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dbf6:	2112      	movs	r1, #18
 802dbf8:	f7ff bf86 	b.w	802db08 <std>
 802dbfc:	20012e60 	.word	0x20012e60
 802dc00:	20012d28 	.word	0x20012d28
 802dc04:	0802db75 	.word	0x0802db75

0802dc08 <__sfp_lock_acquire>:
 802dc08:	4801      	ldr	r0, [pc, #4]	@ (802dc10 <__sfp_lock_acquire+0x8>)
 802dc0a:	f000 bac4 	b.w	802e196 <__retarget_lock_acquire_recursive>
 802dc0e:	bf00      	nop
 802dc10:	20012e6a 	.word	0x20012e6a

0802dc14 <__sfp_lock_release>:
 802dc14:	4801      	ldr	r0, [pc, #4]	@ (802dc1c <__sfp_lock_release+0x8>)
 802dc16:	f000 babf 	b.w	802e198 <__retarget_lock_release_recursive>
 802dc1a:	bf00      	nop
 802dc1c:	20012e6a 	.word	0x20012e6a

0802dc20 <__sinit>:
 802dc20:	b510      	push	{r4, lr}
 802dc22:	4604      	mov	r4, r0
 802dc24:	f7ff fff0 	bl	802dc08 <__sfp_lock_acquire>
 802dc28:	6a23      	ldr	r3, [r4, #32]
 802dc2a:	b11b      	cbz	r3, 802dc34 <__sinit+0x14>
 802dc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dc30:	f7ff bff0 	b.w	802dc14 <__sfp_lock_release>
 802dc34:	4b04      	ldr	r3, [pc, #16]	@ (802dc48 <__sinit+0x28>)
 802dc36:	6223      	str	r3, [r4, #32]
 802dc38:	4b04      	ldr	r3, [pc, #16]	@ (802dc4c <__sinit+0x2c>)
 802dc3a:	681b      	ldr	r3, [r3, #0]
 802dc3c:	2b00      	cmp	r3, #0
 802dc3e:	d1f5      	bne.n	802dc2c <__sinit+0xc>
 802dc40:	f7ff ffc4 	bl	802dbcc <global_stdio_init.part.0>
 802dc44:	e7f2      	b.n	802dc2c <__sinit+0xc>
 802dc46:	bf00      	nop
 802dc48:	0802db8d 	.word	0x0802db8d
 802dc4c:	20012e60 	.word	0x20012e60

0802dc50 <fiprintf>:
 802dc50:	b40e      	push	{r1, r2, r3}
 802dc52:	b503      	push	{r0, r1, lr}
 802dc54:	4601      	mov	r1, r0
 802dc56:	ab03      	add	r3, sp, #12
 802dc58:	4805      	ldr	r0, [pc, #20]	@ (802dc70 <fiprintf+0x20>)
 802dc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 802dc5e:	6800      	ldr	r0, [r0, #0]
 802dc60:	9301      	str	r3, [sp, #4]
 802dc62:	f000 fb79 	bl	802e358 <_vfiprintf_r>
 802dc66:	b002      	add	sp, #8
 802dc68:	f85d eb04 	ldr.w	lr, [sp], #4
 802dc6c:	b003      	add	sp, #12
 802dc6e:	4770      	bx	lr
 802dc70:	200000a4 	.word	0x200000a4

0802dc74 <_fwalk_sglue>:
 802dc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dc78:	4607      	mov	r7, r0
 802dc7a:	4688      	mov	r8, r1
 802dc7c:	4614      	mov	r4, r2
 802dc7e:	2600      	movs	r6, #0
 802dc80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802dc84:	f1b9 0901 	subs.w	r9, r9, #1
 802dc88:	d505      	bpl.n	802dc96 <_fwalk_sglue+0x22>
 802dc8a:	6824      	ldr	r4, [r4, #0]
 802dc8c:	2c00      	cmp	r4, #0
 802dc8e:	d1f7      	bne.n	802dc80 <_fwalk_sglue+0xc>
 802dc90:	4630      	mov	r0, r6
 802dc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dc96:	89ab      	ldrh	r3, [r5, #12]
 802dc98:	2b01      	cmp	r3, #1
 802dc9a:	d907      	bls.n	802dcac <_fwalk_sglue+0x38>
 802dc9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802dca0:	3301      	adds	r3, #1
 802dca2:	d003      	beq.n	802dcac <_fwalk_sglue+0x38>
 802dca4:	4629      	mov	r1, r5
 802dca6:	4638      	mov	r0, r7
 802dca8:	47c0      	blx	r8
 802dcaa:	4306      	orrs	r6, r0
 802dcac:	3568      	adds	r5, #104	@ 0x68
 802dcae:	e7e9      	b.n	802dc84 <_fwalk_sglue+0x10>

0802dcb0 <iprintf>:
 802dcb0:	b40f      	push	{r0, r1, r2, r3}
 802dcb2:	b507      	push	{r0, r1, r2, lr}
 802dcb4:	4906      	ldr	r1, [pc, #24]	@ (802dcd0 <iprintf+0x20>)
 802dcb6:	ab04      	add	r3, sp, #16
 802dcb8:	6808      	ldr	r0, [r1, #0]
 802dcba:	f853 2b04 	ldr.w	r2, [r3], #4
 802dcbe:	6881      	ldr	r1, [r0, #8]
 802dcc0:	9301      	str	r3, [sp, #4]
 802dcc2:	f000 fb49 	bl	802e358 <_vfiprintf_r>
 802dcc6:	b003      	add	sp, #12
 802dcc8:	f85d eb04 	ldr.w	lr, [sp], #4
 802dccc:	b004      	add	sp, #16
 802dcce:	4770      	bx	lr
 802dcd0:	200000a4 	.word	0x200000a4

0802dcd4 <_puts_r>:
 802dcd4:	6a03      	ldr	r3, [r0, #32]
 802dcd6:	b570      	push	{r4, r5, r6, lr}
 802dcd8:	6884      	ldr	r4, [r0, #8]
 802dcda:	4605      	mov	r5, r0
 802dcdc:	460e      	mov	r6, r1
 802dcde:	b90b      	cbnz	r3, 802dce4 <_puts_r+0x10>
 802dce0:	f7ff ff9e 	bl	802dc20 <__sinit>
 802dce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802dce6:	07db      	lsls	r3, r3, #31
 802dce8:	d405      	bmi.n	802dcf6 <_puts_r+0x22>
 802dcea:	89a3      	ldrh	r3, [r4, #12]
 802dcec:	0598      	lsls	r0, r3, #22
 802dcee:	d402      	bmi.n	802dcf6 <_puts_r+0x22>
 802dcf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802dcf2:	f000 fa50 	bl	802e196 <__retarget_lock_acquire_recursive>
 802dcf6:	89a3      	ldrh	r3, [r4, #12]
 802dcf8:	0719      	lsls	r1, r3, #28
 802dcfa:	d502      	bpl.n	802dd02 <_puts_r+0x2e>
 802dcfc:	6923      	ldr	r3, [r4, #16]
 802dcfe:	2b00      	cmp	r3, #0
 802dd00:	d135      	bne.n	802dd6e <_puts_r+0x9a>
 802dd02:	4621      	mov	r1, r4
 802dd04:	4628      	mov	r0, r5
 802dd06:	f000 f8c5 	bl	802de94 <__swsetup_r>
 802dd0a:	b380      	cbz	r0, 802dd6e <_puts_r+0x9a>
 802dd0c:	f04f 35ff 	mov.w	r5, #4294967295
 802dd10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802dd12:	07da      	lsls	r2, r3, #31
 802dd14:	d405      	bmi.n	802dd22 <_puts_r+0x4e>
 802dd16:	89a3      	ldrh	r3, [r4, #12]
 802dd18:	059b      	lsls	r3, r3, #22
 802dd1a:	d402      	bmi.n	802dd22 <_puts_r+0x4e>
 802dd1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802dd1e:	f000 fa3b 	bl	802e198 <__retarget_lock_release_recursive>
 802dd22:	4628      	mov	r0, r5
 802dd24:	bd70      	pop	{r4, r5, r6, pc}
 802dd26:	2b00      	cmp	r3, #0
 802dd28:	da04      	bge.n	802dd34 <_puts_r+0x60>
 802dd2a:	69a2      	ldr	r2, [r4, #24]
 802dd2c:	429a      	cmp	r2, r3
 802dd2e:	dc17      	bgt.n	802dd60 <_puts_r+0x8c>
 802dd30:	290a      	cmp	r1, #10
 802dd32:	d015      	beq.n	802dd60 <_puts_r+0x8c>
 802dd34:	6823      	ldr	r3, [r4, #0]
 802dd36:	1c5a      	adds	r2, r3, #1
 802dd38:	6022      	str	r2, [r4, #0]
 802dd3a:	7019      	strb	r1, [r3, #0]
 802dd3c:	68a3      	ldr	r3, [r4, #8]
 802dd3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802dd42:	3b01      	subs	r3, #1
 802dd44:	60a3      	str	r3, [r4, #8]
 802dd46:	2900      	cmp	r1, #0
 802dd48:	d1ed      	bne.n	802dd26 <_puts_r+0x52>
 802dd4a:	2b00      	cmp	r3, #0
 802dd4c:	da11      	bge.n	802dd72 <_puts_r+0x9e>
 802dd4e:	4622      	mov	r2, r4
 802dd50:	210a      	movs	r1, #10
 802dd52:	4628      	mov	r0, r5
 802dd54:	f000 f85f 	bl	802de16 <__swbuf_r>
 802dd58:	3001      	adds	r0, #1
 802dd5a:	d0d7      	beq.n	802dd0c <_puts_r+0x38>
 802dd5c:	250a      	movs	r5, #10
 802dd5e:	e7d7      	b.n	802dd10 <_puts_r+0x3c>
 802dd60:	4622      	mov	r2, r4
 802dd62:	4628      	mov	r0, r5
 802dd64:	f000 f857 	bl	802de16 <__swbuf_r>
 802dd68:	3001      	adds	r0, #1
 802dd6a:	d1e7      	bne.n	802dd3c <_puts_r+0x68>
 802dd6c:	e7ce      	b.n	802dd0c <_puts_r+0x38>
 802dd6e:	3e01      	subs	r6, #1
 802dd70:	e7e4      	b.n	802dd3c <_puts_r+0x68>
 802dd72:	6823      	ldr	r3, [r4, #0]
 802dd74:	1c5a      	adds	r2, r3, #1
 802dd76:	6022      	str	r2, [r4, #0]
 802dd78:	220a      	movs	r2, #10
 802dd7a:	701a      	strb	r2, [r3, #0]
 802dd7c:	e7ee      	b.n	802dd5c <_puts_r+0x88>
	...

0802dd80 <puts>:
 802dd80:	4b02      	ldr	r3, [pc, #8]	@ (802dd8c <puts+0xc>)
 802dd82:	4601      	mov	r1, r0
 802dd84:	6818      	ldr	r0, [r3, #0]
 802dd86:	f7ff bfa5 	b.w	802dcd4 <_puts_r>
 802dd8a:	bf00      	nop
 802dd8c:	200000a4 	.word	0x200000a4

0802dd90 <__sread>:
 802dd90:	b510      	push	{r4, lr}
 802dd92:	460c      	mov	r4, r1
 802dd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dd98:	f000 f98a 	bl	802e0b0 <_read_r>
 802dd9c:	2800      	cmp	r0, #0
 802dd9e:	bfab      	itete	ge
 802dda0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802dda2:	89a3      	ldrhlt	r3, [r4, #12]
 802dda4:	181b      	addge	r3, r3, r0
 802dda6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802ddaa:	bfac      	ite	ge
 802ddac:	6563      	strge	r3, [r4, #84]	@ 0x54
 802ddae:	81a3      	strhlt	r3, [r4, #12]
 802ddb0:	bd10      	pop	{r4, pc}

0802ddb2 <__swrite>:
 802ddb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ddb6:	461f      	mov	r7, r3
 802ddb8:	898b      	ldrh	r3, [r1, #12]
 802ddba:	05db      	lsls	r3, r3, #23
 802ddbc:	4605      	mov	r5, r0
 802ddbe:	460c      	mov	r4, r1
 802ddc0:	4616      	mov	r6, r2
 802ddc2:	d505      	bpl.n	802ddd0 <__swrite+0x1e>
 802ddc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ddc8:	2302      	movs	r3, #2
 802ddca:	2200      	movs	r2, #0
 802ddcc:	f000 f95e 	bl	802e08c <_lseek_r>
 802ddd0:	89a3      	ldrh	r3, [r4, #12]
 802ddd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ddd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802ddda:	81a3      	strh	r3, [r4, #12]
 802dddc:	4632      	mov	r2, r6
 802ddde:	463b      	mov	r3, r7
 802dde0:	4628      	mov	r0, r5
 802dde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802dde6:	f000 b999 	b.w	802e11c <_write_r>

0802ddea <__sseek>:
 802ddea:	b510      	push	{r4, lr}
 802ddec:	460c      	mov	r4, r1
 802ddee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ddf2:	f000 f94b 	bl	802e08c <_lseek_r>
 802ddf6:	1c43      	adds	r3, r0, #1
 802ddf8:	89a3      	ldrh	r3, [r4, #12]
 802ddfa:	bf15      	itete	ne
 802ddfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 802ddfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802de02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802de06:	81a3      	strheq	r3, [r4, #12]
 802de08:	bf18      	it	ne
 802de0a:	81a3      	strhne	r3, [r4, #12]
 802de0c:	bd10      	pop	{r4, pc}

0802de0e <__sclose>:
 802de0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802de12:	f000 b8cd 	b.w	802dfb0 <_close_r>

0802de16 <__swbuf_r>:
 802de16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802de18:	460e      	mov	r6, r1
 802de1a:	4614      	mov	r4, r2
 802de1c:	4605      	mov	r5, r0
 802de1e:	b118      	cbz	r0, 802de28 <__swbuf_r+0x12>
 802de20:	6a03      	ldr	r3, [r0, #32]
 802de22:	b90b      	cbnz	r3, 802de28 <__swbuf_r+0x12>
 802de24:	f7ff fefc 	bl	802dc20 <__sinit>
 802de28:	69a3      	ldr	r3, [r4, #24]
 802de2a:	60a3      	str	r3, [r4, #8]
 802de2c:	89a3      	ldrh	r3, [r4, #12]
 802de2e:	071a      	lsls	r2, r3, #28
 802de30:	d501      	bpl.n	802de36 <__swbuf_r+0x20>
 802de32:	6923      	ldr	r3, [r4, #16]
 802de34:	b943      	cbnz	r3, 802de48 <__swbuf_r+0x32>
 802de36:	4621      	mov	r1, r4
 802de38:	4628      	mov	r0, r5
 802de3a:	f000 f82b 	bl	802de94 <__swsetup_r>
 802de3e:	b118      	cbz	r0, 802de48 <__swbuf_r+0x32>
 802de40:	f04f 37ff 	mov.w	r7, #4294967295
 802de44:	4638      	mov	r0, r7
 802de46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802de48:	6823      	ldr	r3, [r4, #0]
 802de4a:	6922      	ldr	r2, [r4, #16]
 802de4c:	1a98      	subs	r0, r3, r2
 802de4e:	6963      	ldr	r3, [r4, #20]
 802de50:	b2f6      	uxtb	r6, r6
 802de52:	4283      	cmp	r3, r0
 802de54:	4637      	mov	r7, r6
 802de56:	dc05      	bgt.n	802de64 <__swbuf_r+0x4e>
 802de58:	4621      	mov	r1, r4
 802de5a:	4628      	mov	r0, r5
 802de5c:	f000 fda4 	bl	802e9a8 <_fflush_r>
 802de60:	2800      	cmp	r0, #0
 802de62:	d1ed      	bne.n	802de40 <__swbuf_r+0x2a>
 802de64:	68a3      	ldr	r3, [r4, #8]
 802de66:	3b01      	subs	r3, #1
 802de68:	60a3      	str	r3, [r4, #8]
 802de6a:	6823      	ldr	r3, [r4, #0]
 802de6c:	1c5a      	adds	r2, r3, #1
 802de6e:	6022      	str	r2, [r4, #0]
 802de70:	701e      	strb	r6, [r3, #0]
 802de72:	6962      	ldr	r2, [r4, #20]
 802de74:	1c43      	adds	r3, r0, #1
 802de76:	429a      	cmp	r2, r3
 802de78:	d004      	beq.n	802de84 <__swbuf_r+0x6e>
 802de7a:	89a3      	ldrh	r3, [r4, #12]
 802de7c:	07db      	lsls	r3, r3, #31
 802de7e:	d5e1      	bpl.n	802de44 <__swbuf_r+0x2e>
 802de80:	2e0a      	cmp	r6, #10
 802de82:	d1df      	bne.n	802de44 <__swbuf_r+0x2e>
 802de84:	4621      	mov	r1, r4
 802de86:	4628      	mov	r0, r5
 802de88:	f000 fd8e 	bl	802e9a8 <_fflush_r>
 802de8c:	2800      	cmp	r0, #0
 802de8e:	d0d9      	beq.n	802de44 <__swbuf_r+0x2e>
 802de90:	e7d6      	b.n	802de40 <__swbuf_r+0x2a>
	...

0802de94 <__swsetup_r>:
 802de94:	b538      	push	{r3, r4, r5, lr}
 802de96:	4b29      	ldr	r3, [pc, #164]	@ (802df3c <__swsetup_r+0xa8>)
 802de98:	4605      	mov	r5, r0
 802de9a:	6818      	ldr	r0, [r3, #0]
 802de9c:	460c      	mov	r4, r1
 802de9e:	b118      	cbz	r0, 802dea8 <__swsetup_r+0x14>
 802dea0:	6a03      	ldr	r3, [r0, #32]
 802dea2:	b90b      	cbnz	r3, 802dea8 <__swsetup_r+0x14>
 802dea4:	f7ff febc 	bl	802dc20 <__sinit>
 802dea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802deac:	0719      	lsls	r1, r3, #28
 802deae:	d422      	bmi.n	802def6 <__swsetup_r+0x62>
 802deb0:	06da      	lsls	r2, r3, #27
 802deb2:	d407      	bmi.n	802dec4 <__swsetup_r+0x30>
 802deb4:	2209      	movs	r2, #9
 802deb6:	602a      	str	r2, [r5, #0]
 802deb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802debc:	81a3      	strh	r3, [r4, #12]
 802debe:	f04f 30ff 	mov.w	r0, #4294967295
 802dec2:	e033      	b.n	802df2c <__swsetup_r+0x98>
 802dec4:	0758      	lsls	r0, r3, #29
 802dec6:	d512      	bpl.n	802deee <__swsetup_r+0x5a>
 802dec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802deca:	b141      	cbz	r1, 802dede <__swsetup_r+0x4a>
 802decc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ded0:	4299      	cmp	r1, r3
 802ded2:	d002      	beq.n	802deda <__swsetup_r+0x46>
 802ded4:	4628      	mov	r0, r5
 802ded6:	f000 f9cb 	bl	802e270 <_free_r>
 802deda:	2300      	movs	r3, #0
 802dedc:	6363      	str	r3, [r4, #52]	@ 0x34
 802dede:	89a3      	ldrh	r3, [r4, #12]
 802dee0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802dee4:	81a3      	strh	r3, [r4, #12]
 802dee6:	2300      	movs	r3, #0
 802dee8:	6063      	str	r3, [r4, #4]
 802deea:	6923      	ldr	r3, [r4, #16]
 802deec:	6023      	str	r3, [r4, #0]
 802deee:	89a3      	ldrh	r3, [r4, #12]
 802def0:	f043 0308 	orr.w	r3, r3, #8
 802def4:	81a3      	strh	r3, [r4, #12]
 802def6:	6923      	ldr	r3, [r4, #16]
 802def8:	b94b      	cbnz	r3, 802df0e <__swsetup_r+0x7a>
 802defa:	89a3      	ldrh	r3, [r4, #12]
 802defc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802df00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802df04:	d003      	beq.n	802df0e <__swsetup_r+0x7a>
 802df06:	4621      	mov	r1, r4
 802df08:	4628      	mov	r0, r5
 802df0a:	f000 fd9b 	bl	802ea44 <__smakebuf_r>
 802df0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802df12:	f013 0201 	ands.w	r2, r3, #1
 802df16:	d00a      	beq.n	802df2e <__swsetup_r+0x9a>
 802df18:	2200      	movs	r2, #0
 802df1a:	60a2      	str	r2, [r4, #8]
 802df1c:	6962      	ldr	r2, [r4, #20]
 802df1e:	4252      	negs	r2, r2
 802df20:	61a2      	str	r2, [r4, #24]
 802df22:	6922      	ldr	r2, [r4, #16]
 802df24:	b942      	cbnz	r2, 802df38 <__swsetup_r+0xa4>
 802df26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802df2a:	d1c5      	bne.n	802deb8 <__swsetup_r+0x24>
 802df2c:	bd38      	pop	{r3, r4, r5, pc}
 802df2e:	0799      	lsls	r1, r3, #30
 802df30:	bf58      	it	pl
 802df32:	6962      	ldrpl	r2, [r4, #20]
 802df34:	60a2      	str	r2, [r4, #8]
 802df36:	e7f4      	b.n	802df22 <__swsetup_r+0x8e>
 802df38:	2000      	movs	r0, #0
 802df3a:	e7f7      	b.n	802df2c <__swsetup_r+0x98>
 802df3c:	200000a4 	.word	0x200000a4

0802df40 <memset>:
 802df40:	4402      	add	r2, r0
 802df42:	4603      	mov	r3, r0
 802df44:	4293      	cmp	r3, r2
 802df46:	d100      	bne.n	802df4a <memset+0xa>
 802df48:	4770      	bx	lr
 802df4a:	f803 1b01 	strb.w	r1, [r3], #1
 802df4e:	e7f9      	b.n	802df44 <memset+0x4>

0802df50 <_raise_r>:
 802df50:	291f      	cmp	r1, #31
 802df52:	b538      	push	{r3, r4, r5, lr}
 802df54:	4605      	mov	r5, r0
 802df56:	460c      	mov	r4, r1
 802df58:	d904      	bls.n	802df64 <_raise_r+0x14>
 802df5a:	2316      	movs	r3, #22
 802df5c:	6003      	str	r3, [r0, #0]
 802df5e:	f04f 30ff 	mov.w	r0, #4294967295
 802df62:	bd38      	pop	{r3, r4, r5, pc}
 802df64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802df66:	b112      	cbz	r2, 802df6e <_raise_r+0x1e>
 802df68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802df6c:	b94b      	cbnz	r3, 802df82 <_raise_r+0x32>
 802df6e:	4628      	mov	r0, r5
 802df70:	f000 f8c2 	bl	802e0f8 <_getpid_r>
 802df74:	4622      	mov	r2, r4
 802df76:	4601      	mov	r1, r0
 802df78:	4628      	mov	r0, r5
 802df7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802df7e:	f000 b8a9 	b.w	802e0d4 <_kill_r>
 802df82:	2b01      	cmp	r3, #1
 802df84:	d00a      	beq.n	802df9c <_raise_r+0x4c>
 802df86:	1c59      	adds	r1, r3, #1
 802df88:	d103      	bne.n	802df92 <_raise_r+0x42>
 802df8a:	2316      	movs	r3, #22
 802df8c:	6003      	str	r3, [r0, #0]
 802df8e:	2001      	movs	r0, #1
 802df90:	e7e7      	b.n	802df62 <_raise_r+0x12>
 802df92:	2100      	movs	r1, #0
 802df94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802df98:	4620      	mov	r0, r4
 802df9a:	4798      	blx	r3
 802df9c:	2000      	movs	r0, #0
 802df9e:	e7e0      	b.n	802df62 <_raise_r+0x12>

0802dfa0 <raise>:
 802dfa0:	4b02      	ldr	r3, [pc, #8]	@ (802dfac <raise+0xc>)
 802dfa2:	4601      	mov	r1, r0
 802dfa4:	6818      	ldr	r0, [r3, #0]
 802dfa6:	f7ff bfd3 	b.w	802df50 <_raise_r>
 802dfaa:	bf00      	nop
 802dfac:	200000a4 	.word	0x200000a4

0802dfb0 <_close_r>:
 802dfb0:	b538      	push	{r3, r4, r5, lr}
 802dfb2:	4d06      	ldr	r5, [pc, #24]	@ (802dfcc <_close_r+0x1c>)
 802dfb4:	2300      	movs	r3, #0
 802dfb6:	4604      	mov	r4, r0
 802dfb8:	4608      	mov	r0, r1
 802dfba:	602b      	str	r3, [r5, #0]
 802dfbc:	f7d4 ff62 	bl	8002e84 <_close>
 802dfc0:	1c43      	adds	r3, r0, #1
 802dfc2:	d102      	bne.n	802dfca <_close_r+0x1a>
 802dfc4:	682b      	ldr	r3, [r5, #0]
 802dfc6:	b103      	cbz	r3, 802dfca <_close_r+0x1a>
 802dfc8:	6023      	str	r3, [r4, #0]
 802dfca:	bd38      	pop	{r3, r4, r5, pc}
 802dfcc:	20012e64 	.word	0x20012e64

0802dfd0 <_reclaim_reent>:
 802dfd0:	4b2d      	ldr	r3, [pc, #180]	@ (802e088 <_reclaim_reent+0xb8>)
 802dfd2:	681b      	ldr	r3, [r3, #0]
 802dfd4:	4283      	cmp	r3, r0
 802dfd6:	b570      	push	{r4, r5, r6, lr}
 802dfd8:	4604      	mov	r4, r0
 802dfda:	d053      	beq.n	802e084 <_reclaim_reent+0xb4>
 802dfdc:	69c3      	ldr	r3, [r0, #28]
 802dfde:	b31b      	cbz	r3, 802e028 <_reclaim_reent+0x58>
 802dfe0:	68db      	ldr	r3, [r3, #12]
 802dfe2:	b163      	cbz	r3, 802dffe <_reclaim_reent+0x2e>
 802dfe4:	2500      	movs	r5, #0
 802dfe6:	69e3      	ldr	r3, [r4, #28]
 802dfe8:	68db      	ldr	r3, [r3, #12]
 802dfea:	5959      	ldr	r1, [r3, r5]
 802dfec:	b9b1      	cbnz	r1, 802e01c <_reclaim_reent+0x4c>
 802dfee:	3504      	adds	r5, #4
 802dff0:	2d80      	cmp	r5, #128	@ 0x80
 802dff2:	d1f8      	bne.n	802dfe6 <_reclaim_reent+0x16>
 802dff4:	69e3      	ldr	r3, [r4, #28]
 802dff6:	4620      	mov	r0, r4
 802dff8:	68d9      	ldr	r1, [r3, #12]
 802dffa:	f000 f939 	bl	802e270 <_free_r>
 802dffe:	69e3      	ldr	r3, [r4, #28]
 802e000:	6819      	ldr	r1, [r3, #0]
 802e002:	b111      	cbz	r1, 802e00a <_reclaim_reent+0x3a>
 802e004:	4620      	mov	r0, r4
 802e006:	f000 f933 	bl	802e270 <_free_r>
 802e00a:	69e3      	ldr	r3, [r4, #28]
 802e00c:	689d      	ldr	r5, [r3, #8]
 802e00e:	b15d      	cbz	r5, 802e028 <_reclaim_reent+0x58>
 802e010:	4629      	mov	r1, r5
 802e012:	4620      	mov	r0, r4
 802e014:	682d      	ldr	r5, [r5, #0]
 802e016:	f000 f92b 	bl	802e270 <_free_r>
 802e01a:	e7f8      	b.n	802e00e <_reclaim_reent+0x3e>
 802e01c:	680e      	ldr	r6, [r1, #0]
 802e01e:	4620      	mov	r0, r4
 802e020:	f000 f926 	bl	802e270 <_free_r>
 802e024:	4631      	mov	r1, r6
 802e026:	e7e1      	b.n	802dfec <_reclaim_reent+0x1c>
 802e028:	6961      	ldr	r1, [r4, #20]
 802e02a:	b111      	cbz	r1, 802e032 <_reclaim_reent+0x62>
 802e02c:	4620      	mov	r0, r4
 802e02e:	f000 f91f 	bl	802e270 <_free_r>
 802e032:	69e1      	ldr	r1, [r4, #28]
 802e034:	b111      	cbz	r1, 802e03c <_reclaim_reent+0x6c>
 802e036:	4620      	mov	r0, r4
 802e038:	f000 f91a 	bl	802e270 <_free_r>
 802e03c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802e03e:	b111      	cbz	r1, 802e046 <_reclaim_reent+0x76>
 802e040:	4620      	mov	r0, r4
 802e042:	f000 f915 	bl	802e270 <_free_r>
 802e046:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802e048:	b111      	cbz	r1, 802e050 <_reclaim_reent+0x80>
 802e04a:	4620      	mov	r0, r4
 802e04c:	f000 f910 	bl	802e270 <_free_r>
 802e050:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802e052:	b111      	cbz	r1, 802e05a <_reclaim_reent+0x8a>
 802e054:	4620      	mov	r0, r4
 802e056:	f000 f90b 	bl	802e270 <_free_r>
 802e05a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802e05c:	b111      	cbz	r1, 802e064 <_reclaim_reent+0x94>
 802e05e:	4620      	mov	r0, r4
 802e060:	f000 f906 	bl	802e270 <_free_r>
 802e064:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802e066:	b111      	cbz	r1, 802e06e <_reclaim_reent+0x9e>
 802e068:	4620      	mov	r0, r4
 802e06a:	f000 f901 	bl	802e270 <_free_r>
 802e06e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802e070:	b111      	cbz	r1, 802e078 <_reclaim_reent+0xa8>
 802e072:	4620      	mov	r0, r4
 802e074:	f000 f8fc 	bl	802e270 <_free_r>
 802e078:	6a23      	ldr	r3, [r4, #32]
 802e07a:	b11b      	cbz	r3, 802e084 <_reclaim_reent+0xb4>
 802e07c:	4620      	mov	r0, r4
 802e07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e082:	4718      	bx	r3
 802e084:	bd70      	pop	{r4, r5, r6, pc}
 802e086:	bf00      	nop
 802e088:	200000a4 	.word	0x200000a4

0802e08c <_lseek_r>:
 802e08c:	b538      	push	{r3, r4, r5, lr}
 802e08e:	4d07      	ldr	r5, [pc, #28]	@ (802e0ac <_lseek_r+0x20>)
 802e090:	4604      	mov	r4, r0
 802e092:	4608      	mov	r0, r1
 802e094:	4611      	mov	r1, r2
 802e096:	2200      	movs	r2, #0
 802e098:	602a      	str	r2, [r5, #0]
 802e09a:	461a      	mov	r2, r3
 802e09c:	f7d4 ff19 	bl	8002ed2 <_lseek>
 802e0a0:	1c43      	adds	r3, r0, #1
 802e0a2:	d102      	bne.n	802e0aa <_lseek_r+0x1e>
 802e0a4:	682b      	ldr	r3, [r5, #0]
 802e0a6:	b103      	cbz	r3, 802e0aa <_lseek_r+0x1e>
 802e0a8:	6023      	str	r3, [r4, #0]
 802e0aa:	bd38      	pop	{r3, r4, r5, pc}
 802e0ac:	20012e64 	.word	0x20012e64

0802e0b0 <_read_r>:
 802e0b0:	b538      	push	{r3, r4, r5, lr}
 802e0b2:	4d07      	ldr	r5, [pc, #28]	@ (802e0d0 <_read_r+0x20>)
 802e0b4:	4604      	mov	r4, r0
 802e0b6:	4608      	mov	r0, r1
 802e0b8:	4611      	mov	r1, r2
 802e0ba:	2200      	movs	r2, #0
 802e0bc:	602a      	str	r2, [r5, #0]
 802e0be:	461a      	mov	r2, r3
 802e0c0:	f7d4 fea7 	bl	8002e12 <_read>
 802e0c4:	1c43      	adds	r3, r0, #1
 802e0c6:	d102      	bne.n	802e0ce <_read_r+0x1e>
 802e0c8:	682b      	ldr	r3, [r5, #0]
 802e0ca:	b103      	cbz	r3, 802e0ce <_read_r+0x1e>
 802e0cc:	6023      	str	r3, [r4, #0]
 802e0ce:	bd38      	pop	{r3, r4, r5, pc}
 802e0d0:	20012e64 	.word	0x20012e64

0802e0d4 <_kill_r>:
 802e0d4:	b538      	push	{r3, r4, r5, lr}
 802e0d6:	4d07      	ldr	r5, [pc, #28]	@ (802e0f4 <_kill_r+0x20>)
 802e0d8:	2300      	movs	r3, #0
 802e0da:	4604      	mov	r4, r0
 802e0dc:	4608      	mov	r0, r1
 802e0de:	4611      	mov	r1, r2
 802e0e0:	602b      	str	r3, [r5, #0]
 802e0e2:	f7d4 fe7b 	bl	8002ddc <_kill>
 802e0e6:	1c43      	adds	r3, r0, #1
 802e0e8:	d102      	bne.n	802e0f0 <_kill_r+0x1c>
 802e0ea:	682b      	ldr	r3, [r5, #0]
 802e0ec:	b103      	cbz	r3, 802e0f0 <_kill_r+0x1c>
 802e0ee:	6023      	str	r3, [r4, #0]
 802e0f0:	bd38      	pop	{r3, r4, r5, pc}
 802e0f2:	bf00      	nop
 802e0f4:	20012e64 	.word	0x20012e64

0802e0f8 <_getpid_r>:
 802e0f8:	f7d4 be68 	b.w	8002dcc <_getpid>

0802e0fc <_sbrk_r>:
 802e0fc:	b538      	push	{r3, r4, r5, lr}
 802e0fe:	4d06      	ldr	r5, [pc, #24]	@ (802e118 <_sbrk_r+0x1c>)
 802e100:	2300      	movs	r3, #0
 802e102:	4604      	mov	r4, r0
 802e104:	4608      	mov	r0, r1
 802e106:	602b      	str	r3, [r5, #0]
 802e108:	f7d4 fef0 	bl	8002eec <_sbrk>
 802e10c:	1c43      	adds	r3, r0, #1
 802e10e:	d102      	bne.n	802e116 <_sbrk_r+0x1a>
 802e110:	682b      	ldr	r3, [r5, #0]
 802e112:	b103      	cbz	r3, 802e116 <_sbrk_r+0x1a>
 802e114:	6023      	str	r3, [r4, #0]
 802e116:	bd38      	pop	{r3, r4, r5, pc}
 802e118:	20012e64 	.word	0x20012e64

0802e11c <_write_r>:
 802e11c:	b538      	push	{r3, r4, r5, lr}
 802e11e:	4d07      	ldr	r5, [pc, #28]	@ (802e13c <_write_r+0x20>)
 802e120:	4604      	mov	r4, r0
 802e122:	4608      	mov	r0, r1
 802e124:	4611      	mov	r1, r2
 802e126:	2200      	movs	r2, #0
 802e128:	602a      	str	r2, [r5, #0]
 802e12a:	461a      	mov	r2, r3
 802e12c:	f7d4 fe8e 	bl	8002e4c <_write>
 802e130:	1c43      	adds	r3, r0, #1
 802e132:	d102      	bne.n	802e13a <_write_r+0x1e>
 802e134:	682b      	ldr	r3, [r5, #0]
 802e136:	b103      	cbz	r3, 802e13a <_write_r+0x1e>
 802e138:	6023      	str	r3, [r4, #0]
 802e13a:	bd38      	pop	{r3, r4, r5, pc}
 802e13c:	20012e64 	.word	0x20012e64

0802e140 <__errno>:
 802e140:	4b01      	ldr	r3, [pc, #4]	@ (802e148 <__errno+0x8>)
 802e142:	6818      	ldr	r0, [r3, #0]
 802e144:	4770      	bx	lr
 802e146:	bf00      	nop
 802e148:	200000a4 	.word	0x200000a4

0802e14c <__libc_init_array>:
 802e14c:	b570      	push	{r4, r5, r6, lr}
 802e14e:	4d0d      	ldr	r5, [pc, #52]	@ (802e184 <__libc_init_array+0x38>)
 802e150:	4c0d      	ldr	r4, [pc, #52]	@ (802e188 <__libc_init_array+0x3c>)
 802e152:	1b64      	subs	r4, r4, r5
 802e154:	10a4      	asrs	r4, r4, #2
 802e156:	2600      	movs	r6, #0
 802e158:	42a6      	cmp	r6, r4
 802e15a:	d109      	bne.n	802e170 <__libc_init_array+0x24>
 802e15c:	4d0b      	ldr	r5, [pc, #44]	@ (802e18c <__libc_init_array+0x40>)
 802e15e:	4c0c      	ldr	r4, [pc, #48]	@ (802e190 <__libc_init_array+0x44>)
 802e160:	f000 fcce 	bl	802eb00 <_init>
 802e164:	1b64      	subs	r4, r4, r5
 802e166:	10a4      	asrs	r4, r4, #2
 802e168:	2600      	movs	r6, #0
 802e16a:	42a6      	cmp	r6, r4
 802e16c:	d105      	bne.n	802e17a <__libc_init_array+0x2e>
 802e16e:	bd70      	pop	{r4, r5, r6, pc}
 802e170:	f855 3b04 	ldr.w	r3, [r5], #4
 802e174:	4798      	blx	r3
 802e176:	3601      	adds	r6, #1
 802e178:	e7ee      	b.n	802e158 <__libc_init_array+0xc>
 802e17a:	f855 3b04 	ldr.w	r3, [r5], #4
 802e17e:	4798      	blx	r3
 802e180:	3601      	adds	r6, #1
 802e182:	e7f2      	b.n	802e16a <__libc_init_array+0x1e>
 802e184:	08032a88 	.word	0x08032a88
 802e188:	08032a88 	.word	0x08032a88
 802e18c:	08032a88 	.word	0x08032a88
 802e190:	08032a9c 	.word	0x08032a9c

0802e194 <__retarget_lock_init_recursive>:
 802e194:	4770      	bx	lr

0802e196 <__retarget_lock_acquire_recursive>:
 802e196:	4770      	bx	lr

0802e198 <__retarget_lock_release_recursive>:
 802e198:	4770      	bx	lr

0802e19a <memcpy>:
 802e19a:	440a      	add	r2, r1
 802e19c:	4291      	cmp	r1, r2
 802e19e:	f100 33ff 	add.w	r3, r0, #4294967295
 802e1a2:	d100      	bne.n	802e1a6 <memcpy+0xc>
 802e1a4:	4770      	bx	lr
 802e1a6:	b510      	push	{r4, lr}
 802e1a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e1ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e1b0:	4291      	cmp	r1, r2
 802e1b2:	d1f9      	bne.n	802e1a8 <memcpy+0xe>
 802e1b4:	bd10      	pop	{r4, pc}
	...

0802e1b8 <__register_exitproc>:
 802e1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e1bc:	4d27      	ldr	r5, [pc, #156]	@ (802e25c <__register_exitproc+0xa4>)
 802e1be:	4607      	mov	r7, r0
 802e1c0:	6828      	ldr	r0, [r5, #0]
 802e1c2:	4691      	mov	r9, r2
 802e1c4:	460e      	mov	r6, r1
 802e1c6:	4698      	mov	r8, r3
 802e1c8:	f7ff ffe5 	bl	802e196 <__retarget_lock_acquire_recursive>
 802e1cc:	4a24      	ldr	r2, [pc, #144]	@ (802e260 <__register_exitproc+0xa8>)
 802e1ce:	6814      	ldr	r4, [r2, #0]
 802e1d0:	b93c      	cbnz	r4, 802e1e2 <__register_exitproc+0x2a>
 802e1d2:	4b24      	ldr	r3, [pc, #144]	@ (802e264 <__register_exitproc+0xac>)
 802e1d4:	6013      	str	r3, [r2, #0]
 802e1d6:	4a24      	ldr	r2, [pc, #144]	@ (802e268 <__register_exitproc+0xb0>)
 802e1d8:	b112      	cbz	r2, 802e1e0 <__register_exitproc+0x28>
 802e1da:	6812      	ldr	r2, [r2, #0]
 802e1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802e1e0:	4c20      	ldr	r4, [pc, #128]	@ (802e264 <__register_exitproc+0xac>)
 802e1e2:	6863      	ldr	r3, [r4, #4]
 802e1e4:	2b1f      	cmp	r3, #31
 802e1e6:	dd06      	ble.n	802e1f6 <__register_exitproc+0x3e>
 802e1e8:	6828      	ldr	r0, [r5, #0]
 802e1ea:	f7ff ffd5 	bl	802e198 <__retarget_lock_release_recursive>
 802e1ee:	f04f 30ff 	mov.w	r0, #4294967295
 802e1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e1f6:	b32f      	cbz	r7, 802e244 <__register_exitproc+0x8c>
 802e1f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802e1fc:	b968      	cbnz	r0, 802e21a <__register_exitproc+0x62>
 802e1fe:	4b1b      	ldr	r3, [pc, #108]	@ (802e26c <__register_exitproc+0xb4>)
 802e200:	2b00      	cmp	r3, #0
 802e202:	d0f1      	beq.n	802e1e8 <__register_exitproc+0x30>
 802e204:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802e208:	f7ff fbb2 	bl	802d970 <malloc>
 802e20c:	2800      	cmp	r0, #0
 802e20e:	d0eb      	beq.n	802e1e8 <__register_exitproc+0x30>
 802e210:	2300      	movs	r3, #0
 802e212:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802e216:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802e21a:	6863      	ldr	r3, [r4, #4]
 802e21c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802e220:	2201      	movs	r2, #1
 802e222:	409a      	lsls	r2, r3
 802e224:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802e228:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802e22c:	4313      	orrs	r3, r2
 802e22e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802e232:	2f02      	cmp	r7, #2
 802e234:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802e238:	bf02      	ittt	eq
 802e23a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802e23e:	4313      	orreq	r3, r2
 802e240:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802e244:	6863      	ldr	r3, [r4, #4]
 802e246:	6828      	ldr	r0, [r5, #0]
 802e248:	1c5a      	adds	r2, r3, #1
 802e24a:	3302      	adds	r3, #2
 802e24c:	6062      	str	r2, [r4, #4]
 802e24e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802e252:	f7ff ffa1 	bl	802e198 <__retarget_lock_release_recursive>
 802e256:	2000      	movs	r0, #0
 802e258:	e7cb      	b.n	802e1f2 <__register_exitproc+0x3a>
 802e25a:	bf00      	nop
 802e25c:	200000f4 	.word	0x200000f4
 802e260:	20012ef8 	.word	0x20012ef8
 802e264:	20012e6c 	.word	0x20012e6c
 802e268:	08032a60 	.word	0x08032a60
 802e26c:	0802d971 	.word	0x0802d971

0802e270 <_free_r>:
 802e270:	b538      	push	{r3, r4, r5, lr}
 802e272:	4605      	mov	r5, r0
 802e274:	2900      	cmp	r1, #0
 802e276:	d041      	beq.n	802e2fc <_free_r+0x8c>
 802e278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e27c:	1f0c      	subs	r4, r1, #4
 802e27e:	2b00      	cmp	r3, #0
 802e280:	bfb8      	it	lt
 802e282:	18e4      	addlt	r4, r4, r3
 802e284:	f7ff fc26 	bl	802dad4 <__malloc_lock>
 802e288:	4a1d      	ldr	r2, [pc, #116]	@ (802e300 <_free_r+0x90>)
 802e28a:	6813      	ldr	r3, [r2, #0]
 802e28c:	b933      	cbnz	r3, 802e29c <_free_r+0x2c>
 802e28e:	6063      	str	r3, [r4, #4]
 802e290:	6014      	str	r4, [r2, #0]
 802e292:	4628      	mov	r0, r5
 802e294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e298:	f7ff bc22 	b.w	802dae0 <__malloc_unlock>
 802e29c:	42a3      	cmp	r3, r4
 802e29e:	d908      	bls.n	802e2b2 <_free_r+0x42>
 802e2a0:	6820      	ldr	r0, [r4, #0]
 802e2a2:	1821      	adds	r1, r4, r0
 802e2a4:	428b      	cmp	r3, r1
 802e2a6:	bf01      	itttt	eq
 802e2a8:	6819      	ldreq	r1, [r3, #0]
 802e2aa:	685b      	ldreq	r3, [r3, #4]
 802e2ac:	1809      	addeq	r1, r1, r0
 802e2ae:	6021      	streq	r1, [r4, #0]
 802e2b0:	e7ed      	b.n	802e28e <_free_r+0x1e>
 802e2b2:	461a      	mov	r2, r3
 802e2b4:	685b      	ldr	r3, [r3, #4]
 802e2b6:	b10b      	cbz	r3, 802e2bc <_free_r+0x4c>
 802e2b8:	42a3      	cmp	r3, r4
 802e2ba:	d9fa      	bls.n	802e2b2 <_free_r+0x42>
 802e2bc:	6811      	ldr	r1, [r2, #0]
 802e2be:	1850      	adds	r0, r2, r1
 802e2c0:	42a0      	cmp	r0, r4
 802e2c2:	d10b      	bne.n	802e2dc <_free_r+0x6c>
 802e2c4:	6820      	ldr	r0, [r4, #0]
 802e2c6:	4401      	add	r1, r0
 802e2c8:	1850      	adds	r0, r2, r1
 802e2ca:	4283      	cmp	r3, r0
 802e2cc:	6011      	str	r1, [r2, #0]
 802e2ce:	d1e0      	bne.n	802e292 <_free_r+0x22>
 802e2d0:	6818      	ldr	r0, [r3, #0]
 802e2d2:	685b      	ldr	r3, [r3, #4]
 802e2d4:	6053      	str	r3, [r2, #4]
 802e2d6:	4408      	add	r0, r1
 802e2d8:	6010      	str	r0, [r2, #0]
 802e2da:	e7da      	b.n	802e292 <_free_r+0x22>
 802e2dc:	d902      	bls.n	802e2e4 <_free_r+0x74>
 802e2de:	230c      	movs	r3, #12
 802e2e0:	602b      	str	r3, [r5, #0]
 802e2e2:	e7d6      	b.n	802e292 <_free_r+0x22>
 802e2e4:	6820      	ldr	r0, [r4, #0]
 802e2e6:	1821      	adds	r1, r4, r0
 802e2e8:	428b      	cmp	r3, r1
 802e2ea:	bf04      	itt	eq
 802e2ec:	6819      	ldreq	r1, [r3, #0]
 802e2ee:	685b      	ldreq	r3, [r3, #4]
 802e2f0:	6063      	str	r3, [r4, #4]
 802e2f2:	bf04      	itt	eq
 802e2f4:	1809      	addeq	r1, r1, r0
 802e2f6:	6021      	streq	r1, [r4, #0]
 802e2f8:	6054      	str	r4, [r2, #4]
 802e2fa:	e7ca      	b.n	802e292 <_free_r+0x22>
 802e2fc:	bd38      	pop	{r3, r4, r5, pc}
 802e2fe:	bf00      	nop
 802e300:	20012d24 	.word	0x20012d24

0802e304 <__sfputc_r>:
 802e304:	6893      	ldr	r3, [r2, #8]
 802e306:	3b01      	subs	r3, #1
 802e308:	2b00      	cmp	r3, #0
 802e30a:	b410      	push	{r4}
 802e30c:	6093      	str	r3, [r2, #8]
 802e30e:	da08      	bge.n	802e322 <__sfputc_r+0x1e>
 802e310:	6994      	ldr	r4, [r2, #24]
 802e312:	42a3      	cmp	r3, r4
 802e314:	db01      	blt.n	802e31a <__sfputc_r+0x16>
 802e316:	290a      	cmp	r1, #10
 802e318:	d103      	bne.n	802e322 <__sfputc_r+0x1e>
 802e31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e31e:	f7ff bd7a 	b.w	802de16 <__swbuf_r>
 802e322:	6813      	ldr	r3, [r2, #0]
 802e324:	1c58      	adds	r0, r3, #1
 802e326:	6010      	str	r0, [r2, #0]
 802e328:	7019      	strb	r1, [r3, #0]
 802e32a:	4608      	mov	r0, r1
 802e32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e330:	4770      	bx	lr

0802e332 <__sfputs_r>:
 802e332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e334:	4606      	mov	r6, r0
 802e336:	460f      	mov	r7, r1
 802e338:	4614      	mov	r4, r2
 802e33a:	18d5      	adds	r5, r2, r3
 802e33c:	42ac      	cmp	r4, r5
 802e33e:	d101      	bne.n	802e344 <__sfputs_r+0x12>
 802e340:	2000      	movs	r0, #0
 802e342:	e007      	b.n	802e354 <__sfputs_r+0x22>
 802e344:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e348:	463a      	mov	r2, r7
 802e34a:	4630      	mov	r0, r6
 802e34c:	f7ff ffda 	bl	802e304 <__sfputc_r>
 802e350:	1c43      	adds	r3, r0, #1
 802e352:	d1f3      	bne.n	802e33c <__sfputs_r+0xa>
 802e354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e358 <_vfiprintf_r>:
 802e358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e35c:	460d      	mov	r5, r1
 802e35e:	b09d      	sub	sp, #116	@ 0x74
 802e360:	4614      	mov	r4, r2
 802e362:	4698      	mov	r8, r3
 802e364:	4606      	mov	r6, r0
 802e366:	b118      	cbz	r0, 802e370 <_vfiprintf_r+0x18>
 802e368:	6a03      	ldr	r3, [r0, #32]
 802e36a:	b90b      	cbnz	r3, 802e370 <_vfiprintf_r+0x18>
 802e36c:	f7ff fc58 	bl	802dc20 <__sinit>
 802e370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e372:	07d9      	lsls	r1, r3, #31
 802e374:	d405      	bmi.n	802e382 <_vfiprintf_r+0x2a>
 802e376:	89ab      	ldrh	r3, [r5, #12]
 802e378:	059a      	lsls	r2, r3, #22
 802e37a:	d402      	bmi.n	802e382 <_vfiprintf_r+0x2a>
 802e37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e37e:	f7ff ff0a 	bl	802e196 <__retarget_lock_acquire_recursive>
 802e382:	89ab      	ldrh	r3, [r5, #12]
 802e384:	071b      	lsls	r3, r3, #28
 802e386:	d501      	bpl.n	802e38c <_vfiprintf_r+0x34>
 802e388:	692b      	ldr	r3, [r5, #16]
 802e38a:	b99b      	cbnz	r3, 802e3b4 <_vfiprintf_r+0x5c>
 802e38c:	4629      	mov	r1, r5
 802e38e:	4630      	mov	r0, r6
 802e390:	f7ff fd80 	bl	802de94 <__swsetup_r>
 802e394:	b170      	cbz	r0, 802e3b4 <_vfiprintf_r+0x5c>
 802e396:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e398:	07dc      	lsls	r4, r3, #31
 802e39a:	d504      	bpl.n	802e3a6 <_vfiprintf_r+0x4e>
 802e39c:	f04f 30ff 	mov.w	r0, #4294967295
 802e3a0:	b01d      	add	sp, #116	@ 0x74
 802e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e3a6:	89ab      	ldrh	r3, [r5, #12]
 802e3a8:	0598      	lsls	r0, r3, #22
 802e3aa:	d4f7      	bmi.n	802e39c <_vfiprintf_r+0x44>
 802e3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e3ae:	f7ff fef3 	bl	802e198 <__retarget_lock_release_recursive>
 802e3b2:	e7f3      	b.n	802e39c <_vfiprintf_r+0x44>
 802e3b4:	2300      	movs	r3, #0
 802e3b6:	9309      	str	r3, [sp, #36]	@ 0x24
 802e3b8:	2320      	movs	r3, #32
 802e3ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802e3be:	f8cd 800c 	str.w	r8, [sp, #12]
 802e3c2:	2330      	movs	r3, #48	@ 0x30
 802e3c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802e574 <_vfiprintf_r+0x21c>
 802e3c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802e3cc:	f04f 0901 	mov.w	r9, #1
 802e3d0:	4623      	mov	r3, r4
 802e3d2:	469a      	mov	sl, r3
 802e3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e3d8:	b10a      	cbz	r2, 802e3de <_vfiprintf_r+0x86>
 802e3da:	2a25      	cmp	r2, #37	@ 0x25
 802e3dc:	d1f9      	bne.n	802e3d2 <_vfiprintf_r+0x7a>
 802e3de:	ebba 0b04 	subs.w	fp, sl, r4
 802e3e2:	d00b      	beq.n	802e3fc <_vfiprintf_r+0xa4>
 802e3e4:	465b      	mov	r3, fp
 802e3e6:	4622      	mov	r2, r4
 802e3e8:	4629      	mov	r1, r5
 802e3ea:	4630      	mov	r0, r6
 802e3ec:	f7ff ffa1 	bl	802e332 <__sfputs_r>
 802e3f0:	3001      	adds	r0, #1
 802e3f2:	f000 80a7 	beq.w	802e544 <_vfiprintf_r+0x1ec>
 802e3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e3f8:	445a      	add	r2, fp
 802e3fa:	9209      	str	r2, [sp, #36]	@ 0x24
 802e3fc:	f89a 3000 	ldrb.w	r3, [sl]
 802e400:	2b00      	cmp	r3, #0
 802e402:	f000 809f 	beq.w	802e544 <_vfiprintf_r+0x1ec>
 802e406:	2300      	movs	r3, #0
 802e408:	f04f 32ff 	mov.w	r2, #4294967295
 802e40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e410:	f10a 0a01 	add.w	sl, sl, #1
 802e414:	9304      	str	r3, [sp, #16]
 802e416:	9307      	str	r3, [sp, #28]
 802e418:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802e41c:	931a      	str	r3, [sp, #104]	@ 0x68
 802e41e:	4654      	mov	r4, sl
 802e420:	2205      	movs	r2, #5
 802e422:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e426:	4853      	ldr	r0, [pc, #332]	@ (802e574 <_vfiprintf_r+0x21c>)
 802e428:	f7d1 fef2 	bl	8000210 <memchr>
 802e42c:	9a04      	ldr	r2, [sp, #16]
 802e42e:	b9d8      	cbnz	r0, 802e468 <_vfiprintf_r+0x110>
 802e430:	06d1      	lsls	r1, r2, #27
 802e432:	bf44      	itt	mi
 802e434:	2320      	movmi	r3, #32
 802e436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e43a:	0713      	lsls	r3, r2, #28
 802e43c:	bf44      	itt	mi
 802e43e:	232b      	movmi	r3, #43	@ 0x2b
 802e440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e444:	f89a 3000 	ldrb.w	r3, [sl]
 802e448:	2b2a      	cmp	r3, #42	@ 0x2a
 802e44a:	d015      	beq.n	802e478 <_vfiprintf_r+0x120>
 802e44c:	9a07      	ldr	r2, [sp, #28]
 802e44e:	4654      	mov	r4, sl
 802e450:	2000      	movs	r0, #0
 802e452:	f04f 0c0a 	mov.w	ip, #10
 802e456:	4621      	mov	r1, r4
 802e458:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e45c:	3b30      	subs	r3, #48	@ 0x30
 802e45e:	2b09      	cmp	r3, #9
 802e460:	d94b      	bls.n	802e4fa <_vfiprintf_r+0x1a2>
 802e462:	b1b0      	cbz	r0, 802e492 <_vfiprintf_r+0x13a>
 802e464:	9207      	str	r2, [sp, #28]
 802e466:	e014      	b.n	802e492 <_vfiprintf_r+0x13a>
 802e468:	eba0 0308 	sub.w	r3, r0, r8
 802e46c:	fa09 f303 	lsl.w	r3, r9, r3
 802e470:	4313      	orrs	r3, r2
 802e472:	9304      	str	r3, [sp, #16]
 802e474:	46a2      	mov	sl, r4
 802e476:	e7d2      	b.n	802e41e <_vfiprintf_r+0xc6>
 802e478:	9b03      	ldr	r3, [sp, #12]
 802e47a:	1d19      	adds	r1, r3, #4
 802e47c:	681b      	ldr	r3, [r3, #0]
 802e47e:	9103      	str	r1, [sp, #12]
 802e480:	2b00      	cmp	r3, #0
 802e482:	bfbb      	ittet	lt
 802e484:	425b      	neglt	r3, r3
 802e486:	f042 0202 	orrlt.w	r2, r2, #2
 802e48a:	9307      	strge	r3, [sp, #28]
 802e48c:	9307      	strlt	r3, [sp, #28]
 802e48e:	bfb8      	it	lt
 802e490:	9204      	strlt	r2, [sp, #16]
 802e492:	7823      	ldrb	r3, [r4, #0]
 802e494:	2b2e      	cmp	r3, #46	@ 0x2e
 802e496:	d10a      	bne.n	802e4ae <_vfiprintf_r+0x156>
 802e498:	7863      	ldrb	r3, [r4, #1]
 802e49a:	2b2a      	cmp	r3, #42	@ 0x2a
 802e49c:	d132      	bne.n	802e504 <_vfiprintf_r+0x1ac>
 802e49e:	9b03      	ldr	r3, [sp, #12]
 802e4a0:	1d1a      	adds	r2, r3, #4
 802e4a2:	681b      	ldr	r3, [r3, #0]
 802e4a4:	9203      	str	r2, [sp, #12]
 802e4a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802e4aa:	3402      	adds	r4, #2
 802e4ac:	9305      	str	r3, [sp, #20]
 802e4ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802e584 <_vfiprintf_r+0x22c>
 802e4b2:	7821      	ldrb	r1, [r4, #0]
 802e4b4:	2203      	movs	r2, #3
 802e4b6:	4650      	mov	r0, sl
 802e4b8:	f7d1 feaa 	bl	8000210 <memchr>
 802e4bc:	b138      	cbz	r0, 802e4ce <_vfiprintf_r+0x176>
 802e4be:	9b04      	ldr	r3, [sp, #16]
 802e4c0:	eba0 000a 	sub.w	r0, r0, sl
 802e4c4:	2240      	movs	r2, #64	@ 0x40
 802e4c6:	4082      	lsls	r2, r0
 802e4c8:	4313      	orrs	r3, r2
 802e4ca:	3401      	adds	r4, #1
 802e4cc:	9304      	str	r3, [sp, #16]
 802e4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e4d2:	4829      	ldr	r0, [pc, #164]	@ (802e578 <_vfiprintf_r+0x220>)
 802e4d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802e4d8:	2206      	movs	r2, #6
 802e4da:	f7d1 fe99 	bl	8000210 <memchr>
 802e4de:	2800      	cmp	r0, #0
 802e4e0:	d03f      	beq.n	802e562 <_vfiprintf_r+0x20a>
 802e4e2:	4b26      	ldr	r3, [pc, #152]	@ (802e57c <_vfiprintf_r+0x224>)
 802e4e4:	bb1b      	cbnz	r3, 802e52e <_vfiprintf_r+0x1d6>
 802e4e6:	9b03      	ldr	r3, [sp, #12]
 802e4e8:	3307      	adds	r3, #7
 802e4ea:	f023 0307 	bic.w	r3, r3, #7
 802e4ee:	3308      	adds	r3, #8
 802e4f0:	9303      	str	r3, [sp, #12]
 802e4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e4f4:	443b      	add	r3, r7
 802e4f6:	9309      	str	r3, [sp, #36]	@ 0x24
 802e4f8:	e76a      	b.n	802e3d0 <_vfiprintf_r+0x78>
 802e4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 802e4fe:	460c      	mov	r4, r1
 802e500:	2001      	movs	r0, #1
 802e502:	e7a8      	b.n	802e456 <_vfiprintf_r+0xfe>
 802e504:	2300      	movs	r3, #0
 802e506:	3401      	adds	r4, #1
 802e508:	9305      	str	r3, [sp, #20]
 802e50a:	4619      	mov	r1, r3
 802e50c:	f04f 0c0a 	mov.w	ip, #10
 802e510:	4620      	mov	r0, r4
 802e512:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e516:	3a30      	subs	r2, #48	@ 0x30
 802e518:	2a09      	cmp	r2, #9
 802e51a:	d903      	bls.n	802e524 <_vfiprintf_r+0x1cc>
 802e51c:	2b00      	cmp	r3, #0
 802e51e:	d0c6      	beq.n	802e4ae <_vfiprintf_r+0x156>
 802e520:	9105      	str	r1, [sp, #20]
 802e522:	e7c4      	b.n	802e4ae <_vfiprintf_r+0x156>
 802e524:	fb0c 2101 	mla	r1, ip, r1, r2
 802e528:	4604      	mov	r4, r0
 802e52a:	2301      	movs	r3, #1
 802e52c:	e7f0      	b.n	802e510 <_vfiprintf_r+0x1b8>
 802e52e:	ab03      	add	r3, sp, #12
 802e530:	9300      	str	r3, [sp, #0]
 802e532:	462a      	mov	r2, r5
 802e534:	4b12      	ldr	r3, [pc, #72]	@ (802e580 <_vfiprintf_r+0x228>)
 802e536:	a904      	add	r1, sp, #16
 802e538:	4630      	mov	r0, r6
 802e53a:	f3af 8000 	nop.w
 802e53e:	4607      	mov	r7, r0
 802e540:	1c78      	adds	r0, r7, #1
 802e542:	d1d6      	bne.n	802e4f2 <_vfiprintf_r+0x19a>
 802e544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e546:	07d9      	lsls	r1, r3, #31
 802e548:	d405      	bmi.n	802e556 <_vfiprintf_r+0x1fe>
 802e54a:	89ab      	ldrh	r3, [r5, #12]
 802e54c:	059a      	lsls	r2, r3, #22
 802e54e:	d402      	bmi.n	802e556 <_vfiprintf_r+0x1fe>
 802e550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e552:	f7ff fe21 	bl	802e198 <__retarget_lock_release_recursive>
 802e556:	89ab      	ldrh	r3, [r5, #12]
 802e558:	065b      	lsls	r3, r3, #25
 802e55a:	f53f af1f 	bmi.w	802e39c <_vfiprintf_r+0x44>
 802e55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802e560:	e71e      	b.n	802e3a0 <_vfiprintf_r+0x48>
 802e562:	ab03      	add	r3, sp, #12
 802e564:	9300      	str	r3, [sp, #0]
 802e566:	462a      	mov	r2, r5
 802e568:	4b05      	ldr	r3, [pc, #20]	@ (802e580 <_vfiprintf_r+0x228>)
 802e56a:	a904      	add	r1, sp, #16
 802e56c:	4630      	mov	r0, r6
 802e56e:	f000 f879 	bl	802e664 <_printf_i>
 802e572:	e7e4      	b.n	802e53e <_vfiprintf_r+0x1e6>
 802e574:	08030faf 	.word	0x08030faf
 802e578:	08030fb9 	.word	0x08030fb9
 802e57c:	00000000 	.word	0x00000000
 802e580:	0802e333 	.word	0x0802e333
 802e584:	08030fb5 	.word	0x08030fb5

0802e588 <_printf_common>:
 802e588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e58c:	4616      	mov	r6, r2
 802e58e:	4698      	mov	r8, r3
 802e590:	688a      	ldr	r2, [r1, #8]
 802e592:	690b      	ldr	r3, [r1, #16]
 802e594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802e598:	4293      	cmp	r3, r2
 802e59a:	bfb8      	it	lt
 802e59c:	4613      	movlt	r3, r2
 802e59e:	6033      	str	r3, [r6, #0]
 802e5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802e5a4:	4607      	mov	r7, r0
 802e5a6:	460c      	mov	r4, r1
 802e5a8:	b10a      	cbz	r2, 802e5ae <_printf_common+0x26>
 802e5aa:	3301      	adds	r3, #1
 802e5ac:	6033      	str	r3, [r6, #0]
 802e5ae:	6823      	ldr	r3, [r4, #0]
 802e5b0:	0699      	lsls	r1, r3, #26
 802e5b2:	bf42      	ittt	mi
 802e5b4:	6833      	ldrmi	r3, [r6, #0]
 802e5b6:	3302      	addmi	r3, #2
 802e5b8:	6033      	strmi	r3, [r6, #0]
 802e5ba:	6825      	ldr	r5, [r4, #0]
 802e5bc:	f015 0506 	ands.w	r5, r5, #6
 802e5c0:	d106      	bne.n	802e5d0 <_printf_common+0x48>
 802e5c2:	f104 0a19 	add.w	sl, r4, #25
 802e5c6:	68e3      	ldr	r3, [r4, #12]
 802e5c8:	6832      	ldr	r2, [r6, #0]
 802e5ca:	1a9b      	subs	r3, r3, r2
 802e5cc:	42ab      	cmp	r3, r5
 802e5ce:	dc26      	bgt.n	802e61e <_printf_common+0x96>
 802e5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802e5d4:	6822      	ldr	r2, [r4, #0]
 802e5d6:	3b00      	subs	r3, #0
 802e5d8:	bf18      	it	ne
 802e5da:	2301      	movne	r3, #1
 802e5dc:	0692      	lsls	r2, r2, #26
 802e5de:	d42b      	bmi.n	802e638 <_printf_common+0xb0>
 802e5e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802e5e4:	4641      	mov	r1, r8
 802e5e6:	4638      	mov	r0, r7
 802e5e8:	47c8      	blx	r9
 802e5ea:	3001      	adds	r0, #1
 802e5ec:	d01e      	beq.n	802e62c <_printf_common+0xa4>
 802e5ee:	6823      	ldr	r3, [r4, #0]
 802e5f0:	6922      	ldr	r2, [r4, #16]
 802e5f2:	f003 0306 	and.w	r3, r3, #6
 802e5f6:	2b04      	cmp	r3, #4
 802e5f8:	bf02      	ittt	eq
 802e5fa:	68e5      	ldreq	r5, [r4, #12]
 802e5fc:	6833      	ldreq	r3, [r6, #0]
 802e5fe:	1aed      	subeq	r5, r5, r3
 802e600:	68a3      	ldr	r3, [r4, #8]
 802e602:	bf0c      	ite	eq
 802e604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e608:	2500      	movne	r5, #0
 802e60a:	4293      	cmp	r3, r2
 802e60c:	bfc4      	itt	gt
 802e60e:	1a9b      	subgt	r3, r3, r2
 802e610:	18ed      	addgt	r5, r5, r3
 802e612:	2600      	movs	r6, #0
 802e614:	341a      	adds	r4, #26
 802e616:	42b5      	cmp	r5, r6
 802e618:	d11a      	bne.n	802e650 <_printf_common+0xc8>
 802e61a:	2000      	movs	r0, #0
 802e61c:	e008      	b.n	802e630 <_printf_common+0xa8>
 802e61e:	2301      	movs	r3, #1
 802e620:	4652      	mov	r2, sl
 802e622:	4641      	mov	r1, r8
 802e624:	4638      	mov	r0, r7
 802e626:	47c8      	blx	r9
 802e628:	3001      	adds	r0, #1
 802e62a:	d103      	bne.n	802e634 <_printf_common+0xac>
 802e62c:	f04f 30ff 	mov.w	r0, #4294967295
 802e630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e634:	3501      	adds	r5, #1
 802e636:	e7c6      	b.n	802e5c6 <_printf_common+0x3e>
 802e638:	18e1      	adds	r1, r4, r3
 802e63a:	1c5a      	adds	r2, r3, #1
 802e63c:	2030      	movs	r0, #48	@ 0x30
 802e63e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802e642:	4422      	add	r2, r4
 802e644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802e648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802e64c:	3302      	adds	r3, #2
 802e64e:	e7c7      	b.n	802e5e0 <_printf_common+0x58>
 802e650:	2301      	movs	r3, #1
 802e652:	4622      	mov	r2, r4
 802e654:	4641      	mov	r1, r8
 802e656:	4638      	mov	r0, r7
 802e658:	47c8      	blx	r9
 802e65a:	3001      	adds	r0, #1
 802e65c:	d0e6      	beq.n	802e62c <_printf_common+0xa4>
 802e65e:	3601      	adds	r6, #1
 802e660:	e7d9      	b.n	802e616 <_printf_common+0x8e>
	...

0802e664 <_printf_i>:
 802e664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e668:	7e0f      	ldrb	r7, [r1, #24]
 802e66a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802e66c:	2f78      	cmp	r7, #120	@ 0x78
 802e66e:	4691      	mov	r9, r2
 802e670:	4680      	mov	r8, r0
 802e672:	460c      	mov	r4, r1
 802e674:	469a      	mov	sl, r3
 802e676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802e67a:	d807      	bhi.n	802e68c <_printf_i+0x28>
 802e67c:	2f62      	cmp	r7, #98	@ 0x62
 802e67e:	d80a      	bhi.n	802e696 <_printf_i+0x32>
 802e680:	2f00      	cmp	r7, #0
 802e682:	f000 80d1 	beq.w	802e828 <_printf_i+0x1c4>
 802e686:	2f58      	cmp	r7, #88	@ 0x58
 802e688:	f000 80b8 	beq.w	802e7fc <_printf_i+0x198>
 802e68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802e694:	e03a      	b.n	802e70c <_printf_i+0xa8>
 802e696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802e69a:	2b15      	cmp	r3, #21
 802e69c:	d8f6      	bhi.n	802e68c <_printf_i+0x28>
 802e69e:	a101      	add	r1, pc, #4	@ (adr r1, 802e6a4 <_printf_i+0x40>)
 802e6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e6a4:	0802e6fd 	.word	0x0802e6fd
 802e6a8:	0802e711 	.word	0x0802e711
 802e6ac:	0802e68d 	.word	0x0802e68d
 802e6b0:	0802e68d 	.word	0x0802e68d
 802e6b4:	0802e68d 	.word	0x0802e68d
 802e6b8:	0802e68d 	.word	0x0802e68d
 802e6bc:	0802e711 	.word	0x0802e711
 802e6c0:	0802e68d 	.word	0x0802e68d
 802e6c4:	0802e68d 	.word	0x0802e68d
 802e6c8:	0802e68d 	.word	0x0802e68d
 802e6cc:	0802e68d 	.word	0x0802e68d
 802e6d0:	0802e80f 	.word	0x0802e80f
 802e6d4:	0802e73b 	.word	0x0802e73b
 802e6d8:	0802e7c9 	.word	0x0802e7c9
 802e6dc:	0802e68d 	.word	0x0802e68d
 802e6e0:	0802e68d 	.word	0x0802e68d
 802e6e4:	0802e831 	.word	0x0802e831
 802e6e8:	0802e68d 	.word	0x0802e68d
 802e6ec:	0802e73b 	.word	0x0802e73b
 802e6f0:	0802e68d 	.word	0x0802e68d
 802e6f4:	0802e68d 	.word	0x0802e68d
 802e6f8:	0802e7d1 	.word	0x0802e7d1
 802e6fc:	6833      	ldr	r3, [r6, #0]
 802e6fe:	1d1a      	adds	r2, r3, #4
 802e700:	681b      	ldr	r3, [r3, #0]
 802e702:	6032      	str	r2, [r6, #0]
 802e704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802e70c:	2301      	movs	r3, #1
 802e70e:	e09c      	b.n	802e84a <_printf_i+0x1e6>
 802e710:	6833      	ldr	r3, [r6, #0]
 802e712:	6820      	ldr	r0, [r4, #0]
 802e714:	1d19      	adds	r1, r3, #4
 802e716:	6031      	str	r1, [r6, #0]
 802e718:	0606      	lsls	r6, r0, #24
 802e71a:	d501      	bpl.n	802e720 <_printf_i+0xbc>
 802e71c:	681d      	ldr	r5, [r3, #0]
 802e71e:	e003      	b.n	802e728 <_printf_i+0xc4>
 802e720:	0645      	lsls	r5, r0, #25
 802e722:	d5fb      	bpl.n	802e71c <_printf_i+0xb8>
 802e724:	f9b3 5000 	ldrsh.w	r5, [r3]
 802e728:	2d00      	cmp	r5, #0
 802e72a:	da03      	bge.n	802e734 <_printf_i+0xd0>
 802e72c:	232d      	movs	r3, #45	@ 0x2d
 802e72e:	426d      	negs	r5, r5
 802e730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e734:	4858      	ldr	r0, [pc, #352]	@ (802e898 <_printf_i+0x234>)
 802e736:	230a      	movs	r3, #10
 802e738:	e011      	b.n	802e75e <_printf_i+0xfa>
 802e73a:	6821      	ldr	r1, [r4, #0]
 802e73c:	6833      	ldr	r3, [r6, #0]
 802e73e:	0608      	lsls	r0, r1, #24
 802e740:	f853 5b04 	ldr.w	r5, [r3], #4
 802e744:	d402      	bmi.n	802e74c <_printf_i+0xe8>
 802e746:	0649      	lsls	r1, r1, #25
 802e748:	bf48      	it	mi
 802e74a:	b2ad      	uxthmi	r5, r5
 802e74c:	2f6f      	cmp	r7, #111	@ 0x6f
 802e74e:	4852      	ldr	r0, [pc, #328]	@ (802e898 <_printf_i+0x234>)
 802e750:	6033      	str	r3, [r6, #0]
 802e752:	bf14      	ite	ne
 802e754:	230a      	movne	r3, #10
 802e756:	2308      	moveq	r3, #8
 802e758:	2100      	movs	r1, #0
 802e75a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802e75e:	6866      	ldr	r6, [r4, #4]
 802e760:	60a6      	str	r6, [r4, #8]
 802e762:	2e00      	cmp	r6, #0
 802e764:	db05      	blt.n	802e772 <_printf_i+0x10e>
 802e766:	6821      	ldr	r1, [r4, #0]
 802e768:	432e      	orrs	r6, r5
 802e76a:	f021 0104 	bic.w	r1, r1, #4
 802e76e:	6021      	str	r1, [r4, #0]
 802e770:	d04b      	beq.n	802e80a <_printf_i+0x1a6>
 802e772:	4616      	mov	r6, r2
 802e774:	fbb5 f1f3 	udiv	r1, r5, r3
 802e778:	fb03 5711 	mls	r7, r3, r1, r5
 802e77c:	5dc7      	ldrb	r7, [r0, r7]
 802e77e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e782:	462f      	mov	r7, r5
 802e784:	42bb      	cmp	r3, r7
 802e786:	460d      	mov	r5, r1
 802e788:	d9f4      	bls.n	802e774 <_printf_i+0x110>
 802e78a:	2b08      	cmp	r3, #8
 802e78c:	d10b      	bne.n	802e7a6 <_printf_i+0x142>
 802e78e:	6823      	ldr	r3, [r4, #0]
 802e790:	07df      	lsls	r7, r3, #31
 802e792:	d508      	bpl.n	802e7a6 <_printf_i+0x142>
 802e794:	6923      	ldr	r3, [r4, #16]
 802e796:	6861      	ldr	r1, [r4, #4]
 802e798:	4299      	cmp	r1, r3
 802e79a:	bfde      	ittt	le
 802e79c:	2330      	movle	r3, #48	@ 0x30
 802e79e:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e7a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 802e7a6:	1b92      	subs	r2, r2, r6
 802e7a8:	6122      	str	r2, [r4, #16]
 802e7aa:	f8cd a000 	str.w	sl, [sp]
 802e7ae:	464b      	mov	r3, r9
 802e7b0:	aa03      	add	r2, sp, #12
 802e7b2:	4621      	mov	r1, r4
 802e7b4:	4640      	mov	r0, r8
 802e7b6:	f7ff fee7 	bl	802e588 <_printf_common>
 802e7ba:	3001      	adds	r0, #1
 802e7bc:	d14a      	bne.n	802e854 <_printf_i+0x1f0>
 802e7be:	f04f 30ff 	mov.w	r0, #4294967295
 802e7c2:	b004      	add	sp, #16
 802e7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e7c8:	6823      	ldr	r3, [r4, #0]
 802e7ca:	f043 0320 	orr.w	r3, r3, #32
 802e7ce:	6023      	str	r3, [r4, #0]
 802e7d0:	4832      	ldr	r0, [pc, #200]	@ (802e89c <_printf_i+0x238>)
 802e7d2:	2778      	movs	r7, #120	@ 0x78
 802e7d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802e7d8:	6823      	ldr	r3, [r4, #0]
 802e7da:	6831      	ldr	r1, [r6, #0]
 802e7dc:	061f      	lsls	r7, r3, #24
 802e7de:	f851 5b04 	ldr.w	r5, [r1], #4
 802e7e2:	d402      	bmi.n	802e7ea <_printf_i+0x186>
 802e7e4:	065f      	lsls	r7, r3, #25
 802e7e6:	bf48      	it	mi
 802e7e8:	b2ad      	uxthmi	r5, r5
 802e7ea:	6031      	str	r1, [r6, #0]
 802e7ec:	07d9      	lsls	r1, r3, #31
 802e7ee:	bf44      	itt	mi
 802e7f0:	f043 0320 	orrmi.w	r3, r3, #32
 802e7f4:	6023      	strmi	r3, [r4, #0]
 802e7f6:	b11d      	cbz	r5, 802e800 <_printf_i+0x19c>
 802e7f8:	2310      	movs	r3, #16
 802e7fa:	e7ad      	b.n	802e758 <_printf_i+0xf4>
 802e7fc:	4826      	ldr	r0, [pc, #152]	@ (802e898 <_printf_i+0x234>)
 802e7fe:	e7e9      	b.n	802e7d4 <_printf_i+0x170>
 802e800:	6823      	ldr	r3, [r4, #0]
 802e802:	f023 0320 	bic.w	r3, r3, #32
 802e806:	6023      	str	r3, [r4, #0]
 802e808:	e7f6      	b.n	802e7f8 <_printf_i+0x194>
 802e80a:	4616      	mov	r6, r2
 802e80c:	e7bd      	b.n	802e78a <_printf_i+0x126>
 802e80e:	6833      	ldr	r3, [r6, #0]
 802e810:	6825      	ldr	r5, [r4, #0]
 802e812:	6961      	ldr	r1, [r4, #20]
 802e814:	1d18      	adds	r0, r3, #4
 802e816:	6030      	str	r0, [r6, #0]
 802e818:	062e      	lsls	r6, r5, #24
 802e81a:	681b      	ldr	r3, [r3, #0]
 802e81c:	d501      	bpl.n	802e822 <_printf_i+0x1be>
 802e81e:	6019      	str	r1, [r3, #0]
 802e820:	e002      	b.n	802e828 <_printf_i+0x1c4>
 802e822:	0668      	lsls	r0, r5, #25
 802e824:	d5fb      	bpl.n	802e81e <_printf_i+0x1ba>
 802e826:	8019      	strh	r1, [r3, #0]
 802e828:	2300      	movs	r3, #0
 802e82a:	6123      	str	r3, [r4, #16]
 802e82c:	4616      	mov	r6, r2
 802e82e:	e7bc      	b.n	802e7aa <_printf_i+0x146>
 802e830:	6833      	ldr	r3, [r6, #0]
 802e832:	1d1a      	adds	r2, r3, #4
 802e834:	6032      	str	r2, [r6, #0]
 802e836:	681e      	ldr	r6, [r3, #0]
 802e838:	6862      	ldr	r2, [r4, #4]
 802e83a:	2100      	movs	r1, #0
 802e83c:	4630      	mov	r0, r6
 802e83e:	f7d1 fce7 	bl	8000210 <memchr>
 802e842:	b108      	cbz	r0, 802e848 <_printf_i+0x1e4>
 802e844:	1b80      	subs	r0, r0, r6
 802e846:	6060      	str	r0, [r4, #4]
 802e848:	6863      	ldr	r3, [r4, #4]
 802e84a:	6123      	str	r3, [r4, #16]
 802e84c:	2300      	movs	r3, #0
 802e84e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e852:	e7aa      	b.n	802e7aa <_printf_i+0x146>
 802e854:	6923      	ldr	r3, [r4, #16]
 802e856:	4632      	mov	r2, r6
 802e858:	4649      	mov	r1, r9
 802e85a:	4640      	mov	r0, r8
 802e85c:	47d0      	blx	sl
 802e85e:	3001      	adds	r0, #1
 802e860:	d0ad      	beq.n	802e7be <_printf_i+0x15a>
 802e862:	6823      	ldr	r3, [r4, #0]
 802e864:	079b      	lsls	r3, r3, #30
 802e866:	d413      	bmi.n	802e890 <_printf_i+0x22c>
 802e868:	68e0      	ldr	r0, [r4, #12]
 802e86a:	9b03      	ldr	r3, [sp, #12]
 802e86c:	4298      	cmp	r0, r3
 802e86e:	bfb8      	it	lt
 802e870:	4618      	movlt	r0, r3
 802e872:	e7a6      	b.n	802e7c2 <_printf_i+0x15e>
 802e874:	2301      	movs	r3, #1
 802e876:	4632      	mov	r2, r6
 802e878:	4649      	mov	r1, r9
 802e87a:	4640      	mov	r0, r8
 802e87c:	47d0      	blx	sl
 802e87e:	3001      	adds	r0, #1
 802e880:	d09d      	beq.n	802e7be <_printf_i+0x15a>
 802e882:	3501      	adds	r5, #1
 802e884:	68e3      	ldr	r3, [r4, #12]
 802e886:	9903      	ldr	r1, [sp, #12]
 802e888:	1a5b      	subs	r3, r3, r1
 802e88a:	42ab      	cmp	r3, r5
 802e88c:	dcf2      	bgt.n	802e874 <_printf_i+0x210>
 802e88e:	e7eb      	b.n	802e868 <_printf_i+0x204>
 802e890:	2500      	movs	r5, #0
 802e892:	f104 0619 	add.w	r6, r4, #25
 802e896:	e7f5      	b.n	802e884 <_printf_i+0x220>
 802e898:	08030fc0 	.word	0x08030fc0
 802e89c:	08030fd1 	.word	0x08030fd1

0802e8a0 <__sflush_r>:
 802e8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802e8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e8a8:	0716      	lsls	r6, r2, #28
 802e8aa:	4605      	mov	r5, r0
 802e8ac:	460c      	mov	r4, r1
 802e8ae:	d454      	bmi.n	802e95a <__sflush_r+0xba>
 802e8b0:	684b      	ldr	r3, [r1, #4]
 802e8b2:	2b00      	cmp	r3, #0
 802e8b4:	dc02      	bgt.n	802e8bc <__sflush_r+0x1c>
 802e8b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802e8b8:	2b00      	cmp	r3, #0
 802e8ba:	dd48      	ble.n	802e94e <__sflush_r+0xae>
 802e8bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802e8be:	2e00      	cmp	r6, #0
 802e8c0:	d045      	beq.n	802e94e <__sflush_r+0xae>
 802e8c2:	2300      	movs	r3, #0
 802e8c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802e8c8:	682f      	ldr	r7, [r5, #0]
 802e8ca:	6a21      	ldr	r1, [r4, #32]
 802e8cc:	602b      	str	r3, [r5, #0]
 802e8ce:	d030      	beq.n	802e932 <__sflush_r+0x92>
 802e8d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802e8d2:	89a3      	ldrh	r3, [r4, #12]
 802e8d4:	0759      	lsls	r1, r3, #29
 802e8d6:	d505      	bpl.n	802e8e4 <__sflush_r+0x44>
 802e8d8:	6863      	ldr	r3, [r4, #4]
 802e8da:	1ad2      	subs	r2, r2, r3
 802e8dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802e8de:	b10b      	cbz	r3, 802e8e4 <__sflush_r+0x44>
 802e8e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802e8e2:	1ad2      	subs	r2, r2, r3
 802e8e4:	2300      	movs	r3, #0
 802e8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802e8e8:	6a21      	ldr	r1, [r4, #32]
 802e8ea:	4628      	mov	r0, r5
 802e8ec:	47b0      	blx	r6
 802e8ee:	1c43      	adds	r3, r0, #1
 802e8f0:	89a3      	ldrh	r3, [r4, #12]
 802e8f2:	d106      	bne.n	802e902 <__sflush_r+0x62>
 802e8f4:	6829      	ldr	r1, [r5, #0]
 802e8f6:	291d      	cmp	r1, #29
 802e8f8:	d82b      	bhi.n	802e952 <__sflush_r+0xb2>
 802e8fa:	4a2a      	ldr	r2, [pc, #168]	@ (802e9a4 <__sflush_r+0x104>)
 802e8fc:	40ca      	lsrs	r2, r1
 802e8fe:	07d6      	lsls	r6, r2, #31
 802e900:	d527      	bpl.n	802e952 <__sflush_r+0xb2>
 802e902:	2200      	movs	r2, #0
 802e904:	6062      	str	r2, [r4, #4]
 802e906:	04d9      	lsls	r1, r3, #19
 802e908:	6922      	ldr	r2, [r4, #16]
 802e90a:	6022      	str	r2, [r4, #0]
 802e90c:	d504      	bpl.n	802e918 <__sflush_r+0x78>
 802e90e:	1c42      	adds	r2, r0, #1
 802e910:	d101      	bne.n	802e916 <__sflush_r+0x76>
 802e912:	682b      	ldr	r3, [r5, #0]
 802e914:	b903      	cbnz	r3, 802e918 <__sflush_r+0x78>
 802e916:	6560      	str	r0, [r4, #84]	@ 0x54
 802e918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802e91a:	602f      	str	r7, [r5, #0]
 802e91c:	b1b9      	cbz	r1, 802e94e <__sflush_r+0xae>
 802e91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802e922:	4299      	cmp	r1, r3
 802e924:	d002      	beq.n	802e92c <__sflush_r+0x8c>
 802e926:	4628      	mov	r0, r5
 802e928:	f7ff fca2 	bl	802e270 <_free_r>
 802e92c:	2300      	movs	r3, #0
 802e92e:	6363      	str	r3, [r4, #52]	@ 0x34
 802e930:	e00d      	b.n	802e94e <__sflush_r+0xae>
 802e932:	2301      	movs	r3, #1
 802e934:	4628      	mov	r0, r5
 802e936:	47b0      	blx	r6
 802e938:	4602      	mov	r2, r0
 802e93a:	1c50      	adds	r0, r2, #1
 802e93c:	d1c9      	bne.n	802e8d2 <__sflush_r+0x32>
 802e93e:	682b      	ldr	r3, [r5, #0]
 802e940:	2b00      	cmp	r3, #0
 802e942:	d0c6      	beq.n	802e8d2 <__sflush_r+0x32>
 802e944:	2b1d      	cmp	r3, #29
 802e946:	d001      	beq.n	802e94c <__sflush_r+0xac>
 802e948:	2b16      	cmp	r3, #22
 802e94a:	d11e      	bne.n	802e98a <__sflush_r+0xea>
 802e94c:	602f      	str	r7, [r5, #0]
 802e94e:	2000      	movs	r0, #0
 802e950:	e022      	b.n	802e998 <__sflush_r+0xf8>
 802e952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e956:	b21b      	sxth	r3, r3
 802e958:	e01b      	b.n	802e992 <__sflush_r+0xf2>
 802e95a:	690f      	ldr	r7, [r1, #16]
 802e95c:	2f00      	cmp	r7, #0
 802e95e:	d0f6      	beq.n	802e94e <__sflush_r+0xae>
 802e960:	0793      	lsls	r3, r2, #30
 802e962:	680e      	ldr	r6, [r1, #0]
 802e964:	bf08      	it	eq
 802e966:	694b      	ldreq	r3, [r1, #20]
 802e968:	600f      	str	r7, [r1, #0]
 802e96a:	bf18      	it	ne
 802e96c:	2300      	movne	r3, #0
 802e96e:	eba6 0807 	sub.w	r8, r6, r7
 802e972:	608b      	str	r3, [r1, #8]
 802e974:	f1b8 0f00 	cmp.w	r8, #0
 802e978:	dde9      	ble.n	802e94e <__sflush_r+0xae>
 802e97a:	6a21      	ldr	r1, [r4, #32]
 802e97c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802e97e:	4643      	mov	r3, r8
 802e980:	463a      	mov	r2, r7
 802e982:	4628      	mov	r0, r5
 802e984:	47b0      	blx	r6
 802e986:	2800      	cmp	r0, #0
 802e988:	dc08      	bgt.n	802e99c <__sflush_r+0xfc>
 802e98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e992:	81a3      	strh	r3, [r4, #12]
 802e994:	f04f 30ff 	mov.w	r0, #4294967295
 802e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e99c:	4407      	add	r7, r0
 802e99e:	eba8 0800 	sub.w	r8, r8, r0
 802e9a2:	e7e7      	b.n	802e974 <__sflush_r+0xd4>
 802e9a4:	20400001 	.word	0x20400001

0802e9a8 <_fflush_r>:
 802e9a8:	b538      	push	{r3, r4, r5, lr}
 802e9aa:	690b      	ldr	r3, [r1, #16]
 802e9ac:	4605      	mov	r5, r0
 802e9ae:	460c      	mov	r4, r1
 802e9b0:	b913      	cbnz	r3, 802e9b8 <_fflush_r+0x10>
 802e9b2:	2500      	movs	r5, #0
 802e9b4:	4628      	mov	r0, r5
 802e9b6:	bd38      	pop	{r3, r4, r5, pc}
 802e9b8:	b118      	cbz	r0, 802e9c2 <_fflush_r+0x1a>
 802e9ba:	6a03      	ldr	r3, [r0, #32]
 802e9bc:	b90b      	cbnz	r3, 802e9c2 <_fflush_r+0x1a>
 802e9be:	f7ff f92f 	bl	802dc20 <__sinit>
 802e9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e9c6:	2b00      	cmp	r3, #0
 802e9c8:	d0f3      	beq.n	802e9b2 <_fflush_r+0xa>
 802e9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802e9cc:	07d0      	lsls	r0, r2, #31
 802e9ce:	d404      	bmi.n	802e9da <_fflush_r+0x32>
 802e9d0:	0599      	lsls	r1, r3, #22
 802e9d2:	d402      	bmi.n	802e9da <_fflush_r+0x32>
 802e9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802e9d6:	f7ff fbde 	bl	802e196 <__retarget_lock_acquire_recursive>
 802e9da:	4628      	mov	r0, r5
 802e9dc:	4621      	mov	r1, r4
 802e9de:	f7ff ff5f 	bl	802e8a0 <__sflush_r>
 802e9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e9e4:	07da      	lsls	r2, r3, #31
 802e9e6:	4605      	mov	r5, r0
 802e9e8:	d4e4      	bmi.n	802e9b4 <_fflush_r+0xc>
 802e9ea:	89a3      	ldrh	r3, [r4, #12]
 802e9ec:	059b      	lsls	r3, r3, #22
 802e9ee:	d4e1      	bmi.n	802e9b4 <_fflush_r+0xc>
 802e9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802e9f2:	f7ff fbd1 	bl	802e198 <__retarget_lock_release_recursive>
 802e9f6:	e7dd      	b.n	802e9b4 <_fflush_r+0xc>

0802e9f8 <__swhatbuf_r>:
 802e9f8:	b570      	push	{r4, r5, r6, lr}
 802e9fa:	460c      	mov	r4, r1
 802e9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ea00:	2900      	cmp	r1, #0
 802ea02:	b096      	sub	sp, #88	@ 0x58
 802ea04:	4615      	mov	r5, r2
 802ea06:	461e      	mov	r6, r3
 802ea08:	da0d      	bge.n	802ea26 <__swhatbuf_r+0x2e>
 802ea0a:	89a3      	ldrh	r3, [r4, #12]
 802ea0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802ea10:	f04f 0100 	mov.w	r1, #0
 802ea14:	bf14      	ite	ne
 802ea16:	2340      	movne	r3, #64	@ 0x40
 802ea18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802ea1c:	2000      	movs	r0, #0
 802ea1e:	6031      	str	r1, [r6, #0]
 802ea20:	602b      	str	r3, [r5, #0]
 802ea22:	b016      	add	sp, #88	@ 0x58
 802ea24:	bd70      	pop	{r4, r5, r6, pc}
 802ea26:	466a      	mov	r2, sp
 802ea28:	f000 f848 	bl	802eabc <_fstat_r>
 802ea2c:	2800      	cmp	r0, #0
 802ea2e:	dbec      	blt.n	802ea0a <__swhatbuf_r+0x12>
 802ea30:	9901      	ldr	r1, [sp, #4]
 802ea32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802ea36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802ea3a:	4259      	negs	r1, r3
 802ea3c:	4159      	adcs	r1, r3
 802ea3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802ea42:	e7eb      	b.n	802ea1c <__swhatbuf_r+0x24>

0802ea44 <__smakebuf_r>:
 802ea44:	898b      	ldrh	r3, [r1, #12]
 802ea46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ea48:	079d      	lsls	r5, r3, #30
 802ea4a:	4606      	mov	r6, r0
 802ea4c:	460c      	mov	r4, r1
 802ea4e:	d507      	bpl.n	802ea60 <__smakebuf_r+0x1c>
 802ea50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802ea54:	6023      	str	r3, [r4, #0]
 802ea56:	6123      	str	r3, [r4, #16]
 802ea58:	2301      	movs	r3, #1
 802ea5a:	6163      	str	r3, [r4, #20]
 802ea5c:	b003      	add	sp, #12
 802ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ea60:	ab01      	add	r3, sp, #4
 802ea62:	466a      	mov	r2, sp
 802ea64:	f7ff ffc8 	bl	802e9f8 <__swhatbuf_r>
 802ea68:	9f00      	ldr	r7, [sp, #0]
 802ea6a:	4605      	mov	r5, r0
 802ea6c:	4639      	mov	r1, r7
 802ea6e:	4630      	mov	r0, r6
 802ea70:	f7fe ffb0 	bl	802d9d4 <_malloc_r>
 802ea74:	b948      	cbnz	r0, 802ea8a <__smakebuf_r+0x46>
 802ea76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ea7a:	059a      	lsls	r2, r3, #22
 802ea7c:	d4ee      	bmi.n	802ea5c <__smakebuf_r+0x18>
 802ea7e:	f023 0303 	bic.w	r3, r3, #3
 802ea82:	f043 0302 	orr.w	r3, r3, #2
 802ea86:	81a3      	strh	r3, [r4, #12]
 802ea88:	e7e2      	b.n	802ea50 <__smakebuf_r+0xc>
 802ea8a:	89a3      	ldrh	r3, [r4, #12]
 802ea8c:	6020      	str	r0, [r4, #0]
 802ea8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802ea92:	81a3      	strh	r3, [r4, #12]
 802ea94:	9b01      	ldr	r3, [sp, #4]
 802ea96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802ea9a:	b15b      	cbz	r3, 802eab4 <__smakebuf_r+0x70>
 802ea9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802eaa0:	4630      	mov	r0, r6
 802eaa2:	f000 f81d 	bl	802eae0 <_isatty_r>
 802eaa6:	b128      	cbz	r0, 802eab4 <__smakebuf_r+0x70>
 802eaa8:	89a3      	ldrh	r3, [r4, #12]
 802eaaa:	f023 0303 	bic.w	r3, r3, #3
 802eaae:	f043 0301 	orr.w	r3, r3, #1
 802eab2:	81a3      	strh	r3, [r4, #12]
 802eab4:	89a3      	ldrh	r3, [r4, #12]
 802eab6:	431d      	orrs	r5, r3
 802eab8:	81a5      	strh	r5, [r4, #12]
 802eaba:	e7cf      	b.n	802ea5c <__smakebuf_r+0x18>

0802eabc <_fstat_r>:
 802eabc:	b538      	push	{r3, r4, r5, lr}
 802eabe:	4d07      	ldr	r5, [pc, #28]	@ (802eadc <_fstat_r+0x20>)
 802eac0:	2300      	movs	r3, #0
 802eac2:	4604      	mov	r4, r0
 802eac4:	4608      	mov	r0, r1
 802eac6:	4611      	mov	r1, r2
 802eac8:	602b      	str	r3, [r5, #0]
 802eaca:	f7d4 f9e7 	bl	8002e9c <_fstat>
 802eace:	1c43      	adds	r3, r0, #1
 802ead0:	d102      	bne.n	802ead8 <_fstat_r+0x1c>
 802ead2:	682b      	ldr	r3, [r5, #0]
 802ead4:	b103      	cbz	r3, 802ead8 <_fstat_r+0x1c>
 802ead6:	6023      	str	r3, [r4, #0]
 802ead8:	bd38      	pop	{r3, r4, r5, pc}
 802eada:	bf00      	nop
 802eadc:	20012e64 	.word	0x20012e64

0802eae0 <_isatty_r>:
 802eae0:	b538      	push	{r3, r4, r5, lr}
 802eae2:	4d06      	ldr	r5, [pc, #24]	@ (802eafc <_isatty_r+0x1c>)
 802eae4:	2300      	movs	r3, #0
 802eae6:	4604      	mov	r4, r0
 802eae8:	4608      	mov	r0, r1
 802eaea:	602b      	str	r3, [r5, #0]
 802eaec:	f7d4 f9e6 	bl	8002ebc <_isatty>
 802eaf0:	1c43      	adds	r3, r0, #1
 802eaf2:	d102      	bne.n	802eafa <_isatty_r+0x1a>
 802eaf4:	682b      	ldr	r3, [r5, #0]
 802eaf6:	b103      	cbz	r3, 802eafa <_isatty_r+0x1a>
 802eaf8:	6023      	str	r3, [r4, #0]
 802eafa:	bd38      	pop	{r3, r4, r5, pc}
 802eafc:	20012e64 	.word	0x20012e64

0802eb00 <_init>:
 802eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb02:	bf00      	nop
 802eb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eb06:	bc08      	pop	{r3}
 802eb08:	469e      	mov	lr, r3
 802eb0a:	4770      	bx	lr

0802eb0c <_fini>:
 802eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb0e:	bf00      	nop
 802eb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eb12:	bc08      	pop	{r3}
 802eb14:	469e      	mov	lr, r3
 802eb16:	4770      	bx	lr
