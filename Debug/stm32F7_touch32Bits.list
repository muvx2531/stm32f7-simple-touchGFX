
stm32F7_touch32Bits.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ea34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f4c  0802ec04  0802ec04  0002fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08032b50  08032b50  00033b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08032b6c  08032b6c  0029b0b8  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08032b6c  08032b6c  00033b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08032b74  08032b74  0029b0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08032b74  08032b74  00033b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000008  08032b88  08032b88  00033b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000000f8  20000000  08032b90  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferA 00000100  20000100  08032c88  00034100  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_ScratchbufferB 00000100  20000200  08032d88  00034200  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00012d04  20000300  08032e88  00034300  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20013004  08032e88  00035004  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0029b0b8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00265a34  90000000  90000000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 FontFlashSection 00000660  90265a34  90265a34  0029aa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 TextFlashSection 00000024  90266094  90266094  0029b094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 00000000  c0000000  c0000000  0029b0e8  2**0
                  CONTENTS
 19 .debug_info   000cf747  00000000  00000000  0029b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00015980  00000000  00000000  0036a82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004288  00000000  00000000  003801b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000030f7  00000000  00000000  00384438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0003570b  00000000  00000000  0038752f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   000489e9  00000000  00000000  003bcc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    00126db2  00000000  00000000  00405623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0052c3d5  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00012430  00000000  00000000  0052c498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 00000066  00000000  00000000  0053e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802ebec 	.word	0x0802ebec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	0802ebec 	.word	0x0802ebec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b988 	b.w	8000a60 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	468e      	mov	lr, r1
 8000770:	4604      	mov	r4, r0
 8000772:	4688      	mov	r8, r1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d14a      	bne.n	800080e <__udivmoddi4+0xa6>
 8000778:	428a      	cmp	r2, r1
 800077a:	4617      	mov	r7, r2
 800077c:	d962      	bls.n	8000844 <__udivmoddi4+0xdc>
 800077e:	fab2 f682 	clz	r6, r2
 8000782:	b14e      	cbz	r6, 8000798 <__udivmoddi4+0x30>
 8000784:	f1c6 0320 	rsb	r3, r6, #32
 8000788:	fa01 f806 	lsl.w	r8, r1, r6
 800078c:	fa20 f303 	lsr.w	r3, r0, r3
 8000790:	40b7      	lsls	r7, r6
 8000792:	ea43 0808 	orr.w	r8, r3, r8
 8000796:	40b4      	lsls	r4, r6
 8000798:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800079c:	fa1f fc87 	uxth.w	ip, r7
 80007a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007a4:	0c23      	lsrs	r3, r4, #16
 80007a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ae:	fb01 f20c 	mul.w	r2, r1, ip
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0x62>
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007bc:	f080 80ea 	bcs.w	8000994 <__udivmoddi4+0x22c>
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f240 80e7 	bls.w	8000994 <__udivmoddi4+0x22c>
 80007c6:	3902      	subs	r1, #2
 80007c8:	443b      	add	r3, r7
 80007ca:	1a9a      	subs	r2, r3, r2
 80007cc:	b2a3      	uxth	r3, r4
 80007ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80007d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007da:	fb00 fc0c 	mul.w	ip, r0, ip
 80007de:	459c      	cmp	ip, r3
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0x8e>
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007e8:	f080 80d6 	bcs.w	8000998 <__udivmoddi4+0x230>
 80007ec:	459c      	cmp	ip, r3
 80007ee:	f240 80d3 	bls.w	8000998 <__udivmoddi4+0x230>
 80007f2:	443b      	add	r3, r7
 80007f4:	3802      	subs	r0, #2
 80007f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007fa:	eba3 030c 	sub.w	r3, r3, ip
 80007fe:	2100      	movs	r1, #0
 8000800:	b11d      	cbz	r5, 800080a <__udivmoddi4+0xa2>
 8000802:	40f3      	lsrs	r3, r6
 8000804:	2200      	movs	r2, #0
 8000806:	e9c5 3200 	strd	r3, r2, [r5]
 800080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080e:	428b      	cmp	r3, r1
 8000810:	d905      	bls.n	800081e <__udivmoddi4+0xb6>
 8000812:	b10d      	cbz	r5, 8000818 <__udivmoddi4+0xb0>
 8000814:	e9c5 0100 	strd	r0, r1, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	4608      	mov	r0, r1
 800081c:	e7f5      	b.n	800080a <__udivmoddi4+0xa2>
 800081e:	fab3 f183 	clz	r1, r3
 8000822:	2900      	cmp	r1, #0
 8000824:	d146      	bne.n	80008b4 <__udivmoddi4+0x14c>
 8000826:	4573      	cmp	r3, lr
 8000828:	d302      	bcc.n	8000830 <__udivmoddi4+0xc8>
 800082a:	4282      	cmp	r2, r0
 800082c:	f200 8105 	bhi.w	8000a3a <__udivmoddi4+0x2d2>
 8000830:	1a84      	subs	r4, r0, r2
 8000832:	eb6e 0203 	sbc.w	r2, lr, r3
 8000836:	2001      	movs	r0, #1
 8000838:	4690      	mov	r8, r2
 800083a:	2d00      	cmp	r5, #0
 800083c:	d0e5      	beq.n	800080a <__udivmoddi4+0xa2>
 800083e:	e9c5 4800 	strd	r4, r8, [r5]
 8000842:	e7e2      	b.n	800080a <__udivmoddi4+0xa2>
 8000844:	2a00      	cmp	r2, #0
 8000846:	f000 8090 	beq.w	800096a <__udivmoddi4+0x202>
 800084a:	fab2 f682 	clz	r6, r2
 800084e:	2e00      	cmp	r6, #0
 8000850:	f040 80a4 	bne.w	800099c <__udivmoddi4+0x234>
 8000854:	1a8a      	subs	r2, r1, r2
 8000856:	0c03      	lsrs	r3, r0, #16
 8000858:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800085c:	b280      	uxth	r0, r0
 800085e:	b2bc      	uxth	r4, r7
 8000860:	2101      	movs	r1, #1
 8000862:	fbb2 fcfe 	udiv	ip, r2, lr
 8000866:	fb0e 221c 	mls	r2, lr, ip, r2
 800086a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800086e:	fb04 f20c 	mul.w	r2, r4, ip
 8000872:	429a      	cmp	r2, r3
 8000874:	d907      	bls.n	8000886 <__udivmoddi4+0x11e>
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	f10c 38ff 	add.w	r8, ip, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x11c>
 800087e:	429a      	cmp	r2, r3
 8000880:	f200 80e0 	bhi.w	8000a44 <__udivmoddi4+0x2dc>
 8000884:	46c4      	mov	ip, r8
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	fbb3 f2fe 	udiv	r2, r3, lr
 800088c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000890:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000894:	fb02 f404 	mul.w	r4, r2, r4
 8000898:	429c      	cmp	r4, r3
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0x144>
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	f102 30ff 	add.w	r0, r2, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0x142>
 80008a4:	429c      	cmp	r4, r3
 80008a6:	f200 80ca 	bhi.w	8000a3e <__udivmoddi4+0x2d6>
 80008aa:	4602      	mov	r2, r0
 80008ac:	1b1b      	subs	r3, r3, r4
 80008ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008b2:	e7a5      	b.n	8000800 <__udivmoddi4+0x98>
 80008b4:	f1c1 0620 	rsb	r6, r1, #32
 80008b8:	408b      	lsls	r3, r1
 80008ba:	fa22 f706 	lsr.w	r7, r2, r6
 80008be:	431f      	orrs	r7, r3
 80008c0:	fa0e f401 	lsl.w	r4, lr, r1
 80008c4:	fa20 f306 	lsr.w	r3, r0, r6
 80008c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80008cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008d0:	4323      	orrs	r3, r4
 80008d2:	fa00 f801 	lsl.w	r8, r0, r1
 80008d6:	fa1f fc87 	uxth.w	ip, r7
 80008da:	fbbe f0f9 	udiv	r0, lr, r9
 80008de:	0c1c      	lsrs	r4, r3, #16
 80008e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	fa02 f201 	lsl.w	r2, r2, r1
 80008f2:	d909      	bls.n	8000908 <__udivmoddi4+0x1a0>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008fa:	f080 809c 	bcs.w	8000a36 <__udivmoddi4+0x2ce>
 80008fe:	45a6      	cmp	lr, r4
 8000900:	f240 8099 	bls.w	8000a36 <__udivmoddi4+0x2ce>
 8000904:	3802      	subs	r0, #2
 8000906:	443c      	add	r4, r7
 8000908:	eba4 040e 	sub.w	r4, r4, lr
 800090c:	fa1f fe83 	uxth.w	lr, r3
 8000910:	fbb4 f3f9 	udiv	r3, r4, r9
 8000914:	fb09 4413 	mls	r4, r9, r3, r4
 8000918:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800091c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000920:	45a4      	cmp	ip, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x1ce>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f103 3eff 	add.w	lr, r3, #4294967295
 800092a:	f080 8082 	bcs.w	8000a32 <__udivmoddi4+0x2ca>
 800092e:	45a4      	cmp	ip, r4
 8000930:	d97f      	bls.n	8000a32 <__udivmoddi4+0x2ca>
 8000932:	3b02      	subs	r3, #2
 8000934:	443c      	add	r4, r7
 8000936:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800093a:	eba4 040c 	sub.w	r4, r4, ip
 800093e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000942:	4564      	cmp	r4, ip
 8000944:	4673      	mov	r3, lr
 8000946:	46e1      	mov	r9, ip
 8000948:	d362      	bcc.n	8000a10 <__udivmoddi4+0x2a8>
 800094a:	d05f      	beq.n	8000a0c <__udivmoddi4+0x2a4>
 800094c:	b15d      	cbz	r5, 8000966 <__udivmoddi4+0x1fe>
 800094e:	ebb8 0203 	subs.w	r2, r8, r3
 8000952:	eb64 0409 	sbc.w	r4, r4, r9
 8000956:	fa04 f606 	lsl.w	r6, r4, r6
 800095a:	fa22 f301 	lsr.w	r3, r2, r1
 800095e:	431e      	orrs	r6, r3
 8000960:	40cc      	lsrs	r4, r1
 8000962:	e9c5 6400 	strd	r6, r4, [r5]
 8000966:	2100      	movs	r1, #0
 8000968:	e74f      	b.n	800080a <__udivmoddi4+0xa2>
 800096a:	fbb1 fcf2 	udiv	ip, r1, r2
 800096e:	0c01      	lsrs	r1, r0, #16
 8000970:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000974:	b280      	uxth	r0, r0
 8000976:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800097a:	463b      	mov	r3, r7
 800097c:	4638      	mov	r0, r7
 800097e:	463c      	mov	r4, r7
 8000980:	46b8      	mov	r8, r7
 8000982:	46be      	mov	lr, r7
 8000984:	2620      	movs	r6, #32
 8000986:	fbb1 f1f7 	udiv	r1, r1, r7
 800098a:	eba2 0208 	sub.w	r2, r2, r8
 800098e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000992:	e766      	b.n	8000862 <__udivmoddi4+0xfa>
 8000994:	4601      	mov	r1, r0
 8000996:	e718      	b.n	80007ca <__udivmoddi4+0x62>
 8000998:	4610      	mov	r0, r2
 800099a:	e72c      	b.n	80007f6 <__udivmoddi4+0x8e>
 800099c:	f1c6 0220 	rsb	r2, r6, #32
 80009a0:	fa2e f302 	lsr.w	r3, lr, r2
 80009a4:	40b7      	lsls	r7, r6
 80009a6:	40b1      	lsls	r1, r6
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	430a      	orrs	r2, r1
 80009b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009b6:	b2bc      	uxth	r4, r7
 80009b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009bc:	0c11      	lsrs	r1, r2, #16
 80009be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c2:	fb08 f904 	mul.w	r9, r8, r4
 80009c6:	40b0      	lsls	r0, r6
 80009c8:	4589      	cmp	r9, r1
 80009ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009ce:	b280      	uxth	r0, r0
 80009d0:	d93e      	bls.n	8000a50 <__udivmoddi4+0x2e8>
 80009d2:	1879      	adds	r1, r7, r1
 80009d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009d8:	d201      	bcs.n	80009de <__udivmoddi4+0x276>
 80009da:	4589      	cmp	r9, r1
 80009dc:	d81f      	bhi.n	8000a1e <__udivmoddi4+0x2b6>
 80009de:	eba1 0109 	sub.w	r1, r1, r9
 80009e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009e6:	fb09 f804 	mul.w	r8, r9, r4
 80009ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ee:	b292      	uxth	r2, r2
 80009f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009f4:	4542      	cmp	r2, r8
 80009f6:	d229      	bcs.n	8000a4c <__udivmoddi4+0x2e4>
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80009fe:	d2c4      	bcs.n	800098a <__udivmoddi4+0x222>
 8000a00:	4542      	cmp	r2, r8
 8000a02:	d2c2      	bcs.n	800098a <__udivmoddi4+0x222>
 8000a04:	f1a9 0102 	sub.w	r1, r9, #2
 8000a08:	443a      	add	r2, r7
 8000a0a:	e7be      	b.n	800098a <__udivmoddi4+0x222>
 8000a0c:	45f0      	cmp	r8, lr
 8000a0e:	d29d      	bcs.n	800094c <__udivmoddi4+0x1e4>
 8000a10:	ebbe 0302 	subs.w	r3, lr, r2
 8000a14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a18:	3801      	subs	r0, #1
 8000a1a:	46e1      	mov	r9, ip
 8000a1c:	e796      	b.n	800094c <__udivmoddi4+0x1e4>
 8000a1e:	eba7 0909 	sub.w	r9, r7, r9
 8000a22:	4449      	add	r1, r9
 8000a24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2c:	fb09 f804 	mul.w	r8, r9, r4
 8000a30:	e7db      	b.n	80009ea <__udivmoddi4+0x282>
 8000a32:	4673      	mov	r3, lr
 8000a34:	e77f      	b.n	8000936 <__udivmoddi4+0x1ce>
 8000a36:	4650      	mov	r0, sl
 8000a38:	e766      	b.n	8000908 <__udivmoddi4+0x1a0>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e6fd      	b.n	800083a <__udivmoddi4+0xd2>
 8000a3e:	443b      	add	r3, r7
 8000a40:	3a02      	subs	r2, #2
 8000a42:	e733      	b.n	80008ac <__udivmoddi4+0x144>
 8000a44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a48:	443b      	add	r3, r7
 8000a4a:	e71c      	b.n	8000886 <__udivmoddi4+0x11e>
 8000a4c:	4649      	mov	r1, r9
 8000a4e:	e79c      	b.n	800098a <__udivmoddi4+0x222>
 8000a50:	eba1 0109 	sub.w	r1, r1, r9
 8000a54:	46c4      	mov	ip, r8
 8000a56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a5a:	fb09 f804 	mul.w	r8, r9, r4
 8000a5e:	e7c4      	b.n	80009ea <__udivmoddi4+0x282>

08000a60 <__aeabi_idiv0>:
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <delay_us>:
#include "CT_I2C.h"

static void delay_us(uint32_t value)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	i = value * 250;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	22fa      	movs	r2, #250	@ 0xfa
 8000a70:	fb02 f303 	mul.w	r3, r2, r3
 8000a74:	60fb      	str	r3, [r7, #12]
	while(i--);
 8000a76:	bf00      	nop
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	60fa      	str	r2, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1fa      	bne.n	8000a78 <delay_us+0x14>
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <CT_SDA_IN>:

static void CT_SDA_IN()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
  GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000a96:	2320      	movs	r3, #32
 8000a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <CT_SDA_IN+0x28>)
 8000aac:	f002 ff08 	bl	80038c0 <HAL_GPIO_Init>
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021c00 	.word	0x40021c00

08000abc <CT_SDA_OUT>:

static void CT_SDA_OUT()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <CT_SDA_OUT+0x28>)
 8000ad8:	f002 fef2 	bl	80038c0 <HAL_GPIO_Init>
}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021c00 	.word	0x40021c00

08000ae8 <CT_I2C_Init>:

void CT_I2C_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	SDA_CLK();
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a1a      	ldr	r2, [pc, #104]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
	SCL_CLK();
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <CT_I2C_Init+0x74>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = SCL_GPIO_PIN;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_GPIO_PORT, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <CT_I2C_Init+0x78>)
 8000b36:	f002 fec3 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <CT_I2C_Init+0x78>)
 8000b4e:	f002 feb7 	bl	80038c0 <HAL_GPIO_Init>
}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021c00 	.word	0x40021c00

08000b64 <CT_I2C_Start>:

void CT_I2C_Start(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000b68:	f7ff ffa8 	bl	8000abc <CT_SDA_OUT>
	
	SET_SDA();
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2120      	movs	r1, #32
 8000b70:	480f      	ldr	r0, [pc, #60]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000b72:	f003 f869 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);	
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff ff74 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000b82:	f003 f861 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ff6c 	bl	8000a64 <delay_us>
	
 	CLR_SDA();
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000b92:	f003 f859 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff ff64 	bl	8000a64 <delay_us>
	
	CLR_CLK();
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <CT_I2C_Start+0x4c>)
 8000ba2:	f003 f851 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff ff5c 	bl	8000a64 <delay_us>
}	  
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021c00 	.word	0x40021c00

08000bb4 <CT_I2C_Stop>:

void CT_I2C_Stop(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000bb8:	f7ff ff80 	bl	8000abc <CT_SDA_OUT>
	
	CLR_SDA();
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <CT_I2C_Stop+0x3c>)
 8000bc2:	f003 f841 	bl	8003c48 <HAL_GPIO_WritePin>
 	delay_us(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff ff4c 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <CT_I2C_Stop+0x3c>)
 8000bd2:	f003 f839 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff44 	bl	8000a64 <delay_us>
	
	SET_SDA();
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <CT_I2C_Stop+0x3c>)
 8000be2:	f003 f831 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);							   	
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff ff3c 	bl	8000a64 <delay_us>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021c00 	.word	0x40021c00

08000bf4 <CT_I2C_Send_Byte>:

void CT_I2C_Send_Byte(uint8_t data)
{                        
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	uint8_t t; 
  
	CT_SDA_OUT();    
 8000bfe:	f7ff ff5d 	bl	8000abc <CT_SDA_OUT>
  CLR_CLK();
 8000c02:	2200      	movs	r2, #0
 8000c04:	2110      	movs	r1, #16
 8000c06:	4822      	ldr	r0, [pc, #136]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c08:	f003 f81e 	bl	8003c48 <HAL_GPIO_WritePin>
		
	for(t=0;t<8;t++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e027      	b.n	8000c62 <CT_I2C_Send_Byte+0x6e>
	{              
		if(data&0x80)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da05      	bge.n	8000c26 <CT_I2C_Send_Byte+0x32>
		{
			SET_SDA();
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	481c      	ldr	r0, [pc, #112]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c20:	f003 f812 	bl	8003c48 <HAL_GPIO_WritePin>
 8000c24:	e004      	b.n	8000c30 <CT_I2C_Send_Byte+0x3c>
		}
		else
		{
			CLR_SDA();
 8000c26:	2200      	movs	r2, #0
 8000c28:	2120      	movs	r1, #32
 8000c2a:	4819      	ldr	r0, [pc, #100]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c2c:	f003 f80c 	bl	8003c48 <HAL_GPIO_WritePin>
		}

		data<<=1; 	  
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
		delay_us(1); 
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff ff14 	bl	8000a64 <delay_us>

		SET_CLK();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4813      	ldr	r0, [pc, #76]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c42:	f003 f801 	bl	8003c48 <HAL_GPIO_WritePin>
		delay_us(1); 
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff ff0c 	bl	8000a64 <delay_us>
		CLR_CLK();
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	480f      	ldr	r0, [pc, #60]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c52:	f002 fff9 	bl	8003c48 <HAL_GPIO_WritePin>
		delay_us(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff ff04 	bl	8000a64 <delay_us>
	for(t=0;t<8;t++)
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d9d4      	bls.n	8000c12 <CT_I2C_Send_Byte+0x1e>
	}	 

	SET_SDA();
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c6e:	f002 ffeb 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fef6 	bl	8000a64 <delay_us>
	CLR_CLK();
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <CT_I2C_Send_Byte+0x9c>)
 8000c7e:	f002 ffe3 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff feee 	bl	8000a64 <delay_us>
} 
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021c00 	.word	0x40021c00

08000c94 <CT_I2C_Read_Byte>:

uint8_t CT_I2C_Read_Byte(unsigned char ack)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t i,receive=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73bb      	strb	r3, [r7, #14]

 	CT_SDA_IN();
 8000ca2:	f7ff fef5 	bl	8000a90 <CT_SDA_IN>

  for(i=0;i<8;i++ )
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e01f      	b.n	8000cec <CT_I2C_Read_Byte+0x58>
	{
    CLR_CLK(); 
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4819      	ldr	r0, [pc, #100]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cb2:	f002 ffc9 	bl	8003c48 <HAL_GPIO_WritePin>
		delay_us(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fed4 	bl	8000a64 <delay_us>
		SET_CLK();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cc2:	f002 ffc1 	bl	8003c48 <HAL_GPIO_WritePin>
    receive<<=1;
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	73bb      	strb	r3, [r7, #14]
    if(READ_SDA())receive++;   
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cd0:	f002 ffa2 	bl	8003c18 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <CT_I2C_Read_Byte+0x4c>
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff febf 	bl	8000a64 <delay_us>
  for(i=0;i<8;i++ )
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d9dc      	bls.n	8000cac <CT_I2C_Read_Byte+0x18>
	}	

	CLR_CLK(); 	
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <CT_I2C_Read_Byte+0x84>)
 8000cf8:	f002 ffa6 	bl	8003c48 <HAL_GPIO_WritePin>
	if (!ack)CT_I2C_NAck();
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <CT_I2C_Read_Byte+0x74>
 8000d02:	f000 f867 	bl	8000dd4 <CT_I2C_NAck>
 8000d06:	e001      	b.n	8000d0c <CT_I2C_Read_Byte+0x78>
	else CT_I2C_Ack(); 
 8000d08:	f000 f83e 	bl	8000d88 <CT_I2C_Ack>
 
	return receive;
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021c00 	.word	0x40021c00

08000d1c <CT_I2C_Wait_Ack>:

uint8_t CT_I2C_Wait_Ack(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]

	CT_SDA_IN();  
 8000d26:	f7ff feb3 	bl	8000a90 <CT_SDA_IN>
	SET_SDA();
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4815      	ldr	r0, [pc, #84]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d30:	f002 ff8a 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);	   
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fe95 	bl	8000a64 <delay_us>
	SET_CLK();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d40:	f002 ff82 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);	
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff fe8d 	bl	8000a64 <delay_us>
	
	while(READ_SDA())
 8000d4a:	e009      	b.n	8000d60 <CT_I2C_Wait_Ack+0x44>
	{
		ucErrTime++;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2bfa      	cmp	r3, #250	@ 0xfa
 8000d56:	d903      	bls.n	8000d60 <CT_I2C_Wait_Ack+0x44>
		{
			CT_I2C_Stop();
 8000d58:	f7ff ff2c 	bl	8000bb4 <CT_I2C_Stop>
			return 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e00c      	b.n	8000d7a <CT_I2C_Wait_Ack+0x5e>
	while(READ_SDA())
 8000d60:	2120      	movs	r1, #32
 8000d62:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d64:	f002 ff58 	bl	8003c18 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1ee      	bne.n	8000d4c <CT_I2C_Wait_Ack+0x30>
		}
	}
	CLR_CLK();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <CT_I2C_Wait_Ack+0x68>)
 8000d74:	f002 ff68 	bl	8003c48 <HAL_GPIO_WritePin>
	return 0;  
 8000d78:	2300      	movs	r3, #0
} 
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021c00 	.word	0x40021c00

08000d88 <CT_I2C_Ack>:

void CT_I2C_Ack(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000d8c:	f7ff fe96 	bl	8000abc <CT_SDA_OUT>
	CLR_CLK();
 8000d90:	2200      	movs	r2, #0
 8000d92:	2110      	movs	r1, #16
 8000d94:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000d96:	f002 ff57 	bl	8003c48 <HAL_GPIO_WritePin>
	
	CLR_SDA();
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000da0:	f002 ff52 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fe5d 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000daa:	2201      	movs	r2, #1
 8000dac:	2110      	movs	r1, #16
 8000dae:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000db0:	f002 ff4a 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fe55 	bl	8000a64 <delay_us>
	
	CLR_CLK();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <CT_I2C_Ack+0x48>)
 8000dc0:	f002 ff42 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fe4d 	bl	8000a64 <delay_us>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021c00 	.word	0x40021c00

08000dd4 <CT_I2C_NAck>:
   
void CT_I2C_NAck(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	CT_SDA_OUT();
 8000dd8:	f7ff fe70 	bl	8000abc <CT_SDA_OUT>

	SET_SDA();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2120      	movs	r1, #32
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <CT_I2C_NAck+0x3c>)
 8000de2:	f002 ff31 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fe3c 	bl	8000a64 <delay_us>
	
	SET_CLK();
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <CT_I2C_NAck+0x3c>)
 8000df2:	f002 ff29 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fe34 	bl	8000a64 <delay_us>
	
	CLR_CLK();
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <CT_I2C_NAck+0x3c>)
 8000e02:	f002 ff21 	bl	8003c48 <HAL_GPIO_WritePin>
	delay_us(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fe2c 	bl	8000a64 <delay_us>
}					 				     
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021c00 	.word	0x40021c00

08000e14 <GT911_Reset_Sequence>:
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00
};

static void GT911_Reset_Sequence()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GT911_RST_CLK();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
	GT911_INT_CLK();
 8000e32:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a27      	ldr	r2, [pc, #156]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <GT911_Reset_Sequence+0xc0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GT911_RST_PIN;
 8000e4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GT911_RST_PORT, &GPIO_InitStruct);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <GT911_Reset_Sequence+0xc4>)
 8000e64:	f002 fd2c 	bl	80038c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GT911_INT_PIN;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GT911_INT_PORT, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	481a      	ldr	r0, [pc, #104]	@ (8000edc <GT911_Reset_Sequence+0xc8>)
 8000e74:	f002 fd24 	bl	80038c0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7e:	4816      	ldr	r0, [pc, #88]	@ (8000ed8 <GT911_Reset_Sequence+0xc4>)
 8000e80:	f002 fee2 	bl	8003c48 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f002 f8c7 	bl	8003018 <HAL_Delay>
	HAL_GPIO_WritePin(GT911_INT_PORT,GT911_INT_PIN,GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4813      	ldr	r0, [pc, #76]	@ (8000edc <GT911_Reset_Sequence+0xc8>)
 8000e90:	f002 feda 	bl	8003c48 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	@ 0x64
 8000e96:	f002 f8bf 	bl	8003018 <HAL_Delay>
	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <GT911_Reset_Sequence+0xc4>)
 8000ea2:	f002 fed1 	bl	8003c48 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000ea6:	20c8      	movs	r0, #200	@ 0xc8
 8000ea8:	f002 f8b6 	bl	8003018 <HAL_Delay>

	GPIO_InitStruct.Pin = GT911_INT_PIN;
 8000eac:	2301      	movs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GT911_INT_PORT, &GPIO_InitStruct);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4806      	ldr	r0, [pc, #24]	@ (8000edc <GT911_Reset_Sequence+0xc8>)
 8000ec2:	f002 fcfd 	bl	80038c0 <HAL_GPIO_Init>

	HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	@ 0x64
 8000ec8:	f002 f8a6 	bl	8003018 <HAL_Delay>
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40022400 	.word	0x40022400

08000ee0 <GT911_WR_Reg>:

static uint8_t GT911_WR_Reg(uint16_t reg,uint8_t *buf,uint8_t len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	80fb      	strh	r3, [r7, #6]
 8000eec:	4613      	mov	r3, r2
 8000eee:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t ret=0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73bb      	strb	r3, [r7, #14]
	CT_I2C_Start();
 8000ef4:	f7ff fe36 	bl	8000b64 <CT_I2C_Start>
 	CT_I2C_Send_Byte(CT_CMD_WR);
 8000ef8:	20ba      	movs	r0, #186	@ 0xba
 8000efa:	f7ff fe7b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000efe:	f7ff ff0d 	bl	8000d1c <CT_I2C_Wait_Ack>
	CT_I2C_Send_Byte(reg>>8);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe72 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f10:	f7ff ff04 	bl	8000d1c <CT_I2C_Wait_Ack>
	CT_I2C_Send_Byte(reg&0XFF);
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe6b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f1e:	f7ff fefd 	bl	8000d1c <CT_I2C_Wait_Ack>
	for(i=0;i<len;i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e010      	b.n	8000f4a <GT911_WR_Reg+0x6a>
	{
    CT_I2C_Send_Byte(buf[i]);
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe5f 	bl	8000bf4 <CT_I2C_Send_Byte>
		ret=CT_I2C_Wait_Ack();
 8000f36:	f7ff fef1 	bl	8000d1c <CT_I2C_Wait_Ack>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]
		if(ret)break;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <GT911_WR_Reg+0x74>
	for(i=0;i<len;i++)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3ea      	bcc.n	8000f28 <GT911_WR_Reg+0x48>
 8000f52:	e000      	b.n	8000f56 <GT911_WR_Reg+0x76>
		if(ret)break;
 8000f54:	bf00      	nop
	}
  CT_I2C_Stop();
 8000f56:	f7ff fe2d 	bl	8000bb4 <CT_I2C_Stop>
	return ret;
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <GT911_RD_Reg>:

static void GT911_RD_Reg(uint16_t reg,uint8_t *buf,uint8_t len)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	80fb      	strh	r3, [r7, #6]
 8000f70:	4613      	mov	r3, r2
 8000f72:	717b      	strb	r3, [r7, #5]
	uint8_t i;
 	CT_I2C_Start();
 8000f74:	f7ff fdf6 	bl	8000b64 <CT_I2C_Start>
 	CT_I2C_Send_Byte(CT_CMD_WR);
 8000f78:	20ba      	movs	r0, #186	@ 0xba
 8000f7a:	f7ff fe3b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f7e:	f7ff fecd 	bl	8000d1c <CT_I2C_Wait_Ack>
 	CT_I2C_Send_Byte(reg>>8);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe32 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f90:	f7ff fec4 	bl	8000d1c <CT_I2C_Wait_Ack>
 	CT_I2C_Send_Byte(reg&0XFF);
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe2b 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000f9e:	f7ff febd 	bl	8000d1c <CT_I2C_Wait_Ack>
 	CT_I2C_Stop();
 8000fa2:	f7ff fe07 	bl	8000bb4 <CT_I2C_Stop>

 	CT_I2C_Start();
 8000fa6:	f7ff fddd 	bl	8000b64 <CT_I2C_Start>
	CT_I2C_Send_Byte(CT_CMD_RD);
 8000faa:	20bb      	movs	r0, #187	@ 0xbb
 8000fac:	f7ff fe22 	bl	8000bf4 <CT_I2C_Send_Byte>
	CT_I2C_Wait_Ack();
 8000fb0:	f7ff feb4 	bl	8000d1c <CT_I2C_Wait_Ack>
	for(i=0;i<len;i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e013      	b.n	8000fe2 <GT911_RD_Reg+0x7e>
	{
		buf[i]=CT_I2C_Read_Byte(i==(len-1)?0:1);
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	797b      	ldrb	r3, [r7, #5]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	18d4      	adds	r4, r2, r3
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	f7ff fe5e 	bl	8000c94 <CT_I2C_Read_Byte>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	7023      	strb	r3, [r4, #0]
	for(i=0;i<len;i++)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3e7      	bcc.n	8000fba <GT911_RD_Reg+0x56>
	}
  CT_I2C_Stop();
 8000fea:	f7ff fde3 	bl	8000bb4 <CT_I2C_Stop>
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd90      	pop	{r4, r7, pc}
	...

08000ff8 <GT911_ReadStatue>:

static uint8_t GT911_ReadStatue(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
	uint8_t buf[4];
	GT911_RD_Reg(GT911_PRODUCT_ID_REG, (uint8_t *)&buf[0], 3);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2203      	movs	r2, #3
 8001002:	4619      	mov	r1, r3
 8001004:	f248 1040 	movw	r0, #33088	@ 0x8140
 8001008:	f7ff ffac 	bl	8000f64 <GT911_RD_Reg>
	GT911_RD_Reg(GT911_CONFIG_REG, (uint8_t *)&buf[3], 1);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	3303      	adds	r3, #3
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f248 0047 	movw	r0, #32839	@ 0x8047
 8001018:	f7ff ffa4 	bl	8000f64 <GT911_RD_Reg>
	printf("TouchPad_ID:%c,%c,%c\r\nTouchPad_Config_Version:%2x\r\n",buf[0],buf[1],buf[2],buf[3]);
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	4619      	mov	r1, r3
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	461a      	mov	r2, r3
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4603      	mov	r3, r0
 800102e:	4804      	ldr	r0, [pc, #16]	@ (8001040 <GT911_ReadStatue+0x48>)
 8001030:	f02c feb4 	bl	802dd9c <iprintf>
	return buf[3];
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0802ec04 	.word	0x0802ec04

08001044 <GT911_ReadFirmwareVersion>:

static uint16_t GT911_ReadFirmwareVersion(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	uint8_t buf[2];

	GT911_RD_Reg(GT911_FIRMWARE_VERSION_REG, buf, 2);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2202      	movs	r2, #2
 800104e:	4619      	mov	r1, r3
 8001050:	f248 1044 	movw	r0, #33092	@ 0x8144
 8001054:	f7ff ff86 	bl	8000f64 <GT911_RD_Reg>

	printf("FirmwareVersion:%2x\r\n",(((uint16_t)buf[1] << 8) + buf[0]));
 8001058:	797b      	ldrb	r3, [r7, #5]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	793a      	ldrb	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <GT911_ReadFirmwareVersion+0x38>)
 8001064:	f02c fe9a 	bl	802dd9c <iprintf>
	return ((uint16_t)buf[1] << 8) + buf[0];
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	793a      	ldrb	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	b29b      	uxth	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0802ec38 	.word	0x0802ec38

08001080 <GT911_Scan>:

void GT911_Scan(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0
	uint8_t buf[41];
  uint8_t Clearbuf = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
//	uint32_t PointColor[]={LCD_COLOR_BLUE,LCD_COLOR_GREEN,LCD_COLOR_RED,LCD_COLOR_MAGENTA,LCD_COLOR_YELLOW};
	
	if (Dev_Now.Touch == 1)
 800108a:	4b97      	ldr	r3, [pc, #604]	@ (80012e8 <GT911_Scan+0x268>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 819d 	bne.w	80013ce <GT911_Scan+0x34e>
	{	
		Dev_Now.Touch = 0;
 8001094:	4b94      	ldr	r3, [pc, #592]	@ (80012e8 <GT911_Scan+0x268>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
		GT911_RD_Reg(GT911_READ_XY_REG, buf, 1);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	f248 104e 	movw	r0, #33102	@ 0x814e
 80010a4:	f7ff ff5e 	bl	8000f64 <GT911_RD_Reg>

		if ((buf[0]&0x80) == 0x00)
 80010a8:	793b      	ldrb	r3, [r7, #4]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <GT911_Scan+0x46>
		{
			GT911_WR_Reg(GT911_READ_XY_REG, (uint8_t *)&Clearbuf, 1);
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	f248 104e 	movw	r0, #33102	@ 0x814e
 80010ba:	f7ff ff11 	bl	8000ee0 <GT911_WR_Reg>
			//printf("%x\r\n",buf[0]);
			HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f001 ffaa 	bl	8003018 <HAL_Delay>
 80010c4:	e183      	b.n	80013ce <GT911_Scan+0x34e>
		}
		else
		{
			//printf("bufstat:%x\r\n",buf[0]);
			Dev_Now.TouchpointFlag = buf[0];
 80010c6:	793a      	ldrb	r2, [r7, #4]
 80010c8:	4b87      	ldr	r3, [pc, #540]	@ (80012e8 <GT911_Scan+0x268>)
 80010ca:	705a      	strb	r2, [r3, #1]
			Dev_Now.TouchCount = buf[0]&0x0f;
 80010cc:	793b      	ldrb	r3, [r7, #4]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b84      	ldr	r3, [pc, #528]	@ (80012e8 <GT911_Scan+0x268>)
 80010d6:	709a      	strb	r2, [r3, #2]
			if (Dev_Now.TouchCount > 5)
 80010d8:	4b83      	ldr	r3, [pc, #524]	@ (80012e8 <GT911_Scan+0x268>)
 80010da:	789b      	ldrb	r3, [r3, #2]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d907      	bls.n	80010f0 <GT911_Scan+0x70>
			{
				GT911_WR_Reg(GT911_READ_XY_REG, (uint8_t *)&Clearbuf, 1);
 80010e0:	1cfb      	adds	r3, r7, #3
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f248 104e 	movw	r0, #33102	@ 0x814e
 80010ea:	f7ff fef9 	bl	8000ee0 <GT911_WR_Reg>
 80010ee:	e16e      	b.n	80013ce <GT911_Scan+0x34e>
				return ;
			}		
			GT911_RD_Reg(GT911_READ_XY_REG+1, &buf[1], Dev_Now.TouchCount*8);
 80010f0:	4b7d      	ldr	r3, [pc, #500]	@ (80012e8 <GT911_Scan+0x268>)
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	3301      	adds	r3, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	f248 104f 	movw	r0, #33103	@ 0x814f
 8001102:	f7ff ff2f 	bl	8000f64 <GT911_RD_Reg>
			GT911_WR_Reg(GT911_READ_XY_REG, (uint8_t *)&Clearbuf, 1);
 8001106:	1cfb      	adds	r3, r7, #3
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f248 104e 	movw	r0, #33102	@ 0x814e
 8001110:	f7ff fee6 	bl	8000ee0 <GT911_WR_Reg>
			
			Dev_Now.Touchkeytrackid[0] = buf[1];
 8001114:	797a      	ldrb	r2, [r7, #5]
 8001116:	4b74      	ldr	r3, [pc, #464]	@ (80012e8 <GT911_Scan+0x268>)
 8001118:	70da      	strb	r2, [r3, #3]
			Dev_Now.X[0] = ((uint16_t)buf[3] << 8) + buf[2];
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	4413      	add	r3, r2
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <GT911_Scan+0x268>)
 8001128:	811a      	strh	r2, [r3, #8]
			Dev_Now.Y[0] = ((uint16_t)buf[5] << 8) + buf[4];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	7a3a      	ldrb	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b6c      	ldr	r3, [pc, #432]	@ (80012e8 <GT911_Scan+0x268>)
 8001138:	825a      	strh	r2, [r3, #18]
			Dev_Now.S[0] = ((uint16_t)buf[7] << 8) + buf[6];
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	7aba      	ldrb	r2, [r7, #10]
 8001142:	4413      	add	r3, r2
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <GT911_Scan+0x268>)
 8001148:	839a      	strh	r2, [r3, #28]

			Dev_Now.Touchkeytrackid[1] = buf[9];
 800114a:	7b7a      	ldrb	r2, [r7, #13]
 800114c:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <GT911_Scan+0x268>)
 800114e:	711a      	strb	r2, [r3, #4]
			Dev_Now.X[1] = ((uint16_t)buf[11] << 8) + buf[10];
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	7bba      	ldrb	r2, [r7, #14]
 8001158:	4413      	add	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <GT911_Scan+0x268>)
 800115e:	815a      	strh	r2, [r3, #10]
			Dev_Now.Y[1] = ((uint16_t)buf[13] << 8) + buf[12];
 8001160:	7c7b      	ldrb	r3, [r7, #17]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b29b      	uxth	r3, r3
 8001166:	7c3a      	ldrb	r2, [r7, #16]
 8001168:	4413      	add	r3, r2
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <GT911_Scan+0x268>)
 800116e:	829a      	strh	r2, [r3, #20]
			Dev_Now.S[1] = ((uint16_t)buf[15] << 8) + buf[14];
 8001170:	7cfb      	ldrb	r3, [r7, #19]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	7cba      	ldrb	r2, [r7, #18]
 8001178:	4413      	add	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b5a      	ldr	r3, [pc, #360]	@ (80012e8 <GT911_Scan+0x268>)
 800117e:	83da      	strh	r2, [r3, #30]

			Dev_Now.Touchkeytrackid[2] = buf[17];
 8001180:	7d7a      	ldrb	r2, [r7, #21]
 8001182:	4b59      	ldr	r3, [pc, #356]	@ (80012e8 <GT911_Scan+0x268>)
 8001184:	715a      	strb	r2, [r3, #5]
			Dev_Now.X[2] = ((uint16_t)buf[19] << 8) + buf[18];
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b29b      	uxth	r3, r3
 800118c:	7dba      	ldrb	r2, [r7, #22]
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b55      	ldr	r3, [pc, #340]	@ (80012e8 <GT911_Scan+0x268>)
 8001194:	819a      	strh	r2, [r3, #12]
			Dev_Now.Y[2] = ((uint16_t)buf[21] << 8) + buf[20];
 8001196:	7e7b      	ldrb	r3, [r7, #25]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b29b      	uxth	r3, r3
 800119c:	7e3a      	ldrb	r2, [r7, #24]
 800119e:	4413      	add	r3, r2
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <GT911_Scan+0x268>)
 80011a4:	82da      	strh	r2, [r3, #22]
			Dev_Now.S[2] = ((uint16_t)buf[23] << 8) + buf[22];
 80011a6:	7efb      	ldrb	r3, [r7, #27]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	7eba      	ldrb	r2, [r7, #26]
 80011ae:	4413      	add	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <GT911_Scan+0x268>)
 80011b4:	841a      	strh	r2, [r3, #32]

			Dev_Now.Touchkeytrackid[3] = buf[25];
 80011b6:	7f7a      	ldrb	r2, [r7, #29]
 80011b8:	4b4b      	ldr	r3, [pc, #300]	@ (80012e8 <GT911_Scan+0x268>)
 80011ba:	719a      	strb	r2, [r3, #6]
			Dev_Now.X[3] = ((uint16_t)buf[27] << 8) + buf[26];
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	7fba      	ldrb	r2, [r7, #30]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b47      	ldr	r3, [pc, #284]	@ (80012e8 <GT911_Scan+0x268>)
 80011ca:	81da      	strh	r2, [r3, #14]
			Dev_Now.Y[3] = ((uint16_t)buf[29] << 8) + buf[28];
 80011cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <GT911_Scan+0x268>)
 80011de:	831a      	strh	r2, [r3, #24]
			Dev_Now.S[3] = ((uint16_t)buf[31] << 8) + buf[30];
 80011e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <GT911_Scan+0x268>)
 80011f2:	845a      	strh	r2, [r3, #34]	@ 0x22

			Dev_Now.Touchkeytrackid[4] = buf[33];
 80011f4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <GT911_Scan+0x268>)
 80011fa:	71da      	strb	r2, [r3, #7]
			Dev_Now.X[4] = ((uint16_t)buf[35] << 8) + buf[34];
 80011fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b29b      	uxth	r3, r3
 8001204:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001208:	4413      	add	r3, r2
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <GT911_Scan+0x268>)
 800120e:	821a      	strh	r2, [r3, #16]
			Dev_Now.Y[4] = ((uint16_t)buf[37] << 8) + buf[36];
 8001210:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800121c:	4413      	add	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <GT911_Scan+0x268>)
 8001222:	835a      	strh	r2, [r3, #26]
			Dev_Now.S[4] = ((uint16_t)buf[39] << 8) + buf[38];
 8001224:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001230:	4413      	add	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <GT911_Scan+0x268>)
 8001236:	849a      	strh	r2, [r3, #36]	@ 0x24

			for (i = 0; i< Dev_Backup.TouchCount;i++)
 8001238:	2300      	movs	r3, #0
 800123a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800123e:	e048      	b.n	80012d2 <GT911_Scan+0x252>
			{
				if(Dev_Now.Y[i]<20)Dev_Now.Y[i]=20;
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <GT911_Scan+0x268>)
 8001246:	3308      	adds	r3, #8
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	2b13      	cmp	r3, #19
 8001250:	d807      	bhi.n	8001262 <GT911_Scan+0x1e2>
 8001252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <GT911_Scan+0x268>)
 8001258:	3308      	adds	r3, #8
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	2214      	movs	r2, #20
 8001260:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.Y[i]>GT911_MAX_HEIGHT-20)Dev_Now.Y[i]=GT911_MAX_HEIGHT-20;
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001266:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <GT911_Scan+0x268>)
 8001268:	3308      	adds	r3, #8
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	885b      	ldrh	r3, [r3, #2]
 8001270:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001274:	d908      	bls.n	8001288 <GT911_Scan+0x208>
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <GT911_Scan+0x268>)
 800127c:	3308      	adds	r3, #8
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001286:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.X[i]<20)Dev_Now.X[i]=20;
 8001288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800128c:	4a16      	ldr	r2, [pc, #88]	@ (80012e8 <GT911_Scan+0x268>)
 800128e:	3304      	adds	r3, #4
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	2b13      	cmp	r3, #19
 8001296:	d806      	bhi.n	80012a6 <GT911_Scan+0x226>
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <GT911_Scan+0x268>)
 800129e:	3304      	adds	r3, #4
 80012a0:	2114      	movs	r1, #20
 80012a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Dev_Now.X[i]>GT911_MAX_WIDTH-20)Dev_Now.X[i]=GT911_MAX_WIDTH-20;
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012aa:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <GT911_Scan+0x268>)
 80012ac:	3304      	adds	r3, #4
 80012ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b2:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 80012b6:	d907      	bls.n	80012c8 <GT911_Scan+0x248>
 80012b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <GT911_Scan+0x268>)
 80012be:	3304      	adds	r3, #4
 80012c0:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 80012c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i< Dev_Backup.TouchCount;i++)
 80012c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012cc:	3301      	adds	r3, #1
 80012ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <GT911_Scan+0x26c>)
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3b0      	bcc.n	8001240 <GT911_Scan+0x1c0>
//				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
//				BSP_LCD_FillCircle(Dev_Backup.X[i],Dev_Backup.Y[i],20);
//				BSP_LCD_DrawVLine(Dev_Backup.X[i], 1, GT911_MAX_HEIGHT - 1);
//				BSP_LCD_DrawHLine(1, Dev_Backup.Y[i], GT911_MAX_WIDTH - 1);
			}
			for (i=0;i<Dev_Now.TouchCount;i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012e4:	e06d      	b.n	80013c2 <GT911_Scan+0x342>
 80012e6:	bf00      	nop
 80012e8:	2000031c 	.word	0x2000031c
 80012ec:	20000344 	.word	0x20000344
			{
				if(Dev_Now.Y[i]<20)Dev_Now.Y[i]=20;
 80012f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f4:	4a37      	ldr	r2, [pc, #220]	@ (80013d4 <GT911_Scan+0x354>)
 80012f6:	3308      	adds	r3, #8
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	2b13      	cmp	r3, #19
 8001300:	d807      	bhi.n	8001312 <GT911_Scan+0x292>
 8001302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001306:	4a33      	ldr	r2, [pc, #204]	@ (80013d4 <GT911_Scan+0x354>)
 8001308:	3308      	adds	r3, #8
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	2214      	movs	r2, #20
 8001310:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.Y[i]>GT911_MAX_HEIGHT-20)Dev_Now.Y[i]=GT911_MAX_HEIGHT-20;
 8001312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001316:	4a2f      	ldr	r2, [pc, #188]	@ (80013d4 <GT911_Scan+0x354>)
 8001318:	3308      	adds	r3, #8
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	885b      	ldrh	r3, [r3, #2]
 8001320:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8001324:	d908      	bls.n	8001338 <GT911_Scan+0x2b8>
 8001326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800132a:	4a2a      	ldr	r2, [pc, #168]	@ (80013d4 <GT911_Scan+0x354>)
 800132c:	3308      	adds	r3, #8
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8001336:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.X[i]<20)Dev_Now.X[i]=20;
 8001338:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800133c:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <GT911_Scan+0x354>)
 800133e:	3304      	adds	r3, #4
 8001340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001344:	2b13      	cmp	r3, #19
 8001346:	d806      	bhi.n	8001356 <GT911_Scan+0x2d6>
 8001348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800134c:	4a21      	ldr	r2, [pc, #132]	@ (80013d4 <GT911_Scan+0x354>)
 800134e:	3304      	adds	r3, #4
 8001350:	2114      	movs	r1, #20
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Dev_Now.X[i]>GT911_MAX_WIDTH-20)Dev_Now.X[i]=GT911_MAX_WIDTH-20;
 8001356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800135a:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <GT911_Scan+0x354>)
 800135c:	3304      	adds	r3, #4
 800135e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001362:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 8001366:	d907      	bls.n	8001378 <GT911_Scan+0x2f8>
 8001368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <GT911_Scan+0x354>)
 800136e:	3304      	adds	r3, #4
 8001370:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8001374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				
				Dev_Backup.X[i] = Dev_Now.X[i];
 8001378:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800137c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001380:	4914      	ldr	r1, [pc, #80]	@ (80013d4 <GT911_Scan+0x354>)
 8001382:	3204      	adds	r2, #4
 8001384:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001388:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <GT911_Scan+0x358>)
 800138a:	3304      	adds	r3, #4
 800138c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				Dev_Backup.Y[i] = Dev_Now.Y[i];
 8001390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001394:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001398:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <GT911_Scan+0x354>)
 800139a:	3308      	adds	r3, #8
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	440b      	add	r3, r1
 80013a0:	8858      	ldrh	r0, [r3, #2]
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <GT911_Scan+0x358>)
 80013a4:	f102 0308 	add.w	r3, r2, #8
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	440b      	add	r3, r1
 80013ac:	4602      	mov	r2, r0
 80013ae:	805a      	strh	r2, [r3, #2]
				Dev_Backup.TouchCount = Dev_Now.TouchCount;		
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <GT911_Scan+0x354>)
 80013b2:	789a      	ldrb	r2, [r3, #2]
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <GT911_Scan+0x358>)
 80013b6:	709a      	strb	r2, [r3, #2]
			for (i=0;i<Dev_Now.TouchCount;i++)
 80013b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013bc:	3301      	adds	r3, #1
 80013be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <GT911_Scan+0x354>)
 80013c4:	789b      	ldrb	r3, [r3, #2]
 80013c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d390      	bcc.n	80012f0 <GT911_Scan+0x270>
//				BSP_LCD_DrawVLine(Dev_Now.X[i], 1, GT911_MAX_HEIGHT - 1);
//				BSP_LCD_DrawHLine(1, Dev_Now.Y[i], GT911_MAX_WIDTH - 1);
			}
		}	
	}
}
 80013ce:	3730      	adds	r7, #48	@ 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000031c 	.word	0x2000031c
 80013d8:	20000344 	.word	0x20000344

080013dc <GT911_TEST>:

void GT911_TEST(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	uint8_t config_Checksum = 0,i;
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]

	printf("GT911_TEST\r\n");
 80013e6:	4898      	ldr	r0, [pc, #608]	@ (8001648 <GT911_TEST+0x26c>)
 80013e8:	f02c fd40 	bl	802de6c <puts>
	GT911_Reset_Sequence();
 80013ec:	f7ff fd12 	bl	8000e14 <GT911_Reset_Sequence>

	CT_I2C_Init();
 80013f0:	f7ff fb7a 	bl	8000ae8 <CT_I2C_Init>

	GT911_ReadStatue();
 80013f4:	f7ff fe00 	bl	8000ff8 <GT911_ReadStatue>

	//debug
	GT911_RD_Reg(GT911_CONFIG_REG, (uint8_t *)&s_GT911_CfgParams[0], 186);
 80013f8:	22ba      	movs	r2, #186	@ 0xba
 80013fa:	4994      	ldr	r1, [pc, #592]	@ (800164c <GT911_TEST+0x270>)
 80013fc:	f248 0047 	movw	r0, #32839	@ 0x8047
 8001400:	f7ff fdb0 	bl	8000f64 <GT911_RD_Reg>

	for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 8001404:	2300      	movs	r3, #0
 8001406:	71bb      	strb	r3, [r7, #6]
 8001408:	e021      	b.n	800144e <GT911_TEST+0x72>
	{
		config_Checksum += s_GT911_CfgParams[i];
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	4a8f      	ldr	r2, [pc, #572]	@ (800164c <GT911_TEST+0x270>)
 800140e:	5cd2      	ldrb	r2, [r2, r3]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4413      	add	r3, r2
 8001414:	71fb      	strb	r3, [r7, #7]

		printf("0x%02X  ", s_GT911_CfgParams[i]);
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	4a8c      	ldr	r2, [pc, #560]	@ (800164c <GT911_TEST+0x270>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	4619      	mov	r1, r3
 800141e:	488c      	ldr	r0, [pc, #560]	@ (8001650 <GT911_TEST+0x274>)
 8001420:	f02c fcbc 	bl	802dd9c <iprintf>
		if ((i+1)%10==0)
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	4b8a      	ldr	r3, [pc, #552]	@ (8001654 <GT911_TEST+0x278>)
 800142a:	fb83 2301 	smull	r2, r3, r3, r1
 800142e:	109a      	asrs	r2, r3, #2
 8001430:	17cb      	asrs	r3, r1, #31
 8001432:	1ad2      	subs	r2, r2, r3
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	1aca      	subs	r2, r1, r3
 800143e:	2a00      	cmp	r2, #0
 8001440:	d102      	bne.n	8001448 <GT911_TEST+0x6c>
			printf("\r\n");
 8001442:	4885      	ldr	r0, [pc, #532]	@ (8001658 <GT911_TEST+0x27c>)
 8001444:	f02c fd12 	bl	802de6c <puts>
	for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	3301      	adds	r3, #1
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	2bb7      	cmp	r3, #183	@ 0xb7
 8001452:	d9da      	bls.n	800140a <GT911_TEST+0x2e>
	}
	printf("0x%02X  0x%02X\r\nconfig_Checksum=0x%2X\r\n", s_GT911_CfgParams[184],s_GT911_CfgParams[185], ((~config_Checksum)+1)&0xff);
 8001454:	4b7d      	ldr	r3, [pc, #500]	@ (800164c <GT911_TEST+0x270>)
 8001456:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800145a:	4619      	mov	r1, r3
 800145c:	4b7b      	ldr	r3, [pc, #492]	@ (800164c <GT911_TEST+0x270>)
 800145e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8001462:	461a      	mov	r2, r3
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	425b      	negs	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	487c      	ldr	r0, [pc, #496]	@ (800165c <GT911_TEST+0x280>)
 800146c:	f02c fc96 	bl	802dd9c <iprintf>

	if (s_GT911_CfgParams[184] == (((~config_Checksum)+1)&0xff))
 8001470:	4b76      	ldr	r3, [pc, #472]	@ (800164c <GT911_TEST+0x270>)
 8001472:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001476:	461a      	mov	r2, r3
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	425b      	negs	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	429a      	cmp	r2, r3
 8001480:	f040 80dc 	bne.w	800163c <GT911_TEST+0x260>
	{
		printf("READ CONFIG SUCCESS!\r\n");
 8001484:	4876      	ldr	r0, [pc, #472]	@ (8001660 <GT911_TEST+0x284>)
 8001486:	f02c fcf1 	bl	802de6c <puts>
		printf("%d*%d\r\n",s_GT911_CfgParams[2]<<8|s_GT911_CfgParams[1],s_GT911_CfgParams[4]<<8|s_GT911_CfgParams[3]);
 800148a:	4b70      	ldr	r3, [pc, #448]	@ (800164c <GT911_TEST+0x270>)
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <GT911_TEST+0x270>)
 8001492:	7852      	ldrb	r2, [r2, #1]
 8001494:	ea43 0102 	orr.w	r1, r3, r2
 8001498:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <GT911_TEST+0x270>)
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	4a6b      	ldr	r2, [pc, #428]	@ (800164c <GT911_TEST+0x270>)
 80014a0:	78d2      	ldrb	r2, [r2, #3]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	486f      	ldr	r0, [pc, #444]	@ (8001664 <GT911_TEST+0x288>)
 80014a8:	f02c fc78 	bl	802dd9c <iprintf>

		if ((GT911_MAX_WIDTH != (s_GT911_CfgParams[2]<<8|s_GT911_CfgParams[1])) || (GT911_MAX_HEIGHT != (s_GT911_CfgParams[4]<<8|s_GT911_CfgParams[3])))
 80014ac:	4b67      	ldr	r3, [pc, #412]	@ (800164c <GT911_TEST+0x270>)
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4a66      	ldr	r2, [pc, #408]	@ (800164c <GT911_TEST+0x270>)
 80014b4:	7852      	ldrb	r2, [r2, #1]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80014bc:	d109      	bne.n	80014d2 <GT911_TEST+0xf6>
 80014be:	4b63      	ldr	r3, [pc, #396]	@ (800164c <GT911_TEST+0x270>)
 80014c0:	791b      	ldrb	r3, [r3, #4]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	4a61      	ldr	r2, [pc, #388]	@ (800164c <GT911_TEST+0x270>)
 80014c6:	78d2      	ldrb	r2, [r2, #3]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80014ce:	f000 80b5 	beq.w	800163c <GT911_TEST+0x260>
		{
			s_GT911_CfgParams[1] = GT911_MAX_WIDTH&0xff;
 80014d2:	4b5e      	ldr	r3, [pc, #376]	@ (800164c <GT911_TEST+0x270>)
 80014d4:	2220      	movs	r2, #32
 80014d6:	705a      	strb	r2, [r3, #1]
			s_GT911_CfgParams[2] = GT911_MAX_WIDTH>>8;
 80014d8:	4b5c      	ldr	r3, [pc, #368]	@ (800164c <GT911_TEST+0x270>)
 80014da:	2203      	movs	r2, #3
 80014dc:	709a      	strb	r2, [r3, #2]
			s_GT911_CfgParams[3] = GT911_MAX_HEIGHT&0xff;
 80014de:	4b5b      	ldr	r3, [pc, #364]	@ (800164c <GT911_TEST+0x270>)
 80014e0:	22e0      	movs	r2, #224	@ 0xe0
 80014e2:	70da      	strb	r2, [r3, #3]
			s_GT911_CfgParams[4] = GT911_MAX_HEIGHT>>8;
 80014e4:	4b59      	ldr	r3, [pc, #356]	@ (800164c <GT911_TEST+0x270>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	711a      	strb	r2, [r3, #4]
			s_GT911_CfgParams[185] = 1;
 80014ea:	4b58      	ldr	r3, [pc, #352]	@ (800164c <GT911_TEST+0x270>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

			printf("%d*%d\r\n",s_GT911_CfgParams[2]<<8|s_GT911_CfgParams[1],s_GT911_CfgParams[4]<<8|s_GT911_CfgParams[3]);
 80014f2:	4b56      	ldr	r3, [pc, #344]	@ (800164c <GT911_TEST+0x270>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4a54      	ldr	r2, [pc, #336]	@ (800164c <GT911_TEST+0x270>)
 80014fa:	7852      	ldrb	r2, [r2, #1]
 80014fc:	ea43 0102 	orr.w	r1, r3, r2
 8001500:	4b52      	ldr	r3, [pc, #328]	@ (800164c <GT911_TEST+0x270>)
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4a51      	ldr	r2, [pc, #324]	@ (800164c <GT911_TEST+0x270>)
 8001508:	78d2      	ldrb	r2, [r2, #3]
 800150a:	4313      	orrs	r3, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4855      	ldr	r0, [pc, #340]	@ (8001664 <GT911_TEST+0x288>)
 8001510:	f02c fc44 	bl	802dd9c <iprintf>

			config_Checksum = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	71fb      	strb	r3, [r7, #7]
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 8001518:	2300      	movs	r3, #0
 800151a:	71bb      	strb	r3, [r7, #6]
 800151c:	e008      	b.n	8001530 <GT911_TEST+0x154>
			{
				config_Checksum += s_GT911_CfgParams[i];
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	4a4a      	ldr	r2, [pc, #296]	@ (800164c <GT911_TEST+0x270>)
 8001522:	5cd2      	ldrb	r2, [r2, r3]
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4413      	add	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	3301      	adds	r3, #1
 800152e:	71bb      	strb	r3, [r7, #6]
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2bb7      	cmp	r3, #183	@ 0xb7
 8001534:	d9f3      	bls.n	800151e <GT911_TEST+0x142>
			}
			s_GT911_CfgParams[184] = (~config_Checksum)+1;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	425b      	negs	r3, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <GT911_TEST+0x270>)
 800153e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			printf("config_Checksum=0x%2X\r\n",s_GT911_CfgParams[184]);
 8001542:	4b42      	ldr	r3, [pc, #264]	@ (800164c <GT911_TEST+0x270>)
 8001544:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001548:	4619      	mov	r1, r3
 800154a:	4847      	ldr	r0, [pc, #284]	@ (8001668 <GT911_TEST+0x28c>)
 800154c:	f02c fc26 	bl	802dd9c <iprintf>

			printf("\r\n*************************\r\n");
 8001550:	4846      	ldr	r0, [pc, #280]	@ (800166c <GT911_TEST+0x290>)
 8001552:	f02c fc8b 	bl	802de6c <puts>
			for(i=0;i<sizeof(s_GT911_CfgParams);i++)
 8001556:	2300      	movs	r3, #0
 8001558:	71bb      	strb	r3, [r7, #6]
 800155a:	e01b      	b.n	8001594 <GT911_TEST+0x1b8>
			{
				printf("0x%02X  ", s_GT911_CfgParams[i]);
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	4a3b      	ldr	r2, [pc, #236]	@ (800164c <GT911_TEST+0x270>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	4619      	mov	r1, r3
 8001564:	483a      	ldr	r0, [pc, #232]	@ (8001650 <GT911_TEST+0x274>)
 8001566:	f02c fc19 	bl	802dd9c <iprintf>
				if ((i+1)%10==0)
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	1c59      	adds	r1, r3, #1
 800156e:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <GT911_TEST+0x278>)
 8001570:	fb83 2301 	smull	r2, r3, r3, r1
 8001574:	109a      	asrs	r2, r3, #2
 8001576:	17cb      	asrs	r3, r1, #31
 8001578:	1ad2      	subs	r2, r2, r3
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	1aca      	subs	r2, r1, r3
 8001584:	2a00      	cmp	r2, #0
 8001586:	d102      	bne.n	800158e <GT911_TEST+0x1b2>
					printf("\r\n");
 8001588:	4833      	ldr	r0, [pc, #204]	@ (8001658 <GT911_TEST+0x27c>)
 800158a:	f02c fc6f 	bl	802de6c <puts>
			for(i=0;i<sizeof(s_GT911_CfgParams);i++)
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	3301      	adds	r3, #1
 8001592:	71bb      	strb	r3, [r7, #6]
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	2bb9      	cmp	r3, #185	@ 0xb9
 8001598:	d9e0      	bls.n	800155c <GT911_TEST+0x180>
			}
			printf("\r\n*************************\r\n");
 800159a:	4834      	ldr	r0, [pc, #208]	@ (800166c <GT911_TEST+0x290>)
 800159c:	f02c fc66 	bl	802de6c <puts>
			GT911_WR_Reg(GT911_CONFIG_REG, (uint8_t *)s_GT911_CfgParams, sizeof(s_GT911_CfgParams));
 80015a0:	22ba      	movs	r2, #186	@ 0xba
 80015a2:	492a      	ldr	r1, [pc, #168]	@ (800164c <GT911_TEST+0x270>)
 80015a4:	f248 0047 	movw	r0, #32839	@ 0x8047
 80015a8:	f7ff fc9a 	bl	8000ee0 <GT911_WR_Reg>


			GT911_RD_Reg(GT911_CONFIG_REG, (uint8_t *)&s_GT911_CfgParams[0], 186);
 80015ac:	22ba      	movs	r2, #186	@ 0xba
 80015ae:	4927      	ldr	r1, [pc, #156]	@ (800164c <GT911_TEST+0x270>)
 80015b0:	f248 0047 	movw	r0, #32839	@ 0x8047
 80015b4:	f7ff fcd6 	bl	8000f64 <GT911_RD_Reg>

			config_Checksum = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	71fb      	strb	r3, [r7, #7]
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	71bb      	strb	r3, [r7, #6]
 80015c0:	e021      	b.n	8001606 <GT911_TEST+0x22a>
			{
				config_Checksum += s_GT911_CfgParams[i];
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	4a21      	ldr	r2, [pc, #132]	@ (800164c <GT911_TEST+0x270>)
 80015c6:	5cd2      	ldrb	r2, [r2, r3]
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4413      	add	r3, r2
 80015cc:	71fb      	strb	r3, [r7, #7]

				printf("0x%02X  ", s_GT911_CfgParams[i]);
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <GT911_TEST+0x270>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	4619      	mov	r1, r3
 80015d6:	481e      	ldr	r0, [pc, #120]	@ (8001650 <GT911_TEST+0x274>)
 80015d8:	f02c fbe0 	bl	802dd9c <iprintf>
				if ((i+1)%10==0)
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	1c59      	adds	r1, r3, #1
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <GT911_TEST+0x278>)
 80015e2:	fb83 2301 	smull	r2, r3, r3, r1
 80015e6:	109a      	asrs	r2, r3, #2
 80015e8:	17cb      	asrs	r3, r1, #31
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	1aca      	subs	r2, r1, r3
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d102      	bne.n	8001600 <GT911_TEST+0x224>
					printf("\r\n");
 80015fa:	4817      	ldr	r0, [pc, #92]	@ (8001658 <GT911_TEST+0x27c>)
 80015fc:	f02c fc36 	bl	802de6c <puts>
			for(i=0;i<sizeof(s_GT911_CfgParams)-2;i++)
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	3301      	adds	r3, #1
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	2bb7      	cmp	r3, #183	@ 0xb7
 800160a:	d9da      	bls.n	80015c2 <GT911_TEST+0x1e6>
			}
			printf("0x%02X  ", s_GT911_CfgParams[184]);
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <GT911_TEST+0x270>)
 800160e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001612:	4619      	mov	r1, r3
 8001614:	480e      	ldr	r0, [pc, #56]	@ (8001650 <GT911_TEST+0x274>)
 8001616:	f02c fbc1 	bl	802dd9c <iprintf>
			printf("0x%02X  ", s_GT911_CfgParams[185]);
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <GT911_TEST+0x270>)
 800161c:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <GT911_TEST+0x274>)
 8001624:	f02c fbba 	bl	802dd9c <iprintf>
			printf("\r\n");
 8001628:	480b      	ldr	r0, [pc, #44]	@ (8001658 <GT911_TEST+0x27c>)
 800162a:	f02c fc1f 	bl	802de6c <puts>
			printf("config_Checksum=0x%2X\r\n",((~config_Checksum)+1)&0xff);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	425b      	negs	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	480c      	ldr	r0, [pc, #48]	@ (8001668 <GT911_TEST+0x28c>)
 8001638:	f02c fbb0 	bl	802dd9c <iprintf>
		}

	}
//debug end

	GT911_ReadFirmwareVersion();
 800163c:	f7ff fd02 	bl	8001044 <GT911_ReadFirmwareVersion>

	while(1)
	{
		GT911_Scan();
 8001640:	f7ff fd1e 	bl	8001080 <GT911_Scan>
 8001644:	e7fc      	b.n	8001640 <GT911_TEST+0x264>
 8001646:	bf00      	nop
 8001648:	0802ec50 	.word	0x0802ec50
 800164c:	2000036c 	.word	0x2000036c
 8001650:	0802ec5c 	.word	0x0802ec5c
 8001654:	66666667 	.word	0x66666667
 8001658:	0802ec68 	.word	0x0802ec68
 800165c:	0802ec6c 	.word	0x0802ec6c
 8001660:	0802ec94 	.word	0x0802ec94
 8001664:	0802ecac 	.word	0x0802ecac
 8001668:	0802ecb4 	.word	0x0802ecb4
 800166c:	0802eccc 	.word	0x0802eccc

08001670 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a07      	ldr	r2, [pc, #28]	@ (800169c <vApplicationGetIdleTaskMemory+0x2c>)
 8001680:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001686:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000428 	.word	0x20000428
 80016a0:	200004c8 	.word	0x200004c8

080016a4 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2201      	movs	r2, #1
 80016c2:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80016ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f004 fcdb 	bl	800608c <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f001 fc9e 	bl	8003018 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2210      	movs	r2, #16
 80016e6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80016f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f004 fcc6 	bl	800608c <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2203      	movs	r2, #3
 8001704:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2210      	movs	r2, #16
 800170a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2208      	movs	r2, #8
 8001710:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f004 fcb4 	bl	800608c <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001724:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001728:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2204      	movs	r2, #4
 800172e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2210      	movs	r2, #16
 8001734:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f004 fc9f 	bl	800608c <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6959      	ldr	r1, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f640 2318 	movw	r3, #2584	@ 0xa18
 800175c:	430b      	orrs	r3, r1
 800175e:	6153      	str	r3, [r2, #20]

}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b096      	sub	sp, #88	@ 0x58
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f001 fc26 	bl	8002fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f879 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 fb0d 	bl	8001d94 <MX_GPIO_Init>
  MX_FMC_Init();
 800177a:	f000 fab5 	bl	8001ce8 <MX_FMC_Init>
  MX_LTDC_Init();
 800177e:	f000 f935 	bl	80019ec <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001782:	f000 f901 	bl	8001988 <MX_DMA2D_Init>
  MX_TIM3_Init();
 8001786:	f000 fa39 	bl	8001bfc <MX_TIM3_Init>
  MX_CRC_Init();
 800178a:	f000 f8db 	bl	8001944 <MX_CRC_Init>
  MX_QUADSPI_Init();
 800178e:	f000 f9af 	bl	8001af0 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 8001792:	f000 f9e7 	bl	8001b64 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 8001796:	f008 fb98 	bl	8009eca <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800179a:	f008 fb8f 	bl	8009ebc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	4827      	ldr	r0, [pc, #156]	@ (8001840 <main+0xd8>)
 80017a4:	f002 fa50 	bl	8003c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ae:	4825      	ldr	r0, [pc, #148]	@ (8001844 <main+0xdc>)
 80017b0:	f002 fa4a 	bl	8003c48 <HAL_GPIO_WritePin>
  htim3.Instance->CCR2 = 1;
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <main+0xe0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // Start PWM on channel 2
 80017bc:	2104      	movs	r1, #4
 80017be:	4822      	ldr	r0, [pc, #136]	@ (8001848 <main+0xe0>)
 80017c0:	f004 fdca 	bl	8006358 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80017c4:	4821      	ldr	r0, [pc, #132]	@ (800184c <main+0xe4>)
 80017c6:	f004 fced 	bl	80061a4 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <main+0xe8>)
 80017cc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80017d0:	461d      	mov	r5, r3
 80017d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 ff50 	bl	800768a <osThreadCreate>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <main+0xec>)
 80017ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 8192);
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <main+0xf0>)
 80017f2:	f107 0420 	add.w	r4, r7, #32
 80017f6:	461d      	mov	r5, r3
 80017f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f005 ff3d 	bl	800768a <osThreadCreate>
 8001810:	4603      	mov	r3, r0
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <main+0xf4>)
 8001814:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <main+0xf8>)
 8001818:	1d3c      	adds	r4, r7, #4
 800181a:	461d      	mov	r5, r3
 800181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f005 ff2c 	bl	800768a <osThreadCreate>
 8001832:	4603      	mov	r3, r0
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <main+0xfc>)
 8001836:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001838:	f005 ff20 	bl	800767c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <main+0xd4>
 8001840:	40021000 	.word	0x40021000
 8001844:	40020400 	.word	0x40020400
 8001848:	2000086c 	.word	0x2000086c
 800184c:	20000820 	.word	0x20000820
 8001850:	0802ecf8 	.word	0x0802ecf8
 8001854:	200008ec 	.word	0x200008ec
 8001858:	0802ed20 	.word	0x0802ed20
 800185c:	200008f0 	.word	0x200008f0
 8001860:	0802ed48 	.word	0x0802ed48
 8001864:	200008f4 	.word	0x200008f4

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2230      	movs	r2, #48	@ 0x30
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f02c fbd8 	bl	802e02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <SystemClock_Config+0xd4>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	4a2a      	ldr	r2, [pc, #168]	@ (800193c <SystemClock_Config+0xd4>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	@ 0x40
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <SystemClock_Config+0xd4>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <SystemClock_Config+0xd8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <SystemClock_Config+0xd8>)
 80018aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <SystemClock_Config+0xd8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018d0:	2319      	movs	r3, #25
 80018d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80018d4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018da:	2302      	movs	r3, #2
 80018dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018de:	2302      	movs	r3, #2
 80018e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fb04 	bl	8004ef4 <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018f2:	f000 fb6b 	bl	8001fcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018f6:	f002 fd7d 	bl	80043f4 <HAL_PWREx_EnableOverDrive>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001900:	f000 fb64 	bl	8001fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001910:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2107      	movs	r1, #7
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fd8a 	bl	800543c <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800192e:	f000 fb4d 	bl	8001fcc <Error_Handler>
  }
}
 8001932:	bf00      	nop
 8001934:	3750      	adds	r7, #80	@ 0x50
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000

08001944 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <MX_CRC_Init+0x3c>)
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <MX_CRC_Init+0x40>)
 800194c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <MX_CRC_Init+0x3c>)
 8001950:	2200      	movs	r2, #0
 8001952:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001954:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <MX_CRC_Init+0x3c>)
 8001956:	2200      	movs	r2, #0
 8001958:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <MX_CRC_Init+0x3c>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <MX_CRC_Init+0x3c>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <MX_CRC_Init+0x3c>)
 8001968:	2201      	movs	r2, #1
 800196a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <MX_CRC_Init+0x3c>)
 800196e:	f001 fc59 	bl	8003224 <HAL_CRC_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001978:	f000 fb28 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200006c8 	.word	0x200006c8
 8001984:	40023000 	.word	0x40023000

08001988 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 800198e:	4a16      	ldr	r2, [pc, #88]	@ (80019e8 <MX_DMA2D_Init+0x60>)
 8001990:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80019bc:	4809      	ldr	r0, [pc, #36]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019be:	f001 fd93 	bl	80034e8 <HAL_DMA2D_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80019c8:	f000 fb00 	bl	8001fcc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80019cc:	2101      	movs	r1, #1
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <MX_DMA2D_Init+0x5c>)
 80019d0:	f001 fee4 	bl	800379c <HAL_DMA2D_ConfigLayer>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80019da:	f000 faf7 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200006ec 	.word	0x200006ec
 80019e8:	4002b000 	.word	0x4002b000

080019ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	@ 0x38
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2234      	movs	r2, #52	@ 0x34
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f02c fb17 	bl	802e02c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80019fe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a00:	4a3a      	ldr	r2, [pc, #232]	@ (8001aec <MX_LTDC_Init+0x100>)
 8001a02:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a04:	4b38      	ldr	r3, [pc, #224]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a10:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8001a1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001a22:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 46;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a2a:	222e      	movs	r2, #46	@ 0x2e
 8001a2c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 23;
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a30:	2217      	movs	r2, #23
 8001a32:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 846;
 8001a34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a36:	f240 324e 	movw	r2, #846	@ 0x34e
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 503;
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a3e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 1056;
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a46:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 525;
 8001a4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a4e:	f240 220d 	movw	r2, #525	@ 0x20d
 8001a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a64:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a6c:	481e      	ldr	r0, [pc, #120]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001a6e:	f002 f929 	bl	8003cc4 <HAL_LTDC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001a78:	f000 faa8 	bl	8001fcc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001a80:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001a84:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001a8a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001a8e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a94:	23ff      	movs	r3, #255	@ 0xff
 8001a96:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001aa6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 8001aac:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001ab2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2200      	movs	r2, #0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_LTDC_Init+0xfc>)
 8001ad2:	f002 fa7f 	bl	8003fd4 <HAL_LTDC_ConfigLayer>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001adc:	f000 fa76 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3738      	adds	r7, #56	@ 0x38
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000072c 	.word	0x2000072c
 8001aec:	40016800 	.word	0x40016800

08001af0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001af6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b60 <MX_QUADSPI_Init+0x70>)
 8001af8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b02:	2204      	movs	r2, #4
 8001b04:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b08:	2210      	movs	r2, #16
 8001b0a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b0e:	221f      	movs	r2, #31
 8001b10:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b18:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <MX_QUADSPI_Init+0x6c>)
 8001b2e:	f002 fcb1 	bl	8004494 <HAL_QSPI_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001b38:	f000 fa48 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  if (CSP_QUADSPI_Init() != HAL_OK)Error_Handler();
 8001b3c:	f000 fa4c 	bl	8001fd8 <CSP_QUADSPI_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_QUADSPI_Init+0x5a>
 8001b46:	f000 fa41 	bl	8001fcc <Error_Handler>
  if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)Error_Handler();
 8001b4a:	f000 fbf1 	bl	8002330 <CSP_QSPI_EnableMemoryMappedMode>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_QUADSPI_Init+0x68>
 8001b54:	f000 fa3a 	bl	8001fcc <Error_Handler>
  /* USER CODE END QUADSPI_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200007d4 	.word	0x200007d4
 8001b60:	a0001000 	.word	0xa0001000

08001b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001b84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 54;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001b8c:	2236      	movs	r2, #54	@ 0x36
 8001b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001b98:	2232      	movs	r2, #50	@ 0x32
 8001b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001baa:	f004 faa4 	bl	80060f6 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bb4:	f000 fa0a 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001bc6:	f004 fedd 	bl	8006984 <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f000 f9fc 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM2_Init+0x94>)
 8001be2:	f005 fb8b 	bl	80072fc <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bec:	f000 f9ee 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000820 	.word	0x20000820

08001bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	@ 0x38
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c30:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce4 <MX_TIM3_Init+0xe8>)
 8001c32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 8001c34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c36:	226c      	movs	r2, #108	@ 0x6c
 8001c38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001c40:	4b27      	ldr	r3, [pc, #156]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c42:	2264      	movs	r2, #100	@ 0x64
 8001c44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c52:	4823      	ldr	r0, [pc, #140]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c54:	f004 fa4f 	bl	80060f6 <HAL_TIM_Base_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c5e:	f000 f9b5 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	481c      	ldr	r0, [pc, #112]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c70:	f004 fe88 	bl	8006984 <HAL_TIM_ConfigClockSource>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c7a:	f000 f9a7 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c7e:	4818      	ldr	r0, [pc, #96]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c80:	f004 fb08 	bl	8006294 <HAL_TIM_PWM_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c8a:	f000 f99f 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4810      	ldr	r0, [pc, #64]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001c9e:	f005 fb2d 	bl	80072fc <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ca8:	f000 f990 	bl	8001fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cac:	2360      	movs	r3, #96	@ 0x60
 8001cae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001cb0:	2332      	movs	r3, #50	@ 0x32
 8001cb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4807      	ldr	r0, [pc, #28]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001cc4:	f004 fd4a 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cce:	f000 f97d 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cd2:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <MX_TIM3_Init+0xe4>)
 8001cd4:	f000 fe7e 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001cd8:	bf00      	nop
 8001cda:	3738      	adds	r7, #56	@ 0x38
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000086c 	.word	0x2000086c
 8001ce4:	40000400 	.word	0x40000400

08001ce8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <MX_FMC_Init+0xa8>)
 8001d04:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d14:	2208      	movs	r2, #8
 8001d16:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d20:	2240      	movs	r2, #64	@ 0x40
 8001d22:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d26:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d2a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d38:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 8001d50:	2305      	movs	r3, #5
 8001d52:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001d54:	2307      	movs	r3, #7
 8001d56:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d6a:	f004 f95b 	bl	8006024 <HAL_SDRAM_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d74:	f000 f92a 	bl	8001fcc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &SdramTiming);
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <MX_FMC_Init+0xa4>)
 8001d7e:	f7ff fc91 	bl	80016a4 <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200008b8 	.word	0x200008b8
 8001d90:	a0000140 	.word	0xa0000140

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b090      	sub	sp, #64	@ 0x40
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001daa:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a69      	ldr	r2, [pc, #420]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b64      	ldr	r3, [pc, #400]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a63      	ldr	r2, [pc, #396]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b5e      	ldr	r3, [pc, #376]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a5d      	ldr	r2, [pc, #372]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df2:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e0a:	4b52      	ldr	r3, [pc, #328]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a51      	ldr	r2, [pc, #324]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b4f      	ldr	r3, [pc, #316]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a4b      	ldr	r2, [pc, #300]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b49      	ldr	r3, [pc, #292]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e3a:	4b46      	ldr	r3, [pc, #280]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a45      	ldr	r2, [pc, #276]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b43      	ldr	r3, [pc, #268]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e52:	4b40      	ldr	r3, [pc, #256]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a3f      	ldr	r2, [pc, #252]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a39      	ldr	r2, [pc, #228]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e70:	f043 0320 	orr.w	r3, r3, #32
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b37      	ldr	r3, [pc, #220]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a33      	ldr	r2, [pc, #204]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <MX_GPIO_Init+0x1c0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2140      	movs	r1, #64	@ 0x40
 8001eb6:	4828      	ldr	r0, [pc, #160]	@ (8001f58 <MX_GPIO_Init+0x1c4>)
 8001eb8:	f001 fec6 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|ClrWDT_Pin, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001ec2:	4826      	ldr	r0, [pc, #152]	@ (8001f5c <MX_GPIO_Init+0x1c8>)
 8001ec4:	f001 fec0 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001ec8:	2340      	movs	r3, #64	@ 0x40
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001edc:	4619      	mov	r1, r3
 8001ede:	481e      	ldr	r0, [pc, #120]	@ (8001f58 <MX_GPIO_Init+0x1c4>)
 8001ee0:	f001 fcee 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ee4:	2330      	movs	r3, #48	@ 0x30
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee8:	2312      	movs	r3, #18
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001efc:	4619      	mov	r1, r3
 8001efe:	4818      	ldr	r0, [pc, #96]	@ (8001f60 <MX_GPIO_Init+0x1cc>)
 8001f00:	f001 fcde 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <MX_GPIO_Init+0x1d0>)
 8001f1a:	f001 fcd1 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin ClrWDT_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|ClrWDT_Pin;
 8001f1e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f34:	4619      	mov	r1, r3
 8001f36:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <MX_GPIO_Init+0x1c8>)
 8001f38:	f001 fcc2 	bl	80038c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2105      	movs	r1, #5
 8001f40:	2006      	movs	r0, #6
 8001f42:	f001 f945 	bl	80031d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f46:	2006      	movs	r0, #6
 8001f48:	f001 f95e 	bl	8003208 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3740      	adds	r7, #64	@ 0x40
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40021c00 	.word	0x40021c00
 8001f64:	40022400 	.word	0x40022400

08001f68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f005 fbd6 	bl	8007722 <osDelay>
 8001f76:	e7fb      	b.n	8001f70 <StartDefaultTask+0x8>

08001f78 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	MX_TouchGFX_Process();
 8001f80:	f007 ffab 	bl	8009eda <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f005 fbcc 	bl	8007722 <osDelay>
 8001f8a:	e7fb      	b.n	8001f84 <StartTask02+0xc>

08001f8c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	  osDelay(100);
 8001f94:	2064      	movs	r0, #100	@ 0x64
 8001f96:	f005 fbc4 	bl	8007722 <osDelay>
	  GT911_TEST();
 8001f9a:	f7ff fa1f 	bl	80013dc <GT911_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f005 fbbf 	bl	8007722 <osDelay>
 8001fa4:	e7fb      	b.n	8001f9e <StartTask03+0x12>
	...

08001fa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fba:	f001 f80d 	bl	8002fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40001000 	.word	0x40001000

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <Error_Handler+0x8>

08001fd8 <CSP_QUADSPI_Init>:
//}

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
//		return HAL_ERROR;
//	}
//
//	MX_QUADSPI_Init();

	if (QSPI_ResetChip() != HAL_OK) {
 8001fdc:	f000 f9e6 	bl	80023ac <QSPI_ResetChip>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <CSP_QUADSPI_Init+0x12>
		return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e01b      	b.n	8002022 <CSP_QUADSPI_Init+0x4a>
	}

	HAL_Delay(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f001 f814 	bl	8003018 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001ff0:	f000 f81a 	bl	8002028 <QSPI_AutoPollingMemReady>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <CSP_QUADSPI_Init+0x26>
		return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e011      	b.n	8002022 <CSP_QUADSPI_Init+0x4a>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8001ffe:	f000 f85f 	bl	80020c0 <QSPI_WriteEnable>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <CSP_QUADSPI_Init+0x34>

		return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e00a      	b.n	8002022 <CSP_QUADSPI_Init+0x4a>
	}

	if (QSPI_Configuration() != HAL_OK) {
 800200c:	f000 f8ba 	bl	8002184 <QSPI_Configuration>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <CSP_QUADSPI_Init+0x42>
		return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e003      	b.n	8002022 <CSP_QUADSPI_Init+0x4a>
	}

	HAL_Delay(100);
 800201a:	2064      	movs	r0, #100	@ 0x64
 800201c:	f000 fffc 	bl	8003018 <HAL_Delay>

	return HAL_OK;
 8002020:	2300      	movs	r3, #0

}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <QSPI_AutoPollingMemReady>:

	return HAL_OK;

}

uint8_t QSPI_AutoPollingMemReady(void) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b096      	sub	sp, #88	@ 0x58
 800202c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	2238      	movs	r2, #56	@ 0x38
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f02b fff8 	bl	802e02c <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800204c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002050:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8002052:	2305      	movs	r3, #5
 8002054:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800205a:	2300      	movs	r3, #0
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800205e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002062:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800206c:	2300      	movs	r3, #0
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002070:	2300      	movs	r3, #0
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50

	sConfig.Match = 0x00;
 8002074:	2300      	movs	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8002078:	2301      	movs	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8002084:	2310      	movs	r3, #16
 8002086:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002088:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800208c:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800208e:	1d3a      	adds	r2, r7, #4
 8002090:	f107 011c 	add.w	r1, r7, #28
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	4808      	ldr	r0, [pc, #32]	@ (80020bc <QSPI_AutoPollingMemReady+0x94>)
 800209a:	f002 fc0e 	bl	80048ba <HAL_QSPI_AutoPolling>
 800209e:	4603      	mov	r3, r0
 80020a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80020a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 80020ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80020b0:	e000      	b.n	80020b4 <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3758      	adds	r7, #88	@ 0x58
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200007d4 	.word	0x200007d4

080020c0 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b096      	sub	sp, #88	@ 0x58
 80020c4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	2238      	movs	r2, #56	@ 0x38
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f02b ffac 	bl	802e02c <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80020e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80020ea:	2306      	movs	r3, #6
 80020ec:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002102:	2300      	movs	r3, #0
 8002104:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002106:	2300      	movs	r3, #0
 8002108:	653b      	str	r3, [r7, #80]	@ 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4619      	mov	r1, r3
 8002114:	481a      	ldr	r0, [pc, #104]	@ (8002180 <QSPI_WriteEnable+0xc0>)
 8002116:	f002 fa39 	bl	800458c <HAL_QSPI_Command>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002120:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002128:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800212c:	e024      	b.n	8002178 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 800212e:	2302      	movs	r3, #2
 8002130:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8002132:	2302      	movs	r3, #2
 8002134:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 800213e:	2310      	movs	r3, #16
 8002140:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002142:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002146:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8002148:	2305      	movs	r3, #5
 800214a:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800214c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002150:	643b      	str	r3, [r7, #64]	@ 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8002152:	1d3a      	adds	r2, r7, #4
 8002154:	f107 011c 	add.w	r1, r7, #28
 8002158:	f241 3388 	movw	r3, #5000	@ 0x1388
 800215c:	4808      	ldr	r0, [pc, #32]	@ (8002180 <QSPI_WriteEnable+0xc0>)
 800215e:	f002 fbac 	bl	80048ba <HAL_QSPI_AutoPolling>
 8002162:	4603      	mov	r3, r0
 8002164:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002168:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002170:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002174:	e000      	b.n	8002178 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3758      	adds	r7, #88	@ 0x58
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200007d4 	.word	0x200007d4

08002184 <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b090      	sub	sp, #64	@ 0x40
 8002188:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2238      	movs	r2, #56	@ 0x38
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f02b ff4b 	bl	802e02c <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002196:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800219a:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 800219c:	2335      	movs	r3, #53	@ 0x35
 800219e:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80021a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80021b6:	2300      	movs	r3, #0
 80021b8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80021ba:	2300      	movs	r3, #0
 80021bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4619      	mov	r1, r3
 80021ca:	4858      	ldr	r0, [pc, #352]	@ (800232c <QSPI_Configuration+0x1a8>)
 80021cc:	f002 f9de 	bl	800458c <HAL_QSPI_Command>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 80021de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021e2:	e09f      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 80021e4:	1cfb      	adds	r3, r7, #3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4619      	mov	r1, r3
 80021ec:	484f      	ldr	r0, [pc, #316]	@ (800232c <QSPI_Configuration+0x1a8>)
 80021ee:	f002 fac2 	bl	8004776 <HAL_QSPI_Receive>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 8002200:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002204:	e08e      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 800220a:	2350      	movs	r3, #80	@ 0x50
 800220c:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002214:	4619      	mov	r1, r3
 8002216:	4845      	ldr	r0, [pc, #276]	@ (800232c <QSPI_Configuration+0x1a8>)
 8002218:	f002 f9b8 	bl	800458c <HAL_QSPI_Command>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 8002222:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002226:	e07d      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8002228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 800222e:	2331      	movs	r3, #49	@ 0x31
 8002230:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	b2db      	uxtb	r3, r3
 800223a:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4619      	mov	r1, r3
 8002244:	4839      	ldr	r0, [pc, #228]	@ (800232c <QSPI_Configuration+0x1a8>)
 8002246:	f002 f9a1 	bl	800458c <HAL_QSPI_Command>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8002250:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002254:	e066      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002256:	1cfb      	adds	r3, r7, #3
 8002258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225c:	4619      	mov	r1, r3
 800225e:	4833      	ldr	r0, [pc, #204]	@ (800232c <QSPI_Configuration+0x1a8>)
 8002260:	f002 f9f2 	bl	8004648 <HAL_QSPI_Transmit>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 800226a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800226e:	e059      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002274:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8002276:	2315      	movs	r3, #21
 8002278:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8002282:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
 8002298:	2301      	movs	r3, #1
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a2:	4619      	mov	r1, r3
 80022a4:	4821      	ldr	r0, [pc, #132]	@ (800232c <QSPI_Configuration+0x1a8>)
 80022a6:	f002 f971 	bl	800458c <HAL_QSPI_Command>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80022b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 80022b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022bc:	e032      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 80022be:	1cfb      	adds	r3, r7, #3
 80022c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c4:	4619      	mov	r1, r3
 80022c6:	4819      	ldr	r0, [pc, #100]	@ (800232c <QSPI_Configuration+0x1a8>)
 80022c8:	f002 fa55 	bl	8004776 <HAL_QSPI_Receive>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80022d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 80022da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022de:	e021      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 80022e0:	2311      	movs	r3, #17
 80022e2:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4619      	mov	r1, r3
 80022f6:	480d      	ldr	r0, [pc, #52]	@ (800232c <QSPI_Configuration+0x1a8>)
 80022f8:	f002 f948 	bl	800458c <HAL_QSPI_Command>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 8002302:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002306:	e00d      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002308:	1cfb      	adds	r3, r7, #3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4619      	mov	r1, r3
 8002310:	4806      	ldr	r0, [pc, #24]	@ (800232c <QSPI_Configuration+0x1a8>)
 8002312:	f002 f999 	bl	8004648 <HAL_QSPI_Transmit>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 800231c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002320:	e000      	b.n	8002324 <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3740      	adds	r7, #64	@ 0x40
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200007d4 	.word	0x200007d4

08002330 <CSP_QSPI_EnableMemoryMappedMode>:
//		return HAL_ERROR;
//	}
//	return HAL_OK;
//}

uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b090      	sub	sp, #64	@ 0x40
 8002334:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800233a:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 800233c:	23eb      	movs	r3, #235	@ 0xeb
 800233e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002340:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002344:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8002346:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8002350:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.AlternateBytes = 0xFF;
 8002356:	23ff      	movs	r3, #255	@ 0xff
 8002358:	613b      	str	r3, [r7, #16]
	sCommand.AlternateBytesSize = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002362:	2300      	movs	r3, #0
 8002364:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002366:	2300      	movs	r3, #0
 8002368:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_4_LINES;
 800236a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DummyCycles = 4;
 8002374:	2304      	movs	r3, #4
 8002376:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
	sMemMappedCfg.TimeOutPeriod = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	603b      	str	r3, [r7, #0]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 8002380:	463a      	mov	r2, r7
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4619      	mov	r1, r3
 8002388:	4807      	ldr	r0, [pc, #28]	@ (80023a8 <CSP_QSPI_EnableMemoryMappedMode+0x78>)
 800238a:	f002 fb0d 	bl	80049a8 <HAL_QSPI_MemoryMapped>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <CSP_QSPI_EnableMemoryMappedMode+0x68>
		return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e003      	b.n	80023a0 <CSP_QSPI_EnableMemoryMappedMode+0x70>
	}
	HAL_Delay(100);
 8002398:	2064      	movs	r0, #100	@ 0x64
 800239a:	f000 fe3d 	bl	8003018 <HAL_Delay>
	return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3740      	adds	r7, #64	@ 0x40
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200007d4 	.word	0x200007d4

080023ac <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b090      	sub	sp, #64	@ 0x40
 80023b0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80023b2:	463b      	mov	r3, r7
 80023b4:	2238      	movs	r2, #56	@ 0x38
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f02b fe37 	bl	802e02c <memset>
	uint32_t temp = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80023c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023c6:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 80023c8:	2366      	movs	r3, #102	@ 0x66
 80023ca:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80023e8:	463b      	mov	r3, r7
 80023ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ee:	4619      	mov	r1, r3
 80023f0:	4820      	ldr	r0, [pc, #128]	@ (8002474 <QSPI_ResetChip+0xc8>)
 80023f2:	f002 f8cb 	bl	800458c <HAL_QSPI_Command>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80023fc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002404:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002408:	e02f      	b.n	800246a <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800240a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800240e:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8002410:	2399      	movs	r3, #153	@ 0x99
 8002412:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002428:	2300      	movs	r3, #0
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8002430:	463b      	mov	r3, r7
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4619      	mov	r1, r3
 8002438:	480e      	ldr	r0, [pc, #56]	@ (8002474 <QSPI_ResetChip+0xc8>)
 800243a:	f002 f8a7 	bl	800458c <HAL_QSPI_Command>
 800243e:	4603      	mov	r3, r0
 8002440:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002444:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 800244c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002450:	e00b      	b.n	800246a <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8002452:	2300      	movs	r3, #0
 8002454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002456:	e003      	b.n	8002460 <QSPI_ResetChip+0xb4>
		__NOP();
 8002458:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 800245a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245c:	3301      	adds	r3, #1
 800245e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002462:	4a05      	ldr	r2, [pc, #20]	@ (8002478 <QSPI_ResetChip+0xcc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d9f7      	bls.n	8002458 <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3740      	adds	r7, #64	@ 0x40
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200007d4 	.word	0x200007d4
 8002478:	0007a11f 	.word	0x0007a11f

0800247c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_MspInit+0x4c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a10      	ldr	r2, [pc, #64]	@ (80024c8 <HAL_MspInit+0x4c>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <HAL_MspInit+0x4c>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <HAL_MspInit+0x4c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a6:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	210f      	movs	r1, #15
 80024b6:	f06f 0001 	mvn.w	r0, #1
 80024ba:	f000 fe89 	bl	80031d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800

080024cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_CRC_MspInit+0x38>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10b      	bne.n	80024f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_CRC_MspInit+0x3c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_CRC_MspInit+0x3c>)
 80024e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_CRC_MspInit+0x3c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023000 	.word	0x40023000
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <HAL_DMA2D_MspInit+0x44>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d113      	bne.n	8002546 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <HAL_DMA2D_MspInit+0x48>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a0c      	ldr	r2, [pc, #48]	@ (8002554 <HAL_DMA2D_MspInit+0x48>)
 8002524:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_DMA2D_MspInit+0x48>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2105      	movs	r1, #5
 800253a:	205a      	movs	r0, #90	@ 0x5a
 800253c:	f000 fe48 	bl	80031d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002540:	205a      	movs	r0, #90	@ 0x5a
 8002542:	f000 fe61 	bl	8003208 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	4002b000 	.word	0x4002b000
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0b0      	sub	sp, #192	@ 0xc0
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002570:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002574:	2284      	movs	r2, #132	@ 0x84
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f02b fd57 	bl	802e02c <memset>
  if(hltdc->Instance==LTDC)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a9e      	ldr	r2, [pc, #632]	@ (80027fc <HAL_LTDC_MspInit+0x2a4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f040 8135 	bne.w	80027f4 <HAL_LTDC_MspInit+0x29c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800258a:	2308      	movs	r3, #8
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800258e:	23c0      	movs	r3, #192	@ 0xc0
 8002590:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002592:	2303      	movs	r3, #3
 8002594:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002596:	2302      	movs	r3, #2
 8002598:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800259a:	2300      	movs	r3, #0
 800259c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80025a2:	2300      	movs	r3, #0
 80025a4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 f94a 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 80025b6:	f7ff fd09 	bl	8001fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025ba:	4b91      	ldr	r3, [pc, #580]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	4a90      	ldr	r2, [pc, #576]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c6:	4b8e      	ldr	r3, [pc, #568]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a8a      	ldr	r2, [pc, #552]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a84      	ldr	r2, [pc, #528]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b82      	ldr	r3, [pc, #520]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002602:	4b7f      	ldr	r3, [pc, #508]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	4a7e      	ldr	r2, [pc, #504]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002608:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800260c:	6313      	str	r3, [r2, #48]	@ 0x30
 800260e:	4b7c      	ldr	r3, [pc, #496]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800261a:	4b79      	ldr	r3, [pc, #484]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a78      	ldr	r2, [pc, #480]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b76      	ldr	r3, [pc, #472]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002632:	4b73      	ldr	r3, [pc, #460]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a72      	ldr	r2, [pc, #456]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b70      	ldr	r3, [pc, #448]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b6d      	ldr	r3, [pc, #436]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a6c      	ldr	r2, [pc, #432]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002662:	4b67      	ldr	r3, [pc, #412]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	4a66      	ldr	r2, [pc, #408]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266c:	6313      	str	r3, [r2, #48]	@ 0x30
 800266e:	4b64      	ldr	r3, [pc, #400]	@ (8002800 <HAL_LTDC_MspInit+0x2a8>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    PJ4     ------> LTDC_R5
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800267a:	2310      	movs	r3, #16
 800267c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002692:	230e      	movs	r3, #14
 8002694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002698:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800269c:	4619      	mov	r1, r3
 800269e:	4859      	ldr	r0, [pc, #356]	@ (8002804 <HAL_LTDC_MspInit+0x2ac>)
 80026a0:	f001 f90e 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_8
 80026a4:	f64a 73de 	movw	r3, #45022	@ 0xafde
 80026a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026be:	230e      	movs	r3, #14
 80026c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026c4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026c8:	4619      	mov	r1, r3
 80026ca:	484f      	ldr	r0, [pc, #316]	@ (8002808 <HAL_LTDC_MspInit+0x2b0>)
 80026cc:	f001 f8f8 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80026d0:	23f7      	movs	r3, #247	@ 0xf7
 80026d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026e8:	230e      	movs	r3, #14
 80026ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026ee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026f2:	4619      	mov	r1, r3
 80026f4:	4845      	ldr	r0, [pc, #276]	@ (800280c <HAL_LTDC_MspInit+0x2b4>)
 80026f6:	f001 f8e3 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002714:	2309      	movs	r3, #9
 8002716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800271a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800271e:	4619      	mov	r1, r3
 8002720:	483b      	ldr	r0, [pc, #236]	@ (8002810 <HAL_LTDC_MspInit+0x2b8>)
 8002722:	f001 f8cd 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800272a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002740:	230e      	movs	r3, #14
 8002742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002746:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800274a:	4619      	mov	r1, r3
 800274c:	4830      	ldr	r0, [pc, #192]	@ (8002810 <HAL_LTDC_MspInit+0x2b8>)
 800274e:	f001 f8b7 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 8002752:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800276c:	230e      	movs	r3, #14
 800276e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002772:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002776:	4619      	mov	r1, r3
 8002778:	4826      	ldr	r0, [pc, #152]	@ (8002814 <HAL_LTDC_MspInit+0x2bc>)
 800277a:	f001 f8a1 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800277e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002792:	2303      	movs	r3, #3
 8002794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002798:	230e      	movs	r3, #14
 800279a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027a2:	4619      	mov	r1, r3
 80027a4:	481c      	ldr	r0, [pc, #112]	@ (8002818 <HAL_LTDC_MspInit+0x2c0>)
 80027a6:	f001 f88b 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027aa:	2308      	movs	r3, #8
 80027ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027c2:	230e      	movs	r3, #14
 80027c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027cc:	4619      	mov	r1, r3
 80027ce:	4813      	ldr	r0, [pc, #76]	@ (800281c <HAL_LTDC_MspInit+0x2c4>)
 80027d0:	f001 f876 	bl	80038c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2105      	movs	r1, #5
 80027d8:	2058      	movs	r0, #88	@ 0x58
 80027da:	f000 fcf9 	bl	80031d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80027de:	2058      	movs	r0, #88	@ 0x58
 80027e0:	f000 fd12 	bl	8003208 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2105      	movs	r1, #5
 80027e8:	2059      	movs	r0, #89	@ 0x59
 80027ea:	f000 fcf1 	bl	80031d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80027ee:	2059      	movs	r0, #89	@ 0x59
 80027f0:	f000 fd0a 	bl	8003208 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80027f4:	bf00      	nop
 80027f6:	37c0      	adds	r7, #192	@ 0xc0
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40016800 	.word	0x40016800
 8002800:	40023800 	.word	0x40023800
 8002804:	40021000 	.word	0x40021000
 8002808:	40022400 	.word	0x40022400
 800280c:	40022800 	.word	0x40022800
 8002810:	40021800 	.word	0x40021800
 8002814:	40022000 	.word	0x40022000
 8002818:	40020000 	.word	0x40020000
 800281c:	40021c00 	.word	0x40021c00

08002820 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	@ 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a44      	ldr	r2, [pc, #272]	@ (8002950 <HAL_QSPI_MspInit+0x130>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f040 8081 	bne.w	8002946 <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002844:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	4a42      	ldr	r2, [pc, #264]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800285c:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	4a3c      	ldr	r2, [pc, #240]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	6313      	str	r3, [r2, #48]	@ 0x30
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002874:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	4a36      	ldr	r2, [pc, #216]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002880:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 8002892:	f043 0320 	orr.w	r3, r3, #32
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <HAL_QSPI_MspInit+0x134>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028a4:	2304      	movs	r3, #4
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80028b4:	2309      	movs	r3, #9
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4826      	ldr	r0, [pc, #152]	@ (8002958 <HAL_QSPI_MspInit+0x138>)
 80028c0:	f000 fffe 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028c4:	2340      	movs	r3, #64	@ 0x40
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028d4:	230a      	movs	r3, #10
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	481f      	ldr	r0, [pc, #124]	@ (800295c <HAL_QSPI_MspInit+0x13c>)
 80028e0:	f000 ffee 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e4:	2340      	movs	r3, #64	@ 0x40
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80028f4:	2309      	movs	r3, #9
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4818      	ldr	r0, [pc, #96]	@ (8002960 <HAL_QSPI_MspInit+0x140>)
 8002900:	f000 ffde 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002904:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002916:	230a      	movs	r3, #10
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	480f      	ldr	r0, [pc, #60]	@ (8002960 <HAL_QSPI_MspInit+0x140>)
 8002922:	f000 ffcd 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002926:	2304      	movs	r3, #4
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002936:	2309      	movs	r3, #9
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	f107 031c 	add.w	r3, r7, #28
 800293e:	4619      	mov	r1, r3
 8002940:	4806      	ldr	r0, [pc, #24]	@ (800295c <HAL_QSPI_MspInit+0x13c>)
 8002942:	f000 ffbd 	bl	80038c0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002946:	bf00      	nop
 8002948:	3730      	adds	r7, #48	@ 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	a0001000 	.word	0xa0001000
 8002954:	40023800 	.word	0x40023800
 8002958:	40021000 	.word	0x40021000
 800295c:	40020400 	.word	0x40020400
 8002960:	40021400 	.word	0x40021400

08002964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002974:	d114      	bne.n	80029a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x68>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <HAL_TIM_Base_MspInit+0x68>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_TIM_Base_MspInit+0x68>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2105      	movs	r1, #5
 8002992:	201c      	movs	r0, #28
 8002994:	f000 fc1c 	bl	80031d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002998:	201c      	movs	r0, #28
 800299a:	f000 fc35 	bl	8003208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800299e:	e010      	b.n	80029c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <HAL_TIM_Base_MspInit+0x6c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10b      	bne.n	80029c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029aa:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <HAL_TIM_Base_MspInit+0x68>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_TIM_Base_MspInit+0x68>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_TIM_Base_MspInit+0x68>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40000400 	.word	0x40000400

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_TIM_MspPostInit+0x64>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11b      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_TIM_MspPostInit+0x68>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <HAL_TIM_MspPostInit+0x68>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <HAL_TIM_MspPostInit+0x68>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <HAL_TIM_MspPostInit+0x6c>)
 8002a2a:	f000 ff49 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020800 	.word	0x40020800

08002a44 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a58:	4b43      	ldr	r3, [pc, #268]	@ (8002b68 <HAL_FMC_MspInit+0x124>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d17e      	bne.n	8002b5e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8002a60:	4b41      	ldr	r3, [pc, #260]	@ (8002b68 <HAL_FMC_MspInit+0x124>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a66:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_FMC_MspInit+0x128>)
 8002a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6a:	4a40      	ldr	r2, [pc, #256]	@ (8002b6c <HAL_FMC_MspInit+0x128>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a72:	4b3e      	ldr	r3, [pc, #248]	@ (8002b6c <HAL_FMC_MspInit+0x128>)
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8002a7e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002a82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a90:	230c      	movs	r3, #12
 8002a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4835      	ldr	r0, [pc, #212]	@ (8002b70 <HAL_FMC_MspInit+0x12c>)
 8002a9a:	f000 ff11 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8002a9e:	f248 1337 	movw	r3, #33079	@ 0x8137
 8002aa2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab0:	230c      	movs	r3, #12
 8002ab2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482e      	ldr	r0, [pc, #184]	@ (8002b74 <HAL_FMC_MspInit+0x130>)
 8002aba:	f000 ff01 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002abe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002ac2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002acc:	2303      	movs	r3, #3
 8002ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4827      	ldr	r0, [pc, #156]	@ (8002b78 <HAL_FMC_MspInit+0x134>)
 8002ada:	f000 fef1 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8002ade:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002ae2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002af0:	230c      	movs	r3, #12
 8002af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4820      	ldr	r0, [pc, #128]	@ (8002b7c <HAL_FMC_MspInit+0x138>)
 8002afa:	f000 fee1 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002afe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002b02:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b10:	230c      	movs	r3, #12
 8002b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4819      	ldr	r0, [pc, #100]	@ (8002b80 <HAL_FMC_MspInit+0x13c>)
 8002b1a:	f000 fed1 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8002b1e:	f64f 7304 	movw	r3, #65284	@ 0xff04
 8002b22:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b30:	230c      	movs	r3, #12
 8002b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	4619      	mov	r1, r3
 8002b38:	4812      	ldr	r0, [pc, #72]	@ (8002b84 <HAL_FMC_MspInit+0x140>)
 8002b3a:	f000 fec1 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002b3e:	2305      	movs	r3, #5
 8002b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b4e:	230c      	movs	r3, #12
 8002b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	480c      	ldr	r0, [pc, #48]	@ (8002b88 <HAL_FMC_MspInit+0x144>)
 8002b58:	f000 feb2 	bl	80038c0 <HAL_GPIO_Init>
 8002b5c:	e000      	b.n	8002b60 <HAL_FMC_MspInit+0x11c>
    return;
 8002b5e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200008f8 	.word	0x200008f8
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021400 	.word	0x40021400
 8002b84:	40021c00 	.word	0x40021c00
 8002b88:	40020800 	.word	0x40020800

08002b8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b94:	f7ff ff56 	bl	8002a44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	@ 0x38
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb0:	4b33      	ldr	r3, [pc, #204]	@ (8002c80 <HAL_InitTick+0xe0>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	4a32      	ldr	r2, [pc, #200]	@ (8002c80 <HAL_InitTick+0xe0>)
 8002bb6:	f043 0310 	orr.w	r3, r3, #16
 8002bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbc:	4b30      	ldr	r3, [pc, #192]	@ (8002c80 <HAL_InitTick+0xe0>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bc8:	f107 0210 	add.w	r2, r7, #16
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fe04 	bl	80057e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002be2:	f002 fde9 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 8002be6:	6378      	str	r0, [r7, #52]	@ 0x34
 8002be8:	e004      	b.n	8002bf4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bea:	f002 fde5 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf6:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_InitTick+0xe4>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c02:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c04:	4a21      	ldr	r2, [pc, #132]	@ (8002c8c <HAL_InitTick+0xec>)
 8002c06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c10:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c28:	4817      	ldr	r0, [pc, #92]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c2a:	f003 fa64 	bl	80060f6 <HAL_TIM_Base_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11b      	bne.n	8002c74 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c3c:	4812      	ldr	r0, [pc, #72]	@ (8002c88 <HAL_InitTick+0xe8>)
 8002c3e:	f003 fab1 	bl	80061a4 <HAL_TIM_Base_Start_IT>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d111      	bne.n	8002c74 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c50:	2036      	movs	r0, #54	@ 0x36
 8002c52:	f000 fad9 	bl	8003208 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b0f      	cmp	r3, #15
 8002c5a:	d808      	bhi.n	8002c6e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	2036      	movs	r0, #54	@ 0x36
 8002c62:	f000 fab5 	bl	80031d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <HAL_InitTick+0xf0>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e002      	b.n	8002c74 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3738      	adds	r7, #56	@ 0x38
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	200008fc 	.word	0x200008fc
 8002c8c:	40001000 	.word	0x40001000
 8002c90:	20000008 	.word	0x20000008

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <NMI_Handler+0x4>

08002c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <MemManage_Handler+0x4>

08002cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <BusFault_Handler+0x4>

08002cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <UsageFault_Handler+0x4>

08002cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Dev_Now.Touch = 1;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <EXTI0_IRQHandler+0x14>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 ffd0 	bl	8003c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	2000031c 	.word	0x2000031c
 8002ce4:	00000000 	.word	0x00000000

08002ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    // Override and implement this function in Screen3
    static float angle = 0.0f;
    //float sineValue;

    // Calculate the sine value (adjust frequency and amplitude as needed)
    sineValue = 40.0f * sinf(angle);  // Amplitude 20
 8002cec:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <TIM2_IRQHandler+0x70>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf6:	f02a f955 	bl	802cfa4 <sinf>
 8002cfa:	eef0 7a40 	vmov.f32	s15, s0
 8002cfe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002d5c <TIM2_IRQHandler+0x74>
 8002d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d06:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <TIM2_IRQHandler+0x78>)
 8002d08:	edc3 7a00 	vstr	s15, [r3]

        // Increment the angle for the next point (adjust frequency as needed)
        angle += 0.00005f;  // Adjust the step size for frequency control
 8002d0c:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <TIM2_IRQHandler+0x70>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002d64 <TIM2_IRQHandler+0x7c>
 8002d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d58 <TIM2_IRQHandler+0x70>)
 8002d1c:	edc3 7a00 	vstr	s15, [r3]
        if (angle >= 2 * M_PI)  // Reset the angle after a full cycle (2π radians)
 8002d20:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <TIM2_IRQHandler+0x70>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fc27 	bl	8000578 <__aeabi_f2d>
 8002d2a:	a309      	add	r3, pc, #36	@ (adr r3, 8002d50 <TIM2_IRQHandler+0x68>)
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f7fd fcee 	bl	8000710 <__aeabi_dcmpge>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <TIM2_IRQHandler+0x5a>
        {
            angle = 0.0f;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <TIM2_IRQHandler+0x70>)
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
        }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d42:	4809      	ldr	r0, [pc, #36]	@ (8002d68 <TIM2_IRQHandler+0x80>)
 8002d44:	f003 fc02 	bl	800654c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	f3af 8000 	nop.w
 8002d50:	54442d18 	.word	0x54442d18
 8002d54:	401921fb 	.word	0x401921fb
 8002d58:	2000094c 	.word	0x2000094c
 8002d5c:	42200000 	.word	0x42200000
 8002d60:	20000948 	.word	0x20000948
 8002d64:	3851b717 	.word	0x3851b717
 8002d68:	20000820 	.word	0x20000820

08002d6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d70:	4802      	ldr	r0, [pc, #8]	@ (8002d7c <TIM6_DAC_IRQHandler+0x10>)
 8002d72:	f003 fbeb 	bl	800654c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200008fc 	.word	0x200008fc

08002d80 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <LTDC_IRQHandler+0x10>)
 8002d86:	f001 f86d 	bl	8003e64 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000072c 	.word	0x2000072c

08002d94 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d98:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <LTDC_ER_IRQHandler+0x10>)
 8002d9a:	f001 f863 	bl	8003e64 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000072c 	.word	0x2000072c

08002da8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002dac:	4802      	ldr	r0, [pc, #8]	@ (8002db8 <DMA2D_IRQHandler+0x10>)
 8002dae:	f000 fbe5 	bl	800357c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200006ec 	.word	0x200006ec

08002dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_kill>:

int _kill(int pid, int sig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dd6:	f02b fa29 	bl	802e22c <__errno>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2216      	movs	r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
  return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_exit>:

void _exit (int status)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe7 	bl	8002dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dfe:	bf00      	nop
 8002e00:	e7fd      	b.n	8002dfe <_exit+0x12>

08002e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e00a      	b.n	8002e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e14:	f3af 8000 	nop.w
 8002e18:	4601      	mov	r1, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	60ba      	str	r2, [r7, #8]
 8002e20:	b2ca      	uxtb	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3301      	adds	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbf0      	blt.n	8002e14 <_read+0x12>
  }

  return len;
 8002e32:	687b      	ldr	r3, [r7, #4]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e009      	b.n	8002e62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	60ba      	str	r2, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	dbf1      	blt.n	8002e4e <_write+0x12>
  }
  return len;
 8002e6a:	687b      	ldr	r3, [r7, #4]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_close>:

int _close(int file)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_isatty>:

int _isatty(int file)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb4:	2301      	movs	r3, #1
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <_sbrk+0x5c>)
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <_sbrk+0x60>)
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <_sbrk+0x64>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <_sbrk+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f0c:	f02b f98e 	bl	802e22c <__errno>
 8002f10:	4603      	mov	r3, r0
 8002f12:	220c      	movs	r2, #12
 8002f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e009      	b.n	8002f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <_sbrk+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f22:	4b07      	ldr	r3, [pc, #28]	@ (8002f40 <_sbrk+0x64>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <_sbrk+0x64>)
 8002f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20050000 	.word	0x20050000
 8002f3c:	00000400 	.word	0x00000400
 8002f40:	20000950 	.word	0x20000950
 8002f44:	20013008 	.word	0x20013008

08002f48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <SystemInit+0x20>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <SystemInit+0x20>)
 8002f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f70:	f7ff ffea 	bl	8002f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f76:	490d      	ldr	r1, [pc, #52]	@ (8002fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f9a:	f02b f94d 	bl	802e238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9e:	f7fe fbe3 	bl	8001768 <main>
  bx  lr    
 8002fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fa4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fac:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002fb0:	08032b90 	.word	0x08032b90
  ldr r2, =_sbss
 8002fb4:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002fb8:	20013004 	.word	0x20013004

08002fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC_IRQHandler>

08002fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f000 f8f9 	bl	80031ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc8:	200f      	movs	r0, #15
 8002fca:	f7ff fde9 	bl	8002ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fce:	f7ff fa55 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_IncTick+0x20>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_IncTick+0x24>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a04      	ldr	r2, [pc, #16]	@ (8002ffc <HAL_IncTick+0x24>)
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	20000954 	.word	0x20000954

08003000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <HAL_GetTick+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000954 	.word	0x20000954

08003018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7ff ffee 	bl	8003000 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d005      	beq.n	800303e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_Delay+0x44>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800303e:	bf00      	nop
 8003040:	f7ff ffde 	bl	8003000 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	429a      	cmp	r2, r3
 800304e:	d8f7      	bhi.n	8003040 <HAL_Delay+0x28>
  {
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000000c 	.word	0x2000000c

08003060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 800308a:	4313      	orrs	r3, r2
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	@ (80030a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000ed00 	.word	0xe000ed00
 80030a4:	05fa0000 	.word	0x05fa0000

080030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ac:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0307 	and.w	r3, r3, #7
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db0b      	blt.n	80030ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4907      	ldr	r1, [pc, #28]	@ (80030fc <__NVIC_EnableIRQ+0x38>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	@ (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	@ (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	@ 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff4c 	bl	8003060 <__NVIC_SetPriorityGrouping>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e2:	f7ff ff61 	bl	80030a8 <__NVIC_GetPriorityGrouping>
 80031e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	6978      	ldr	r0, [r7, #20]
 80031ee:	f7ff ffb1 	bl	8003154 <NVIC_EncodePriority>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff80 	bl	8003100 <__NVIC_SetPriority>
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff54 	bl	80030c4 <__NVIC_EnableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e054      	b.n	80032e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f5b      	ldrb	r3, [r3, #29]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff f940 	bl	80024cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a22      	ldr	r2, [pc, #136]	@ (80032e8 <HAL_CRC_Init+0xc4>)
 8003260:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0218 	bic.w	r2, r2, #24
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e00c      	b.n	800328e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f834 	bl	80032ec <HAL_CRCEx_Polynomial_Set>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e028      	b.n	80032e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	795b      	ldrb	r3, [r3, #5]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	e004      	b.n	80032ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6912      	ldr	r2, [r2, #16]
 80032aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	04c11db7 	.word	0x04c11db7

080032ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032fc:	231f      	movs	r3, #31
 80032fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
 800330e:	e063      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003310:	bf00      	nop
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	613a      	str	r2, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_CRCEx_Polynomial_Set+0x44>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b18      	cmp	r3, #24
 8003334:	d846      	bhi.n	80033c4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	080033cb 	.word	0x080033cb
 8003340:	080033c5 	.word	0x080033c5
 8003344:	080033c5 	.word	0x080033c5
 8003348:	080033c5 	.word	0x080033c5
 800334c:	080033c5 	.word	0x080033c5
 8003350:	080033c5 	.word	0x080033c5
 8003354:	080033c5 	.word	0x080033c5
 8003358:	080033c5 	.word	0x080033c5
 800335c:	080033b9 	.word	0x080033b9
 8003360:	080033c5 	.word	0x080033c5
 8003364:	080033c5 	.word	0x080033c5
 8003368:	080033c5 	.word	0x080033c5
 800336c:	080033c5 	.word	0x080033c5
 8003370:	080033c5 	.word	0x080033c5
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080033c5 	.word	0x080033c5
 800337c:	080033ad 	.word	0x080033ad
 8003380:	080033c5 	.word	0x080033c5
 8003384:	080033c5 	.word	0x080033c5
 8003388:	080033c5 	.word	0x080033c5
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033a1 	.word	0x080033a1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d913      	bls.n	80033ce <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033aa:	e010      	b.n	80033ce <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d90f      	bls.n	80033d2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033b6:	e00c      	b.n	80033d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d90b      	bls.n	80033d6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033c2:	e008      	b.n	80033d6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
        break;
 80033c8:	e006      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033d6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 0118 	bic.w	r1, r3, #24
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003416:	f7ff fdf3 	bl	8003000 <HAL_GetTick>
 800341a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d008      	beq.n	800343a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2280      	movs	r2, #128	@ 0x80
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e052      	b.n	80034e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0216 	bic.w	r2, r2, #22
 8003448:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003458:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_DMA_Abort+0x62>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0208 	bic.w	r2, r2, #8
 8003478:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348a:	e013      	b.n	80034b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348c:	f7ff fdb8 	bl	8003000 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b05      	cmp	r3, #5
 8003498:	d90c      	bls.n	80034b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2203      	movs	r2, #3
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e015      	b.n	80034e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e4      	bne.n	800348c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	223f      	movs	r2, #63	@ 0x3f
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e039      	b.n	800356e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fe fffc 	bl	800250c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	f023 0107 	bic.w	r1, r3, #7
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_DMA2D_Init+0x90>)
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68d1      	ldr	r1, [r2, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	430b      	orrs	r3, r1
 800355c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	ffffc000 	.word	0xffffc000

0800357c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d026      	beq.n	80035ec <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d021      	beq.n	80035ec <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035b6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2204      	movs	r2, #4
 80035d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d026      	beq.n	8003644 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d021      	beq.n	8003644 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800360e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2220      	movs	r2, #32
 8003616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	f043 0202 	orr.w	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d026      	beq.n	800369c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d021      	beq.n	800369c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003666:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2208      	movs	r2, #8
 800366e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2204      	movs	r2, #4
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d013      	beq.n	80036ce <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036be:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f853 	bl	8003774 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d024      	beq.n	8003722 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01f      	beq.n	8003722 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2202      	movs	r2, #2
 80036f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01f      	beq.n	800376c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003744:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2210      	movs	r2, #16
 800374c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f80e 	bl	8003788 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_DMA2D_ConfigLayer+0x20>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e079      	b.n	80038b0 <HAL_DMA2D_ConfigLayer+0x114>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	3318      	adds	r3, #24
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80037e6:	4b35      	ldr	r3, [pc, #212]	@ (80038bc <HAL_DMA2D_ConfigLayer+0x120>)
 80037e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b0a      	cmp	r3, #10
 80037f0:	d003      	beq.n	80037fa <HAL_DMA2D_ConfigLayer+0x5e>
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b09      	cmp	r3, #9
 80037f8:	d107      	bne.n	800380a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e005      	b.n	8003816 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	061b      	lsls	r3, r3, #24
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d120      	bne.n	800385e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43db      	mvns	r3, r3
 8003826:	ea02 0103 	and.w	r1, r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	430a      	orrs	r2, r1
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b0a      	cmp	r3, #10
 8003844:	d003      	beq.n	800384e <HAL_DMA2D_ConfigLayer+0xb2>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b09      	cmp	r3, #9
 800384c:	d127      	bne.n	800389e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800385a:	629a      	str	r2, [r3, #40]	@ 0x28
 800385c:	e01f      	b.n	800389e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43db      	mvns	r3, r3
 8003868:	ea02 0103 	and.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b0a      	cmp	r3, #10
 8003886:	d003      	beq.n	8003890 <HAL_DMA2D_ConfigLayer+0xf4>
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b09      	cmp	r3, #9
 800388e:	d106      	bne.n	800389e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800389c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	ff03000f 	.word	0xff03000f

080038c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	e175      	b.n	8003bcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038e0:	2201      	movs	r2, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f040 8164 	bne.w	8003bc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d005      	beq.n	8003916 <HAL_GPIO_Init+0x56>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d130      	bne.n	8003978 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	2203      	movs	r2, #3
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800394c:	2201      	movs	r2, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 0201 	and.w	r2, r3, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b03      	cmp	r3, #3
 8003982:	d017      	beq.n	80039b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d123      	bne.n	8003a08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	08da      	lsrs	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3208      	adds	r2, #8
 80039c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	220f      	movs	r2, #15
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	08da      	lsrs	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3208      	adds	r2, #8
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2203      	movs	r2, #3
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0203 	and.w	r2, r3, #3
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80be 	beq.w	8003bc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4a:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	4a65      	ldr	r2, [pc, #404]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a56:	4b63      	ldr	r3, [pc, #396]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a62:	4a61      	ldr	r2, [pc, #388]	@ (8003be8 <HAL_GPIO_Init+0x328>)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	3302      	adds	r3, #2
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <HAL_GPIO_Init+0x32c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d037      	beq.n	8003afe <HAL_GPIO_Init+0x23e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a57      	ldr	r2, [pc, #348]	@ (8003bf0 <HAL_GPIO_Init+0x330>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_GPIO_Init+0x23a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a56      	ldr	r2, [pc, #344]	@ (8003bf4 <HAL_GPIO_Init+0x334>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02b      	beq.n	8003af6 <HAL_GPIO_Init+0x236>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a55      	ldr	r2, [pc, #340]	@ (8003bf8 <HAL_GPIO_Init+0x338>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d025      	beq.n	8003af2 <HAL_GPIO_Init+0x232>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a54      	ldr	r2, [pc, #336]	@ (8003bfc <HAL_GPIO_Init+0x33c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01f      	beq.n	8003aee <HAL_GPIO_Init+0x22e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a53      	ldr	r2, [pc, #332]	@ (8003c00 <HAL_GPIO_Init+0x340>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d019      	beq.n	8003aea <HAL_GPIO_Init+0x22a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a52      	ldr	r2, [pc, #328]	@ (8003c04 <HAL_GPIO_Init+0x344>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_GPIO_Init+0x226>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	@ (8003c08 <HAL_GPIO_Init+0x348>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_GPIO_Init+0x222>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	@ (8003c0c <HAL_GPIO_Init+0x34c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_Init+0x21e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8003c10 <HAL_GPIO_Init+0x350>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_Init+0x21a>
 8003ad6:	2309      	movs	r3, #9
 8003ad8:	e012      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ada:	230a      	movs	r3, #10
 8003adc:	e010      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	e00e      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	e00c      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ae6:	2306      	movs	r3, #6
 8003ae8:	e00a      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e008      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003aee:	2304      	movs	r3, #4
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e004      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e002      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003afe:	2300      	movs	r3, #0
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	f002 0203 	and.w	r2, r2, #3
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b10:	4935      	ldr	r1, [pc, #212]	@ (8003be8 <HAL_GPIO_Init+0x328>)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3302      	adds	r3, #2
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b42:	4a34      	ldr	r2, [pc, #208]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b48:	4b32      	ldr	r3, [pc, #200]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b6c:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b72:	4b28      	ldr	r3, [pc, #160]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b96:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bc0:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <HAL_GPIO_Init+0x354>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	f67f ae86 	bls.w	80038e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3724      	adds	r7, #36	@ 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	40020400 	.word	0x40020400
 8003bf4:	40020800 	.word	0x40020800
 8003bf8:	40020c00 	.word	0x40020c00
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40021400 	.word	0x40021400
 8003c04:	40021800 	.word	0x40021800
 8003c08:	40021c00 	.word	0x40021c00
 8003c0c:	40022000 	.word	0x40022000
 8003c10:	40022400 	.word	0x40022400
 8003c14:	40013c00 	.word	0x40013c00

08003c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e001      	b.n	8003c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]
 8003c54:	4613      	mov	r3, r2
 8003c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c58:	787b      	ldrb	r3, [r7, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c64:	e003      	b.n	8003c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	041a      	lsls	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c92:	4a05      	ldr	r2, [pc, #20]	@ (8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f806 	bl	8003cac <HAL_GPIO_EXTI_Callback>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40013c00 	.word	0x40013c00

08003cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0bf      	b.n	8003e56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe fc34 	bl	8002558 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003d06:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d1c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6899      	ldr	r1, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <HAL_LTDC_Init+0x19c>)
 8003d38:	400b      	ands	r3, r1
 8003d3a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68d9      	ldr	r1, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b3e      	ldr	r3, [pc, #248]	@ (8003e60 <HAL_LTDC_Init+0x19c>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68d9      	ldr	r1, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6919      	ldr	r1, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b33      	ldr	r3, [pc, #204]	@ (8003e60 <HAL_LTDC_Init+0x19c>)
 8003d94:	400b      	ands	r3, r1
 8003d96:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6919      	ldr	r1, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6959      	ldr	r1, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4b27      	ldr	r3, [pc, #156]	@ (8003e60 <HAL_LTDC_Init+0x19c>)
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6959      	ldr	r1, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0206 	orr.w	r2, r2, #6
 8003e32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	f000f800 	.word	0xf000f800

08003e64 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d023      	beq.n	8003ece <HAL_LTDC_IRQHandler+0x6a>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01e      	beq.n	8003ece <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f86f 	bl	8003fac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d023      	beq.n	8003f20 <HAL_LTDC_IRQHandler+0xbc>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01e      	beq.n	8003f20 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0202 	bic.w	r2, r2, #2
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f00:	f043 0202 	orr.w	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f846 	bl	8003fac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01b      	beq.n	8003f62 <HAL_LTDC_IRQHandler+0xfe>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d016      	beq.n	8003f62 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f010 f897 	bl	8014090 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <HAL_LTDC_IRQHandler+0x140>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d016      	beq.n	8003fa4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0208 	bic.w	r2, r2, #8
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f80e 	bl	8003fc0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_LTDC_ConfigLayer+0x1a>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e02c      	b.n	8004048 <HAL_LTDC_ConfigLayer+0x74>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2134      	movs	r1, #52	@ 0x34
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4614      	mov	r4, r2
 8004012:	461d      	mov	r5, r3
 8004014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800401a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800401c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800401e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f849 	bl	80040c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2201      	movs	r2, #1
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bdb0      	pop	{r4, r5, r7, pc}

08004050 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_LTDC_ProgramLineEvent+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e023      	b.n	80040b0 <HAL_LTDC_ProgramLineEvent+0x60>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004088:	4a0c      	ldr	r2, [pc, #48]	@ (80040bc <HAL_LTDC_ProgramLineEvent+0x6c>)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40016800 	.word	0x40016800

080040c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	4413      	add	r3, r2
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	4413      	add	r3, r2
 80040ee:	3384      	adds	r3, #132	@ 0x84
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4611      	mov	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	01d2      	lsls	r2, r2, #7
 80040fc:	440a      	add	r2, r1
 80040fe:	3284      	adds	r2, #132	@ 0x84
 8004100:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004104:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004116:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004118:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	01db      	lsls	r3, r3, #7
 8004124:	440b      	add	r3, r1
 8004126:	3384      	adds	r3, #132	@ 0x84
 8004128:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800412e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800413e:	4413      	add	r3, r2
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	01db      	lsls	r3, r3, #7
 800414e:	4413      	add	r3, r2
 8004150:	3384      	adds	r3, #132	@ 0x84
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	4611      	mov	r1, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	01d2      	lsls	r2, r2, #7
 800415e:	440a      	add	r2, r1
 8004160:	3284      	adds	r2, #132	@ 0x84
 8004162:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004166:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004176:	4413      	add	r3, r2
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	01db      	lsls	r3, r3, #7
 8004184:	440b      	add	r3, r1
 8004186:	3384      	adds	r3, #132	@ 0x84
 8004188:	4619      	mov	r1, r3
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	01db      	lsls	r3, r3, #7
 800419a:	4413      	add	r3, r2
 800419c:	3384      	adds	r3, #132	@ 0x84
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4611      	mov	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	01d2      	lsls	r2, r2, #7
 80041aa:	440a      	add	r2, r1
 80041ac:	3284      	adds	r2, #132	@ 0x84
 80041ae:	f023 0307 	bic.w	r3, r3, #7
 80041b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	01db      	lsls	r3, r3, #7
 80041be:	4413      	add	r3, r2
 80041c0:	3384      	adds	r3, #132	@ 0x84
 80041c2:	461a      	mov	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	4413      	add	r3, r2
 80041f2:	3384      	adds	r3, #132	@ 0x84
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	4413      	add	r3, r2
 8004202:	3384      	adds	r3, #132	@ 0x84
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004210:	461a      	mov	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	431a      	orrs	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	01db      	lsls	r3, r3, #7
 8004224:	440b      	add	r3, r1
 8004226:	3384      	adds	r3, #132	@ 0x84
 8004228:	4619      	mov	r1, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	3384      	adds	r3, #132	@ 0x84
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	4611      	mov	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	01d2      	lsls	r2, r2, #7
 800424a:	440a      	add	r2, r1
 800424c:	3284      	adds	r2, #132	@ 0x84
 800424e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004252:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	01db      	lsls	r3, r3, #7
 800425e:	4413      	add	r3, r2
 8004260:	3384      	adds	r3, #132	@ 0x84
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	4413      	add	r3, r2
 8004276:	3384      	adds	r3, #132	@ 0x84
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	440b      	add	r3, r1
 8004286:	3384      	adds	r3, #132	@ 0x84
 8004288:	4619      	mov	r1, r3
 800428a:	4b58      	ldr	r3, [pc, #352]	@ (80043ec <LTDC_SetConfig+0x32c>)
 800428c:	4013      	ands	r3, r2
 800428e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	68f9      	ldr	r1, [r7, #12]
 800429a:	6809      	ldr	r1, [r1, #0]
 800429c:	4608      	mov	r0, r1
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	01c9      	lsls	r1, r1, #7
 80042a2:	4401      	add	r1, r0
 80042a4:	3184      	adds	r1, #132	@ 0x84
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	01db      	lsls	r3, r3, #7
 80042b4:	4413      	add	r3, r2
 80042b6:	3384      	adds	r3, #132	@ 0x84
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	4413      	add	r3, r2
 80042c6:	3384      	adds	r3, #132	@ 0x84
 80042c8:	461a      	mov	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	01db      	lsls	r3, r3, #7
 80042d8:	4413      	add	r3, r2
 80042da:	3384      	adds	r3, #132	@ 0x84
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80042ec:	2304      	movs	r3, #4
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e01b      	b.n	800432a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80042fa:	2303      	movs	r3, #3
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e014      	b.n	800432a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d00b      	beq.n	8004320 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800430c:	2b02      	cmp	r3, #2
 800430e:	d007      	beq.n	8004320 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004314:	2b03      	cmp	r3, #3
 8004316:	d003      	beq.n	8004320 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800431c:	2b07      	cmp	r3, #7
 800431e:	d102      	bne.n	8004326 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004320:	2302      	movs	r3, #2
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	e001      	b.n	800432a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004326:	2301      	movs	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	01db      	lsls	r3, r3, #7
 8004334:	4413      	add	r3, r2
 8004336:	3384      	adds	r3, #132	@ 0x84
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	4611      	mov	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	01d2      	lsls	r2, r2, #7
 8004344:	440a      	add	r2, r1
 8004346:	3284      	adds	r2, #132	@ 0x84
 8004348:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800434c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	1acb      	subs	r3, r1, r3
 8004364:	69f9      	ldr	r1, [r7, #28]
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	6809      	ldr	r1, [r1, #0]
 8004370:	4608      	mov	r0, r1
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	01c9      	lsls	r1, r1, #7
 8004376:	4401      	add	r1, r0
 8004378:	3184      	adds	r1, #132	@ 0x84
 800437a:	4313      	orrs	r3, r2
 800437c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	01db      	lsls	r3, r3, #7
 8004388:	4413      	add	r3, r2
 800438a:	3384      	adds	r3, #132	@ 0x84
 800438c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	01db      	lsls	r3, r3, #7
 8004398:	440b      	add	r3, r1
 800439a:	3384      	adds	r3, #132	@ 0x84
 800439c:	4619      	mov	r1, r3
 800439e:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <LTDC_SetConfig+0x330>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	01db      	lsls	r3, r3, #7
 80043ae:	4413      	add	r3, r2
 80043b0:	3384      	adds	r3, #132	@ 0x84
 80043b2:	461a      	mov	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	4413      	add	r3, r2
 80043c6:	3384      	adds	r3, #132	@ 0x84
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	4611      	mov	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	01d2      	lsls	r2, r2, #7
 80043d4:	440a      	add	r2, r1
 80043d6:	3284      	adds	r2, #132	@ 0x84
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
}
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	@ 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	fffff8f8 	.word	0xfffff8f8
 80043f0:	fffff800 	.word	0xfffff800

080043f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	4b23      	ldr	r3, [pc, #140]	@ (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	4a22      	ldr	r2, [pc, #136]	@ (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	@ 0x40
 800440a:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004416:	4b1e      	ldr	r3, [pc, #120]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004422:	f7fe fded 	bl	8003000 <HAL_GetTick>
 8004426:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004428:	e009      	b.n	800443e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800442a:	f7fe fde9 	bl	8003000 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004438:	d901      	bls.n	800443e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e022      	b.n	8004484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800443e:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444a:	d1ee      	bne.n	800442a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800444c:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0f      	ldr	r2, [pc, #60]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004458:	f7fe fdd2 	bl	8003000 <HAL_GetTick>
 800445c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800445e:	e009      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004460:	f7fe fdce 	bl	8003000 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800446e:	d901      	bls.n	8004474 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e007      	b.n	8004484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004480:	d1ee      	bne.n	8004460 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000

08004494 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800449c:	f7fe fdb0 	bl	8003000 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e067      	b.n	800457c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fe f9ad 	bl	8002820 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fb47 	bl	8004b5e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	2120      	movs	r1, #32
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fb3f 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004500:	7afb      	ldrb	r3, [r7, #11]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d135      	bne.n	8004572 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_QSPI_Init+0xf0>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6852      	ldr	r2, [r2, #4]
 8004514:	0611      	lsls	r1, r2, #24
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	69d2      	ldr	r2, [r2, #28]
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6a12      	ldr	r2, [r2, #32]
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	430b      	orrs	r3, r1
 800452e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	4b14      	ldr	r3, [pc, #80]	@ (8004588 <HAL_QSPI_Init+0xf4>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6912      	ldr	r2, [r2, #16]
 800453e:	0411      	lsls	r1, r2, #16
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6952      	ldr	r2, [r2, #20]
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6992      	ldr	r2, [r2, #24]
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800457a:	7afb      	ldrb	r3, [r7, #11]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	00ffff2f 	.word	0x00ffff2f
 8004588:	ffe0f8fe 	.word	0xffe0f8fe

0800458c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7fe fd32 	bl	8003000 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_QSPI_Command+0x22>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e048      	b.n	8004640 <HAL_QSPI_Command+0xb4>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d137      	bne.n	8004632 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2200      	movs	r2, #0
 80045d8:	2120      	movs	r1, #32
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 facd 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d125      	bne.n	8004636 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80045ea:	2200      	movs	r2, #0
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fafa 	bl	8004be8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2201      	movs	r2, #1
 8004604:	2102      	movs	r1, #2
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fab7 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2202      	movs	r2, #2
 800461c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004626:	e006      	b.n	8004636 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004630:	e001      	b.n	8004636 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004632:	2302      	movs	r3, #2
 8004634:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800463e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	@ 0x28
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004658:	f7fe fcd2 	bl	8003000 <HAL_GetTick>
 800465c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3320      	adds	r3, #32
 8004664:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_QSPI_Transmit+0x2e>
 8004672:	2302      	movs	r3, #2
 8004674:	e07b      	b.n	800476e <HAL_QSPI_Transmit+0x126>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d16a      	bne.n	8004760 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d05b      	beq.n	800474e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2212      	movs	r2, #18
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80046ca:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80046cc:	e01b      	b.n	8004706 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2201      	movs	r2, #1
 80046d6:	2104      	movs	r1, #4
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fa4e 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80046e2:	7ffb      	ldrb	r3, [r7, #31]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1df      	bne.n	80046ce <HAL_QSPI_Transmit+0x86>
 800470e:	e000      	b.n	8004712 <HAL_QSPI_Transmit+0xca>
          break;
 8004710:	bf00      	nop
      }

      if (status == HAL_OK)
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d115      	bne.n	8004744 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2201      	movs	r2, #1
 8004720:	2102      	movs	r1, #2
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fa29 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800472c:	7ffb      	ldrb	r3, [r7, #31]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2202      	movs	r2, #2
 8004738:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f996 	bl	8004a6c <HAL_QSPI_Abort>
 8004740:	4603      	mov	r3, r0
 8004742:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800474c:	e00a      	b.n	8004764 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e001      	b.n	8004764 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004760:	2302      	movs	r3, #2
 8004762:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800476c:	7ffb      	ldrb	r3, [r7, #31]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08a      	sub	sp, #40	@ 0x28
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004786:	f7fe fc3b 	bl	8003000 <HAL_GetTick>
 800478a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3320      	adds	r3, #32
 800479a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_QSPI_Receive+0x36>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e082      	b.n	80048b2 <HAL_QSPI_Receive+0x13c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d171      	bne.n	80048a4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d062      	beq.n	8004892 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2222      	movs	r2, #34	@ 0x22
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004804:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800480e:	e01c      	b.n	800484a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2201      	movs	r2, #1
 8004818:	2106      	movs	r1, #6
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f9ad 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004824:	7ffb      	ldrb	r3, [r7, #31]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d114      	bne.n	8004854 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1de      	bne.n	8004810 <HAL_QSPI_Receive+0x9a>
 8004852:	e000      	b.n	8004856 <HAL_QSPI_Receive+0xe0>
          break;
 8004854:	bf00      	nop
      }

      if (status == HAL_OK)
 8004856:	7ffb      	ldrb	r3, [r7, #31]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d115      	bne.n	8004888 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2201      	movs	r2, #1
 8004864:	2102      	movs	r1, #2
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f987 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004870:	7ffb      	ldrb	r3, [r7, #31]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d108      	bne.n	8004888 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2202      	movs	r2, #2
 800487c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f8f4 	bl	8004a6c <HAL_QSPI_Abort>
 8004884:	4603      	mov	r3, r0
 8004886:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004890:	e00a      	b.n	80048a8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	f043 0208 	orr.w	r2, r3, #8
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e001      	b.n	80048a8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
 80048a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80048b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b088      	sub	sp, #32
 80048be:	af02      	add	r7, sp, #8
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048c8:	f7fe fb9a 	bl	8003000 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_QSPI_AutoPolling+0x24>
 80048da:	2302      	movs	r3, #2
 80048dc:	e060      	b.n	80049a0 <HAL_QSPI_AutoPolling+0xe6>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d14f      	bne.n	8004992 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2242      	movs	r2, #66	@ 0x42
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2200      	movs	r2, #0
 8004908:	2120      	movs	r1, #32
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f935 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d13d      	bne.n	8004996 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6852      	ldr	r2, [r2, #4]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004950:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800495a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f941 	bl	8004be8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2201      	movs	r2, #1
 800496e:	2108      	movs	r1, #8
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f902 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004990:	e001      	b.n	8004996 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80049b4:	f7fe fb24 	bl	8003000 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_QSPI_MemoryMapped+0x22>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e04c      	b.n	8004a64 <HAL_QSPI_MemoryMapped+0xbc>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d13b      	bne.n	8004a56 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2282      	movs	r2, #130	@ 0x82
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2120      	movs	r1, #32
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f8be 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d128      	bne.n	8004a5a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 0108 	bic.w	r1, r3, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d110      	bne.n	8004a48 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2210      	movs	r2, #16
 8004a36:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a46:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8004a48:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f8ca 	bl	8004be8 <QSPI_Config>
 8004a54:	e001      	b.n	8004a5a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7fe fac2 	bl	8003000 <HAL_GetTick>
 8004a7c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d062      	beq.n	8004b54 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fca5 	bl	8003408 <HAL_DMA_Abort>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d034      	beq.n	8004b4c <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0202 	orr.w	r2, r2, #2
 8004af0:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2102      	movs	r1, #2
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f83b 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2202      	movs	r2, #2
 8004b14:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2120      	movs	r1, #32
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f829 	bl	8004b7a <QSPI_WaitFlagStateUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d110      	bne.n	8004b54 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004b40:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b4a:	e003      	b.n	8004b54 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
  }

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b8a:	e01a      	b.n	8004bc2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d016      	beq.n	8004bc2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fe fa34 	bl	8003000 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2204      	movs	r2, #4
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00e      	b.n	8004be0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d1d6      	bne.n	8004b8c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <QSPI_Config+0x28>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c02:	d005      	beq.n	8004c10 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80b9 	beq.w	8004d8c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d05f      	beq.n	8004ce2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d031      	beq.n	8004c98 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c42:	431a      	orrs	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	049b      	lsls	r3, r3, #18
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c88:	f000 812e 	beq.w	8004ee8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	6852      	ldr	r2, [r2, #4]
 8004c94:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004c96:	e127      	b.n	8004ee8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	049b      	lsls	r3, r3, #18
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	ea42 0103 	orr.w	r1, r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	615a      	str	r2, [r3, #20]
}
 8004ce0:	e102      	b.n	8004ee8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d02e      	beq.n	8004d48 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	049b      	lsls	r3, r3, #18
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	ea42 0103 	orr.w	r1, r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d38:	f000 80d6 	beq.w	8004ee8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	6852      	ldr	r2, [r2, #4]
 8004d44:	619a      	str	r2, [r3, #24]
}
 8004d46:	e0cf      	b.n	8004ee8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	431a      	orrs	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	049b      	lsls	r3, r3, #18
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	ea42 0103 	orr.w	r1, r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	615a      	str	r2, [r3, #20]
}
 8004d8a:	e0ad      	b.n	8004ee8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d058      	beq.n	8004e46 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	6892      	ldr	r2, [r2, #8]
 8004d9c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02d      	beq.n	8004e02 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	049b      	lsls	r3, r3, #18
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	ea42 0103 	orr.w	r1, r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004df4:	d078      	beq.n	8004ee8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	6852      	ldr	r2, [r2, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
}
 8004e00:	e072      	b.n	8004ee8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	049b      	lsls	r3, r3, #18
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	ea42 0103 	orr.w	r1, r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	615a      	str	r2, [r3, #20]
}
 8004e44:	e050      	b.n	8004ee8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d02a      	beq.n	8004ea4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	431a      	orrs	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	049b      	lsls	r3, r3, #18
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	ea42 0103 	orr.w	r1, r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e96:	d027      	beq.n	8004ee8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	6852      	ldr	r2, [r2, #4]
 8004ea0:	619a      	str	r2, [r3, #24]
}
 8004ea2:	e021      	b.n	8004ee8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01d      	beq.n	8004ee8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	049b      	lsls	r3, r3, #18
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	ea42 0103 	orr.w	r1, r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	615a      	str	r2, [r3, #20]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e291      	b.n	800542e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8087 	beq.w	8005026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f18:	4b96      	ldr	r3, [pc, #600]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d00c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f24:	4b93      	ldr	r3, [pc, #588]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d112      	bne.n	8004f56 <HAL_RCC_OscConfig+0x62>
 8004f30:	4b90      	ldr	r3, [pc, #576]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3c:	d10b      	bne.n	8004f56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d06c      	beq.n	8005024 <HAL_RCC_OscConfig+0x130>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d168      	bne.n	8005024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e26b      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_OscConfig+0x7a>
 8004f60:	4b84      	ldr	r3, [pc, #528]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a83      	ldr	r2, [pc, #524]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e02e      	b.n	8004fcc <HAL_RCC_OscConfig+0xd8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x9c>
 8004f76:	4b7f      	ldr	r3, [pc, #508]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b7c      	ldr	r3, [pc, #496]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7b      	ldr	r2, [pc, #492]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e01d      	b.n	8004fcc <HAL_RCC_OscConfig+0xd8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0xc0>
 8004f9a:	4b76      	ldr	r3, [pc, #472]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a75      	ldr	r2, [pc, #468]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	4b73      	ldr	r3, [pc, #460]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a72      	ldr	r2, [pc, #456]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0xd8>
 8004fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d013      	beq.n	8004ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f814 	bl	8003000 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fe f810 	bl	8003000 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	@ 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e21f      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b61      	ldr	r3, [pc, #388]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0xe8>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fe f800 	bl	8003000 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005004:	f7fd fffc 	bl	8003000 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	@ 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e20b      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005016:	4b57      	ldr	r3, [pc, #348]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x110>
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d069      	beq.n	8005106 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005032:	4b50      	ldr	r3, [pc, #320]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b4d      	ldr	r3, [pc, #308]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b08      	cmp	r3, #8
 8005048:	d11c      	bne.n	8005084 <HAL_RCC_OscConfig+0x190>
 800504a:	4b4a      	ldr	r3, [pc, #296]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d116      	bne.n	8005084 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005056:	4b47      	ldr	r3, [pc, #284]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <HAL_RCC_OscConfig+0x17a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e1df      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506e:	4b41      	ldr	r3, [pc, #260]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	493d      	ldr	r1, [pc, #244]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005082:	e040      	b.n	8005106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d023      	beq.n	80050d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800508c:	4b39      	ldr	r3, [pc, #228]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a38      	ldr	r2, [pc, #224]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd ffb2 	bl	8003000 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a0:	f7fd ffae 	bl	8003000 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e1bd      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b2:	4b30      	ldr	r3, [pc, #192]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050be:	4b2d      	ldr	r3, [pc, #180]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4929      	ldr	r1, [pc, #164]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
 80050d2:	e018      	b.n	8005106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d4:	4b27      	ldr	r3, [pc, #156]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a26      	ldr	r2, [pc, #152]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd ff8e 	bl	8003000 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fd ff8a 	bl	8003000 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e199      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d038      	beq.n	8005184 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d019      	beq.n	800514e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511a:	4b16      	ldr	r3, [pc, #88]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 800511c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511e:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005126:	f7fd ff6b 	bl	8003000 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512e:	f7fd ff67 	bl	8003000 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e176      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x23a>
 800514c:	e01a      	b.n	8005184 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514e:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005152:	4a08      	ldr	r2, [pc, #32]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515a:	f7fd ff51 	bl	8003000 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005162:	f7fd ff4d 	bl	8003000 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d903      	bls.n	8005178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e15c      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
 8005174:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	4b91      	ldr	r3, [pc, #580]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ee      	bne.n	8005162 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80a4 	beq.w	80052da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b8b      	ldr	r3, [pc, #556]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	4b88      	ldr	r3, [pc, #544]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	4a87      	ldr	r2, [pc, #540]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80051a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051aa:	4b85      	ldr	r3, [pc, #532]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ba:	4b82      	ldr	r3, [pc, #520]	@ (80053c4 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d118      	bne.n	80051f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051c6:	4b7f      	ldr	r3, [pc, #508]	@ (80053c4 <HAL_RCC_OscConfig+0x4d0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7e      	ldr	r2, [pc, #504]	@ (80053c4 <HAL_RCC_OscConfig+0x4d0>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d2:	f7fd ff15 	bl	8003000 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fd ff11 	bl	8003000 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	@ 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e120      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ec:	4b75      	ldr	r3, [pc, #468]	@ (80053c4 <HAL_RCC_OscConfig+0x4d0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x31a>
 8005200:	4b6f      	ldr	r3, [pc, #444]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005204:	4a6e      	ldr	r2, [pc, #440]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6713      	str	r3, [r2, #112]	@ 0x70
 800520c:	e02d      	b.n	800526a <HAL_RCC_OscConfig+0x376>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RCC_OscConfig+0x33c>
 8005216:	4b6a      	ldr	r3, [pc, #424]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	4a69      	ldr	r2, [pc, #420]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	@ 0x70
 8005222:	4b67      	ldr	r3, [pc, #412]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005226:	4a66      	ldr	r2, [pc, #408]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005228:	f023 0304 	bic.w	r3, r3, #4
 800522c:	6713      	str	r3, [r2, #112]	@ 0x70
 800522e:	e01c      	b.n	800526a <HAL_RCC_OscConfig+0x376>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b05      	cmp	r3, #5
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x35e>
 8005238:	4b61      	ldr	r3, [pc, #388]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a60      	ldr	r2, [pc, #384]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800523e:	f043 0304 	orr.w	r3, r3, #4
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
 8005244:	4b5e      	ldr	r3, [pc, #376]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a5d      	ldr	r2, [pc, #372]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	e00b      	b.n	800526a <HAL_RCC_OscConfig+0x376>
 8005252:	4b5b      	ldr	r3, [pc, #364]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	4a5a      	ldr	r2, [pc, #360]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	@ 0x70
 800525e:	4b58      	ldr	r3, [pc, #352]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005262:	4a57      	ldr	r2, [pc, #348]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d015      	beq.n	800529e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005272:	f7fd fec5 	bl	8003000 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005278:	e00a      	b.n	8005290 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527a:	f7fd fec1 	bl	8003000 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e0ce      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005290:	4b4b      	ldr	r3, [pc, #300]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ee      	beq.n	800527a <HAL_RCC_OscConfig+0x386>
 800529c:	e014      	b.n	80052c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fd feaf 	bl	8003000 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a4:	e00a      	b.n	80052bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fd feab 	bl	8003000 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0b8      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052bc:	4b40      	ldr	r3, [pc, #256]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1ee      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d105      	bne.n	80052da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ce:	4b3c      	ldr	r3, [pc, #240]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	4a3b      	ldr	r2, [pc, #236]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80052d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80a4 	beq.w	800542c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052e4:	4b36      	ldr	r3, [pc, #216]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d06b      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d149      	bne.n	800538c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f8:	4b31      	ldr	r3, [pc, #196]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a30      	ldr	r2, [pc, #192]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fd fe7c 	bl	8003000 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530c:	f7fd fe78 	bl	8003000 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e087      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	3b01      	subs	r3, #1
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	061b      	lsls	r3, r3, #24
 800534e:	4313      	orrs	r3, r2
 8005350:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005352:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005356:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005358:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800535e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fd fe4c 	bl	8003000 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fd fe48 	bl	8003000 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e057      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537e:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x478>
 800538a:	e04f      	b.n	800542c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0b      	ldr	r2, [pc, #44]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 8005392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fd fe32 	bl	8003000 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd fe2e 	bl	8003000 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e03d      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b03      	ldr	r3, [pc, #12]	@ (80053c0 <HAL_RCC_OscConfig+0x4cc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4ac>
 80053be:	e035      	b.n	800542c <HAL_RCC_OscConfig+0x538>
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <HAL_RCC_OscConfig+0x544>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d028      	beq.n	8005428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d121      	bne.n	8005428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d11a      	bne.n	8005428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005400:	4293      	cmp	r3, r2
 8005402:	d111      	bne.n	8005428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	3b01      	subs	r3, #1
 8005412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d107      	bne.n	8005428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800

0800543c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0d0      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005454:	4b6a      	ldr	r3, [pc, #424]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d910      	bls.n	8005484 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b67      	ldr	r3, [pc, #412]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 020f 	bic.w	r2, r3, #15
 800546a:	4965      	ldr	r1, [pc, #404]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b63      	ldr	r3, [pc, #396]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0b8      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800549c:	4b59      	ldr	r3, [pc, #356]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a58      	ldr	r2, [pc, #352]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80054a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b4:	4b53      	ldr	r3, [pc, #332]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4a52      	ldr	r2, [pc, #328]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80054ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b50      	ldr	r3, [pc, #320]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	494d      	ldr	r1, [pc, #308]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d040      	beq.n	8005560 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b47      	ldr	r3, [pc, #284]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d115      	bne.n	800551e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d107      	bne.n	800550e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fe:	4b41      	ldr	r3, [pc, #260]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e073      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550e:	4b3d      	ldr	r3, [pc, #244]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e06b      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800551e:	4b39      	ldr	r3, [pc, #228]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 0203 	bic.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4936      	ldr	r1, [pc, #216]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 800552c:	4313      	orrs	r3, r2
 800552e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005530:	f7fd fd66 	bl	8003000 <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	e00a      	b.n	800554e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005538:	f7fd fd62 	bl	8003000 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e053      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	4b2d      	ldr	r3, [pc, #180]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 020c 	and.w	r2, r3, #12
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	429a      	cmp	r2, r3
 800555e:	d1eb      	bne.n	8005538 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005560:	4b27      	ldr	r3, [pc, #156]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d210      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b24      	ldr	r3, [pc, #144]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 020f 	bic.w	r2, r3, #15
 8005576:	4922      	ldr	r1, [pc, #136]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b20      	ldr	r3, [pc, #128]	@ (8005600 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e032      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559c:	4b19      	ldr	r3, [pc, #100]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4916      	ldr	r1, [pc, #88]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055ba:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	490e      	ldr	r1, [pc, #56]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ce:	f000 f821 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <HAL_RCC_ClockConfig+0x1c8>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	490a      	ldr	r1, [pc, #40]	@ (8005608 <HAL_RCC_ClockConfig+0x1cc>)
 80055e0:	5ccb      	ldrb	r3, [r1, r3]
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	4a09      	ldr	r2, [pc, #36]	@ (800560c <HAL_RCC_ClockConfig+0x1d0>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055ea:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <HAL_RCC_ClockConfig+0x1d4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fad6 	bl	8002ba0 <HAL_InitTick>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023c00 	.word	0x40023c00
 8005604:	40023800 	.word	0x40023800
 8005608:	0802fec0 	.word	0x0802fec0
 800560c:	20000004 	.word	0x20000004
 8005610:	20000008 	.word	0x20000008

08005614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b090      	sub	sp, #64	@ 0x40
 800561a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005624:	2300      	movs	r3, #0
 8005626:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800562c:	4b59      	ldr	r3, [pc, #356]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x180>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 030c 	and.w	r3, r3, #12
 8005634:	2b08      	cmp	r3, #8
 8005636:	d00d      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x40>
 8005638:	2b08      	cmp	r3, #8
 800563a:	f200 80a1 	bhi.w	8005780 <HAL_RCC_GetSysClockFreq+0x16c>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x34>
 8005642:	2b04      	cmp	r3, #4
 8005644:	d003      	beq.n	800564e <HAL_RCC_GetSysClockFreq+0x3a>
 8005646:	e09b      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005648:	4b53      	ldr	r3, [pc, #332]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x184>)
 800564a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800564c:	e09b      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800564e:	4b53      	ldr	r3, [pc, #332]	@ (800579c <HAL_RCC_GetSysClockFreq+0x188>)
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005652:	e098      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005654:	4b4f      	ldr	r3, [pc, #316]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x180>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800565e:	4b4d      	ldr	r3, [pc, #308]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x180>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d028      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b4a      	ldr	r3, [pc, #296]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x180>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	627a      	str	r2, [r7, #36]	@ 0x24
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800567c:	2100      	movs	r1, #0
 800567e:	4b47      	ldr	r3, [pc, #284]	@ (800579c <HAL_RCC_GetSysClockFreq+0x188>)
 8005680:	fb03 f201 	mul.w	r2, r3, r1
 8005684:	2300      	movs	r3, #0
 8005686:	fb00 f303 	mul.w	r3, r0, r3
 800568a:	4413      	add	r3, r2
 800568c:	4a43      	ldr	r2, [pc, #268]	@ (800579c <HAL_RCC_GetSysClockFreq+0x188>)
 800568e:	fba0 1202 	umull	r1, r2, r0, r2
 8005692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005694:	460a      	mov	r2, r1
 8005696:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800569a:	4413      	add	r3, r2
 800569c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800569e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a0:	2200      	movs	r2, #0
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	61fa      	str	r2, [r7, #28]
 80056a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056ae:	f7fb f843 	bl	8000738 <__aeabi_uldivmod>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4613      	mov	r3, r2
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ba:	e053      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056bc:	4b35      	ldr	r3, [pc, #212]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x180>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	2200      	movs	r2, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	617a      	str	r2, [r7, #20]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056ce:	f04f 0b00 	mov.w	fp, #0
 80056d2:	4652      	mov	r2, sl
 80056d4:	465b      	mov	r3, fp
 80056d6:	f04f 0000 	mov.w	r0, #0
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	0159      	lsls	r1, r3, #5
 80056e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e4:	0150      	lsls	r0, r2, #5
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	ebb2 080a 	subs.w	r8, r2, sl
 80056ee:	eb63 090b 	sbc.w	r9, r3, fp
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005702:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005706:	ebb2 0408 	subs.w	r4, r2, r8
 800570a:	eb63 0509 	sbc.w	r5, r3, r9
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	00eb      	lsls	r3, r5, #3
 8005718:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571c:	00e2      	lsls	r2, r4, #3
 800571e:	4614      	mov	r4, r2
 8005720:	461d      	mov	r5, r3
 8005722:	eb14 030a 	adds.w	r3, r4, sl
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	eb45 030b 	adc.w	r3, r5, fp
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800573a:	4629      	mov	r1, r5
 800573c:	028b      	lsls	r3, r1, #10
 800573e:	4621      	mov	r1, r4
 8005740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005744:	4621      	mov	r1, r4
 8005746:	028a      	lsls	r2, r1, #10
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	2200      	movs	r2, #0
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	60fa      	str	r2, [r7, #12]
 8005754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005758:	f7fa ffee 	bl	8000738 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4613      	mov	r3, r2
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x180>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	3301      	adds	r3, #1
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005774:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800577e:	e002      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x184>)
 8005782:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005788:	4618      	mov	r0, r3
 800578a:	3740      	adds	r7, #64	@ 0x40
 800578c:	46bd      	mov	sp, r7
 800578e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800
 8005798:	00f42400 	.word	0x00f42400
 800579c:	017d7840 	.word	0x017d7840

080057a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a4:	4b03      	ldr	r3, [pc, #12]	@ (80057b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a6:	681b      	ldr	r3, [r3, #0]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000004 	.word	0x20000004

080057b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057bc:	f7ff fff0 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0a9b      	lsrs	r3, r3, #10
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4903      	ldr	r1, [pc, #12]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	0802fed0 	.word	0x0802fed0

080057e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	220f      	movs	r2, #15
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057f0:	4b12      	ldr	r3, [pc, #72]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057fc:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005814:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCC_GetClockConfig+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800
 8005840:	40023c00 	.word	0x40023c00

08005844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800586c:	4b69      	ldr	r3, [pc, #420]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a68      	ldr	r2, [pc, #416]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005872:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005876:	6093      	str	r3, [r2, #8]
 8005878:	4b66      	ldr	r3, [pc, #408]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005880:	4964      	ldr	r1, [pc, #400]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800589e:	4b5d      	ldr	r3, [pc, #372]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	4959      	ldr	r1, [pc, #356]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058bc:	d101      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058ca:	2301      	movs	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058da:	4b4e      	ldr	r3, [pc, #312]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	494a      	ldr	r1, [pc, #296]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f8:	d101      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005906:	2301      	movs	r3, #1
 8005908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005916:	2301      	movs	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 808b 	beq.w	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005928:	4b3a      	ldr	r3, [pc, #232]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	4a39      	ldr	r2, [pc, #228]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005932:	6413      	str	r3, [r2, #64]	@ 0x40
 8005934:	4b37      	ldr	r3, [pc, #220]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005940:	4b35      	ldr	r3, [pc, #212]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a34      	ldr	r2, [pc, #208]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800594a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fd fb58 	bl	8003000 <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fd fb54 	bl	8003000 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e357      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005966:	4b2c      	ldr	r3, [pc, #176]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005972:	4b28      	ldr	r3, [pc, #160]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800597a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d035      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d02e      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005990:	4b20      	ldr	r3, [pc, #128]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005998:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800599a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059b2:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059b8:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d114      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fd fb1c 	bl	8003000 <HAL_GetTick>
 80059c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ca:	e00a      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059cc:	f7fd fb18 	bl	8003000 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e319      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ee      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059fa:	d111      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a08:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	4901      	ldr	r1, [pc, #4]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
 8005a12:	e00b      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	0ffffcff 	.word	0x0ffffcff
 8005a20:	4baa      	ldr	r3, [pc, #680]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4aa9      	ldr	r2, [pc, #676]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a2a:	6093      	str	r3, [r2, #8]
 8005a2c:	4ba7      	ldr	r3, [pc, #668]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a38:	49a4      	ldr	r1, [pc, #656]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a4a:	4ba0      	ldr	r3, [pc, #640]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a50:	4a9e      	ldr	r2, [pc, #632]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a5a:	4b9c      	ldr	r3, [pc, #624]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	4999      	ldr	r1, [pc, #612]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a78:	4b94      	ldr	r3, [pc, #592]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a86:	4991      	ldr	r1, [pc, #580]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a9a:	4b8c      	ldr	r3, [pc, #560]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aa8:	4988      	ldr	r1, [pc, #544]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005abc:	4b83      	ldr	r3, [pc, #524]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aca:	4980      	ldr	r1, [pc, #512]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ade:	4b7b      	ldr	r3, [pc, #492]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aec:	4977      	ldr	r1, [pc, #476]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b00:	4b72      	ldr	r3, [pc, #456]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b06:	f023 0203 	bic.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	496f      	ldr	r1, [pc, #444]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b22:	4b6a      	ldr	r3, [pc, #424]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b28:	f023 020c 	bic.w	r2, r3, #12
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b30:	4966      	ldr	r1, [pc, #408]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b44:	4b61      	ldr	r3, [pc, #388]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	495e      	ldr	r1, [pc, #376]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b66:	4b59      	ldr	r3, [pc, #356]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	4955      	ldr	r1, [pc, #340]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b88:	4b50      	ldr	r3, [pc, #320]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b96:	494d      	ldr	r1, [pc, #308]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005baa:	4b48      	ldr	r3, [pc, #288]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	4944      	ldr	r1, [pc, #272]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bda:	493c      	ldr	r1, [pc, #240]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bee:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfc:	4933      	ldr	r1, [pc, #204]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c10:	4b2e      	ldr	r3, [pc, #184]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c1e:	492b      	ldr	r1, [pc, #172]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d011      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c32:	4b26      	ldr	r3, [pc, #152]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c38:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c40:	4922      	ldr	r1, [pc, #136]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c50:	d101      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c72:	4b16      	ldr	r3, [pc, #88]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c78:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c80:	4912      	ldr	r1, [pc, #72]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c94:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca4:	4909      	ldr	r1, [pc, #36]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d006      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80d9 	beq.w	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc0:	4b02      	ldr	r3, [pc, #8]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a01      	ldr	r2, [pc, #4]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cca:	e001      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fd f995 	bl	8003000 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fd f991 	bl	8003000 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b64      	cmp	r3, #100	@ 0x64
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e194      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cec:	4b6c      	ldr	r3, [pc, #432]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d021      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11d      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d0c:	4b64      	ldr	r3, [pc, #400]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d1a:	4b61      	ldr	r3, [pc, #388]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	019a      	lsls	r2, r3, #6
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	071b      	lsls	r3, r3, #28
 8005d40:	4957      	ldr	r1, [pc, #348]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02e      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d72:	d129      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d74:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d82:	4b47      	ldr	r3, [pc, #284]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d88:	0f1b      	lsrs	r3, r3, #28
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	019a      	lsls	r2, r3, #6
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	431a      	orrs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	071b      	lsls	r3, r3, #28
 8005da8:	493d      	ldr	r1, [pc, #244]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005db0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db6:	f023 021f 	bic.w	r2, r3, #31
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4937      	ldr	r1, [pc, #220]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01d      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dd4:	4b32      	ldr	r3, [pc, #200]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dda:	0e1b      	lsrs	r3, r3, #24
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005de2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de8:	0f1b      	lsrs	r3, r3, #28
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	019a      	lsls	r2, r3, #6
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	061b      	lsls	r3, r3, #24
 8005e02:	431a      	orrs	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	071b      	lsls	r3, r3, #28
 8005e08:	4925      	ldr	r1, [pc, #148]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d011      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	019a      	lsls	r2, r3, #6
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	071b      	lsls	r3, r3, #28
 8005e38:	4919      	ldr	r1, [pc, #100]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e40:	4b17      	ldr	r3, [pc, #92]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a16      	ldr	r2, [pc, #88]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fd f8d8 	bl	8003000 <HAL_GetTick>
 8005e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e54:	f7fd f8d4 	bl	8003000 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	@ 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e0d7      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e66:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	f040 80cd 	bne.w	8006014 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e86:	f7fd f8bb 	bl	8003000 <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e8e:	f7fd f8b7 	bl	8003000 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b64      	cmp	r3, #100	@ 0x64
 8005e9a:	d903      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e0ba      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ea0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb0:	d0ed      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02e      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d12a      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eda:	4b51      	ldr	r3, [pc, #324]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	0f1b      	lsrs	r3, r3, #28
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	019a      	lsls	r2, r3, #6
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	041b      	lsls	r3, r3, #16
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	061b      	lsls	r3, r3, #24
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	071b      	lsls	r3, r3, #28
 8005f0e:	4944      	ldr	r1, [pc, #272]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f16:	4b42      	ldr	r3, [pc, #264]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	493d      	ldr	r1, [pc, #244]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d022      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f44:	d11d      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f46:	4b36      	ldr	r3, [pc, #216]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	0e1b      	lsrs	r3, r3, #24
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f54:	4b32      	ldr	r3, [pc, #200]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5a:	0f1b      	lsrs	r3, r3, #28
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	019a      	lsls	r2, r3, #6
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	071b      	lsls	r3, r3, #28
 8005f7a:	4929      	ldr	r1, [pc, #164]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d028      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f8e:	4b24      	ldr	r3, [pc, #144]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f9c:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	0c1b      	lsrs	r3, r3, #16
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	019a      	lsls	r2, r3, #6
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	071b      	lsls	r3, r3, #28
 8005fc2:	4917      	ldr	r1, [pc, #92]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fca:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	4911      	ldr	r1, [pc, #68]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fd f808 	bl	8003000 <HAL_GetTick>
 8005ff0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ff4:	f7fd f804 	bl	8003000 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	@ 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e007      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800600e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006012:	d1ef      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40023800 	.word	0x40023800

08006024 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e025      	b.n	8006084 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fc fd9d 	bl	8002b8c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f001 f9f5 	bl	8007454 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	461a      	mov	r2, r3
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	f001 fa49 	bl	800750c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800609e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d101      	bne.n	80060aa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
 80060a8:	e021      	b.n	80060ee <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <HAL_SDRAM_SendCommand+0x2a>
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d118      	bne.n	80060e8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fa8a 	bl	80075e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d104      	bne.n	80060de <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2205      	movs	r2, #5
 80060d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060dc:	e006      	b.n	80060ec <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060e6:	e001      	b.n	80060ec <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e049      	b.n	800619c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fc fc21 	bl	8002964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 fd17 	bl	8006b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e054      	b.n	8006266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a26      	ldr	r2, [pc, #152]	@ (8006274 <HAL_TIM_Base_Start_IT+0xd0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d022      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d01d      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a22      	ldr	r2, [pc, #136]	@ (8006278 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a21      	ldr	r2, [pc, #132]	@ (800627c <HAL_TIM_Base_Start_IT+0xd8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	@ (8006280 <HAL_TIM_Base_Start_IT+0xdc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	@ (8006284 <HAL_TIM_Base_Start_IT+0xe0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <HAL_TIM_Base_Start_IT+0xe4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	@ (800628c <HAL_TIM_Base_Start_IT+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d115      	bne.n	8006250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <HAL_TIM_Base_Start_IT+0xec>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d015      	beq.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d011      	beq.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	e008      	b.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e000      	b.n	8006264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010000 	.word	0x40010000
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800
 8006290:	00010007 	.word	0x00010007

08006294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e049      	b.n	800633a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f841 	bl	8006342 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f000 fc48 	bl	8006b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <HAL_TIM_PWM_Start+0x24>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e03c      	b.n	80063f6 <HAL_TIM_PWM_Start+0x9e>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d109      	bne.n	8006396 <HAL_TIM_PWM_Start+0x3e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e02f      	b.n	80063f6 <HAL_TIM_PWM_Start+0x9e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_PWM_Start+0x58>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e022      	b.n	80063f6 <HAL_TIM_PWM_Start+0x9e>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b0c      	cmp	r3, #12
 80063b4:	d109      	bne.n	80063ca <HAL_TIM_PWM_Start+0x72>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	bf14      	ite	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	2300      	moveq	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	e015      	b.n	80063f6 <HAL_TIM_PWM_Start+0x9e>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d109      	bne.n	80063e4 <HAL_TIM_PWM_Start+0x8c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	e008      	b.n	80063f6 <HAL_TIM_PWM_Start+0x9e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e092      	b.n	8006524 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xb6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800640c:	e023      	b.n	8006456 <HAL_TIM_PWM_Start+0xfe>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xc6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800641c:	e01b      	b.n	8006456 <HAL_TIM_PWM_Start+0xfe>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xd6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800642c:	e013      	b.n	8006456 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b0c      	cmp	r3, #12
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xe6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800643c:	e00b      	b.n	8006456 <HAL_TIM_PWM_Start+0xfe>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b10      	cmp	r3, #16
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0xf6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800644c:	e003      	b.n	8006456 <HAL_TIM_PWM_Start+0xfe>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2201      	movs	r2, #1
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 ff26 	bl	80072b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	@ (800652c <HAL_TIM_PWM_Start+0x1d4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_TIM_PWM_Start+0x120>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <HAL_TIM_PWM_Start+0x1d8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d101      	bne.n	800647c <HAL_TIM_PWM_Start+0x124>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <HAL_TIM_PWM_Start+0x126>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006490:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a25      	ldr	r2, [pc, #148]	@ (800652c <HAL_TIM_PWM_Start+0x1d4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d022      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a4:	d01d      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a22      	ldr	r2, [pc, #136]	@ (8006534 <HAL_TIM_PWM_Start+0x1dc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d018      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a20      	ldr	r2, [pc, #128]	@ (8006538 <HAL_TIM_PWM_Start+0x1e0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1f      	ldr	r2, [pc, #124]	@ (800653c <HAL_TIM_PWM_Start+0x1e4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00e      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a19      	ldr	r2, [pc, #100]	@ (8006530 <HAL_TIM_PWM_Start+0x1d8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d009      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006540 <HAL_TIM_PWM_Start+0x1e8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d004      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x18a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <HAL_TIM_PWM_Start+0x1ec>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d115      	bne.n	800650e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	4b17      	ldr	r3, [pc, #92]	@ (8006548 <HAL_TIM_PWM_Start+0x1f0>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b06      	cmp	r3, #6
 80064f2:	d015      	beq.n	8006520 <HAL_TIM_PWM_Start+0x1c8>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fa:	d011      	beq.n	8006520 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650c:	e008      	b.n	8006520 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e000      	b.n	8006522 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006520:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40010000 	.word	0x40010000
 8006530:	40010400 	.word	0x40010400
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40014000 	.word	0x40014000
 8006544:	40001800 	.word	0x40001800
 8006548:	00010007 	.word	0x00010007

0800654c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d020      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01b      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0202 	mvn.w	r2, #2
 8006580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fac8 	bl	8006b2c <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 faba 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 facb 	bl	8006b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d020      	beq.n	80065fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0204 	mvn.w	r2, #4
 80065cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 faa2 	bl	8006b2c <HAL_TIM_IC_CaptureCallback>
 80065e8:	e005      	b.n	80065f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa94 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 faa5 	bl	8006b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d020      	beq.n	8006648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0208 	mvn.w	r2, #8
 8006618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2204      	movs	r2, #4
 800661e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa7c 	bl	8006b2c <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa6e 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fa7f 	bl	8006b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b00      	cmp	r3, #0
 8006650:	d020      	beq.n	8006694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0210 	mvn.w	r2, #16
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2208      	movs	r2, #8
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa56 	bl	8006b2c <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa48 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa59 	bl	8006b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0201 	mvn.w	r2, #1
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb fc78 	bl	8001fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00c      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80066de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fea3 	bl	800742c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fe9b 	bl	8007440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00c      	beq.n	800672e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa13 	bl	8006b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00c      	beq.n	8006752 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0220 	mvn.w	r2, #32
 800674a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fe63 	bl	8007418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006776:	2302      	movs	r3, #2
 8006778:	e0ff      	b.n	800697a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b14      	cmp	r3, #20
 8006786:	f200 80f0 	bhi.w	800696a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800678a:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067e5 	.word	0x080067e5
 8006794:	0800696b 	.word	0x0800696b
 8006798:	0800696b 	.word	0x0800696b
 800679c:	0800696b 	.word	0x0800696b
 80067a0:	08006825 	.word	0x08006825
 80067a4:	0800696b 	.word	0x0800696b
 80067a8:	0800696b 	.word	0x0800696b
 80067ac:	0800696b 	.word	0x0800696b
 80067b0:	08006867 	.word	0x08006867
 80067b4:	0800696b 	.word	0x0800696b
 80067b8:	0800696b 	.word	0x0800696b
 80067bc:	0800696b 	.word	0x0800696b
 80067c0:	080068a7 	.word	0x080068a7
 80067c4:	0800696b 	.word	0x0800696b
 80067c8:	0800696b 	.word	0x0800696b
 80067cc:	0800696b 	.word	0x0800696b
 80067d0:	080068e9 	.word	0x080068e9
 80067d4:	0800696b 	.word	0x0800696b
 80067d8:	0800696b 	.word	0x0800696b
 80067dc:	0800696b 	.word	0x0800696b
 80067e0:	08006929 	.word	0x08006929
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fa68 	bl	8006cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0208 	orr.w	r2, r2, #8
 80067fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0204 	bic.w	r2, r2, #4
 800680e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6999      	ldr	r1, [r3, #24]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	619a      	str	r2, [r3, #24]
      break;
 8006822:	e0a5      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 faba 	bl	8006da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	021a      	lsls	r2, r3, #8
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	619a      	str	r2, [r3, #24]
      break;
 8006864:	e084      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fb11 	bl	8006e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0208 	orr.w	r2, r2, #8
 8006880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0204 	bic.w	r2, r2, #4
 8006890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69d9      	ldr	r1, [r3, #28]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	61da      	str	r2, [r3, #28]
      break;
 80068a4:	e064      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fb67 	bl	8006f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	021a      	lsls	r2, r3, #8
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	61da      	str	r2, [r3, #28]
      break;
 80068e6:	e043      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fb9e 	bl	8007030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0208 	orr.w	r2, r2, #8
 8006902:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0204 	bic.w	r2, r2, #4
 8006912:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006926:	e023      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fbd0 	bl	80070d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	021a      	lsls	r2, r3, #8
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006968:	e002      	b.n	8006970 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
      break;
 800696e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_TIM_ConfigClockSource+0x1c>
 800699c:	2302      	movs	r3, #2
 800699e:	e0b4      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x186>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	4b56      	ldr	r3, [pc, #344]	@ (8006b14 <HAL_TIM_ConfigClockSource+0x190>)
 80069bc:	4013      	ands	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d8:	d03e      	beq.n	8006a58 <HAL_TIM_ConfigClockSource+0xd4>
 80069da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069de:	f200 8087 	bhi.w	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e6:	f000 8086 	beq.w	8006af6 <HAL_TIM_ConfigClockSource+0x172>
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ee:	d87f      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b70      	cmp	r3, #112	@ 0x70
 80069f2:	d01a      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0xa6>
 80069f4:	2b70      	cmp	r3, #112	@ 0x70
 80069f6:	d87b      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b60      	cmp	r3, #96	@ 0x60
 80069fa:	d050      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x11a>
 80069fc:	2b60      	cmp	r3, #96	@ 0x60
 80069fe:	d877      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b50      	cmp	r3, #80	@ 0x50
 8006a02:	d03c      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0xfa>
 8006a04:	2b50      	cmp	r3, #80	@ 0x50
 8006a06:	d873      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b40      	cmp	r3, #64	@ 0x40
 8006a0a:	d058      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0x13a>
 8006a0c:	2b40      	cmp	r3, #64	@ 0x40
 8006a0e:	d86f      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a10:	2b30      	cmp	r3, #48	@ 0x30
 8006a12:	d064      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a14:	2b30      	cmp	r3, #48	@ 0x30
 8006a16:	d86b      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d060      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d867      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d05c      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d05a      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a28:	e062      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a3a:	f000 fc19 	bl	8007270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	609a      	str	r2, [r3, #8]
      break;
 8006a56:	e04f      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a68:	f000 fc02 	bl	8007270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a7a:	609a      	str	r2, [r3, #8]
      break;
 8006a7c:	e03c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f000 fb76 	bl	800717c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2150      	movs	r1, #80	@ 0x50
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fbcf 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006a9c:	e02c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f000 fb95 	bl	80071da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2160      	movs	r1, #96	@ 0x60
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fbbf 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006abc:	e01c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aca:	461a      	mov	r2, r3
 8006acc:	f000 fb56 	bl	800717c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2140      	movs	r1, #64	@ 0x40
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fbaf 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006adc:	e00c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f000 fba6 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006aee:	e003      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	e000      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	fffeff88 	.word	0xfffeff88

08006b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a46      	ldr	r2, [pc, #280]	@ (8006c94 <TIM_Base_SetConfig+0x12c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d013      	beq.n	8006ba8 <TIM_Base_SetConfig+0x40>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b86:	d00f      	beq.n	8006ba8 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a43      	ldr	r2, [pc, #268]	@ (8006c98 <TIM_Base_SetConfig+0x130>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00b      	beq.n	8006ba8 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a42      	ldr	r2, [pc, #264]	@ (8006c9c <TIM_Base_SetConfig+0x134>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a41      	ldr	r2, [pc, #260]	@ (8006ca0 <TIM_Base_SetConfig+0x138>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a40      	ldr	r2, [pc, #256]	@ (8006ca4 <TIM_Base_SetConfig+0x13c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d108      	bne.n	8006bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a35      	ldr	r2, [pc, #212]	@ (8006c94 <TIM_Base_SetConfig+0x12c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d02b      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc8:	d027      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a32      	ldr	r2, [pc, #200]	@ (8006c98 <TIM_Base_SetConfig+0x130>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d023      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a31      	ldr	r2, [pc, #196]	@ (8006c9c <TIM_Base_SetConfig+0x134>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01f      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a30      	ldr	r2, [pc, #192]	@ (8006ca0 <TIM_Base_SetConfig+0x138>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01b      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2f      	ldr	r2, [pc, #188]	@ (8006ca4 <TIM_Base_SetConfig+0x13c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d017      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2e      	ldr	r2, [pc, #184]	@ (8006ca8 <TIM_Base_SetConfig+0x140>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8006cac <TIM_Base_SetConfig+0x144>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00f      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb0 <TIM_Base_SetConfig+0x148>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00b      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb4 <TIM_Base_SetConfig+0x14c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d007      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb8 <TIM_Base_SetConfig+0x150>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a29      	ldr	r2, [pc, #164]	@ (8006cbc <TIM_Base_SetConfig+0x154>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a10      	ldr	r2, [pc, #64]	@ (8006c94 <TIM_Base_SetConfig+0x12c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <TIM_Base_SetConfig+0xf8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a12      	ldr	r2, [pc, #72]	@ (8006ca4 <TIM_Base_SetConfig+0x13c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d103      	bne.n	8006c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d105      	bne.n	8006c86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f023 0201 	bic.w	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	611a      	str	r2, [r3, #16]
  }
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40010400 	.word	0x40010400
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40014400 	.word	0x40014400
 8006cb0:	40014800 	.word	0x40014800
 8006cb4:	40001800 	.word	0x40001800
 8006cb8:	40001c00 	.word	0x40001c00
 8006cbc:	40002000 	.word	0x40002000

08006cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f023 0201 	bic.w	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4b2b      	ldr	r3, [pc, #172]	@ (8006d98 <TIM_OC1_SetConfig+0xd8>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 0302 	bic.w	r3, r3, #2
 8006d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a21      	ldr	r2, [pc, #132]	@ (8006d9c <TIM_OC1_SetConfig+0xdc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC1_SetConfig+0x64>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a20      	ldr	r2, [pc, #128]	@ (8006da0 <TIM_OC1_SetConfig+0xe0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10c      	bne.n	8006d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0308 	bic.w	r3, r3, #8
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a16      	ldr	r2, [pc, #88]	@ (8006d9c <TIM_OC1_SetConfig+0xdc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC1_SetConfig+0x8e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a15      	ldr	r2, [pc, #84]	@ (8006da0 <TIM_OC1_SetConfig+0xe0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d111      	bne.n	8006d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	fffeff8f 	.word	0xfffeff8f
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40010400 	.word	0x40010400

08006da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f023 0210 	bic.w	r2, r3, #16
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4b2e      	ldr	r3, [pc, #184]	@ (8006e88 <TIM_OC2_SetConfig+0xe4>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f023 0320 	bic.w	r3, r3, #32
 8006dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a23      	ldr	r2, [pc, #140]	@ (8006e8c <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC2_SetConfig+0x68>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a22      	ldr	r2, [pc, #136]	@ (8006e90 <TIM_OC2_SetConfig+0xec>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10d      	bne.n	8006e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <TIM_OC2_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC2_SetConfig+0x94>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <TIM_OC2_SetConfig+0xec>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d113      	bne.n	8006e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	feff8fff 	.word	0xfeff8fff
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40010400 	.word	0x40010400

08006e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8006f74 <TIM_OC3_SetConfig+0xe0>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a22      	ldr	r2, [pc, #136]	@ (8006f78 <TIM_OC3_SetConfig+0xe4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC3_SetConfig+0x66>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a21      	ldr	r2, [pc, #132]	@ (8006f7c <TIM_OC3_SetConfig+0xe8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d10d      	bne.n	8006f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a17      	ldr	r2, [pc, #92]	@ (8006f78 <TIM_OC3_SetConfig+0xe4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_OC3_SetConfig+0x92>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <TIM_OC3_SetConfig+0xe8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d113      	bne.n	8006f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	621a      	str	r2, [r3, #32]
}
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	fffeff8f 	.word	0xfffeff8f
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40010400 	.word	0x40010400

08006f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4b1e      	ldr	r3, [pc, #120]	@ (8007024 <TIM_OC4_SetConfig+0xa4>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	031b      	lsls	r3, r3, #12
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a13      	ldr	r2, [pc, #76]	@ (8007028 <TIM_OC4_SetConfig+0xa8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC4_SetConfig+0x68>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a12      	ldr	r2, [pc, #72]	@ (800702c <TIM_OC4_SetConfig+0xac>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d109      	bne.n	8006ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	019b      	lsls	r3, r3, #6
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	feff8fff 	.word	0xfeff8fff
 8007028:	40010000 	.word	0x40010000
 800702c:	40010400 	.word	0x40010400

08007030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4b1b      	ldr	r3, [pc, #108]	@ (80070c8 <TIM_OC5_SetConfig+0x98>)
 800705c:	4013      	ands	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	041b      	lsls	r3, r3, #16
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a12      	ldr	r2, [pc, #72]	@ (80070cc <TIM_OC5_SetConfig+0x9c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_OC5_SetConfig+0x5e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a11      	ldr	r2, [pc, #68]	@ (80070d0 <TIM_OC5_SetConfig+0xa0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d109      	bne.n	80070a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	621a      	str	r2, [r3, #32]
}
 80070bc:	bf00      	nop
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	fffeff8f 	.word	0xfffeff8f
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400

080070d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007170 <TIM_OC6_SetConfig+0x9c>)
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	051b      	lsls	r3, r3, #20
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a13      	ldr	r2, [pc, #76]	@ (8007174 <TIM_OC6_SetConfig+0xa0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_OC6_SetConfig+0x60>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a12      	ldr	r2, [pc, #72]	@ (8007178 <TIM_OC6_SetConfig+0xa4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d109      	bne.n	8007148 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800713a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	feff8fff 	.word	0xfeff8fff
 8007174:	40010000 	.word	0x40010000
 8007178:	40010400 	.word	0x40010400

0800717c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f023 0201 	bic.w	r2, r3, #1
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 030a 	bic.w	r3, r3, #10
 80071b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071da:	b480      	push	{r7}
 80071dc:	b087      	sub	sp, #28
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f023 0210 	bic.w	r2, r3, #16
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	031b      	lsls	r3, r3, #12
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	f043 0307 	orr.w	r3, r3, #7
 800725c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800728a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	021a      	lsls	r2, r3, #8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	431a      	orrs	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	609a      	str	r2, [r3, #8]
}
 80072a4:	bf00      	nop
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2201      	movs	r2, #1
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	431a      	orrs	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
	...

080072fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007310:	2302      	movs	r3, #2
 8007312:	e06d      	b.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a30      	ldr	r2, [pc, #192]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d004      	beq.n	8007348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2f      	ldr	r2, [pc, #188]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d108      	bne.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800734e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a20      	ldr	r2, [pc, #128]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007386:	d01d      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1d      	ldr	r2, [pc, #116]	@ (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1a      	ldr	r2, [pc, #104]	@ (800740c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a16      	ldr	r2, [pc, #88]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d10c      	bne.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	40010000 	.word	0x40010000
 8007400:	40010400 	.word	0x40010400
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40014000 	.word	0x40014000
 8007414:	40001800 	.word	0x40001800

08007418 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d121      	bne.n	80074aa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b27      	ldr	r3, [pc, #156]	@ (8007508 <FMC_SDRAM_Init+0xb4>)
 800746c:	4013      	ands	r3, r2
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	6851      	ldr	r1, [r2, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	6892      	ldr	r2, [r2, #8]
 8007476:	4311      	orrs	r1, r2
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	68d2      	ldr	r2, [r2, #12]
 800747c:	4311      	orrs	r1, r2
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	6912      	ldr	r2, [r2, #16]
 8007482:	4311      	orrs	r1, r2
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	6952      	ldr	r2, [r2, #20]
 8007488:	4311      	orrs	r1, r2
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	6992      	ldr	r2, [r2, #24]
 800748e:	4311      	orrs	r1, r2
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	69d2      	ldr	r2, [r2, #28]
 8007494:	4311      	orrs	r1, r2
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	6a12      	ldr	r2, [r2, #32]
 800749a:	4311      	orrs	r1, r2
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074a0:	430a      	orrs	r2, r1
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	e026      	b.n	80074f8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	69d9      	ldr	r1, [r3, #28]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	4319      	orrs	r1, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c0:	430b      	orrs	r3, r1
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007508 <FMC_SDRAM_Init+0xb4>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	6851      	ldr	r1, [r2, #4]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	6892      	ldr	r2, [r2, #8]
 80074d8:	4311      	orrs	r1, r2
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	68d2      	ldr	r2, [r2, #12]
 80074de:	4311      	orrs	r1, r2
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	6912      	ldr	r2, [r2, #16]
 80074e4:	4311      	orrs	r1, r2
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	6952      	ldr	r2, [r2, #20]
 80074ea:	4311      	orrs	r1, r2
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	6992      	ldr	r2, [r2, #24]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	ffff8000 	.word	0xffff8000

0800750c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d128      	bne.n	8007570 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	1e59      	subs	r1, r3, #1
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	3b01      	subs	r3, #1
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	4319      	orrs	r1, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	3b01      	subs	r3, #1
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	4319      	orrs	r1, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	3b01      	subs	r3, #1
 8007546:	031b      	lsls	r3, r3, #12
 8007548:	4319      	orrs	r1, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	3b01      	subs	r3, #1
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	4319      	orrs	r1, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	3b01      	subs	r3, #1
 800755a:	051b      	lsls	r3, r3, #20
 800755c:	4319      	orrs	r1, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	3b01      	subs	r3, #1
 8007564:	061b      	lsls	r3, r3, #24
 8007566:	430b      	orrs	r3, r1
 8007568:	431a      	orrs	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	609a      	str	r2, [r3, #8]
 800756e:	e02d      	b.n	80075cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	4b19      	ldr	r3, [pc, #100]	@ (80075dc <FMC_SDRAM_Timing_Init+0xd0>)
 8007576:	4013      	ands	r3, r2
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	68d2      	ldr	r2, [r2, #12]
 800757c:	3a01      	subs	r2, #1
 800757e:	0311      	lsls	r1, r2, #12
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	6952      	ldr	r2, [r2, #20]
 8007584:	3a01      	subs	r2, #1
 8007586:	0512      	lsls	r2, r2, #20
 8007588:	430a      	orrs	r2, r1
 800758a:	431a      	orrs	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	1e59      	subs	r1, r3, #1
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	4319      	orrs	r1, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	4319      	orrs	r1, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	4319      	orrs	r1, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	430b      	orrs	r3, r1
 80075c6:	431a      	orrs	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	ff0f0fff 	.word	0xff0f0fff

080075e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <FMC_SDRAM_SendCommand+0x44>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	6811      	ldr	r1, [r2, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	6852      	ldr	r2, [r2, #4]
 80075fc:	4311      	orrs	r1, r2
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	6892      	ldr	r2, [r2, #8]
 8007602:	3a01      	subs	r2, #1
 8007604:	0152      	lsls	r2, r2, #5
 8007606:	4311      	orrs	r1, r2
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	68d2      	ldr	r2, [r2, #12]
 800760c:	0252      	lsls	r2, r2, #9
 800760e:	430a      	orrs	r2, r1
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	ffc00000 	.word	0xffc00000

08007628 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800763a:	2b84      	cmp	r3, #132	@ 0x84
 800763c:	d005      	beq.n	800764a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800763e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	3303      	adds	r3, #3
 8007648:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800764a:	68fb      	ldr	r3, [r7, #12]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800765e:	f3ef 8305 	mrs	r3, IPSR
 8007662:	607b      	str	r3, [r7, #4]
  return(result);
 8007664:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007666:	2b00      	cmp	r3, #0
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007680:	f001 f97e 	bl	8008980 <vTaskStartScheduler>
  
  return osOK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	bd80      	pop	{r7, pc}

0800768a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800768a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800768c:	b089      	sub	sp, #36	@ 0x24
 800768e:	af04      	add	r7, sp, #16
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <osThreadCreate+0x54>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01c      	beq.n	80076de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685c      	ldr	r4, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691e      	ldr	r6, [r3, #16]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff ffb6 	bl	8007628 <makeFreeRtosPriority>
 80076bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076c6:	9202      	str	r2, [sp, #8]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	9100      	str	r1, [sp, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	4632      	mov	r2, r6
 80076d0:	4629      	mov	r1, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 ff64 	bl	80085a0 <xTaskCreateStatic>
 80076d8:	4603      	mov	r3, r0
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e01c      	b.n	8007718 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685c      	ldr	r4, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff ff98 	bl	8007628 <makeFreeRtosPriority>
 80076f8:	4602      	mov	r2, r0
 80076fa:	f107 030c 	add.w	r3, r7, #12
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	9200      	str	r2, [sp, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	4632      	mov	r2, r6
 8007706:	4629      	mov	r1, r5
 8007708:	4620      	mov	r0, r4
 800770a:	f000 ffaf 	bl	800866c <xTaskCreate>
 800770e:	4603      	mov	r3, r0
 8007710:	2b01      	cmp	r3, #1
 8007712:	d001      	beq.n	8007718 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007718:	68fb      	ldr	r3, [r7, #12]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007722 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <osDelay+0x16>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	e000      	b.n	800773a <osDelay+0x18>
 8007738:	2301      	movs	r3, #1
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f8e8 	bl	8008910 <vTaskDelay>
  
  return osOK;
 8007740:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af02      	add	r7, sp, #8
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00f      	beq.n	800777c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d10a      	bne.n	8007778 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2203      	movs	r2, #3
 8007768:	9200      	str	r2, [sp, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	2001      	movs	r0, #1
 8007770:	f000 f9c2 	bl	8007af8 <xQueueGenericCreateStatic>
 8007774:	4603      	mov	r3, r0
 8007776:	e016      	b.n	80077a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	e014      	b.n	80077a6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d110      	bne.n	80077a4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007782:	2203      	movs	r2, #3
 8007784:	2100      	movs	r1, #0
 8007786:	2001      	movs	r0, #1
 8007788:	f000 fa3d 	bl	8007c06 <xQueueGenericCreate>
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <osSemaphoreCreate+0x56>
 8007794:	2300      	movs	r3, #0
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fa96 	bl	8007ccc <xQueueGenericSend>
      return sema;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	e000      	b.n	80077a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80077a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80077c4:	2380      	movs	r3, #128	@ 0x80
 80077c6:	e03a      	b.n	800783e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	d103      	bne.n	80077dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80077d4:	f04f 33ff 	mov.w	r3, #4294967295
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e009      	b.n	80077f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d006      	beq.n	80077f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80077ec:	2301      	movs	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80077f0:	f7ff ff32 	bl	8007658 <inHandlerMode>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d017      	beq.n	800782a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	461a      	mov	r2, r3
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fd1c 	bl	8008240 <xQueueReceiveFromISR>
 8007808:	4603      	mov	r3, r0
 800780a:	2b01      	cmp	r3, #1
 800780c:	d001      	beq.n	8007812 <osSemaphoreWait+0x62>
      return osErrorOS;
 800780e:	23ff      	movs	r3, #255	@ 0xff
 8007810:	e015      	b.n	800783e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d011      	beq.n	800783c <osSemaphoreWait+0x8c>
 8007818:	4b0b      	ldr	r3, [pc, #44]	@ (8007848 <osSemaphoreWait+0x98>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	e008      	b.n	800783c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fbef 	bl	8008010 <xQueueSemaphoreTake>
 8007832:	4603      	mov	r3, r0
 8007834:	2b01      	cmp	r3, #1
 8007836:	d001      	beq.n	800783c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007838:	23ff      	movs	r3, #255	@ 0xff
 800783a:	e000      	b.n	800783e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800785c:	f7ff fefc 	bl	8007658 <inHandlerMode>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d016      	beq.n	8007894 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007866:	f107 0308 	add.w	r3, r7, #8
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fb37 	bl	8007ee0 <xQueueGiveFromISR>
 8007872:	4603      	mov	r3, r0
 8007874:	2b01      	cmp	r3, #1
 8007876:	d001      	beq.n	800787c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007878:	23ff      	movs	r3, #255	@ 0xff
 800787a:	e017      	b.n	80078ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d013      	beq.n	80078aa <osSemaphoreRelease+0x5e>
 8007882:	4b0c      	ldr	r3, [pc, #48]	@ (80078b4 <osSemaphoreRelease+0x68>)
 8007884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	e00a      	b.n	80078aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa16 	bl	8007ccc <xQueueGenericSend>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d001      	beq.n	80078aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80078a6:	23ff      	movs	r3, #255	@ 0xff
 80078a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80078aa:	68fb      	ldr	r3, [r7, #12]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	e000ed04 	.word	0xe000ed04

080078b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f103 0208 	add.w	r2, r3, #8
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f103 0208 	add.w	r2, r3, #8
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f103 0208 	add.w	r2, r3, #8
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d103      	bne.n	800797a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e00c      	b.n	8007994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3308      	adds	r3, #8
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <vListInsert+0x2e>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	429a      	cmp	r2, r3
 8007992:	d2f6      	bcs.n	8007982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6892      	ldr	r2, [r2, #8]
 80079e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6852      	ldr	r2, [r2, #4]
 80079ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d103      	bne.n	8007a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10d      	bne.n	8007a50 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a38:	b672      	cpsid	i
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	b662      	cpsie	i
 8007a48:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	e7fd      	b.n	8007a4c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007a50:	f001 ff1c 	bl	800988c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5c:	68f9      	ldr	r1, [r7, #12]
 8007a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a80:	3b01      	subs	r3, #1
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a86:	fb01 f303 	mul.w	r3, r1, r3
 8007a8a:	441a      	add	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	22ff      	movs	r2, #255	@ 0xff
 8007a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	22ff      	movs	r2, #255	@ 0xff
 8007a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d114      	bne.n	8007ad0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01a      	beq.n	8007ae4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 f9ca 	bl	8008e4c <xTaskRemoveFromEventList>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d012      	beq.n	8007ae4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007abe:	4b0d      	ldr	r3, [pc, #52]	@ (8007af4 <xQueueGenericReset+0xd4>)
 8007ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	e009      	b.n	8007ae4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3310      	adds	r3, #16
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff feef 	bl	80078b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3324      	adds	r3, #36	@ 0x24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff feea 	bl	80078b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ae4:	f001 ff08 	bl	80098f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ae8:	2301      	movs	r3, #1
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	@ 0x38
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10d      	bne.n	8007b28 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	b672      	cpsid	i
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	b662      	cpsie	i
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <xQueueGenericCreateStatic+0x5e>
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <xQueueGenericCreateStatic+0x62>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <xQueueGenericCreateStatic+0x64>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10d      	bne.n	8007b7c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	b672      	cpsid	i
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	b662      	cpsie	i
 8007b74:	623b      	str	r3, [r7, #32]
}
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <xQueueGenericCreateStatic+0x90>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <xQueueGenericCreateStatic+0x94>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <xQueueGenericCreateStatic+0x96>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10d      	bne.n	8007bae <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	b672      	cpsid	i
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	b662      	cpsie	i
 8007ba6:	61fb      	str	r3, [r7, #28]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bae:	2348      	movs	r3, #72	@ 0x48
 8007bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b48      	cmp	r3, #72	@ 0x48
 8007bb6:	d00d      	beq.n	8007bd4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	b672      	cpsid	i
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	b662      	cpsie	i
 8007bcc:	61bb      	str	r3, [r7, #24]
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00d      	beq.n	8007bfc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007be8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f848 	bl	8007c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3730      	adds	r7, #48	@ 0x30
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b08a      	sub	sp, #40	@ 0x28
 8007c0a:	af02      	add	r7, sp, #8
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	4613      	mov	r3, r2
 8007c12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <xQueueGenericCreate+0x30>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	b672      	cpsid	i
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	b662      	cpsie	i
 8007c2e:	613b      	str	r3, [r7, #16]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	e004      	b.n	8007c4c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	3348      	adds	r3, #72	@ 0x48
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 ff49 	bl	8009ae8 <pvPortMalloc>
 8007c56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3348      	adds	r3, #72	@ 0x48
 8007c66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c70:	79fa      	ldrb	r2, [r7, #7]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f805 	bl	8007c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c82:	69bb      	ldr	r3, [r7, #24]
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	e002      	b.n	8007cae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cba:	2101      	movs	r1, #1
 8007cbc:	69b8      	ldr	r0, [r7, #24]
 8007cbe:	f7ff feaf 	bl	8007a20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08e      	sub	sp, #56	@ 0x38
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10d      	bne.n	8007d04 <xQueueGenericSend+0x38>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	b672      	cpsid	i
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	b662      	cpsie	i
 8007cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cfe:	bf00      	nop
 8007d00:	bf00      	nop
 8007d02:	e7fd      	b.n	8007d00 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <xQueueGenericSend+0x46>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <xQueueGenericSend+0x4a>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <xQueueGenericSend+0x4c>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <xQueueGenericSend+0x6c>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d20:	b672      	cpsid	i
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	b662      	cpsie	i
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d103      	bne.n	8007d46 <xQueueGenericSend+0x7a>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <xQueueGenericSend+0x7e>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <xQueueGenericSend+0x80>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <xQueueGenericSend+0xa0>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	b672      	cpsid	i
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	b662      	cpsie	i
 8007d64:	623b      	str	r3, [r7, #32]
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	e7fd      	b.n	8007d68 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d6c:	f001 fa3c 	bl	80091e8 <xTaskGetSchedulerState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <xQueueGenericSend+0xb0>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <xQueueGenericSend+0xb4>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueGenericSend+0xb6>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <xQueueGenericSend+0xd6>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	61fb      	str	r3, [r7, #28]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007da2:	f001 fd73 	bl	800988c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d302      	bcc.n	8007db8 <xQueueGenericSend+0xec>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d129      	bne.n	8007e0c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dbe:	f000 fadf 	bl	8008380 <prvCopyDataToQueue>
 8007dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d010      	beq.n	8007dee <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	3324      	adds	r3, #36	@ 0x24
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 f83b 	bl	8008e4c <xTaskRemoveFromEventList>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d013      	beq.n	8007e04 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8007edc <xQueueGenericSend+0x210>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	e00a      	b.n	8007e04 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d007      	beq.n	8007e04 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007df4:	4b39      	ldr	r3, [pc, #228]	@ (8007edc <xQueueGenericSend+0x210>)
 8007df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e04:	f001 fd78 	bl	80098f8 <vPortExitCritical>
				return pdPASS;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e063      	b.n	8007ed4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e12:	f001 fd71 	bl	80098f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e05c      	b.n	8007ed4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 f877 	bl	8008f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e2e:	f001 fd63 	bl	80098f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e32:	f000 fe13 	bl	8008a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e36:	f001 fd29 	bl	800988c <vPortEnterCritical>
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e40:	b25b      	sxtb	r3, r3
 8007e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e46:	d103      	bne.n	8007e50 <xQueueGenericSend+0x184>
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e56:	b25b      	sxtb	r3, r3
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d103      	bne.n	8007e66 <xQueueGenericSend+0x19a>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e66:	f001 fd47 	bl	80098f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e6a:	1d3a      	adds	r2, r7, #4
 8007e6c:	f107 0314 	add.w	r3, r7, #20
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 f866 	bl	8008f44 <xTaskCheckForTimeOut>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d124      	bne.n	8007ec8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e80:	f000 fb76 	bl	8008570 <prvIsQueueFull>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d018      	beq.n	8007ebc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	3310      	adds	r3, #16
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 ffb2 	bl	8008dfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e9a:	f000 fb01 	bl	80084a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e9e:	f000 fdeb 	bl	8008a78 <xTaskResumeAll>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f47f af7c 	bne.w	8007da2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <xQueueGenericSend+0x210>)
 8007eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	e772      	b.n	8007da2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ebe:	f000 faef 	bl	80084a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ec2:	f000 fdd9 	bl	8008a78 <xTaskResumeAll>
 8007ec6:	e76c      	b.n	8007da2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eca:	f000 fae9 	bl	80084a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ece:	f000 fdd3 	bl	8008a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3738      	adds	r7, #56	@ 0x38
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	e000ed04 	.word	0xe000ed04

08007ee0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	@ 0x38
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10d      	bne.n	8007f10 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	b672      	cpsid	i
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	b662      	cpsie	i
 8007f08:	623b      	str	r3, [r7, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00d      	beq.n	8007f34 <xQueueGiveFromISR+0x54>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1c:	b672      	cpsid	i
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	b662      	cpsie	i
 8007f2c:	61fb      	str	r3, [r7, #28]
}
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
 8007f32:	e7fd      	b.n	8007f30 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <xQueueGiveFromISR+0x64>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <xQueueGiveFromISR+0x68>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <xQueueGiveFromISR+0x6a>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10d      	bne.n	8007f6a <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	61bb      	str	r3, [r7, #24]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f6a:	f001 fd77 	bl	8009a5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	b672      	cpsid	i
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	b662      	cpsie	i
 8007f86:	617a      	str	r2, [r7, #20]
 8007f88:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d22b      	bcs.n	8007ff6 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb8:	d112      	bne.n	8007fe0 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d016      	beq.n	8007ff0 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	3324      	adds	r3, #36	@ 0x24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 ff40 	bl	8008e4c <xTaskRemoveFromEventList>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e007      	b.n	8007ff0 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	b25a      	sxtb	r2, r3
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff4:	e001      	b.n	8007ffa <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008004:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008008:	4618      	mov	r0, r3
 800800a:	3738      	adds	r7, #56	@ 0x38
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	@ 0x38
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800801a:	2300      	movs	r3, #0
 800801c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008022:	2300      	movs	r3, #0
 8008024:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10d      	bne.n	8008048 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	b672      	cpsid	i
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	b662      	cpsie	i
 8008040:	623b      	str	r3, [r7, #32]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00d      	beq.n	800806c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	b672      	cpsid	i
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	b662      	cpsie	i
 8008064:	61fb      	str	r3, [r7, #28]
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	e7fd      	b.n	8008068 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800806c:	f001 f8bc 	bl	80091e8 <xTaskGetSchedulerState>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <xQueueSemaphoreTake+0x6c>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <xQueueSemaphoreTake+0x70>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <xQueueSemaphoreTake+0x72>
 8008080:	2300      	movs	r3, #0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	61bb      	str	r3, [r7, #24]
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	e7fd      	b.n	800809e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080a2:	f001 fbf3 	bl	800988c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d024      	beq.n	80080fc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080c2:	f001 fa5b 	bl	800957c <pvTaskIncrementMutexHeldCount>
 80080c6:	4602      	mov	r2, r0
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00f      	beq.n	80080f4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d6:	3310      	adds	r3, #16
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 feb7 	bl	8008e4c <xTaskRemoveFromEventList>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080e4:	4b55      	ldr	r3, [pc, #340]	@ (800823c <xQueueSemaphoreTake+0x22c>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080f4:	f001 fc00 	bl	80098f8 <vPortExitCritical>
				return pdPASS;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e09a      	b.n	8008232 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d114      	bne.n	800812c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	617b      	str	r3, [r7, #20]
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008124:	f001 fbe8 	bl	80098f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008128:	2300      	movs	r3, #0
 800812a:	e082      	b.n	8008232 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800812c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008132:	f107 030c 	add.w	r3, r7, #12
 8008136:	4618      	mov	r0, r3
 8008138:	f000 feee 	bl	8008f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800813c:	2301      	movs	r3, #1
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008140:	f001 fbda 	bl	80098f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008144:	f000 fc8a 	bl	8008a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008148:	f001 fba0 	bl	800988c <vPortEnterCritical>
 800814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008152:	b25b      	sxtb	r3, r3
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008158:	d103      	bne.n	8008162 <xQueueSemaphoreTake+0x152>
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008168:	b25b      	sxtb	r3, r3
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d103      	bne.n	8008178 <xQueueSemaphoreTake+0x168>
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008178:	f001 fbbe 	bl	80098f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800817c:	463a      	mov	r2, r7
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fedd 	bl	8008f44 <xTaskCheckForTimeOut>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d132      	bne.n	80081f6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008190:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008192:	f000 f9d7 	bl	8008544 <prvIsQueueEmpty>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d026      	beq.n	80081ea <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d109      	bne.n	80081b8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80081a4:	f001 fb72 	bl	800988c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f839 	bl	8009224 <xTaskPriorityInherit>
 80081b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80081b4:	f001 fba0 	bl	80098f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	3324      	adds	r3, #36	@ 0x24
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fe1b 	bl	8008dfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081c8:	f000 f96a 	bl	80084a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081cc:	f000 fc54 	bl	8008a78 <xTaskResumeAll>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f47f af65 	bne.w	80080a2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80081d8:	4b18      	ldr	r3, [pc, #96]	@ (800823c <xQueueSemaphoreTake+0x22c>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	e75b      	b.n	80080a2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081ec:	f000 f958 	bl	80084a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081f0:	f000 fc42 	bl	8008a78 <xTaskResumeAll>
 80081f4:	e755      	b.n	80080a2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081f8:	f000 f952 	bl	80084a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fc:	f000 fc3c 	bl	8008a78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008202:	f000 f99f 	bl	8008544 <prvIsQueueEmpty>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	f43f af4a 	beq.w	80080a2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00d      	beq.n	8008230 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008214:	f001 fb3a 	bl	800988c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008218:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800821a:	f000 f899 	bl	8008350 <prvGetDisinheritPriorityAfterTimeout>
 800821e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008226:	4618      	mov	r0, r3
 8008228:	f001 f908 	bl	800943c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800822c:	f001 fb64 	bl	80098f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008230:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008232:	4618      	mov	r0, r3
 8008234:	3738      	adds	r7, #56	@ 0x38
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08e      	sub	sp, #56	@ 0x38
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10d      	bne.n	8008272 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	623b      	str	r3, [r7, #32]
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	e7fd      	b.n	800826e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <xQueueReceiveFromISR+0x40>
 8008278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <xQueueReceiveFromISR+0x44>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <xQueueReceiveFromISR+0x46>
 8008284:	2300      	movs	r3, #0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10d      	bne.n	80082a6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828e:	b672      	cpsid	i
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	b662      	cpsie	i
 800829e:	61fb      	str	r3, [r7, #28]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082a6:	f001 fbd9 	bl	8009a5c <vPortValidateInterruptPriority>
	__asm volatile
 80082aa:	f3ef 8211 	mrs	r2, BASEPRI
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	b672      	cpsid	i
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	b662      	cpsie	i
 80082c2:	61ba      	str	r2, [r7, #24]
 80082c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80082c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d02f      	beq.n	8008336 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082e4:	f000 f8b6 	bl	8008454 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	1e5a      	subs	r2, r3, #1
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80082f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d112      	bne.n	8008320 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d016      	beq.n	8008330 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	3310      	adds	r3, #16
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fda0 	bl	8008e4c <xTaskRemoveFromEventList>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e007      	b.n	8008330 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008324:	3301      	adds	r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	b25a      	sxtb	r2, r3
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008330:	2301      	movs	r3, #1
 8008332:	637b      	str	r3, [r7, #52]	@ 0x34
 8008334:	e001      	b.n	800833a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8008336:	2300      	movs	r3, #0
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f383 8811 	msr	BASEPRI, r3
}
 8008344:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008348:	4618      	mov	r0, r3
 800834a:	3738      	adds	r7, #56	@ 0x38
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1c3 0307 	rsb	r3, r3, #7
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	e001      	b.n	8008372 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008372:	68fb      	ldr	r3, [r7, #12]
	}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10d      	bne.n	80083ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d14d      	bne.n	8008442 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 ffba 	bl	8009324 <xTaskPriorityDisinherit>
 80083b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	609a      	str	r2, [r3, #8]
 80083b8:	e043      	b.n	8008442 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d119      	bne.n	80083f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6858      	ldr	r0, [r3, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c8:	461a      	mov	r2, r3
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	f025 ff5b 	bl	802e286 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d8:	441a      	add	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d32b      	bcc.n	8008442 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	605a      	str	r2, [r3, #4]
 80083f2:	e026      	b.n	8008442 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68d8      	ldr	r0, [r3, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fc:	461a      	mov	r2, r3
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	f025 ff41 	bl	802e286 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	425b      	negs	r3, r3
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d207      	bcs.n	8008430 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008428:	425b      	negs	r3, r3
 800842a:	441a      	add	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d105      	bne.n	8008442 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	3b01      	subs	r3, #1
 8008440:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800844a:	697b      	ldr	r3, [r7, #20]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d018      	beq.n	8008498 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	441a      	add	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	429a      	cmp	r2, r3
 800847e:	d303      	bcc.n	8008488 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68d9      	ldr	r1, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	461a      	mov	r2, r3
 8008492:	6838      	ldr	r0, [r7, #0]
 8008494:	f025 fef7 	bl	802e286 <memcpy>
	}
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084a8:	f001 f9f0 	bl	800988c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084b4:	e011      	b.n	80084da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d012      	beq.n	80084e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3324      	adds	r3, #36	@ 0x24
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fcc2 	bl	8008e4c <xTaskRemoveFromEventList>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084ce:	f000 fda1 	bl	8009014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dce9      	bgt.n	80084b6 <prvUnlockQueue+0x16>
 80084e2:	e000      	b.n	80084e6 <prvUnlockQueue+0x46>
					break;
 80084e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	22ff      	movs	r2, #255	@ 0xff
 80084ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084ee:	f001 fa03 	bl	80098f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084f2:	f001 f9cb 	bl	800988c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084fe:	e011      	b.n	8008524 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d012      	beq.n	800852e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3310      	adds	r3, #16
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fc9d 	bl	8008e4c <xTaskRemoveFromEventList>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008518:	f000 fd7c 	bl	8009014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	3b01      	subs	r3, #1
 8008520:	b2db      	uxtb	r3, r3
 8008522:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dce9      	bgt.n	8008500 <prvUnlockQueue+0x60>
 800852c:	e000      	b.n	8008530 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800852e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	22ff      	movs	r2, #255	@ 0xff
 8008534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008538:	f001 f9de 	bl	80098f8 <vPortExitCritical>
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800854c:	f001 f99e 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008558:	2301      	movs	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e001      	b.n	8008562 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008562:	f001 f9c9 	bl	80098f8 <vPortExitCritical>

	return xReturn;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008578:	f001 f988 	bl	800988c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008584:	429a      	cmp	r2, r3
 8008586:	d102      	bne.n	800858e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008588:	2301      	movs	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e001      	b.n	8008592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008592:	f001 f9b1 	bl	80098f8 <vPortExitCritical>

	return xReturn;
 8008596:	68fb      	ldr	r3, [r7, #12]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08e      	sub	sp, #56	@ 0x38
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <xTaskCreateStatic+0x30>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	b672      	cpsid	i
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	b662      	cpsie	i
 80085c8:	623b      	str	r3, [r7, #32]
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80085d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10d      	bne.n	80085f2 <xTaskCreateStatic+0x52>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	b672      	cpsid	i
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	b662      	cpsie	i
 80085ea:	61fb      	str	r3, [r7, #28]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085f2:	23a0      	movs	r3, #160	@ 0xa0
 80085f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80085fa:	d00d      	beq.n	8008618 <xTaskCreateStatic+0x78>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	b672      	cpsid	i
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	b662      	cpsie	i
 8008610:	61bb      	str	r3, [r7, #24]
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	e7fd      	b.n	8008614 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008618:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800861a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01e      	beq.n	800865e <xTaskCreateStatic+0xbe>
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01b      	beq.n	800865e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800862e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	2202      	movs	r2, #2
 8008634:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008638:	2300      	movs	r3, #0
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f851 	bl	80086f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008658:	f000 f8f0 	bl	800883c <prvAddNewTaskToReadyList>
 800865c:	e001      	b.n	8008662 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008662:	697b      	ldr	r3, [r7, #20]
	}
 8008664:	4618      	mov	r0, r3
 8008666:	3728      	adds	r7, #40	@ 0x28
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08c      	sub	sp, #48	@ 0x30
 8008670:	af04      	add	r7, sp, #16
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800867c:	88fb      	ldrh	r3, [r7, #6]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4618      	mov	r0, r3
 8008682:	f001 fa31 	bl	8009ae8 <pvPortMalloc>
 8008686:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800868e:	20a0      	movs	r0, #160	@ 0xa0
 8008690:	f001 fa2a 	bl	8009ae8 <pvPortMalloc>
 8008694:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80086a2:	e005      	b.n	80086b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	f001 faed 	bl	8009c84 <vPortFree>
 80086aa:	e001      	b.n	80086b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d017      	beq.n	80086e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086be:	88fa      	ldrh	r2, [r7, #6]
 80086c0:	2300      	movs	r3, #0
 80086c2:	9303      	str	r3, [sp, #12]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	9302      	str	r3, [sp, #8]
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f80f 	bl	80086f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086da:	69f8      	ldr	r0, [r7, #28]
 80086dc:	f000 f8ae 	bl	800883c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086e0:	2301      	movs	r3, #1
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	e002      	b.n	80086ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086ec:	69bb      	ldr	r3, [r7, #24]
	}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008710:	440b      	add	r3, r1
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	b672      	cpsid	i
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	b662      	cpsie	i
 800873e:	617b      	str	r3, [r7, #20]
}
 8008740:	bf00      	nop
 8008742:	bf00      	nop
 8008744:	e7fd      	b.n	8008742 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01f      	beq.n	800878c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800874c:	2300      	movs	r3, #0
 800874e:	61fb      	str	r3, [r7, #28]
 8008750:	e012      	b.n	8008778 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	7819      	ldrb	r1, [r3, #0]
 800875a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	4413      	add	r3, r2
 8008760:	3334      	adds	r3, #52	@ 0x34
 8008762:	460a      	mov	r2, r1
 8008764:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	4413      	add	r3, r2
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	3301      	adds	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d9e9      	bls.n	8008752 <prvInitialiseNewTask+0x5a>
 800877e:	e000      	b.n	8008782 <prvInitialiseNewTask+0x8a>
			{
				break;
 8008780:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800878a:	e003      	b.n	8008794 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2b06      	cmp	r3, #6
 8008798:	d901      	bls.n	800879e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800879a:	2306      	movs	r3, #6
 800879c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2200      	movs	r2, #0
 80087ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	3304      	adds	r3, #4
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff f89f 	bl	80078f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	3318      	adds	r3, #24
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff f89a 	bl	80078f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	f1c3 0207 	rsb	r2, r3, #7
 80087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	334c      	adds	r3, #76	@ 0x4c
 80087ee:	224c      	movs	r2, #76	@ 0x4c
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f025 fc1a 	bl	802e02c <memset>
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008830 <prvInitialiseNewTask+0x138>)
 80087fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	4a0c      	ldr	r2, [pc, #48]	@ (8008834 <prvInitialiseNewTask+0x13c>)
 8008802:	655a      	str	r2, [r3, #84]	@ 0x54
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	4a0c      	ldr	r2, [pc, #48]	@ (8008838 <prvInitialiseNewTask+0x140>)
 8008808:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	68f9      	ldr	r1, [r7, #12]
 800880e:	69b8      	ldr	r0, [r7, #24]
 8008810:	f000 ff2e 	bl	8009670 <pxPortInitialiseStack>
 8008814:	4602      	mov	r2, r0
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3720      	adds	r7, #32
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20012d28 	.word	0x20012d28
 8008834:	20012d90 	.word	0x20012d90
 8008838:	20012df8 	.word	0x20012df8

0800883c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008844:	f001 f822 	bl	800988c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008848:	4b2a      	ldr	r3, [pc, #168]	@ (80088f4 <prvAddNewTaskToReadyList+0xb8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	4a29      	ldr	r2, [pc, #164]	@ (80088f4 <prvAddNewTaskToReadyList+0xb8>)
 8008850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008852:	4b29      	ldr	r3, [pc, #164]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800885a:	4a27      	ldr	r2, [pc, #156]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008860:	4b24      	ldr	r3, [pc, #144]	@ (80088f4 <prvAddNewTaskToReadyList+0xb8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d110      	bne.n	800888a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008868:	f000 fbf8 	bl	800905c <prvInitialiseTaskLists>
 800886c:	e00d      	b.n	800888a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800886e:	4b23      	ldr	r3, [pc, #140]	@ (80088fc <prvAddNewTaskToReadyList+0xc0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008876:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	429a      	cmp	r2, r3
 8008882:	d802      	bhi.n	800888a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008884:	4a1c      	ldr	r2, [pc, #112]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800888a:	4b1d      	ldr	r3, [pc, #116]	@ (8008900 <prvAddNewTaskToReadyList+0xc4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3301      	adds	r3, #1
 8008890:	4a1b      	ldr	r2, [pc, #108]	@ (8008900 <prvAddNewTaskToReadyList+0xc4>)
 8008892:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	2201      	movs	r2, #1
 800889a:	409a      	lsls	r2, r3
 800889c:	4b19      	ldr	r3, [pc, #100]	@ (8008904 <prvAddNewTaskToReadyList+0xc8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	4a18      	ldr	r2, [pc, #96]	@ (8008904 <prvAddNewTaskToReadyList+0xc8>)
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4a15      	ldr	r2, [pc, #84]	@ (8008908 <prvAddNewTaskToReadyList+0xcc>)
 80088b4:	441a      	add	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7ff f828 	bl	8007912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088c2:	f001 f819 	bl	80098f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088c6:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <prvAddNewTaskToReadyList+0xc0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088ce:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <prvAddNewTaskToReadyList+0xbc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	429a      	cmp	r2, r3
 80088da:	d207      	bcs.n	80088ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088dc:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <prvAddNewTaskToReadyList+0xd0>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20000a58 	.word	0x20000a58
 80088f8:	20000958 	.word	0x20000958
 80088fc:	20000a64 	.word	0x20000a64
 8008900:	20000a74 	.word	0x20000a74
 8008904:	20000a60 	.word	0x20000a60
 8008908:	2000095c 	.word	0x2000095c
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01a      	beq.n	8008958 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008922:	4b15      	ldr	r3, [pc, #84]	@ (8008978 <vTaskDelay+0x68>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00d      	beq.n	8008946 <vTaskDelay+0x36>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	b672      	cpsid	i
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	b662      	cpsie	i
 800893e:	60bb      	str	r3, [r7, #8]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008946:	f000 f889 	bl	8008a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800894a:	2100      	movs	r1, #0
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fe29 	bl	80095a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008952:	f000 f891 	bl	8008a78 <xTaskResumeAll>
 8008956:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d107      	bne.n	800896e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800895e:	4b07      	ldr	r3, [pc, #28]	@ (800897c <vTaskDelay+0x6c>)
 8008960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000a80 	.word	0x20000a80
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800898e:	463a      	mov	r2, r7
 8008990:	1d39      	adds	r1, r7, #4
 8008992:	f107 0308 	add.w	r3, r7, #8
 8008996:	4618      	mov	r0, r3
 8008998:	f7f8 fe6a 	bl	8001670 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	9202      	str	r2, [sp, #8]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	460a      	mov	r2, r1
 80089ae:	4923      	ldr	r1, [pc, #140]	@ (8008a3c <vTaskStartScheduler+0xbc>)
 80089b0:	4823      	ldr	r0, [pc, #140]	@ (8008a40 <vTaskStartScheduler+0xc0>)
 80089b2:	f7ff fdf5 	bl	80085a0 <xTaskCreateStatic>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4a22      	ldr	r2, [pc, #136]	@ (8008a44 <vTaskStartScheduler+0xc4>)
 80089ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089bc:	4b21      	ldr	r3, [pc, #132]	@ (8008a44 <vTaskStartScheduler+0xc4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e001      	b.n	80089ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d11d      	bne.n	8008a10 <vTaskStartScheduler+0x90>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	b672      	cpsid	i
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	b662      	cpsie	i
 80089e8:	613b      	str	r3, [r7, #16]
}
 80089ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089ec:	4b16      	ldr	r3, [pc, #88]	@ (8008a48 <vTaskStartScheduler+0xc8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	334c      	adds	r3, #76	@ 0x4c
 80089f2:	4a16      	ldr	r2, [pc, #88]	@ (8008a4c <vTaskStartScheduler+0xcc>)
 80089f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089f6:	4b16      	ldr	r3, [pc, #88]	@ (8008a50 <vTaskStartScheduler+0xd0>)
 80089f8:	f04f 32ff 	mov.w	r2, #4294967295
 80089fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089fe:	4b15      	ldr	r3, [pc, #84]	@ (8008a54 <vTaskStartScheduler+0xd4>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a04:	4b14      	ldr	r3, [pc, #80]	@ (8008a58 <vTaskStartScheduler+0xd8>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a0a:	f000 fec1 	bl	8009790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a0e:	e011      	b.n	8008a34 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d10d      	bne.n	8008a34 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	b672      	cpsid	i
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	b662      	cpsie	i
 8008a2c:	60fb      	str	r3, [r7, #12]
}
 8008a2e:	bf00      	nop
 8008a30:	bf00      	nop
 8008a32:	e7fd      	b.n	8008a30 <vTaskStartScheduler+0xb0>
}
 8008a34:	bf00      	nop
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	0802ed64 	.word	0x0802ed64
 8008a40:	0800902d 	.word	0x0800902d
 8008a44:	20000a7c 	.word	0x20000a7c
 8008a48:	20000958 	.word	0x20000958
 8008a4c:	200000a4 	.word	0x200000a4
 8008a50:	20000a78 	.word	0x20000a78
 8008a54:	20000a64 	.word	0x20000a64
 8008a58:	20000a5c 	.word	0x20000a5c

08008a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a60:	4b04      	ldr	r3, [pc, #16]	@ (8008a74 <vTaskSuspendAll+0x18>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3301      	adds	r3, #1
 8008a66:	4a03      	ldr	r2, [pc, #12]	@ (8008a74 <vTaskSuspendAll+0x18>)
 8008a68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008a6a:	bf00      	nop
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	20000a80 	.word	0x20000a80

08008a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a86:	4b43      	ldr	r3, [pc, #268]	@ (8008b94 <xTaskResumeAll+0x11c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10d      	bne.n	8008aaa <xTaskResumeAll+0x32>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	b672      	cpsid	i
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	b662      	cpsie	i
 8008aa2:	603b      	str	r3, [r7, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aaa:	f000 feef 	bl	800988c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008aae:	4b39      	ldr	r3, [pc, #228]	@ (8008b94 <xTaskResumeAll+0x11c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	4a37      	ldr	r2, [pc, #220]	@ (8008b94 <xTaskResumeAll+0x11c>)
 8008ab6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab8:	4b36      	ldr	r3, [pc, #216]	@ (8008b94 <xTaskResumeAll+0x11c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d161      	bne.n	8008b84 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ac0:	4b35      	ldr	r3, [pc, #212]	@ (8008b98 <xTaskResumeAll+0x120>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d05d      	beq.n	8008b84 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ac8:	e02e      	b.n	8008b28 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aca:	4b34      	ldr	r3, [pc, #208]	@ (8008b9c <xTaskResumeAll+0x124>)
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe ff78 	bl	80079cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe ff73 	bl	80079cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aea:	2201      	movs	r2, #1
 8008aec:	409a      	lsls	r2, r3
 8008aee:	4b2c      	ldr	r3, [pc, #176]	@ (8008ba0 <xTaskResumeAll+0x128>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba0 <xTaskResumeAll+0x128>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a27      	ldr	r2, [pc, #156]	@ (8008ba4 <xTaskResumeAll+0x12c>)
 8008b06:	441a      	add	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7fe feff 	bl	8007912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b18:	4b23      	ldr	r3, [pc, #140]	@ (8008ba8 <xTaskResumeAll+0x130>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d302      	bcc.n	8008b28 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008b22:	4b22      	ldr	r3, [pc, #136]	@ (8008bac <xTaskResumeAll+0x134>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b28:	4b1c      	ldr	r3, [pc, #112]	@ (8008b9c <xTaskResumeAll+0x124>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1cc      	bne.n	8008aca <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b36:	f000 fb37 	bl	80091a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb0 <xTaskResumeAll+0x138>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d010      	beq.n	8008b68 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b46:	f000 f837 	bl	8008bb8 <xTaskIncrementTick>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008b50:	4b16      	ldr	r3, [pc, #88]	@ (8008bac <xTaskResumeAll+0x134>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f1      	bne.n	8008b46 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008b62:	4b13      	ldr	r3, [pc, #76]	@ (8008bb0 <xTaskResumeAll+0x138>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b68:	4b10      	ldr	r3, [pc, #64]	@ (8008bac <xTaskResumeAll+0x134>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b74:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb4 <xTaskResumeAll+0x13c>)
 8008b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b84:	f000 feb8 	bl	80098f8 <vPortExitCritical>

	return xAlreadyYielded;
 8008b88:	68bb      	ldr	r3, [r7, #8]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000a80 	.word	0x20000a80
 8008b98:	20000a58 	.word	0x20000a58
 8008b9c:	20000a18 	.word	0x20000a18
 8008ba0:	20000a60 	.word	0x20000a60
 8008ba4:	2000095c 	.word	0x2000095c
 8008ba8:	20000958 	.word	0x20000958
 8008bac:	20000a6c 	.word	0x20000a6c
 8008bb0:	20000a68 	.word	0x20000a68
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc2:	4b50      	ldr	r3, [pc, #320]	@ (8008d04 <xTaskIncrementTick+0x14c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f040 808b 	bne.w	8008ce2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8008d08 <xTaskIncrementTick+0x150>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8008d08 <xTaskIncrementTick+0x150>)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d123      	bne.n	8008c28 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008be0:	4b4a      	ldr	r3, [pc, #296]	@ (8008d0c <xTaskIncrementTick+0x154>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00d      	beq.n	8008c06 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bee:	b672      	cpsid	i
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	b662      	cpsie	i
 8008bfe:	603b      	str	r3, [r7, #0]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <xTaskIncrementTick+0x4a>
 8008c06:	4b41      	ldr	r3, [pc, #260]	@ (8008d0c <xTaskIncrementTick+0x154>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	4b40      	ldr	r3, [pc, #256]	@ (8008d10 <xTaskIncrementTick+0x158>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a3e      	ldr	r2, [pc, #248]	@ (8008d0c <xTaskIncrementTick+0x154>)
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	4a3e      	ldr	r2, [pc, #248]	@ (8008d10 <xTaskIncrementTick+0x158>)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d14 <xTaskIncrementTick+0x15c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a3c      	ldr	r2, [pc, #240]	@ (8008d14 <xTaskIncrementTick+0x15c>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	f000 fac0 	bl	80091a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c28:	4b3b      	ldr	r3, [pc, #236]	@ (8008d18 <xTaskIncrementTick+0x160>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d348      	bcc.n	8008cc4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c32:	4b36      	ldr	r3, [pc, #216]	@ (8008d0c <xTaskIncrementTick+0x154>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c3c:	4b36      	ldr	r3, [pc, #216]	@ (8008d18 <xTaskIncrementTick+0x160>)
 8008c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c42:	601a      	str	r2, [r3, #0]
					break;
 8008c44:	e03e      	b.n	8008cc4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c46:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <xTaskIncrementTick+0x154>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d203      	bcs.n	8008c66 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8008d18 <xTaskIncrementTick+0x160>)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c64:	e02e      	b.n	8008cc4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe feae 	bl	80079cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	3318      	adds	r3, #24
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fea5 	bl	80079cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c86:	2201      	movs	r2, #1
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	4b24      	ldr	r3, [pc, #144]	@ (8008d1c <xTaskIncrementTick+0x164>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	4a22      	ldr	r2, [pc, #136]	@ (8008d1c <xTaskIncrementTick+0x164>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d20 <xTaskIncrementTick+0x168>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fe fe31 	bl	8007912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d24 <xTaskIncrementTick+0x16c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d3b9      	bcc.n	8008c32 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc2:	e7b6      	b.n	8008c32 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cc4:	4b17      	ldr	r3, [pc, #92]	@ (8008d24 <xTaskIncrementTick+0x16c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cca:	4915      	ldr	r1, [pc, #84]	@ (8008d20 <xTaskIncrementTick+0x168>)
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d907      	bls.n	8008cec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	e004      	b.n	8008cec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008ce2:	4b11      	ldr	r3, [pc, #68]	@ (8008d28 <xTaskIncrementTick+0x170>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8008d28 <xTaskIncrementTick+0x170>)
 8008cea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008cec:	4b0f      	ldr	r3, [pc, #60]	@ (8008d2c <xTaskIncrementTick+0x174>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008cf8:	697b      	ldr	r3, [r7, #20]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000a80 	.word	0x20000a80
 8008d08:	20000a5c 	.word	0x20000a5c
 8008d0c:	20000a10 	.word	0x20000a10
 8008d10:	20000a14 	.word	0x20000a14
 8008d14:	20000a70 	.word	0x20000a70
 8008d18:	20000a78 	.word	0x20000a78
 8008d1c:	20000a60 	.word	0x20000a60
 8008d20:	2000095c 	.word	0x2000095c
 8008d24:	20000958 	.word	0x20000958
 8008d28:	20000a68 	.word	0x20000a68
 8008d2c:	20000a6c 	.word	0x20000a6c

08008d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d36:	4b2b      	ldr	r3, [pc, #172]	@ (8008de4 <vTaskSwitchContext+0xb4>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008de8 <vTaskSwitchContext+0xb8>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d44:	e047      	b.n	8008dd6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008d46:	4b28      	ldr	r3, [pc, #160]	@ (8008de8 <vTaskSwitchContext+0xb8>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4c:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <vTaskSwitchContext+0xbc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	fab3 f383 	clz	r3, r3
 8008d58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	f1c3 031f 	rsb	r3, r3, #31
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	4923      	ldr	r1, [pc, #140]	@ (8008df0 <vTaskSwitchContext+0xc0>)
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10d      	bne.n	8008d92 <vTaskSwitchContext+0x62>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	b672      	cpsid	i
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	b662      	cpsie	i
 8008d8a:	607b      	str	r3, [r7, #4]
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	e7fd      	b.n	8008d8e <vTaskSwitchContext+0x5e>
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4a14      	ldr	r2, [pc, #80]	@ (8008df0 <vTaskSwitchContext+0xc0>)
 8008d9e:	4413      	add	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	605a      	str	r2, [r3, #4]
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3308      	adds	r3, #8
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d104      	bne.n	8008dc2 <vTaskSwitchContext+0x92>
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8008df4 <vTaskSwitchContext+0xc4>)
 8008dca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dcc:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <vTaskSwitchContext+0xc4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	334c      	adds	r3, #76	@ 0x4c
 8008dd2:	4a09      	ldr	r2, [pc, #36]	@ (8008df8 <vTaskSwitchContext+0xc8>)
 8008dd4:	6013      	str	r3, [r2, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	20000a80 	.word	0x20000a80
 8008de8:	20000a6c 	.word	0x20000a6c
 8008dec:	20000a60 	.word	0x20000a60
 8008df0:	2000095c 	.word	0x2000095c
 8008df4:	20000958 	.word	0x20000958
 8008df8:	200000a4 	.word	0x200000a4

08008dfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10d      	bne.n	8008e28 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	b672      	cpsid	i
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	b662      	cpsie	i
 8008e20:	60fb      	str	r3, [r7, #12]
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	e7fd      	b.n	8008e24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e28:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <vTaskPlaceOnEventList+0x4c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3318      	adds	r3, #24
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7fe fd92 	bl	800795a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e36:	2101      	movs	r1, #1
 8008e38:	6838      	ldr	r0, [r7, #0]
 8008e3a:	f000 fbb3 	bl	80095a4 <prvAddCurrentTaskToDelayedList>
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000958 	.word	0x20000958

08008e4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10d      	bne.n	8008e7e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	b672      	cpsid	i
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	b662      	cpsie	i
 8008e76:	60fb      	str	r3, [r7, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3318      	adds	r3, #24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fda2 	bl	80079cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e88:	4b1d      	ldr	r3, [pc, #116]	@ (8008f00 <xTaskRemoveFromEventList+0xb4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11c      	bne.n	8008eca <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fd99 	bl	80079cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	409a      	lsls	r2, r3
 8008ea2:	4b18      	ldr	r3, [pc, #96]	@ (8008f04 <xTaskRemoveFromEventList+0xb8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	4a16      	ldr	r2, [pc, #88]	@ (8008f04 <xTaskRemoveFromEventList+0xb8>)
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a13      	ldr	r2, [pc, #76]	@ (8008f08 <xTaskRemoveFromEventList+0xbc>)
 8008eba:	441a      	add	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fe fd25 	bl	8007912 <vListInsertEnd>
 8008ec8:	e005      	b.n	8008ed6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3318      	adds	r3, #24
 8008ece:	4619      	mov	r1, r3
 8008ed0:	480e      	ldr	r0, [pc, #56]	@ (8008f0c <xTaskRemoveFromEventList+0xc0>)
 8008ed2:	f7fe fd1e 	bl	8007912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eda:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <xTaskRemoveFromEventList+0xc4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d905      	bls.n	8008ef0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f14 <xTaskRemoveFromEventList+0xc8>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	e001      	b.n	8008ef4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ef4:	697b      	ldr	r3, [r7, #20]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000a80 	.word	0x20000a80
 8008f04:	20000a60 	.word	0x20000a60
 8008f08:	2000095c 	.word	0x2000095c
 8008f0c:	20000a18 	.word	0x20000a18
 8008f10:	20000958 	.word	0x20000958
 8008f14:	20000a6c 	.word	0x20000a6c

08008f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f20:	4b06      	ldr	r3, [pc, #24]	@ (8008f3c <vTaskInternalSetTimeOutState+0x24>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f28:	4b05      	ldr	r3, [pc, #20]	@ (8008f40 <vTaskInternalSetTimeOutState+0x28>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	20000a70 	.word	0x20000a70
 8008f40:	20000a5c 	.word	0x20000a5c

08008f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10d      	bne.n	8008f70 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	b672      	cpsid	i
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	b662      	cpsie	i
 8008f68:	613b      	str	r3, [r7, #16]
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	e7fd      	b.n	8008f6c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10d      	bne.n	8008f92 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	60fb      	str	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	e7fd      	b.n	8008f8e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008f92:	f000 fc7b 	bl	800988c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f96:	4b1d      	ldr	r3, [pc, #116]	@ (800900c <xTaskCheckForTimeOut+0xc8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d102      	bne.n	8008fb6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e023      	b.n	8008ffe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b15      	ldr	r3, [pc, #84]	@ (8009010 <xTaskCheckForTimeOut+0xcc>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d007      	beq.n	8008fd2 <xTaskCheckForTimeOut+0x8e>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d302      	bcc.n	8008fd2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e015      	b.n	8008ffe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d20b      	bcs.n	8008ff4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff95 	bl	8008f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	e004      	b.n	8008ffe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ffe:	f000 fc7b 	bl	80098f8 <vPortExitCritical>

	return xReturn;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20000a5c 	.word	0x20000a5c
 8009010:	20000a70 	.word	0x20000a70

08009014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009018:	4b03      	ldr	r3, [pc, #12]	@ (8009028 <vTaskMissedYield+0x14>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
}
 800901e:	bf00      	nop
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	20000a6c 	.word	0x20000a6c

0800902c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009034:	f000 f852 	bl	80090dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009038:	4b06      	ldr	r3, [pc, #24]	@ (8009054 <prvIdleTask+0x28>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d9f9      	bls.n	8009034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009040:	4b05      	ldr	r3, [pc, #20]	@ (8009058 <prvIdleTask+0x2c>)
 8009042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009050:	e7f0      	b.n	8009034 <prvIdleTask+0x8>
 8009052:	bf00      	nop
 8009054:	2000095c 	.word	0x2000095c
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009062:	2300      	movs	r3, #0
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	e00c      	b.n	8009082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a12      	ldr	r2, [pc, #72]	@ (80090bc <prvInitialiseTaskLists+0x60>)
 8009074:	4413      	add	r3, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fc1e 	bl	80078b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b06      	cmp	r3, #6
 8009086:	d9ef      	bls.n	8009068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009088:	480d      	ldr	r0, [pc, #52]	@ (80090c0 <prvInitialiseTaskLists+0x64>)
 800908a:	f7fe fc15 	bl	80078b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800908e:	480d      	ldr	r0, [pc, #52]	@ (80090c4 <prvInitialiseTaskLists+0x68>)
 8009090:	f7fe fc12 	bl	80078b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009094:	480c      	ldr	r0, [pc, #48]	@ (80090c8 <prvInitialiseTaskLists+0x6c>)
 8009096:	f7fe fc0f 	bl	80078b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800909a:	480c      	ldr	r0, [pc, #48]	@ (80090cc <prvInitialiseTaskLists+0x70>)
 800909c:	f7fe fc0c 	bl	80078b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090a0:	480b      	ldr	r0, [pc, #44]	@ (80090d0 <prvInitialiseTaskLists+0x74>)
 80090a2:	f7fe fc09 	bl	80078b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	@ (80090d4 <prvInitialiseTaskLists+0x78>)
 80090a8:	4a05      	ldr	r2, [pc, #20]	@ (80090c0 <prvInitialiseTaskLists+0x64>)
 80090aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	@ (80090d8 <prvInitialiseTaskLists+0x7c>)
 80090ae:	4a05      	ldr	r2, [pc, #20]	@ (80090c4 <prvInitialiseTaskLists+0x68>)
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	2000095c 	.word	0x2000095c
 80090c0:	200009e8 	.word	0x200009e8
 80090c4:	200009fc 	.word	0x200009fc
 80090c8:	20000a18 	.word	0x20000a18
 80090cc:	20000a2c 	.word	0x20000a2c
 80090d0:	20000a44 	.word	0x20000a44
 80090d4:	20000a10 	.word	0x20000a10
 80090d8:	20000a14 	.word	0x20000a14

080090dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090e2:	e019      	b.n	8009118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090e4:	f000 fbd2 	bl	800988c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e8:	4b10      	ldr	r3, [pc, #64]	@ (800912c <prvCheckTasksWaitingTermination+0x50>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fc69 	bl	80079cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009130 <prvCheckTasksWaitingTermination+0x54>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3b01      	subs	r3, #1
 8009100:	4a0b      	ldr	r2, [pc, #44]	@ (8009130 <prvCheckTasksWaitingTermination+0x54>)
 8009102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <prvCheckTasksWaitingTermination+0x58>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	4a0a      	ldr	r2, [pc, #40]	@ (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800910c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800910e:	f000 fbf3 	bl	80098f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f810 	bl	8009138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009118:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e1      	bne.n	80090e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20000a2c 	.word	0x20000a2c
 8009130:	20000a58 	.word	0x20000a58
 8009134:	20000a40 	.word	0x20000a40

08009138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	334c      	adds	r3, #76	@ 0x4c
 8009144:	4618      	mov	r0, r3
 8009146:	f024 ffb9 	bl	802e0bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fd93 	bl	8009c84 <vPortFree>
				vPortFree( pxTCB );
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fd90 	bl	8009c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009164:	e01b      	b.n	800919e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800916c:	2b01      	cmp	r3, #1
 800916e:	d103      	bne.n	8009178 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fd87 	bl	8009c84 <vPortFree>
	}
 8009176:	e012      	b.n	800919e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800917e:	2b02      	cmp	r3, #2
 8009180:	d00d      	beq.n	800919e <prvDeleteTCB+0x66>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	b672      	cpsid	i
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	b662      	cpsie	i
 8009196:	60fb      	str	r3, [r7, #12]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <prvDeleteTCB+0x62>
	}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ae:	4b0c      	ldr	r3, [pc, #48]	@ (80091e0 <prvResetNextTaskUnblockTime+0x38>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091b8:	4b0a      	ldr	r3, [pc, #40]	@ (80091e4 <prvResetNextTaskUnblockTime+0x3c>)
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091c0:	e008      	b.n	80091d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c2:	4b07      	ldr	r3, [pc, #28]	@ (80091e0 <prvResetNextTaskUnblockTime+0x38>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	4a04      	ldr	r2, [pc, #16]	@ (80091e4 <prvResetNextTaskUnblockTime+0x3c>)
 80091d2:	6013      	str	r3, [r2, #0]
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20000a10 	.word	0x20000a10
 80091e4:	20000a78 	.word	0x20000a78

080091e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091ee:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <xTaskGetSchedulerState+0x34>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091f6:	2301      	movs	r3, #1
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	e008      	b.n	800920e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091fc:	4b08      	ldr	r3, [pc, #32]	@ (8009220 <xTaskGetSchedulerState+0x38>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009204:	2302      	movs	r3, #2
 8009206:	607b      	str	r3, [r7, #4]
 8009208:	e001      	b.n	800920e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800920a:	2300      	movs	r3, #0
 800920c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800920e:	687b      	ldr	r3, [r7, #4]
	}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	20000a64 	.word	0x20000a64
 8009220:	20000a80 	.word	0x20000a80

08009224 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d069      	beq.n	800930e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800923e:	4b36      	ldr	r3, [pc, #216]	@ (8009318 <xTaskPriorityInherit+0xf4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	429a      	cmp	r2, r3
 8009246:	d259      	bcs.n	80092fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	db06      	blt.n	800925e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009250:	4b31      	ldr	r3, [pc, #196]	@ (8009318 <xTaskPriorityInherit+0xf4>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009256:	f1c3 0207 	rsb	r2, r3, #7
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6959      	ldr	r1, [r3, #20]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4a2b      	ldr	r2, [pc, #172]	@ (800931c <xTaskPriorityInherit+0xf8>)
 8009270:	4413      	add	r3, r2
 8009272:	4299      	cmp	r1, r3
 8009274:	d13a      	bne.n	80092ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	3304      	adds	r3, #4
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fba6 	bl	80079cc <uxListRemove>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d115      	bne.n	80092b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928a:	4924      	ldr	r1, [pc, #144]	@ (800931c <xTaskPriorityInherit+0xf8>)
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	440b      	add	r3, r1
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xTaskPriorityInherit+0x8e>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	2201      	movs	r2, #1
 80092a2:	fa02 f303 	lsl.w	r3, r2, r3
 80092a6:	43da      	mvns	r2, r3
 80092a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009320 <xTaskPriorityInherit+0xfc>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4013      	ands	r3, r2
 80092ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009320 <xTaskPriorityInherit+0xfc>)
 80092b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092b2:	4b19      	ldr	r3, [pc, #100]	@ (8009318 <xTaskPriorityInherit+0xf4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	2201      	movs	r2, #1
 80092c2:	409a      	lsls	r2, r3
 80092c4:	4b16      	ldr	r3, [pc, #88]	@ (8009320 <xTaskPriorityInherit+0xfc>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	4a15      	ldr	r2, [pc, #84]	@ (8009320 <xTaskPriorityInherit+0xfc>)
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4a10      	ldr	r2, [pc, #64]	@ (800931c <xTaskPriorityInherit+0xf8>)
 80092dc:	441a      	add	r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7fe fb14 	bl	8007912 <vListInsertEnd>
 80092ea:	e004      	b.n	80092f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009318 <xTaskPriorityInherit+0xf4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80092f6:	2301      	movs	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
 80092fa:	e008      	b.n	800930e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009300:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <xTaskPriorityInherit+0xf4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009306:	429a      	cmp	r2, r3
 8009308:	d201      	bcs.n	800930e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800930a:	2301      	movs	r3, #1
 800930c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800930e:	68fb      	ldr	r3, [r7, #12]
	}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000958 	.word	0x20000958
 800931c:	2000095c 	.word	0x2000095c
 8009320:	20000a60 	.word	0x20000a60

08009324 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009330:	2300      	movs	r3, #0
 8009332:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d074      	beq.n	8009424 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800933a:	4b3d      	ldr	r3, [pc, #244]	@ (8009430 <xTaskPriorityDisinherit+0x10c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	429a      	cmp	r2, r3
 8009342:	d00d      	beq.n	8009360 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	b672      	cpsid	i
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	b662      	cpsie	i
 8009358:	60fb      	str	r3, [r7, #12]
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	e7fd      	b.n	800935c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936c:	b672      	cpsid	i
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	b662      	cpsie	i
 800937c:	60bb      	str	r3, [r7, #8]
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009388:	1e5a      	subs	r2, r3, #1
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009396:	429a      	cmp	r2, r3
 8009398:	d044      	beq.n	8009424 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d140      	bne.n	8009424 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fb10 	bl	80079cc <uxListRemove>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d115      	bne.n	80093de <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b6:	491f      	ldr	r1, [pc, #124]	@ (8009434 <xTaskPriorityDisinherit+0x110>)
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xTaskPriorityDisinherit+0xba>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	2201      	movs	r2, #1
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	43da      	mvns	r2, r3
 80093d4:	4b18      	ldr	r3, [pc, #96]	@ (8009438 <xTaskPriorityDisinherit+0x114>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4013      	ands	r3, r2
 80093da:	4a17      	ldr	r2, [pc, #92]	@ (8009438 <xTaskPriorityDisinherit+0x114>)
 80093dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ea:	f1c3 0207 	rsb	r2, r3, #7
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f6:	2201      	movs	r2, #1
 80093f8:	409a      	lsls	r2, r3
 80093fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009438 <xTaskPriorityDisinherit+0x114>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4313      	orrs	r3, r2
 8009400:	4a0d      	ldr	r2, [pc, #52]	@ (8009438 <xTaskPriorityDisinherit+0x114>)
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4a08      	ldr	r2, [pc, #32]	@ (8009434 <xTaskPriorityDisinherit+0x110>)
 8009412:	441a      	add	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	3304      	adds	r3, #4
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7fe fa79 	bl	8007912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009424:	697b      	ldr	r3, [r7, #20]
	}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000958 	.word	0x20000958
 8009434:	2000095c 	.word	0x2000095c
 8009438:	20000a60 	.word	0x20000a60

0800943c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800944a:	2301      	movs	r3, #1
 800944c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8089 	beq.w	8009568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10d      	bne.n	800947a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009462:	b672      	cpsid	i
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	b662      	cpsie	i
 8009472:	60fb      	str	r3, [r7, #12]
}
 8009474:	bf00      	nop
 8009476:	bf00      	nop
 8009478:	e7fd      	b.n	8009476 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d902      	bls.n	800948a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	e002      	b.n	8009490 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	429a      	cmp	r2, r3
 8009498:	d066      	beq.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d161      	bne.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094a4:	4b32      	ldr	r3, [pc, #200]	@ (8009570 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d10d      	bne.n	80094ca <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b2:	b672      	cpsid	i
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	b662      	cpsie	i
 80094c2:	60bb      	str	r3, [r7, #8]
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	e7fd      	b.n	80094c6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	db04      	blt.n	80094e8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f1c3 0207 	rsb	r2, r3, #7
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	6959      	ldr	r1, [r3, #20]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009574 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80094f8:	4413      	add	r3, r2
 80094fa:	4299      	cmp	r1, r3
 80094fc:	d134      	bne.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	3304      	adds	r3, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fa62 	bl	80079cc <uxListRemove>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d115      	bne.n	800953a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009512:	4918      	ldr	r1, [pc, #96]	@ (8009574 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	440b      	add	r3, r1
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	2201      	movs	r2, #1
 800952a:	fa02 f303 	lsl.w	r3, r2, r3
 800952e:	43da      	mvns	r2, r3
 8009530:	4b11      	ldr	r3, [pc, #68]	@ (8009578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4013      	ands	r3, r2
 8009536:	4a10      	ldr	r2, [pc, #64]	@ (8009578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009538:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953e:	2201      	movs	r2, #1
 8009540:	409a      	lsls	r2, r3
 8009542:	4b0d      	ldr	r3, [pc, #52]	@ (8009578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4313      	orrs	r3, r2
 8009548:	4a0b      	ldr	r2, [pc, #44]	@ (8009578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4a06      	ldr	r2, [pc, #24]	@ (8009574 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800955a:	441a      	add	r2, r3
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f7fe f9d5 	bl	8007912 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009568:	bf00      	nop
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20000958 	.word	0x20000958
 8009574:	2000095c 	.word	0x2000095c
 8009578:	20000a60 	.word	0x20000a60

0800957c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009580:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009588:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800958e:	3201      	adds	r2, #1
 8009590:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009592:	4b03      	ldr	r3, [pc, #12]	@ (80095a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009594:	681b      	ldr	r3, [r3, #0]
	}
 8009596:	4618      	mov	r0, r3
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	20000958 	.word	0x20000958

080095a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095ae:	4b29      	ldr	r3, [pc, #164]	@ (8009654 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b4:	4b28      	ldr	r3, [pc, #160]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fa06 	bl	80079cc <uxListRemove>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095c6:	4b24      	ldr	r3, [pc, #144]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095cc:	2201      	movs	r2, #1
 80095ce:	fa02 f303 	lsl.w	r3, r2, r3
 80095d2:	43da      	mvns	r2, r3
 80095d4:	4b21      	ldr	r3, [pc, #132]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4013      	ands	r3, r2
 80095da:	4a20      	ldr	r2, [pc, #128]	@ (800965c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e4:	d10a      	bne.n	80095fc <prvAddCurrentTaskToDelayedList+0x58>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4619      	mov	r1, r3
 80095f4:	481a      	ldr	r0, [pc, #104]	@ (8009660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095f6:	f7fe f98c 	bl	8007912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095fa:	e026      	b.n	800964a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4413      	add	r3, r2
 8009602:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009604:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	429a      	cmp	r2, r3
 8009612:	d209      	bcs.n	8009628 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009614:	4b13      	ldr	r3, [pc, #76]	@ (8009664 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3304      	adds	r3, #4
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f7fe f99a 	bl	800795a <vListInsert>
}
 8009626:	e010      	b.n	800964a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009628:	4b0f      	ldr	r3, [pc, #60]	@ (8009668 <prvAddCurrentTaskToDelayedList+0xc4>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3304      	adds	r3, #4
 8009632:	4619      	mov	r1, r3
 8009634:	4610      	mov	r0, r2
 8009636:	f7fe f990 	bl	800795a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800963a:	4b0c      	ldr	r3, [pc, #48]	@ (800966c <prvAddCurrentTaskToDelayedList+0xc8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	d202      	bcs.n	800964a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009644:	4a09      	ldr	r2, [pc, #36]	@ (800966c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6013      	str	r3, [r2, #0]
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000a5c 	.word	0x20000a5c
 8009658:	20000958 	.word	0x20000958
 800965c:	20000a60 	.word	0x20000a60
 8009660:	20000a44 	.word	0x20000a44
 8009664:	20000a14 	.word	0x20000a14
 8009668:	20000a10 	.word	0x20000a10
 800966c:	20000a78 	.word	0x20000a78

08009670 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3b04      	subs	r3, #4
 8009680:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3b04      	subs	r3, #4
 800968e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f023 0201 	bic.w	r2, r3, #1
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3b04      	subs	r3, #4
 800969e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096a0:	4a0c      	ldr	r2, [pc, #48]	@ (80096d4 <pxPortInitialiseStack+0x64>)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3b14      	subs	r3, #20
 80096aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3b04      	subs	r3, #4
 80096b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f06f 0202 	mvn.w	r2, #2
 80096be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3b20      	subs	r3, #32
 80096c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096c6:	68fb      	ldr	r3, [r7, #12]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	080096d9 	.word	0x080096d9

080096d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096e2:	4b15      	ldr	r3, [pc, #84]	@ (8009738 <prvTaskExitError+0x60>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ea:	d00d      	beq.n	8009708 <prvTaskExitError+0x30>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	b672      	cpsid	i
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	b662      	cpsie	i
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <prvTaskExitError+0x2c>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	b672      	cpsid	i
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	b662      	cpsie	i
 800971c:	60bb      	str	r3, [r7, #8]
}
 800971e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009720:	bf00      	nop
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0fc      	beq.n	8009722 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000010 	.word	0x20000010
 800973c:	00000000 	.word	0x00000000

08009740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009740:	4b07      	ldr	r3, [pc, #28]	@ (8009760 <pxCurrentTCBConst2>)
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	f380 8809 	msr	PSP, r0
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	4770      	bx	lr
 800975c:	f3af 8000 	nop.w

08009760 <pxCurrentTCBConst2>:
 8009760:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009768:	4808      	ldr	r0, [pc, #32]	@ (800978c <prvPortStartFirstTask+0x24>)
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f380 8808 	msr	MSP, r0
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8814 	msr	CONTROL, r0
 800977a:	b662      	cpsie	i
 800977c:	b661      	cpsie	f
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	df00      	svc	0
 8009788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800978a:	bf00      	nop
 800978c:	e000ed08 	.word	0xe000ed08

08009790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009796:	4b37      	ldr	r3, [pc, #220]	@ (8009874 <xPortStartScheduler+0xe4>)
 8009798:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	22ff      	movs	r2, #255	@ 0xff
 80097a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009878 <xPortStartScheduler+0xe8>)
 80097bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097be:	4b2f      	ldr	r3, [pc, #188]	@ (800987c <xPortStartScheduler+0xec>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097c4:	e009      	b.n	80097da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097c6:	4b2d      	ldr	r3, [pc, #180]	@ (800987c <xPortStartScheduler+0xec>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	4a2b      	ldr	r2, [pc, #172]	@ (800987c <xPortStartScheduler+0xec>)
 80097ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e2:	2b80      	cmp	r3, #128	@ 0x80
 80097e4:	d0ef      	beq.n	80097c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097e6:	4b25      	ldr	r3, [pc, #148]	@ (800987c <xPortStartScheduler+0xec>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f1c3 0307 	rsb	r3, r3, #7
 80097ee:	2b04      	cmp	r3, #4
 80097f0:	d00d      	beq.n	800980e <xPortStartScheduler+0x7e>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	b672      	cpsid	i
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	b662      	cpsie	i
 8009806:	60bb      	str	r3, [r7, #8]
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	e7fd      	b.n	800980a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800980e:	4b1b      	ldr	r3, [pc, #108]	@ (800987c <xPortStartScheduler+0xec>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	4a19      	ldr	r2, [pc, #100]	@ (800987c <xPortStartScheduler+0xec>)
 8009816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009818:	4b18      	ldr	r3, [pc, #96]	@ (800987c <xPortStartScheduler+0xec>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009820:	4a16      	ldr	r2, [pc, #88]	@ (800987c <xPortStartScheduler+0xec>)
 8009822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800982c:	4b14      	ldr	r3, [pc, #80]	@ (8009880 <xPortStartScheduler+0xf0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a13      	ldr	r2, [pc, #76]	@ (8009880 <xPortStartScheduler+0xf0>)
 8009832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009838:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <xPortStartScheduler+0xf0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a10      	ldr	r2, [pc, #64]	@ (8009880 <xPortStartScheduler+0xf0>)
 800983e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009844:	f000 f8dc 	bl	8009a00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009848:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <xPortStartScheduler+0xf4>)
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800984e:	f000 f8fb 	bl	8009a48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <xPortStartScheduler+0xf8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a0c      	ldr	r2, [pc, #48]	@ (8009888 <xPortStartScheduler+0xf8>)
 8009858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800985c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800985e:	f7ff ff83 	bl	8009768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009862:	f7ff fa65 	bl	8008d30 <vTaskSwitchContext>
	prvTaskExitError();
 8009866:	f7ff ff37 	bl	80096d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000e400 	.word	0xe000e400
 8009878:	20000a84 	.word	0x20000a84
 800987c:	20000a88 	.word	0x20000a88
 8009880:	e000ed20 	.word	0xe000ed20
 8009884:	20000010 	.word	0x20000010
 8009888:	e000ef34 	.word	0xe000ef34

0800988c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009896:	b672      	cpsid	i
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	b662      	cpsie	i
 80098a6:	607b      	str	r3, [r7, #4]
}
 80098a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098aa:	4b11      	ldr	r3, [pc, #68]	@ (80098f0 <vPortEnterCritical+0x64>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3301      	adds	r3, #1
 80098b0:	4a0f      	ldr	r2, [pc, #60]	@ (80098f0 <vPortEnterCritical+0x64>)
 80098b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098b4:	4b0e      	ldr	r3, [pc, #56]	@ (80098f0 <vPortEnterCritical+0x64>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d112      	bne.n	80098e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098bc:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <vPortEnterCritical+0x68>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00d      	beq.n	80098e2 <vPortEnterCritical+0x56>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	b672      	cpsid	i
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	b662      	cpsie	i
 80098da:	603b      	str	r3, [r7, #0]
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	e7fd      	b.n	80098de <vPortEnterCritical+0x52>
	}
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20000010 	.word	0x20000010
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098fe:	4b13      	ldr	r3, [pc, #76]	@ (800994c <vPortExitCritical+0x54>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10d      	bne.n	8009922 <vPortExitCritical+0x2a>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	b672      	cpsid	i
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	b662      	cpsie	i
 800991a:	607b      	str	r3, [r7, #4]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009922:	4b0a      	ldr	r3, [pc, #40]	@ (800994c <vPortExitCritical+0x54>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3b01      	subs	r3, #1
 8009928:	4a08      	ldr	r2, [pc, #32]	@ (800994c <vPortExitCritical+0x54>)
 800992a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800992c:	4b07      	ldr	r3, [pc, #28]	@ (800994c <vPortExitCritical+0x54>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d105      	bne.n	8009940 <vPortExitCritical+0x48>
 8009934:	2300      	movs	r3, #0
 8009936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f383 8811 	msr	BASEPRI, r3
}
 800993e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	20000010 	.word	0x20000010

08009950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009950:	f3ef 8009 	mrs	r0, PSP
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <pxCurrentTCBConst>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	f01e 0f10 	tst.w	lr, #16
 8009960:	bf08      	it	eq
 8009962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	6010      	str	r0, [r2, #0]
 800996c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009974:	b672      	cpsid	i
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	b662      	cpsie	i
 8009984:	f7ff f9d4 	bl	8008d30 <vTaskSwitchContext>
 8009988:	f04f 0000 	mov.w	r0, #0
 800998c:	f380 8811 	msr	BASEPRI, r0
 8009990:	bc09      	pop	{r0, r3}
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	6808      	ldr	r0, [r1, #0]
 8009996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	f01e 0f10 	tst.w	lr, #16
 800999e:	bf08      	it	eq
 80099a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099a4:	f380 8809 	msr	PSP, r0
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop

080099b0 <pxCurrentTCBConst>:
 80099b0:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop

080099b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	b672      	cpsid	i
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	b662      	cpsie	i
 80099d2:	607b      	str	r3, [r7, #4]
}
 80099d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099d6:	f7ff f8ef 	bl	8008bb8 <xTaskIncrementTick>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099e0:	4b06      	ldr	r3, [pc, #24]	@ (80099fc <SysTick_Handler+0x44>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	f383 8811 	msr	BASEPRI, r3
}
 80099f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a04:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <vPortSetupTimerInterrupt+0x34>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a38 <vPortSetupTimerInterrupt+0x38>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <vPortSetupTimerInterrupt+0x3c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a0a      	ldr	r2, [pc, #40]	@ (8009a40 <vPortSetupTimerInterrupt+0x40>)
 8009a16:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1a:	099b      	lsrs	r3, r3, #6
 8009a1c:	4a09      	ldr	r2, [pc, #36]	@ (8009a44 <vPortSetupTimerInterrupt+0x44>)
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a22:	4b04      	ldr	r3, [pc, #16]	@ (8009a34 <vPortSetupTimerInterrupt+0x34>)
 8009a24:	2207      	movs	r2, #7
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	e000e010 	.word	0xe000e010
 8009a38:	e000e018 	.word	0xe000e018
 8009a3c:	20000004 	.word	0x20000004
 8009a40:	10624dd3 	.word	0x10624dd3
 8009a44:	e000e014 	.word	0xe000e014

08009a48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a58 <vPortEnableVFP+0x10>
 8009a4c:	6801      	ldr	r1, [r0, #0]
 8009a4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a52:	6001      	str	r1, [r0, #0]
 8009a54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a56:	bf00      	nop
 8009a58:	e000ed88 	.word	0xe000ed88

08009a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a62:	f3ef 8305 	mrs	r3, IPSR
 8009a66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b0f      	cmp	r3, #15
 8009a6c:	d917      	bls.n	8009a9e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad8 <vPortValidateInterruptPriority+0x7c>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a78:	4b18      	ldr	r3, [pc, #96]	@ (8009adc <vPortValidateInterruptPriority+0x80>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	7afa      	ldrb	r2, [r7, #11]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d20d      	bcs.n	8009a9e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a86:	b672      	cpsid	i
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	b662      	cpsie	i
 8009a96:	607b      	str	r3, [r7, #4]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a9e:	4b10      	ldr	r3, [pc, #64]	@ (8009ae0 <vPortValidateInterruptPriority+0x84>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae4 <vPortValidateInterruptPriority+0x88>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d90d      	bls.n	8009aca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	b672      	cpsid	i
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	b662      	cpsie	i
 8009ac2:	603b      	str	r3, [r7, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <vPortValidateInterruptPriority+0x6a>
	}
 8009aca:	bf00      	nop
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	e000e3f0 	.word	0xe000e3f0
 8009adc:	20000a84 	.word	0x20000a84
 8009ae0:	e000ed0c 	.word	0xe000ed0c
 8009ae4:	20000a88 	.word	0x20000a88

08009ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	@ 0x28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009af4:	f7fe ffb2 	bl	8008a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009af8:	4b5d      	ldr	r3, [pc, #372]	@ (8009c70 <pvPortMalloc+0x188>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b00:	f000 f920 	bl	8009d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b04:	4b5b      	ldr	r3, [pc, #364]	@ (8009c74 <pvPortMalloc+0x18c>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 8094 	bne.w	8009c3a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d020      	beq.n	8009b5a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009b18:	2208      	movs	r2, #8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d017      	beq.n	8009b5a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f023 0307 	bic.w	r3, r3, #7
 8009b30:	3308      	adds	r3, #8
 8009b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <pvPortMalloc+0x72>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	b672      	cpsid	i
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	b662      	cpsie	i
 8009b52:	617b      	str	r3, [r7, #20]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d06c      	beq.n	8009c3a <pvPortMalloc+0x152>
 8009b60:	4b45      	ldr	r3, [pc, #276]	@ (8009c78 <pvPortMalloc+0x190>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d867      	bhi.n	8009c3a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b6a:	4b44      	ldr	r3, [pc, #272]	@ (8009c7c <pvPortMalloc+0x194>)
 8009b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b6e:	4b43      	ldr	r3, [pc, #268]	@ (8009c7c <pvPortMalloc+0x194>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b74:	e004      	b.n	8009b80 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d903      	bls.n	8009b92 <pvPortMalloc+0xaa>
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f1      	bne.n	8009b76 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b92:	4b37      	ldr	r3, [pc, #220]	@ (8009c70 <pvPortMalloc+0x188>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d04e      	beq.n	8009c3a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	4413      	add	r3, r2
 8009ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	1ad2      	subs	r2, r2, r3
 8009bb6:	2308      	movs	r3, #8
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d922      	bls.n	8009c04 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00d      	beq.n	8009bec <pvPortMalloc+0x104>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	b672      	cpsid	i
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	b662      	cpsie	i
 8009be4:	613b      	str	r3, [r7, #16]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	1ad2      	subs	r2, r2, r3
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bfe:	69b8      	ldr	r0, [r7, #24]
 8009c00:	f000 f902 	bl	8009e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c04:	4b1c      	ldr	r3, [pc, #112]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c12:	4b19      	ldr	r3, [pc, #100]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	4b1a      	ldr	r3, [pc, #104]	@ (8009c80 <pvPortMalloc+0x198>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d203      	bcs.n	8009c26 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c1e:	4b16      	ldr	r3, [pc, #88]	@ (8009c78 <pvPortMalloc+0x190>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a17      	ldr	r2, [pc, #92]	@ (8009c80 <pvPortMalloc+0x198>)
 8009c24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	4b12      	ldr	r3, [pc, #72]	@ (8009c74 <pvPortMalloc+0x18c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c3a:	f7fe ff1d 	bl	8008a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f003 0307 	and.w	r3, r3, #7
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00d      	beq.n	8009c64 <pvPortMalloc+0x17c>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	b672      	cpsid	i
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	b662      	cpsie	i
 8009c5c:	60fb      	str	r3, [r7, #12]
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	e7fd      	b.n	8009c60 <pvPortMalloc+0x178>
	return pvReturn;
 8009c64:	69fb      	ldr	r3, [r7, #28]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	@ 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	2000d8b4 	.word	0x2000d8b4
 8009c74:	2000d8c0 	.word	0x2000d8c0
 8009c78:	2000d8b8 	.word	0x2000d8b8
 8009c7c:	2000d8ac 	.word	0x2000d8ac
 8009c80:	2000d8bc 	.word	0x2000d8bc

08009c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d04e      	beq.n	8009d34 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c96:	2308      	movs	r3, #8
 8009c98:	425b      	negs	r3, r3
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	4b24      	ldr	r3, [pc, #144]	@ (8009d3c <vPortFree+0xb8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <vPortFree+0x4a>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	60fb      	str	r3, [r7, #12]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00d      	beq.n	8009cf2 <vPortFree+0x6e>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	b672      	cpsid	i
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	b662      	cpsie	i
 8009cea:	60bb      	str	r3, [r7, #8]
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	e7fd      	b.n	8009cee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b11      	ldr	r3, [pc, #68]	@ (8009d3c <vPortFree+0xb8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d019      	beq.n	8009d34 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d115      	bne.n	8009d34 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d3c <vPortFree+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d18:	f7fe fea0 	bl	8008a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	4b07      	ldr	r3, [pc, #28]	@ (8009d40 <vPortFree+0xbc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	4a06      	ldr	r2, [pc, #24]	@ (8009d40 <vPortFree+0xbc>)
 8009d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f000 f86c 	bl	8009e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d30:	f7fe fea2 	bl	8008a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d34:	bf00      	nop
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	2000d8c0 	.word	0x2000d8c0
 8009d40:	2000d8b8 	.word	0x2000d8b8

08009d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d4a:	f64c 6320 	movw	r3, #52768	@ 0xce20
 8009d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d50:	4b27      	ldr	r3, [pc, #156]	@ (8009df0 <prvHeapInit+0xac>)
 8009d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00c      	beq.n	8009d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3307      	adds	r3, #7
 8009d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f023 0307 	bic.w	r3, r3, #7
 8009d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	4a1f      	ldr	r2, [pc, #124]	@ (8009df0 <prvHeapInit+0xac>)
 8009d74:	4413      	add	r3, r2
 8009d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009df4 <prvHeapInit+0xb0>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d82:	4b1c      	ldr	r3, [pc, #112]	@ (8009df4 <prvHeapInit+0xb0>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d90:	2208      	movs	r2, #8
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0307 	bic.w	r3, r3, #7
 8009d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a15      	ldr	r2, [pc, #84]	@ (8009df8 <prvHeapInit+0xb4>)
 8009da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009da6:	4b14      	ldr	r3, [pc, #80]	@ (8009df8 <prvHeapInit+0xb4>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2200      	movs	r2, #0
 8009dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dae:	4b12      	ldr	r3, [pc, #72]	@ (8009df8 <prvHeapInit+0xb4>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <prvHeapInit+0xb4>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dfc <prvHeapInit+0xb8>)
 8009dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	4a09      	ldr	r2, [pc, #36]	@ (8009e00 <prvHeapInit+0xbc>)
 8009dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ddc:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <prvHeapInit+0xc0>)
 8009dde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009de2:	601a      	str	r2, [r3, #0]
}
 8009de4:	bf00      	nop
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000a8c 	.word	0x20000a8c
 8009df4:	2000d8ac 	.word	0x2000d8ac
 8009df8:	2000d8b4 	.word	0x2000d8b4
 8009dfc:	2000d8bc 	.word	0x2000d8bc
 8009e00:	2000d8b8 	.word	0x2000d8b8
 8009e04:	2000d8c0 	.word	0x2000d8c0

08009e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e10:	4b28      	ldr	r3, [pc, #160]	@ (8009eb4 <prvInsertBlockIntoFreeList+0xac>)
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e002      	b.n	8009e1c <prvInsertBlockIntoFreeList+0x14>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d8f7      	bhi.n	8009e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d108      	bne.n	8009e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	441a      	add	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	441a      	add	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d118      	bne.n	8009e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b15      	ldr	r3, [pc, #84]	@ (8009eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d00d      	beq.n	8009e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	441a      	add	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	e008      	b.n	8009e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e86:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	e003      	b.n	8009e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d002      	beq.n	8009ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ea6:	bf00      	nop
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	2000d8ac 	.word	0x2000d8ac
 8009eb8:	2000d8b4 	.word	0x2000d8b4

08009ebc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
}
 8009ec0:	bf00      	nop
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8009ece:	f009 fd57 	bl	8013980 <touchgfx_components_init>
    touchgfx_init();
 8009ed2:	f009 fd2b 	bl	801392c <touchgfx_init>
}
 8009ed6:	bf00      	nop
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8009ede:	f009 fd57 	bl	8013990 <touchgfx_taskEntry>
}
 8009ee2:	bf00      	nop
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
    {
 8009ef0:	4a04      	ldr	r2, [pc, #16]	@ (8009f04 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
    }
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	0802fef4 	.word	0x0802fef4

08009f08 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    }
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ffe9 	bl	8009ee8 <_ZN8touchgfx12FontProviderD1Ev>
 8009f16:	2104      	movs	r1, #4
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f023 f81a 	bl	802cf52 <_ZdlPvj>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8009f34:	887b      	ldrh	r3, [r7, #2]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d010      	beq.n	8009f5c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	dc13      	bgt.n	8009f66 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d005      	beq.n	8009f52 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8009f46:	e00e      	b.n	8009f66 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8009f48:	f007 fc1a 	bl	8011780 <_ZN17TypedTextDatabase8getFontsEv>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	e00a      	b.n	8009f68 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8009f52:	f007 fc15 	bl	8011780 <_ZN17TypedTextDatabase8getFontsEv>
 8009f56:	4603      	mov	r3, r0
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	e005      	b.n	8009f68 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8009f5c:	f007 fc10 	bl	8011780 <_ZN17TypedTextDatabase8getFontsEv>
 8009f60:	4603      	mov	r3, r0
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	e000      	b.n	8009f68 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8009f66:	2300      	movs	r3, #0
    }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	4a05      	ldr	r2, [pc, #20]	@ (8009f90 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff ffb1 	bl	8009ee8 <_ZN8touchgfx12FontProviderD1Ev>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	0802fee0 	.word	0x0802fee0

08009f94 <_ZN23ApplicationFontProviderD0Ev>:
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff ffe7 	bl	8009f70 <_ZN23ApplicationFontProviderD1Ev>
 8009fa2:	2104      	movs	r1, #4
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f022 ffd4 	bl	802cf52 <_ZdlPvj>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
    {
 8009fbc:	4a04      	ldr	r2, [pc, #16]	@ (8009fd0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
    }
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	08030a98 	.word	0x08030a98

08009fd4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
    }
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ffe9 	bl	8009fb4 <_ZN8touchgfx4FontD1Ev>
 8009fe2:	2114      	movs	r1, #20
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f022 ffb4 	bl	802cf52 <_ZdlPvj>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009ff4:	b590      	push	{r4, r7, lr}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800a000:	887b      	ldrh	r3, [r7, #2]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800a006:	2300      	movs	r3, #0
 800a008:	e010      	b.n	800a02c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	681c      	ldr	r4, [r3, #0]
 800a01a:	f107 030f 	add.w	r3, r7, #15
 800a01e:	f107 0210 	add.w	r2, r7, #16
 800a022:	8879      	ldrh	r1, [r7, #2]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	47a0      	blx	r4
 800a028:	6178      	str	r0, [r7, #20]
        return glyph;
 800a02a:	697b      	ldr	r3, [r7, #20]
    }
 800a02c:	4618      	mov	r0, r3
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	bd90      	pop	{r4, r7, pc}

0800a034 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	89db      	ldrh	r3, [r3, #14]
    }
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	8a1b      	ldrh	r3, [r3, #16]
    }
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	88db      	ldrh	r3, [r3, #6]
    }
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	889b      	ldrh	r3, [r3, #4]
    }
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7a9b      	ldrb	r3, [r3, #10]
 800a0a0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a0a4:	b2db      	uxtb	r3, r3
    }
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7a9b      	ldrb	r3, [r3, #10]
 800a0be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a0c2:	b2db      	uxtb	r3, r3
    }
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
    {
        return false;
 800a0d8:	2300      	movs	r3, #0
    }
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a0ee:	f04f 0300 	mov.w	r3, #0
 800a0f2:	ee07 3a90 	vmov	s15, r3
    }
 800a0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	4a05      	ldr	r2, [pc, #20]	@ (800a124 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff ff4d 	bl	8009fb4 <_ZN8touchgfx4FontD1Ev>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	080323a0 	.word	0x080323a0

0800a128 <_ZN8touchgfx9ConstFontD0Ev>:
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff ffe7 	bl	800a104 <_ZN8touchgfx9ConstFontD1Ev>
 800a136:	211c      	movs	r1, #28
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f022 ff0a 	bl	802cf52 <_ZdlPvj>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	4a05      	ldr	r2, [pc, #20]	@ (800a168 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff ffd3 	bl	800a104 <_ZN8touchgfx9ConstFontD1Ev>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	0802ff18 	.word	0x0802ff18

0800a16c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff ffe7 	bl	800a148 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a17a:	212c      	movs	r1, #44	@ 0x2c
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f022 fee8 	bl	802cf52 <_ZdlPvj>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
    {
 800a194:	4a04      	ldr	r2, [pc, #16]	@ (800a1a8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
    }
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	0802ff08 	.word	0x0802ff08

0800a1ac <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
    }
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff ffe9 	bl	800a18c <_ZN8touchgfx9TypedTextD1Ev>
 800a1ba:	2108      	movs	r1, #8
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f022 fec8 	bl	802cf52 <_ZdlPvj>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08e      	sub	sp, #56	@ 0x38
 800a200:	af0a      	add	r7, sp, #40	@ 0x28
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	460b      	mov	r3, r1
 800a20c:	80fb      	strh	r3, [r7, #6]
 800a20e:	4613      	mov	r3, r2
 800a210:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	88b9      	ldrh	r1, [r7, #4]
 800a216:	88fa      	ldrh	r2, [r7, #6]
 800a218:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a21c:	9308      	str	r3, [sp, #32]
 800a21e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a220:	9307      	str	r3, [sp, #28]
 800a222:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a226:	9306      	str	r3, [sp, #24]
 800a228:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a22c:	9305      	str	r3, [sp, #20]
 800a22e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a232:	9304      	str	r3, [sp, #16]
 800a234:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a238:	9303      	str	r3, [sp, #12]
 800a23a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	7f3b      	ldrb	r3, [r7, #28]
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	8b3b      	ldrh	r3, [r7, #24]
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	460b      	mov	r3, r1
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	f012 f8b0 	bl	801c3b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800a250:	4a09      	ldr	r2, [pc, #36]	@ (800a278 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a25a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a260:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a266:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a26c:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	0802ff18 	.word	0x0802ff18

0800a27c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	0adb      	lsrs	r3, r3, #11
 800a292:	b29b      	uxth	r3, r3
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4413      	add	r3, r2
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4413      	add	r3, r2
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b089      	sub	sp, #36	@ 0x24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	7b1b      	ldrb	r3, [r3, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	e032      	b.n	800a334 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	7b5b      	ldrb	r3, [r3, #13]
 800a2da:	b21b      	sxth	r3, r3
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	b21b      	sxth	r3, r3
 800a2e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2e4:	b219      	sxth	r1, r3
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	7adb      	ldrb	r3, [r3, #11]
 800a2ea:	b21b      	sxth	r3, r3
 800a2ec:	430b      	orrs	r3, r1
 800a2ee:	b21b      	sxth	r3, r3
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7b1b      	ldrb	r3, [r3, #12]
 800a2fc:	837b      	strh	r3, [r7, #26]
 800a2fe:	e013      	b.n	800a328 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	897a      	ldrh	r2, [r7, #10]
 800a306:	429a      	cmp	r2, r3
 800a308:	d103      	bne.n	800a312 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a310:	e010      	b.n	800a334 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	897a      	ldrh	r2, [r7, #10]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d309      	bcc.n	800a330 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a31c:	8b7b      	ldrh	r3, [r7, #26]
 800a31e:	3b01      	subs	r3, #1
 800a320:	837b      	strh	r3, [r7, #26]
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	3304      	adds	r3, #4
 800a326:	61fb      	str	r3, [r7, #28]
 800a328:	8b7b      	ldrh	r3, [r7, #26]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e8      	bne.n	800a300 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800a32e:	e000      	b.n	800a332 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800a330:	bf00      	nop
        }
    }
    return 0;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3724      	adds	r7, #36	@ 0x24
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
 800a344:	4801      	ldr	r0, [pc, #4]	@ (800a34c <__tcf_0+0xc>)
 800a346:	f7ff feff 	bl	800a148 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	2000d8c4 	.word	0x2000d8c4

0800a350 <_Z23getFont_verdana_10_4bppv>:
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08e      	sub	sp, #56	@ 0x38
 800a354:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a356:	4b21      	ldr	r3, [pc, #132]	@ (800a3dc <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f3bf 8f5b 	dmb	ish
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	bf0c      	ite	eq
 800a366:	2301      	moveq	r3, #1
 800a368:	2300      	movne	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d030      	beq.n	800a3d2 <_Z23getFont_verdana_10_4bppv+0x82>
 800a370:	481a      	ldr	r0, [pc, #104]	@ (800a3dc <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a372:	f022 fdf0 	bl	802cf56 <__cxa_guard_acquire>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d025      	beq.n	800a3d2 <_Z23getFont_verdana_10_4bppv+0x82>
 800a386:	2300      	movs	r3, #0
 800a388:	930c      	str	r3, [sp, #48]	@ 0x30
 800a38a:	2300      	movs	r3, #0
 800a38c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a38e:	2300      	movs	r3, #0
 800a390:	930a      	str	r3, [sp, #40]	@ 0x28
 800a392:	233f      	movs	r3, #63	@ 0x3f
 800a394:	9309      	str	r3, [sp, #36]	@ 0x24
 800a396:	4b12      	ldr	r3, [pc, #72]	@ (800a3e0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	4b12      	ldr	r3, [pc, #72]	@ (800a3e4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9306      	str	r3, [sp, #24]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	9304      	str	r3, [sp, #16]
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	9303      	str	r3, [sp, #12]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9302      	str	r3, [sp, #8]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	230a      	movs	r3, #10
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	230a      	movs	r3, #10
 800a3bc:	2201      	movs	r2, #1
 800a3be:	490a      	ldr	r1, [pc, #40]	@ (800a3e8 <_Z23getFont_verdana_10_4bppv+0x98>)
 800a3c0:	480a      	ldr	r0, [pc, #40]	@ (800a3ec <_Z23getFont_verdana_10_4bppv+0x9c>)
 800a3c2:	f7ff ff1b 	bl	800a1fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a3c6:	480a      	ldr	r0, [pc, #40]	@ (800a3f0 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800a3c8:	f023 fb42 	bl	802da50 <atexit>
 800a3cc:	4803      	ldr	r0, [pc, #12]	@ (800a3dc <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a3ce:	f022 fdce 	bl	802cf6e <__cxa_guard_release>
    return verdana_10_4bpp;
 800a3d2:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	2000d8f0 	.word	0x2000d8f0
 800a3e0:	08032b50 	.word	0x08032b50
 800a3e4:	08032b60 	.word	0x08032b60
 800a3e8:	90265f94 	.word	0x90265f94
 800a3ec:	2000d8c4 	.word	0x2000d8c4
 800a3f0:	0800a341 	.word	0x0800a341

0800a3f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	4801      	ldr	r0, [pc, #4]	@ (800a400 <__tcf_0+0xc>)
 800a3fa:	f7ff fea5 	bl	800a148 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	2000d8f4 	.word	0x2000d8f4

0800a404 <_Z23getFont_verdana_20_4bppv>:
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	@ 0x38
 800a408:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a40a:	4b21      	ldr	r3, [pc, #132]	@ (800a490 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f3bf 8f5b 	dmb	ish
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf0c      	ite	eq
 800a41a:	2301      	moveq	r3, #1
 800a41c:	2300      	movne	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	d030      	beq.n	800a486 <_Z23getFont_verdana_20_4bppv+0x82>
 800a424:	481a      	ldr	r0, [pc, #104]	@ (800a490 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a426:	f022 fd96 	bl	802cf56 <__cxa_guard_acquire>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf14      	ite	ne
 800a430:	2301      	movne	r3, #1
 800a432:	2300      	moveq	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d025      	beq.n	800a486 <_Z23getFont_verdana_20_4bppv+0x82>
 800a43a:	2300      	movs	r3, #0
 800a43c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a43e:	2300      	movs	r3, #0
 800a440:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a442:	2300      	movs	r3, #0
 800a444:	930a      	str	r3, [sp, #40]	@ 0x28
 800a446:	233f      	movs	r3, #63	@ 0x3f
 800a448:	9309      	str	r3, [sp, #36]	@ 0x24
 800a44a:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <_Z23getFont_verdana_20_4bppv+0x90>)
 800a44c:	9308      	str	r3, [sp, #32]
 800a44e:	4b12      	ldr	r3, [pc, #72]	@ (800a498 <_Z23getFont_verdana_20_4bppv+0x94>)
 800a450:	9307      	str	r3, [sp, #28]
 800a452:	2300      	movs	r3, #0
 800a454:	9306      	str	r3, [sp, #24]
 800a456:	2300      	movs	r3, #0
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	2301      	movs	r3, #1
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	2304      	movs	r3, #4
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	2300      	movs	r3, #0
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	2300      	movs	r3, #0
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	2314      	movs	r3, #20
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	2318      	movs	r3, #24
 800a470:	2210      	movs	r2, #16
 800a472:	490a      	ldr	r1, [pc, #40]	@ (800a49c <_Z23getFont_verdana_20_4bppv+0x98>)
 800a474:	480a      	ldr	r0, [pc, #40]	@ (800a4a0 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800a476:	f7ff fec1 	bl	800a1fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a47a:	480a      	ldr	r0, [pc, #40]	@ (800a4a4 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800a47c:	f023 fae8 	bl	802da50 <atexit>
 800a480:	4803      	ldr	r0, [pc, #12]	@ (800a490 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a482:	f022 fd74 	bl	802cf6e <__cxa_guard_release>
    return verdana_20_4bpp;
 800a486:	4b06      	ldr	r3, [pc, #24]	@ (800a4a0 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800a488:	4618      	mov	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	2000d920 	.word	0x2000d920
 800a494:	08032b54 	.word	0x08032b54
 800a498:	08032b64 	.word	0x08032b64
 800a49c:	90265fa4 	.word	0x90265fa4
 800a4a0:	2000d8f4 	.word	0x2000d8f4
 800a4a4:	0800a3f5 	.word	0x0800a3f5

0800a4a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	4801      	ldr	r0, [pc, #4]	@ (800a4b4 <__tcf_0+0xc>)
 800a4ae:	f7ff fe4b 	bl	800a148 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2000d924 	.word	0x2000d924

0800a4b8 <_Z23getFont_verdana_40_4bppv>:
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08e      	sub	sp, #56	@ 0x38
 800a4bc:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800a4be:	4b21      	ldr	r3, [pc, #132]	@ (800a544 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f3bf 8f5b 	dmb	ish
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bf0c      	ite	eq
 800a4ce:	2301      	moveq	r3, #1
 800a4d0:	2300      	movne	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d030      	beq.n	800a53a <_Z23getFont_verdana_40_4bppv+0x82>
 800a4d8:	481a      	ldr	r0, [pc, #104]	@ (800a544 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a4da:	f022 fd3c 	bl	802cf56 <__cxa_guard_acquire>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bf14      	ite	ne
 800a4e4:	2301      	movne	r3, #1
 800a4e6:	2300      	moveq	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d025      	beq.n	800a53a <_Z23getFont_verdana_40_4bppv+0x82>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4fa:	233f      	movs	r3, #63	@ 0x3f
 800a4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fe:	4b12      	ldr	r3, [pc, #72]	@ (800a548 <_Z23getFont_verdana_40_4bppv+0x90>)
 800a500:	9308      	str	r3, [sp, #32]
 800a502:	4b12      	ldr	r3, [pc, #72]	@ (800a54c <_Z23getFont_verdana_40_4bppv+0x94>)
 800a504:	9307      	str	r3, [sp, #28]
 800a506:	2300      	movs	r3, #0
 800a508:	9306      	str	r3, [sp, #24]
 800a50a:	2300      	movs	r3, #0
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	2301      	movs	r3, #1
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	2304      	movs	r3, #4
 800a514:	9303      	str	r3, [sp, #12]
 800a516:	2300      	movs	r3, #0
 800a518:	9302      	str	r3, [sp, #8]
 800a51a:	2300      	movs	r3, #0
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	2328      	movs	r3, #40	@ 0x28
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	2328      	movs	r3, #40	@ 0x28
 800a524:	2201      	movs	r2, #1
 800a526:	490a      	ldr	r1, [pc, #40]	@ (800a550 <_Z23getFont_verdana_40_4bppv+0x98>)
 800a528:	480a      	ldr	r0, [pc, #40]	@ (800a554 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800a52a:	f7ff fe67 	bl	800a1fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a52e:	480a      	ldr	r0, [pc, #40]	@ (800a558 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800a530:	f023 fa8e 	bl	802da50 <atexit>
 800a534:	4803      	ldr	r0, [pc, #12]	@ (800a544 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a536:	f022 fd1a 	bl	802cf6e <__cxa_guard_release>
    return verdana_40_4bpp;
 800a53a:	4b06      	ldr	r3, [pc, #24]	@ (800a554 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	2000d950 	.word	0x2000d950
 800a548:	08032b5c 	.word	0x08032b5c
 800a54c:	08032b68 	.word	0x08032b68
 800a550:	90266084 	.word	0x90266084
 800a554:	2000d924 	.word	0x2000d924
 800a558:	0800a4a9 	.word	0x0800a4a9

0800a55c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	801a      	strh	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	805a      	strh	r2, [r3, #2]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	809a      	strh	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	80da      	strh	r2, [r3, #6]
    {
    }
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800a5a2:	b480      	push	{r7}
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	817b      	strh	r3, [r7, #10]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	813b      	strh	r3, [r7, #8]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	897a      	ldrh	r2, [r7, #10]
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	893a      	ldrh	r2, [r7, #8]
 800a5c6:	805a      	strh	r2, [r3, #2]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	88fa      	ldrh	r2, [r7, #6]
 800a5cc:	809a      	strh	r2, [r3, #4]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8b3a      	ldrh	r2, [r7, #24]
 800a5d2:	80da      	strh	r2, [r3, #6]
    {
    }
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a5ec:	4a14      	ldr	r2, [pc, #80]	@ (800a640 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
        : rect(),
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff ffbc 	bl	800a574 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	330c      	adds	r3, #12
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff ffb7 	bl	800a574 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	08032338 	.word	0x08032338

0800a644 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
    {
 800a64c:	4a04      	ldr	r2, [pc, #16]	@ (800a660 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	601a      	str	r2, [r3, #0]
    }
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	08032338 	.word	0x08032338

0800a664 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
    }
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ffe9 	bl	800a644 <_ZN8touchgfx8DrawableD1Ev>
 800a672:	2128      	movs	r1, #40	@ 0x28
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f022 fc6c 	bl	802cf52 <_ZdlPvj>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a692:	2b00      	cmp	r3, #0
 800a694:	d005      	beq.n	800a6a2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3314      	adds	r3, #20
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
        }
    }
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <_ZN8touchgfx8Drawable14getNextSiblingEv>:
     * Gets the next sibling node. This will be the next Drawable that has been added to the
     * same Container as this Drawable.
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
    {
        return nextSibling;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	699b      	ldr	r3, [r3, #24]
    }
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a6ca:	2300      	movs	r3, #0
    }
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	817b      	strh	r3, [r7, #10]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	813b      	strh	r3, [r7, #8]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800a6f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a6f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f844 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800a702:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f898 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800a742:	4618      	mov	r0, r3
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	887a      	ldrh	r2, [r7, #2]
 800a75e:	809a      	strh	r2, [r3, #4]
    }
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	887a      	ldrh	r2, [r7, #2]
 800a77c:	80da      	strh	r2, [r3, #6]
    }
 800a77e:	bf00      	nop
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	807b      	strh	r3, [r7, #2]
 800a796:	4613      	mov	r3, r2
 800a798:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3330      	adds	r3, #48	@ 0x30
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
        setY(y);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3334      	adds	r3, #52	@ 0x34
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
    }
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	887a      	ldrh	r2, [r7, #2]
 800a7d6:	811a      	strh	r2, [r3, #8]
    }
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	887a      	ldrh	r2, [r7, #2]
 800a7f4:	815a      	strh	r2, [r3, #10]
    }
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
    {
    }
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	807b      	strh	r3, [r7, #2]
 800a84e:	4613      	mov	r3, r2
 800a850:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3338      	adds	r3, #56	@ 0x38
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a85e:	4611      	mov	r1, r2
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	4798      	blx	r3
        setHeight(height);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	333c      	adds	r3, #60	@ 0x3c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a870:	4611      	mov	r1, r2
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	4798      	blx	r3
    }
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
    {
    }
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800a8c2:	b480      	push	{r7}
 800a8c4:	b083      	sub	sp, #12
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	807b      	strh	r3, [r7, #2]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3354      	adds	r3, #84	@ 0x54
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	8879      	ldrh	r1, [r7, #2]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a8fc:	b292      	uxth	r2, r2
 800a8fe:	1a8a      	subs	r2, r1, r2
 800a900:	b292      	uxth	r2, r2
 800a902:	b210      	sxth	r0, r2
 800a904:	8839      	ldrh	r1, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a90c:	b292      	uxth	r2, r2
 800a90e:	1a8a      	subs	r2, r1, r2
 800a910:	b292      	uxth	r2, r2
 800a912:	b212      	sxth	r2, r2
 800a914:	4601      	mov	r1, r0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	4798      	blx	r3
    }
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a930:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a938:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a940:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800a942:	bf00      	nop
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7ff ffe1 	bl	800a922 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]
    }
 800a96e:	bf00      	nop
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
    {
    }
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    {
    }
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    {
 800aa00:	4a04      	ldr	r2, [pc, #16]	@ (800aa14 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]
    }
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	080301dc 	.word	0x080301dc

0800aa18 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
    }
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff ffe9 	bl	800a9f8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800aa26:	2104      	movs	r1, #4
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f022 fa92 	bl	802cf52 <_ZdlPvj>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4618      	mov	r0, r3
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	607b      	str	r3, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	817b      	strh	r3, [r7, #10]
 800aa46:	4613      	mov	r3, r2
 800aa48:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff ff2b 	bl	800a8a8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d008      	beq.n	800aa6a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff ff31 	bl	800a8c2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	601a      	str	r2, [r3, #0]
        }
    }
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
    {
    }
 800aa86:	bf00      	nop
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800aa9e:	bf00      	nop
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800aabc:	6810      	ldr	r0, [r2, #0]
 800aabe:	6851      	ldr	r1, [r2, #4]
 800aac0:	c303      	stmia	r3!, {r0, r1}
    }
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3304      	adds	r3, #4
 800aada:	4618      	mov	r0, r3
 800aadc:	f010 fb36 	bl	801b14c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
    {
 800aaf0:	4a04      	ldr	r2, [pc, #16]	@ (800ab04 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	601a      	str	r2, [r3, #0]
    }
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	0803015c 	.word	0x0803015c

0800ab08 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
    }
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff ffe9 	bl	800aae8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ab16:	2104      	movs	r1, #4
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f022 fa1a 	bl	802cf52 <_ZdlPvj>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ab28:	b480      	push	{r7}
 800ab2a:	af00      	add	r7, sp, #0
    {
        return instance;
 800ab2c:	4b03      	ldr	r3, [pc, #12]	@ (800ab3c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
    }
 800ab30:	4618      	mov	r0, r3
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	200122c4 	.word	0x200122c4

0800ab40 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ab44:	4b0b      	ldr	r3, [pc, #44]	@ (800ab74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d008      	beq.n	800ab62 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ab50:	4b08      	ldr	r3, [pc, #32]	@ (800ab74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ab5a:	4b06      	ldr	r3, [pc, #24]	@ (800ab74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab60:	e002      	b.n	800ab68 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800ab62:	4b04      	ldr	r3, [pc, #16]	@ (800ab74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
    }
 800ab68:	4618      	mov	r0, r3
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	200122c4 	.word	0x200122c4

0800ab78 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ab80:	4a07      	ldr	r2, [pc, #28]	@ (800aba0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	605a      	str	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	721a      	strb	r2, [r3, #8]
    {
    }
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	080300d0 	.word	0x080300d0

0800aba4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
    {
 800abac:	4a04      	ldr	r2, [pc, #16]	@ (800abc0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]
    }
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4618      	mov	r0, r3
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	080300d0 	.word	0x080300d0

0800abc4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
    }
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff ffe9 	bl	800aba4 <_ZN8touchgfx10TransitionD1Ev>
 800abd2:	210c      	movs	r1, #12
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f022 f9bc 	bl	802cf52 <_ZdlPvj>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
    {
    }
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
    {
    }
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
    {
    }
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800ac28:	f010 fa2a 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	323c      	adds	r2, #60	@ 0x3c
 800ac32:	6812      	ldr	r2, [r2, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	4790      	blx	r2
    }
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	605a      	str	r2, [r3, #4]
    }
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4613      	mov	r3, r2
 800ac76:	2200      	movs	r2, #0
 800ac78:	2100      	movs	r1, #0
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff fc91 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
        }
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
        {
        }
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	4a05      	ldr	r2, [pc, #20]	@ (800acc0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fea1 	bl	800a9f8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	080322e4 	.word	0x080322e4

0800acc4 <_ZN8touchgfx11ApplicationD0Ev>:
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff ffe7 	bl	800aca0 <_ZN8touchgfx11ApplicationD1Ev>
 800acd2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f022 f93b 	bl	802cf52 <_ZdlPvj>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f010 fafc 	bl	801b2f0 <_ZN8touchgfx11ApplicationC1Ev>
 800acf8:	4a09      	ldr	r2, [pc, #36]	@ (800ad20 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a04      	ldr	r2, [pc, #16]	@ (800ad24 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ad12:	6013      	str	r3, [r2, #0]
    }
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4618      	mov	r0, r3
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	0803007c 	.word	0x0803007c
 800ad24:	20012318 	.word	0x20012318

0800ad28 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f804 	bl	800ad3e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00f      	beq.n	800ad70 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	330c      	adds	r3, #12
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4610      	mov	r0, r2
 800ad64:	4798      	blx	r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ad70:	2300      	movs	r3, #0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00e      	beq.n	800ad94 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3308      	adds	r3, #8
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	601a      	str	r2, [r3, #0]
    }
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	4a05      	ldr	r2, [pc, #20]	@ (800add8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff ff69 	bl	800aca0 <_ZN8touchgfx11ApplicationD1Ev>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	0803007c 	.word	0x0803007c

0800addc <_ZN8touchgfx14MVPApplicationD0Ev>:
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff ffe7 	bl	800adb8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800adea:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f022 f8af 	bl	802cf52 <_ZdlPvj>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	4a05      	ldr	r2, [pc, #20]	@ (800ae20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fe69 	bl	800aae8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	08030064 	.word	0x08030064

0800ae24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ffe7 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ae32:	2110      	movs	r1, #16
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f022 f88c 	bl	802cf52 <_ZdlPvj>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	4a08      	ldr	r2, [pc, #32]	@ (800ae70 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ffd1 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff ffa9 	bl	800adb8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	08030010 	.word	0x08030010

0800ae74 <_ZN23FrontendApplicationBaseD0Ev>:
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ffe1 	bl	800ae44 <_ZN23FrontendApplicationBaseD1Ev>
 800ae82:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f022 f863 	bl	802cf52 <_ZdlPvj>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f902 	bl	800b0a8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	721a      	strb	r2, [r3, #8]
    }
 800aeba:	bf00      	nop
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	605a      	str	r2, [r3, #4]
    }
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff fb78 	bl	800a5e4 <_ZN8touchgfx8DrawableC1Ev>
 800aef4:	4a03      	ldr	r2, [pc, #12]	@ (800af04 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	08030174 	.word	0x08030174

0800af08 <_ZN8touchgfx6WidgetD1Ev>:
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	4a05      	ldr	r2, [pc, #20]	@ (800af28 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fb93 	bl	800a644 <_ZN8touchgfx8DrawableD1Ev>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	08030174 	.word	0x08030174

0800af2c <_ZN8touchgfx6WidgetD0Ev>:
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff ffe7 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800af3a:	2128      	movs	r1, #40	@ 0x28
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f022 f808 	bl	802cf52 <_ZdlPvj>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen4_screen/Screen4View.hpp>
#include <gui/screen4_screen/Screen4Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fec4 	bl	800ace8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800af60:	4a19      	ldr	r2, [pc, #100]	@ (800afc8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 f9c3 	bl	800b2f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800af82:	f7ff fdd1 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 800af86:	4603      	mov	r3, r0
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	3208      	adds	r2, #8
 800af8c:	6812      	ldr	r2, [r2, #0]
 800af8e:	2100      	movs	r1, #0
 800af90:	4618      	mov	r0, r3
 800af92:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800af94:	2000      	movs	r0, #0
 800af96:	f006 fb7b 	bl	8011690 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800af9a:	f7ff fdd1 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 800af9e:	4603      	mov	r3, r0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f01a f9ec 	bl	802537e <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800afa6:	f7ff fdcb 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 800afaa:	4603      	mov	r3, r0
 800afac:	4618      	mov	r0, r3
 800afae:	f01a fa65 	bl	802547c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800afb2:	f7ff fdc5 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 800afb6:	4603      	mov	r3, r0
 800afb8:	4618      	mov	r0, r3
 800afba:	f01a fa6b 	bl	8025494 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv>
}
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08030010 	.word	0x08030010

0800afcc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff ffe9 	bl	800afcc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	605a      	str	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	3208      	adds	r2, #8
 800b00a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b00e:	e883 0003 	stmia.w	r3, {r0, r1}
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZN23FrontendApplicationBase34gotoscreenScreenWipeTransitionEastEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenWipeTransitionEast()
{
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b089      	sub	sp, #36	@ 0x24
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenWipeTransitionEastImpl);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b02a:	4b10      	ldr	r3, [pc, #64]	@ (800b06c <_ZN23FrontendApplicationBase34gotoscreenScreenWipeTransitionEastEv+0x50>)
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]
 800b032:	f107 0008 	add.w	r0, r7, #8
 800b036:	f107 0318 	add.w	r3, r7, #24
 800b03a:	cb0c      	ldmia	r3, {r2, r3}
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	f000 f977 	bl	800b330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4619      	mov	r1, r3
 800b048:	4620      	mov	r0, r4
 800b04a:	f7ff ffcb 	bl	800afe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b04e:	f107 0308 	add.w	r3, r7, #8
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff fed4 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b064:	bf00      	nop
 800b066:	3724      	adds	r7, #36	@ 0x24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd90      	pop	{r4, r7, pc}
 800b06c:	0800b071 	.word	0x0800b071

0800b070 <_ZN23FrontendApplicationBase38gotoscreenScreenWipeTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenWipeTransitionEastImpl()
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af02      	add	r7, sp, #8
 800b076:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b084:	461a      	mov	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	4b04      	ldr	r3, [pc, #16]	@ (800b0a0 <_ZN23FrontendApplicationBase38gotoscreenScreenWipeTransitionEastImplEv+0x30>)
 800b090:	4804      	ldr	r0, [pc, #16]	@ (800b0a4 <_ZN23FrontendApplicationBase38gotoscreenScreenWipeTransitionEastImplEv+0x34>)
 800b092:	f000 f96d 	bl	800b370 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b096:	bf00      	nop
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	2001230c 	.word	0x2001230c
 800b0a4:	20012308 	.word	0x20012308

0800b0a8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800b0a8:	b590      	push	{r4, r7, lr}
 800b0aa:	b089      	sub	sp, #36	@ 0x24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b0b6:	4b10      	ldr	r3, [pc, #64]	@ (800b0f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800b0b8:	61bb      	str	r3, [r7, #24]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	61fb      	str	r3, [r7, #28]
 800b0be:	f107 0008 	add.w	r0, r7, #8
 800b0c2:	f107 0318 	add.w	r3, r7, #24
 800b0c6:	cb0c      	ldmia	r3, {r2, r3}
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	f000 f931 	bl	800b330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b0ce:	f107 0308 	add.w	r3, r7, #8
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f7ff ff85 	bl	800afe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b0da:	f107 0308 	add.w	r3, r7, #8
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff fe8e 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b0f0:	bf00      	nop
 800b0f2:	3724      	adds	r7, #36	@ 0x24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd90      	pop	{r4, r7, pc}
 800b0f8:	0800b0fd 	.word	0x0800b0fd

0800b0fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af02      	add	r7, sp, #8
 800b102:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b110:	461a      	mov	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	4b04      	ldr	r3, [pc, #16]	@ (800b12c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800b11c:	4804      	ldr	r0, [pc, #16]	@ (800b130 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800b11e:	f000 fa53 	bl	800b5c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b122:	bf00      	nop
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	2001230c 	.word	0x2001230c
 800b130:	20012308 	.word	0x20012308

0800b134 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b089      	sub	sp, #36	@ 0x24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b142:	4b10      	ldr	r3, [pc, #64]	@ (800b184 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 800b144:	61bb      	str	r3, [r7, #24]
 800b146:	2300      	movs	r3, #0
 800b148:	61fb      	str	r3, [r7, #28]
 800b14a:	f107 0008 	add.w	r0, r7, #8
 800b14e:	f107 0318 	add.w	r3, r7, #24
 800b152:	cb0c      	ldmia	r3, {r2, r3}
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	f000 f8eb 	bl	800b330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b15a:	f107 0308 	add.w	r3, r7, #8
 800b15e:	4619      	mov	r1, r3
 800b160:	4620      	mov	r0, r4
 800b162:	f7ff ff3f 	bl	800afe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b166:	f107 0308 	add.w	r3, r7, #8
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff fe48 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b17c:	bf00      	nop
 800b17e:	3724      	adds	r7, #36	@ 0x24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd90      	pop	{r4, r7, pc}
 800b184:	0800b189 	.word	0x0800b189

0800b188 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b19c:	461a      	mov	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	4b04      	ldr	r3, [pc, #16]	@ (800b1b8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 800b1a8:	4804      	ldr	r0, [pc, #16]	@ (800b1bc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 800b1aa:	f000 fb27 	bl	800b7fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	2001230c 	.word	0x2001230c
 800b1bc:	20012308 	.word	0x20012308

0800b1c0 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionWestEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenSlideTransitionWest()
{
 800b1c0:	b590      	push	{r4, r7, lr}
 800b1c2:	b089      	sub	sp, #36	@ 0x24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen3ScreenSlideTransitionWestImpl);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b1ce:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionWestEv+0x50>)
 800b1d0:	61bb      	str	r3, [r7, #24]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	61fb      	str	r3, [r7, #28]
 800b1d6:	f107 0008 	add.w	r0, r7, #8
 800b1da:	f107 0318 	add.w	r3, r7, #24
 800b1de:	cb0c      	ldmia	r3, {r2, r3}
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	f000 f8a5 	bl	800b330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f7ff fef9 	bl	800afe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b1f2:	f107 0308 	add.w	r3, r7, #8
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fe02 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b208:	bf00      	nop
 800b20a:	3724      	adds	r7, #36	@ 0x24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd90      	pop	{r4, r7, pc}
 800b210:	0800b215 	.word	0x0800b215

0800b214 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenSlideTransitionWestImpl()
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af02      	add	r7, sp, #8
 800b21a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b228:	461a      	mov	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	4b04      	ldr	r3, [pc, #16]	@ (800b244 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionWestImplEv+0x30>)
 800b234:	4804      	ldr	r0, [pc, #16]	@ (800b248 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionWestImplEv+0x34>)
 800b236:	f000 fbfb 	bl	800ba30 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b23a:	bf00      	nop
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	2001230c 	.word	0x2001230c
 800b248:	20012308 	.word	0x20012308

0800b24c <_ZN23FrontendApplicationBase35gotoScreen4ScreenWipeTransitionWestEv>:

// Screen4

void FrontendApplicationBase::gotoScreen4ScreenWipeTransitionWest()
{
 800b24c:	b590      	push	{r4, r7, lr}
 800b24e:	b089      	sub	sp, #36	@ 0x24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen4ScreenWipeTransitionWestImpl);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800b25a:	4b10      	ldr	r3, [pc, #64]	@ (800b29c <_ZN23FrontendApplicationBase35gotoScreen4ScreenWipeTransitionWestEv+0x50>)
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	f107 0008 	add.w	r0, r7, #8
 800b266:	f107 0318 	add.w	r3, r7, #24
 800b26a:	cb0c      	ldmia	r3, {r2, r3}
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	f000 f85f 	bl	800b330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b272:	f107 0308 	add.w	r3, r7, #8
 800b276:	4619      	mov	r1, r3
 800b278:	4620      	mov	r0, r4
 800b27a:	f7ff feb3 	bl	800afe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b27e:	f107 0308 	add.w	r3, r7, #8
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fdbc 	bl	800ae00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800b294:	bf00      	nop
 800b296:	3724      	adds	r7, #36	@ 0x24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd90      	pop	{r4, r7, pc}
 800b29c:	0800b2a1 	.word	0x0800b2a1

0800b2a0 <_ZN23FrontendApplicationBase39gotoScreen4ScreenWipeTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen4ScreenWipeTransitionWestImpl()
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen4View, Screen4Presenter, touchgfx::WipeTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	4b04      	ldr	r3, [pc, #16]	@ (800b2d0 <_ZN23FrontendApplicationBase39gotoScreen4ScreenWipeTransitionWestImplEv+0x30>)
 800b2c0:	4804      	ldr	r0, [pc, #16]	@ (800b2d4 <_ZN23FrontendApplicationBase39gotoScreen4ScreenWipeTransitionWestImplEv+0x34>)
 800b2c2:	f000 fcd1 	bl	800bc68 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	2001230c 	.word	0x2001230c
 800b2d4:	20012308 	.word	0x20012308

0800b2d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	4a04      	ldr	r2, [pc, #16]	@ (800b2f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	0803015c 	.word	0x0803015c

0800b2f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff ffe8 	bl	800b2d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b308:	4a08      	ldr	r2, [pc, #32]	@ (800b32c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	605a      	str	r2, [r3, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	609a      	str	r2, [r3, #8]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	60da      	str	r2, [r3, #12]
    {
    }
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	08030064 	.word	0x08030064

0800b330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4639      	mov	r1, r7
 800b33c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff ffc8 	bl	800b2d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b348:	4a08      	ldr	r2, [pc, #32]	@ (800b36c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	605a      	str	r2, [r3, #4]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3308      	adds	r3, #8
 800b358:	463a      	mov	r2, r7
 800b35a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b35e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	08030064 	.word	0x08030064

0800b370 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b370:	b590      	push	{r4, r7, lr}
 800b372:	b08f      	sub	sp, #60	@ 0x3c
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	689a      	ldr	r2, [r3, #8]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3320      	adds	r3, #32
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4610      	mov	r0, r2
 800b38e:	4798      	blx	r3
 800b390:	4603      	mov	r3, r0
 800b392:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b396:	d205      	bcs.n	800b3a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b398:	4b7d      	ldr	r3, [pc, #500]	@ (800b590 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800b39a:	4a7e      	ldr	r2, [pc, #504]	@ (800b594 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b39c:	21a3      	movs	r1, #163	@ 0xa3
 800b39e:	487e      	ldr	r0, [pc, #504]	@ (800b598 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b3a0:	f022 fb38 	bl	802da14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3320      	adds	r3, #32
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	4798      	blx	r3
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b0f      	cmp	r3, #15
 800b3ba:	d805      	bhi.n	800b3c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b3bc:	4b77      	ldr	r3, [pc, #476]	@ (800b59c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b3be:	4a75      	ldr	r2, [pc, #468]	@ (800b594 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b3c0:	21a4      	movs	r1, #164	@ 0xa4
 800b3c2:	4875      	ldr	r0, [pc, #468]	@ (800b598 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b3c4:	f022 fb26 	bl	802da14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3320      	adds	r3, #32
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	4798      	blx	r3
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b37      	cmp	r3, #55	@ 0x37
 800b3de:	d805      	bhi.n	800b3ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800b3e0:	4b6f      	ldr	r3, [pc, #444]	@ (800b5a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b3e2:	4a6c      	ldr	r2, [pc, #432]	@ (800b594 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b3e4:	21a5      	movs	r1, #165	@ 0xa5
 800b3e6:	486c      	ldr	r0, [pc, #432]	@ (800b598 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b3e8:	f022 fb14 	bl	802da14 <__assert_func>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b3f8:	f00f fe42 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff fb65 	bl	800aace <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d008      	beq.n	800b41e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	330c      	adds	r3, #12
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4610      	mov	r0, r2
 800b41c:	4798      	blx	r3
    if (*currentTrans)
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d007      	beq.n	800b436 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4610      	mov	r0, r2
 800b434:	4798      	blx	r3
    if (*currentScreen)
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d008      	beq.n	800b450 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800b43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3314      	adds	r3, #20
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
    if (*currentPresenter)
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d008      	beq.n	800b46a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800b458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3304      	adds	r3, #4
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4610      	mov	r0, r2
 800b468:	4798      	blx	r3
    if (*currentScreen)
 800b46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800b472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4610      	mov	r0, r2
 800b480:	4798      	blx	r3
    if (*currentPresenter)
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d008      	beq.n	800b49c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3308      	adds	r3, #8
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
}
 800b49c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fcf9 	bl	800be9c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	2038      	movs	r0, #56	@ 0x38
 800b4b0:	f7ff f854 	bl	800a55c <_ZnwjPv>
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	2114      	movs	r1, #20
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fd37 	bl	800bf2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>
 800b4be:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 fd72 	bl	800bfb0 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b4d4:	f7ff f842 	bl	800a55c <_ZnwjPv>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f006 fd00 	bl	8011ee0 <_ZN10screenViewC1Ev>
 800b4e0:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fd74 	bl	800bfd6 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	2010      	movs	r0, #16
 800b4f4:	f7ff f832 	bl	800a55c <_ZnwjPv>
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f006 fc97 	bl	8011e30 <_ZN15screenPresenterC1ER10screenView>
 800b502:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b508:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b50e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b514:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51e:	3304      	adds	r3, #4
 800b520:	e000      	b.n	800b524 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800b522:	2300      	movs	r3, #0
 800b524:	4619      	mov	r1, r3
 800b526:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b528:	f7ff fc38 	bl	800ad9c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52e:	3304      	adds	r3, #4
 800b530:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff fcc7 	bl	800aec6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fd5d 	bl	800bffc <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b548:	61bb      	str	r3, [r7, #24]
 800b54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	330c      	adds	r3, #12
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	69f8      	ldr	r0, [r7, #28]
 800b558:	4798      	blx	r3
    newPresenter->activate();
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69b8      	ldr	r0, [r7, #24]
 800b562:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b564:	6979      	ldr	r1, [r7, #20]
 800b566:	69f8      	ldr	r0, [r7, #28]
 800b568:	f011 fb8e 	bl	801cc88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3310      	adds	r3, #16
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6978      	ldr	r0, [r7, #20]
 800b576:	4798      	blx	r3
    newTransition->invalidate();
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3314      	adds	r3, #20
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6978      	ldr	r0, [r7, #20]
 800b582:	4798      	blx	r3
}
 800b584:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b588:	4618      	mov	r0, r3
 800b58a:	373c      	adds	r7, #60	@ 0x3c
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd90      	pop	{r4, r7, pc}
 800b590:	0802ed6c 	.word	0x0802ed6c
 800b594:	0802edfc 	.word	0x0802edfc
 800b598:	0802eee0 	.word	0x0802eee0
 800b59c:	0802ef24 	.word	0x0802ef24
 800b5a0:	0802efc8 	.word	0x0802efc8

0800b5a4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff fae2 	bl	800ab78 <_ZN8touchgfx10TransitionC1Ev>
 800b5b4:	4a03      	ldr	r2, [pc, #12]	@ (800b5c4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	0802ffec 	.word	0x0802ffec

0800b5c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b08f      	sub	sp, #60	@ 0x3c
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3320      	adds	r3, #32
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	4798      	blx	r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b5ee:	d205      	bcs.n	800b5fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b5f0:	4b7d      	ldr	r3, [pc, #500]	@ (800b7e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800b5f2:	4a7e      	ldr	r2, [pc, #504]	@ (800b7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b5f4:	21a3      	movs	r1, #163	@ 0xa3
 800b5f6:	487e      	ldr	r0, [pc, #504]	@ (800b7f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b5f8:	f022 fa0c 	bl	802da14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3320      	adds	r3, #32
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4610      	mov	r0, r2
 800b60c:	4798      	blx	r3
 800b60e:	4603      	mov	r3, r0
 800b610:	2b0f      	cmp	r3, #15
 800b612:	d805      	bhi.n	800b620 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b614:	4b77      	ldr	r3, [pc, #476]	@ (800b7f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b616:	4a75      	ldr	r2, [pc, #468]	@ (800b7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b618:	21a4      	movs	r1, #164	@ 0xa4
 800b61a:	4875      	ldr	r0, [pc, #468]	@ (800b7f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b61c:	f022 f9fa 	bl	802da14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3320      	adds	r3, #32
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4610      	mov	r0, r2
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	2b0b      	cmp	r3, #11
 800b636:	d805      	bhi.n	800b644 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800b638:	4b6f      	ldr	r3, [pc, #444]	@ (800b7f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b63a:	4a6c      	ldr	r2, [pc, #432]	@ (800b7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b63c:	21a5      	movs	r1, #165	@ 0xa5
 800b63e:	486c      	ldr	r0, [pc, #432]	@ (800b7f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b640:	f022 f9e8 	bl	802da14 <__assert_func>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b650:	f00f fd16 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800b654:	4603      	mov	r3, r0
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff fa39 	bl	800aace <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	330c      	adds	r3, #12
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4610      	mov	r0, r2
 800b674:	4798      	blx	r3
    if (*currentTrans)
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d007      	beq.n	800b68e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4610      	mov	r0, r2
 800b68c:	4798      	blx	r3
    if (*currentScreen)
 800b68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d008      	beq.n	800b6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3314      	adds	r3, #20
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4798      	blx	r3
    if (*currentPresenter)
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d008      	beq.n	800b6c2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4610      	mov	r0, r2
 800b6c0:	4798      	blx	r3
    if (*currentScreen)
 800b6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4798      	blx	r3
    if (*currentPresenter)
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d008      	beq.n	800b6f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
}
 800b6f4:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fc8b 	bl	800c018 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800b702:	4603      	mov	r3, r0
 800b704:	4619      	mov	r1, r3
 800b706:	200c      	movs	r0, #12
 800b708:	f7fe ff28 	bl	800a55c <_ZnwjPv>
 800b70c:	4604      	mov	r4, r0
 800b70e:	4620      	mov	r0, r4
 800b710:	f7ff ff48 	bl	800b5a4 <_ZN8touchgfx12NoTransitionC1Ev>
 800b714:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	2100      	movs	r1, #0
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fc8e 	bl	800c03e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b722:	4603      	mov	r3, r0
 800b724:	4619      	mov	r1, r3
 800b726:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b72a:	f7fe ff17 	bl	800a55c <_ZnwjPv>
 800b72e:	4604      	mov	r4, r0
 800b730:	4620      	mov	r0, r4
 800b732:	f006 f9b3 	bl	8011a9c <_ZN11Screen1ViewC1Ev>
 800b736:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2100      	movs	r1, #0
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fc90 	bl	800c064 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b744:	4603      	mov	r3, r0
 800b746:	4619      	mov	r1, r3
 800b748:	2010      	movs	r0, #16
 800b74a:	f7fe ff07 	bl	800a55c <_ZnwjPv>
 800b74e:	4604      	mov	r4, r0
 800b750:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b752:	4620      	mov	r0, r4
 800b754:	f006 f94a 	bl	80119ec <_ZN16Screen1PresenterC1ER11Screen1View>
 800b758:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b75e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b764:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b76a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d002      	beq.n	800b778 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800b772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b774:	3304      	adds	r3, #4
 800b776:	e000      	b.n	800b77a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b778:	2300      	movs	r3, #0
 800b77a:	4619      	mov	r1, r3
 800b77c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b77e:	f7ff fb0d 	bl	800ad9c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b784:	3304      	adds	r3, #4
 800b786:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fb9c 	bl	800aec6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fc79 	bl	800c08a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800b798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79a:	61fb      	str	r3, [r7, #28]
 800b79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	330c      	adds	r3, #12
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69f8      	ldr	r0, [r7, #28]
 800b7ae:	4798      	blx	r3
    newPresenter->activate();
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69b8      	ldr	r0, [r7, #24]
 800b7b8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b7ba:	6979      	ldr	r1, [r7, #20]
 800b7bc:	69f8      	ldr	r0, [r7, #28]
 800b7be:	f011 fa63 	bl	801cc88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3310      	adds	r3, #16
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6978      	ldr	r0, [r7, #20]
 800b7cc:	4798      	blx	r3
    newTransition->invalidate();
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3314      	adds	r3, #20
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6978      	ldr	r0, [r7, #20]
 800b7d8:	4798      	blx	r3
}
 800b7da:	bf00      	nop
    return newPresenter;
 800b7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	373c      	adds	r7, #60	@ 0x3c
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd90      	pop	{r4, r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0802ed6c 	.word	0x0802ed6c
 800b7ec:	0802f06c 	.word	0x0802f06c
 800b7f0:	0802eee0 	.word	0x0802eee0
 800b7f4:	0802ef24 	.word	0x0802ef24
 800b7f8:	0802efc8 	.word	0x0802efc8

0800b7fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b08f      	sub	sp, #60	@ 0x3c
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689a      	ldr	r2, [r3, #8]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3320      	adds	r3, #32
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4610      	mov	r0, r2
 800b81a:	4798      	blx	r3
 800b81c:	4603      	mov	r3, r0
 800b81e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b822:	d205      	bcs.n	800b830 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b824:	4b7d      	ldr	r3, [pc, #500]	@ (800ba1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800b826:	4a7e      	ldr	r2, [pc, #504]	@ (800ba20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b828:	21a3      	movs	r1, #163	@ 0xa3
 800b82a:	487e      	ldr	r0, [pc, #504]	@ (800ba24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b82c:	f022 f8f2 	bl	802da14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3320      	adds	r3, #32
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4610      	mov	r0, r2
 800b840:	4798      	blx	r3
 800b842:	4603      	mov	r3, r0
 800b844:	2b0f      	cmp	r3, #15
 800b846:	d805      	bhi.n	800b854 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b848:	4b77      	ldr	r3, [pc, #476]	@ (800ba28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b84a:	4a75      	ldr	r2, [pc, #468]	@ (800ba20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b84c:	21a4      	movs	r1, #164	@ 0xa4
 800b84e:	4875      	ldr	r0, [pc, #468]	@ (800ba24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b850:	f022 f8e0 	bl	802da14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68da      	ldr	r2, [r3, #12]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3320      	adds	r3, #32
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4610      	mov	r0, r2
 800b864:	4798      	blx	r3
 800b866:	4603      	mov	r3, r0
 800b868:	2b3f      	cmp	r3, #63	@ 0x3f
 800b86a:	d805      	bhi.n	800b878 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800b86c:	4b6f      	ldr	r3, [pc, #444]	@ (800ba2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b86e:	4a6c      	ldr	r2, [pc, #432]	@ (800ba20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b870:	21a5      	movs	r1, #165	@ 0xa5
 800b872:	486c      	ldr	r0, [pc, #432]	@ (800ba24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b874:	f022 f8ce 	bl	802da14 <__assert_func>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b884:	f00f fbfc 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800b888:	4603      	mov	r3, r0
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff f91f 	bl	800aace <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d008      	beq.n	800b8aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	330c      	adds	r3, #12
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4798      	blx	r3
    if (*currentTrans)
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d007      	beq.n	800b8c2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4610      	mov	r0, r2
 800b8c0:	4798      	blx	r3
    if (*currentScreen)
 800b8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d008      	beq.n	800b8dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800b8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3314      	adds	r3, #20
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
    if (*currentPresenter)
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d008      	beq.n	800b8f6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	4798      	blx	r3
    if (*currentScreen)
 800b8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d007      	beq.n	800b90e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800b8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4610      	mov	r0, r2
 800b90c:	4798      	blx	r3
    if (*currentPresenter)
 800b90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d008      	beq.n	800b928 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3308      	adds	r3, #8
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4610      	mov	r0, r2
 800b926:	4798      	blx	r3
}
 800b928:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	2100      	movs	r1, #0
 800b930:	4618      	mov	r0, r3
 800b932:	f000 fbb8 	bl	800c0a6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800b936:	4603      	mov	r3, r0
 800b938:	4619      	mov	r1, r3
 800b93a:	2040      	movs	r0, #64	@ 0x40
 800b93c:	f7fe fe0e 	bl	800a55c <_ZnwjPv>
 800b940:	4604      	mov	r4, r0
 800b942:	2114      	movs	r1, #20
 800b944:	4620      	mov	r0, r4
 800b946:	f000 fbe3 	bl	800c110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800b94a:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	2100      	movs	r1, #0
 800b952:	4618      	mov	r0, r3
 800b954:	f000 fb73 	bl	800c03e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b958:	4603      	mov	r3, r0
 800b95a:	4619      	mov	r1, r3
 800b95c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b960:	f7fe fdfc 	bl	800a55c <_ZnwjPv>
 800b964:	4604      	mov	r4, r0
 800b966:	4620      	mov	r0, r4
 800b968:	f006 f898 	bl	8011a9c <_ZN11Screen1ViewC1Ev>
 800b96c:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f000 fb75 	bl	800c064 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4619      	mov	r1, r3
 800b97e:	2010      	movs	r0, #16
 800b980:	f7fe fdec 	bl	800a55c <_ZnwjPv>
 800b984:	4604      	mov	r4, r0
 800b986:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b988:	4620      	mov	r0, r4
 800b98a:	f006 f82f 	bl	80119ec <_ZN16Screen1PresenterC1ER11Screen1View>
 800b98e:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b994:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b99a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800b9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	e000      	b.n	800b9b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b9b4:	f7ff f9f2 	bl	800ad9c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff fa81 	bl	800aec6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 fb5e 	bl	800c08a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d0:	61fb      	str	r3, [r7, #28]
 800b9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d4:	61bb      	str	r3, [r7, #24]
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	330c      	adds	r3, #12
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69f8      	ldr	r0, [r7, #28]
 800b9e4:	4798      	blx	r3
    newPresenter->activate();
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	69b8      	ldr	r0, [r7, #24]
 800b9ee:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b9f0:	6979      	ldr	r1, [r7, #20]
 800b9f2:	69f8      	ldr	r0, [r7, #28]
 800b9f4:	f011 f948 	bl	801cc88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3310      	adds	r3, #16
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6978      	ldr	r0, [r7, #20]
 800ba02:	4798      	blx	r3
    newTransition->invalidate();
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3314      	adds	r3, #20
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6978      	ldr	r0, [r7, #20]
 800ba0e:	4798      	blx	r3
}
 800ba10:	bf00      	nop
    return newPresenter;
 800ba12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	373c      	adds	r7, #60	@ 0x3c
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd90      	pop	{r4, r7, pc}
 800ba1c:	0802ed6c 	.word	0x0802ed6c
 800ba20:	0802f140 	.word	0x0802f140
 800ba24:	0802eee0 	.word	0x0802eee0
 800ba28:	0802ef24 	.word	0x0802ef24
 800ba2c:	0802efc8 	.word	0x0802efc8

0800ba30 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	b08f      	sub	sp, #60	@ 0x3c
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689a      	ldr	r2, [r3, #8]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3320      	adds	r3, #32
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3
 800ba50:	4603      	mov	r3, r0
 800ba52:	f643 02a7 	movw	r2, #14503	@ 0x38a7
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d805      	bhi.n	800ba66 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ba5a:	4b7e      	ldr	r3, [pc, #504]	@ (800bc54 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ba5c:	4a7e      	ldr	r2, [pc, #504]	@ (800bc58 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ba5e:	21a3      	movs	r1, #163	@ 0xa3
 800ba60:	487e      	ldr	r0, [pc, #504]	@ (800bc5c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ba62:	f021 ffd7 	bl	802da14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3320      	adds	r3, #32
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4610      	mov	r0, r2
 800ba76:	4798      	blx	r3
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b0f      	cmp	r3, #15
 800ba7c:	d805      	bhi.n	800ba8a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800ba7e:	4b78      	ldr	r3, [pc, #480]	@ (800bc60 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ba80:	4a75      	ldr	r2, [pc, #468]	@ (800bc58 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ba82:	21a4      	movs	r1, #164	@ 0xa4
 800ba84:	4875      	ldr	r0, [pc, #468]	@ (800bc5c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ba86:	f021 ffc5 	bl	802da14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3320      	adds	r3, #32
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4610      	mov	r0, r2
 800ba9a:	4798      	blx	r3
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b3f      	cmp	r3, #63	@ 0x3f
 800baa0:	d805      	bhi.n	800baae <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800baa2:	4b70      	ldr	r3, [pc, #448]	@ (800bc64 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800baa4:	4a6c      	ldr	r2, [pc, #432]	@ (800bc58 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800baa6:	21a5      	movs	r1, #165	@ 0xa5
 800baa8:	486c      	ldr	r0, [pc, #432]	@ (800bc5c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800baaa:	f021 ffb3 	bl	802da14 <__assert_func>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800baba:	f00f fae1 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800babe:	4603      	mov	r3, r0
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff f804 	bl	800aace <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d008      	beq.n	800bae0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	330c      	adds	r3, #12
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4610      	mov	r0, r2
 800bade:	4798      	blx	r3
    if (*currentTrans)
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4610      	mov	r0, r2
 800baf6:	4798      	blx	r3
    if (*currentScreen)
 800baf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d008      	beq.n	800bb12 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800bb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3314      	adds	r3, #20
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4610      	mov	r0, r2
 800bb10:	4798      	blx	r3
    if (*currentPresenter)
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d008      	beq.n	800bb2c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3304      	adds	r3, #4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
    if (*currentScreen)
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d007      	beq.n	800bb44 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4610      	mov	r0, r2
 800bb42:	4798      	blx	r3
    if (*currentPresenter)
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d008      	beq.n	800bb5e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3308      	adds	r3, #8
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4798      	blx	r3
}
 800bb5e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	2100      	movs	r1, #0
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fa9d 	bl	800c0a6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	4619      	mov	r1, r3
 800bb70:	2040      	movs	r0, #64	@ 0x40
 800bb72:	f7fe fcf3 	bl	800a55c <_ZnwjPv>
 800bb76:	4604      	mov	r4, r0
 800bb78:	2114      	movs	r1, #20
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f000 fac8 	bl	800c110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800bb80:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	2100      	movs	r1, #0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fb11 	bl	800c1b0 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	4619      	mov	r1, r3
 800bb92:	f643 00a8 	movw	r0, #14504	@ 0x38a8
 800bb96:	f7fe fce1 	bl	800a55c <_ZnwjPv>
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f006 f833 	bl	8011c08 <_ZN11Screen3ViewC1Ev>
 800bba2:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	2100      	movs	r1, #0
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fb13 	bl	800c1d6 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	2010      	movs	r0, #16
 800bbb6:	f7fe fcd1 	bl	800a55c <_ZnwjPv>
 800bbba:	4604      	mov	r4, r0
 800bbbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f005 ffca 	bl	8011b58 <_ZN16Screen3PresenterC1ER11Screen3View>
 800bbc4:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbca:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbd0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800bbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800bbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	e000      	b.n	800bbe6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bbea:	f7ff f8d7 	bl	800ad9c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800bbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff f966 	bl	800aec6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fafc 	bl	800c1fc <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 800bc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0a:	61bb      	str	r3, [r7, #24]
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	330c      	adds	r3, #12
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	69f8      	ldr	r0, [r7, #28]
 800bc1a:	4798      	blx	r3
    newPresenter->activate();
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	69b8      	ldr	r0, [r7, #24]
 800bc24:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800bc26:	6979      	ldr	r1, [r7, #20]
 800bc28:	69f8      	ldr	r0, [r7, #28]
 800bc2a:	f011 f82d 	bl	801cc88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3310      	adds	r3, #16
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6978      	ldr	r0, [r7, #20]
 800bc38:	4798      	blx	r3
    newTransition->invalidate();
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3314      	adds	r3, #20
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6978      	ldr	r0, [r7, #20]
 800bc44:	4798      	blx	r3
}
 800bc46:	bf00      	nop
    return newPresenter;
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	373c      	adds	r7, #60	@ 0x3c
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd90      	pop	{r4, r7, pc}
 800bc52:	bf00      	nop
 800bc54:	0802ed6c 	.word	0x0802ed6c
 800bc58:	0802f228 	.word	0x0802f228
 800bc5c:	0802eee0 	.word	0x0802eee0
 800bc60:	0802ef24 	.word	0x0802ef24
 800bc64:	0802efc8 	.word	0x0802efc8

0800bc68 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800bc68:	b590      	push	{r4, r7, lr}
 800bc6a:	b08f      	sub	sp, #60	@ 0x3c
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	689a      	ldr	r2, [r3, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3320      	adds	r3, #32
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f5b3 7f76 	cmp.w	r3, #984	@ 0x3d8
 800bc8e:	d205      	bcs.n	800bc9c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800bc90:	4b7d      	ldr	r3, [pc, #500]	@ (800be88 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800bc92:	4a7e      	ldr	r2, [pc, #504]	@ (800be8c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bc94:	21a3      	movs	r1, #163	@ 0xa3
 800bc96:	487e      	ldr	r0, [pc, #504]	@ (800be90 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bc98:	f021 febc 	bl	802da14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3320      	adds	r3, #32
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b0f      	cmp	r3, #15
 800bcb2:	d805      	bhi.n	800bcc0 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800bcb4:	4b77      	ldr	r3, [pc, #476]	@ (800be94 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800bcb6:	4a75      	ldr	r2, [pc, #468]	@ (800be8c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bcb8:	21a4      	movs	r1, #164	@ 0xa4
 800bcba:	4875      	ldr	r0, [pc, #468]	@ (800be90 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bcbc:	f021 feaa 	bl	802da14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68da      	ldr	r2, [r3, #12]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3320      	adds	r3, #32
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4610      	mov	r0, r2
 800bcd0:	4798      	blx	r3
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b37      	cmp	r3, #55	@ 0x37
 800bcd6:	d805      	bhi.n	800bce4 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800bcd8:	4b6f      	ldr	r3, [pc, #444]	@ (800be98 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800bcda:	4a6c      	ldr	r2, [pc, #432]	@ (800be8c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bcdc:	21a5      	movs	r1, #165	@ 0xa5
 800bcde:	486c      	ldr	r0, [pc, #432]	@ (800be90 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bce0:	f021 fe98 	bl	802da14 <__assert_func>
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800bcf0:	f00f f9c6 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fee9 	bl	800aace <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d008      	beq.n	800bd16 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	330c      	adds	r3, #12
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4610      	mov	r0, r2
 800bd14:	4798      	blx	r3
    if (*currentTrans)
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d007      	beq.n	800bd2e <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	4798      	blx	r3
    if (*currentScreen)
 800bd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d008      	beq.n	800bd48 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800bd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3314      	adds	r3, #20
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
    if (*currentPresenter)
 800bd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d008      	beq.n	800bd62 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800bd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4798      	blx	r3
    if (*currentScreen)
 800bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d007      	beq.n	800bd7a <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800bd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
    if (*currentPresenter)
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d008      	beq.n	800bd94 <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3308      	adds	r3, #8
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4610      	mov	r0, r2
 800bd92:	4798      	blx	r3
}
 800bd94:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fa3b 	bl	800c218 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>
 800bda2:	4603      	mov	r3, r0
 800bda4:	4619      	mov	r1, r3
 800bda6:	2038      	movs	r0, #56	@ 0x38
 800bda8:	f7fe fbd8 	bl	800a55c <_ZnwjPv>
 800bdac:	4604      	mov	r4, r0
 800bdae:	2114      	movs	r1, #20
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 fa45 	bl	800c240 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>
 800bdb6:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 fa80 	bl	800c2c4 <_ZN8touchgfx17AbstractPartition2atI11Screen4ViewEERT_t>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800bdcc:	f7fe fbc6 	bl	800a55c <_ZnwjPv>
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f005 ffce 	bl	8011d74 <_ZN11Screen4ViewC1Ev>
 800bdd8:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	2100      	movs	r1, #0
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fa82 	bl	800c2ea <_ZN8touchgfx17AbstractPartition2atI16Screen4PresenterEERT_t>
 800bde6:	4603      	mov	r3, r0
 800bde8:	4619      	mov	r1, r3
 800bdea:	2010      	movs	r0, #16
 800bdec:	f7fe fbb6 	bl	800a55c <_ZnwjPv>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f005 ff65 	bl	8011cc4 <_ZN16Screen4PresenterC1ER11Screen4View>
 800bdfa:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be00:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be06:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be0c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800be0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800be14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be16:	3304      	adds	r3, #4
 800be18:	e000      	b.n	800be1c <_ZN8touchgfx14makeTransitionI11Screen4View16Screen4PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800be1a:	2300      	movs	r3, #0
 800be1c:	4619      	mov	r1, r3
 800be1e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800be20:	f7fe ffbc 	bl	800ad9c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800be24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be26:	3304      	adds	r3, #4
 800be28:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff f84b 	bl	800aec6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800be30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fa6b 	bl	800c310 <_ZN8touchgfx4ViewI16Screen4PresenterE4bindERS1_>
 800be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3c:	61fb      	str	r3, [r7, #28]
 800be3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be40:	61bb      	str	r3, [r7, #24]
 800be42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be44:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	330c      	adds	r3, #12
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	69f8      	ldr	r0, [r7, #28]
 800be50:	4798      	blx	r3
    newPresenter->activate();
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	69b8      	ldr	r0, [r7, #24]
 800be5a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800be5c:	6979      	ldr	r1, [r7, #20]
 800be5e:	69f8      	ldr	r0, [r7, #28]
 800be60:	f010 ff12 	bl	801cc88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3310      	adds	r3, #16
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6978      	ldr	r0, [r7, #20]
 800be6e:	4798      	blx	r3
    newTransition->invalidate();
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3314      	adds	r3, #20
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6978      	ldr	r0, [r7, #20]
 800be7a:	4798      	blx	r3
}
 800be7c:	bf00      	nop
    return newPresenter;
 800be7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800be80:	4618      	mov	r0, r3
 800be82:	373c      	adds	r7, #60	@ 0x3c
 800be84:	46bd      	mov	sp, r7
 800be86:	bd90      	pop	{r4, r7, pc}
 800be88:	0802ed6c 	.word	0x0802ed6c
 800be8c:	0802f310 	.word	0x0802f310
 800be90:	0802eee0 	.word	0x0802eee0
 800be94:	0802ef24 	.word	0x0802ef24
 800be98:	0802efc8 	.word	0x0802efc8

0800be9c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3324      	adds	r3, #36	@ 0x24
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	887a      	ldrh	r2, [r7, #2]
 800beb2:	4611      	mov	r1, r2
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	4798      	blx	r3
 800beb8:	4603      	mov	r3, r0
    }
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff f808 	bl	800aee4 <_ZN8touchgfx6WidgetC1Ev>
 800bed4:	4a03      	ldr	r2, [pc, #12]	@ (800bee4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	080300f4 	.word	0x080300f4

0800bee8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	4a05      	ldr	r2, [pc, #20]	@ (800bf08 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7ff f805 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	080300f4 	.word	0x080300f4

0800bf0c <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ffe7 	bl	800bee8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800bf1a:	2128      	movs	r1, #40	@ 0x28
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f021 f818 	bl	802cf52 <_ZdlPvj>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fe1c 	bl	800ab78 <_ZN8touchgfx10TransitionC1Ev>
 800bf40:	4a18      	ldr	r2, [pc, #96]	@ (800bfa4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x78>)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	78fa      	ldrb	r2, [r7, #3]
 800bf4a:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	81da      	strh	r2, [r3, #14]
          solid()
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	2228      	movs	r2, #40	@ 0x28
 800bf5e:	2100      	movs	r1, #0
 800bf60:	4618      	mov	r0, r3
 800bf62:	f022 f863 	bl	802e02c <memset>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3310      	adds	r3, #16
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff ffaa 	bl	800bec4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800bf70:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	b21a      	sxth	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	819a      	strh	r2, [r3, #12]
            break;
 800bf7a:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f103 0010 	add.w	r0, r3, #16
 800bf82:	4b09      	ldr	r3, [pc, #36]	@ (800bfa8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	b21a      	sxth	r2, r3
 800bf88:	4b08      	ldr	r3, [pc, #32]	@ (800bfac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	b21b      	sxth	r3, r3
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	4613      	mov	r3, r2
 800bf92:	2200      	movs	r2, #0
 800bf94:	2100      	movs	r1, #0
 800bf96:	f7fe fb9f 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	0802ffa4 	.word	0x0802ffa4
 800bfa8:	200122b8 	.word	0x200122b8
 800bfac:	200122ba 	.word	0x200122ba

0800bfb0 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3324      	adds	r3, #36	@ 0x24
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	887a      	ldrh	r2, [r7, #2]
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	4798      	blx	r3
 800bfcc:	4603      	mov	r3, r0
    }
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3324      	adds	r3, #36	@ 0x24
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	887a      	ldrh	r2, [r7, #2]
 800bfec:	4611      	mov	r1, r2
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	4798      	blx	r3
 800bff2:	4603      	mov	r3, r0
    }
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
    T& at(const uint16_t index)
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3324      	adds	r3, #36	@ 0x24
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	887a      	ldrh	r2, [r7, #2]
 800c02e:	4611      	mov	r1, r2
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
 800c034:	4603      	mov	r3, r0
    }
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	460b      	mov	r3, r1
 800c048:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3324      	adds	r3, #36	@ 0x24
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	887a      	ldrh	r2, [r7, #2]
 800c054:	4611      	mov	r1, r2
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
 800c05a:	4603      	mov	r3, r0
    }
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	460b      	mov	r3, r1
 800c06e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3324      	adds	r3, #36	@ 0x24
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	887a      	ldrh	r2, [r7, #2]
 800c07a:	4611      	mov	r1, r2
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	4798      	blx	r3
 800c080:	4603      	mov	r3, r0
    }
 800c082:	4618      	mov	r0, r3
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3324      	adds	r3, #36	@ 0x24
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	887a      	ldrh	r2, [r7, #2]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	4798      	blx	r3
 800c0c2:	4603      	mov	r3, r0
    }
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	4a05      	ldr	r2, [pc, #20]	@ (800c0ec <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe ff13 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	08031fa4 	.word	0x08031fa4

0800c0f0 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff ffe7 	bl	800c0cc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800c0fe:	212c      	movs	r1, #44	@ 0x2c
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f020 ff26 	bl	802cf52 <_ZdlPvj>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4618      	mov	r0, r3
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af02      	add	r7, sp, #8
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          snapshot(),
          animationSteps(transitionSteps),
          animationCounter(0),
          relativeValue(0)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fd2a 	bl	800ab78 <_ZN8touchgfx10TransitionC1Ev>
 800c124:	4a1e      	ldr	r2, [pc, #120]	@ (800c1a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x90>)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	601a      	str	r2, [r3, #0]
          snapshot(),
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	330c      	adds	r3, #12
 800c12e:	4618      	mov	r0, r3
 800c130:	f00b fefc 	bl	8017f2c <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	78fa      	ldrb	r2, [r7, #3]
 800c138:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          animationCounter(0),
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
          relativeValue(0)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	879a      	strh	r2, [r3, #60]	@ 0x3c
    {
        if (!HAL::USE_ANIMATION_STORAGE)
 800c14a:	4b16      	ldr	r3, [pc, #88]	@ (800c1a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x94>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	f083 0301 	eor.w	r3, r3, #1
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x52>
        {
            // No animation storage, don't slide
            done = true;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	721a      	strb	r2, [r3, #8]
            return;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	e01a      	b.n	800c198 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x88>
        }

        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f103 000c 	add.w	r0, r3, #12
 800c168:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x98>)
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b21a      	sxth	r2, r3
 800c16e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x9c>)
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	b21b      	sxth	r3, r3
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4613      	mov	r3, r2
 800c178:	2200      	movs	r2, #0
 800c17a:	2100      	movs	r1, #0
 800c17c:	f7fe faac 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	330c      	adds	r3, #12
 800c184:	4618      	mov	r0, r3
 800c186:	f00b fe54 	bl	8017e32 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
            break;
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800c18a:	4b07      	ldr	r3, [pc, #28]	@ (800c1a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x98>)
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	b21a      	sxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	875a      	strh	r2, [r3, #58]	@ 0x3a
            break;
 800c194:	bf00      	nop
            break;
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
            break;
        }
    }
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	0802ff80 	.word	0x0802ff80
 800c1a4:	200122c3 	.word	0x200122c3
 800c1a8:	200122b8 	.word	0x200122b8
 800c1ac:	200122ba 	.word	0x200122ba

0800c1b0 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3324      	adds	r3, #36	@ 0x24
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	887a      	ldrh	r2, [r7, #2]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	4798      	blx	r3
 800c1cc:	4603      	mov	r3, r0
    }
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b082      	sub	sp, #8
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3324      	adds	r3, #36	@ 0x24
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	887a      	ldrh	r2, [r7, #2]
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	4798      	blx	r3
 800c1f2:	4603      	mov	r3, r0
    }
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3324      	adds	r3, #36	@ 0x24
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	887a      	ldrh	r2, [r7, #2]
 800c22e:	4611      	mov	r1, r2
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	4798      	blx	r3
 800c234:	4603      	mov	r3, r0
    }
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af02      	add	r7, sp, #8
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
          solid()
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fc92 	bl	800ab78 <_ZN8touchgfx10TransitionC1Ev>
 800c254:	4a18      	ldr	r2, [pc, #96]	@ (800c2b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x78>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	78fa      	ldrb	r2, [r7, #3]
 800c25e:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	81da      	strh	r2, [r3, #14]
          solid()
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3310      	adds	r3, #16
 800c270:	2228      	movs	r2, #40	@ 0x28
 800c272:	2100      	movs	r1, #0
 800c274:	4618      	mov	r0, r3
 800c276:	f021 fed9 	bl	802e02c <memset>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3310      	adds	r3, #16
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fe20 	bl	800bec4 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_WIDTH;
 800c284:	4b0d      	ldr	r3, [pc, #52]	@ (800c2bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	b21a      	sxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	819a      	strh	r2, [r3, #12]
            break;
 800c28e:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f103 0010 	add.w	r0, r3, #16
 800c296:	4b09      	ldr	r3, [pc, #36]	@ (800c2bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	b21a      	sxth	r2, r3
 800c29c:	4b08      	ldr	r3, [pc, #32]	@ (800c2c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x80>)
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	b21b      	sxth	r3, r3
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	f7fe fa15 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	0802ffc8 	.word	0x0802ffc8
 800c2bc:	200122b8 	.word	0x200122b8
 800c2c0:	200122ba 	.word	0x200122ba

0800c2c4 <_ZN8touchgfx17AbstractPartition2atI11Screen4ViewEERT_t>:
    T& at(const uint16_t index)
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3324      	adds	r3, #36	@ 0x24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	887a      	ldrh	r2, [r7, #2]
 800c2da:	4611      	mov	r1, r2
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	4798      	blx	r3
 800c2e0:	4603      	mov	r3, r0
    }
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <_ZN8touchgfx17AbstractPartition2atI16Screen4PresenterEERT_t>:
    T& at(const uint16_t index)
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3324      	adds	r3, #36	@ 0x24
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	887a      	ldrh	r2, [r7, #2]
 800c300:	4611      	mov	r1, r2
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
 800c306:	4603      	mov	r3, r0
    }
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <_ZN8touchgfx4ViewI16Screen4PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	4a08      	ldr	r2, [pc, #32]	@ (800c358 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	601a      	str	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	330c      	adds	r3, #12
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff fec4 	bl	800c0cc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe fc2c 	bl	800aba4 <_ZN8touchgfx10TransitionD1Ev>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4618      	mov	r0, r3
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	0802ff80 	.word	0x0802ff80

0800c35c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff ffe1 	bl	800c32c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800c36a:	2140      	movs	r1, #64	@ 0x40
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f020 fdf0 	bl	802cf52 <_ZdlPvj>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
class WipeTransition : public Transition
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	4a08      	ldr	r2, [pc, #32]	@ (800c3a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3310      	adds	r3, #16
 800c38e:	4618      	mov	r0, r3
 800c390:	f7ff fdaa 	bl	800bee8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fc04 	bl	800aba4 <_ZN8touchgfx10TransitionD1Ev>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0802ffa4 	.word	0x0802ffa4

0800c3ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff ffe1 	bl	800c37c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>
 800c3ba:	2138      	movs	r1, #56	@ 0x38
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f020 fdc8 	bl	802cf52 <_ZdlPvj>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>:
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	4a08      	ldr	r2, [pc, #32]	@ (800c3f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	601a      	str	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	3310      	adds	r3, #16
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fd82 	bl	800bee8 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe fbdc 	bl	800aba4 <_ZN8touchgfx10TransitionD1Ev>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	0802ffc8 	.word	0x0802ffc8

0800c3fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED0Ev>:
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff ffe1 	bl	800c3cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>
 800c40a:	2138      	movs	r1, #56	@ 0x38
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f020 fda0 	bl	802cf52 <_ZdlPvj>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_ZN8touchgfx12NoTransitionD1Ev>:
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	4a05      	ldr	r2, [pc, #20]	@ (800c43c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fbb9 	bl	800aba4 <_ZN8touchgfx10TransitionD1Ev>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	0802ffec 	.word	0x0802ffec

0800c440 <_ZN8touchgfx12NoTransitionD0Ev>:
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff ffe7 	bl	800c41c <_ZN8touchgfx12NoTransitionD1Ev>
 800c44e:	210c      	movs	r1, #12
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f020 fd7e 	bl	802cf52 <_ZdlPvj>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container and a SnapshotWidget with a snapshot of the previous Screen. The direction
     * of the transition determines the direction the contents of the container and the
     * SnapshotWidget moves.
     */
    virtual void handleTickEvent()
 800c460:	b5b0      	push	{r4, r5, r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe fbba 	bl	800abe4 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c476:	3301      	adds	r3, #1
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        if (animationCounter > animationSteps)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d907      	bls.n	800c4a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x40>
        {
            // Final step: stop the animation
            done = true;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            return;
 800c49e:	e05f      	b.n	800c560 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x100>
        }

        // Calculate value in [0;targetValue]
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	f010 fbed 	bl	801cc94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	81fb      	strh	r3, [r7, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800c4be:	89fb      	ldrh	r3, [r7, #14]
 800c4c0:	f003 0301 	and.w	r3, r3, #1
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00b      	beq.n	800c4e2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x82>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c4ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	dd01      	ble.n	800c4d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x76>
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	e001      	b.n	800c4da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7a>
 800c4d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c4da:	89fb      	ldrh	r3, [r7, #14]
 800c4dc:	4413      	add	r3, r2
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	81fb      	strh	r3, [r7, #14]
        // Move snapshot
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            relativeValue = calculatedValue - snapshot.getX();
 800c4e2:	89fc      	ldrh	r4, [r7, #14]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	330c      	adds	r3, #12
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe f916 	bl	800a71a <_ZNK8touchgfx8Drawable4getXEv>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	1ae3      	subs	r3, r4, r3
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	b21a      	sxth	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
            break;
 800c4fc:	bf00      	nop
            relativeValue = calculatedValue - snapshot.getY();
            break;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	331c      	adds	r3, #28
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4610      	mov	r0, r2
 800c50e:	4798      	blx	r3
 800c510:	60b8      	str	r0, [r7, #8]
        while (d)
 800c512:	e018      	b.n	800c546 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xe6>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800c514:	68bd      	ldr	r5, [r7, #8]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3330      	adds	r3, #48	@ 0x30
 800c51c:	681c      	ldr	r4, [r3, #0]
 800c51e:	68b8      	ldr	r0, [r7, #8]
 800c520:	f7fe f8fb 	bl	800a71a <_ZNK8touchgfx8Drawable4getXEv>
 800c524:	4603      	mov	r3, r0
 800c526:	b29a      	uxth	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c52e:	b29b      	uxth	r3, r3
 800c530:	4413      	add	r3, r2
 800c532:	b29b      	uxth	r3, r3
 800c534:	b21b      	sxth	r3, r3
 800c536:	4619      	mov	r1, r3
 800c538:	4628      	mov	r0, r5
 800c53a:	47a0      	blx	r4
                break;
 800c53c:	bf00      	nop
            case NORTH:
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }
            d = d->getNextSibling();
 800c53e:	68b8      	ldr	r0, [r7, #8]
 800c540:	f7fe f8b3 	bl	800a6aa <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c544:	60b8      	str	r0, [r7, #8]
        while (d)
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e3      	bne.n	800c514 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb4>
        }

        // Entire screen has changed, redraw
        screenContainer->invalidate();
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	461a      	mov	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3314      	adds	r3, #20
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4610      	mov	r0, r2
 800c55e:	4798      	blx	r3
    }
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c568 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800c570:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00e      	beq.n	800c596 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00a      	beq.n	800c596 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
        {
            screenContainer->remove(snapshot);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6858      	ldr	r0, [r3, #4]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3364      	adds	r3, #100	@ 0x64
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	320c      	adds	r2, #12
 800c592:	4611      	mov	r1, r2
 800c594:	4798      	blx	r3
        }
    }
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	200122c3 	.word	0x200122c3

0800c5a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 800c5a4:	b5b0      	push	{r4, r5, r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fb2c 	bl	800ac0c <_ZN8touchgfx10Transition4initEv>

        if (done)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7a1b      	ldrb	r3, [r3, #8]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d132      	bne.n	800c622 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x7e>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	331c      	adds	r3, #28
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	4798      	blx	r3
 800c5ce:	60f8      	str	r0, [r7, #12]
        while (d)
 800c5d0:	e018      	b.n	800c604 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x60>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800c5d2:	68fd      	ldr	r5, [r7, #12]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3330      	adds	r3, #48	@ 0x30
 800c5da:	681c      	ldr	r4, [r3, #0]
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7fe f89c 	bl	800a71a <_ZNK8touchgfx8Drawable4getXEv>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	b21b      	sxth	r3, r3
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	47a0      	blx	r4
                break;
 800c5fa:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7fe f854 	bl	800a6aa <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c602:	60f8      	str	r0, [r7, #12]
        while (d)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e3      	bne.n	800c5d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x2e>
        }

        screenContainer->add(snapshot);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6858      	ldr	r0, [r3, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3360      	adds	r3, #96	@ 0x60
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	320c      	adds	r2, #12
 800c61c:	4611      	mov	r1, r2
 800c61e:	4798      	blx	r3
 800c620:	e000      	b.n	800c624 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x80>
            return;
 800c622:	bf00      	nop
    }
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c62c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08e      	sub	sp, #56	@ 0x38
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fad4 	bl	800abe4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	7a9b      	ldrb	r3, [r3, #10]
 800c640:	3301      	adds	r3, #1
 800c642:	b2da      	uxtb	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter > animationSteps)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7a9a      	ldrb	r2, [r3, #10]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7a5b      	ldrb	r3, [r3, #9]
 800c650:	429a      	cmp	r2, r3
 800c652:	d906      	bls.n	800c662 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	729a      	strb	r2, [r3, #10]
            return;
 800c660:	e077      	b.n	800c752 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
        }

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	7a9b      	ldrb	r3, [r3, #10]
 800c666:	4618      	mov	r0, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	7a5b      	ldrb	r3, [r3, #9]
 800c672:	2100      	movs	r1, #0
 800c674:	f010 fb0e 	bl	801cc94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c678:	4603      	mov	r3, r0
 800c67a:	461a      	mov	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c686:	b29b      	uxth	r3, r3
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d011      	beq.n	800c6b6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8a>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c698:	b29b      	uxth	r3, r3
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	dd01      	ble.n	800c6a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7c>
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	e001      	b.n	800c6ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
 800c6a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6ac:	4413      	add	r3, r2
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	b21a      	sxth	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	81da      	strh	r2, [r3, #14]
        switch (templateDirection)
        {
        case EAST:
            {
                // Cover must have width of remaining part
                const uint16_t prevSolidWidth = solid.getWidth();
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3310      	adds	r3, #16
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe f83a 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f103 0010 	add.w	r0, r3, #16
 800c6ca:	4b23      	ldr	r3, [pc, #140]	@ (800c758 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x12c>)
 800c6cc:	881a      	ldrh	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	b21b      	sxth	r3, r3
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f7fe f872 	bl	800a7c6 <_ZN8touchgfx8Drawable8setWidthEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3310      	adds	r3, #16
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe f824 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3310      	adds	r3, #16
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe f81a 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c700:	4603      	mov	r3, r0
 800c702:	4619      	mov	r1, r3
 800c704:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800c708:	4b14      	ldr	r3, [pc, #80]	@ (800c75c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x130>)
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	b21b      	sxth	r3, r3
 800c70e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	4613      	mov	r3, r2
 800c716:	2200      	movs	r2, #0
 800c718:	f7fd ff43 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	4618      	mov	r0, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3310      	adds	r3, #16
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c730:	4611      	mov	r1, r2
 800c732:	4798      	blx	r3
                break;
 800c734:	bf00      	nop
        }

        // The WipeTransition only draws to parts of the non-TFT
        // framebuffer. To avoid glitches in Double buffering mode
        // both framebuffers must be made identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	7a9b      	ldrb	r3, [r3, #10]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d109      	bne.n	800c752 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
 800c73e:	4b08      	ldr	r3, [pc, #32]	@ (800c760 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x134>)
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d005      	beq.n	800c752 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x126>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800c746:	f00e fc9b 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4618      	mov	r0, r3
 800c74e:	f00e fc9d 	bl	801b08c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }
    }
 800c752:	3730      	adds	r7, #48	@ 0x30
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	200122b8 	.word	0x200122b8
 800c75c:	200122ba 	.word	0x200122ba
 800c760:	200122c2 	.word	0x200122c2

0800c764 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6858      	ldr	r0, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3364      	adds	r3, #100	@ 0x64
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	3210      	adds	r2, #16
 800c77e:	4611      	mov	r1, r2
 800c780:	4798      	blx	r3
    }
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe fa39 	bl	800ac0c <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6858      	ldr	r0, [r3, #4]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3360      	adds	r3, #96	@ 0x60
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	3210      	adds	r2, #16
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4798      	blx	r3
    }
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    {
    }
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08e      	sub	sp, #56	@ 0x38
 800c7d0:	af02      	add	r7, sp, #8
 800c7d2:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7fe fa04 	bl	800abe4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	7a9b      	ldrb	r3, [r3, #10]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7a9a      	ldrb	r2, [r3, #10]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7a5b      	ldrb	r3, [r3, #9]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d906      	bls.n	800c802 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x36>
            done = true;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	729a      	strb	r2, [r3, #10]
            return;
 800c800:	e079      	b.n	800c8f6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12a>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7a9b      	ldrb	r3, [r3, #10]
 800c806:	4618      	mov	r0, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	7a5b      	ldrb	r3, [r3, #9]
 800c812:	2100      	movs	r1, #0
 800c814:	f010 fa3e 	bl	801cc94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c818:	4603      	mov	r3, r0
 800c81a:	461a      	mov	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	81da      	strh	r2, [r3, #14]
        if ((calculatedValue % 2) != 0)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c826:	b29b      	uxth	r3, r3
 800c828:	f003 0301 	and.w	r3, r3, #1
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d011      	beq.n	800c856 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800c840:	2a00      	cmp	r2, #0
 800c842:	dd01      	ble.n	800c848 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7c>
 800c844:	2201      	movs	r2, #1
 800c846:	e001      	b.n	800c84c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
 800c848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c84c:	4413      	add	r3, r2
 800c84e:	b29b      	uxth	r3, r3
 800c850:	b21a      	sxth	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	81da      	strh	r2, [r3, #14]
                const uint16_t prevSolidPos = solid.getX();
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	3310      	adds	r3, #16
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fd ff5d 	bl	800a71a <_ZNK8touchgfx8Drawable4getXEv>
 800c860:	4603      	mov	r3, r0
 800c862:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f103 0010 	add.w	r0, r3, #16
 800c86a:	4b24      	ldr	r3, [pc, #144]	@ (800c8fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x130>)
 800c86c:	881a      	ldrh	r2, [r3, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c874:	b29b      	uxth	r3, r3
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	b29b      	uxth	r3, r3
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	4619      	mov	r1, r3
 800c87e:	f7fd ffa2 	bl	800a7c6 <_ZN8touchgfx8Drawable8setWidthEs>
                solid.setX(calculatedValue);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f103 0210 	add.w	r2, r3, #16
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c88e:	4619      	mov	r1, r3
 800c890:	4610      	mov	r0, r2
 800c892:	f7fd ff5c 	bl	800a74e <_ZN8touchgfx8Drawable4setXEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                Rect r(prevSolidPos, 0, delta, HAL::DISPLAY_HEIGHT);
 800c8a4:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 800c8a8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800c8ac:	4b14      	ldr	r3, [pc, #80]	@ (800c900 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x134>)
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	b21b      	sxth	r3, r3
 800c8b2:	f107 001c 	add.w	r0, r7, #28
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f7fd fe71 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3310      	adds	r3, #16
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f107 021c 	add.w	r2, r7, #28
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	4798      	blx	r3
                break;
 800c8d8:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	7a9b      	ldrb	r3, [r3, #10]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d109      	bne.n	800c8f6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12a>
 800c8e2:	4b08      	ldr	r3, [pc, #32]	@ (800c904 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x138>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x12a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800c8ea:	f00e fbc9 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f00e fbcb 	bl	801b08c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
    }
 800c8f6:	3730      	adds	r7, #48	@ 0x30
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	200122b8 	.word	0x200122b8
 800c900:	200122ba 	.word	0x200122ba
 800c904:	200122c2 	.word	0x200122c2

0800c908 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6858      	ldr	r0, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3364      	adds	r3, #100	@ 0x64
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	3210      	adds	r2, #16
 800c922:	4611      	mov	r1, r2
 800c924:	4798      	blx	r3
    }
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
        Transition::init();
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4618      	mov	r0, r3
 800c93a:	f7fe f967 	bl	800ac0c <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6858      	ldr	r0, [r3, #4]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3360      	adds	r3, #96	@ 0x60
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	3210      	adds	r2, #16
 800c950:	4611      	mov	r1, r2
 800c952:	4798      	blx	r3
    }
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE10invalidateEv>:
    virtual void invalidate()
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
    }
 800c964:	bf00      	nop
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	68d2      	ldr	r2, [r2, #12]
 800c980:	1052      	asrs	r2, r2, #1
 800c982:	1899      	adds	r1, r3, r2
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d102      	bne.n	800c996 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	e00a      	b.n	800c9ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	68d2      	ldr	r2, [r2, #12]
 800c99e:	1052      	asrs	r2, r2, #1
 800c9a0:	4413      	add	r3, r2
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	6892      	ldr	r2, [r2, #8]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4608      	mov	r0, r1
 800c9ae:	4798      	blx	r3
    }
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d010      	beq.n	800c9ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d107      	bne.n	800c9e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e000      	b.n	800c9e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d001      	beq.n	800c9ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800c9ea:	2300      	movs	r3, #0
    }
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
        : color(col)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	601a      	str	r2, [r3, #0]
    }
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	887a      	ldrh	r2, [r7, #2]
 800ca26:	801a      	strh	r2, [r3, #0]
    {
    }
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	460b      	mov	r3, r1
 800ca40:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	78fa      	ldrb	r2, [r7, #3]
 800ca46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800ca4a:	bf00      	nop
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	4a05      	ldr	r2, [pc, #20]	@ (800ca78 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fd fdeb 	bl	800a644 <_ZN8touchgfx8DrawableD1Ev>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	08031458 	.word	0x08031458

0800ca7c <_ZN8touchgfx9ContainerD0Ev>:
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff ffe7 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800ca8a:	212c      	movs	r1, #44	@ 0x2c
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f020 fa60 	bl	802cf52 <_ZdlPvj>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4618      	mov	r0, r3
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
    {
 800caa4:	4a06      	ldr	r2, [pc, #24]	@ (800cac0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	601a      	str	r2, [r3, #0]
    }
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3304      	adds	r3, #4
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff ffd2 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4618      	mov	r0, r3
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	08032444 	.word	0x08032444

0800cac4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    }
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff ffe5 	bl	800ca9c <_ZN8touchgfx6ScreenD1Ev>
 800cad2:	213c      	movs	r1, #60	@ 0x3c
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f020 fa3c 	bl	802cf52 <_ZdlPvj>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
    {
    }
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
    {
    }
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
    {
    }
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
    {
    }
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f007 febb 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
	...

0800cb6c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4618      	mov	r0, r3
 800cb78:	2326      	movs	r3, #38	@ 0x26
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	f021 fa55 	bl	802e02c <memset>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fe f9ad 	bl	800aee4 <_ZN8touchgfx6WidgetC1Ev>
 800cb8a:	4a09      	ldr	r2, [pc, #36]	@ (800cbb0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	601a      	str	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	22ff      	movs	r2, #255	@ 0xff
 800cb94:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3328      	adds	r3, #40	@ 0x28
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7ff ff2a 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	080320a4 	.word	0x080320a4

0800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	2326      	movs	r3, #38	@ 0x26
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	f021 fa22 	bl	802e02c <memset>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe f97a 	bl	800aee4 <_ZN8touchgfx6WidgetC1Ev>
 800cbf0:	4a09      	ldr	r2, [pc, #36]	@ (800cc18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	84da      	strh	r2, [r3, #38]	@ 0x26
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	22ff      	movs	r2, #255	@ 0xff
 800cc02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f00b fe91 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08032210 	.word	0x08032210

0800cc1c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4618      	mov	r0, r3
 800cc28:	2326      	movs	r3, #38	@ 0x26
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	f021 f9fd 	bl	802e02c <memset>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe f955 	bl	800aee4 <_ZN8touchgfx6WidgetC1Ev>
 800cc3a:	4a0a      	ldr	r2, [pc, #40]	@ (800cc64 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	629a      	str	r2, [r3, #40]	@ 0x28
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2101      	movs	r1, #1
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff feef 	bl	800ca36 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	08031f34 	.word	0x08031f34

0800cc68 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	4a05      	ldr	r2, [pc, #20]	@ (800cca4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe f937 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	08031f34 	.word	0x08031f34

0800cca8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff ffe7 	bl	800cc84 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ccb6:	2130      	movs	r1, #48	@ 0x30
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f020 f94a 	bl	802cf52 <_ZdlPvj>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff ffa2 	bl	800cc1c <_ZN8touchgfx14AbstractButtonC1Ev>
 800ccd8:	4a0c      	ldr	r2, [pc, #48]	@ (800cd0c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	332e      	adds	r3, #46	@ 0x2e
 800cce2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fe95 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3330      	adds	r3, #48	@ 0x30
 800ccf0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff fe8e 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	22ff      	movs	r2, #255	@ 0xff
 800ccfe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4618      	mov	r0, r3
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	0803210c 	.word	0x0803210c

0800cd10 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800cd18:	f00e f9b2 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800cd1c:	4603      	mov	r3, r0
    }
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	4a05      	ldr	r2, [pc, #20]	@ (800cd48 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7ff feaf 	bl	800ca9c <_ZN8touchgfx6ScreenD1Ev>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	08030250 	.word	0x08030250

0800cd4c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff ffe7 	bl	800cd28 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800cd5a:	2140      	movs	r1, #64	@ 0x40
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f020 f8f8 	bl	802cf52 <_ZdlPvj>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	4a05      	ldr	r2, [pc, #20]	@ (800cd8c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fe f8c3 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	080320a4 	.word	0x080320a4

0800cd90 <_ZN8touchgfx3BoxD0Ev>:
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ffe7 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 800cd9e:	212c      	movs	r1, #44	@ 0x2c
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f020 f8d6 	bl	802cf52 <_ZdlPvj>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	4a05      	ldr	r2, [pc, #20]	@ (800cdd0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fe f8a1 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	08032210 	.word	0x08032210

0800cdd4 <_ZN8touchgfx5ImageD0Ev>:
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ffe7 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 800cde2:	212c      	movs	r1, #44	@ 0x2c
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f020 f8b4 	bl	802cf52 <_ZdlPvj>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	4a05      	ldr	r2, [pc, #20]	@ (800ce14 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff ff3d 	bl	800cc84 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	0803210c 	.word	0x0803210c

0800ce18 <_ZN8touchgfx6ButtonD0Ev>:
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff ffe7 	bl	800cdf4 <_ZN8touchgfx6ButtonD1Ev>
 800ce26:	2134      	movs	r1, #52	@ 0x34
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f020 f892 	bl	802cf52 <_ZdlPvj>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	4a05      	ldr	r2, [pc, #20]	@ (800ce58 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 f9b3 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	08030238 	.word	0x08030238

0800ce5c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ffe7 	bl	800ce38 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800ce6a:	2110      	movs	r1, #16
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f020 f870 	bl	802cf52 <_ZdlPvj>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800ce7c:	b590      	push	{r4, r7, lr}
 800ce7e:	b08f      	sub	sp, #60	@ 0x3c
 800ce80:	af02      	add	r7, sp, #8
 800ce82:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f94e 	bl	800d128 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800ce8c:	4a76      	ldr	r2, [pc, #472]	@ (800d068 <_ZN15Screen1ViewBaseC1Ev+0x1ec>)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3340      	adds	r3, #64	@ 0x40
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fe68 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	336c      	adds	r3, #108	@ 0x6c
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff fe63 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800ceac:	f107 0308 	add.w	r3, r7, #8
 800ceb0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff fdae 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800ceba:	f107 0308 	add.w	r3, r7, #8
 800cebe:	4619      	mov	r1, r3
 800cec0:	4620      	mov	r0, r4
 800cec2:	f7ff fe85 	bl	800cbd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	33c4      	adds	r3, #196	@ 0xc4
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7ff fefc 	bl	800ccc8 <_ZN8touchgfx6ButtonC1Ev>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 800ced6:	4b65      	ldr	r3, [pc, #404]	@ (800d06c <_ZN15Screen1ViewBaseC1Ev+0x1f0>)
 800ced8:	60fb      	str	r3, [r7, #12]
 800ceda:	2300      	movs	r3, #0
 800cedc:	613b      	str	r3, [r7, #16]
 800cede:	f107 030c 	add.w	r3, r7, #12
 800cee2:	cb0c      	ldmia	r3, {r2, r3}
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	f000 f945 	bl	800d174 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 800, 480);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800cef0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800cefa:	2200      	movs	r2, #0
 800cefc:	2100      	movs	r1, #0
 800cefe:	f7fd fbeb 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf14:	2300      	movs	r3, #0
 800cf16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800cf1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cf1e:	041a      	lsls	r2, r3, #16
 800cf20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf24:	021b      	lsls	r3, r3, #8
 800cf26:	431a      	orrs	r2, r3
 800cf28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cf32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7ff fd5d 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf40:	4619      	mov	r1, r3
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7ff fe36 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3340      	adds	r3, #64	@ 0x40
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4610      	mov	r0, r2
 800cf52:	f7ff fdfb 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800cf5c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800cf66:	2200      	movs	r2, #0
 800cf68:	2100      	movs	r1, #0
 800cf6a:	f7fd fbb5 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800cf74:	23ff      	movs	r3, #255	@ 0xff
 800cf76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cf7a:	23ff      	movs	r3, #255	@ 0xff
 800cf7c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800cf80:	23ff      	movs	r3, #255	@ 0xff
 800cf82:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800cf86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf8a:	041a      	lsls	r2, r3, #16
 800cf8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cf90:	021b      	lsls	r3, r3, #8
 800cf92:	431a      	orrs	r2, r3
 800cf94:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cf9e:	f107 0320 	add.w	r3, r7, #32
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fd27 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	4619      	mov	r1, r3
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7ff fe00 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	336c      	adds	r3, #108	@ 0x6c
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	f7ff fdc5 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(285, 64);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3398      	adds	r3, #152	@ 0x98
 800cfc6:	2240      	movs	r2, #64	@ 0x40
 800cfc8:	f240 111d 	movw	r1, #285	@ 0x11d
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fd fbdc 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TOP_ID));
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800cfd8:	f107 0314 	add.w	r3, r7, #20
 800cfdc:	2108      	movs	r1, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff fd19 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800cfe4:	f107 0314 	add.w	r3, r7, #20
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4620      	mov	r0, r4
 800cfec:	f00b fca0 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	3398      	adds	r3, #152	@ 0x98
 800cff6:	4619      	mov	r1, r3
 800cff8:	4610      	mov	r0, r2
 800cffa:	f7ff fda7 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(743, 423);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	33c4      	adds	r3, #196	@ 0xc4
 800d002:	f240 12a7 	movw	r2, #423	@ 0x1a7
 800d006:	f240 21e7 	movw	r1, #743	@ 0x2e7
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fd fbbd 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800d016:	f107 0318 	add.w	r3, r7, #24
 800d01a:	2106      	movs	r1, #6
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7ff fcfa 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800d022:	f107 031c 	add.w	r3, r7, #28
 800d026:	2107      	movs	r1, #7
 800d028:	4618      	mov	r0, r3
 800d02a:	f7ff fcf4 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800d02e:	f107 021c 	add.w	r2, r7, #28
 800d032:	f107 0318 	add.w	r3, r7, #24
 800d036:	4619      	mov	r1, r3
 800d038:	4620      	mov	r0, r4
 800d03a:	f00b fb59 	bl	80186f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	33f8      	adds	r3, #248	@ 0xf8
 800d048:	4619      	mov	r1, r3
 800d04a:	4610      	mov	r0, r2
 800d04c:	f7ff fe0c 	bl	800cc68 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	33c4      	adds	r3, #196	@ 0xc4
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f7ff fd77 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4618      	mov	r0, r3
 800d062:	3734      	adds	r7, #52	@ 0x34
 800d064:	46bd      	mov	sp, r7
 800d066:	bd90      	pop	{r4, r7, pc}
 800d068:	08030204 	.word	0x08030204
 800d06c:	0800d0ff 	.word	0x0800d0ff

0800d070 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	4a12      	ldr	r2, [pc, #72]	@ (800d0c4 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	601a      	str	r2, [r3, #0]
{

}
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	33f8      	adds	r3, #248	@ 0xf8
 800d082:	4618      	mov	r0, r3
 800d084:	f7ff fed8 	bl	800ce38 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	33c4      	adds	r3, #196	@ 0xc4
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7ff feb1 	bl	800cdf4 <_ZN8touchgfx6ButtonD1Ev>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	3398      	adds	r3, #152	@ 0x98
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff fe8a 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	336c      	adds	r3, #108	@ 0x6c
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff fe63 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3340      	adds	r3, #64	@ 0x40
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fe5e 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff fe38 	bl	800cd28 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	08030204 	.word	0x08030204

0800d0c8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
}
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff ffcd 	bl	800d070 <_ZN15Screen1ViewBaseD1Ev>
 800d0d6:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f01f ff39 	bl	802cf52 <_ZdlPvj>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b083      	sub	sp, #12
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]

}
 800d0f2:	bf00      	nop
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	33c4      	adds	r3, #196	@ 0xc4
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d106      	bne.n	800d120 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen3
        //Go to Screen3 with screen transition towards West
        application().gotoScreen3ScreenSlideTransitionWest();
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff fdfc 	bl	800cd10 <_ZN15Screen1ViewBase11applicationEv>
 800d118:	4603      	mov	r3, r0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe f850 	bl	800b1c0 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionWestEv>
    }
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4618      	mov	r0, r3
 800d134:	f00f fbfc 	bl	801c930 <_ZN8touchgfx6ScreenC1Ev>
 800d138:	4a05      	ldr	r2, [pc, #20]	@ (800d150 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	08030250 	.word	0x08030250

0800d154 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	4a04      	ldr	r2, [pc, #16]	@ (800d170 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	08030284 	.word	0x08030284

0800d174 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4639      	mov	r1, r7
 800d180:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff ffe4 	bl	800d154 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d18c:	4a08      	ldr	r2, [pc, #32]	@ (800d1b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	605a      	str	r2, [r3, #4]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3308      	adds	r3, #8
 800d19c:	463a      	mov	r2, r7
 800d19e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	08030238 	.word	0x08030238

0800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
    }
 800d1bc:	4a04      	ldr	r2, [pc, #16]	@ (800d1d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	08030284 	.word	0x08030284

0800d1d4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
    }
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7ff ffe9 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d1e2:	2104      	movs	r1, #4
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f01f feb4 	bl	802cf52 <_ZdlPvj>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	68d2      	ldr	r2, [r2, #12]
 800d206:	1052      	asrs	r2, r2, #1
 800d208:	1898      	adds	r0, r3, r2
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d102      	bne.n	800d21c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	e00a      	b.n	800d232 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	68d2      	ldr	r2, [r2, #12]
 800d224:	1052      	asrs	r2, r2, #1
 800d226:	4413      	add	r3, r2
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	6892      	ldr	r2, [r2, #8]
 800d22e:	4413      	add	r3, r2
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	4798      	blx	r3
    }
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d010      	beq.n	800d270 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d107      	bne.n	800d266 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d262:	2301      	movs	r3, #1
 800d264:	e000      	b.n	800d268 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d266:	2300      	movs	r3, #0
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d001      	beq.n	800d270 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d26c:	2301      	movs	r3, #1
 800d26e:	e000      	b.n	800d272 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d270:	2300      	movs	r3, #0
    }
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
        : color(0)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]
    }
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4618      	mov	r0, r3
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800d29a:	b480      	push	{r7}
 800d29c:	b083      	sub	sp, #12
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
        return color;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
    }
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
        return rect.height;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800d304:	4a06      	ldr	r2, [pc, #24]	@ (800d320 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	809a      	strh	r2, [r3, #4]
    {
    }
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4618      	mov	r0, r3
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	080307ec 	.word	0x080307ec

0800d324 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
    {
 800d32c:	4a04      	ldr	r2, [pc, #16]	@ (800d340 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	601a      	str	r2, [r3, #0]
    }
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	080307ec 	.word	0x080307ec

0800d344 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
    }
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7ff ffe9 	bl	800d324 <_ZN8touchgfx15AbstractPainterD1Ev>
 800d352:	2108      	movs	r1, #8
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f01f fdfc 	bl	802cf52 <_ZdlPvj>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4618      	mov	r0, r3
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800d36c:	2300      	movs	r3, #0
    }
 800d36e:	4618      	mov	r0, r3
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800d37a:	b480      	push	{r7}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	809a      	strh	r2, [r3, #4]
        return true;
 800d38e:	2301      	movs	r3, #1
    }
 800d390:	4618      	mov	r0, r3
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
    {
        return;
 800d3a4:	bf00      	nop
    }
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
            : v(i)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	683a      	ldr	r2, [r7, #0]
 800d3be:	601a      	str	r2, [r3, #0]
        {
        }
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
        {
            return v;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
        }
 800d3da:	4618      	mov	r0, r3
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
         *
         * @param  q5 The Q5 to add to this.
         *
         * @return The result of the operation.
         */
        Q5 operator+(const Q5& q5) const
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
        {
            return Q5(v + q5.v);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	441a      	add	r2, r3
 800d3fa:	f107 030c 	add.w	r3, r7, #12
 800d3fe:	4611      	mov	r1, r2
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff ffd5 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d406:	68fb      	ldr	r3, [r7, #12]
        }
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
         *
         * @param  q5 The Q5 to subtract from this.
         *
         * @return The result of the operation.
         */
        Q5 operator-(const Q5& q5) const
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
        {
            return Q5(v - q5.v);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	1ad2      	subs	r2, r2, r3
 800d424:	f107 030c 	add.w	r3, r7, #12
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7ff ffc0 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d430:	68fb      	ldr	r3, [r7, #12]
        }
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ5(Q5 factor1, Q5 factor2, Q5 divisor)
 800d43a:	b5b0      	push	{r4, r5, r7, lr}
 800d43c:	b086      	sub	sp, #24
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	607a      	str	r2, [r7, #4]
    {
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800d446:	f107 030c 	add.w	r3, r7, #12
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff ffbf 	bl	800d3ce <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800d450:	4604      	mov	r4, r0
 800d452:	f107 0308 	add.w	r3, r7, #8
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff ffb9 	bl	800d3ce <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800d45c:	4605      	mov	r5, r0
 800d45e:	1d3b      	adds	r3, r7, #4
 800d460:	4618      	mov	r0, r3
 800d462:	f7ff ffb4 	bl	800d3ce <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800d466:	4603      	mov	r3, r0
 800d468:	461a      	mov	r2, r3
 800d46a:	4629      	mov	r1, r5
 800d46c:	4620      	mov	r0, r4
 800d46e:	f00f f8bc 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 800d472:	4602      	mov	r2, r0
 800d474:	f107 0314 	add.w	r3, r7, #20
 800d478:	4611      	mov	r1, r2
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff ff98 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d480:	697b      	ldr	r3, [r7, #20]
    }
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bdb0      	pop	{r4, r5, r7, pc}

0800d48a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b094      	sub	sp, #80	@ 0x50
 800d48e:	af00      	add	r7, sp, #0
 800d490:	60f8      	str	r0, [r7, #12]
 800d492:	60b9      	str	r1, [r7, #8]
 800d494:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800d496:	f107 0310 	add.w	r3, r7, #16
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	68b9      	ldr	r1, [r7, #8]
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f00f f884 	bl	801c5ac <_ZN8touchgfx6muldivElllRl>
 800d4a4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (result >= 0)
 800d4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	db2f      	blt.n	800d50c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x82>
 800d4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800d4b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff ff78 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800d4c2:	617b      	str	r3, [r7, #20]
 800d4c4:	f107 031c 	add.w	r3, r7, #28
 800d4c8:	2120      	movs	r1, #32
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ff70 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	f107 0320 	add.w	r3, r7, #32
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7ff ff69 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4e2:	6879      	ldr	r1, [r7, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff ff63 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d4ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4ec:	6a39      	ldr	r1, [r7, #32]
 800d4ee:	69f8      	ldr	r0, [r7, #28]
 800d4f0:	f7ff ffa3 	bl	800d43a <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	61bb      	str	r3, [r7, #24]
 800d4f8:	f107 0218 	add.w	r2, r7, #24
 800d4fc:	f107 0314 	add.w	r3, r7, #20
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff ff6f 	bl	800d3e6 <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800d508:	4603      	mov	r3, r0
 800d50a:	e02e      	b.n	800d56a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0xe0>
 800d50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d50e:	647b      	str	r3, [r7, #68]	@ 0x44
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800d510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d518:	4611      	mov	r1, r2
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7ff ff48 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800d522:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d524:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d528:	2120      	movs	r1, #32
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff ff40 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff ff39 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d53e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d542:	6879      	ldr	r1, [r7, #4]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff ff33 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800d54a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d54c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d54e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d550:	f7ff ff73 	bl	800d43a <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800d554:	4603      	mov	r3, r0
 800d556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d558:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d55c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff ff54 	bl	800d410 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800d568:	4603      	mov	r3, r0
    }
 800d56a:	4618      	mov	r0, r3
 800d56c:	3750      	adds	r7, #80	@ 0x50
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
 800d572:	b480      	push	{r7}
 800d574:	b083      	sub	sp, #12
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
    {
        return xScale;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
 800d57e:	4618      	mov	r0, r3
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
 800d58a:	b480      	push	{r7}
 800d58c:	b083      	sub	sp, #12
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
    {
        return yScale;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800d596:	4618      	mov	r0, r3
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha()
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	78fa      	ldrb	r2, [r7, #3]
 800d5b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800d5b6:	bf00      	nop
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b08c      	sub	sp, #48	@ 0x30
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	33a4      	adds	r3, #164	@ 0xa4
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	61fa      	str	r2, [r7, #28]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	61ba      	str	r2, [r7, #24]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d5e2:	69b9      	ldr	r1, [r7, #24]
 800d5e4:	6179      	str	r1, [r7, #20]
 800d5e6:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d5e8:	697a      	ldr	r2, [r7, #20]
 800d5ea:	6939      	ldr	r1, [r7, #16]
 800d5ec:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, xScale);
 800d5f0:	bf00      	nop
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d5fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d600:	6279      	str	r1, [r7, #36]	@ 0x24
 800d602:	623a      	str	r2, [r7, #32]
        return i * scale;
 800d604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d606:	6a39      	ldr	r1, [r7, #32]
 800d608:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800d60c:	bf00      	nop
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800d60e:	4601      	mov	r1, r0
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	4798      	blx	r3
    }
 800d614:	bf00      	nop
 800d616:	3730      	adds	r7, #48	@ 0x30
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
    virtual void setGraphRangeX(float min, float max)
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	@ 0x38
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	ed87 0a02 	vstr	s0, [r7, #8]
 800d628:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	33a4      	adds	r3, #164	@ 0xa4
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	623a      	str	r2, [r7, #32]
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledX(float f) const
    {
        return float2scaled(f, xScale);
 800d63c:	6a3a      	ldr	r2, [r7, #32]
 800d63e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d640:	69f9      	ldr	r1, [r7, #28]
 800d642:	61b9      	str	r1, [r7, #24]
 800d644:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	ee07 2a90 	vmov	s15, r2
 800d64c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d650:	ed97 7a06 	vldr	s14, [r7, #24]
 800d654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d658:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800d65c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d668:	db0a      	blt.n	800d680 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x64>
            return (int)(fs + 0.5f);
 800d66a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d66e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d672:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d67a:	ee17 0a90 	vmov	r0, s15
 800d67e:	e019      	b.n	800d6b4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d680:	edd7 7a04 	vldr	s15, [r7, #16]
 800d684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d688:	ee17 2a90 	vmov	r2, s15
 800d68c:	3a01      	subs	r2, #1
 800d68e:	edd7 7a04 	vldr	s15, [r7, #16]
 800d692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d69a:	ed97 7a04 	vldr	s14, [r7, #16]
 800d69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6a2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d6a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ae:	ee17 1a90 	vmov	r1, s15
 800d6b2:	1850      	adds	r0, r2, r1
        return float2scaled(f, xScale);
 800d6b4:	bf00      	nop
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	637a      	str	r2, [r7, #52]	@ 0x34
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d6c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6c4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d6c6:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800d6c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6ca:	ee07 2a90 	vmov	s15, r2
 800d6ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800d6de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d6e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ea:	db0a      	blt.n	800d702 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0xe6>
            return (int)(fs + 0.5f);
 800d6ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d6f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d6f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6fc:	ee17 2a90 	vmov	r2, s15
 800d700:	e019      	b.n	800d736 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d702:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d70a:	ee17 2a90 	vmov	r2, s15
 800d70e:	3a01      	subs	r2, #1
 800d710:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d71c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d720:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d724:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d72c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d730:	ee17 1a90 	vmov	r1, s15
 800d734:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800d736:	bf00      	nop
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800d738:	4601      	mov	r1, r0
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	4798      	blx	r3
    }
 800d73e:	bf00      	nop
 800d740:	3738      	adds	r7, #56	@ 0x38
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800d746:	b580      	push	{r7, lr}
 800d748:	b088      	sub	sp, #32
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	460b      	mov	r3, r1
 800d750:	607a      	str	r2, [r7, #4]
 800d752:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	33b0      	adds	r3, #176	@ 0xb0
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	61fa      	str	r2, [r7, #28]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, xScale);
 800d764:	69fa      	ldr	r2, [r7, #28]
 800d766:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d768:	69b9      	ldr	r1, [r7, #24]
 800d76a:	6179      	str	r1, [r7, #20]
 800d76c:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d76e:	697a      	ldr	r2, [r7, #20]
 800d770:	6939      	ldr	r1, [r7, #16]
 800d772:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800d776:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800d778:	7af9      	ldrb	r1, [r7, #11]
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	4798      	blx	r3
    }
 800d77e:	bf00      	nop
 800d780:	3720      	adds	r7, #32
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 800d786:	b580      	push	{r7, lr}
 800d788:	b08a      	sub	sp, #40	@ 0x28
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	60f8      	str	r0, [r7, #12]
 800d78e:	460b      	mov	r3, r1
 800d790:	ed87 0a01 	vstr	s0, [r7, #4]
 800d794:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	33b0      	adds	r3, #176	@ 0xb0
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	623a      	str	r2, [r7, #32]
        return float2scaled(f, xScale);
 800d7a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d7aa:	6a39      	ldr	r1, [r7, #32]
 800d7ac:	61f9      	str	r1, [r7, #28]
 800d7ae:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800d7b0:	69ba      	ldr	r2, [r7, #24]
 800d7b2:	ee07 2a90 	vmov	s15, r2
 800d7b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ba:	ed97 7a07 	vldr	s14, [r7, #28]
 800d7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c2:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800d7c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d2:	db0a      	blt.n	800d7ea <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800d7d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d7dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7e4:	ee17 2a90 	vmov	r2, s15
 800d7e8:	e019      	b.n	800d81e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d7ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7f2:	ee17 2a90 	vmov	r2, s15
 800d7f6:	3a01      	subs	r2, #1
 800d7f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d804:	ed97 7a05 	vldr	s14, [r7, #20]
 800d808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d80c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d810:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d818:	ee17 1a90 	vmov	r1, s15
 800d81c:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800d81e:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800d820:	7af9      	ldrb	r1, [r7, #11]
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	4798      	blx	r3
    }
 800d826:	bf00      	nop
 800d828:	3728      	adds	r7, #40	@ 0x28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800d82e:	b580      	push	{r7, lr}
 800d830:	b08c      	sub	sp, #48	@ 0x30
 800d832:	af00      	add	r7, sp, #0
 800d834:	60f8      	str	r0, [r7, #12]
 800d836:	60b9      	str	r1, [r7, #8]
 800d838:	607a      	str	r2, [r7, #4]
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	33bc      	adds	r3, #188	@ 0xbc
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	61fa      	str	r2, [r7, #28]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800d84a:	69fa      	ldr	r2, [r7, #28]
 800d84c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d84e:	69b9      	ldr	r1, [r7, #24]
 800d850:	6179      	str	r1, [r7, #20]
 800d852:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	6939      	ldr	r1, [r7, #16]
 800d858:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, yScale);
 800d85c:	bf00      	nop
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d868:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d86a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d86c:	6279      	str	r1, [r7, #36]	@ 0x24
 800d86e:	623a      	str	r2, [r7, #32]
        return i * scale;
 800d870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d872:	6a39      	ldr	r1, [r7, #32]
 800d874:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800d878:	bf00      	nop
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800d87a:	4601      	mov	r1, r0
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	4798      	blx	r3
    }
 800d880:	bf00      	nop
 800d882:	3730      	adds	r7, #48	@ 0x30
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
    virtual void setGraphRangeY(float min, float max)
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08e      	sub	sp, #56	@ 0x38
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	ed87 0a02 	vstr	s0, [r7, #8]
 800d894:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	33bc      	adds	r3, #188	@ 0xbc
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	623a      	str	r2, [r7, #32]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledY(float f) const
    {
        return float2scaled(f, yScale);
 800d8a8:	6a3a      	ldr	r2, [r7, #32]
 800d8aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d8ac:	69f9      	ldr	r1, [r7, #28]
 800d8ae:	61b9      	str	r1, [r7, #24]
 800d8b0:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800d8b2:	697a      	ldr	r2, [r7, #20]
 800d8b4:	ee07 2a90 	vmov	s15, r2
 800d8b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8bc:	ed97 7a06 	vldr	s14, [r7, #24]
 800d8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8c4:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800d8c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d4:	db0a      	blt.n	800d8ec <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x64>
            return (int)(fs + 0.5f);
 800d8d6:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d8de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8e6:	ee17 0a90 	vmov	r0, s15
 800d8ea:	e019      	b.n	800d920 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d8ec:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8f4:	ee17 2a90 	vmov	r2, s15
 800d8f8:	3a01      	subs	r2, #1
 800d8fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d906:	ed97 7a04 	vldr	s14, [r7, #16]
 800d90a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d90e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d912:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d91a:	ee17 1a90 	vmov	r1, s15
 800d91e:	1850      	adds	r0, r2, r1
        return float2scaled(f, yScale);
 800d920:	bf00      	nop
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	637a      	str	r2, [r7, #52]	@ 0x34
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	633a      	str	r2, [r7, #48]	@ 0x30
 800d92a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d92c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d92e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d930:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d932:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800d934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d936:	ee07 2a90 	vmov	s15, r2
 800d93a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d93e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800d942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d946:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800d94a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d94e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d956:	db0a      	blt.n	800d96e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0xe6>
            return (int)(fs + 0.5f);
 800d958:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d95c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d960:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d968:	ee17 2a90 	vmov	r2, s15
 800d96c:	e019      	b.n	800d9a2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800d96e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d976:	ee17 2a90 	vmov	r2, s15
 800d97a:	3a01      	subs	r2, #1
 800d97c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d988:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800d98c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d990:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d994:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d99c:	ee17 1a90 	vmov	r1, s15
 800d9a0:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800d9a2:	bf00      	nop
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800d9a4:	4601      	mov	r1, r0
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	4798      	blx	r3
    }
 800d9aa:	bf00      	nop
 800d9ac:	3738      	adds	r7, #56	@ 0x38
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b088      	sub	sp, #32
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	607a      	str	r2, [r7, #4]
 800d9be:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	33c0      	adds	r3, #192	@ 0xc0
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	61fa      	str	r2, [r7, #28]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800d9d0:	69fa      	ldr	r2, [r7, #28]
 800d9d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d9d4:	69b9      	ldr	r1, [r7, #24]
 800d9d6:	6179      	str	r1, [r7, #20]
 800d9d8:	613a      	str	r2, [r7, #16]
        return i * scale;
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	6939      	ldr	r1, [r7, #16]
 800d9de:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800d9e2:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800d9e4:	7af9      	ldrb	r1, [r7, #11]
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	4798      	blx	r3
    }
 800d9ea:	bf00      	nop
 800d9ec:	3720      	adds	r7, #32
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b08a      	sub	sp, #40	@ 0x28
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	60f8      	str	r0, [r7, #12]
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	ed87 0a01 	vstr	s0, [r7, #4]
 800da00:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	33c0      	adds	r3, #192	@ 0xc0
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	627a      	str	r2, [r7, #36]	@ 0x24
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	623a      	str	r2, [r7, #32]
        return float2scaled(f, yScale);
 800da12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800da16:	6a39      	ldr	r1, [r7, #32]
 800da18:	61f9      	str	r1, [r7, #28]
 800da1a:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800da1c:	69ba      	ldr	r2, [r7, #24]
 800da1e:	ee07 2a90 	vmov	s15, r2
 800da22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da26:	ed97 7a07 	vldr	s14, [r7, #28]
 800da2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da2e:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800da32:	edd7 7a05 	vldr	s15, [r7, #20]
 800da36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3e:	db0a      	blt.n	800da56 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800da40:	edd7 7a05 	vldr	s15, [r7, #20]
 800da44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800da48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da50:	ee17 2a90 	vmov	r2, s15
 800da54:	e019      	b.n	800da8a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800da56:	edd7 7a05 	vldr	s15, [r7, #20]
 800da5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da5e:	ee17 2a90 	vmov	r2, s15
 800da62:	3a01      	subs	r2, #1
 800da64:	edd7 7a05 	vldr	s15, [r7, #20]
 800da68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da70:	ed97 7a05 	vldr	s14, [r7, #20]
 800da74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da78:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800da7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da84:	ee17 1a90 	vmov	r1, s15
 800da88:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800da8a:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800da8c:	7af9      	ldrb	r1, [r7, #11]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	4798      	blx	r3
    }
 800da92:	bf00      	nop
 800da94:	3728      	adds	r7, #40	@ 0x28
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
    virtual int getGraphRangeXMinAsInt() const
 800da9a:	b480      	push	{r7}
 800da9c:	b087      	sub	sp, #28
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMinX);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	617a      	str	r2, [r7, #20]
 800daac:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	60fa      	str	r2, [r7, #12]
 800dab6:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	db0b      	blt.n	800dad6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	005a      	lsls	r2, r3, #1
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	441a      	add	r2, r3
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	fb92 f3f3 	sdiv	r3, r2, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	da00      	bge.n	800dad2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x38>
 800dad0:	3301      	adds	r3, #1
 800dad2:	105b      	asrs	r3, r3, #1
 800dad4:	e010      	b.n	800daf8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	4613      	mov	r3, r2
 800dada:	07db      	lsls	r3, r3, #31
 800dadc:	1a9b      	subs	r3, r3, r2
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	461a      	mov	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	4413      	add	r3, r2
 800dae6:	1e5a      	subs	r2, r3, #1
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	fb92 f3f3 	sdiv	r3, r2, r3
 800daee:	2b00      	cmp	r3, #0
 800daf0:	da00      	bge.n	800daf4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5a>
 800daf2:	3301      	adds	r3, #1
 800daf4:	105b      	asrs	r3, r3, #1
 800daf6:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800daf8:	bf00      	nop
    }
 800dafa:	4618      	mov	r0, r3
 800dafc:	371c      	adds	r7, #28
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
    virtual float getGraphRangeXMinAsFloat() const
 800db06:	b480      	push	{r7}
 800db08:	b087      	sub	sp, #28
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMinX);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	617a      	str	r2, [r7, #20]
 800db18:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatX(int i) const
    {
        return scaled2float(i, xScale);
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	60fa      	str	r2, [r7, #12]
 800db22:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	ee07 3a90 	vmov	s15, r3
 800db2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	ee07 3a90 	vmov	s15, r3
 800db34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db38:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800db3c:	bf00      	nop
        return scaled2floatX(graphRangeMinX);
 800db3e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800db42:	eeb0 0a67 	vmov.f32	s0, s15
 800db46:	371c      	adds	r7, #28
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    virtual int getGraphRangeXMinScaled() const
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
        return graphRangeMinX;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
    }
 800db5e:	4618      	mov	r0, r3
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
    virtual int getGraphRangeXMaxAsInt() const
 800db6a:	b480      	push	{r7}
 800db6c:	b087      	sub	sp, #28
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMaxX);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	617a      	str	r2, [r7, #20]
 800db7c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	60fa      	str	r2, [r7, #12]
 800db86:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	db0b      	blt.n	800dba6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	005a      	lsls	r2, r3, #1
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	441a      	add	r2, r3
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	fb92 f3f3 	sdiv	r3, r2, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	da00      	bge.n	800dba2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x38>
 800dba0:	3301      	adds	r3, #1
 800dba2:	105b      	asrs	r3, r3, #1
 800dba4:	e010      	b.n	800dbc8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	07db      	lsls	r3, r3, #31
 800dbac:	1a9b      	subs	r3, r3, r2
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	1e5a      	subs	r2, r3, #1
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	fb92 f3f3 	sdiv	r3, r2, r3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	da00      	bge.n	800dbc4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5a>
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	105b      	asrs	r3, r3, #1
 800dbc6:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800dbc8:	bf00      	nop
    }
 800dbca:	4618      	mov	r0, r3
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
    virtual float getGraphRangeXMaxAsFloat() const
 800dbd6:	b480      	push	{r7}
 800dbd8:	b087      	sub	sp, #28
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMaxX);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	617a      	str	r2, [r7, #20]
 800dbe8:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	60fa      	str	r2, [r7, #12]
 800dbf2:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	ee07 3a90 	vmov	s15, r3
 800dbfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	ee07 3a90 	vmov	s15, r3
 800dc04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc08:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800dc0c:	bf00      	nop
        return scaled2floatX(graphRangeMaxX);
 800dc0e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800dc12:	eeb0 0a67 	vmov.f32	s0, s15
 800dc16:	371c      	adds	r7, #28
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    virtual int getGraphRangeXMaxScaled() const
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
        return graphRangeMaxX;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
    }
 800dc2e:	4618      	mov	r0, r3
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr

0800dc3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
    virtual int getGraphRangeYMinAsInt() const
 800dc3a:	b480      	push	{r7}
 800dc3c:	b087      	sub	sp, #28
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMinY);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	617a      	str	r2, [r7, #20]
 800dc4c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	60fa      	str	r2, [r7, #12]
 800dc56:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	db0b      	blt.n	800dc76 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	005a      	lsls	r2, r3, #1
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	441a      	add	r2, r3
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	fb92 f3f3 	sdiv	r3, r2, r3
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	da00      	bge.n	800dc72 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x38>
 800dc70:	3301      	adds	r3, #1
 800dc72:	105b      	asrs	r3, r3, #1
 800dc74:	e010      	b.n	800dc98 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	07db      	lsls	r3, r3, #31
 800dc7c:	1a9b      	subs	r3, r3, r2
 800dc7e:	005b      	lsls	r3, r3, #1
 800dc80:	461a      	mov	r2, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	4413      	add	r3, r2
 800dc86:	1e5a      	subs	r2, r3, #1
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	fb92 f3f3 	sdiv	r3, r2, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	da00      	bge.n	800dc94 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5a>
 800dc92:	3301      	adds	r3, #1
 800dc94:	105b      	asrs	r3, r3, #1
 800dc96:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800dc98:	bf00      	nop
    }
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	371c      	adds	r7, #28
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
    virtual float getGraphRangeYMinAsFloat() const
 800dca6:	b480      	push	{r7}
 800dca8:	b087      	sub	sp, #28
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMinY);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	617a      	str	r2, [r7, #20]
 800dcb8:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatY(int i) const
    {
        return scaled2float(i, yScale);
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcbe:	693a      	ldr	r2, [r7, #16]
 800dcc0:	60fa      	str	r2, [r7, #12]
 800dcc2:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	ee07 3a90 	vmov	s15, r3
 800dcd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800dcdc:	bf00      	nop
        return scaled2floatY(graphRangeMinY);
 800dcde:	eef0 7a66 	vmov.f32	s15, s13
    }
 800dce2:	eeb0 0a67 	vmov.f32	s0, s15
 800dce6:	371c      	adds	r7, #28
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    virtual int getGraphRangeYMinScaled() const
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
        return graphRangeMinY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
    }
 800dcfe:	4618      	mov	r0, r3
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
    virtual int getGraphRangeYMaxAsInt() const
 800dd0a:	b480      	push	{r7}
 800dd0c:	b087      	sub	sp, #28
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMaxY);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	617a      	str	r2, [r7, #20]
 800dd1c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	60fa      	str	r2, [r7, #12]
 800dd26:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	db0b      	blt.n	800dd46 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x3c>
            return ((i * 2 + scale) / scale) / 2;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	005a      	lsls	r2, r3, #1
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	441a      	add	r2, r3
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	da00      	bge.n	800dd42 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x38>
 800dd40:	3301      	adds	r3, #1
 800dd42:	105b      	asrs	r3, r3, #1
 800dd44:	e010      	b.n	800dd68 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	4613      	mov	r3, r2
 800dd4a:	07db      	lsls	r3, r3, #31
 800dd4c:	1a9b      	subs	r3, r3, r2
 800dd4e:	005b      	lsls	r3, r3, #1
 800dd50:	461a      	mov	r2, r3
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	4413      	add	r3, r2
 800dd56:	1e5a      	subs	r2, r3, #1
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	da00      	bge.n	800dd64 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5a>
 800dd62:	3301      	adds	r3, #1
 800dd64:	105b      	asrs	r3, r3, #1
 800dd66:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800dd68:	bf00      	nop
    }
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	371c      	adds	r7, #28
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
    virtual float getGraphRangeYMaxAsFloat() const
 800dd76:	b480      	push	{r7}
 800dd78:	b087      	sub	sp, #28
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMaxY);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	617a      	str	r2, [r7, #20]
 800dd88:	613b      	str	r3, [r7, #16]
        return scaled2float(i, yScale);
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	60fa      	str	r2, [r7, #12]
 800dd92:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	ee07 3a90 	vmov	s15, r3
 800dd9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	ee07 3a90 	vmov	s15, r3
 800dda4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dda8:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800ddac:	bf00      	nop
        return scaled2floatY(graphRangeMaxY);
 800ddae:	eef0 7a66 	vmov.f32	s15, s13
    }
 800ddb2:	eeb0 0a67 	vmov.f32	s0, s15
 800ddb6:	371c      	adds	r7, #28
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    virtual int getGraphRangeYMaxScaled() const
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
        return graphRangeMaxY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
    }
 800ddce:	4618      	mov	r0, r3
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
     * @return The given data converted to a new scale.
     */
    static int convertToNewScale(int value, int oldScale, int newScale);

    /** Invalidate content. */
    virtual void invalidateContent() const
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d003      	beq.n	800ddf4 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x1a>
        {
            Container::invalidateContent();
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fc fc48 	bl	800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800ddf4:	bf00      	nop
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
     *
     * @param  x The x value.
     *
     * @return The screen x coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800ddfc:	b590      	push	{r4, r7, lr}
 800ddfe:	b089      	sub	sp, #36	@ 0x24
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
    {
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	1ad4      	subs	r4, r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	3338      	adds	r3, #56	@ 0x38
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fc fc8b 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800de1e:	4603      	mov	r3, r0
 800de20:	b29a      	uxth	r2, r3
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800de28:	b299      	uxth	r1, r3
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800de30:	b29b      	uxth	r3, r3
 800de32:	440b      	add	r3, r1
 800de34:	b29b      	uxth	r3, r3
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	b29b      	uxth	r3, r3
 800de3a:	b21b      	sxth	r3, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800de3c:	1e59      	subs	r1, r3, #1
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800de4a:	1ad3      	subs	r3, r2, r3
 800de4c:	461a      	mov	r2, r3
 800de4e:	4620      	mov	r0, r4
 800de50:	f7ff fb1b 	bl	800d48a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800de54:	4603      	mov	r3, r0
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800de5e:	83fb      	strh	r3, [r7, #30]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800de60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	f107 0314 	add.w	r3, r7, #20
 800de6a:	4611      	mov	r1, r2
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7ff fa9f 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	613b      	str	r3, [r7, #16]
 800de76:	f107 0210 	add.w	r2, r7, #16
 800de7a:	f107 030c 	add.w	r3, r7, #12
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fab0 	bl	800d3e6 <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800de86:	4603      	mov	r3, r0
    }
 800de88:	4618      	mov	r0, r3
 800de8a:	3724      	adds	r7, #36	@ 0x24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd90      	pop	{r4, r7, pc}

0800de90 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
     *
     * @param  y The y value.
     *
     * @return The screen y coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	617b      	str	r3, [r7, #20]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	3338      	adds	r3, #56	@ 0x38
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7ff fa05 	bl	800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800dea8:	4603      	mov	r3, r0
 800deaa:	b29a      	uxth	r2, r3
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800deb2:	b299      	uxth	r1, r3
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800deba:	b29b      	uxth	r3, r3
 800debc:	440b      	add	r3, r1
 800debe:	b29b      	uxth	r3, r3
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	b21b      	sxth	r3, r3
    {
        const int16_t graphAreaHeight = getGraphAreaHeight();
 800dec6:	83fb      	strh	r3, [r7, #30]
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800dec8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	f9b2 2114 	ldrsh.w	r2, [r2, #276]	@ 0x114
 800ded2:	4413      	add	r3, r2
 800ded4:	3b01      	subs	r3, #1
 800ded6:	61bb      	str	r3, [r7, #24]
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	015a      	lsls	r2, r3, #5
 800dedc:	f107 0310 	add.w	r3, r7, #16
 800dee0:	4611      	mov	r1, r2
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff fa64 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	60bb      	str	r3, [r7, #8]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	1ad0      	subs	r0, r2, r3
 800def6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800defa:	1e59      	subs	r1, r3, #1
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	461a      	mov	r2, r3
 800df0c:	f7ff fabd 	bl	800d48a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800df10:	4603      	mov	r3, r0
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	f107 020c 	add.w	r2, r7, #12
 800df18:	f107 0308 	add.w	r3, r7, #8
 800df1c:	4611      	mov	r1, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f7ff fa76 	bl	800d410 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800df24:	4603      	mov	r3, r0
    }
 800df26:	4618      	mov	r0, r3
 800df28:	3720      	adds	r7, #32
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
	...

0800df30 <_ZN8touchgfx17AbstractDataGraphD1Ev>:
class AbstractDataGraph : public Container
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	4a12      	ldr	r2, [pc, #72]	@ (800df84 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	33e8      	adds	r3, #232	@ 0xe8
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe fd88 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	33bc      	adds	r3, #188	@ 0xbc
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fd83 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	3390      	adds	r3, #144	@ 0x90
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe fd7e 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3364      	adds	r3, #100	@ 0x64
 800df60:	4618      	mov	r0, r3
 800df62:	f7fe fd79 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	3338      	adds	r3, #56	@ 0x38
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe fd74 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe fd70 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	08031954 	.word	0x08031954

0800df88 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff ffcd 	bl	800df30 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800df96:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f01e ffd9 	bl	802cf52 <_ZdlPvj>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
	...

0800dfac <_ZN8touchgfx16DynamicDataGraphC1EsPi>:
     * Initializes a new instance of the AbstractDataGraphWithY class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Address where to store the y values of the graph.
     */
    DynamicDataGraph(int16_t capacity, int* values)
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	817b      	strh	r3, [r7, #10]
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800dfc0:	4611      	mov	r1, r2
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f008 fd16 	bl	80169f4 <_ZN8touchgfx17AbstractDataGraphC1Es>
 800dfc8:	4a0f      	ldr	r2, [pc, #60]	@ (800e008 <_ZN8touchgfx16DynamicDataGraphC1EsPi+0x5c>)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    {
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dff4:	3b01      	subs	r3, #1
 800dff6:	461a      	mov	r2, r3
 800dff8:	2100      	movs	r1, #0
 800dffa:	f7ff fae2 	bl	800d5c2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    }
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	080317bc 	.word	0x080317bc

0800e00c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @see getScale
     *
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	4613      	mov	r3, r2
 800e018:	71fb      	strb	r3, [r7, #7]
    {
        setScaleX(scale, updateData);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3388      	adds	r3, #136	@ 0x88
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	79fa      	ldrb	r2, [r7, #7]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	4798      	blx	r3
        setScaleY(scale, updateData);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3390      	adds	r3, #144	@ 0x90
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	79fa      	ldrb	r2, [r7, #7]
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	4798      	blx	r3
    }
 800e03a:	bf00      	nop
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @return The scaling factor.
     *
     * @see setScale
     */
    virtual int getScale() const
 800e042:	b580      	push	{r7, lr}
 800e044:	b082      	sub	sp, #8
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
    {
        return getScaleY();
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3394      	adds	r3, #148	@ 0x94
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	4798      	blx	r3
 800e056:	4603      	mov	r3, r0
    }
 800e058:	4618      	mov	r0, r3
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
    /**
     * Gets the minimum x coordinate for the graph.
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMinScaled();
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	33d4      	adds	r3, #212	@ 0xd4
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4610      	mov	r0, r2
 800e074:	4798      	blx	r3
 800e076:	4603      	mov	r3, r0
    }
 800e078:	4618      	mov	r0, r3
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
    /**
     * Gets the maximum x coordinate for the graph.
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMaxScaled();
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	33e0      	adds	r3, #224	@ 0xe0
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4610      	mov	r0, r2
 800e094:	4798      	blx	r3
 800e096:	4603      	mov	r3, r0
    }
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800e0a0:	b5b0      	push	{r4, r5, r7, lr}
 800e0a2:	b08c      	sub	sp, #48	@ 0x30
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	72fb      	strb	r3, [r7, #11]
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	33a4      	adds	r3, #164	@ 0xa4
 800e0b6:	681c      	ldr	r4, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	61fb      	str	r3, [r7, #28]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c4:	69ba      	ldr	r2, [r7, #24]
 800e0c6:	617a      	str	r2, [r7, #20]
 800e0c8:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	db0b      	blt.n	800e0e8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x48>
            return ((i * 2 + scale) / scale) / 2;
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	005a      	lsls	r2, r3, #1
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	441a      	add	r2, r3
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	fb92 f3f3 	sdiv	r3, r2, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da00      	bge.n	800e0e4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x44>
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	105b      	asrs	r3, r3, #1
 800e0e6:	e010      	b.n	800e10a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x6a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	07db      	lsls	r3, r3, #31
 800e0ee:	1a9b      	subs	r3, r3, r2
 800e0f0:	005b      	lsls	r3, r3, #1
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	1e5a      	subs	r2, r3, #1
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 800e100:	2b00      	cmp	r3, #0
 800e102:	da00      	bge.n	800e106 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x66>
 800e104:	3301      	adds	r3, #1
 800e106:	105b      	asrs	r3, r3, #1
 800e108:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e10a:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800e10c:	425d      	negs	r5, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800e114:	1e59      	subs	r1, r3, #1
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	62bb      	str	r3, [r7, #40]	@ 0x28
        return scaled2int(i, xScale);
 800e11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e124:	627a      	str	r2, [r7, #36]	@ 0x24
 800e126:	623b      	str	r3, [r7, #32]
        if (i >= 0)
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	db0b      	blt.n	800e146 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa6>
            return ((i * 2 + scale) / scale) / 2;
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e130:	005a      	lsls	r2, r3, #1
 800e132:	6a3b      	ldr	r3, [r7, #32]
 800e134:	441a      	add	r2, r3
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	fb92 f3f3 	sdiv	r3, r2, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	da00      	bge.n	800e142 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa2>
 800e140:	3301      	adds	r3, #1
 800e142:	105b      	asrs	r3, r3, #1
 800e144:	e010      	b.n	800e168 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc8>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e148:	4613      	mov	r3, r2
 800e14a:	07db      	lsls	r3, r3, #31
 800e14c:	1a9b      	subs	r3, r3, r2
 800e14e:	005b      	lsls	r3, r3, #1
 800e150:	461a      	mov	r2, r3
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	4413      	add	r3, r2
 800e156:	1e5a      	subs	r2, r3, #1
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	da00      	bge.n	800e164 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc4>
 800e162:	3301      	adds	r3, #1
 800e164:	105b      	asrs	r3, r3, #1
 800e166:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e168:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800e16a:	440b      	add	r3, r1
 800e16c:	461a      	mov	r2, r3
 800e16e:	4629      	mov	r1, r5
 800e170:	47a0      	blx	r4
    }
 800e172:	bf00      	nop
 800e174:	3730      	adds	r7, #48	@ 0x30
 800e176:	46bd      	mov	sp, r7
 800e178:	bdb0      	pop	{r4, r5, r7, pc}

0800e17a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b082      	sub	sp, #8
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactor(scale);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	4798      	blx	r3
    }
 800e194:	bf00      	nop
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
     * Set x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(int2scaledX(factor));
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	617a      	str	r2, [r7, #20]
 800e1b4:	683a      	ldr	r2, [r7, #0]
 800e1b6:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800e1b8:	697a      	ldr	r2, [r7, #20]
 800e1ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e1bc:	6939      	ldr	r1, [r7, #16]
 800e1be:	60f9      	str	r1, [r7, #12]
 800e1c0:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e1ca:	bf00      	nop
        setXAxisFactorScaled(int2scaledX(factor));
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	4798      	blx	r3
    }
 800e1d2:	bf00      	nop
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b082      	sub	sp, #8
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactor(scale);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	ed97 0a00 	vldr	s0, [r7]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	4798      	blx	r3
    }
 800e1f8:	bf00      	nop
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:

    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactorScaled(float2scaledX(factor));
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	61fa      	str	r2, [r7, #28]
 800e21a:	683a      	ldr	r2, [r7, #0]
 800e21c:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800e21e:	69fa      	ldr	r2, [r7, #28]
 800e220:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e222:	69b9      	ldr	r1, [r7, #24]
 800e224:	6179      	str	r1, [r7, #20]
 800e226:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	ee07 2a90 	vmov	s15, r2
 800e22e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e232:	ed97 7a05 	vldr	s14, [r7, #20]
 800e236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e23a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800e23e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24a:	db0a      	blt.n	800e262 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
            return (int)(fs + 0.5f);
 800e24c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e250:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e254:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e25c:	ee17 2a90 	vmov	r2, s15
 800e260:	e019      	b.n	800e296 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e262:	edd7 7a03 	vldr	s15, [r7, #12]
 800e266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e26a:	ee17 2a90 	vmov	r2, s15
 800e26e:	3a01      	subs	r2, #1
 800e270:	edd7 7a03 	vldr	s15, [r7, #12]
 800e274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e27c:	ed97 7a03 	vldr	s14, [r7, #12]
 800e280:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e284:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e28c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e290:	ee17 1a90 	vmov	r1, s15
 800e294:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800e296:	bf00      	nop
        setXAxisFactorScaled(float2scaledX(factor));
 800e298:	4611      	mov	r1, r2
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	4798      	blx	r3
    }
 800e29e:	bf00      	nop
 800e2a0:	3720      	adds	r7, #32
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @param  factor The x axis factor.
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
 800e2a6:	b480      	push	{r7}
 800e2a8:	b083      	sub	sp, #12
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	6039      	str	r1, [r7, #0]
    {
        xAxisFactor = factor;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	683a      	ldr	r2, [r7, #0]
 800e2b4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    }
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsInt();
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	4798      	blx	r3
 800e2da:	4603      	mov	r3, r0
    }
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     * Get x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
 800e2e4:	b590      	push	{r4, r7, lr}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisFactorScaled());
 800e2ec:	687c      	ldr	r4, [r7, #4]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	4798      	blx	r3
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	617c      	str	r4, [r7, #20]
 800e300:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	60fa      	str	r2, [r7, #12]
 800e30a:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	db0b      	blt.n	800e32a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	005a      	lsls	r2, r3, #1
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	441a      	add	r2, r3
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	da00      	bge.n	800e326 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x42>
 800e324:	3301      	adds	r3, #1
 800e326:	105b      	asrs	r3, r3, #1
 800e328:	e010      	b.n	800e34c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x68>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	4613      	mov	r3, r2
 800e32e:	07db      	lsls	r3, r3, #31
 800e330:	1a9b      	subs	r3, r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	461a      	mov	r2, r3
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4413      	add	r3, r2
 800e33a:	1e5a      	subs	r2, r3, #1
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	da00      	bge.n	800e348 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x64>
 800e346:	3301      	adds	r3, #1
 800e348:	105b      	asrs	r3, r3, #1
 800e34a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e34c:	bf00      	nop
    }
 800e34e:	4618      	mov	r0, r3
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	bd90      	pop	{r4, r7, pc}

0800e356 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
 800e356:	b580      	push	{r7, lr}
 800e358:	b082      	sub	sp, #8
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsFloat();
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	4798      	blx	r3
 800e36c:	eef0 7a40 	vmov.f32	s15, s0
    }
 800e370:	eeb0 0a67 	vmov.f32	s0, s15
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:

    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
 800e37a:	b590      	push	{r4, r7, lr}
 800e37c:	b087      	sub	sp, #28
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisFactorScaled());
 800e382:	687c      	ldr	r4, [r7, #4]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	4798      	blx	r3
 800e392:	4603      	mov	r3, r0
 800e394:	617c      	str	r4, [r7, #20]
 800e396:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e39c:	693a      	ldr	r2, [r7, #16]
 800e39e:	60fa      	str	r2, [r7, #12]
 800e3a0:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	ee07 3a90 	vmov	s15, r3
 800e3a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	ee07 3a90 	vmov	s15, r3
 800e3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800e3ba:	bf00      	nop
        return scaled2floatX(getXAxisFactorScaled());
 800e3bc:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e3c0:	eeb0 0a67 	vmov.f32	s0, s15
 800e3c4:	371c      	adds	r7, #28
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd90      	pop	{r4, r7, pc}

0800e3ca <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     *
     * @return The x axis factor (scaled).
     *
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
 800e3ca:	b480      	push	{r7}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
    {
        return xAxisFactor;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
    }
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
     * Set x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	617a      	str	r2, [r7, #20]
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e404:	6939      	ldr	r1, [r7, #16]
 800e406:	60f9      	str	r1, [r7, #12]
 800e408:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	68b9      	ldr	r1, [r7, #8]
 800e40e:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e412:	bf00      	nop
        setXAxisOffsetScaled(int2scaledX(offset));
 800e414:	4611      	mov	r1, r2
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	4798      	blx	r3
    }
 800e41a:	bf00      	nop
 800e41c:	3718      	adds	r7, #24
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
 800e422:	b580      	push	{r7, lr}
 800e424:	b088      	sub	sp, #32
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	61fa      	str	r2, [r7, #28]
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800e440:	69fa      	ldr	r2, [r7, #28]
 800e442:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e444:	69b9      	ldr	r1, [r7, #24]
 800e446:	6179      	str	r1, [r7, #20]
 800e448:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800e44a:	693a      	ldr	r2, [r7, #16]
 800e44c:	ee07 2a90 	vmov	s15, r2
 800e450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e454:	ed97 7a05 	vldr	s14, [r7, #20]
 800e458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e45c:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800e460:	edd7 7a03 	vldr	s15, [r7, #12]
 800e464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	db0a      	blt.n	800e484 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
            return (int)(fs + 0.5f);
 800e46e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e472:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e476:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e47a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e47e:	ee17 2a90 	vmov	r2, s15
 800e482:	e019      	b.n	800e4b8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e484:	edd7 7a03 	vldr	s15, [r7, #12]
 800e488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e48c:	ee17 2a90 	vmov	r2, s15
 800e490:	3a01      	subs	r2, #1
 800e492:	edd7 7a03 	vldr	s15, [r7, #12]
 800e496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e49e:	ed97 7a03 	vldr	s14, [r7, #12]
 800e4a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4a6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e4aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4b2:	ee17 1a90 	vmov	r1, s15
 800e4b6:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800e4b8:	bf00      	nop
        setXAxisOffsetScaled(float2scaledX(offset));
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	4798      	blx	r3
    }
 800e4c0:	bf00      	nop
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
    {
        xAxisOffset = offset;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    }
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     * Get x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
 800e4e6:	b590      	push	{r4, r7, lr}
 800e4e8:	b087      	sub	sp, #28
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisOffsetScaled());
 800e4ee:	687c      	ldr	r4, [r7, #4]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	4798      	blx	r3
 800e4fe:	4603      	mov	r3, r0
 800e500:	617c      	str	r4, [r7, #20]
 800e502:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	60fa      	str	r2, [r7, #12]
 800e50c:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	db0b      	blt.n	800e52c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	005a      	lsls	r2, r3, #1
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	441a      	add	r2, r3
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	da00      	bge.n	800e528 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x42>
 800e526:	3301      	adds	r3, #1
 800e528:	105b      	asrs	r3, r3, #1
 800e52a:	e010      	b.n	800e54e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x68>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	4613      	mov	r3, r2
 800e530:	07db      	lsls	r3, r3, #31
 800e532:	1a9b      	subs	r3, r3, r2
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	461a      	mov	r2, r3
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	4413      	add	r3, r2
 800e53c:	1e5a      	subs	r2, r3, #1
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	fb92 f3f3 	sdiv	r3, r2, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	da00      	bge.n	800e54a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x64>
 800e548:	3301      	adds	r3, #1
 800e54a:	105b      	asrs	r3, r3, #1
 800e54c:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e54e:	bf00      	nop
    }
 800e550:	4618      	mov	r0, r3
 800e552:	371c      	adds	r7, #28
 800e554:	46bd      	mov	sp, r7
 800e556:	bd90      	pop	{r4, r7, pc}

0800e558 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
 800e558:	b590      	push	{r4, r7, lr}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800e560:	687c      	ldr	r4, [r7, #4]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	4798      	blx	r3
 800e570:	4603      	mov	r3, r0
 800e572:	617c      	str	r4, [r7, #20]
 800e574:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	60fa      	str	r2, [r7, #12]
 800e57e:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	ee07 3a90 	vmov	s15, r3
 800e586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	ee07 3a90 	vmov	s15, r3
 800e590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e594:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800e598:	bf00      	nop
        return scaled2floatX(getXAxisOffsetScaled());
 800e59a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e59e:	eeb0 0a67 	vmov.f32	s0, s15
 800e5a2:	371c      	adds	r7, #28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd90      	pop	{r4, r7, pc}

0800e5a8 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     *
     * @return The x axis offset (scaled).
     *
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
    {
        return xAxisOffset;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    }
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	370c      	adds	r7, #12
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
	...

0800e5c4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:

    virtual int indexToDataPointXScaled(int16_t index) const
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800e5d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	db06      	blt.n	800e5e6 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800e5de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	db06      	blt.n	800e5f4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>
 800e5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e624 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x60>)
 800e5e8:	4a0f      	ldr	r2, [pc, #60]	@ (800e628 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x64>)
 800e5ea:	f240 6133 	movw	r1, #1587	@ 0x633
 800e5ee:	480f      	ldr	r0, [pc, #60]	@ (800e62c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x68>)
 800e5f0:	f01f fa10 	bl	802da14 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e602:	4611      	mov	r1, r2
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	4798      	blx	r3
 800e608:	4602      	mov	r2, r0
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800e610:	fb03 f202 	mul.w	r2, r3, r2
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e61a:	4413      	add	r3, r2
    }
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	0802f3f4 	.word	0x0802f3f4
 800e628:	0802f418 	.word	0x0802f418
 800e62c:	0802f468 	.word	0x0802f468

0800e630 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:

    virtual int indexToDataPointYScaled(int16_t index) const
 800e630:	b590      	push	{r4, r7, lr}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	460b      	mov	r3, r1
 800e63a:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800e63c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e640:	2b00      	cmp	r3, #0
 800e642:	db06      	blt.n	800e652 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x22>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800e64a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e64e:	429a      	cmp	r2, r3
 800e650:	db06      	blt.n	800e660 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>
 800e652:	4b0e      	ldr	r3, [pc, #56]	@ (800e68c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x5c>)
 800e654:	4a0e      	ldr	r2, [pc, #56]	@ (800e690 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x60>)
 800e656:	f240 6139 	movw	r1, #1593	@ 0x639
 800e65a:	480e      	ldr	r0, [pc, #56]	@ (800e694 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x64>)
 800e65c:	f01f f9da 	bl	802da14 <__assert_func>
        return yValues[dataIndex(index)];
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 4144 	ldr.w	r4, [r3, #324]	@ 0x144
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e674:	4611      	mov	r1, r2
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	4798      	blx	r3
 800e67a:	4603      	mov	r3, r0
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4423      	add	r3, r4
 800e680:	681b      	ldr	r3, [r3, #0]
    }
 800e682:	4618      	mov	r0, r3
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	bd90      	pop	{r4, r7, pc}
 800e68a:	bf00      	nop
 800e68c:	0802f3f4 	.word	0x0802f3f4
 800e690:	0802f4c4 	.word	0x0802f4c4
 800e694:	0802f468 	.word	0x0802f468

0800e698 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (int32_t)index;
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 800e698:	b590      	push	{r4, r7, lr}
 800e69a:	b089      	sub	sp, #36	@ 0x24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800e6ac:	681c      	ldr	r4, [r3, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	61fb      	str	r3, [r7, #28]
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ba:	69ba      	ldr	r2, [r7, #24]
 800e6bc:	617a      	str	r2, [r7, #20]
 800e6be:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	db0b      	blt.n	800e6de <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	005a      	lsls	r2, r3, #1
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	441a      	add	r2, r3
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	fb92 f3f3 	sdiv	r3, r2, r3
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	da00      	bge.n	800e6da <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x42>
 800e6d8:	3301      	adds	r3, #1
 800e6da:	105b      	asrs	r3, r3, #1
 800e6dc:	e010      	b.n	800e700 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x68>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	07db      	lsls	r3, r3, #31
 800e6e4:	1a9b      	subs	r3, r3, r2
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	1e5a      	subs	r2, r3, #1
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	fb92 f3f3 	sdiv	r3, r2, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	da00      	bge.n	800e6fc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x64>
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	105b      	asrs	r3, r3, #1
 800e6fe:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e700:	bf00      	nop
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800e702:	b21b      	sxth	r3, r3
 800e704:	4619      	mov	r1, r3
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	47a0      	blx	r4
 800e70a:	4602      	mov	r2, r0
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800e712:	fb03 f202 	mul.w	r2, r3, r2
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e71c:	4413      	add	r3, r2
    }
 800e71e:	4618      	mov	r0, r3
 800e720:	3724      	adds	r7, #36	@ 0x24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd90      	pop	{r4, r7, pc}

0800e726 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
 800e726:	b580      	push	{r7, lr}
 800e728:	b082      	sub	sp, #8
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleX();
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe ff1e 	bl	800d572 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>
 800e736:	4603      	mov	r3, r0
    }
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:

    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleY();
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe ff1d 	bl	800d58a <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>
 800e750:	4603      	mov	r3, r0
    }
 800e752:	4618      	mov	r0, r3
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(scale);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	4798      	blx	r3
    }
 800e774:	bf00      	nop
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:

    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorScaled();
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	4798      	blx	r3
 800e792:	4603      	mov	r3, r0
    }
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenXQ5(int2scaledX(index));
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e7ba:	6179      	str	r1, [r7, #20]
 800e7bc:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e7c2:	6939      	ldr	r1, [r7, #16]
 800e7c4:	60f9      	str	r1, [r7, #12]
 800e7c6:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	68b9      	ldr	r1, [r7, #8]
 800e7cc:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e7d0:	bf00      	nop
        return valueToScreenXQ5(int2scaledX(index));
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	4798      	blx	r3
 800e7d6:	4603      	mov	r3, r0
    }
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3718      	adds	r7, #24
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800e7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800e7ec:	687e      	ldr	r6, [r7, #4]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800e7f6:	681c      	ldr	r4, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e80c:	4611      	mov	r1, r2
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	4798      	blx	r3
 800e812:	4603      	mov	r3, r0
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	442b      	add	r3, r5
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4619      	mov	r1, r3
 800e81c:	4630      	mov	r0, r6
 800e81e:	47a0      	blx	r4
 800e820:	4603      	mov	r3, r0
    }
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e82c <_ZN8touchgfx16DynamicDataGraphD1Ev>:
class DynamicDataGraph : public AbstractDataGraph
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	4a05      	ldr	r2, [pc, #20]	@ (800e84c <_ZN8touchgfx16DynamicDataGraphD1Ev+0x20>)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fb77 	bl	800df30 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4618      	mov	r0, r3
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	080317bc 	.word	0x080317bc

0800e850 <_ZN8touchgfx16DynamicDataGraphD0Ev>:
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff ffe7 	bl	800e82c <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800e85e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f01e fb75 	bl	802cf52 <_ZdlPvj>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <_ZN8touchgfx15GraphScrollDataC1EsPi>:
     * Initializes a new instance of the GraphScrollData class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Pointer to memory with room for capacity elements of type T.
     */
    GraphScrollData(int16_t capacity, int* values)
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	460b      	mov	r3, r1
 800e87e:	607a      	str	r2, [r7, #4]
 800e880:	817b      	strh	r3, [r7, #10]
        : DynamicDataGraph(capacity, values), current(0)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff fb8e 	bl	800dfac <_ZN8touchgfx16DynamicDataGraphC1EsPi>
 800e890:	4a05      	ldr	r2, [pc, #20]	@ (800e8a8 <_ZN8touchgfx15GraphScrollDataC1EsPi+0x34>)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
    {
    }
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	08031d98 	.word	0x08031d98

0800e8ac <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual void beforeAddValue();

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	807b      	strh	r3, [r7, #2]
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f9b3 211e 	ldrsh.w	r2, [r3, #286]	@ 0x11e
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	@ 0x11c
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	db0f      	blt.n	800e8e8 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x3c>
 800e8c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	f9b2 214c 	ldrsh.w	r2, [r2, #332]	@ 0x14c
 800e8d2:	4413      	add	r3, r2
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	f9b2 211c 	ldrsh.w	r2, [r2, #284]	@ 0x11c
 800e8da:	fb93 f1f2 	sdiv	r1, r3, r2
 800e8de:	fb01 f202 	mul.w	r2, r1, r2
 800e8e2:	1a9b      	subs	r3, r3, r2
 800e8e4:	b21b      	sxth	r3, r3
 800e8e6:	e001      	b.n	800e8ec <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x40>
 800e8e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	807b      	strh	r3, [r7, #2]
 800e904:	887b      	ldrh	r3, [r7, #2]
 800e906:	81fb      	strh	r3, [r7, #14]
 800e908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e90c:	015a      	lsls	r2, r3, #5
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	4611      	mov	r1, r2
 800e914:	4618      	mov	r0, r3
 800e916:	f7fe fd4b 	bl	800d3b0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e91a:	68bb      	ldr	r3, [r7, #8]
    {
        return CWRUtil::toQ5(index);
    }
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	683a      	ldr	r2, [r7, #0]
 800e932:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	78fa      	ldrb	r2, [r7, #3]
 800e950:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800e97a:	b590      	push	{r4, r7, lr}
 800e97c:	b085      	sub	sp, #20
 800e97e:	af02      	add	r7, sp, #8
 800e980:	6078      	str	r0, [r7, #4]
 800e982:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	4618      	mov	r0, r3
 800e988:	f7fb fed4 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e98c:	4603      	mov	r3, r0
 800e98e:	461c      	mov	r4, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	4618      	mov	r0, r3
 800e994:	f7fe fc8d 	bl	800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800e998:	4603      	mov	r3, r0
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	4623      	mov	r3, r4
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7fb fdfd 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
    }
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd90      	pop	{r4, r7, pc}

0800e9b0 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7fb fdda 	bl	800a574 <_ZN8touchgfx4RectC1Ev>
    }
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	4a05      	ldr	r2, [pc, #20]	@ (800e9e8 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fc fa95 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	08031744 	.word	0x08031744

0800e9ec <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff ffe7 	bl	800e9c8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800e9fa:	212c      	movs	r1, #44	@ 0x2c
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f01e faa8 	bl	802cf52 <_ZdlPvj>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4618      	mov	r0, r3
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 */
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
        : CanvasWidget()
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f007 fc2a 	bl	8016270 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800ea1c:	4a03      	ldr	r2, [pc, #12]	@ (800ea2c <_ZN8touchgfx20AbstractGraphElementC1Ev+0x20>)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	601a      	str	r2, [r3, #0]
    {
    }
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4618      	mov	r0, r3
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	08030770 	.word	0x08030770

0800ea30 <_ZN8touchgfx20AbstractGraphElementD1Ev>:
class AbstractGraphElement : public CanvasWidget
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	4a05      	ldr	r2, [pc, #20]	@ (800ea50 <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7ff ffc1 	bl	800e9c8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	08030770 	.word	0x08030770

0800ea54 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff ffe7 	bl	800ea30 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800ea62:	212c      	movs	r1, #44	@ 0x2c
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f01e fa74 	bl	802cf52 <_ZdlPvj>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 * not use CWR (Canvas Widget Renderer).
 */
class AbstractGraphElementNoCWR : public AbstractGraphElement
{
public:
    AbstractGraphElementNoCWR()
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
        : color(0)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff ffc4 	bl	800ea0c <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800ea84:	4a06      	ldr	r2, [pc, #24]	@ (800eaa0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x2c>)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	332c      	adds	r3, #44	@ 0x2c
 800ea8e:	2100      	movs	r1, #0
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fd ffb1 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	080306e8 	.word	0x080306e8

0800eaa4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @param  newColor The new color.
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 800eab4:	bf00      	nop
 800eab6:	370c      	adds	r7, #12
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     *
     * @return The color.
     *
     * @see setColor
     */
    virtual colortype getColor() const
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
    {
        return color;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
 800eacc:	4618      	mov	r0, r3
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
    {
        return true;
 800eae2:	2301      	movs	r3, #1
    }
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
     * @param [in,out] r The rectangle.
     */
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
    {
    }
 800eafa:	bf00      	nop
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
	...

0800eb08 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
class AbstractGraphElementNoCWR : public AbstractGraphElement
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	4a05      	ldr	r2, [pc, #20]	@ (800eb28 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ff89 	bl	800ea30 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4618      	mov	r0, r3
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	080306e8 	.word	0x080306e8

0800eb2c <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ffe7 	bl	800eb08 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800eb3a:	2130      	movs	r1, #48	@ 0x30
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f01e fa08 	bl	802cf52 <_ZdlPvj>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
{
public:
    /** Default constructor. */
    GraphElementGridBase()
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff ff8c 	bl	800ea74 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800eb5c:	4a0a      	ldr	r2, [pc, #40]	@ (800eb88 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x3c>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220a      	movs	r2, #10
 800eb6c:	635a      	str	r2, [r3, #52]	@ 0x34
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    {
    }
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	08031b00 	.word	0x08031b00

0800eb8c <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
    FORCE_INLINE_FUNCTION uint8_t getLineWidth() const
    {
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	807b      	strh	r3, [r7, #2]
    {
    }
 800eb98:	bf00      	nop
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @param  graph The graph.
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2a>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	3380      	adds	r3, #128	@ 0x80
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6839      	ldr	r1, [r7, #0]
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	4798      	blx	r3
 800ebca:	4603      	mov	r3, r0
 800ebcc:	e000      	b.n	800ebd0 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2c>
 800ebce:	2300      	movs	r3, #0
    }
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridX : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 800ebe2:	6879      	ldr	r1, [r7, #4]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebec:	6179      	str	r1, [r7, #20]
 800ebee:	6839      	ldr	r1, [r7, #0]
 800ebf0:	6139      	str	r1, [r7, #16]
 800ebf2:	60fa      	str	r2, [r7, #12]
 800ebf4:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	338c      	adds	r3, #140	@ 0x8c
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6938      	ldr	r0, [r7, #16]
 800ec00:	4798      	blx	r3
 800ec02:	4603      	mov	r3, r0
 800ec04:	461a      	mov	r2, r3
 800ec06:	68b9      	ldr	r1, [r7, #8]
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f007 ff57 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	bf00      	nop
    }
 800ec12:	4618      	mov	r0, r3
 800ec14:	3718      	adds	r7, #24
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800ec1a:	b5b0      	push	{r4, r5, r7, lr}
 800ec1c:	b08a      	sub	sp, #40	@ 0x28
 800ec1e:	af02      	add	r7, sp, #8
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	60b9      	str	r1, [r7, #8]
 800ec24:	607a      	str	r2, [r7, #4]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	617b      	str	r3, [r7, #20]
        return topPadding;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f9b3 4114 	ldrsh.w	r4, [r3, #276]	@ 0x114
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth();
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	3338      	adds	r3, #56	@ 0x38
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fb fd7b 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	461d      	mov	r5, r3
 800ec42:	bf00      	nop
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	3338      	adds	r3, #56	@ 0x38
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe fb30 	bl	800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ec52:	4603      	mov	r3, r0
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800ec5c:	b299      	uxth	r1, r3
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	440b      	add	r3, r1
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	b21b      	sxth	r3, r3
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	462b      	mov	r3, r5
 800ec74:	4622      	mov	r2, r4
 800ec76:	2100      	movs	r1, #0
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f7fb fc92 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
    }
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	3720      	adds	r7, #32
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bdb0      	pop	{r4, r5, r7, pc}

0800ec86 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b086      	sub	sp, #24
 800ec8a:	af02      	add	r7, sp, #8
 800ec8c:	60f8      	str	r0, [r7, #12]
 800ec8e:	60b9      	str	r1, [r7, #8]
 800ec90:	4611      	mov	r1, r2
 800ec92:	461a      	mov	r2, r3
 800ec94:	460b      	mov	r3, r1
 800ec96:	80fb      	strh	r3, [r7, #6]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(pos, start, width, length);
 800ec9c:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800eca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eca4:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800eca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	4603      	mov	r3, r0
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7fb fc76 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
    }
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
 800ecc6:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeXMinScaled();
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	33d4      	adds	r3, #212	@ 0xd4
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6838      	ldr	r0, [r7, #0]
 800ecd2:	4798      	blx	r3
 800ecd4:	4603      	mov	r3, r0
    }
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b082      	sub	sp, #8
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
 800ece6:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeXMaxScaled();
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	33e0      	adds	r3, #224	@ 0xe0
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	6838      	ldr	r0, [r7, #0]
 800ecf2:	4798      	blx	r3
 800ecf4:	4603      	mov	r3, r0
    }
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 800ecfe:	b480      	push	{r7}
 800ed00:	b085      	sub	sp, #20
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	60fb      	str	r3, [r7, #12]
        return topPadding;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 800ed12:	4618      	mov	r0, r3
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr

0800ed1e <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b084      	sub	sp, #16
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
 800ed26:	6039      	str	r1, [r7, #0]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3338      	adds	r3, #56	@ 0x38
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe fabe 	bl	800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ed36:	4603      	mov	r3, r0
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800ed40:	b299      	uxth	r1, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	440b      	add	r3, r1
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 800ed54:	4618      	mov	r0, r3
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3338      	adds	r3, #56	@ 0x38
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fb fcd0 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ed94:	4603      	mov	r3, r0
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800ed9e:	b299      	uxth	r1, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	440b      	add	r3, r1
 800edaa:	b29b      	uxth	r3, r3
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	b29b      	uxth	r3, r3
 800edb0:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800edba:	b580      	push	{r7, lr}
 800edbc:	b088      	sub	sp, #32
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	60f8      	str	r0, [r7, #12]
 800edc2:	60b9      	str	r1, [r7, #8]
 800edc4:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenXQ5(graph, value);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	61fb      	str	r3, [r7, #28]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	61bb      	str	r3, [r7, #24]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenXQ5(x);
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6979      	ldr	r1, [r7, #20]
 800edde:	69b8      	ldr	r0, [r7, #24]
 800ede0:	4798      	blx	r3
 800ede2:	4603      	mov	r3, r0
 800ede4:	bf00      	nop
    }
 800ede6:	4618      	mov	r0, r3
 800ede8:	3720      	adds	r7, #32
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800edee:	b580      	push	{r7, lr}
 800edf0:	b086      	sub	sp, #24
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800edf8:	6879      	ldr	r1, [r7, #4]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee02:	6179      	str	r1, [r7, #20]
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6139      	str	r1, [r7, #16]
 800ee08:	60fa      	str	r2, [r7, #12]
 800ee0a:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	3394      	adds	r3, #148	@ 0x94
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6938      	ldr	r0, [r7, #16]
 800ee16:	4798      	blx	r3
 800ee18:	4603      	mov	r3, r0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	68b9      	ldr	r1, [r7, #8]
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f007 fe4c 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800ee24:	4603      	mov	r3, r0
 800ee26:	bf00      	nop
    }
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3718      	adds	r7, #24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800ee30:	b5b0      	push	{r4, r5, r7, lr}
 800ee32:	b08a      	sub	sp, #40	@ 0x28
 800ee34:	af02      	add	r7, sp, #8
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	617b      	str	r3, [r7, #20]
        return leftPadding;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	f9b3 4116 	ldrsh.w	r4, [r3, #278]	@ 0x116
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	3338      	adds	r3, #56	@ 0x38
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fb fc70 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ee54:	4603      	mov	r3, r0
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800ee5e:	b299      	uxth	r1, r3
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	440b      	add	r3, r1
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	b21d      	sxth	r5, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight();
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	3338      	adds	r3, #56	@ 0x38
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe fa19 	bl	800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ee80:	4603      	mov	r3, r0
 800ee82:	bf00      	nop
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	462b      	mov	r3, r5
 800ee88:	2200      	movs	r2, #0
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f7fb fb88 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
    }
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	3720      	adds	r7, #32
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bdb0      	pop	{r4, r5, r7, pc}

0800ee9a <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b086      	sub	sp, #24
 800ee9e:	af02      	add	r7, sp, #8
 800eea0:	60f8      	str	r0, [r7, #12]
 800eea2:	60b9      	str	r1, [r7, #8]
 800eea4:	4611      	mov	r1, r2
 800eea6:	461a      	mov	r2, r3
 800eea8:	460b      	mov	r3, r1
 800eeaa:	80fb      	strh	r3, [r7, #6]
 800eeac:	4613      	mov	r3, r2
 800eeae:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(start, pos, length, width);
 800eeb0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800eeb4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800eeb8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800eebc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800eec0:	9300      	str	r3, [sp, #0]
 800eec2:	4603      	mov	r3, r0
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f7fb fb6c 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
    }
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMinScaled();
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	33ec      	adds	r3, #236	@ 0xec
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6838      	ldr	r0, [r7, #0]
 800eee6:	4798      	blx	r3
 800eee8:	4603      	mov	r3, r0
    }
 800eeea:	4618      	mov	r0, r3
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b082      	sub	sp, #8
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMaxScaled();
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	33f8      	adds	r3, #248	@ 0xf8
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6838      	ldr	r0, [r7, #0]
 800ef06:	4798      	blx	r3
 800ef08:	4603      	mov	r3, r0
    }
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 800ef12:	b480      	push	{r7}
 800ef14:	b085      	sub	sp, #20
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	6039      	str	r1, [r7, #0]
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800ef26:	4618      	mov	r0, r3
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
 800ef3a:	6039      	str	r1, [r7, #0]
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	3338      	adds	r3, #56	@ 0x38
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fb fbf5 	bl	800a734 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800ef54:	b299      	uxth	r1, r3
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	440b      	add	r3, r1
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	1ad3      	subs	r3, r2, r3
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	60fb      	str	r3, [r7, #12]
        return topPadding;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 800ef84:	4618      	mov	r0, r3
 800ef86:	3714      	adds	r7, #20
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3338      	adds	r3, #56	@ 0x38
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe f985 	bl	800d2b2 <_ZNK8touchgfx8Drawable9getHeightEv>
 800efa8:	4603      	mov	r3, r0
 800efaa:	b29a      	uxth	r2, r3
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800efb2:	b299      	uxth	r1, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800efba:	b29b      	uxth	r3, r3
 800efbc:	440b      	add	r3, r1
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 800efc6:	4618      	mov	r0, r3
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800efce:	b580      	push	{r7, lr}
 800efd0:	b088      	sub	sp, #32
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	60f8      	str	r0, [r7, #12]
 800efd6:	60b9      	str	r1, [r7, #8]
 800efd8:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenYQ5(graph, value);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	61fb      	str	r3, [r7, #28]
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	61bb      	str	r3, [r7, #24]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenYQ5(y);
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6979      	ldr	r1, [r7, #20]
 800eff2:	69b8      	ldr	r0, [r7, #24]
 800eff4:	4798      	blx	r3
 800eff6:	4603      	mov	r3, r0
 800eff8:	bf00      	nop
    }
 800effa:	4618      	mov	r0, r3
 800effc:	3720      	adds	r7, #32
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <_ZN8touchgfx16GraphElementLineC1Ev>:
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
        : lineWidth(2)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff fcfc 	bl	800ea0c <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800f014:	4a05      	ldr	r2, [pc, #20]	@ (800f02c <_ZN8touchgfx16GraphElementLineC1Ev+0x28>)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	601a      	str	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2202      	movs	r2, #2
 800f01e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
    }
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	08031a84 	.word	0x08031a84

0800f030 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	460b      	mov	r3, r1
 800f03a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f03c:	4a06      	ldr	r2, [pc, #24]	@ (800f058 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	601a      	str	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	887a      	ldrh	r2, [r7, #2]
 800f046:	809a      	strh	r2, [r3, #4]
    }
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4618      	mov	r0, r3
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	0802ff08 	.word	0x0802ff08

0800f05c <_ZN8touchgfx23AbstractGraphDecorationC1Ev>:
#include <touchgfx/widgets/graph/GraphElements.hpp>

namespace touchgfx
{
/** Helper class used for adding labels around the graph. Currently empty. */
class AbstractGraphDecoration : public AbstractGraphElementNoCWR
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fd04 	bl	800ea74 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800f06c:	4a03      	ldr	r2, [pc, #12]	@ (800f07c <_ZN8touchgfx23AbstractGraphDecorationC1Ev+0x20>)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	080304f0 	.word	0x080304f0

0800f080 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>:
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	4a05      	ldr	r2, [pc, #20]	@ (800f0a0 <_ZN8touchgfx23AbstractGraphDecorationD1Ev+0x20>)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff fd39 	bl	800eb08 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4618      	mov	r0, r3
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	080304f0 	.word	0x080304f0

0800f0a4 <_ZN8touchgfx23AbstractGraphDecorationD0Ev>:
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7ff ffe7 	bl	800f080 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>
 800f0b2:	2130      	movs	r1, #48	@ 0x30
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f01d ff4c 	bl	802cf52 <_ZdlPvj>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	2330      	movs	r3, #48	@ 0x30
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	f01e ffa9 	bl	802e02c <memset>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7ff ffbd 	bl	800f05c <_ZN8touchgfx23AbstractGraphDecorationC1Ev>
 800f0e2:	4a12      	ldr	r2, [pc, #72]	@ (800f12c <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x68>)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	601a      	str	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	635a      	str	r2, [r3, #52]	@ 0x34
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	3338      	adds	r3, #56	@ 0x38
 800f0f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7ff ff97 	bl	800f030 <_ZN8touchgfx9TypedTextC1Et>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	222e      	movs	r2, #46	@ 0x2e
 800f116:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	08031cf8 	.word	0x08031cf8

0800f130 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	889a      	ldrh	r2, [r3, #4]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	809a      	strh	r2, [r3, #4]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	370c      	adds	r7, #12
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fe f8ce 	bl	800d2fc <_ZN8touchgfx15AbstractPainterC1Ev>
 800f160:	4a26      	ldr	r2, [pc, #152]	@ (800f1fc <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	2302      	movs	r3, #2
 800f168:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800f16a:	f7fb fce9 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 800f16e:	4603      	mov	r3, r0
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	322c      	adds	r2, #44	@ 0x2c
 800f174:	6812      	ldr	r2, [r2, #0]
 800f176:	4618      	mov	r0, r3
 800f178:	4790      	blx	r2
 800f17a:	4603      	mov	r3, r0
 800f17c:	461a      	mov	r2, r3
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
 800f180:	4293      	cmp	r3, r2
 800f182:	bf0c      	ite	eq
 800f184:	2301      	moveq	r3, #1
 800f186:	2300      	movne	r3, #0
 800f188:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800f18a:	f7fb fccd 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 800f18e:	4603      	mov	r3, r0
 800f190:	4618      	mov	r0, r3
 800f192:	f7fe f8a7 	bl	800d2e4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	bf14      	ite	ne
 800f19c:	2301      	movne	r3, #1
 800f19e:	2300      	moveq	r3, #0
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d01b      	beq.n	800f1de <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800f1a6:	f7fb fcbf 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7fe f899 	bl	800d2e4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	322c      	adds	r2, #44	@ 0x2c
 800f1b8:	6812      	ldr	r2, [r2, #0]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	4790      	blx	r2
 800f1be:	4603      	mov	r3, r0
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	7bfb      	ldrb	r3, [r7, #15]
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	bf0c      	ite	eq
 800f1c8:	2301      	moveq	r3, #1
 800f1ca:	2300      	movne	r3, #0
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	bf14      	ite	ne
 800f1d8:	2301      	movne	r3, #1
 800f1da:	2300      	moveq	r3, #0
 800f1dc:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d105      	bne.n	800f1f0 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 800f1e4:	4b06      	ldr	r3, [pc, #24]	@ (800f200 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 800f1e6:	4a07      	ldr	r2, [pc, #28]	@ (800f204 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 800f1e8:	2128      	movs	r1, #40	@ 0x28
 800f1ea:	4807      	ldr	r0, [pc, #28]	@ (800f208 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 800f1ec:	f01e fc12 	bl	802da14 <__assert_func>
    }
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	080304d0 	.word	0x080304d0
 800f200:	0802f514 	.word	0x0802f514
 800f204:	0802f578 	.word	0x0802f578
 800f208:	0802f5b8 	.word	0x0802f5b8

0800f20c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
    {
 800f216:	4a08      	ldr	r2, [pc, #32]	@ (800f238 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	601a      	str	r2, [r3, #0]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3304      	adds	r3, #4
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe f82c 	bl	800d27e <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800f226:	6839      	ldr	r1, [r7, #0]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 f827 	bl	800f27c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	080304bc 	.word	0x080304bc

0800f23c <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
    {
 800f244:	4a04      	ldr	r2, [pc, #16]	@ (800f258 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	601a      	str	r2, [r3, #0]
    }
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	080304bc 	.word	0x080304bc

0800f25c <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
    }
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff ffe9 	bl	800f23c <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f26a:	2108      	movs	r1, #8
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f01d fe70 	bl	802cf52 <_ZdlPvj>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	605a      	str	r2, [r3, #4]
    }
 800f28c:	bf00      	nop
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	4a05      	ldr	r2, [pc, #20]	@ (800f2b8 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fe f83b 	bl	800d324 <_ZN8touchgfx15AbstractPainterD1Ev>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	080304d0 	.word	0x080304d0

0800f2bc <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff ffe7 	bl	800f298 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f2ca:	2108      	movs	r1, #8
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f01d fe40 	bl	802cf52 <_ZdlPvj>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7ff ff31 	bl	800f150 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	6839      	ldr	r1, [r7, #0]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff ff89 	bl	800f20c <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800f2fa:	4a05      	ldr	r2, [pc, #20]	@ (800f310 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	601a      	str	r2, [r3, #0]
 800f300:	4a04      	ldr	r2, [pc, #16]	@ (800f314 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	609a      	str	r2, [r3, #8]
    {
    }
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4618      	mov	r0, r3
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	0803170c 	.word	0x0803170c
 800f314:	08031730 	.word	0x08031730

0800f318 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3308      	adds	r3, #8
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff ffa7 	bl	800f27c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800f332:	f107 0314 	add.w	r3, r7, #20
 800f336:	4618      	mov	r0, r3
 800f338:	f7fd ffaf 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 800f33c:	4603      	mov	r3, r0
 800f33e:	0c1b      	lsrs	r3, r3, #16
 800f340:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	741a      	strb	r2, [r3, #16]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 800f34a:	f107 0310 	add.w	r3, r7, #16
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fd ffa3 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 800f354:	4603      	mov	r3, r0
 800f356:	0a1b      	lsrs	r3, r3, #8
 800f358:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	745a      	strb	r2, [r3, #17]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800f362:	f107 030c 	add.w	r3, r7, #12
 800f366:	4618      	mov	r0, r3
 800f368:	f7fd ff97 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 800f36c:	4603      	mov	r3, r0
 800f36e:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	749a      	strb	r2, [r3, #18]
    }
 800f374:	bf00      	nop
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800f37c:	f1a0 0008 	sub.w	r0, r0, #8
 800f380:	e7ca      	b.n	800f318 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
	...

0800f384 <_ZN15Screen3ViewBase9function1Ev>:
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 800f384:	b580      	push	{r7, lr}
 800f386:	b08a      	sub	sp, #40	@ 0x28
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen3
    	dynamicGraph1.addDataPoint(sineValue);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800f392:	4b31      	ldr	r3, [pc, #196]	@ (800f458 <_ZN15Screen3ViewBase9function1Ev+0xd4>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	623a      	str	r2, [r7, #32]
 800f398:	61fb      	str	r3, [r7, #28]
        return addDataPointScaled(float2scaledY(y));
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	61bb      	str	r3, [r7, #24]
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	617b      	str	r3, [r7, #20]
        return float2scaled(f, yScale);
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3a6:	697a      	ldr	r2, [r7, #20]
 800f3a8:	613a      	str	r2, [r7, #16]
 800f3aa:	60fb      	str	r3, [r7, #12]
        const float fs = f * (float)scale;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	ee07 3a90 	vmov	s15, r3
 800f3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3b6:	ed97 7a04 	vldr	s14, [r7, #16]
 800f3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3be:	edc7 7a02 	vstr	s15, [r7, #8]
        if (fs >= 0)
 800f3c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ce:	db0a      	blt.n	800f3e6 <_ZN15Screen3ViewBase9function1Ev+0x62>
            return (int)(fs + 0.5f);
 800f3d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f3d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3e0:	ee17 3a90 	vmov	r3, s15
 800f3e4:	e019      	b.n	800f41a <_ZN15Screen3ViewBase9function1Ev+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f3e6:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3ee:	ee17 3a90 	vmov	r3, s15
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f400:	ed97 7a02 	vldr	s14, [r7, #8]
 800f404:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f408:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f40c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f414:	ee17 2a90 	vmov	r2, s15
 800f418:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 800f41a:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 800f41c:	4619      	mov	r1, r3
 800f41e:	6a38      	ldr	r0, [r7, #32]
 800f420:	f007 fba5 	bl	8016b6e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 800f424:	bf00      	nop

    	    if (dynamicGraph1.getUsedCapacity() >= 1000) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	33cc      	adds	r3, #204	@ 0xcc
 800f42a:	627b      	str	r3, [r7, #36]	@ 0x24
        return usedCapacity;
 800f42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42e:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800f432:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800f436:	4293      	cmp	r3, r2
 800f438:	bfcc      	ite	gt
 800f43a:	2301      	movgt	r3, #1
 800f43c:	2300      	movle	r3, #0
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	2b00      	cmp	r3, #0
 800f442:	d004      	beq.n	800f44e <_ZN15Screen3ViewBase9function1Ev+0xca>
    	        // Clear the entire graph buffer when it exceeds the limit
    	        dynamicGraph1.clear();
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	33cc      	adds	r3, #204	@ 0xcc
 800f448:	4618      	mov	r0, r3
 800f44a:	f008 fc6f 	bl	8017d2c <_ZN8touchgfx15GraphScrollData5clearEv>
    	    }
    }
 800f44e:	bf00      	nop
 800f450:	3728      	adds	r7, #40	@ 0x28
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20000948 	.word	0x20000948

0800f45c <_ZN15Screen3ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f464:	f00b fe0c 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 800f468:	4603      	mov	r3, r0
    }
 800f46a:	4618      	mov	r0, r3
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	4a05      	ldr	r2, [pc, #20]	@ (800f494 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	f7fd fb09 	bl	800ca9c <_ZN8touchgfx6ScreenD1Ev>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4618      	mov	r0, r3
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	08030488 	.word	0x08030488

0800f498 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff ffe7 	bl	800f474 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 800f4a6:	2140      	movs	r1, #64	@ 0x40
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f01d fd52 	bl	802cf52 <_ZdlPvj>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <_ZN8touchgfx15GraphScrollDataD1Ev>:
class GraphScrollData : public DynamicDataGraph
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	4a05      	ldr	r2, [pc, #20]	@ (800f4d8 <_ZN8touchgfx15GraphScrollDataD1Ev+0x20>)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff f9af 	bl	800e82c <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	08031d98 	.word	0x08031d98

0800f4dc <_ZN8touchgfx15GraphScrollDataD0Ev>:
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7ff ffe7 	bl	800f4b8 <_ZN8touchgfx15GraphScrollDataD1Ev>
 800f4ea:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f01d fd2f 	bl	802cf52 <_ZdlPvj>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
	...

0800f500 <_ZN8touchgfx11GraphScrollILs400EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	4a05      	ldr	r2, [pc, #20]	@ (800f520 <_ZN8touchgfx11GraphScrollILs400EED1Ev+0x20>)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	601a      	str	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff ffd1 	bl	800f4b8 <_ZN8touchgfx15GraphScrollDataD1Ev>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4618      	mov	r0, r3
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	080302ec 	.word	0x080302ec

0800f524 <_ZN8touchgfx11GraphScrollILs400EED0Ev>:
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff ffe7 	bl	800f500 <_ZN8touchgfx11GraphScrollILs400EED1Ev>
 800f532:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f01d fd0b 	bl	802cf52 <_ZdlPvj>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4618      	mov	r0, r3
 800f540:	3708      	adds	r7, #8
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
class GraphElementGridBase : public AbstractGraphElementNoCWR
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	4a05      	ldr	r2, [pc, #20]	@ (800f568 <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	601a      	str	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4618      	mov	r0, r3
 800f55a:	f7ff fad5 	bl	800eb08 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	08031b00 	.word	0x08031b00

0800f56c <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7ff ffe7 	bl	800f548 <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800f57a:	2140      	movs	r1, #64	@ 0x40
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f01d fce8 	bl	802cf52 <_ZdlPvj>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4618      	mov	r0, r3
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <_ZN8touchgfx17GraphElementGridXC1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4618      	mov	r0, r3
 800f598:	f7ff fad8 	bl	800eb4c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800f59c:	4a03      	ldr	r2, [pc, #12]	@ (800f5ac <_ZN8touchgfx17GraphElementGridXC1Ev+0x20>)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	08030630 	.word	0x08030630

0800f5b0 <_ZN8touchgfx17GraphElementGridXD1Ev>:
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	4a05      	ldr	r2, [pc, #20]	@ (800f5d0 <_ZN8touchgfx17GraphElementGridXD1Ev+0x20>)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	601a      	str	r2, [r3, #0]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7ff ffc1 	bl	800f548 <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	08030630 	.word	0x08030630

0800f5d4 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff ffe7 	bl	800f5b0 <_ZN8touchgfx17GraphElementGridXD1Ev>
 800f5e2:	2140      	movs	r1, #64	@ 0x40
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f01d fcb4 	bl	802cf52 <_ZdlPvj>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <_ZN8touchgfx17GraphElementGridYC1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff faa4 	bl	800eb4c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800f604:	4a03      	ldr	r2, [pc, #12]	@ (800f614 <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	08030578 	.word	0x08030578

0800f618 <_ZN8touchgfx17GraphElementGridYD1Ev>:
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	4a05      	ldr	r2, [pc, #20]	@ (800f638 <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff ff8d 	bl	800f548 <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	08030578 	.word	0x08030578

0800f63c <_ZN8touchgfx17GraphElementGridYD0Ev>:
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff ffe7 	bl	800f618 <_ZN8touchgfx17GraphElementGridYD1Ev>
 800f64a:	2140      	movs	r1, #64	@ 0x40
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f01d fc80 	bl	802cf52 <_ZdlPvj>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <_ZN8touchgfx15GraphLabelsBaseD1Ev>:
class GraphLabelsBase : public AbstractGraphDecoration
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	4a08      	ldr	r2, [pc, #32]	@ (800f688 <_ZN8touchgfx15GraphLabelsBaseD1Ev+0x2c>)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	601a      	str	r2, [r3, #0]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3338      	adds	r3, #56	@ 0x38
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fa fd8c 	bl	800a18c <_ZN8touchgfx9TypedTextD1Ev>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff fd02 	bl	800f080 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	08031cf8 	.word	0x08031cf8

0800f68c <_ZN8touchgfx15GraphLabelsBaseD0Ev>:
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7ff ffe1 	bl	800f65c <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800f69a:	214c      	movs	r1, #76	@ 0x4c
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f01d fc58 	bl	802cf52 <_ZdlPvj>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <_ZN8touchgfx12GraphLabelsXC1Ev>:

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff fd04 	bl	800f0c4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800f6bc:	4a03      	ldr	r2, [pc, #12]	@ (800f6cc <_ZN8touchgfx12GraphLabelsXC1Ev+0x20>)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	08031bb8 	.word	0x08031bb8

0800f6d0 <_ZN8touchgfx12GraphLabelsXD1Ev>:
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	4a05      	ldr	r2, [pc, #20]	@ (800f6f0 <_ZN8touchgfx12GraphLabelsXD1Ev+0x20>)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	601a      	str	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff ffbb 	bl	800f65c <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	08031bb8 	.word	0x08031bb8

0800f6f4 <_ZN8touchgfx12GraphLabelsXD0Ev>:
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7ff ffe7 	bl	800f6d0 <_ZN8touchgfx12GraphLabelsXD1Ev>
 800f702:	214c      	movs	r1, #76	@ 0x4c
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f01d fc24 	bl	802cf52 <_ZdlPvj>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4618      	mov	r0, r3
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <_ZN8touchgfx12GraphLabelsYC1Ev>:

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff fcd0 	bl	800f0c4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800f724:	4a03      	ldr	r2, [pc, #12]	@ (800f734 <_ZN8touchgfx12GraphLabelsYC1Ev+0x20>)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	601a      	str	r2, [r3, #0]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	08031c58 	.word	0x08031c58

0800f738 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	4a05      	ldr	r2, [pc, #20]	@ (800f758 <_ZN8touchgfx12GraphLabelsYD1Ev+0x20>)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	601a      	str	r2, [r3, #0]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4618      	mov	r0, r3
 800f74a:	f7ff ff87 	bl	800f65c <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	08031c58 	.word	0x08031c58

0800f75c <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7ff ffe7 	bl	800f738 <_ZN8touchgfx12GraphLabelsYD1Ev>
 800f76a:	214c      	movs	r1, #76	@ 0x4c
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f01d fbf0 	bl	802cf52 <_ZdlPvj>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <_ZN8touchgfx16GraphElementLineD1Ev>:
class GraphElementLine : public AbstractGraphElement
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	4a05      	ldr	r2, [pc, #20]	@ (800f79c <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	601a      	str	r2, [r3, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff f94f 	bl	800ea30 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4618      	mov	r0, r3
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	08031a84 	.word	0x08031a84

0800f7a0 <_ZN8touchgfx16GraphElementLineD0Ev>:
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7ff ffe7 	bl	800f77c <_ZN8touchgfx16GraphElementLineD1Ev>
 800f7ae:	2130      	movs	r1, #48	@ 0x30
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f01d fbce 	bl	802cf52 <_ZdlPvj>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	4a09      	ldr	r2, [pc, #36]	@ (800f7f0 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	601a      	str	r2, [r3, #0]
 800f7ce:	4a09      	ldr	r2, [pc, #36]	@ (800f7f4 <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	609a      	str	r2, [r3, #8]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff fd2f 	bl	800f23c <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fd59 	bl	800f298 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	0803170c 	.word	0x0803170c
 800f7f4:	08031730 	.word	0x08031730

0800f7f8 <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 800f7f8:	f1a0 0008 	sub.w	r0, r0, #8
 800f7fc:	e7e0      	b.n	800f7c0 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f7fe:	bf00      	nop

0800f800 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff ffd9 	bl	800f7c0 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f80e:	2114      	movs	r1, #20
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f01d fb9e 	bl	802cf52 <_ZdlPvj>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 800f820:	f1a0 0008 	sub.w	r0, r0, #8
 800f824:	e7ec      	b.n	800f800 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

0800f828 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	4a05      	ldr	r2, [pc, #20]	@ (800f848 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fd fcbb 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	080302d4 	.word	0x080302d4

0800f84c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff ffe7 	bl	800f828 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f85a:	2110      	movs	r1, #16
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f01d fb78 	bl	802cf52 <_ZdlPvj>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_ZN15Screen3ViewBaseC1Ev>:
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen3ViewBase::Screen3ViewBase() :
 800f86c:	b590      	push	{r4, r7, lr}
 800f86e:	b0bf      	sub	sp, #252	@ 0xfc
 800f870:	af02      	add	r7, sp, #8
 800f872:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	f000 fc5c 	bl	8010134 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 800f87c:	4ac2      	ldr	r2, [pc, #776]	@ (800fb88 <_ZN15Screen3ViewBaseC1Ev+0x31c>)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	601a      	str	r2, [r3, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	3340      	adds	r3, #64	@ 0x40
 800f886:	4618      	mov	r0, r3
 800f888:	f7fd f970 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	336c      	adds	r3, #108	@ 0x6c
 800f890:	4618      	mov	r0, r3
 800f892:	f7fd f96b 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3398      	adds	r3, #152	@ 0x98
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd fa14 	bl	800ccc8 <_ZN8touchgfx6ButtonC1Ev>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	33cc      	adds	r3, #204	@ 0xcc
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 fc5b 	bl	8010160 <_ZN8touchgfx11GraphScrollILs400EEC1Ev>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff fe6b 	bl	800f58c <_ZN8touchgfx17GraphElementGridXC1Ev>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fe99 	bl	800f5f4 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7ff feef 	bl	800f6ac <_ZN8touchgfx12GraphLabelsXC1Ev>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff ff1d 	bl	800f714 <_ZN8touchgfx12GraphLabelsYC1Ev>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff fb8f 	bl	800f004 <_ZN8touchgfx16GraphElementLineC1Ev>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f603 14a4 	addw	r4, r3, #2468	@ 0x9a4
 800f8ec:	f107 0308 	add.w	r3, r7, #8
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fd f880 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f7ff fcee 	bl	800f2dc <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f643 0098 	movw	r0, #14488	@ 0x3898
 800f906:	4418      	add	r0, r3
 800f908:	4ba0      	ldr	r3, [pc, #640]	@ (800fb8c <_ZN15Screen3ViewBaseC1Ev+0x320>)
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	2300      	movs	r3, #0
 800f90e:	613b      	str	r3, [r7, #16]
 800f910:	f107 030c 	add.w	r3, r7, #12
 800f914:	cb0c      	ldmia	r3, {r2, r3}
 800f916:	6879      	ldr	r1, [r7, #4]
 800f918:	f000 fc3a 	bl	8010190 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f603 13b8 	addw	r3, r3, #2488	@ 0x9b8
 800f922:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 800f926:	4618      	mov	r0, r3
 800f928:	f009 fef6 	bl	8019718 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    
    __background.setPosition(0, 0, 800, 480);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800f932:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f93c:	2200      	movs	r2, #0
 800f93e:	2100      	movs	r1, #0
 800f940:	f7fa feca 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800f94a:	2300      	movs	r3, #0
 800f94c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800f950:	2300      	movs	r3, #0
 800f952:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800f956:	2300      	movs	r3, #0
 800f958:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f95c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800f960:	041a      	lsls	r2, r3, #16
 800f962:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f966:	021b      	lsls	r3, r3, #8
 800f968:	431a      	orrs	r2, r3
 800f96a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f96e:	4313      	orrs	r3, r2
 800f970:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f974:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fd f83c 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800f980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f982:	4619      	mov	r1, r3
 800f984:	4620      	mov	r0, r4
 800f986:	f7fd f915 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	3340      	adds	r3, #64	@ 0x40
 800f990:	4619      	mov	r1, r3
 800f992:	4610      	mov	r0, r2
 800f994:	f7fd f8da 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800f99e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f9a2:	9300      	str	r3, [sp, #0]
 800f9a4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	f7fa fe94 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f9c8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800f9cc:	041a      	lsls	r2, r3, #16
 800f9ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f9d2:	021b      	lsls	r3, r3, #8
 800f9d4:	431a      	orrs	r2, r3
 800f9d6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f9e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fd f806 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800f9ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7fd f8df 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	336c      	adds	r3, #108	@ 0x6c
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	4610      	mov	r0, r2
 800fa00:	f7fd f8a4 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(743, 421);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	3398      	adds	r3, #152	@ 0x98
 800fa08:	f240 12a5 	movw	r2, #421	@ 0x1a5
 800fa0c:	f240 21e7 	movw	r1, #743	@ 0x2e7
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fa feba 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800fa1c:	f107 0314 	add.w	r3, r7, #20
 800fa20:	2106      	movs	r1, #6
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fc fff7 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800fa28:	f107 0318 	add.w	r3, r7, #24
 800fa2c:	2107      	movs	r1, #7
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fc fff1 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 800fa34:	f107 0218 	add.w	r2, r7, #24
 800fa38:	f107 0314 	add.w	r3, r7, #20
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f008 fe56 	bl	80186f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	f643 0398 	movw	r3, #14488	@ 0x3898
 800fa50:	4413      	add	r3, r2
 800fa52:	4619      	mov	r1, r3
 800fa54:	f7fd f908 	bl	800cc68 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	3398      	adds	r3, #152	@ 0x98
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4610      	mov	r0, r2
 800fa62:	f7fd f873 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    dynamicGraph1.setPosition(65, 34, 670, 352);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800fa6c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	f240 239e 	movw	r3, #670	@ 0x29e
 800fa76:	2222      	movs	r2, #34	@ 0x22
 800fa78:	2141      	movs	r1, #65	@ 0x41
 800fa7a:	f7fa fe2d 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1000);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	33cc      	adds	r3, #204	@ 0xcc
 800fa82:	2200      	movs	r2, #0
 800fa84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fabf 	bl	800e00c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800fa94:	2300      	movs	r3, #0
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	2300      	movs	r3, #0
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	f006 ff5a 	bl	8016956 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800faa8:	2300      	movs	r3, #0
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	2300      	movs	r3, #0
 800faae:	2200      	movs	r2, #0
 800fab0:	2100      	movs	r1, #0
 800fab2:	f006 fe53 	bl	801675c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(-50, 50);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	33cc      	adds	r3, #204	@ 0xcc
 800faba:	2232      	movs	r2, #50	@ 0x32
 800fabc:	f06f 0131 	mvn.w	r1, #49	@ 0x31
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fd feb4 	bl	800d82e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph1.setAlpha(246);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	33cc      	adds	r3, #204	@ 0xcc
 800faca:	21f6      	movs	r1, #246	@ 0xf6
 800facc:	4618      	mov	r0, r3
 800face:	f7fd fd68 	bl	800d5a2 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>
    dynamicGraph1MajorXAxisGrid.setColor(touchgfx::Color::getColorFromRGB(0, 240, 16));
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f603 045c 	addw	r4, r3, #2140	@ 0x85c
 800fad8:	2300      	movs	r3, #0
 800fada:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800fade:	23f0      	movs	r3, #240	@ 0xf0
 800fae0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800fae4:	2310      	movs	r3, #16
 800fae6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 800faea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800faee:	041a      	lsls	r2, r3, #16
 800faf0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800faf4:	021b      	lsls	r3, r3, #8
 800faf6:	431a      	orrs	r2, r3
 800faf8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800fafc:	4313      	orrs	r3, r2
 800fafe:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fb02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fb06:	4611      	mov	r1, r2
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fc ff75 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800fb0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb10:	4619      	mov	r1, r3
 800fb12:	4620      	mov	r0, r4
 800fb14:	f7fe ffc6 	bl	800eaa4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorXAxisGrid.setInterval(100);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fb1e:	663b      	str	r3, [r7, #96]	@ 0x60
 800fb20:	2364      	movs	r3, #100	@ 0x64
 800fb22:	65fb      	str	r3, [r7, #92]	@ 0x5c
        setIntervalScaled(abs(interval) * dataScale);
 800fb24:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fb26:	f000 faf7 	bl	8010118 <_ZN8touchgfx3absIiEET_S1_>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb30:	fb02 f303 	mul.w	r3, r2, r3
 800fb34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fb36:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fb38:	657b      	str	r3, [r7, #84]	@ 0x54
        gridInterval = abs(interval);
 800fb3a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800fb3c:	f000 faec 	bl	8010118 <_ZN8touchgfx3absIiEET_S1_>
 800fb40:	4602      	mov	r2, r0
 800fb42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb44:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fb46:	bf00      	nop
    }
 800fb48:	bf00      	nop
    dynamicGraph1MajorXAxisGrid.setLineWidth(1);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fb50:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb52:	2301      	movs	r3, #1
 800fb54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lineWidth = width;
 800fb58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb5a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800fb5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 800fb62:	bf00      	nop
    dynamicGraph1MajorXAxisGrid.setScale(1000);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fb6a:	673b      	str	r3, [r7, #112]	@ 0x70
 800fb6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb70:	66fb      	str	r3, [r7, #108]	@ 0x6c
        assert(scale != 0);
 800fb72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d111      	bne.n	800fb9c <_ZN15Screen3ViewBaseC1Ev+0x330>
 800fb78:	4b05      	ldr	r3, [pc, #20]	@ (800fb90 <_ZN15Screen3ViewBaseC1Ev+0x324>)
 800fb7a:	4a06      	ldr	r2, [pc, #24]	@ (800fb94 <_ZN15Screen3ViewBaseC1Ev+0x328>)
 800fb7c:	f240 112f 	movw	r1, #303	@ 0x12f
 800fb80:	4805      	ldr	r0, [pc, #20]	@ (800fb98 <_ZN15Screen3ViewBaseC1Ev+0x32c>)
 800fb82:	f01d ff47 	bl	802da14 <__assert_func>
 800fb86:	bf00      	nop
 800fb88:	0803029c 	.word	0x0803029c
 800fb8c:	080100d3 	.word	0x080100d3
 800fb90:	0802f61c 	.word	0x0802f61c
 800fb94:	0802f628 	.word	0x0802f628
 800fb98:	0802f65c 	.word	0x0802f65c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800fb9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb9e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fba0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fba6:	4619      	mov	r1, r3
 800fba8:	f006 ff88 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800fbac:	4602      	mov	r2, r0
 800fbae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fbb0:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fbb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fbb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbb6:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fbb8:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	4610      	mov	r0, r2
 800fbca:	f006 fdd2 	bl	8016772 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(33, 196, 22));
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f603 049c 	addw	r4, r3, #2204	@ 0x89c
 800fbd4:	2321      	movs	r3, #33	@ 0x21
 800fbd6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800fbda:	23c4      	movs	r3, #196	@ 0xc4
 800fbdc:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800fbe0:	2316      	movs	r3, #22
 800fbe2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800fbe6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800fbea:	041a      	lsls	r2, r3, #16
 800fbec:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fbf0:	021b      	lsls	r3, r3, #8
 800fbf2:	431a      	orrs	r2, r3
 800fbf4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fbfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fc fef7 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800fc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f7fe ff48 	bl	800eaa4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisGrid.setInterval(10);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fc1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fc1e:	230a      	movs	r3, #10
 800fc20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        setIntervalScaled(abs(interval) * dataScale);
 800fc24:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800fc28:	f000 fa76 	bl	8010118 <_ZN8touchgfx3absIiEET_S1_>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fc32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc34:	fb02 f303 	mul.w	r3, r2, r3
 800fc38:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fc3c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800fc3e:	67bb      	str	r3, [r7, #120]	@ 0x78
        gridInterval = abs(interval);
 800fc40:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800fc42:	f000 fa69 	bl	8010118 <_ZN8touchgfx3absIiEET_S1_>
 800fc46:	4602      	mov	r2, r0
 800fc48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fc4a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fc4c:	bf00      	nop
    }
 800fc4e:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setLineWidth(1);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fc56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        lineWidth = width;
 800fc60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc64:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800fc68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 800fc6c:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setAlpha(226);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fc74:	21e2      	movs	r1, #226	@ 0xe2
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fe fe62 	bl	800e940 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    dynamicGraph1MajorYAxisGrid.setScale(1000);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fc82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        assert(scale != 0);
 800fc8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d106      	bne.n	800fca4 <_ZN15Screen3ViewBaseC1Ev+0x438>
 800fc96:	4bd2      	ldr	r3, [pc, #840]	@ (800ffe0 <_ZN15Screen3ViewBaseC1Ev+0x774>)
 800fc98:	4ad2      	ldr	r2, [pc, #840]	@ (800ffe4 <_ZN15Screen3ViewBaseC1Ev+0x778>)
 800fc9a:	f240 112f 	movw	r1, #303	@ 0x12f
 800fc9e:	48d2      	ldr	r0, [pc, #840]	@ (800ffe8 <_ZN15Screen3ViewBaseC1Ev+0x77c>)
 800fca0:	f01d feb8 	bl	802da14 <__assert_func>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800fca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fca8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fcaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	f006 ff01 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcc0:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fcc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fcc6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800fcca:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fccc:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800fcda:	4619      	mov	r1, r3
 800fcdc:	4610      	mov	r0, r2
 800fcde:	f006 fd48 	bl	8016772 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1MajorXAxisLabel.setInterval(102);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800fce8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcec:	2366      	movs	r3, #102	@ 0x66
 800fcee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800fcf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcf8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fcfc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800fd00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        return i * scale;
 800fd04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fd08:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800fd0c:	fb02 f303 	mul.w	r3, r2, r3
 800fd10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fd14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800fd18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        labelInterval = abs(interval);
 800fd1c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800fd20:	f000 f9fa 	bl	8010118 <_ZN8touchgfx3absIiEET_S1_>
 800fd24:	4602      	mov	r2, r0
 800fd26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fd2a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fd2c:	bf00      	nop
    }
 800fd2e:	bf00      	nop
    dynamicGraph1MajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_4H4X));
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f603 04dc 	addw	r4, r3, #2268	@ 0x8dc
 800fd36:	f107 031c 	add.w	r3, r7, #28
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff f977 	bl	800f030 <_ZN8touchgfx9TypedTextC1Et>
 800fd42:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
        labelTypedText = typedText;
 800fd46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fd4a:	3338      	adds	r3, #56	@ 0x38
 800fd4c:	f107 021c 	add.w	r2, r7, #28
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff f9ec 	bl	800f130 <_ZN8touchgfx9TypedTextaSERKS0_>
    }
 800fd58:	bf00      	nop
 800fd5a:	f107 031c 	add.w	r3, r7, #28
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fa fa14 	bl	800a18c <_ZN8touchgfx9TypedTextD1Ev>
    dynamicGraph1MajorXAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f603 04dc 	addw	r4, r3, #2268	@ 0x8dc
 800fd6a:	2314      	movs	r3, #20
 800fd6c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 800fd70:	2397      	movs	r3, #151	@ 0x97
 800fd72:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 800fd76:	23c5      	movs	r3, #197	@ 0xc5
 800fd78:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 800fd7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800fd80:	041a      	lsls	r2, r3, #16
 800fd82:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800fd86:	021b      	lsls	r3, r3, #8
 800fd88:	431a      	orrs	r2, r3
 800fd8a:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fd94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800fd98:	4611      	mov	r1, r2
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fc fe2c 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800fda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fda2:	4619      	mov	r1, r3
 800fda4:	4620      	mov	r0, r4
 800fda6:	f7fe fe7d 	bl	800eaa4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorXAxisLabel.setScale(1000);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800fdb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fdb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        assert(scale != 0);
 800fdbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d105      	bne.n	800fdd0 <_ZN15Screen3ViewBaseC1Ev+0x564>
 800fdc4:	4b86      	ldr	r3, [pc, #536]	@ (800ffe0 <_ZN15Screen3ViewBaseC1Ev+0x774>)
 800fdc6:	4a89      	ldr	r2, [pc, #548]	@ (800ffec <_ZN15Screen3ViewBaseC1Ev+0x780>)
 800fdc8:	213e      	movs	r1, #62	@ 0x3e
 800fdca:	4889      	ldr	r0, [pc, #548]	@ (800fff0 <_ZN15Screen3ViewBaseC1Ev+0x784>)
 800fdcc:	f01d fe22 	bl	802da14 <__assert_func>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800fdd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fdd4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fdd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fdda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fddc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fde0:	4619      	mov	r1, r3
 800fde2:	f006 fe6b 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800fde6:	4602      	mov	r2, r0
 800fde8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fdec:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800fdee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fdf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fdf6:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800fdf8:	bf00      	nop
    dynamicGraph1.addBottomElement(dynamicGraph1MajorXAxisLabel);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 800fe06:	4619      	mov	r1, r3
 800fe08:	4610      	mov	r0, r2
 800fe0a:	f006 fcd6 	bl	80167ba <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>

    dynamicGraph1MajorYAxisLabel.setInterval(10);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800fe14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fe18:	230a      	movs	r3, #10
 800fe1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800fe1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fe22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe24:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fe28:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800fe2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fe30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800fe34:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800fe38:	fb02 f303 	mul.w	r3, r2, r3
 800fe3c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800fe40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800fe44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        labelInterval = abs(interval);
 800fe48:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800fe4c:	f000 f964 	bl	8010118 <_ZN8touchgfx3absIiEET_S1_>
 800fe50:	4602      	mov	r2, r0
 800fe52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fe56:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 800fe58:	bf00      	nop
    }
 800fe5a:	bf00      	nop
    dynamicGraph1MajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_CELW));
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f603 1428 	addw	r4, r3, #2344	@ 0x928
 800fe62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe66:	2102      	movs	r1, #2
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7ff f8e1 	bl	800f030 <_ZN8touchgfx9TypedTextC1Et>
 800fe6e:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
        labelTypedText = typedText;
 800fe72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fe76:	3338      	adds	r3, #56	@ 0x38
 800fe78:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7ff f956 	bl	800f130 <_ZN8touchgfx9TypedTextaSERKS0_>
    }
 800fe84:	bf00      	nop
 800fe86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fa f97e 	bl	800a18c <_ZN8touchgfx9TypedTextD1Ev>
    dynamicGraph1MajorYAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f603 1428 	addw	r4, r3, #2344	@ 0x928
 800fe96:	2314      	movs	r3, #20
 800fe98:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800fe9c:	2397      	movs	r3, #151	@ 0x97
 800fe9e:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 800fea2:	23c5      	movs	r3, #197	@ 0xc5
 800fea4:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 800fea8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800feac:	041a      	lsls	r2, r3, #16
 800feae:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800feb2:	021b      	lsls	r3, r3, #8
 800feb4:	431a      	orrs	r2, r3
 800feb6:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800feba:	4313      	orrs	r3, r2
 800febc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fec0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fec4:	4611      	mov	r1, r2
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fc fd96 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800fecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fece:	4619      	mov	r1, r3
 800fed0:	4620      	mov	r0, r4
 800fed2:	f7fe fde7 	bl	800eaa4 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisLabel.setScale(1000);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800fedc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fee0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        assert(scale != 0);
 800fee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d105      	bne.n	800fefc <_ZN15Screen3ViewBaseC1Ev+0x690>
 800fef0:	4b3b      	ldr	r3, [pc, #236]	@ (800ffe0 <_ZN15Screen3ViewBaseC1Ev+0x774>)
 800fef2:	4a3e      	ldr	r2, [pc, #248]	@ (800ffec <_ZN15Screen3ViewBaseC1Ev+0x780>)
 800fef4:	213e      	movs	r1, #62	@ 0x3e
 800fef6:	483e      	ldr	r0, [pc, #248]	@ (800fff0 <_ZN15Screen3ViewBaseC1Ev+0x784>)
 800fef8:	f01d fd8c 	bl	802da14 <__assert_func>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800fefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff00:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ff02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff08:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	f006 fdd5 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800ff12:	4602      	mov	r2, r0
 800ff14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff18:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 800ff1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ff22:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800ff24:	bf00      	nop
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 800ff32:	4619      	mov	r1, r3
 800ff34:	4610      	mov	r0, r2
 800ff36:	f006 fc2e 	bl	8016796 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>

    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(196, 22, 33));
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f603 14a4 	addw	r4, r3, #2468	@ 0x9a4
 800ff40:	23c4      	movs	r3, #196	@ 0xc4
 800ff42:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
 800ff46:	2316      	movs	r3, #22
 800ff48:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
 800ff4c:	2321      	movs	r3, #33	@ 0x21
 800ff4e:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
 800ff52:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 800ff56:	041a      	lsls	r2, r3, #16
 800ff58:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800ff5c:	021b      	lsls	r3, r3, #8
 800ff5e:	431a      	orrs	r2, r3
 800ff60:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
 800ff64:	4313      	orrs	r3, r2
 800ff66:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ff6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ff6e:	4611      	mov	r1, r2
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fc fd41 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 800ff76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff78:	4619      	mov	r1, r3
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f7ff f9cc 	bl	800f318 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f603 1274 	addw	r2, r3, #2420	@ 0x974
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f603 13a4 	addw	r3, r3, #2468	@ 0x9a4
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	4610      	mov	r0, r2
 800ff90:	f7fe fcc8 	bl	800e924 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800ff9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 800ffa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ffa8:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 800ffac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800ffb0:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	f006 fbd6 	bl	8016772 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>


    add(dynamicGraph1);
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	33cc      	adds	r3, #204	@ 0xcc
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4610      	mov	r0, r2
 800ffd0:	f7fc fdbc 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	37f4      	adds	r7, #244	@ 0xf4
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd90      	pop	{r4, r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	0802f61c 	.word	0x0802f61c
 800ffe4:	0802f628 	.word	0x0802f628
 800ffe8:	0802f65c 	.word	0x0802f65c
 800ffec:	0802f6b4 	.word	0x0802f6b4
 800fff0:	0802f6e4 	.word	0x0802f6e4

0800fff4 <_ZN15Screen3ViewBaseD1Ev>:

Screen3ViewBase::~Screen3ViewBase()
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	4a26      	ldr	r2, [pc, #152]	@ (8010098 <_ZN15Screen3ViewBaseD1Ev+0xa4>)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	601a      	str	r2, [r3, #0]
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8010002:	f009 fb93 	bl	801972c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	f643 0398 	movw	r3, #14488	@ 0x3898
 801000c:	4413      	add	r3, r2
 801000e:	4618      	mov	r0, r3
 8010010:	f7ff fc0a 	bl	800f828 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f603 13a4 	addw	r3, r3, #2468	@ 0x9a4
 801001a:	4618      	mov	r0, r3
 801001c:	f7ff fbd0 	bl	800f7c0 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f603 1374 	addw	r3, r3, #2420	@ 0x974
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff fba8 	bl	800f77c <_ZN8touchgfx16GraphElementLineD1Ev>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff fb80 	bl	800f738 <_ZN8touchgfx12GraphLabelsYD1Ev>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 801003e:	4618      	mov	r0, r3
 8010040:	f7ff fb46 	bl	800f6d0 <_ZN8touchgfx12GraphLabelsXD1Ev>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff fae4 	bl	800f618 <_ZN8touchgfx17GraphElementGridYD1Ev>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f603 035c 	addw	r3, r3, #2140	@ 0x85c
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff faaa 	bl	800f5b0 <_ZN8touchgfx17GraphElementGridXD1Ev>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	33cc      	adds	r3, #204	@ 0xcc
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fa4d 	bl	800f500 <_ZN8touchgfx11GraphScrollILs400EED1Ev>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	3398      	adds	r3, #152	@ 0x98
 801006a:	4618      	mov	r0, r3
 801006c:	f7fc fec2 	bl	800cdf4 <_ZN8touchgfx6ButtonD1Ev>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	336c      	adds	r3, #108	@ 0x6c
 8010074:	4618      	mov	r0, r3
 8010076:	f7fc fe79 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	3340      	adds	r3, #64	@ 0x40
 801007e:	4618      	mov	r0, r3
 8010080:	f7fc fe74 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4618      	mov	r0, r3
 8010088:	f7ff f9f4 	bl	800f474 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4618      	mov	r0, r3
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	0803029c 	.word	0x0803029c

0801009c <_ZN15Screen3ViewBaseD0Ev>:
Screen3ViewBase::~Screen3ViewBase()
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
}
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff ffa5 	bl	800fff4 <_ZN15Screen3ViewBaseD1Ev>
 80100aa:	f643 01a8 	movw	r1, #14504	@ 0x38a8
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f01c ff4f 	bl	802cf52 <_ZdlPvj>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4618      	mov	r0, r3
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}

080100be <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 80100be:	b480      	push	{r7}
 80100c0:	b083      	sub	sp, #12
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]

}
 80100c6:	bf00      	nop
 80100c8:	370c      	adds	r7, #12
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
 80100da:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	3398      	adds	r3, #152	@ 0x98
 80100e0:	683a      	ldr	r2, [r7, #0]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d106      	bne.n	80100f4 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When button1 clicked change screen to Screen4
        //Go to Screen4 with screen transition towards West
        application().gotoScreen4ScreenWipeTransitionWest();
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7ff f9b8 	bl	800f45c <_ZN15Screen3ViewBase11applicationEv>
 80100ec:	4603      	mov	r3, r0
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fb f8ac 	bl	800b24c <_ZN23FrontendApplicationBase35gotoScreen4ScreenWipeTransitionWestEv>
    }
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <_ZN15Screen3ViewBase15handleTickEventEv>:

void Screen3ViewBase::handleTickEvent()
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    //Interaction3
    //When every N tick call virtual function
    //Call function1
    function1();
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	332c      	adds	r3, #44	@ 0x2c
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	4798      	blx	r3
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <_ZN8touchgfx3absIiEET_S1_>:
 * @param  d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
{
    return (d < 0) ? -d : d;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	bfb8      	it	lt
 8010126:	425b      	neglt	r3, r3
}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4618      	mov	r0, r3
 8010140:	f00c fbf6 	bl	801c930 <_ZN8touchgfx6ScreenC1Ev>
 8010144:	4a05      	ldr	r2, [pc, #20]	@ (801015c <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	4618      	mov	r0, r3
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	08030488 	.word	0x08030488

08010160 <_ZN8touchgfx11GraphScrollILs400EEC1Ev>:
{
public:
    GraphScroll()
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
        : GraphScrollData(CAPACITY, y)
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010170:	461a      	mov	r2, r3
 8010172:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8010176:	f7fe fb7d 	bl	800e874 <_ZN8touchgfx15GraphScrollDataC1EsPi>
 801017a:	4a04      	ldr	r2, [pc, #16]	@ (801018c <_ZN8touchgfx11GraphScrollILs400EEC1Ev+0x2c>)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	601a      	str	r2, [r3, #0]
    {
    }
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	080302ec 	.word	0x080302ec

08010190 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	4639      	mov	r1, r7
 801019c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fc ffd6 	bl	800d154 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80101a8:	4a08      	ldr	r2, [pc, #32]	@ (80101cc <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	601a      	str	r2, [r3, #0]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	605a      	str	r2, [r3, #4]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3308      	adds	r3, #8
 80101b8:	463a      	mov	r2, r7
 80101ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	080302d4 	.word	0x080302d4

080101d0 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	68d2      	ldr	r2, [r2, #12]
 80101e2:	1052      	asrs	r2, r2, #1
 80101e4:	1898      	adds	r0, r3, r2
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d102      	bne.n	80101f8 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	e00a      	b.n	801020e <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	68d2      	ldr	r2, [r2, #12]
 8010200:	1052      	asrs	r2, r2, #1
 8010202:	4413      	add	r3, r2
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	6892      	ldr	r2, [r2, #8]
 801020a:	4413      	add	r3, r2
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	4798      	blx	r3
    }
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801021a:	b480      	push	{r7}
 801021c:	b083      	sub	sp, #12
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d010      	beq.n	801024c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d107      	bne.n	8010242 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	f003 0301 	and.w	r3, r3, #1
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801023e:	2301      	movs	r3, #1
 8010240:	e000      	b.n	8010244 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010242:	2300      	movs	r3, #0
 8010244:	2b01      	cmp	r3, #1
 8010246:	d001      	beq.n	801024c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010248:	2301      	movs	r3, #1
 801024a:	e000      	b.n	801024e <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801024c:	2300      	movs	r3, #0
    }
 801024e:	4618      	mov	r0, r3
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 801025a:	b590      	push	{r4, r7, lr}
 801025c:	b087      	sub	sp, #28
 801025e:	af00      	add	r7, sp, #0
 8010260:	6178      	str	r0, [r7, #20]
 8010262:	460b      	mov	r3, r1
 8010264:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801026c:	4611      	mov	r1, r2
 801026e:	4618      	mov	r0, r3
 8010270:	f7fa faa9 	bl	800a7c6 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3384      	adds	r3, #132	@ 0x84
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	697c      	ldr	r4, [r7, #20]
 801027e:	463a      	mov	r2, r7
 8010280:	6979      	ldr	r1, [r7, #20]
 8010282:	4610      	mov	r0, r2
 8010284:	4798      	blx	r3
 8010286:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801028a:	463a      	mov	r2, r7
 801028c:	ca07      	ldmia	r2, {r0, r1, r2}
 801028e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010292:	bf00      	nop
 8010294:	371c      	adds	r7, #28
 8010296:	46bd      	mov	sp, r7
 8010298:	bd90      	pop	{r4, r7, pc}

0801029a <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 801029a:	b590      	push	{r4, r7, lr}
 801029c:	b087      	sub	sp, #28
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6178      	str	r0, [r7, #20]
 80102a2:	460b      	mov	r3, r1
 80102a4:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80102ac:	4611      	mov	r1, r2
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fa fa98 	bl	800a7e4 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	3384      	adds	r3, #132	@ 0x84
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	697c      	ldr	r4, [r7, #20]
 80102be:	463a      	mov	r2, r7
 80102c0:	6979      	ldr	r1, [r7, #20]
 80102c2:	4610      	mov	r0, r2
 80102c4:	4798      	blx	r3
 80102c6:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80102ca:	463a      	mov	r2, r7
 80102cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80102ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80102d2:	bf00      	nop
 80102d4:	371c      	adds	r7, #28
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd90      	pop	{r4, r7, pc}

080102da <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f7fa f945 	bl	800a574 <_ZN8touchgfx4RectC1Ev>
    }
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	460b      	mov	r3, r1
 80102fc:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	78fa      	ldrb	r2, [r7, #3]
 8010302:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 8010306:	bf00      	nop
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
	...

08010314 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8010314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8010320:	687e      	ldr	r6, [r7, #4]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3334      	adds	r3, #52	@ 0x34
 8010328:	681c      	ldr	r4, [r3, #0]
 801032a:	887d      	ldrh	r5, [r7, #2]
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f867 	bl	8010400 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010332:	4603      	mov	r3, r0
 8010334:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010336:	4b1c      	ldr	r3, [pc, #112]	@ (80103a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d105      	bne.n	801034a <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 801033e:	4b1b      	ldr	r3, [pc, #108]	@ (80103ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8010340:	4a1b      	ldr	r2, [pc, #108]	@ (80103b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8010342:	216c      	movs	r1, #108	@ 0x6c
 8010344:	481b      	ldr	r0, [pc, #108]	@ (80103b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8010346:	f01d fb65 	bl	802da14 <__assert_func>
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	889a      	ldrh	r2, [r3, #4]
 8010352:	4b19      	ldr	r3, [pc, #100]	@ (80103b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8010354:	881b      	ldrh	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	bf34      	ite	cc
 801035a:	2301      	movcc	r3, #1
 801035c:	2300      	movcs	r3, #0
 801035e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010360:	2b00      	cmp	r3, #0
 8010362:	d105      	bne.n	8010370 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8010364:	4b15      	ldr	r3, [pc, #84]	@ (80103bc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8010366:	4a12      	ldr	r2, [pc, #72]	@ (80103b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8010368:	216d      	movs	r1, #109	@ 0x6d
 801036a:	4812      	ldr	r0, [pc, #72]	@ (80103b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 801036c:	f01d fb52 	bl	802da14 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010370:	4b13      	ldr	r3, [pc, #76]	@ (80103c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	4b0c      	ldr	r3, [pc, #48]	@ (80103a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8010376:	6819      	ldr	r1, [r3, #0]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	889b      	ldrh	r3, [r3, #4]
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	440b      	add	r3, r1
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	4413      	add	r3, r2
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	3230      	adds	r2, #48	@ 0x30
 801038c:	6812      	ldr	r2, [r2, #0]
 801038e:	4618      	mov	r0, r3
 8010390:	4790      	blx	r2
 8010392:	4603      	mov	r3, r0
 8010394:	1aeb      	subs	r3, r5, r3
 8010396:	b29b      	uxth	r3, r3
 8010398:	b21b      	sxth	r3, r3
 801039a:	4619      	mov	r1, r3
 801039c:	4630      	mov	r0, r6
 801039e:	47a0      	blx	r4
    }
 80103a0:	bf00      	nop
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103a8:	2001231c 	.word	0x2001231c
 80103ac:	0802f738 	.word	0x0802f738
 80103b0:	0802f77c 	.word	0x0802f77c
 80103b4:	0802f7b8 	.word	0x0802f7b8
 80103b8:	20012320 	.word	0x20012320
 80103bc:	0802f7fc 	.word	0x0802f7fc
 80103c0:	20012324 	.word	0x20012324

080103c4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	807b      	strh	r3, [r7, #2]
 80103d0:	4613      	mov	r3, r2
 80103d2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	3330      	adds	r3, #48	@ 0x30
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80103e2:	4610      	mov	r0, r2
 80103e4:	4798      	blx	r3
        setBaselineY(baselineY);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	3364      	adds	r3, #100	@ 0x64
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80103f2:	4611      	mov	r1, r2
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	4798      	blx	r3
    }
 80103f8:	bf00      	nop
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	3328      	adds	r3, #40	@ 0x28
    }
 801040c:	4618      	mov	r0, r3
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010420:	2300      	movs	r3, #0
    }
 8010422:	4618      	mov	r0, r3
 8010424:	370c      	adds	r7, #12
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr

0801042e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 801042e:	b580      	push	{r7, lr}
 8010430:	b084      	sub	sp, #16
 8010432:	af02      	add	r7, sp, #8
 8010434:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f04f 33ff 	mov.w	r3, #4294967295
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	f04f 33ff 	mov.w	r3, #4294967295
 8010442:	2200      	movs	r2, #0
 8010444:	2100      	movs	r1, #0
 8010446:	f7fa f8ac 	bl	800a5a2 <_ZN8touchgfx4RectC1Essss>
              text(0)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	609a      	str	r2, [r3, #8]
        {
        }
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	4618      	mov	r0, r3
 8010454:	3708      	adds	r7, #8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
	...

0801045c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	4a08      	ldr	r2, [pc, #32]	@ (8010488 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3328      	adds	r3, #40	@ 0x28
 801046e:	4618      	mov	r0, r3
 8010470:	f7f9 fe8c 	bl	800a18c <_ZN8touchgfx9TypedTextD1Ev>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	f7fa fd46 	bl	800af08 <_ZN8touchgfx6WidgetD1Ev>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	08032014 	.word	0x08032014

0801048c <_ZN8touchgfx8TextAreaD0Ev>:
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7ff ffe1 	bl	801045c <_ZN8touchgfx8TextAreaD1Ev>
 801049a:	2148      	movs	r1, #72	@ 0x48
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f01c fd58 	bl	802cf52 <_ZdlPvj>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fa f8e4 	bl	800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80104bc:	bf00      	nop
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff ffad 	bl	801042e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	4a05      	ldr	r2, [pc, #20]	@ (80104fc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7ff ffb5 	bl	801045c <_ZN8touchgfx8TextAreaD1Ev>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4618      	mov	r0, r3
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	08032180 	.word	0x08032180

08010500 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f7ff ffe7 	bl	80104dc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801050e:	2148      	movs	r1, #72	@ 0x48
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f01c fd1e 	bl	802cf52 <_ZdlPvj>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4618      	mov	r0, r3
 801051a:	3708      	adds	r7, #8
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	683a      	ldr	r2, [r7, #0]
 8010546:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    }
 801054a:	bf00      	nop
 801054c:	370c      	adds	r7, #12
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr

08010556 <_ZN15Screen4ViewBase9function1Ei>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void function1(int value)
 8010556:	b580      	push	{r7, lr}
 8010558:	b082      	sub	sp, #8
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
 801055e:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen4
    	boxProgress1.setValue(value);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	33cc      	adds	r3, #204	@ 0xcc
 8010564:	6839      	ldr	r1, [r7, #0]
 8010566:	4618      	mov	r0, r3
 8010568:	f003 ff24 	bl	80143b4 <_ZN8touchgfx11BoxProgress8setValueEi>
    	textProgress1.setValue(value);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	4618      	mov	r0, r3
 8010576:	f003 fe37 	bl	80141e8 <_ZN8touchgfx12TextProgress8setValueEi>
    }
 801057a:	bf00      	nop
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <_ZN15Screen4ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801058a:	f00a fd79 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 801058e:	4603      	mov	r3, r0
    }
 8010590:	4618      	mov	r0, r3
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev>:
class View : public Screen
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	4a05      	ldr	r2, [pc, #20]	@ (80105b8 <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev+0x20>)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	601a      	str	r2, [r3, #0]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fc fa77 	bl	800ca9c <_ZN8touchgfx6ScreenD1Ev>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	08030874 	.word	0x08030874

080105bc <_ZN8touchgfx4ViewI16Screen4PresenterED0Ev>:
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f7ff ffe7 	bl	8010598 <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev>
 80105ca:	2140      	movs	r1, #64	@ 0x40
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f01c fcc0 	bl	802cf52 <_ZdlPvj>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4618      	mov	r0, r3
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	4a0a      	ldr	r2, [pc, #40]	@ (8010610 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	601a      	str	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	3358      	adds	r3, #88	@ 0x58
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fc fa32 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	332c      	adds	r3, #44	@ 0x2c
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fc fbd9 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	4618      	mov	r0, r3
 8010602:	f7fc fa29 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4618      	mov	r0, r3
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	08031384 	.word	0x08031384

08010614 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7ff ffdd 	bl	80105dc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8010622:	21b4      	movs	r1, #180	@ 0xb4
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f01c fc94 	bl	802cf52 <_ZdlPvj>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	4a05      	ldr	r2, [pc, #20]	@ (8010654 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	f7ff ffc9 	bl	80105dc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	080312a8 	.word	0x080312a8

08010658 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7ff ffe7 	bl	8010634 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8010666:	21b8      	movs	r1, #184	@ 0xb8
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f01c fc72 	bl	802cf52 <_ZdlPvj>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	4a08      	ldr	r2, [pc, #32]	@ (80106a4 <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	601a      	str	r2, [r3, #0]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	33b8      	adds	r3, #184	@ 0xb8
 801068a:	4618      	mov	r0, r3
 801068c:	f7fc fb6e 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	4618      	mov	r0, r3
 8010694:	f7ff ffce 	bl	8010634 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	4618      	mov	r0, r3
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	080311c4 	.word	0x080311c4

080106a8 <_ZN8touchgfx11BoxProgressD0Ev>:
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7ff ffe1 	bl	8010678 <_ZN8touchgfx11BoxProgressD1Ev>
 80106b6:	21e4      	movs	r1, #228	@ 0xe4
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f01c fc4a 	bl	802cf52 <_ZdlPvj>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	4a05      	ldr	r2, [pc, #20]	@ (80106e8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff feff 	bl	80104dc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	080308c0 	.word	0x080308c0

080106ec <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7ff ffe7 	bl	80106c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80106fa:	214c      	movs	r1, #76	@ 0x4c
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f01c fc28 	bl	802cf52 <_ZdlPvj>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	4a08      	ldr	r2, [pc, #32]	@ (8010738 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	601a      	str	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	33b4      	adds	r3, #180	@ 0xb4
 801071e:	4618      	mov	r0, r3
 8010720:	f7ff ffd2 	bl	80106c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff ff58 	bl	80105dc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4618      	mov	r0, r3
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	080310d8 	.word	0x080310d8

0801073c <_ZN8touchgfx12TextProgressD0Ev>:
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff ffe1 	bl	801070c <_ZN8touchgfx12TextProgressD1Ev>
 801074a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f01c fbff 	bl	802cf52 <_ZdlPvj>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
	...

08010760 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	4a0f      	ldr	r2, [pc, #60]	@ (80107a8 <_ZN8touchgfx6SliderD1Ev+0x48>)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	33b8      	adds	r3, #184	@ 0xb8
 8010772:	4618      	mov	r0, r3
 8010774:	f7fc f970 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	338c      	adds	r3, #140	@ 0x8c
 801077c:	4618      	mov	r0, r3
 801077e:	f7fc fb17 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	3360      	adds	r3, #96	@ 0x60
 8010786:	4618      	mov	r0, r3
 8010788:	f7fc fb12 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	3334      	adds	r3, #52	@ 0x34
 8010790:	4618      	mov	r0, r3
 8010792:	f7fc fb0d 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4618      	mov	r0, r3
 801079a:	f7fc f95d 	bl	800ca58 <_ZN8touchgfx9ContainerD1Ev>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	080314e8 	.word	0x080314e8

080107ac <_ZN8touchgfx6SliderD0Ev>:
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff ffd3 	bl	8010760 <_ZN8touchgfx6SliderD1Ev>
 80107ba:	21f4      	movs	r1, #244	@ 0xf4
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f01c fbc8 	bl	802cf52 <_ZdlPvj>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	4a05      	ldr	r2, [pc, #20]	@ (80107ec <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev+0x20>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 fb1b 	bl	8010e18 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	0803085c 	.word	0x0803085c

080107f0 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED0Ev>:
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff ffe7 	bl	80107cc <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev>
 80107fe:	2110      	movs	r1, #16
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f01c fba6 	bl	802cf52 <_ZdlPvj>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	4a05      	ldr	r2, [pc, #20]	@ (8010830 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4618      	mov	r0, r3
 8010822:	f7fc fcc7 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	08030844 	.word	0x08030844

08010834 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff ffe7 	bl	8010810 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010842:	2110      	movs	r1, #16
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f01c fb84 	bl	802cf52 <_ZdlPvj>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <_ZN15Screen4ViewBaseC1Ev>:
#include <gui_generated/screen4_screen/Screen4ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen4ViewBase::Screen4ViewBase() :
 8010854:	b590      	push	{r4, r7, lr}
 8010856:	b099      	sub	sp, #100	@ 0x64
 8010858:	af02      	add	r7, sp, #8
 801085a:	6078      	str	r0, [r7, #4]
    sliderValueChangedCallback(this, &Screen4ViewBase::sliderValueChangedCallbackHandler),
    buttonCallback(this, &Screen4ViewBase::buttonCallbackHandler)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	4618      	mov	r0, r3
 8010860:	f000 fa94 	bl	8010d8c <_ZN8touchgfx4ViewI16Screen4PresenterEC1Ev>
 8010864:	4add      	ldr	r2, [pc, #884]	@ (8010bdc <_ZN15Screen4ViewBaseC1Ev+0x388>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3340      	adds	r3, #64	@ 0x40
 801086e:	4618      	mov	r0, r3
 8010870:	f7fc f97c 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	336c      	adds	r3, #108	@ 0x6c
 8010878:	4618      	mov	r0, r3
 801087a:	f7fc f977 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	3398      	adds	r3, #152	@ 0x98
 8010882:	4618      	mov	r0, r3
 8010884:	f7fc fa20 	bl	800ccc8 <_ZN8touchgfx6ButtonC1Ev>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	33cc      	adds	r3, #204	@ 0xcc
 801088c:	4618      	mov	r0, r3
 801088e:	f003 fe1f 	bl	80144d0 <_ZN8touchgfx11BoxProgressC1Ev>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010898:	4618      	mov	r0, r3
 801089a:	f003 fd0f 	bl	80142bc <_ZN8touchgfx12TextProgressC1Ev>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80108a4:	4618      	mov	r0, r3
 80108a6:	f004 fc9b 	bl	80151e0 <_ZN8touchgfx6SliderC1Ev>
    sliderValueChangedCallback(this, &Screen4ViewBase::sliderValueChangedCallbackHandler),
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f503 706e 	add.w	r0, r3, #952	@ 0x3b8
 80108b0:	4bcb      	ldr	r3, [pc, #812]	@ (8010be0 <_ZN15Screen4ViewBaseC1Ev+0x38c>)
 80108b2:	60bb      	str	r3, [r7, #8]
 80108b4:	2300      	movs	r3, #0
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	f107 0308 	add.w	r3, r7, #8
 80108bc:	cb0c      	ldmia	r3, {r2, r3}
 80108be:	6879      	ldr	r1, [r7, #4]
 80108c0:	f000 fa8a 	bl	8010dd8 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
    buttonCallback(this, &Screen4ViewBase::buttonCallbackHandler)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f503 7072 	add.w	r0, r3, #968	@ 0x3c8
 80108ca:	4bc6      	ldr	r3, [pc, #792]	@ (8010be4 <_ZN15Screen4ViewBaseC1Ev+0x390>)
 80108cc:	613b      	str	r3, [r7, #16]
 80108ce:	2300      	movs	r3, #0
 80108d0:	617b      	str	r3, [r7, #20]
 80108d2:	f107 0310 	add.w	r3, r7, #16
 80108d6:	cb0c      	ldmia	r3, {r2, r3}
 80108d8:	6879      	ldr	r1, [r7, #4]
 80108da:	f000 fabd 	bl	8010e58 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 800, 480);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80108e4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80108ee:	2200      	movs	r2, #0
 80108f0:	2100      	movs	r1, #0
 80108f2:	f7f9 fef1 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80108fc:	2300      	movs	r3, #0
 80108fe:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8010902:	2300      	movs	r3, #0
 8010904:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8010908:	2300      	movs	r3, #0
 801090a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 801090e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8010912:	041a      	lsls	r2, r3, #16
 8010914:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8010918:	021b      	lsls	r3, r3, #8
 801091a:	431a      	orrs	r2, r3
 801091c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8010920:	4313      	orrs	r3, r2
 8010922:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010926:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801092a:	4611      	mov	r1, r2
 801092c:	4618      	mov	r0, r3
 801092e:	f7fc f863 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 8010932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010934:	4619      	mov	r1, r3
 8010936:	4620      	mov	r0, r4
 8010938:	f7fc f93c 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3340      	adds	r3, #64	@ 0x40
 8010942:	4619      	mov	r1, r3
 8010944:	4610      	mov	r0, r2
 8010946:	f7fc f901 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8010950:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801095a:	2200      	movs	r2, #0
 801095c:	2100      	movs	r1, #0
 801095e:	f7f9 febb 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(5, 1, 48));
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8010968:	2305      	movs	r3, #5
 801096a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 801096e:	2301      	movs	r3, #1
 8010970:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8010974:	2330      	movs	r3, #48	@ 0x30
 8010976:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801097a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 801097e:	041a      	lsls	r2, r3, #16
 8010980:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8010984:	021b      	lsls	r3, r3, #8
 8010986:	431a      	orrs	r2, r3
 8010988:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801098c:	4313      	orrs	r3, r2
 801098e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010992:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010996:	4611      	mov	r1, r2
 8010998:	4618      	mov	r0, r3
 801099a:	f7fc f82d 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 801099e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a0:	4619      	mov	r1, r3
 80109a2:	4620      	mov	r0, r4
 80109a4:	f7fc f906 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	336c      	adds	r3, #108	@ 0x6c
 80109ae:	4619      	mov	r1, r3
 80109b0:	4610      	mov	r0, r2
 80109b2:	f7fc f8cb 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(743, 421);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	3398      	adds	r3, #152	@ 0x98
 80109ba:	f240 12a5 	movw	r2, #421	@ 0x1a5
 80109be:	f240 21e7 	movw	r1, #743	@ 0x2e7
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7f9 fee1 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 80109ce:	f107 0318 	add.w	r3, r7, #24
 80109d2:	2106      	movs	r1, #6
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fc f81e 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 80109da:	f107 031c 	add.w	r3, r7, #28
 80109de:	2107      	movs	r1, #7
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fc f818 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 80109e6:	f107 021c 	add.w	r2, r7, #28
 80109ea:	f107 0318 	add.w	r3, r7, #24
 80109ee:	4619      	mov	r1, r3
 80109f0:	4620      	mov	r0, r4
 80109f2:	f007 fe7d 	bl	80186f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8010a02:	4619      	mov	r1, r3
 8010a04:	4610      	mov	r0, r2
 8010a06:	f7fc f92f 	bl	800cc68 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	3398      	adds	r3, #152	@ 0x98
 8010a10:	4619      	mov	r1, r3
 8010a12:	4610      	mov	r0, r2
 8010a14:	f7fc f89a 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    boxProgress1.setXY(250, 143);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	33cc      	adds	r3, #204	@ 0xcc
 8010a1c:	228f      	movs	r2, #143	@ 0x8f
 8010a1e:	21fa      	movs	r1, #250	@ 0xfa
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f9 feb2 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(0, 0, 300, 10);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8010a2c:	230a      	movs	r3, #10
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8010a34:	2200      	movs	r2, #0
 8010a36:	2100      	movs	r1, #0
 8010a38:	f003 fca4 	bl	8014384 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8010a42:	2300      	movs	r3, #0
 8010a44:	9300      	str	r3, [sp, #0]
 8010a46:	2300      	movs	r3, #0
 8010a48:	2264      	movs	r2, #100	@ 0x64
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	f003 fdb0 	bl	80145b0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	33cc      	adds	r3, #204	@ 0xcc
 8010a54:	2100      	movs	r1, #0
 8010a56:	4618      	mov	r0, r3
 8010a58:	f003 fd89 	bl	801456e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_MEDIUM_ID));
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
 8010a62:	f107 0320 	add.w	r3, r7, #32
 8010a66:	2100      	movs	r1, #0
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fb ffd4 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 8010a6e:	f107 0320 	add.w	r3, r7, #32
 8010a72:	4619      	mov	r1, r3
 8010a74:	4620      	mov	r0, r4
 8010a76:	f003 fec1 	bl	80147fc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 0));
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
 8010a80:	23ff      	movs	r3, #255	@ 0xff
 8010a82:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8010a86:	23ff      	movs	r3, #255	@ 0xff
 8010a88:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8010a92:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010a96:	041a      	lsls	r2, r3, #16
 8010a98:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010a9c:	021b      	lsls	r3, r3, #8
 8010a9e:	431a      	orrs	r2, r3
 8010aa0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010aaa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010aae:	4611      	mov	r1, r2
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fb ffa1 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 8010ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ab8:	4619      	mov	r1, r3
 8010aba:	4620      	mov	r0, r4
 8010abc:	f003 fc54 	bl	8014368 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	33cc      	adds	r3, #204	@ 0xcc
 8010ac4:	213c      	movs	r1, #60	@ 0x3c
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f003 fc74 	bl	80143b4 <_ZN8touchgfx11BoxProgress8setValueEi>
    add(boxProgress1);
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	33cc      	adds	r3, #204	@ 0xcc
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	f7fc f839 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textProgress1.setXY(313, 182);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010ae0:	22b6      	movs	r2, #182	@ 0xb6
 8010ae2:	f240 1139 	movw	r1, #313	@ 0x139
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7f9 fe4f 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(12, 10, 150, 30);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8010af2:	231e      	movs	r3, #30
 8010af4:	9300      	str	r3, [sp, #0]
 8010af6:	2396      	movs	r3, #150	@ 0x96
 8010af8:	220a      	movs	r2, #10
 8010afa:	210c      	movs	r1, #12
 8010afc:	f003 fbc0 	bl	8014280 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8010b06:	2300      	movs	r3, #0
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	2264      	movs	r2, #100	@ 0x64
 8010b0e:	2100      	movs	r1, #0
 8010b10:	f003 fd4e 	bl	80145b0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(157, 247, 30));
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8010b1a:	239d      	movs	r3, #157	@ 0x9d
 8010b1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8010b20:	23f7      	movs	r3, #247	@ 0xf7
 8010b22:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8010b26:	231e      	movs	r3, #30
 8010b28:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8010b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b30:	041a      	lsls	r2, r3, #16
 8010b32:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8010b36:	021b      	lsls	r3, r3, #8
 8010b38:	431a      	orrs	r2, r3
 8010b3a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010b48:	4611      	mov	r1, r2
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fb ff54 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 8010b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b52:	4619      	mov	r1, r3
 8010b54:	4620      	mov	r0, r4
 8010b56:	f003 fb20 	bl	801419a <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1EKU));
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8010b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b64:	2100      	movs	r1, #0
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fe fa62 	bl	800f030 <_ZN8touchgfx9TypedTextC1Et>
 8010b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b70:	4619      	mov	r1, r3
 8010b72:	4620      	mov	r0, r4
 8010b74:	f003 fb2d 	bl	80141d2 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8010b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7f9 fb05 	bl	800a18c <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TEXTPROGRESS_BACKGROUNDS_ROUNDED_LIGHT_ID));
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8010b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010b8c:	2104      	movs	r1, #4
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fb ff41 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 8010b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f003 fe2e 	bl	80147fc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(60);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010ba6:	213c      	movs	r1, #60	@ 0x3c
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f003 fb1d 	bl	80141e8 <_ZN8touchgfx12TextProgress8setValueEi>
    add(textProgress1);
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	4610      	mov	r0, r2
 8010bba:	f7fb ffc7 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    slider1.setXY(234, 266);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010bc4:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8010bc8:	21ea      	movs	r1, #234	@ 0xea
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7f9 fddd 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUND_LIGHT_ID));
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f503 7431 	add.w	r4, r3, #708	@ 0x2c4
 8010bd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010bda:	e005      	b.n	8010be8 <_ZN15Screen4ViewBaseC1Ev+0x394>
 8010bdc:	0803080c 	.word	0x0803080c
 8010be0:	08010d33 	.word	0x08010d33
 8010be4:	08010d61 	.word	0x08010d61
 8010be8:	2103      	movs	r1, #3
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fb ff13 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 8010bf0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010bf4:	2101      	movs	r1, #1
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fb ff0d 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 8010bfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010c00:	2102      	movs	r1, #2
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fb ff07 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 8010c08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010c0c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010c10:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010c14:	4620      	mov	r0, r4
 8010c16:	f004 fb3d 	bl	8015294 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 100);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8010c20:	2364      	movs	r3, #100	@ 0x64
 8010c22:	9301      	str	r3, [sp, #4]
 8010c24:	2300      	movs	r3, #0
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	2300      	movs	r3, #0
 8010c2a:	220b      	movs	r2, #11
 8010c2c:	2110      	movs	r1, #16
 8010c2e:	f004 fa52 	bl	80150d6 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    slider1.setValueRange(0, 100);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010c38:	2264      	movs	r2, #100	@ 0x64
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f004 f910 	bl	8014e62 <_ZN8touchgfx6Slider13setValueRangeEss>
    slider1.setValue(0);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010c48:	2100      	movs	r1, #0
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f004 f8d1 	bl	8014df2 <_ZN8touchgfx6Slider8setValueEs>
    slider1.setNewValueCallback(sliderValueChangedCallback);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f503 7231 	add.w	r2, r3, #708	@ 0x2c4
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	4610      	mov	r0, r2
 8010c60:	f7ff fc6a 	bl	8010538 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    add(slider1);
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4610      	mov	r0, r2
 8010c70:	f7fb ff6c 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	4618      	mov	r0, r3
 8010c78:	375c      	adds	r7, #92	@ 0x5c
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd90      	pop	{r4, r7, pc}
 8010c7e:	bf00      	nop

08010c80 <_ZN15Screen4ViewBaseD1Ev>:

Screen4ViewBase::~Screen4ViewBase()
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	4a1b      	ldr	r2, [pc, #108]	@ (8010cf8 <_ZN15Screen4ViewBaseD1Ev+0x78>)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	601a      	str	r2, [r3, #0]
{

}
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7ff fdbb 	bl	8010810 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fd93 	bl	80107cc <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivED1Ev>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7ff fd57 	bl	8010760 <_ZN8touchgfx6SliderD1Ev>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fd27 	bl	801070c <_ZN8touchgfx12TextProgressD1Ev>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	33cc      	adds	r3, #204	@ 0xcc
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7ff fcd8 	bl	8010678 <_ZN8touchgfx11BoxProgressD1Ev>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	3398      	adds	r3, #152	@ 0x98
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fc f891 	bl	800cdf4 <_ZN8touchgfx6ButtonD1Ev>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	336c      	adds	r3, #108	@ 0x6c
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fc f848 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	3340      	adds	r3, #64	@ 0x40
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fc f843 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7ff fc55 	bl	8010598 <_ZN8touchgfx4ViewI16Screen4PresenterED1Ev>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	0803080c 	.word	0x0803080c

08010cfc <_ZN15Screen4ViewBaseD0Ev>:
Screen4ViewBase::~Screen4ViewBase()
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
}
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff ffbb 	bl	8010c80 <_ZN15Screen4ViewBaseD1Ev>
 8010d0a:	f44f 7176 	mov.w	r1, #984	@ 0x3d8
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f01c f91f 	bl	802cf52 <_ZdlPvj>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	4618      	mov	r0, r3
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <_ZN15Screen4ViewBase11setupScreenEv>:

void Screen4ViewBase::setupScreen()
{
 8010d1e:	b480      	push	{r7}
 8010d20:	b083      	sub	sp, #12
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]

}
 8010d26:	bf00      	nop
 8010d28:	370c      	adds	r7, #12
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr

08010d32 <_ZN15Screen4ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen4ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b084      	sub	sp, #16
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	60f8      	str	r0, [r7, #12]
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
    if (&src == &slider1)
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d106      	bne.n	8010d58 <_ZN15Screen4ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Interaction1
        //When slider1 value changed call virtual function
        //Call function1
        function1(value);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	332c      	adds	r3, #44	@ 0x2c
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	6879      	ldr	r1, [r7, #4]
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	4798      	blx	r3
    }
}
 8010d58:	bf00      	nop
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <_ZN15Screen4ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen4ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	3398      	adds	r3, #152	@ 0x98
 8010d6e:	683a      	ldr	r2, [r7, #0]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d106      	bne.n	8010d82 <_ZN15Screen4ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction2
        //When button1 clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenWipeTransitionEast();
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff fc04 	bl	8010582 <_ZN15Screen4ViewBase11applicationEv>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fa f94d 	bl	800b01c <_ZN23FrontendApplicationBase34gotoscreenScreenWipeTransitionEastEv>
    }
}
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <_ZN8touchgfx4ViewI16Screen4PresenterEC1Ev>:
    View()
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f00b fdca 	bl	801c930 <_ZN8touchgfx6ScreenC1Ev>
 8010d9c:	4a05      	ldr	r2, [pc, #20]	@ (8010db4 <_ZN8touchgfx4ViewI16Screen4PresenterEC1Ev+0x28>)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4618      	mov	r0, r3
 8010dac:	3708      	adds	r7, #8
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	08030874 	.word	0x08030874

08010db8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	4a04      	ldr	r2, [pc, #16]	@ (8010dd4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	601a      	str	r2, [r3, #0]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr
 8010dd4:	080308a8 	.word	0x080308a8

08010dd8 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_2)(T1, T2))
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	4639      	mov	r1, r7
 8010de4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_2)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7ff ffe4 	bl	8010db8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8010df0:	4a08      	ldr	r2, [pc, #32]	@ (8010e14 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	601a      	str	r2, [r3, #0]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	605a      	str	r2, [r3, #4]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3308      	adds	r3, #8
 8010e00:	463a      	mov	r2, r7
 8010e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e06:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3710      	adds	r7, #16
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0803085c 	.word	0x0803085c

08010e18 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    }
 8010e20:	4a04      	ldr	r2, [pc, #16]	@ (8010e34 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr
 8010e34:	080308a8 	.word	0x080308a8

08010e38 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
    }
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f7ff ffe9 	bl	8010e18 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8010e46:	2104      	movs	r1, #4
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f01c f882 	bl	802cf52 <_ZdlPvj>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	4639      	mov	r1, r7
 8010e64:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fc f972 	bl	800d154 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010e70:	4a08      	ldr	r2, [pc, #32]	@ (8010e94 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	601a      	str	r2, [r3, #0]
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	605a      	str	r2, [r3, #4]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	3308      	adds	r3, #8
 8010e80:	463a      	mov	r2, r7
 8010e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	08030844 	.word	0x08030844

08010e98 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	68d2      	ldr	r2, [r2, #12]
 8010eaa:	1052      	asrs	r2, r2, #1
 8010eac:	1898      	adds	r0, r3, r2
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	f003 0301 	and.w	r3, r3, #1
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d102      	bne.n	8010ec0 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	e00a      	b.n	8010ed6 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	68d2      	ldr	r2, [r2, #12]
 8010ec8:	1052      	asrs	r2, r2, #1
 8010eca:	4413      	add	r3, r2
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	6892      	ldr	r2, [r2, #8]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	4798      	blx	r3
    }
 8010eda:	bf00      	nop
 8010edc:	3708      	adds	r7, #8
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010ee2:	b480      	push	{r7}
 8010ee4:	b083      	sub	sp, #12
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d010      	beq.n	8010f14 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	689b      	ldr	r3, [r3, #8]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d107      	bne.n	8010f0a <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d101      	bne.n	8010f0a <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010f06:	2301      	movs	r3, #1
 8010f08:	e000      	b.n	8010f0c <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d001      	beq.n	8010f14 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e000      	b.n	8010f16 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010f14:	2300      	movs	r3, #0
    }
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr

08010f22 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8010f22:	b580      	push	{r7, lr}
 8010f24:	b084      	sub	sp, #16
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	60f8      	str	r0, [r7, #12]
 8010f2a:	60b9      	str	r1, [r7, #8]
 8010f2c:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun)(t1, t2);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	68d2      	ldr	r2, [r2, #12]
 8010f36:	1052      	asrs	r2, r2, #1
 8010f38:	1898      	adds	r0, r3, r2
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	f003 0301 	and.w	r3, r3, #1
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	e00a      	b.n	8010f62 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	68d2      	ldr	r2, [r2, #12]
 8010f54:	1052      	asrs	r2, r2, #1
 8010f56:	4413      	add	r3, r2
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	6892      	ldr	r2, [r2, #8]
 8010f5e:	4413      	add	r3, r2
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	68b9      	ldr	r1, [r7, #8]
 8010f66:	4798      	blx	r3
    }
 8010f68:	bf00      	nop
 8010f6a:	3710      	adds	r7, #16
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d010      	beq.n	8010fa2 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d107      	bne.n	8010f98 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	f003 0301 	and.w	r3, r3, #1
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d001      	beq.n	8010fa2 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e000      	b.n	8010fa4 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8010fa2:	2300      	movs	r3, #0
    }
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	370c      	adds	r7, #12
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <_ZN14screenViewBase11applicationEv>:
    screenViewBase();
    virtual ~screenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010fb8:	f00a f862 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 8010fbc:	4603      	mov	r3, r0
    }
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
	...

08010fc8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	4a05      	ldr	r2, [pc, #20]	@ (8010fe8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	601a      	str	r2, [r3, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fb fd5f 	bl	800ca9c <_ZN8touchgfx6ScreenD1Ev>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	0803099c 	.word	0x0803099c

08010fec <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff ffe7 	bl	8010fc8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010ffa:	2140      	movs	r1, #64	@ 0x40
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f01b ffa8 	bl	802cf52 <_ZdlPvj>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	4a05      	ldr	r2, [pc, #20]	@ (801102c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	601a      	str	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4618      	mov	r0, r3
 801101e:	f7fc f8c9 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4618      	mov	r0, r3
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	08030984 	.word	0x08030984

08011030 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7ff ffe7 	bl	801100c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801103e:	2110      	movs	r1, #16
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f01b ff86 	bl	802cf52 <_ZdlPvj>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4618      	mov	r0, r3
 801104a:	3708      	adds	r7, #8
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase() :
 8011050:	b590      	push	{r4, r7, lr}
 8011052:	b08f      	sub	sp, #60	@ 0x3c
 8011054:	af02      	add	r7, sp, #8
 8011056:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4618      	mov	r0, r3
 801105c:	f000 f94e 	bl	80112fc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8011060:	4a76      	ldr	r2, [pc, #472]	@ (801123c <_ZN14screenViewBaseC1Ev+0x1ec>)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	601a      	str	r2, [r3, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	3340      	adds	r3, #64	@ 0x40
 801106a:	4618      	mov	r0, r3
 801106c:	f7fb fd7e 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	336c      	adds	r3, #108	@ 0x6c
 8011074:	4618      	mov	r0, r3
 8011076:	f7fb fd79 	bl	800cb6c <_ZN8touchgfx3BoxC1Ev>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8011080:	f107 0308 	add.w	r3, r7, #8
 8011084:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011088:	4618      	mov	r0, r3
 801108a:	f7fb fcc4 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 801108e:	f107 0308 	add.w	r3, r7, #8
 8011092:	4619      	mov	r1, r3
 8011094:	4620      	mov	r0, r4
 8011096:	f7fb fd9b 	bl	800cbd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	33c4      	adds	r3, #196	@ 0xc4
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fb fe12 	bl	800ccc8 <_ZN8touchgfx6ButtonC1Ev>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 80110aa:	4b65      	ldr	r3, [pc, #404]	@ (8011240 <_ZN14screenViewBaseC1Ev+0x1f0>)
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	2300      	movs	r3, #0
 80110b0:	613b      	str	r3, [r7, #16]
 80110b2:	f107 030c 	add.w	r3, r7, #12
 80110b6:	cb0c      	ldmia	r3, {r2, r3}
 80110b8:	6879      	ldr	r1, [r7, #4]
 80110ba:	f000 f935 	bl	8011328 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 800, 480);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80110c4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80110ce:	2200      	movs	r2, #0
 80110d0:	2100      	movs	r1, #0
 80110d2:	f7f9 fb01 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80110dc:	2300      	movs	r3, #0
 80110de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80110e2:	2300      	movs	r3, #0
 80110e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110e8:	2300      	movs	r3, #0
 80110ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80110ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80110f2:	041a      	lsls	r2, r3, #16
 80110f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110f8:	021b      	lsls	r3, r3, #8
 80110fa:	431a      	orrs	r2, r3
 80110fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011100:	4313      	orrs	r3, r2
 8011102:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801110a:	4611      	mov	r1, r2
 801110c:	4618      	mov	r0, r3
 801110e:	f7fb fc73 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 8011112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011114:	4619      	mov	r1, r3
 8011116:	4620      	mov	r0, r4
 8011118:	f7fb fd4c 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	3340      	adds	r3, #64	@ 0x40
 8011122:	4619      	mov	r1, r3
 8011124:	4610      	mov	r0, r2
 8011126:	f7fb fd11 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8011130:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8011134:	9300      	str	r3, [sp, #0]
 8011136:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801113a:	2200      	movs	r2, #0
 801113c:	2100      	movs	r1, #0
 801113e:	f7f9 facb 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8011148:	23ff      	movs	r3, #255	@ 0xff
 801114a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801114e:	23ff      	movs	r3, #255	@ 0xff
 8011150:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8011154:	23ff      	movs	r3, #255	@ 0xff
 8011156:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 801115a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801115e:	041a      	lsls	r2, r3, #16
 8011160:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011164:	021b      	lsls	r3, r3, #8
 8011166:	431a      	orrs	r2, r3
 8011168:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801116c:	4313      	orrs	r3, r2
 801116e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011172:	f107 0320 	add.w	r3, r7, #32
 8011176:	4611      	mov	r1, r2
 8011178:	4618      	mov	r0, r3
 801117a:	f7fb fc3d 	bl	800c9f8 <_ZN8touchgfx9colortypeC1Em>
 801117e:	6a3b      	ldr	r3, [r7, #32]
 8011180:	4619      	mov	r1, r3
 8011182:	4620      	mov	r0, r4
 8011184:	f7fb fd16 	bl	800cbb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	336c      	adds	r3, #108	@ 0x6c
 801118e:	4619      	mov	r1, r3
 8011190:	4610      	mov	r0, r2
 8011192:	f7fb fcdb 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(80, 0);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	3398      	adds	r3, #152	@ 0x98
 801119a:	2200      	movs	r2, #0
 801119c:	2150      	movs	r1, #80	@ 0x50
 801119e:	4618      	mov	r0, r3
 80111a0:	f7f9 faf3 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_VIEW_HOME_ID));
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 80111aa:	f107 0314 	add.w	r3, r7, #20
 80111ae:	2109      	movs	r1, #9
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fb fc30 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 80111b6:	f107 0314 	add.w	r3, r7, #20
 80111ba:	4619      	mov	r1, r3
 80111bc:	4620      	mov	r0, r4
 80111be:	f007 fbb7 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	3398      	adds	r3, #152	@ 0x98
 80111c8:	4619      	mov	r1, r3
 80111ca:	4610      	mov	r0, r2
 80111cc:	f7fb fcbe 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(742, 422);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	33c4      	adds	r3, #196	@ 0xc4
 80111d4:	f44f 72d3 	mov.w	r2, #422	@ 0x1a6
 80111d8:	f240 21e6 	movw	r1, #742	@ 0x2e6
 80111dc:	4618      	mov	r0, r3
 80111de:	f7f9 fad4 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_SIZE50_ID), touchgfx::Bitmap(BITMAP_RIGHT_CHEVRON_SIZE50_ID));
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 80111e8:	f107 0318 	add.w	r3, r7, #24
 80111ec:	2106      	movs	r1, #6
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fb fc11 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 80111f4:	f107 031c 	add.w	r3, r7, #28
 80111f8:	2107      	movs	r1, #7
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fb fc0b 	bl	800ca16 <_ZN8touchgfx6BitmapC1Et>
 8011200:	f107 021c 	add.w	r2, r7, #28
 8011204:	f107 0318 	add.w	r3, r7, #24
 8011208:	4619      	mov	r1, r3
 801120a:	4620      	mov	r0, r4
 801120c:	f007 fa70 	bl	80186f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	33f8      	adds	r3, #248	@ 0xf8
 801121a:	4619      	mov	r1, r3
 801121c:	4610      	mov	r0, r2
 801121e:	f7fb fd23 	bl	800cc68 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	33c4      	adds	r3, #196	@ 0xc4
 8011228:	4619      	mov	r1, r3
 801122a:	4610      	mov	r0, r2
 801122c:	f7fb fc8e 	bl	800cb4c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4618      	mov	r0, r3
 8011234:	3734      	adds	r7, #52	@ 0x34
 8011236:	46bd      	mov	sp, r7
 8011238:	bd90      	pop	{r4, r7, pc}
 801123a:	bf00      	nop
 801123c:	08030950 	.word	0x08030950
 8011240:	080112d3 	.word	0x080112d3

08011244 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	4a12      	ldr	r2, [pc, #72]	@ (8011298 <_ZN14screenViewBaseD1Ev+0x54>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	601a      	str	r2, [r3, #0]
{

}
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	33f8      	adds	r3, #248	@ 0xf8
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fed8 	bl	801100c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	33c4      	adds	r3, #196	@ 0xc4
 8011260:	4618      	mov	r0, r3
 8011262:	f7fb fdc7 	bl	800cdf4 <_ZN8touchgfx6ButtonD1Ev>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	3398      	adds	r3, #152	@ 0x98
 801126a:	4618      	mov	r0, r3
 801126c:	f7fb fda0 	bl	800cdb0 <_ZN8touchgfx5ImageD1Ev>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	336c      	adds	r3, #108	@ 0x6c
 8011274:	4618      	mov	r0, r3
 8011276:	f7fb fd79 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	3340      	adds	r3, #64	@ 0x40
 801127e:	4618      	mov	r0, r3
 8011280:	f7fb fd74 	bl	800cd6c <_ZN8touchgfx3BoxD1Ev>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fe9e 	bl	8010fc8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4618      	mov	r0, r3
 8011290:	3708      	adds	r7, #8
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	08030950 	.word	0x08030950

0801129c <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
}
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7ff ffcd 	bl	8011244 <_ZN14screenViewBaseD1Ev>
 80112aa:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f01b fe4f 	bl	802cf52 <_ZdlPvj>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4618      	mov	r0, r3
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 80112be:	b480      	push	{r7}
 80112c0:	b083      	sub	sp, #12
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]

}
 80112c6:	bf00      	nop
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b082      	sub	sp, #8
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	33c4      	adds	r3, #196	@ 0xc4
 80112e0:	683a      	ldr	r2, [r7, #0]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d106      	bne.n	80112f4 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7ff fe62 	bl	8010fb0 <_ZN14screenViewBase11applicationEv>
 80112ec:	4603      	mov	r3, r0
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7f9 ff20 	bl	800b134 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
}
 80112f4:	bf00      	nop
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4618      	mov	r0, r3
 8011308:	f00b fb12 	bl	801c930 <_ZN8touchgfx6ScreenC1Ev>
 801130c:	4a05      	ldr	r2, [pc, #20]	@ (8011324 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4618      	mov	r0, r3
 801131c:	3708      	adds	r7, #8
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	0803099c 	.word	0x0803099c

08011328 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	4639      	mov	r1, r7
 8011334:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	4618      	mov	r0, r3
 801133c:	f7fb ff0a 	bl	800d154 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011340:	4a08      	ldr	r2, [pc, #32]	@ (8011364 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	68ba      	ldr	r2, [r7, #8]
 801134a:	605a      	str	r2, [r3, #4]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	3308      	adds	r3, #8
 8011350:	463a      	mov	r2, r7
 8011352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011356:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	08030984 	.word	0x08030984

08011368 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	68d2      	ldr	r2, [r2, #12]
 801137a:	1052      	asrs	r2, r2, #1
 801137c:	1898      	adds	r0, r3, r2
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	d102      	bne.n	8011390 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	e00a      	b.n	80113a6 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	68d2      	ldr	r2, [r2, #12]
 8011398:	1052      	asrs	r2, r2, #1
 801139a:	4413      	add	r3, r2
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	6892      	ldr	r2, [r2, #8]
 80113a2:	4413      	add	r3, r2
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6839      	ldr	r1, [r7, #0]
 80113a8:	4798      	blx	r3
    }
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80113b2:	b480      	push	{r7}
 80113b4:	b083      	sub	sp, #12
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d010      	beq.n	80113e4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d107      	bne.n	80113da <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	f003 0301 	and.w	r3, r3, #1
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d101      	bne.n	80113da <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80113d6:	2301      	movs	r3, #1
 80113d8:	e000      	b.n	80113dc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80113da:	2300      	movs	r3, #0
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d001      	beq.n	80113e4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80113e0:	2301      	movs	r3, #1
 80113e2:	e000      	b.n	80113e6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80113e4:	2300      	movs	r3, #0
    }
 80113e6:	4618      	mov	r0, r3
 80113e8:	370c      	adds	r7, #12
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
	...

080113f4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80113f4:	b480      	push	{r7}
 80113f6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80113f8:	4b02      	ldr	r3, [pc, #8]	@ (8011404 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr
 8011404:	080309c8 	.word	0x080309c8

08011408 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011408:	b480      	push	{r7}
 801140a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801140c:	230a      	movs	r3, #10
}
 801140e:	4618      	mov	r0, r3
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	460b      	mov	r3, r1
 8011422:	607a      	str	r2, [r7, #4]
 8011424:	817b      	strh	r3, [r7, #10]
        return 0;
 8011426:	2300      	movs	r3, #0
    }
 8011428:	4618      	mov	r0, r3
 801142a:	3714      	adds	r7, #20
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8011434:	b480      	push	{r7}
 8011436:	b083      	sub	sp, #12
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
        return 0;
 801143c:	2300      	movs	r3, #0
    }
 801143e:	4618      	mov	r0, r3
 8011440:	370c      	adds	r7, #12
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr

0801144a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801144a:	b480      	push	{r7}
 801144c:	b083      	sub	sp, #12
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
        return 0;
 8011452:	2300      	movs	r3, #0
    }
 8011454:	4618      	mov	r0, r3
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr

08011460 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	4613      	mov	r3, r2
 801146c:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801146e:	4a07      	ldr	r2, [pc, #28]	@ (801148c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011474:	4a06      	ldr	r2, [pc, #24]	@ (8011490 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801147a:	4a06      	ldr	r2, [pc, #24]	@ (8011494 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801147c:	88fb      	ldrh	r3, [r7, #6]
 801147e:	8013      	strh	r3, [r2, #0]
    }
 8011480:	bf00      	nop
 8011482:	3714      	adds	r7, #20
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr
 801148c:	2001231c 	.word	0x2001231c
 8011490:	20012324 	.word	0x20012324
 8011494:	20012320 	.word	0x20012320

08011498 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011498:	b40e      	push	{r1, r2, r3}
 801149a:	b580      	push	{r7, lr}
 801149c:	b085      	sub	sp, #20
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80114a2:	f107 0320 	add.w	r3, r7, #32
 80114a6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	69fa      	ldr	r2, [r7, #28]
 80114ac:	2100      	movs	r1, #0
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f00a fda6 	bl	801c000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80114b4:	4603      	mov	r3, r0
 80114b6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80114b8:	89fb      	ldrh	r3, [r7, #14]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3714      	adds	r7, #20
 80114be:	46bd      	mov	sp, r7
 80114c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80114c4:	b003      	add	sp, #12
 80114c6:	4770      	bx	lr

080114c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80114c8:	b40c      	push	{r2, r3}
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b084      	sub	sp, #16
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	460b      	mov	r3, r1
 80114d4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80114d6:	f107 031c 	add.w	r3, r7, #28
 80114da:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80114dc:	78f9      	ldrb	r1, [r7, #3]
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	69ba      	ldr	r2, [r7, #24]
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f00a fd8c 	bl	801c000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80114e8:	4603      	mov	r3, r0
 80114ea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80114ec:	89fb      	ldrh	r3, [r7, #14]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3710      	adds	r7, #16
 80114f2:	46bd      	mov	sp, r7
 80114f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80114f8:	b002      	add	sp, #8
 80114fa:	4770      	bx	lr

080114fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08a      	sub	sp, #40	@ 0x28
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	460b      	mov	r3, r1
 8011506:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801150c:	2b00      	cmp	r3, #0
 801150e:	d016      	beq.n	801153e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	3322      	adds	r3, #34	@ 0x22
 8011514:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011518:	8adb      	ldrh	r3, [r3, #22]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d105      	bne.n	801152a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801151e:	4b43      	ldr	r3, [pc, #268]	@ (801162c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011520:	4a43      	ldr	r2, [pc, #268]	@ (8011630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011522:	21c5      	movs	r1, #197	@ 0xc5
 8011524:	4843      	ldr	r0, [pc, #268]	@ (8011634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011526:	f01c fa75 	bl	802da14 <__assert_func>
            return buffer[pos];
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	8a9b      	ldrh	r3, [r3, #20]
 801152e:	461a      	mov	r2, r3
 8011530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011532:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d001      	beq.n	801153e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801153a:	2301      	movs	r3, #1
 801153c:	e000      	b.n	8011540 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801153e:	2300      	movs	r3, #0
 8011540:	2b00      	cmp	r3, #0
 8011542:	d06a      	beq.n	801161a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f00c f95d 	bl	801d804 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	3322      	adds	r3, #34	@ 0x22
 801154e:	623b      	str	r3, [r7, #32]
 8011550:	2301      	movs	r3, #1
 8011552:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011554:	6a3b      	ldr	r3, [r7, #32]
 8011556:	8adb      	ldrh	r3, [r3, #22]
 8011558:	8bfa      	ldrh	r2, [r7, #30]
 801155a:	429a      	cmp	r2, r3
 801155c:	d305      	bcc.n	801156a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801155e:	4b36      	ldr	r3, [pc, #216]	@ (8011638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011560:	4a36      	ldr	r2, [pc, #216]	@ (801163c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011562:	21cb      	movs	r1, #203	@ 0xcb
 8011564:	4833      	ldr	r0, [pc, #204]	@ (8011634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011566:	f01c fa55 	bl	802da14 <__assert_func>
            const uint16_t index = pos + offset;
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	8a9a      	ldrh	r2, [r3, #20]
 801156e:	8bfb      	ldrh	r3, [r7, #30]
 8011570:	4413      	add	r3, r2
 8011572:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011574:	8bbb      	ldrh	r3, [r7, #28]
 8011576:	2b09      	cmp	r3, #9
 8011578:	d801      	bhi.n	801157e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801157a:	8bbb      	ldrh	r3, [r7, #28]
 801157c:	e001      	b.n	8011582 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801157e:	8bbb      	ldrh	r3, [r7, #28]
 8011580:	3b0a      	subs	r3, #10
 8011582:	6a3a      	ldr	r2, [r7, #32]
 8011584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011588:	f640 123f 	movw	r2, #2367	@ 0x93f
 801158c:	4293      	cmp	r3, r2
 801158e:	bf0c      	ite	eq
 8011590:	2301      	moveq	r3, #1
 8011592:	2300      	movne	r3, #0
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b00      	cmp	r3, #0
 8011598:	d03f      	beq.n	801161a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	3322      	adds	r3, #34	@ 0x22
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	3222      	adds	r2, #34	@ 0x22
 80115a2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	8ad2      	ldrh	r2, [r2, #22]
 80115a8:	2a00      	cmp	r2, #0
 80115aa:	d105      	bne.n	80115b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80115ac:	4b1f      	ldr	r3, [pc, #124]	@ (801162c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80115ae:	4a20      	ldr	r2, [pc, #128]	@ (8011630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80115b0:	21c5      	movs	r1, #197	@ 0xc5
 80115b2:	4820      	ldr	r0, [pc, #128]	@ (8011634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80115b4:	f01c fa2e 	bl	802da14 <__assert_func>
            return buffer[pos];
 80115b8:	68ba      	ldr	r2, [r7, #8]
 80115ba:	8a92      	ldrh	r2, [r2, #20]
 80115bc:	4611      	mov	r1, r2
 80115be:	68ba      	ldr	r2, [r7, #8]
 80115c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80115c4:	613b      	str	r3, [r7, #16]
 80115c6:	4613      	mov	r3, r2
 80115c8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	8adb      	ldrh	r3, [r3, #22]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d806      	bhi.n	80115e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80115d2:	4b1b      	ldr	r3, [pc, #108]	@ (8011640 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80115d4:	4a1b      	ldr	r2, [pc, #108]	@ (8011644 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80115d6:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80115da:	4816      	ldr	r0, [pc, #88]	@ (8011634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80115dc:	f01c fa1a 	bl	802da14 <__assert_func>
            const uint16_t index = pos + 1;
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	8a9b      	ldrh	r3, [r3, #20]
 80115e4:	3301      	adds	r3, #1
 80115e6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80115e8:	89bb      	ldrh	r3, [r7, #12]
 80115ea:	2b09      	cmp	r3, #9
 80115ec:	d801      	bhi.n	80115f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80115ee:	89bb      	ldrh	r3, [r7, #12]
 80115f0:	e000      	b.n	80115f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80115f2:	2300      	movs	r3, #0
 80115f4:	693a      	ldr	r2, [r7, #16]
 80115f6:	89f9      	ldrh	r1, [r7, #14]
 80115f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80115fc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	3322      	adds	r3, #34	@ 0x22
 8011602:	61bb      	str	r3, [r7, #24]
 8011604:	f640 133f 	movw	r3, #2367	@ 0x93f
 8011608:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	8a9b      	ldrh	r3, [r3, #20]
 801160e:	4619      	mov	r1, r3
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	8afa      	ldrh	r2, [r7, #22]
 8011614:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011618:	bf00      	nop
        }
    }
    return getNextChar();
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f00b fff4 	bl	801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011620:	4603      	mov	r3, r0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3728      	adds	r7, #40	@ 0x28
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	0802f83c 	.word	0x0802f83c
 8011630:	0802f848 	.word	0x0802f848
 8011634:	0802f8f4 	.word	0x0802f8f4
 8011638:	0802f93c 	.word	0x0802f93c
 801163c:	0802f94c 	.word	0x0802f94c
 8011640:	0802fa20 	.word	0x0802fa20
 8011644:	0802fa2c 	.word	0x0802fa2c

08011648 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f00b ffa2 	bl	801d59a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011656:	bf00      	nop
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}

0801165e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801165e:	b580      	push	{r7, lr}
 8011660:	b088      	sub	sp, #32
 8011662:	af02      	add	r7, sp, #8
 8011664:	60f8      	str	r0, [r7, #12]
 8011666:	1d38      	adds	r0, r7, #4
 8011668:	e880 0006 	stmia.w	r0, {r1, r2}
 801166c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801166e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011672:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011674:	1d39      	adds	r1, r7, #4
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167c:	9300      	str	r3, [sp, #0]
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	683a      	ldr	r2, [r7, #0]
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f009 f8ea 	bl	801a85c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011688:	bf00      	nop
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801169e:	88fb      	ldrh	r3, [r7, #6]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d127      	bne.n	80116f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80116a4:	88fb      	ldrh	r3, [r7, #6]
 80116a6:	4a1e      	ldr	r2, [pc, #120]	@ (8011720 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80116a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d016      	beq.n	80116de <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80116b0:	88fb      	ldrh	r3, [r7, #6]
 80116b2:	4a1b      	ldr	r2, [pc, #108]	@ (8011720 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80116b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116b8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	4413      	add	r3, r2
 80116c2:	4a18      	ldr	r2, [pc, #96]	@ (8011724 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80116c4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	68ba      	ldr	r2, [r7, #8]
 80116cc:	4413      	add	r3, r2
 80116ce:	4a16      	ldr	r2, [pc, #88]	@ (8011728 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80116d0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	689b      	ldr	r3, [r3, #8]
 80116d6:	68ba      	ldr	r2, [r7, #8]
 80116d8:	4413      	add	r3, r2
 80116da:	60fb      	str	r3, [r7, #12]
 80116dc:	e00a      	b.n	80116f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80116de:	4b11      	ldr	r3, [pc, #68]	@ (8011724 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80116e0:	4a12      	ldr	r2, [pc, #72]	@ (801172c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80116e2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80116e4:	4a12      	ldr	r2, [pc, #72]	@ (8011730 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80116e6:	4b10      	ldr	r3, [pc, #64]	@ (8011728 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80116e8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80116ea:	88fb      	ldrh	r3, [r7, #6]
 80116ec:	4a11      	ldr	r2, [pc, #68]	@ (8011734 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80116ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116f2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d00d      	beq.n	8011716 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80116fa:	4a0f      	ldr	r2, [pc, #60]	@ (8011738 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80116fc:	88fb      	ldrh	r3, [r7, #6]
 80116fe:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011700:	f000 f83e 	bl	8011780 <_ZN17TypedTextDatabase8getFontsEv>
 8011704:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011706:	f000 f833 	bl	8011770 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801170a:	4603      	mov	r3, r0
 801170c:	461a      	mov	r2, r3
 801170e:	4621      	mov	r1, r4
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f7ff fea5 	bl	8011460 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011716:	bf00      	nop
 8011718:	3714      	adds	r7, #20
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}
 801171e:	bf00      	nop
 8011720:	2000d954 	.word	0x2000d954
 8011724:	2000d95c 	.word	0x2000d95c
 8011728:	2000d960 	.word	0x2000d960
 801172c:	902660a0 	.word	0x902660a0
 8011730:	90266094 	.word	0x90266094
 8011734:	902660b4 	.word	0x902660b4
 8011738:	2000d958 	.word	0x2000d958

0801173c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	460b      	mov	r3, r1
 8011746:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011748:	4b07      	ldr	r3, [pc, #28]	@ (8011768 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	4b07      	ldr	r3, [pc, #28]	@ (801176c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801174e:	6819      	ldr	r1, [r3, #0]
 8011750:	887b      	ldrh	r3, [r7, #2]
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	440b      	add	r3, r1
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	4413      	add	r3, r2
}
 801175c:	4618      	mov	r0, r3
 801175e:	370c      	adds	r7, #12
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr
 8011768:	2000d95c 	.word	0x2000d95c
 801176c:	2000d960 	.word	0x2000d960

08011770 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011770:	b480      	push	{r7}
 8011772:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011774:	2303      	movs	r3, #3
}
 8011776:	4618      	mov	r0, r3
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011780:	b480      	push	{r7}
 8011782:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011784:	4b02      	ldr	r3, [pc, #8]	@ (8011790 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011786:	4618      	mov	r0, r3
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	2000d964 	.word	0x2000d964

08011794 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011794:	b580      	push	{r7, lr}
 8011796:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 8011798:	f7f8 fe34 	bl	800a404 <_Z23getFont_verdana_20_4bppv>
 801179c:	4603      	mov	r3, r0
};
 801179e:	4a07      	ldr	r2, [pc, #28]	@ (80117bc <_Z41__static_initialization_and_destruction_0v+0x28>)
 80117a0:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80117a2:	f7f8 fe89 	bl	800a4b8 <_Z23getFont_verdana_40_4bppv>
 80117a6:	4603      	mov	r3, r0
};
 80117a8:	4a04      	ldr	r2, [pc, #16]	@ (80117bc <_Z41__static_initialization_and_destruction_0v+0x28>)
 80117aa:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80117ac:	f7f8 fdd0 	bl	800a350 <_Z23getFont_verdana_10_4bppv>
 80117b0:	4603      	mov	r3, r0
};
 80117b2:	4a02      	ldr	r2, [pc, #8]	@ (80117bc <_Z41__static_initialization_and_destruction_0v+0x28>)
 80117b4:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80117b6:	bf00      	nop
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	2000d964 	.word	0x2000d964

080117c0 <_GLOBAL__sub_I_touchgfx_fonts>:
 80117c0:	b580      	push	{r7, lr}
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	f7ff ffe6 	bl	8011794 <_Z41__static_initialization_and_destruction_0v>
 80117c8:	bd80      	pop	{r7, pc}
	...

080117cc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	4a05      	ldr	r2, [pc, #20]	@ (80117ec <_ZN19FrontendApplicationD1Ev+0x20>)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f9 fb31 	bl	800ae44 <_ZN23FrontendApplicationBaseD1Ev>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4618      	mov	r0, r3
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	08030afc 	.word	0x08030afc

080117f0 <_ZN19FrontendApplicationD0Ev>:
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff ffe7 	bl	80117cc <_ZN19FrontendApplicationD1Ev>
 80117fe:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f01b fba5 	bl	802cf52 <_ZdlPvj>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011812:	b580      	push	{r7, lr}
 8011814:	b082      	sub	sp, #8
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8011820:	4618      	mov	r0, r3
 8011822:	f000 f82d 	bl	8011880 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4618      	mov	r0, r3
 801182a:	f009 fced 	bl	801b208 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801182e:	bf00      	nop
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	68b9      	ldr	r1, [r7, #8]
 801184a:	4618      	mov	r0, r3
 801184c:	f7f9 fb7e 	bl	800af4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011850:	4a03      	ldr	r2, [pc, #12]	@ (8011860 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	601a      	str	r2, [r3, #0]
{

}
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	4618      	mov	r0, r3
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	08030afc 	.word	0x08030afc

08011864 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011864:	b480      	push	{r7}
 8011866:	b083      	sub	sp, #12
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2200      	movs	r2, #0
 8011870:	601a      	str	r2, [r3, #0]
{

}
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4618      	mov	r0, r3
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]

}
 8011888:	bf00      	nop
 801188a:	370c      	adds	r7, #12
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr

08011894 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    {
    }
 801189c:	bf00      	nop
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80118a8:	b480      	push	{r7}
 80118aa:	b083      	sub	sp, #12
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
    {
    }
 80118b0:	bf00      	nop
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
    {
 80118c4:	4a04      	ldr	r2, [pc, #16]	@ (80118d8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	601a      	str	r2, [r3, #0]
    }
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr
 80118d8:	08030b88 	.word	0x08030b88

080118dc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
    }
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7ff ffe9 	bl	80118bc <_ZN8touchgfx9PresenterD1Ev>
 80118ea:	2104      	movs	r1, #4
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f01b fb30 	bl	802cf52 <_ZdlPvj>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4618      	mov	r0, r3
 80118f6:	3708      	adds	r7, #8
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
    {
 8011904:	4a04      	ldr	r2, [pc, #16]	@ (8011918 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	601a      	str	r2, [r3, #0]
    }
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr
 8011918:	08030b88 	.word	0x08030b88

0801191c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	4a06      	ldr	r2, [pc, #24]	@ (8011940 <_ZN13ModelListenerC1Ev+0x24>)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	601a      	str	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	605a      	str	r2, [r3, #4]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	4618      	mov	r0, r3
 8011934:	370c      	adds	r7, #12
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	08030b78 	.word	0x08030b78

08011944 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	4a04      	ldr	r2, [pc, #16]	@ (8011960 <_ZN13ModelListenerD1Ev+0x1c>)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	4618      	mov	r0, r3
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr
 8011960:	08030b78 	.word	0x08030b78

08011964 <_ZN13ModelListenerD0Ev>:
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7ff ffe9 	bl	8011944 <_ZN13ModelListenerD1Ev>
 8011972:	2108      	movs	r1, #8
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f01b faec 	bl	802cf52 <_ZdlPvj>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	4a09      	ldr	r2, [pc, #36]	@ (80119b4 <_ZN16Screen1PresenterD1Ev+0x30>)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	601a      	str	r2, [r3, #0]
 8011992:	4a09      	ldr	r2, [pc, #36]	@ (80119b8 <_ZN16Screen1PresenterD1Ev+0x34>)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	605a      	str	r2, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	3304      	adds	r3, #4
 801199c:	4618      	mov	r0, r3
 801199e:	f7ff ffd1 	bl	8011944 <_ZN13ModelListenerD1Ev>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ff ff89 	bl	80118bc <_ZN8touchgfx9PresenterD1Ev>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	08030b50 	.word	0x08030b50
 80119b8:	08030b68 	.word	0x08030b68

080119bc <_ZThn4_N16Screen1PresenterD1Ev>:
 80119bc:	f1a0 0004 	sub.w	r0, r0, #4
 80119c0:	e7e0      	b.n	8011984 <_ZN16Screen1PresenterD1Ev>
 80119c2:	bf00      	nop

080119c4 <_ZN16Screen1PresenterD0Ev>:
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7ff ffd9 	bl	8011984 <_ZN16Screen1PresenterD1Ev>
 80119d2:	2110      	movs	r1, #16
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f01b fabc 	bl	802cf52 <_ZdlPvj>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	4618      	mov	r0, r3
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <_ZThn4_N16Screen1PresenterD0Ev>:
 80119e4:	f1a0 0004 	sub.w	r0, r0, #4
 80119e8:	e7ec      	b.n	80119c4 <_ZN16Screen1PresenterD0Ev>
	...

080119ec <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
    : view(v)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7ff ff7f 	bl	80118fc <_ZN8touchgfx9PresenterC1Ev>
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3304      	adds	r3, #4
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff ff8a 	bl	801191c <_ZN13ModelListenerC1Ev>
 8011a08:	4a06      	ldr	r2, [pc, #24]	@ (8011a24 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	601a      	str	r2, [r3, #0]
 8011a0e:	4a06      	ldr	r2, [pc, #24]	@ (8011a28 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	605a      	str	r2, [r3, #4]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	683a      	ldr	r2, [r7, #0]
 8011a18:	60da      	str	r2, [r3, #12]
{

}
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	08030b50 	.word	0x08030b50
 8011a28:	08030b68 	.word	0x08030b68

08011a2c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]

}
 8011a34:	bf00      	nop
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr

08011a40 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]

}
 8011a48:	bf00      	nop
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr

08011a54 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	4a05      	ldr	r2, [pc, #20]	@ (8011a74 <_ZN11Screen1ViewD1Ev+0x20>)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7fb fb03 	bl	800d070 <_ZN15Screen1ViewBaseD1Ev>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	08030ba0 	.word	0x08030ba0

08011a78 <_ZN11Screen1ViewD0Ev>:
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f7ff ffe7 	bl	8011a54 <_ZN11Screen1ViewD1Ev>
 8011a86:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f01b fa61 	bl	802cf52 <_ZdlPvj>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
	...

08011a9c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fb f9e8 	bl	800ce7c <_ZN15Screen1ViewBaseC1Ev>
 8011aac:	4a03      	ldr	r2, [pc, #12]	@ (8011abc <_ZN11Screen1ViewC1Ev+0x20>)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	601a      	str	r2, [r3, #0]
{

}
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3708      	adds	r7, #8
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	08030ba0 	.word	0x08030ba0

08011ac0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fb fb0d 	bl	800d0ea <_ZN15Screen1ViewBase11setupScreenEv>
}
 8011ad0:	bf00      	nop
 8011ad2:	3708      	adds	r7, #8
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fb f812 	bl	800cb0c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {}
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	4a09      	ldr	r2, [pc, #36]	@ (8011b20 <_ZN16Screen3PresenterD1Ev+0x30>)
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	4a09      	ldr	r2, [pc, #36]	@ (8011b24 <_ZN16Screen3PresenterD1Ev+0x34>)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	605a      	str	r2, [r3, #4]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	3304      	adds	r3, #4
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff ff1b 	bl	8011944 <_ZN13ModelListenerD1Ev>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff fed3 	bl	80118bc <_ZN8touchgfx9PresenterD1Ev>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	08030bd4 	.word	0x08030bd4
 8011b24:	08030bec 	.word	0x08030bec

08011b28 <_ZThn4_N16Screen3PresenterD1Ev>:
 8011b28:	f1a0 0004 	sub.w	r0, r0, #4
 8011b2c:	e7e0      	b.n	8011af0 <_ZN16Screen3PresenterD1Ev>
 8011b2e:	bf00      	nop

08011b30 <_ZN16Screen3PresenterD0Ev>:
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f7ff ffd9 	bl	8011af0 <_ZN16Screen3PresenterD1Ev>
 8011b3e:	2110      	movs	r1, #16
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f01b fa06 	bl	802cf52 <_ZdlPvj>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <_ZThn4_N16Screen3PresenterD0Ev>:
 8011b50:	f1a0 0004 	sub.w	r0, r0, #4
 8011b54:	e7ec      	b.n	8011b30 <_ZN16Screen3PresenterD0Ev>
	...

08011b58 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
    : view(v)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fec9 	bl	80118fc <_ZN8touchgfx9PresenterC1Ev>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	3304      	adds	r3, #4
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7ff fed4 	bl	801191c <_ZN13ModelListenerC1Ev>
 8011b74:	4a06      	ldr	r2, [pc, #24]	@ (8011b90 <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	4a06      	ldr	r2, [pc, #24]	@ (8011b94 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	605a      	str	r2, [r3, #4]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	683a      	ldr	r2, [r7, #0]
 8011b84:	60da      	str	r2, [r3, #12]
{

}
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	08030bd4 	.word	0x08030bd4
 8011b94:	08030bec 	.word	0x08030bec

08011b98 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]

}
 8011ba0:	bf00      	nop
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]

}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	4a05      	ldr	r2, [pc, #20]	@ (8011be0 <_ZN11Screen3ViewD1Ev+0x20>)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	601a      	str	r2, [r3, #0]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7fe fa0f 	bl	800fff4 <_ZN15Screen3ViewBaseD1Ev>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3708      	adds	r7, #8
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	08030bfc 	.word	0x08030bfc

08011be4 <_ZN11Screen3ViewD0Ev>:
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7ff ffe7 	bl	8011bc0 <_ZN11Screen3ViewD1Ev>
 8011bf2:	f643 01a8 	movw	r1, #14504	@ 0x38a8
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f01b f9ab 	bl	802cf52 <_ZdlPvj>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
	...

08011c08 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fd fe2a 	bl	800f86c <_ZN15Screen3ViewBaseC1Ev>
 8011c18:	4a03      	ldr	r2, [pc, #12]	@ (8011c28 <_ZN11Screen3ViewC1Ev+0x20>)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	601a      	str	r2, [r3, #0]
{

}
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4618      	mov	r0, r3
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	08030bfc 	.word	0x08030bfc

08011c2c <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fa41 	bl	80100be <_ZN15Screen3ViewBase11setupScreenEv>
}
 8011c3c:	bf00      	nop
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7fa ff5c 	bl	800cb0c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011c54:	bf00      	nop
 8011c56:	3708      	adds	r7, #8
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <_ZN16Screen4PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen4Presenter() {}
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	4a09      	ldr	r2, [pc, #36]	@ (8011c8c <_ZN16Screen4PresenterD1Ev+0x30>)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	601a      	str	r2, [r3, #0]
 8011c6a:	4a09      	ldr	r2, [pc, #36]	@ (8011c90 <_ZN16Screen4PresenterD1Ev+0x34>)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	605a      	str	r2, [r3, #4]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	3304      	adds	r3, #4
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff fe65 	bl	8011944 <_ZN13ModelListenerD1Ev>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7ff fe1d 	bl	80118bc <_ZN8touchgfx9PresenterD1Ev>
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	4618      	mov	r0, r3
 8011c86:	3708      	adds	r7, #8
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	08030c34 	.word	0x08030c34
 8011c90:	08030c4c 	.word	0x08030c4c

08011c94 <_ZThn4_N16Screen4PresenterD1Ev>:
 8011c94:	f1a0 0004 	sub.w	r0, r0, #4
 8011c98:	e7e0      	b.n	8011c5c <_ZN16Screen4PresenterD1Ev>
 8011c9a:	bf00      	nop

08011c9c <_ZN16Screen4PresenterD0Ev>:
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff ffd9 	bl	8011c5c <_ZN16Screen4PresenterD1Ev>
 8011caa:	2110      	movs	r1, #16
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f01b f950 	bl	802cf52 <_ZdlPvj>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3708      	adds	r7, #8
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <_ZThn4_N16Screen4PresenterD0Ev>:
 8011cbc:	f1a0 0004 	sub.w	r0, r0, #4
 8011cc0:	e7ec      	b.n	8011c9c <_ZN16Screen4PresenterD0Ev>
	...

08011cc4 <_ZN16Screen4PresenterC1ER11Screen4View>:
#include <gui/screen4_screen/Screen4View.hpp>
#include <gui/screen4_screen/Screen4Presenter.hpp>

Screen4Presenter::Screen4Presenter(Screen4View& v)
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
    : view(v)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7ff fe13 	bl	80118fc <_ZN8touchgfx9PresenterC1Ev>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	3304      	adds	r3, #4
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7ff fe1e 	bl	801191c <_ZN13ModelListenerC1Ev>
 8011ce0:	4a06      	ldr	r2, [pc, #24]	@ (8011cfc <_ZN16Screen4PresenterC1ER11Screen4View+0x38>)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	601a      	str	r2, [r3, #0]
 8011ce6:	4a06      	ldr	r2, [pc, #24]	@ (8011d00 <_ZN16Screen4PresenterC1ER11Screen4View+0x3c>)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	605a      	str	r2, [r3, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	683a      	ldr	r2, [r7, #0]
 8011cf0:	60da      	str	r2, [r3, #12]
{

}
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	08030c34 	.word	0x08030c34
 8011d00:	08030c4c 	.word	0x08030c4c

08011d04 <_ZN16Screen4Presenter8activateEv>:

void Screen4Presenter::activate()
{
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]

}
 8011d0c:	bf00      	nop
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <_ZN16Screen4Presenter10deactivateEv>:

void Screen4Presenter::deactivate()
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]

}
 8011d20:	bf00      	nop
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <_ZN11Screen4ViewD1Ev>:

class Screen4View : public Screen4ViewBase
{
public:
    Screen4View();
    virtual ~Screen4View() {}
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b082      	sub	sp, #8
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	4a05      	ldr	r2, [pc, #20]	@ (8011d4c <_ZN11Screen4ViewD1Ev+0x20>)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fe ff9f 	bl	8010c80 <_ZN15Screen4ViewBaseD1Ev>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	08030c5c 	.word	0x08030c5c

08011d50 <_ZN11Screen4ViewD0Ev>:
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b082      	sub	sp, #8
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7ff ffe7 	bl	8011d2c <_ZN11Screen4ViewD1Ev>
 8011d5e:	f44f 7176 	mov.w	r1, #984	@ 0x3d8
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f01b f8f5 	bl	802cf52 <_ZdlPvj>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
	...

08011d74 <_ZN11Screen4ViewC1Ev>:
#include <gui/screen4_screen/Screen4View.hpp>

Screen4View::Screen4View()
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fe fd68 	bl	8010854 <_ZN15Screen4ViewBaseC1Ev>
 8011d84:	4a03      	ldr	r2, [pc, #12]	@ (8011d94 <_ZN11Screen4ViewC1Ev+0x20>)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	601a      	str	r2, [r3, #0]
{

}
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}
 8011d94:	08030c5c 	.word	0x08030c5c

08011d98 <_ZN11Screen4View11setupScreenEv>:

void Screen4View::setupScreen()
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
    Screen4ViewBase::setupScreen();
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe ffbb 	bl	8010d1e <_ZN15Screen4ViewBase11setupScreenEv>
}
 8011da8:	bf00      	nop
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <_ZN11Screen4View14tearDownScreenEv>:

void Screen4View::tearDownScreen()
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
    Screen4ViewBase::tearDownScreen();
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fa fea6 	bl	800cb0c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011dc0:	bf00      	nop
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	4a09      	ldr	r2, [pc, #36]	@ (8011df8 <_ZN15screenPresenterD1Ev+0x30>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	601a      	str	r2, [r3, #0]
 8011dd6:	4a09      	ldr	r2, [pc, #36]	@ (8011dfc <_ZN15screenPresenterD1Ev+0x34>)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	605a      	str	r2, [r3, #4]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	3304      	adds	r3, #4
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7ff fdaf 	bl	8011944 <_ZN13ModelListenerD1Ev>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7ff fd67 	bl	80118bc <_ZN8touchgfx9PresenterD1Ev>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	4618      	mov	r0, r3
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	08030c94 	.word	0x08030c94
 8011dfc:	08030cac 	.word	0x08030cac

08011e00 <_ZThn4_N15screenPresenterD1Ev>:
 8011e00:	f1a0 0004 	sub.w	r0, r0, #4
 8011e04:	e7e0      	b.n	8011dc8 <_ZN15screenPresenterD1Ev>
 8011e06:	bf00      	nop

08011e08 <_ZN15screenPresenterD0Ev>:
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f7ff ffd9 	bl	8011dc8 <_ZN15screenPresenterD1Ev>
 8011e16:	2110      	movs	r1, #16
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f01b f89a 	bl	802cf52 <_ZdlPvj>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	4618      	mov	r0, r3
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <_ZThn4_N15screenPresenterD0Ev>:
 8011e28:	f1a0 0004 	sub.w	r0, r0, #4
 8011e2c:	e7ec      	b.n	8011e08 <_ZN15screenPresenterD0Ev>
	...

08011e30 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
    : view(v)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7ff fd5d 	bl	80118fc <_ZN8touchgfx9PresenterC1Ev>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	3304      	adds	r3, #4
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7ff fd68 	bl	801191c <_ZN13ModelListenerC1Ev>
 8011e4c:	4a06      	ldr	r2, [pc, #24]	@ (8011e68 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	601a      	str	r2, [r3, #0]
 8011e52:	4a06      	ldr	r2, [pc, #24]	@ (8011e6c <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	605a      	str	r2, [r3, #4]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	683a      	ldr	r2, [r7, #0]
 8011e5c:	60da      	str	r2, [r3, #12]
{

}
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	4618      	mov	r0, r3
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	08030c94 	.word	0x08030c94
 8011e6c:	08030cac 	.word	0x08030cac

08011e70 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8011e70:	b480      	push	{r7}
 8011e72:	b083      	sub	sp, #12
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]

}
 8011e78:	bf00      	nop
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]

}
 8011e8c:	bf00      	nop
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	4a05      	ldr	r2, [pc, #20]	@ (8011eb8 <_ZN10screenViewD1Ev+0x20>)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	601a      	str	r2, [r3, #0]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7ff f9cb 	bl	8011244 <_ZN14screenViewBaseD1Ev>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3708      	adds	r7, #8
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	08030cbc 	.word	0x08030cbc

08011ebc <_ZN10screenViewD0Ev>:
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7ff ffe7 	bl	8011e98 <_ZN10screenViewD1Ev>
 8011eca:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f01b f83f 	bl	802cf52 <_ZdlPvj>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
	...

08011ee0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7ff f8b0 	bl	8011050 <_ZN14screenViewBaseC1Ev>
 8011ef0:	4a03      	ldr	r2, [pc, #12]	@ (8011f00 <_ZN10screenViewC1Ev+0x20>)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	601a      	str	r2, [r3, #0]
{

}
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	08030cbc 	.word	0x08030cbc

08011f04 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7ff f9d5 	bl	80112be <_ZN14screenViewBase11setupScreenEv>
}
 8011f14:	bf00      	nop
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fa fdf0 	bl	800cb0c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011f2c:	bf00      	nop
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
    {
 8011f3c:	4a04      	ldr	r2, [pc, #16]	@ (8011f50 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	601a      	str	r2, [r3, #0]
    }
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	4618      	mov	r0, r3
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	08030d08 	.word	0x08030d08

08011f54 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
    }
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff ffe9 	bl	8011f34 <_ZN8touchgfx15TouchControllerD1Ev>
 8011f62:	2104      	movs	r1, #4
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f01a fff4 	bl	802cf52 <_ZdlPvj>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <_ZN20STM32TouchController4initEv>:
extern GT911_Dev Dev_Now;

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8011f74:	b480      	push	{r7}
 8011f76:	b083      	sub	sp, #12
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011f7c:	bf00      	nop
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
     */

	static int16_t xx=0,yy=0;


	if((Dev_Now.X[0] != xx ) || (Dev_Now.Y[0]!= yy ))
 8011f94:	4b17      	ldr	r3, [pc, #92]	@ (8011ff4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011f96:	891b      	ldrh	r3, [r3, #8]
 8011f98:	461a      	mov	r2, r3
 8011f9a:	4b17      	ldr	r3, [pc, #92]	@ (8011ff8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x70>)
 8011f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d107      	bne.n	8011fb4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>
 8011fa4:	4b13      	ldr	r3, [pc, #76]	@ (8011ff4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011fa6:	8a5b      	ldrh	r3, [r3, #18]
 8011fa8:	461a      	mov	r2, r3
 8011faa:	4b14      	ldr	r3, [pc, #80]	@ (8011ffc <_ZN20STM32TouchController11sampleTouchERlS0_+0x74>)
 8011fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d017      	beq.n	8011fe4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x5c>
	{
		xx = Dev_Now.X[0];
 8011fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ff4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011fb6:	891b      	ldrh	r3, [r3, #8]
 8011fb8:	b21a      	sxth	r2, r3
 8011fba:	4b0f      	ldr	r3, [pc, #60]	@ (8011ff8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x70>)
 8011fbc:	801a      	strh	r2, [r3, #0]
		yy = Dev_Now.Y[0];
 8011fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8011ff4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x6c>)
 8011fc0:	8a5b      	ldrh	r3, [r3, #18]
 8011fc2:	b21a      	sxth	r2, r3
 8011fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8011ffc <_ZN20STM32TouchController11sampleTouchERlS0_+0x74>)
 8011fc6:	801a      	strh	r2, [r3, #0]

		x= xx;
 8011fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8011ff8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x70>)
 8011fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	601a      	str	r2, [r3, #0]
		y= yy;
 8011fd4:	4b09      	ldr	r3, [pc, #36]	@ (8011ffc <_ZN20STM32TouchController11sampleTouchERlS0_+0x74>)
 8011fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fda:	461a      	mov	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	601a      	str	r2, [r3, #0]
		return true;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	e000      	b.n	8011fe6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x5e>
	}
    return false;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3714      	adds	r7, #20
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
 8011ff2:	bf00      	nop
 8011ff4:	2000031c 	.word	0x2000031c
 8011ff8:	2000d970 	.word	0x2000d970
 8011ffc:	2000d972 	.word	0x2000d972

08012000 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	4a05      	ldr	r2, [pc, #20]	@ (8012020 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	601a      	str	r2, [r3, #0]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	4618      	mov	r0, r3
 8012012:	f7ff ff8f 	bl	8011f34 <_ZN8touchgfx15TouchControllerD1Ev>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	08030cf0 	.word	0x08030cf0

08012024 <_ZN20STM32TouchControllerD0Ev>:
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff ffe7 	bl	8012000 <_ZN20STM32TouchControllerD1Ev>
 8012032:	2104      	movs	r1, #4
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f01a ff8c 	bl	802cf52 <_ZdlPvj>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8012044:	b480      	push	{r7}
 8012046:	af00      	add	r7, sp, #0

}
 8012048:	bf00      	nop
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
	...

08012054 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	4603      	mov	r3, r0
 801205c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801205e:	79fb      	ldrb	r3, [r7, #7]
 8012060:	2b03      	cmp	r3, #3
 8012062:	d80c      	bhi.n	801207e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8012064:	a201      	add	r2, pc, #4	@ (adr r2, 801206c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8012066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801206a:	bf00      	nop
 801206c:	0801207d 	.word	0x0801207d
 8012070:	0801207d 	.word	0x0801207d
 8012074:	0801207d 	.word	0x0801207d
 8012078:	0801207d 	.word	0x0801207d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 801207c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801207e:	bf00      	nop
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop

0801208c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	4603      	mov	r3, r0
 8012094:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012096:	79fb      	ldrb	r3, [r7, #7]
 8012098:	2b03      	cmp	r3, #3
 801209a:	d80c      	bhi.n	80120b6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 801209c:	a201      	add	r2, pc, #4	@ (adr r2, 80120a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120a2:	bf00      	nop
 80120a4:	080120b5 	.word	0x080120b5
 80120a8:	080120b5 	.word	0x080120b5
 80120ac:	080120b5 	.word	0x080120b5
 80120b0:	080120b5 	.word	0x080120b5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80120b4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop

080120c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	2b03      	cmp	r3, #3
 80120d2:	d80c      	bhi.n	80120ee <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80120d4:	a201      	add	r2, pc, #4	@ (adr r2, 80120dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80120d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120da:	bf00      	nop
 80120dc:	080120ed 	.word	0x080120ed
 80120e0:	080120ed 	.word	0x080120ed
 80120e4:	080120ed 	.word	0x080120ed
 80120e8:	080120ed 	.word	0x080120ed
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80120ec:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80120ee:	bf00      	nop
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop

080120fc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
    {
 8012104:	4a04      	ldr	r2, [pc, #16]	@ (8012118 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	601a      	str	r2, [r3, #0]
    }
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	370c      	adds	r7, #12
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr
 8012118:	080315c0 	.word	0x080315c0

0801211c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
    }
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7ff ffe9 	bl	80120fc <_ZN8touchgfx3HALD1Ev>
 801212a:	217c      	movs	r1, #124	@ 0x7c
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f01a ff10 	bl	802cf52 <_ZdlPvj>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	3708      	adds	r7, #8
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	460b      	mov	r3, r1
 8012146:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	78fa      	ldrb	r2, [r7, #3]
 801214c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2201      	movs	r2, #1
 8012154:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	460b      	mov	r3, r1
 801216e:	807b      	strh	r3, [r7, #2]
 8012170:	4613      	mov	r3, r2
 8012172:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8012174:	4b0c      	ldr	r3, [pc, #48]	@ (80121a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8012176:	881b      	ldrh	r3, [r3, #0]
 8012178:	887a      	ldrh	r2, [r7, #2]
 801217a:	429a      	cmp	r2, r3
 801217c:	d304      	bcc.n	8012188 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801217e:	4b0b      	ldr	r3, [pc, #44]	@ (80121ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	883a      	ldrh	r2, [r7, #0]
 8012184:	429a      	cmp	r2, r3
 8012186:	d205      	bcs.n	8012194 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8012188:	4b09      	ldr	r3, [pc, #36]	@ (80121b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801218a:	4a0a      	ldr	r2, [pc, #40]	@ (80121b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 801218c:	219e      	movs	r1, #158	@ 0x9e
 801218e:	480a      	ldr	r0, [pc, #40]	@ (80121b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8012190:	f01b fc40 	bl	802da14 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8012194:	4a09      	ldr	r2, [pc, #36]	@ (80121bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8012196:	887b      	ldrh	r3, [r7, #2]
 8012198:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801219a:	4a09      	ldr	r2, [pc, #36]	@ (80121c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 801219c:	883b      	ldrh	r3, [r7, #0]
 801219e:	8013      	strh	r3, [r2, #0]
    }
 80121a0:	bf00      	nop
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	200122b8 	.word	0x200122b8
 80121ac:	200122ba 	.word	0x200122ba
 80121b0:	0802fae0 	.word	0x0802fae0
 80121b4:	0802fb44 	.word	0x0802fb44
 80121b8:	0802fb88 	.word	0x0802fb88
 80121bc:	200122be 	.word	0x200122be
 80121c0:	200122c0 	.word	0x200122c0

080121c4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d009      	beq.n	80121ea <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	685a      	ldr	r2, [r3, #4]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4610      	mov	r0, r2
 80121e4:	4798      	blx	r3
 80121e6:	4603      	mov	r3, r0
 80121e8:	e000      	b.n	80121ec <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 80121ea:	2300      	movs	r3, #0
    }
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f003 fe2f 	bl	8015e60 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	33ac      	adds	r3, #172	@ 0xac
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	4798      	blx	r3
    }
 801220e:	bf00      	nop
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8012216:	b480      	push	{r7}
 8012218:	b083      	sub	sp, #12
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
 801221e:	6039      	str	r1, [r7, #0]
        return false;
 8012220:	2300      	movs	r3, #0
    }
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
	...

08012230 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	607a      	str	r2, [r7, #4]
 801223c:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d106      	bne.n	8012252 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012244:	4b0f      	ldr	r3, [pc, #60]	@ (8012284 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012246:	4a10      	ldr	r2, [pc, #64]	@ (8012288 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012248:	f240 21d2 	movw	r1, #722	@ 0x2d2
 801224c:	480f      	ldr	r0, [pc, #60]	@ (801228c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801224e:	f01b fbe1 	bl	802da14 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	68ba      	ldr	r2, [r7, #8]
 8012256:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	bf14      	ite	ne
 8012264:	2301      	movne	r3, #1
 8012266:	2300      	moveq	r3, #0
 8012268:	b2da      	uxtb	r2, r3
 801226a:	4b09      	ldr	r3, [pc, #36]	@ (8012290 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801226c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	338c      	adds	r3, #140	@ 0x8c
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	6839      	ldr	r1, [r7, #0]
 8012278:	68f8      	ldr	r0, [r7, #12]
 801227a:	4798      	blx	r3
    }
 801227c:	bf00      	nop
 801227e:	3710      	adds	r7, #16
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	0802fbcc 	.word	0x0802fbcc
 8012288:	0802fc04 	.word	0x0802fc04
 801228c:	0802fb88 	.word	0x0802fb88
 8012290:	200122c2 	.word	0x200122c2

08012294 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	683a      	ldr	r2, [r7, #0]
 80122a2:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	bf14      	ite	ne
 80122aa:	2301      	movne	r3, #1
 80122ac:	2300      	moveq	r3, #0
 80122ae:	b2da      	uxtb	r2, r3
 80122b0:	4b03      	ldr	r3, [pc, #12]	@ (80122c0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80122b2:	701a      	strb	r2, [r3, #0]
    }
 80122b4:	bf00      	nop
 80122b6:	370c      	adds	r7, #12
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr
 80122c0:	200122c3 	.word	0x200122c3

080122c4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
        return 0;
 80122cc:	2300      	movs	r3, #0
    }
 80122ce:	4618      	mov	r0, r3
 80122d0:	370c      	adds	r7, #12
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr

080122da <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80122da:	b580      	push	{r7, lr}
 80122dc:	b082      	sub	sp, #8
 80122de:	af00      	add	r7, sp, #0
 80122e0:	6078      	str	r0, [r7, #4]
 80122e2:	460b      	mov	r3, r1
 80122e4:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d004      	beq.n	80122f8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f2:	887a      	ldrh	r2, [r7, #2]
 80122f4:	4610      	mov	r0, r2
 80122f6:	4798      	blx	r3
    }
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	3318      	adds	r3, #24
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	4610      	mov	r0, r2
 8012318:	4798      	blx	r3
 801231a:	4603      	mov	r3, r0
    }
 801231c:	4618      	mov	r0, r3
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012338:	429a      	cmp	r2, r3
 801233a:	d011      	beq.n	8012360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 801233c:	4b14      	ldr	r3, [pc, #80]	@ (8012390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d11e      	bne.n	8012382 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8012344:	4b13      	ldr	r3, [pc, #76]	@ (8012394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012346:	881b      	ldrh	r3, [r3, #0]
 8012348:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801234a:	4b13      	ldr	r3, [pc, #76]	@ (8012398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801234c:	881a      	ldrh	r2, [r3, #0]
 801234e:	4b11      	ldr	r3, [pc, #68]	@ (8012394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012350:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8012352:	4a11      	ldr	r2, [pc, #68]	@ (8012398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012354:	89bb      	ldrh	r3, [r7, #12]
 8012356:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8012358:	4b0d      	ldr	r3, [pc, #52]	@ (8012390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801235a:	2201      	movs	r2, #1
 801235c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801235e:	e010      	b.n	8012382 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8012360:	4b0b      	ldr	r3, [pc, #44]	@ (8012390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00c      	beq.n	8012382 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8012368:	4b0a      	ldr	r3, [pc, #40]	@ (8012394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801236a:	881b      	ldrh	r3, [r3, #0]
 801236c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801236e:	4b0a      	ldr	r3, [pc, #40]	@ (8012398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012370:	881a      	ldrh	r2, [r3, #0]
 8012372:	4b08      	ldr	r3, [pc, #32]	@ (8012394 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012374:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8012376:	4a08      	ldr	r2, [pc, #32]	@ (8012398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012378:	89fb      	ldrh	r3, [r7, #14]
 801237a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 801237c:	4b04      	ldr	r3, [pc, #16]	@ (8012390 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801237e:	2200      	movs	r2, #0
 8012380:	701a      	strb	r2, [r3, #0]
    }
 8012382:	bf00      	nop
 8012384:	3714      	adds	r7, #20
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop
 8012390:	200122bc 	.word	0x200122bc
 8012394:	200122ba 	.word	0x200122ba
 8012398:	200122b8 	.word	0x200122b8

0801239c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f002 ffb8 	bl	801531c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80123ac:	bf00      	nop
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	4a05      	ldr	r2, [pc, #20]	@ (80123d4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7ff fe99 	bl	80120fc <_ZN8touchgfx3HALD1Ev>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	08030f50 	.word	0x08030f50

080123d8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff ffe7 	bl	80123b4 <_ZN20TouchGFXGeneratedHALD1Ev>
 80123e6:	217c      	movs	r1, #124	@ 0x7c
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f01a fdb2 	bl	802cf52 <_ZdlPvj>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4618      	mov	r0, r3
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	4618      	mov	r0, r3
 8012404:	f7ff ffca 	bl	801239c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012408:	bf00      	nop
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4618      	mov	r0, r3
 801241c:	f001 fd00 	bl	8013e20 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8012420:	bf00      	nop
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4618      	mov	r0, r3
 8012434:	f001 fd96 	bl	8013f64 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012438:	4603      	mov	r3, r0
}
 801243a:	4618      	mov	r0, r3
 801243c:	3708      	adds	r7, #8
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b082      	sub	sp, #8
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
 801244a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6839      	ldr	r1, [r7, #0]
 8012450:	4618      	mov	r0, r3
 8012452:	f001 fd95 	bl	8013f80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012456:	bf00      	nop
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
 8012466:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6839      	ldr	r1, [r7, #0]
 801246c:	4618      	mov	r0, r3
 801246e:	f001 fd9d 	bl	8013fac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801247a:	b580      	push	{r7, lr}
 801247c:	b084      	sub	sp, #16
 801247e:	af00      	add	r7, sp, #0
 8012480:	60f8      	str	r0, [r7, #12]
 8012482:	60b9      	str	r1, [r7, #8]
 8012484:	607a      	str	r2, [r7, #4]
 8012486:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	68b9      	ldr	r1, [r7, #8]
 8012490:	f001 fd9a 	bl	8013fc8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012494:	4603      	mov	r3, r0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b082      	sub	sp, #8
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f001 fce7 	bl	8013e7c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80124ae:	bf00      	nop
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	f001 fceb 	bl	8013e9c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80124c6:	bf00      	nop
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b082      	sub	sp, #8
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	f001 fced 	bl	8013eb8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80124de:	bf00      	nop
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b082      	sub	sp, #8
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f001 fcef 	bl	8013ed4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80124f6:	bf00      	nop
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	f001 fd11 	bl	8013f30 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801250e:	4603      	mov	r3, r0
}
 8012510:	4618      	mov	r0, r3
 8012512:	3708      	adds	r7, #8
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4618      	mov	r0, r3
 8012524:	f001 fd11 	bl	8013f4a <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012528:	bf00      	nop
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	4a05      	ldr	r2, [pc, #20]	@ (8012550 <_ZN11TouchGFXHALD1Ev+0x20>)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	601a      	str	r2, [r3, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4618      	mov	r0, r3
 8012542:	f7ff ff37 	bl	80123b4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4618      	mov	r0, r3
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	08030d20 	.word	0x08030d20

08012554 <_ZN11TouchGFXHALD0Ev>:
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f7ff ffe7 	bl	8012530 <_ZN11TouchGFXHALD1Ev>
 8012562:	217c      	movs	r1, #124	@ 0x7c
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f01a fcf4 	bl	802cf52 <_ZdlPvj>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012574:	b580      	push	{r7, lr}
 8012576:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8012578:	2101      	movs	r1, #1
 801257a:	4811      	ldr	r0, [pc, #68]	@ (80125c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 801257c:	f7f5 f8e5 	bl	800774a <osSemaphoreCreate>
 8012580:	4603      	mov	r3, r0
 8012582:	4a10      	ldr	r2, [pc, #64]	@ (80125c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012584:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8012586:	4b0f      	ldr	r3, [pc, #60]	@ (80125c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d105      	bne.n	801259a <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 801258e:	4b0e      	ldr	r3, [pc, #56]	@ (80125c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8012590:	4a0e      	ldr	r2, [pc, #56]	@ (80125cc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012592:	2127      	movs	r1, #39	@ 0x27
 8012594:	480e      	ldr	r0, [pc, #56]	@ (80125d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012596:	f01b fa3d 	bl	802da14 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 801259a:	2101      	movs	r1, #1
 801259c:	480d      	ldr	r0, [pc, #52]	@ (80125d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801259e:	f7f5 f8d4 	bl	800774a <osSemaphoreCreate>
 80125a2:	4603      	mov	r3, r0
 80125a4:	4a0c      	ldr	r2, [pc, #48]	@ (80125d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80125a6:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 80125a8:	4b0b      	ldr	r3, [pc, #44]	@ (80125d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d105      	bne.n	80125bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80125b0:	4b0a      	ldr	r3, [pc, #40]	@ (80125dc <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80125b2:	4a06      	ldr	r2, [pc, #24]	@ (80125cc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80125b4:	212a      	movs	r1, #42	@ 0x2a
 80125b6:	4806      	ldr	r0, [pc, #24]	@ (80125d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80125b8:	f01b fa2c 	bl	802da14 <__assert_func>
}
 80125bc:	bf00      	nop
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	08030df0 	.word	0x08030df0
 80125c4:	2000d974 	.word	0x2000d974
 80125c8:	0802fc54 	.word	0x0802fc54
 80125cc:	0802fca0 	.word	0x0802fca0
 80125d0:	0802fcd0 	.word	0x0802fcd0
 80125d4:	08030df8 	.word	0x08030df8
 80125d8:	2000d978 	.word	0x2000d978
 80125dc:	0802fcfc 	.word	0x0802fcfc

080125e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 80125e4:	4b04      	ldr	r3, [pc, #16]	@ (80125f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f04f 31ff 	mov.w	r1, #4294967295
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7f5 f8df 	bl	80077b0 <osSemaphoreWait>
}
 80125f2:	bf00      	nop
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	2000d974 	.word	0x2000d974

080125fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012600:	4b03      	ldr	r3, [pc, #12]	@ (8012610 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	4618      	mov	r0, r3
 8012606:	f7f5 f921 	bl	800784c <osSemaphoreRelease>
}
 801260a:	bf00      	nop
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	2000d974 	.word	0x2000d974

08012614 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012614:	b580      	push	{r7, lr}
 8012616:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8012618:	4b03      	ldr	r3, [pc, #12]	@ (8012628 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2100      	movs	r1, #0
 801261e:	4618      	mov	r0, r3
 8012620:	f7f5 f8c6 	bl	80077b0 <osSemaphoreWait>
}
 8012624:	bf00      	nop
 8012626:	bd80      	pop	{r7, pc}
 8012628:	2000d974 	.word	0x2000d974

0801262c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801262c:	b580      	push	{r7, lr}
 801262e:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8012630:	4b03      	ldr	r3, [pc, #12]	@ (8012640 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4618      	mov	r0, r3
 8012636:	f7f5 f909 	bl	800784c <osSemaphoreRelease>
}
 801263a:	bf00      	nop
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	2000d974 	.word	0x2000d974

08012644 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012644:	b580      	push	{r7, lr}
 8012646:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8012648:	4b03      	ldr	r3, [pc, #12]	@ (8012658 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4618      	mov	r0, r3
 801264e:	f7f5 f8fd 	bl	800784c <osSemaphoreRelease>
}
 8012652:	bf00      	nop
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	2000d978 	.word	0x2000d978

0801265c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801265c:	b580      	push	{r7, lr}
 801265e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8012660:	4b07      	ldr	r3, [pc, #28]	@ (8012680 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	2100      	movs	r1, #0
 8012666:	4618      	mov	r0, r3
 8012668:	f7f5 f8a2 	bl	80077b0 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 801266c:	4b04      	ldr	r3, [pc, #16]	@ (8012680 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	f04f 31ff 	mov.w	r1, #4294967295
 8012674:	4618      	mov	r0, r3
 8012676:	f7f5 f89b 	bl	80077b0 <osSemaphoreWait>
}
 801267a:	bf00      	nop
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	2000d978 	.word	0x2000d978

08012684 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	4603      	mov	r3, r0
 801268c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801268e:	88fb      	ldrh	r3, [r7, #6]
 8012690:	4618      	mov	r0, r3
 8012692:	f7f5 f846 	bl	8007722 <osDelay>
}
 8012696:	bf00      	nop
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
	...

080126a0 <__NVIC_EnableIRQ>:
{
 80126a0:	b480      	push	{r7}
 80126a2:	b083      	sub	sp, #12
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	4603      	mov	r3, r0
 80126a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	db0b      	blt.n	80126ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126b2:	79fb      	ldrb	r3, [r7, #7]
 80126b4:	f003 021f 	and.w	r2, r3, #31
 80126b8:	4907      	ldr	r1, [pc, #28]	@ (80126d8 <__NVIC_EnableIRQ+0x38>)
 80126ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126be:	095b      	lsrs	r3, r3, #5
 80126c0:	2001      	movs	r0, #1
 80126c2:	fa00 f202 	lsl.w	r2, r0, r2
 80126c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80126ca:	bf00      	nop
 80126cc:	370c      	adds	r7, #12
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	e000e100 	.word	0xe000e100

080126dc <__NVIC_DisableIRQ>:
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	4603      	mov	r3, r0
 80126e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	db12      	blt.n	8012714 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	f003 021f 	and.w	r2, r3, #31
 80126f4:	490a      	ldr	r1, [pc, #40]	@ (8012720 <__NVIC_DisableIRQ+0x44>)
 80126f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126fa:	095b      	lsrs	r3, r3, #5
 80126fc:	2001      	movs	r0, #1
 80126fe:	fa00 f202 	lsl.w	r2, r0, r2
 8012702:	3320      	adds	r3, #32
 8012704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012708:	f3bf 8f4f 	dsb	sy
}
 801270c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801270e:	f3bf 8f6f 	isb	sy
}
 8012712:	bf00      	nop
}
 8012714:	bf00      	nop
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr
 8012720:	e000e100 	.word	0xe000e100

08012724 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8012724:	b480      	push	{r7}
 8012726:	b087      	sub	sp, #28
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8012736:	2320      	movs	r3, #32
 8012738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801273a:	f3bf 8f4f 	dsb	sy
}
 801273e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8012740:	e00b      	b.n	801275a <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8012742:	4a0d      	ldr	r2, [pc, #52]	@ (8012778 <SCB_CleanDCache_by_Addr+0x54>)
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	693a      	ldr	r2, [r7, #16]
 801274e:	4413      	add	r3, r2
 8012750:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8012752:	697a      	ldr	r2, [r7, #20]
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	2b00      	cmp	r3, #0
 801275e:	dcf0      	bgt.n	8012742 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8012760:	f3bf 8f4f 	dsb	sy
}
 8012764:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012766:	f3bf 8f6f 	isb	sy
}
 801276a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 801276c:	bf00      	nop
 801276e:	371c      	adds	r7, #28
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr
 8012778:	e000ed00 	.word	0xe000ed00

0801277c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
    {
 8012784:	4a04      	ldr	r2, [pc, #16]	@ (8012798 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	601a      	str	r2, [r3, #0]
    }
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	08030e58 	.word	0x08030e58

0801279c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
    }
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7ff ffe9 	bl	801277c <_ZN8touchgfx9DMA_QueueD1Ev>
 80127aa:	2104      	movs	r1, #4
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f01a fbd0 	bl	802cf52 <_ZdlPvj>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4618      	mov	r0, r3
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	3344      	adds	r3, #68	@ 0x44
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	4798      	blx	r3
    }
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80127d8:	b480      	push	{r7}
 80127da:	b083      	sub	sp, #12
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
    {
 80127e0:	4a04      	ldr	r2, [pc, #16]	@ (80127f4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	601a      	str	r2, [r3, #0]
    }
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4618      	mov	r0, r3
 80127ea:	370c      	adds	r7, #12
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr
 80127f4:	08031698 	.word	0x08031698

080127f8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
    }
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7ff ffe9 	bl	80127d8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012806:	210c      	movs	r1, #12
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f01a fba2 	bl	802cf52 <_ZdlPvj>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4618      	mov	r0, r3
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012822:	4a09      	ldr	r2, [pc, #36]	@ (8012848 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	601a      	str	r2, [r3, #0]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	683a      	ldr	r2, [r7, #0]
 801282c:	605a      	str	r2, [r3, #4]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2200      	movs	r2, #0
 8012832:	721a      	strb	r2, [r3, #8]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	725a      	strb	r2, [r3, #9]
    {
    }
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	4618      	mov	r0, r3
 801283e:	370c      	adds	r7, #12
 8012840:	46bd      	mov	sp, r7
 8012842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012846:	4770      	bx	lr
 8012848:	08031698 	.word	0x08031698

0801284c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8012854:	2301      	movs	r3, #1
    }
 8012856:	4618      	mov	r0, r3
 8012858:	370c      	adds	r7, #12
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr

08012862 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012862:	b580      	push	{r7, lr}
 8012864:	b082      	sub	sp, #8
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	3328      	adds	r3, #40	@ 0x28
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4610      	mov	r0, r2
 8012876:	4798      	blx	r3
    }
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	685a      	ldr	r2, [r3, #4]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	3314      	adds	r3, #20
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4610      	mov	r0, r2
 8012898:	4798      	blx	r3
    }
 801289a:	bf00      	nop
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b082      	sub	sp, #8
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80128aa:	f7f8 f93d 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 80128ae:	4603      	mov	r3, r0
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7ff ffe5 	bl	8012880 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80128b6:	bf00      	nop
 80128b8:	3708      	adds	r7, #8
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 80128be:	b480      	push	{r7}
 80128c0:	b083      	sub	sp, #12
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 80128c6:	bf00      	nop
 80128c8:	e7fd      	b.n	80128c6 <DMA2D_XferErrorCallback+0x8>
	...

080128cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	4a05      	ldr	r2, [pc, #20]	@ (80128ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4618      	mov	r0, r3
 80128de:	f7ff ff4d 	bl	801277c <_ZN8touchgfx9DMA_QueueD1Ev>
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	080316e8 	.word	0x080316e8

080128f0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7ff ffe7 	bl	80128cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80128fe:	2114      	movs	r1, #20
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f01a fb26 	bl	802cf52 <_ZdlPvj>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	4618      	mov	r0, r3
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	330c      	adds	r3, #12
 801291c:	4618      	mov	r0, r3
 801291e:	f7fa fcae 	bl	800d27e <_ZN8touchgfx9colortypeC1Ev>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 801292c:	b5b0      	push	{r4, r5, r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	330c      	adds	r3, #12
 801293a:	4619      	mov	r1, r3
 801293c:	4610      	mov	r0, r2
 801293e:	f7ff ff6b 	bl	8012818 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012942:	4a0e      	ldr	r2, [pc, #56]	@ (801297c <_ZN8STM32DMAC1Ev+0x50>)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	601a      	str	r2, [r3, #0]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f103 000c 	add.w	r0, r3, #12
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3320      	adds	r3, #32
 8012952:	2260      	movs	r2, #96	@ 0x60
 8012954:	4619      	mov	r1, r3
 8012956:	f003 fbd7 	bl	8016108 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3320      	adds	r3, #32
 801295e:	245f      	movs	r4, #95	@ 0x5f
 8012960:	461d      	mov	r5, r3
 8012962:	e004      	b.n	801296e <_ZN8STM32DMAC1Ev+0x42>
 8012964:	4628      	mov	r0, r5
 8012966:	f7ff ffd3 	bl	8012910 <_ZN8touchgfx6BlitOpC1Ev>
 801296a:	3c01      	subs	r4, #1
 801296c:	3524      	adds	r5, #36	@ 0x24
 801296e:	2c00      	cmp	r4, #0
 8012970:	daf8      	bge.n	8012964 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	4618      	mov	r0, r3
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bdb0      	pop	{r4, r5, r7, pc}
 801297c:	08030e08 	.word	0x08030e08

08012980 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	4a09      	ldr	r2, [pc, #36]	@ (80129b0 <_ZN8STM32DMAD1Ev+0x30>)
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801298e:	205a      	movs	r0, #90	@ 0x5a
 8012990:	f7ff fea4 	bl	80126dc <__NVIC_DisableIRQ>
}
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	330c      	adds	r3, #12
 8012998:	4618      	mov	r0, r3
 801299a:	f7ff ff97 	bl	80128cc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7ff ff19 	bl	80127d8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4618      	mov	r0, r3
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	08030e08 	.word	0x08030e08

080129b4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
}
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7ff ffdf 	bl	8012980 <_ZN8STM32DMAD1Ev>
 80129c2:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f01a fac3 	bl	802cf52 <_ZdlPvj>
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	3708      	adds	r7, #8
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
	...

080129d8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80129e0:	4b12      	ldr	r3, [pc, #72]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 80129e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129e4:	4a11      	ldr	r2, [pc, #68]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 80129e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80129ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80129ec:	4b0f      	ldr	r3, [pc, #60]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 80129ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80129f4:	60fb      	str	r3, [r7, #12]
 80129f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80129f8:	4b0c      	ldr	r3, [pc, #48]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 80129fa:	691b      	ldr	r3, [r3, #16]
 80129fc:	4a0b      	ldr	r2, [pc, #44]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 80129fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012a02:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8012a04:	4b09      	ldr	r3, [pc, #36]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 8012a06:	691b      	ldr	r3, [r3, #16]
 8012a08:	4a08      	ldr	r2, [pc, #32]	@ (8012a2c <_ZN8STM32DMA10initializeEv+0x54>)
 8012a0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8012a0e:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012a10:	4b07      	ldr	r3, [pc, #28]	@ (8012a30 <_ZN8STM32DMA10initializeEv+0x58>)
 8012a12:	4a08      	ldr	r2, [pc, #32]	@ (8012a34 <_ZN8STM32DMA10initializeEv+0x5c>)
 8012a14:	611a      	str	r2, [r3, #16]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012a16:	4b06      	ldr	r3, [pc, #24]	@ (8012a30 <_ZN8STM32DMA10initializeEv+0x58>)
 8012a18:	4a07      	ldr	r2, [pc, #28]	@ (8012a38 <_ZN8STM32DMA10initializeEv+0x60>)
 8012a1a:	615a      	str	r2, [r3, #20]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012a1c:	205a      	movs	r0, #90	@ 0x5a
 8012a1e:	f7ff fe3f 	bl	80126a0 <__NVIC_EnableIRQ>
}
 8012a22:	bf00      	nop
 8012a24:	3710      	adds	r7, #16
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	40023800 	.word	0x40023800
 8012a30:	200006ec 	.word	0x200006ec
 8012a34:	080128a3 	.word	0x080128a3
 8012a38:	080128bf 	.word	0x080128bf

08012a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	460b      	mov	r3, r1
 8012a46:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012a4c:	78fb      	ldrb	r3, [r7, #3]
 8012a4e:	2b0b      	cmp	r3, #11
 8012a50:	d826      	bhi.n	8012aa0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8012a52:	a201      	add	r2, pc, #4	@ (adr r2, 8012a58 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a58:	08012a95 	.word	0x08012a95
 8012a5c:	08012a8f 	.word	0x08012a8f
 8012a60:	08012a89 	.word	0x08012a89
 8012a64:	08012aa1 	.word	0x08012aa1
 8012a68:	08012aa1 	.word	0x08012aa1
 8012a6c:	08012aa1 	.word	0x08012aa1
 8012a70:	08012aa1 	.word	0x08012aa1
 8012a74:	08012a9b 	.word	0x08012a9b
 8012a78:	08012a9b 	.word	0x08012a9b
 8012a7c:	08012a9b 	.word	0x08012a9b
 8012a80:	08012a9b 	.word	0x08012a9b
 8012a84:	08012a9b 	.word	0x08012a9b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	60fb      	str	r3, [r7, #12]
        break;
 8012a8c:	e00e      	b.n	8012aac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	60fb      	str	r3, [r7, #12]
        break;
 8012a92:	e00b      	b.n	8012aac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012a94:	2302      	movs	r3, #2
 8012a96:	60fb      	str	r3, [r7, #12]
        break;
 8012a98:	e008      	b.n	8012aac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8012a9a:	2305      	movs	r3, #5
 8012a9c:	60fb      	str	r3, [r7, #12]
        break;
 8012a9e:	e005      	b.n	8012aac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012aa0:	4b05      	ldr	r3, [pc, #20]	@ (8012ab8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8012aa2:	4a06      	ldr	r2, [pc, #24]	@ (8012abc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012aa4:	216f      	movs	r1, #111	@ 0x6f
 8012aa6:	4806      	ldr	r0, [pc, #24]	@ (8012ac0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8012aa8:	f01a ffb4 	bl	802da14 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012aac:	68fb      	ldr	r3, [r7, #12]
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3710      	adds	r7, #16
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	0802fd38 	.word	0x0802fd38
 8012abc:	0802fd54 	.word	0x0802fd54
 8012ac0:	0802fda0 	.word	0x0802fda0

08012ac4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	460b      	mov	r3, r1
 8012ace:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012ad4:	78fb      	ldrb	r3, [r7, #3]
 8012ad6:	2b0a      	cmp	r3, #10
 8012ad8:	d821      	bhi.n	8012b1e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012ada:	a201      	add	r2, pc, #4	@ (adr r2, 8012ae0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ae0:	08012b19 	.word	0x08012b19
 8012ae4:	08012b13 	.word	0x08012b13
 8012ae8:	08012b0d 	.word	0x08012b0d
 8012aec:	08012b1f 	.word	0x08012b1f
 8012af0:	08012b1f 	.word	0x08012b1f
 8012af4:	08012b1f 	.word	0x08012b1f
 8012af8:	08012b1f 	.word	0x08012b1f
 8012afc:	08012b13 	.word	0x08012b13
 8012b00:	08012b13 	.word	0x08012b13
 8012b04:	08012b13 	.word	0x08012b13
 8012b08:	08012b13 	.word	0x08012b13
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	60fb      	str	r3, [r7, #12]
        break;
 8012b10:	e00b      	b.n	8012b2a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8012b12:	2301      	movs	r3, #1
 8012b14:	60fb      	str	r3, [r7, #12]
        break;
 8012b16:	e008      	b.n	8012b2a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012b18:	2302      	movs	r3, #2
 8012b1a:	60fb      	str	r3, [r7, #12]
        break;
 8012b1c:	e005      	b.n	8012b2a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012b1e:	4b05      	ldr	r3, [pc, #20]	@ (8012b34 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012b20:	4a05      	ldr	r2, [pc, #20]	@ (8012b38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8012b22:	2190      	movs	r1, #144	@ 0x90
 8012b24:	4805      	ldr	r0, [pc, #20]	@ (8012b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8012b26:	f01a ff75 	bl	802da14 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3710      	adds	r7, #16
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	0802fd38 	.word	0x0802fd38
 8012b38:	0802fdcc 	.word	0x0802fdcc
 8012b3c:	0802fda0 	.word	0x0802fda0

08012b40 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8012b40:	b480      	push	{r7}
 8012b42:	b083      	sub	sp, #12
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012b48:	f640 73ef 	movw	r3, #4079	@ 0xfef
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b088      	sub	sp, #32
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	7f5b      	ldrb	r3, [r3, #29]
 8012b66:	4619      	mov	r1, r3
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff ff67 	bl	8012a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012b6e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	7f9b      	ldrb	r3, [r3, #30]
 8012b74:	4619      	mov	r1, r3
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff ff60 	bl	8012a3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012b7c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	7f9b      	ldrb	r3, [r3, #30]
 8012b82:	4619      	mov	r1, r3
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff ff9d 	bl	8012ac4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012b8a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	8b5b      	ldrh	r3, [r3, #26]
 8012b90:	461a      	mov	r2, r3
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	8a9b      	ldrh	r3, [r3, #20]
 8012b96:	1ad2      	subs	r2, r2, r3
 8012b98:	4b91      	ldr	r3, [pc, #580]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012b9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	8b5b      	ldrh	r3, [r3, #26]
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	8a9b      	ldrh	r3, [r3, #20]
 8012ba6:	1ad2      	subs	r2, r2, r3
 8012ba8:	4b8d      	ldr	r3, [pc, #564]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012baa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	8b1b      	ldrh	r3, [r3, #24]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	8a9b      	ldrh	r3, [r3, #20]
 8012bb6:	1ad2      	subs	r2, r2, r3
 8012bb8:	4b89      	ldr	r3, [pc, #548]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bba:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012bbc:	4a88      	ldr	r2, [pc, #544]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	8adb      	ldrh	r3, [r3, #22]
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	8a9b      	ldrh	r3, [r3, #20]
 8012bcc:	041b      	lsls	r3, r3, #16
 8012bce:	431a      	orrs	r2, r3
 8012bd0:	4b83      	ldr	r3, [pc, #524]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	691a      	ldr	r2, [r3, #16]
 8012bd8:	4b81      	ldr	r3, [pc, #516]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	685a      	ldr	r2, [r3, #4]
 8012be0:	4b7f      	ldr	r3, [pc, #508]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012be2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012bec:	d041      	beq.n	8012c72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11a>
 8012bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012bf2:	f200 814e 	bhi.w	8012e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bfa:	d014      	beq.n	8012c26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c00:	f200 8147 	bhi.w	8012e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012c04:	2b80      	cmp	r3, #128	@ 0x80
 8012c06:	d078      	beq.n	8012cfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a2>
 8012c08:	2b80      	cmp	r3, #128	@ 0x80
 8012c0a:	f200 8142 	bhi.w	8012e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012c0e:	2b40      	cmp	r3, #64	@ 0x40
 8012c10:	f000 8121 	beq.w	8012e56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
 8012c14:	2b40      	cmp	r3, #64	@ 0x40
 8012c16:	f200 813c 	bhi.w	8012e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
 8012c1a:	2b04      	cmp	r3, #4
 8012c1c:	d04f      	beq.n	8012cbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 8012c1e:	2b20      	cmp	r3, #32
 8012c20:	f000 80f2 	beq.w	8012e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
 8012c24:	e135      	b.n	8012e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	7f1b      	ldrb	r3, [r3, #28]
 8012c2a:	061a      	lsls	r2, r3, #24
 8012c2c:	496c      	ldr	r1, [pc, #432]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8012de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8012c30:	4313      	orrs	r3, r2
 8012c32:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	330c      	adds	r3, #12
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fa fb2e 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	4a67      	ldr	r2, [pc, #412]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012c46:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	7fdb      	ldrb	r3, [r3, #31]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d005      	beq.n	8012c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012c50:	4963      	ldr	r1, [pc, #396]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c52:	697a      	ldr	r2, [r7, #20]
 8012c54:	4b64      	ldr	r3, [pc, #400]	@ (8012de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012c56:	4313      	orrs	r3, r2
 8012c58:	624b      	str	r3, [r1, #36]	@ 0x24
 8012c5a:	e002      	b.n	8012c62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c5c:	4a60      	ldr	r2, [pc, #384]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	691a      	ldr	r2, [r3, #16]
 8012c66:	4b5e      	ldr	r3, [pc, #376]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c68:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c6c:	4a5f      	ldr	r2, [pc, #380]	@ (8012dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012c6e:	601a      	str	r2, [r3, #0]
        break;
 8012c70:	e130      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	7f1b      	ldrb	r3, [r3, #28]
 8012c76:	061a      	lsls	r2, r3, #24
 8012c78:	4959      	ldr	r1, [pc, #356]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8012df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	330c      	adds	r3, #12
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fa fb08 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	4a54      	ldr	r2, [pc, #336]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012c92:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	7fdb      	ldrb	r3, [r3, #31]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d005      	beq.n	8012ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012c9c:	4950      	ldr	r1, [pc, #320]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	4b51      	ldr	r3, [pc, #324]	@ (8012de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	624b      	str	r3, [r1, #36]	@ 0x24
 8012ca6:	e002      	b.n	8012cae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	691a      	ldr	r2, [r3, #16]
 8012cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cb4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8012dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012cba:	601a      	str	r2, [r3, #0]
        break;
 8012cbc:	e10a      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	7f1b      	ldrb	r3, [r3, #28]
 8012cc2:	061a      	lsls	r2, r3, #24
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	4a45      	ldr	r2, [pc, #276]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012cce:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	7fdb      	ldrb	r3, [r3, #31]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d005      	beq.n	8012ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012cd8:	4941      	ldr	r1, [pc, #260]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cda:	697a      	ldr	r2, [r7, #20]
 8012cdc:	4b42      	ldr	r3, [pc, #264]	@ (8012de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	624b      	str	r3, [r1, #36]	@ 0x24
 8012ce2:	e002      	b.n	8012cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	691a      	ldr	r2, [r3, #16]
 8012cee:	4b3c      	ldr	r3, [pc, #240]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cf0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8012dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012cf6:	601a      	str	r2, [r3, #0]
        break;
 8012cf8:	e0ec      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	689b      	ldr	r3, [r3, #8]
 8012d02:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	1d1a      	adds	r2, r3, #4
 8012d08:	4b35      	ldr	r3, [pc, #212]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	7f1b      	ldrb	r3, [r3, #28]
 8012d10:	061a      	lsls	r2, r3, #24
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	4313      	orrs	r3, r2
 8012d16:	4a32      	ldr	r2, [pc, #200]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012d1c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	7fdb      	ldrb	r3, [r3, #31]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d005      	beq.n	8012d32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012d26:	492e      	ldr	r1, [pc, #184]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d28:	697a      	ldr	r2, [r7, #20]
 8012d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8012de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	624b      	str	r3, [r1, #36]	@ 0x24
 8012d30:	e002      	b.n	8012d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012d32:	4a2b      	ldr	r2, [pc, #172]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	6253      	str	r3, [r2, #36]	@ 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	691a      	ldr	r2, [r3, #16]
 8012d3c:	4b28      	ldr	r3, [pc, #160]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d3e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d002      	beq.n	8012d50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d00c      	beq.n	8012d68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8012d4e:	e01f      	b.n	8012d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012d50:	4b23      	ldr	r3, [pc, #140]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d52:	69da      	ldr	r2, [r3, #28]
 8012d54:	4b27      	ldr	r3, [pc, #156]	@ (8012df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d56:	4013      	ands	r3, r2
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	8852      	ldrh	r2, [r2, #2]
 8012d5c:	3a01      	subs	r2, #1
 8012d5e:	0212      	lsls	r2, r2, #8
 8012d60:	491f      	ldr	r1, [pc, #124]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d62:	4313      	orrs	r3, r2
 8012d64:	61cb      	str	r3, [r1, #28]
                break;
 8012d66:	e01a      	b.n	8012d9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	7f1b      	ldrb	r3, [r3, #28]
 8012d6c:	2bff      	cmp	r3, #255	@ 0xff
 8012d6e:	d101      	bne.n	8012d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
                {
                    blend = false;
 8012d70:	2300      	movs	r3, #0
 8012d72:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012d74:	4b1a      	ldr	r3, [pc, #104]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d76:	69da      	ldr	r2, [r3, #28]
 8012d78:	4b1e      	ldr	r3, [pc, #120]	@ (8012df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d7a:	4013      	ands	r3, r2
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	8852      	ldrh	r2, [r2, #2]
 8012d80:	3a01      	subs	r2, #1
 8012d82:	0212      	lsls	r2, r2, #8
 8012d84:	4313      	orrs	r3, r2
 8012d86:	4a16      	ldr	r2, [pc, #88]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d88:	f043 0310 	orr.w	r3, r3, #16
 8012d8c:	61d3      	str	r3, [r2, #28]
                break;
 8012d8e:	e006      	b.n	8012d9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8012d90:	4b19      	ldr	r3, [pc, #100]	@ (8012df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012d92:	4a1a      	ldr	r2, [pc, #104]	@ (8012dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012d94:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8012d98:	4819      	ldr	r0, [pc, #100]	@ (8012e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8012d9a:	f01a fe3b 	bl	802da14 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8012d9e:	4b10      	ldr	r3, [pc, #64]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012da0:	69db      	ldr	r3, [r3, #28]
 8012da2:	4a0f      	ldr	r2, [pc, #60]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012da4:	f043 0320 	orr.w	r3, r3, #32
 8012da8:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8012daa:	bf00      	nop
 8012dac:	4b0c      	ldr	r3, [pc, #48]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dae:	69db      	ldr	r3, [r3, #28]
 8012db0:	f003 0320 	and.w	r3, r3, #32
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	bf14      	ite	ne
 8012db8:	2301      	movne	r3, #1
 8012dba:	2300      	moveq	r3, #0
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d1f4      	bne.n	8012dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012dc2:	4b07      	ldr	r3, [pc, #28]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dc4:	2210      	movs	r2, #16
 8012dc6:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8012dc8:	7ffb      	ldrb	r3, [r7, #31]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d003      	beq.n	8012dd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012dce:	4b04      	ldr	r3, [pc, #16]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dd0:	4a06      	ldr	r2, [pc, #24]	@ (8012dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012dd2:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8012dd4:	e07e      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012dd6:	4b02      	ldr	r3, [pc, #8]	@ (8012de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8012e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012dda:	601a      	str	r2, [r3, #0]
        break;
 8012ddc:	e07a      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
 8012dde:	bf00      	nop
 8012de0:	4002b000 	.word	0x4002b000
 8012de4:	0002000a 	.word	0x0002000a
 8012de8:	ff010000 	.word	0xff010000
 8012dec:	00022301 	.word	0x00022301
 8012df0:	00020009 	.word	0x00020009
 8012df4:	ffff00ef 	.word	0xffff00ef
 8012df8:	0802fe18 	.word	0x0802fe18
 8012dfc:	0802fe34 	.word	0x0802fe34
 8012e00:	0802fda0 	.word	0x0802fda0
 8012e04:	00012301 	.word	0x00012301
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d009      	beq.n	8012e26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ce>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	7f1b      	ldrb	r3, [r3, #28]
 8012e16:	061a      	lsls	r2, r3, #24
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012e22:	61d3      	str	r3, [r2, #28]
 8012e24:	e002      	b.n	8012e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012e26:	4a2d      	ldr	r2, [pc, #180]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	7fdb      	ldrb	r3, [r3, #31]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d005      	beq.n	8012e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012e34:	4929      	ldr	r1, [pc, #164]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e36:	697a      	ldr	r2, [r7, #20]
 8012e38:	4b29      	ldr	r3, [pc, #164]	@ (8012ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x388>)
 8012e3a:	4313      	orrs	r3, r2
 8012e3c:	624b      	str	r3, [r1, #36]	@ 0x24
 8012e3e:	e002      	b.n	8012e46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ee>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012e40:	4a26      	ldr	r2, [pc, #152]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	691a      	ldr	r2, [r3, #16]
 8012e4a:	4b24      	ldr	r3, [pc, #144]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e4c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012e4e:	4b23      	ldr	r3, [pc, #140]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e50:	4a24      	ldr	r2, [pc, #144]	@ (8012ee4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e52:	601a      	str	r2, [r3, #0]
        break;
 8012e54:	e03e      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	7f1b      	ldrb	r3, [r3, #28]
 8012e5a:	061a      	lsls	r2, r3, #24
 8012e5c:	69bb      	ldr	r3, [r7, #24]
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	4a1e      	ldr	r2, [pc, #120]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012e66:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	7fdb      	ldrb	r3, [r3, #31]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d005      	beq.n	8012e7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012e70:	491a      	ldr	r1, [pc, #104]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e72:	697a      	ldr	r2, [r7, #20]
 8012e74:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x388>)
 8012e76:	4313      	orrs	r3, r2
 8012e78:	624b      	str	r3, [r1, #36]	@ 0x24
 8012e7a:	e002      	b.n	8012e82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012e7c:	4a17      	ldr	r2, [pc, #92]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	691a      	ldr	r2, [r3, #16]
 8012e86:	4b15      	ldr	r3, [pc, #84]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e88:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012e8a:	4b14      	ldr	r3, [pc, #80]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e8c:	4a15      	ldr	r2, [pc, #84]	@ (8012ee4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e8e:	601a      	str	r2, [r3, #0]
        break;
 8012e90:	e020      	b.n	8012ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37c>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d005      	beq.n	8012ea8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x350>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012e9c:	490f      	ldr	r1, [pc, #60]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012e9e:	69ba      	ldr	r2, [r7, #24]
 8012ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8012ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x388>)
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	61cb      	str	r3, [r1, #28]
 8012ea6:	e002      	b.n	8012eae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x356>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	7f5a      	ldrb	r2, [r3, #29]
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	7f9b      	ldrb	r3, [r3, #30]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d007      	beq.n	8012eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x372>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	691a      	ldr	r2, [r3, #16]
 8012ebe:	4b07      	ldr	r3, [pc, #28]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012ec0:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012ec2:	4b06      	ldr	r3, [pc, #24]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012ec4:	4a08      	ldr	r2, [pc, #32]	@ (8012ee8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8012ec6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8012ec8:	e003      	b.n	8012ed2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012eca:	4b04      	ldr	r3, [pc, #16]	@ (8012edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>)
 8012ecc:	f242 3201 	movw	r2, #8961	@ 0x2301
 8012ed0:	601a      	str	r2, [r3, #0]
        break;
 8012ed2:	bf00      	nop
    }
}
 8012ed4:	bf00      	nop
 8012ed6:	3720      	adds	r7, #32
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	4002b000 	.word	0x4002b000
 8012ee0:	ff010000 	.word	0xff010000
 8012ee4:	00022301 	.word	0x00022301
 8012ee8:	00012301 	.word	0x00012301

08012eec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012eec:	b590      	push	{r4, r7, lr}
 8012eee:	b085      	sub	sp, #20
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	7f9b      	ldrb	r3, [r3, #30]
 8012efa:	4619      	mov	r1, r3
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7ff fde1 	bl	8012ac4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012f02:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012f04:	4a3f      	ldr	r2, [pc, #252]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	8adb      	ldrh	r3, [r3, #22]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	8a9b      	ldrh	r3, [r3, #20]
 8012f14:	041b      	lsls	r3, r3, #16
 8012f16:	431a      	orrs	r2, r3
 8012f18:	4b3a      	ldr	r3, [pc, #232]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	691a      	ldr	r2, [r3, #16]
 8012f20:	4b38      	ldr	r3, [pc, #224]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	8b5b      	ldrh	r3, [r3, #26]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	8a9b      	ldrh	r3, [r3, #20]
 8012f2e:	1ad2      	subs	r2, r2, r3
 8012f30:	4b34      	ldr	r3, [pc, #208]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f32:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2b08      	cmp	r3, #8
 8012f3a:	d139      	bne.n	8012fb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc4>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	8b5b      	ldrh	r3, [r3, #26]
 8012f40:	461a      	mov	r2, r3
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	8a9b      	ldrh	r3, [r3, #20]
 8012f46:	1ad2      	subs	r2, r2, r3
 8012f48:	4b2e      	ldr	r3, [pc, #184]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f4a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	8b5b      	ldrh	r3, [r3, #26]
 8012f50:	461a      	mov	r2, r3
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	8a9b      	ldrh	r3, [r3, #20]
 8012f56:	1ad2      	subs	r2, r2, r3
 8012f58:	4b2a      	ldr	r3, [pc, #168]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f5a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	7fdb      	ldrb	r3, [r3, #31]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d005      	beq.n	8012f70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012f64:	4927      	ldr	r1, [pc, #156]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f66:	68fa      	ldr	r2, [r7, #12]
 8012f68:	4b27      	ldr	r3, [pc, #156]	@ (8013008 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	624b      	str	r3, [r1, #36]	@ 0x24
 8012f6e:	e002      	b.n	8012f76 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012f70:	4a24      	ldr	r2, [pc, #144]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	7f1b      	ldrb	r3, [r3, #28]
 8012f7a:	061a      	lsls	r2, r3, #24
 8012f7c:	4921      	ldr	r1, [pc, #132]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f7e:	4b23      	ldr	r3, [pc, #140]	@ (801300c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8012f80:	4313      	orrs	r3, r2
 8012f82:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	330c      	adds	r3, #12
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fa f986 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	4a1c      	ldr	r2, [pc, #112]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012f96:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	691a      	ldr	r2, [r3, #16]
 8012f9c:	4b19      	ldr	r3, [pc, #100]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012f9e:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	691a      	ldr	r2, [r3, #16]
 8012fa4:	4b17      	ldr	r3, [pc, #92]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012fa6:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8012fa8:	4b16      	ldr	r3, [pc, #88]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012faa:	4a19      	ldr	r2, [pc, #100]	@ (8013010 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 8012fac:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 8012fae:	e024      	b.n	8012ffa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012fb0:	4a14      	ldr	r2, [pc, #80]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8012fb6:	4b13      	ldr	r3, [pc, #76]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	7f9b      	ldrb	r3, [r3, #30]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d109      	bne.n	8012fd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	330c      	adds	r3, #12
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fa f966 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8012fd6:	e00d      	b.n	8012ff4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	7f1b      	ldrb	r3, [r3, #28]
 8012fdc:	061c      	lsls	r4, r3, #24
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	330c      	adds	r3, #12
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fa f959 	bl	800d29a <_ZNK8touchgfx9colortypecvmEv>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012fee:	4a05      	ldr	r2, [pc, #20]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ff0:	4323      	orrs	r3, r4
 8012ff2:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8012ff4:	4b03      	ldr	r3, [pc, #12]	@ (8013004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8012ff6:	4a07      	ldr	r2, [pc, #28]	@ (8013014 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 8012ff8:	601a      	str	r2, [r3, #0]
}
 8012ffa:	bf00      	nop
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd90      	pop	{r4, r7, pc}
 8013002:	bf00      	nop
 8013004:	4002b000 	.word	0x4002b000
 8013008:	ff010000 	.word	0xff010000
 801300c:	00010009 	.word	0x00010009
 8013010:	00022301 	.word	0x00022301
 8013014:	00032301 	.word	0x00032301

08013018 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 8013018:	b480      	push	{r7}
 801301a:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801301c:	bf00      	nop
 801301e:	4b09      	ldr	r3, [pc, #36]	@ (8013044 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f003 0301 	and.w	r3, r3, #1
 8013026:	2b00      	cmp	r3, #0
 8013028:	bf14      	ite	ne
 801302a:	2301      	movne	r3, #1
 801302c:	2300      	moveq	r3, #0
 801302e:	b2db      	uxtb	r3, r3
 8013030:	2b00      	cmp	r3, #0
 8013032:	d1f4      	bne.n	801301e <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8013034:	4b03      	ldr	r3, [pc, #12]	@ (8013044 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8013036:	2223      	movs	r2, #35	@ 0x23
 8013038:	609a      	str	r2, [r3, #8]
}
 801303a:	bf00      	nop
 801303c:	46bd      	mov	sp, r7
 801303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013042:	4770      	bx	lr
 8013044:	4002b000 	.word	0x4002b000

08013048 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	6039      	str	r1, [r7, #0]
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013052:	4b09      	ldr	r3, [pc, #36]	@ (8013078 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8013054:	695b      	ldr	r3, [r3, #20]
 8013056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801305a:	2b00      	cmp	r3, #0
 801305c:	bf14      	ite	ne
 801305e:	2301      	movne	r3, #1
 8013060:	2300      	moveq	r3, #0
 8013062:	b2db      	uxtb	r3, r3
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <_ZN8touchgfx5paint9flushLineEPmi+0x28>
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
 8013068:	6839      	ldr	r1, [r7, #0]
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f7ff fb5a 	bl	8012724 <SCB_CleanDCache_by_Addr>
    }
}
 8013070:	bf00      	nop
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	e000ed00 	.word	0xe000ed00

0801307c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This function will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint32_t* const ptr, const int16_t count, const uint32_t painterColor, const uint8_t alpha)
{
 801307c:	b480      	push	{r7}
 801307e:	b085      	sub	sp, #20
 8013080:	af00      	add	r7, sp, #0
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	461a      	mov	r2, r3
 8013088:	460b      	mov	r3, r1
 801308a:	817b      	strh	r3, [r7, #10]
 801308c:	4613      	mov	r3, r2
 801308e:	727b      	strb	r3, [r7, #9]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8013090:	bf00      	nop
 8013092:	4b22      	ldr	r3, [pc, #136]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f003 0301 	and.w	r3, r3, #1
 801309a:	2b00      	cmp	r3, #0
 801309c:	bf14      	ite	ne
 801309e:	2301      	movne	r3, #1
 80130a0:	2300      	moveq	r3, #0
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d1f4      	bne.n	8013092 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0x16>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80130a8:	4b1c      	ldr	r3, [pc, #112]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130aa:	2223      	movs	r2, #35	@ 0x23
 80130ac:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration (set output image color format) */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_ARGB8888);
 80130ae:	4b1b      	ldr	r3, [pc, #108]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130b0:	2200      	movs	r2, #0
 80130b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size (pixels per line (PL)) */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80130b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80130b8:	041b      	lsls	r3, r3, #16
 80130ba:	f043 0201 	orr.w	r2, r3, #1
 80130be:	4b17      	ldr	r3, [pc, #92]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80130c2:	4a16      	ldr	r2, [pc, #88]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 80130c8:	7a7b      	ldrb	r3, [r7, #9]
 80130ca:	2bff      	cmp	r3, #255	@ 0xff
 80130cc:	d017      	beq.n	80130fe <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0x82>
    {
        /* Write DMA2D BGPFCCR (background control) register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80130ce:	4b13      	ldr	r3, [pc, #76]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130d0:	2200      	movs	r2, #0
 80130d2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR (foreground control) register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80130d4:	7a7b      	ldrb	r3, [r7, #9]
 80130d6:	061a      	lsls	r2, r3, #24
 80130d8:	4910      	ldr	r1, [pc, #64]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130da:	4b11      	ldr	r3, [pc, #68]	@ (8013120 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa4>)
 80130dc:	4313      	orrs	r3, r2
 80130de:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, painterColor & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80130e0:	4a0e      	ldr	r2, [pc, #56]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80130e8:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80130ea:	4a0c      	ldr	r2, [pc, #48]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80130f0:	4a0a      	ldr	r2, [pc, #40]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 80130f6:	4b09      	ldr	r3, [pc, #36]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 80130f8:	4a0a      	ldr	r2, [pc, #40]	@ (8013124 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa8>)
 80130fa:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, painterColor);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 80130fc:	e008      	b.n	8013110 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0x94>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80130fe:	4b07      	ldr	r3, [pc, #28]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013100:	2200      	movs	r2, #0
 8013102:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, painterColor);
 8013104:	4a05      	ldr	r2, [pc, #20]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 801310a:	4b04      	ldr	r3, [pc, #16]	@ (801311c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xa0>)
 801310c:	4a06      	ldr	r2, [pc, #24]	@ (8013128 <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh+0xac>)
 801310e:	601a      	str	r2, [r3, #0]
}
 8013110:	bf00      	nop
 8013112:	3714      	adds	r7, #20
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr
 801311c:	4002b000 	.word	0x4002b000
 8013120:	00010009 	.word	0x00010009
 8013124:	00020001 	.word	0x00020001
 8013128:	00030001 	.word	0x00030001

0801312c <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>:
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
    }
}

void lineFromRGB565(uint8_t* const ptr, const uint16_t* const data, const int16_t length, const uint8_t alpha)
{
 801312c:	b480      	push	{r7}
 801312e:	b085      	sub	sp, #20
 8013130:	af00      	add	r7, sp, #0
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	4611      	mov	r1, r2
 8013138:	461a      	mov	r2, r3
 801313a:	460b      	mov	r3, r1
 801313c:	80fb      	strh	r3, [r7, #6]
 801313e:	4613      	mov	r3, r2
 8013140:	717b      	strb	r3, [r7, #5]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8013142:	bf00      	nop
 8013144:	4b1e      	ldr	r3, [pc, #120]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f003 0301 	and.w	r3, r3, #1
 801314c:	2b00      	cmp	r3, #0
 801314e:	bf14      	ite	ne
 8013150:	2301      	movne	r3, #1
 8013152:	2300      	moveq	r3, #0
 8013154:	b2db      	uxtb	r3, r3
 8013156:	2b00      	cmp	r3, #0
 8013158:	d1f4      	bne.n	8013144 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x18>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801315a:	4b19      	ldr	r3, [pc, #100]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 801315c:	2223      	movs	r2, #35	@ 0x23
 801315e:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_ARGB8888);
 8013160:	4b17      	ldr	r3, [pc, #92]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013162:	2200      	movs	r2, #0
 8013164:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (length << DMA2D_NLR_PL_Pos)));
 8013166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801316a:	041b      	lsls	r3, r3, #16
 801316c:	f043 0201 	orr.w	r2, r3, #1
 8013170:	4b13      	ldr	r3, [pc, #76]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8013174:	4a12      	ldr	r2, [pc, #72]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 801317a:	4a11      	ldr	r2, [pc, #68]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8013180:	797b      	ldrb	r3, [r7, #5]
 8013182:	2bff      	cmp	r3, #255	@ 0xff
 8013184:	d00f      	beq.n	80131a6 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x7a>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8013186:	797b      	ldrb	r3, [r7, #5]
 8013188:	061b      	lsls	r3, r3, #24
 801318a:	4a0d      	ldr	r2, [pc, #52]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 801318c:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8013190:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013192:	4b0b      	ldr	r3, [pc, #44]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 8013194:	2200      	movs	r2, #0
 8013196:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8013198:	4a09      	ldr	r2, [pc, #36]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 801319e:	4b08      	ldr	r3, [pc, #32]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80131a0:	4a08      	ldr	r2, [pc, #32]	@ (80131c4 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x98>)
 80131a2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
    }
}
 80131a4:	e005      	b.n	80131b2 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x86>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80131a6:	4b06      	ldr	r3, [pc, #24]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80131a8:	2202      	movs	r2, #2
 80131aa:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80131ac:	4b04      	ldr	r3, [pc, #16]	@ (80131c0 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x94>)
 80131ae:	4a05      	ldr	r2, [pc, #20]	@ (80131c4 <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh+0x98>)
 80131b0:	601a      	str	r2, [r3, #0]
}
 80131b2:	bf00      	nop
 80131b4:	3714      	adds	r7, #20
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
 80131be:	bf00      	nop
 80131c0:	4002b000 	.word	0x4002b000
 80131c4:	00020001 	.word	0x00020001

080131c8 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const int16_t length, const uint8_t alpha)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b085      	sub	sp, #20
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	60f8      	str	r0, [r7, #12]
 80131d0:	60b9      	str	r1, [r7, #8]
 80131d2:	4611      	mov	r1, r2
 80131d4:	461a      	mov	r2, r3
 80131d6:	460b      	mov	r3, r1
 80131d8:	80fb      	strh	r3, [r7, #6]
 80131da:	4613      	mov	r3, r2
 80131dc:	717b      	strb	r3, [r7, #5]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80131de:	bf00      	nop
 80131e0:	4b1c      	ldr	r3, [pc, #112]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f003 0301 	and.w	r3, r3, #1
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	bf14      	ite	ne
 80131ec:	2301      	movne	r3, #1
 80131ee:	2300      	moveq	r3, #0
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d1f4      	bne.n	80131e0 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x18>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80131f6:	4b17      	ldr	r3, [pc, #92]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 80131f8:	2223      	movs	r2, #35	@ 0x23
 80131fa:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_ARGB8888);
 80131fc:	4b15      	ldr	r3, [pc, #84]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 80131fe:	2200      	movs	r2, #0
 8013200:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (length << DMA2D_NLR_PL_Pos)));
 8013202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013206:	041b      	lsls	r3, r3, #16
 8013208:	f043 0201 	orr.w	r2, r3, #1
 801320c:	4b11      	ldr	r3, [pc, #68]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801320e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8013210:	4a10      	ldr	r2, [pc, #64]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8013216:	4a0f      	ldr	r2, [pc, #60]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 801321c:	797b      	ldrb	r3, [r7, #5]
 801321e:	2bff      	cmp	r3, #255	@ 0xff
 8013220:	d006      	beq.n	8013230 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x68>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8013222:	797b      	ldrb	r3, [r7, #5]
 8013224:	061b      	lsls	r3, r3, #24
 8013226:	4a0b      	ldr	r2, [pc, #44]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801322c:	61d3      	str	r3, [r2, #28]
 801322e:	e002      	b.n	8013236 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x6e>
    }
    else
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013230:	4b08      	ldr	r3, [pc, #32]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013232:	2200      	movs	r2, #0
 8013234:	61da      	str	r2, [r3, #28]
    }

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013236:	4b07      	ldr	r3, [pc, #28]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013238:	2200      	movs	r2, #0
 801323a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 801323c:	4a05      	ldr	r2, [pc, #20]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6153      	str	r3, [r2, #20]

    /* Start DMA2D */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8013242:	4b04      	ldr	r3, [pc, #16]	@ (8013254 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x8c>)
 8013244:	4a04      	ldr	r2, [pc, #16]	@ (8013258 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh+0x90>)
 8013246:	601a      	str	r2, [r3, #0]
}
 8013248:	bf00      	nop
 801324a:	3714      	adds	r7, #20
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	4002b000 	.word	0x4002b000
 8013258:	00020001 	.word	0x00020001

0801325c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8013264:	4a04      	ldr	r2, [pc, #16]	@ (8013278 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6013      	str	r3, [r2, #0]
    }
 801326a:	bf00      	nop
 801326c:	370c      	adds	r7, #12
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	20012328 	.word	0x20012328

0801327c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	60b9      	str	r1, [r7, #8]
 8013286:	607a      	str	r2, [r7, #4]
 8013288:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801328a:	4a0b      	ldr	r2, [pc, #44]	@ (80132b8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	68ba      	ldr	r2, [r7, #8]
 8013294:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	683a      	ldr	r2, [r7, #0]
 80132a0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	69ba      	ldr	r2, [r7, #24]
 80132a6:	611a      	str	r2, [r3, #16]
    {
    }
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	4618      	mov	r0, r3
 80132ac:	3714      	adds	r7, #20
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop
 80132b8:	08030f40 	.word	0x08030f40

080132bc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
    {
 80132c4:	4a04      	ldr	r2, [pc, #16]	@ (80132d8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	601a      	str	r2, [r3, #0]
    }
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4618      	mov	r0, r3
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr
 80132d8:	08030f40 	.word	0x08030f40

080132dc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
    }
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f7ff ffe9 	bl	80132bc <_ZN8touchgfx7MVPHeapD1Ev>
 80132ea:	2114      	movs	r1, #20
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f019 fe30 	bl	802cf52 <_ZdlPvj>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	4618      	mov	r0, r3
 80132f6:	3708      	adds	r7, #8
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
    {
 8013304:	4a04      	ldr	r2, [pc, #16]	@ (8013318 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	601a      	str	r2, [r3, #0]
    }
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr
 8013318:	0803228c 	.word	0x0803228c

0801331c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
    }
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f7ff ffe9 	bl	80132fc <_ZN8touchgfx3LCDD1Ev>
 801332a:	210c      	movs	r1, #12
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f019 fe10 	bl	802cf52 <_ZdlPvj>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
            : startX(0),
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2200      	movs	r2, #0
 8013348:	801a      	strh	r2, [r3, #0]
              startY(0),
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2200      	movs	r2, #0
 801334e:	805a      	strh	r2, [r3, #2]
              downX(0),
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	809a      	strh	r2, [r3, #4]
              downY(0),
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2200      	movs	r2, #0
 801335a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	739a      	strb	r2, [r3, #14]
        {
        }
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4618      	mov	r0, r3
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8013382:	b580      	push	{r7, lr}
 8013384:	b082      	sub	sp, #8
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4618      	mov	r0, r3
 801338e:	f7ff ffd5 	bl	801333c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2200      	movs	r2, #0
 8013396:	611a      	str	r2, [r3, #16]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	829a      	strh	r2, [r3, #20]
    {
    }
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4618      	mov	r0, r3
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	607a      	str	r2, [r7, #4]
 80133b4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80133b6:	4a55      	ldr	r2, [pc, #340]	@ (801350c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	683a      	ldr	r2, [r7, #0]
 80133cc:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2200      	movs	r2, #0
 80133d2:	611a      	str	r2, [r3, #16]
          buttonController(0),
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2200      	movs	r2, #0
 80133d8:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2200      	movs	r2, #0
 80133de:	619a      	str	r2, [r3, #24]
          gestures(),
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	331c      	adds	r3, #28
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7ff ffcc 	bl	8013382 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2200      	movs	r2, #0
 80133ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2200      	movs	r2, #0
 80133f6:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2200      	movs	r2, #0
 80133fc:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2200      	movs	r2, #0
 8013402:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2200      	movs	r2, #0
 8013408:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	2200      	movs	r2, #0
 801340e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2201      	movs	r2, #1
 8013416:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2200      	movs	r2, #0
 801341e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2200      	movs	r2, #0
 8013426:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	2200      	movs	r2, #0
 801342e:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	3350      	adds	r3, #80	@ 0x50
 8013434:	4618      	mov	r0, r3
 8013436:	f7f7 f89d 	bl	800a574 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2200      	movs	r2, #0
 801343e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2200      	movs	r2, #0
 8013446:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2200      	movs	r2, #0
 801344c:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2200      	movs	r2, #0
 8013452:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2201      	movs	r2, #1
 8013458:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2200      	movs	r2, #0
 8013460:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2200      	movs	r2, #0
 8013468:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2201      	movs	r2, #1
 8013470:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2200      	movs	r2, #0
 8013478:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2200      	movs	r2, #0
 8013480:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2200      	movs	r2, #0
 8013488:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2200      	movs	r2, #0
 8013490:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	2200      	movs	r2, #0
 80134a0:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2200      	movs	r2, #0
 80134a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	2201      	movs	r2, #1
 80134b6:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2201      	movs	r2, #1
 80134be:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 80134c2:	4a13      	ldr	r2, [pc, #76]	@ (8013510 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80134c8:	4a12      	ldr	r2, [pc, #72]	@ (8013514 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80134ca:	8b3b      	ldrh	r3, [r7, #24]
 80134cc:	8013      	strh	r3, [r2, #0]
 80134ce:	4b11      	ldr	r3, [pc, #68]	@ (8013514 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80134d0:	881a      	ldrh	r2, [r3, #0]
 80134d2:	4b11      	ldr	r3, [pc, #68]	@ (8013518 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80134d4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80134d6:	4a11      	ldr	r2, [pc, #68]	@ (801351c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80134d8:	8bbb      	ldrh	r3, [r7, #28]
 80134da:	8013      	strh	r3, [r2, #0]
 80134dc:	4b0f      	ldr	r3, [pc, #60]	@ (801351c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80134de:	881a      	ldrh	r2, [r3, #0]
 80134e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013520 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80134e2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80134e4:	4b0f      	ldr	r3, [pc, #60]	@ (8013524 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80134e6:	2200      	movs	r2, #0
 80134e8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80134ea:	8b3a      	ldrh	r2, [r7, #24]
 80134ec:	8bbb      	ldrh	r3, [r7, #28]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	bf34      	ite	cc
 80134f2:	2301      	movcc	r3, #1
 80134f4:	2300      	movcs	r3, #0
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	461a      	mov	r2, r3
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	080315c0 	.word	0x080315c0
 8013510:	200122c4 	.word	0x200122c4
 8013514:	200122b8 	.word	0x200122b8
 8013518:	200122be 	.word	0x200122be
 801351c:	200122ba 	.word	0x200122ba
 8013520:	200122c0 	.word	0x200122c0
 8013524:	200122bc 	.word	0x200122bc

08013528 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	4618      	mov	r0, r3
 8013536:	f7f7 fdb7 	bl	800b0a8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801353a:	bf00      	nop
 801353c:	3708      	adds	r7, #8
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
	...

08013544 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013544:	b580      	push	{r7, lr}
 8013546:	b086      	sub	sp, #24
 8013548:	af02      	add	r7, sp, #8
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
 8013550:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	68b9      	ldr	r1, [r7, #8]
 801355e:	f7ff fe8d 	bl	801327c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013562:	4a04      	ldr	r2, [pc, #16]	@ (8013574 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	601a      	str	r2, [r3, #0]
    {

    }
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	4618      	mov	r0, r3
 801356c:	3710      	adds	r7, #16
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	08030f2c 	.word	0x08030f2c

08013578 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	4a05      	ldr	r2, [pc, #20]	@ (8013598 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	601a      	str	r2, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff fe97 	bl	80132bc <_ZN8touchgfx7MVPHeapD1Ev>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	4618      	mov	r0, r3
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	08030f2c 	.word	0x08030f2c

0801359c <_ZN16FrontendHeapBaseD0Ev>:
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f7ff ffe7 	bl	8013578 <_ZN16FrontendHeapBaseD1Ev>
 80135aa:	2114      	movs	r1, #20
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f019 fcd0 	bl	802cf52 <_ZdlPvj>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4618      	mov	r0, r3
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	4a05      	ldr	r2, [pc, #20]	@ (80135dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	601a      	str	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f000 fdce 	bl	801416e <_ZN8touchgfx17AbstractPartitionD1Ev>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4618      	mov	r0, r3
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	08030ef8 	.word	0x08030ef8

080135e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7ff ffe7 	bl	80135bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80135ee:	2118      	movs	r1, #24
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f019 fcae 	bl	802cf52 <_ZdlPvj>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4618      	mov	r0, r3
 80135fa:	3708      	adds	r7, #8
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	4a05      	ldr	r2, [pc, #20]	@ (8013620 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	f000 fdac 	bl	801416e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	08030ec4 	.word	0x08030ec4

08013624 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7ff ffe7 	bl	8013600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013632:	f643 01b0 	movw	r1, #14512	@ 0x38b0
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f019 fc8b 	bl	802cf52 <_ZdlPvj>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	4618      	mov	r0, r3
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
	...

08013648 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	4a05      	ldr	r2, [pc, #20]	@ (8013668 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	601a      	str	r2, [r3, #0]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4618      	mov	r0, r3
 801365a:	f000 fd88 	bl	801416e <_ZN8touchgfx17AbstractPartitionD1Ev>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4618      	mov	r0, r3
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	08030e90 	.word	0x08030e90

0801366c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f7ff ffe7 	bl	8013648 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801367a:	2148      	movs	r1, #72	@ 0x48
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f019 fc68 	bl	802cf52 <_ZdlPvj>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	4618      	mov	r0, r3
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	4a11      	ldr	r2, [pc, #68]	@ (80136dc <_ZN12FrontendHeapD1Ev+0x50>)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	f643 1328 	movw	r3, #14632	@ 0x3928
 80136a0:	4413      	add	r3, r2
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7fe f892 	bl	80117cc <_ZN19FrontendApplicationD1Ev>
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	f643 03dc 	movw	r3, #14556	@ 0x38dc
 80136ae:	4413      	add	r3, r2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ff ffc9 	bl	8013648 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	332c      	adds	r3, #44	@ 0x2c
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7ff ffa0 	bl	8013600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	3314      	adds	r3, #20
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7ff ff79 	bl	80135bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7ff ff53 	bl	8013578 <_ZN16FrontendHeapBaseD1Ev>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4618      	mov	r0, r3
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	08030e7c 	.word	0x08030e7c

080136e0 <_ZN12FrontendHeapD0Ev>:
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f7ff ffcf 	bl	801368c <_ZN12FrontendHeapD1Ev>
 80136ee:	f643 2184 	movw	r1, #14980	@ 0x3a84
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f019 fc2d 	bl	802cf52 <_ZdlPvj>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	4618      	mov	r0, r3
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
	...

08013704 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013704:	b580      	push	{r7, lr}
 8013706:	af00      	add	r7, sp, #0
 8013708:	4801      	ldr	r0, [pc, #4]	@ (8013710 <__tcf_0+0xc>)
 801370a:	f7ff ffbf 	bl	801368c <_ZN12FrontendHeapD1Ev>
 801370e:	bd80      	pop	{r7, pc}
 8013710:	2000d97c 	.word	0x2000d97c

08013714 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013714:	b580      	push	{r7, lr}
 8013716:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013718:	4b11      	ldr	r3, [pc, #68]	@ (8013760 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f3bf 8f5b 	dmb	ish
 8013720:	f003 0301 	and.w	r3, r3, #1
 8013724:	2b00      	cmp	r3, #0
 8013726:	bf0c      	ite	eq
 8013728:	2301      	moveq	r3, #1
 801372a:	2300      	movne	r3, #0
 801372c:	b2db      	uxtb	r3, r3
 801372e:	2b00      	cmp	r3, #0
 8013730:	d013      	beq.n	801375a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8013732:	480b      	ldr	r0, [pc, #44]	@ (8013760 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013734:	f019 fc0f 	bl	802cf56 <__cxa_guard_acquire>
 8013738:	4603      	mov	r3, r0
 801373a:	2b00      	cmp	r3, #0
 801373c:	bf14      	ite	ne
 801373e:	2301      	movne	r3, #1
 8013740:	2300      	moveq	r3, #0
 8013742:	b2db      	uxtb	r3, r3
 8013744:	2b00      	cmp	r3, #0
 8013746:	d008      	beq.n	801375a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8013748:	4806      	ldr	r0, [pc, #24]	@ (8013764 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801374a:	f000 f845 	bl	80137d8 <_ZN12FrontendHeapC1Ev>
 801374e:	4806      	ldr	r0, [pc, #24]	@ (8013768 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8013750:	f01a f97e 	bl	802da50 <atexit>
 8013754:	4802      	ldr	r0, [pc, #8]	@ (8013760 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013756:	f019 fc0a 	bl	802cf6e <__cxa_guard_release>
        return instance;
 801375a:	4b02      	ldr	r3, [pc, #8]	@ (8013764 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 801375c:	4618      	mov	r0, r3
 801375e:	bd80      	pop	{r7, pc}
 8013760:	20011400 	.word	0x20011400
 8013764:	2000d97c 	.word	0x2000d97c
 8013768:	08013705 	.word	0x08013705

0801376c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	4618      	mov	r0, r3
 8013778:	f000 fcfa 	bl	8014170 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801377c:	4a03      	ldr	r2, [pc, #12]	@ (801378c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	601a      	str	r2, [r3, #0]
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	4618      	mov	r0, r3
 8013786:	3708      	adds	r7, #8
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	08030ef8 	.word	0x08030ef8

08013790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	4618      	mov	r0, r3
 801379c:	f000 fce8 	bl	8014170 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80137a0:	4a03      	ldr	r2, [pc, #12]	@ (80137b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	601a      	str	r2, [r3, #0]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4618      	mov	r0, r3
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	08030ec4 	.word	0x08030ec4

080137b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	4618      	mov	r0, r3
 80137c0:	f000 fcd6 	bl	8014170 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80137c4:	4a03      	ldr	r2, [pc, #12]	@ (80137d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	601a      	str	r2, [r3, #0]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	08030e90 	.word	0x08030e90

080137d8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80137d8:	b5b0      	push	{r4, r5, r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af02      	add	r7, sp, #8
 80137de:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f103 0414 	add.w	r4, r3, #20
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f643 02dc 	movw	r2, #14556	@ 0x38dc
 80137f4:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80137f6:	6879      	ldr	r1, [r7, #4]
 80137f8:	f643 1328 	movw	r3, #14632	@ 0x3928
 80137fc:	440b      	add	r3, r1
                     app(model, *this)
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	4613      	mov	r3, r2
 8013802:	462a      	mov	r2, r5
 8013804:	4621      	mov	r1, r4
 8013806:	f7ff fe9d 	bl	8013544 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801380a:	4a1a      	ldr	r2, [pc, #104]	@ (8013874 <_ZN12FrontendHeapC1Ev+0x9c>)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	601a      	str	r2, [r3, #0]
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	3314      	adds	r3, #20
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff ffa9 	bl	801376c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	332c      	adds	r3, #44	@ 0x2c
 801381e:	4618      	mov	r0, r3
 8013820:	f7ff ffb6 	bl	8013790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	f643 03dc 	movw	r3, #14556	@ 0x38dc
 801382a:	4413      	add	r3, r2
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff ffc1 	bl	80137b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	f643 1324 	movw	r3, #14628	@ 0x3924
 8013838:	4413      	add	r3, r2
 801383a:	4618      	mov	r0, r3
 801383c:	f7fe f812 	bl	8011864 <_ZN5ModelC1Ev>
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	f643 1328 	movw	r3, #14632	@ 0x3928
 8013846:	4413      	add	r3, r2
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	f643 1124 	movw	r1, #14628	@ 0x3924
 801384e:	4411      	add	r1, r2
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	4618      	mov	r0, r3
 8013854:	f7fd fff0 	bl	8011838 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	687a      	ldr	r2, [r7, #4]
 801385c:	f643 1328 	movw	r3, #14632	@ 0x3928
 8013860:	4413      	add	r3, r2
 8013862:	4619      	mov	r1, r3
 8013864:	f7ff fe60 	bl	8013528 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	4618      	mov	r0, r3
 801386c:	3708      	adds	r7, #8
 801386e:	46bd      	mov	sp, r7
 8013870:	bdb0      	pop	{r4, r5, r7, pc}
 8013872:	bf00      	nop
 8013874:	08030e7c 	.word	0x08030e7c

08013878 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013878:	b580      	push	{r7, lr}
 801387a:	b086      	sub	sp, #24
 801387c:	af02      	add	r7, sp, #8
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	607a      	str	r2, [r7, #4]
 8013884:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013886:	68f8      	ldr	r0, [r7, #12]
 8013888:	8bbb      	ldrh	r3, [r7, #28]
 801388a:	9301      	str	r3, [sp, #4]
 801388c:	8b3b      	ldrh	r3, [r7, #24]
 801388e:	9300      	str	r3, [sp, #0]
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	687a      	ldr	r2, [r7, #4]
 8013894:	68b9      	ldr	r1, [r7, #8]
 8013896:	f7ff fd87 	bl	80133a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801389a:	4a04      	ldr	r2, [pc, #16]	@ (80138ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	601a      	str	r2, [r3, #0]
    }
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	4618      	mov	r0, r3
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	08030f50 	.word	0x08030f50

080138b0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b086      	sub	sp, #24
 80138b4:	af02      	add	r7, sp, #8
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	60b9      	str	r1, [r7, #8]
 80138ba:	607a      	str	r2, [r7, #4]
 80138bc:	603b      	str	r3, [r7, #0]
 80138be:	68f8      	ldr	r0, [r7, #12]
 80138c0:	8bbb      	ldrh	r3, [r7, #28]
 80138c2:	9301      	str	r3, [sp, #4]
 80138c4:	8b3b      	ldrh	r3, [r7, #24]
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	68b9      	ldr	r1, [r7, #8]
 80138ce:	f7ff ffd3 	bl	8013878 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80138d2:	4a04      	ldr	r2, [pc, #16]	@ (80138e4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	601a      	str	r2, [r3, #0]
    }
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	4618      	mov	r0, r3
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	08030d20 	.word	0x08030d20

080138e8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80138e8:	b480      	push	{r7}
 80138ea:	b083      	sub	sp, #12
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	4a04      	ldr	r2, [pc, #16]	@ (8013904 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	601a      	str	r2, [r3, #0]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	4618      	mov	r0, r3
 80138fa:	370c      	adds	r7, #12
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr
 8013904:	08030d08 	.word	0x08030d08

08013908 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	4618      	mov	r0, r3
 8013914:	f7ff ffe8 	bl	80138e8 <_ZN8touchgfx15TouchControllerC1Ev>
 8013918:	4a03      	ldr	r2, [pc, #12]	@ (8013928 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	601a      	str	r2, [r3, #0]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	08030cf0 	.word	0x08030cf0

0801392c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 801392c:	b590      	push	{r4, r7, lr}
 801392e:	b085      	sub	sp, #20
 8013930:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013932:	f7fd fd5f 	bl	80113f4 <_ZN14BitmapDatabase11getInstanceEv>
 8013936:	4604      	mov	r4, r0
 8013938:	f7fd fd66 	bl	8011408 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801393c:	4603      	mov	r3, r0
 801393e:	4619      	mov	r1, r3
 8013940:	2300      	movs	r3, #0
 8013942:	9300      	str	r3, [sp, #0]
 8013944:	2300      	movs	r3, #0
 8013946:	2200      	movs	r2, #0
 8013948:	4620      	mov	r0, r4
 801394a:	f00a fe65 	bl	801e618 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801394e:	4809      	ldr	r0, [pc, #36]	@ (8013974 <touchgfx_init+0x48>)
 8013950:	f7ff fc84 	bl	801325c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013954:	2000      	movs	r0, #0
 8013956:	f7fd fe9b 	bl	8011690 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801395a:	4807      	ldr	r0, [pc, #28]	@ (8013978 <touchgfx_init+0x4c>)
 801395c:	f00a fd08 	bl	801e370 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013960:	f7ff fed8 	bl	8013714 <_ZN12FrontendHeap11getInstanceEv>
 8013964:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013966:	4805      	ldr	r0, [pc, #20]	@ (801397c <touchgfx_init+0x50>)
 8013968:	f7fe fd52 	bl	8012410 <_ZN11TouchGFXHAL10initializeEv>
}
 801396c:	bf00      	nop
 801396e:	370c      	adds	r7, #12
 8013970:	46bd      	mov	sp, r7
 8013972:	bd90      	pop	{r4, r7, pc}
 8013974:	20012234 	.word	0x20012234
 8013978:	20000014 	.word	0x20000014
 801397c:	20012238 	.word	0x20012238

08013980 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013980:	b480      	push	{r7}
 8013982:	af00      	add	r7, sp, #0
}
 8013984:	bf00      	nop
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr
	...

08013990 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013990:	b580      	push	{r7, lr}
 8013992:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8013994:	4802      	ldr	r0, [pc, #8]	@ (80139a0 <touchgfx_taskEntry+0x10>)
 8013996:	f001 fd2a 	bl	80153ee <_ZN8touchgfx3HAL9taskEntryEv>
}
 801399a:	bf00      	nop
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	20012238 	.word	0x20012238

080139a4 <_Z41__static_initialization_and_destruction_0v>:
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b082      	sub	sp, #8
 80139a8:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 80139aa:	480c      	ldr	r0, [pc, #48]	@ (80139dc <_Z41__static_initialization_and_destruction_0v+0x38>)
 80139ac:	f7ff ffac 	bl	8013908 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80139b0:	480b      	ldr	r0, [pc, #44]	@ (80139e0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80139b2:	f7fe ffbb 	bl	801292c <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 80139b6:	480b      	ldr	r0, [pc, #44]	@ (80139e4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80139b8:	f010 f940 	bl	8023c3c <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80139bc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80139c0:	9301      	str	r3, [sp, #4]
 80139c2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	4b04      	ldr	r3, [pc, #16]	@ (80139dc <_Z41__static_initialization_and_destruction_0v+0x38>)
 80139ca:	4a06      	ldr	r2, [pc, #24]	@ (80139e4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80139cc:	4904      	ldr	r1, [pc, #16]	@ (80139e0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80139ce:	4806      	ldr	r0, [pc, #24]	@ (80139e8 <_Z41__static_initialization_and_destruction_0v+0x44>)
 80139d0:	f7ff ff6e 	bl	80138b0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80139d4:	bf00      	nop
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	20011404 	.word	0x20011404
 80139e0:	20011408 	.word	0x20011408
 80139e4:	200121a8 	.word	0x200121a8
 80139e8:	20012238 	.word	0x20012238

080139ec <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	4a05      	ldr	r2, [pc, #20]	@ (8013a0c <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	601a      	str	r2, [r3, #0]
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff fc7d 	bl	80132fc <_ZN8touchgfx3LCDD1Ev>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	3708      	adds	r7, #8
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	08032718 	.word	0x08032718

08013a10 <_ZN8touchgfx8LCD32bppD0Ev>:
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff ffe7 	bl	80139ec <_ZN8touchgfx8LCD32bppD1Ev>
 8013a1e:	218c      	movs	r1, #140	@ 0x8c
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f019 fa96 	bl	802cf52 <_ZdlPvj>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}

08013a30 <_Z41__static_initialization_and_destruction_1v>:
 8013a30:	b580      	push	{r7, lr}
 8013a32:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8013a34:	4808      	ldr	r0, [pc, #32]	@ (8013a58 <_Z41__static_initialization_and_destruction_1v+0x28>)
 8013a36:	f7fe fd7b 	bl	8012530 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013a3a:	4808      	ldr	r0, [pc, #32]	@ (8013a5c <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8013a3c:	f7f6 fa98 	bl	8009f70 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 8013a40:	4807      	ldr	r0, [pc, #28]	@ (8013a60 <_Z41__static_initialization_and_destruction_1v+0x30>)
 8013a42:	f7ff ffd3 	bl	80139ec <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 8013a46:	4807      	ldr	r0, [pc, #28]	@ (8013a64 <_Z41__static_initialization_and_destruction_1v+0x34>)
 8013a48:	f7fe ff9a 	bl	8012980 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013a4c:	4806      	ldr	r0, [pc, #24]	@ (8013a68 <_Z41__static_initialization_and_destruction_1v+0x38>)
 8013a4e:	f7fe fad7 	bl	8012000 <_ZN20STM32TouchControllerD1Ev>
}
 8013a52:	bf00      	nop
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	20012238 	.word	0x20012238
 8013a5c:	20000014 	.word	0x20000014
 8013a60:	200121a8 	.word	0x200121a8
 8013a64:	20011408 	.word	0x20011408
 8013a68:	20011404 	.word	0x20011404

08013a6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8013a6c:	b480      	push	{r7}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013a74:	2301      	movs	r3, #1
    }
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8013a82:	b480      	push	{r7}
 8013a84:	b083      	sub	sp, #12
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013a8a:	2340      	movs	r3, #64	@ 0x40
    }
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	370c      	adds	r7, #12
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8013a98:	b480      	push	{r7}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013aa4:	887b      	ldrh	r3, [r7, #2]
 8013aa6:	019b      	lsls	r3, r3, #6
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	4413      	add	r3, r2
    }
 8013aae:	4618      	mov	r0, r3
 8013ab0:	370c      	adds	r7, #12
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013aba:	b480      	push	{r7}
 8013abc:	b083      	sub	sp, #12
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013ac6:	887b      	ldrh	r3, [r7, #2]
 8013ac8:	019b      	lsls	r3, r3, #6
 8013aca:	3308      	adds	r3, #8
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	4413      	add	r3, r2
    }
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013ae4:	2301      	movs	r3, #1
    }
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	370c      	adds	r7, #12
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr

08013af2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013af2:	b480      	push	{r7}
 8013af4:	b083      	sub	sp, #12
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013afa:	f643 03a8 	movw	r3, #14504	@ 0x38a8
    }
 8013afe:	4618      	mov	r0, r3
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013b0a:	b480      	push	{r7}
 8013b0c:	b083      	sub	sp, #12
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	460b      	mov	r3, r1
 8013b14:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013b16:	887b      	ldrh	r3, [r7, #2]
 8013b18:	f643 02a8 	movw	r2, #14504	@ 0x38a8
 8013b1c:	fb02 f303 	mul.w	r3, r2, r3
 8013b20:	3308      	adds	r3, #8
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	4413      	add	r3, r2
    }
 8013b26:	4618      	mov	r0, r3
 8013b28:	370c      	adds	r7, #12
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr

08013b32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013b32:	b480      	push	{r7}
 8013b34:	b083      	sub	sp, #12
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013b3e:	887b      	ldrh	r3, [r7, #2]
 8013b40:	f643 02a8 	movw	r2, #14504	@ 0x38a8
 8013b44:	fb02 f303 	mul.w	r3, r2, r3
 8013b48:	3308      	adds	r3, #8
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	4413      	add	r3, r2
    }
 8013b4e:	4618      	mov	r0, r3
 8013b50:	370c      	adds	r7, #12
 8013b52:	46bd      	mov	sp, r7
 8013b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b58:	4770      	bx	lr

08013b5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013b5a:	b480      	push	{r7}
 8013b5c:	b083      	sub	sp, #12
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013b62:	2301      	movs	r3, #1
    }
 8013b64:	4618      	mov	r0, r3
 8013b66:	370c      	adds	r7, #12
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013b78:	2310      	movs	r3, #16
    }
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	460b      	mov	r3, r1
 8013b90:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013b92:	887b      	ldrh	r3, [r7, #2]
 8013b94:	011b      	lsls	r3, r3, #4
 8013b96:	3308      	adds	r3, #8
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	4413      	add	r3, r2
    }
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	370c      	adds	r7, #12
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba6:	4770      	bx	lr

08013ba8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013ba8:	b480      	push	{r7}
 8013baa:	b083      	sub	sp, #12
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013bb4:	887b      	ldrh	r3, [r7, #2]
 8013bb6:	011b      	lsls	r3, r3, #4
 8013bb8:	3308      	adds	r3, #8
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	4413      	add	r3, r2
    }
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	370c      	adds	r7, #12
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <_GLOBAL__sub_I_touchgfx_init>:
 8013bca:	b580      	push	{r7, lr}
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	f7ff fee9 	bl	80139a4 <_Z41__static_initialization_and_destruction_0v>
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <_GLOBAL__sub_D_touchgfx_init>:
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	f7ff ff2a 	bl	8013a30 <_Z41__static_initialization_and_destruction_1v>
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b082      	sub	sp, #8
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	3320      	adds	r3, #32
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	4798      	blx	r3
    }
 8013bf2:	bf00      	nop
 8013bf4:	3708      	adds	r7, #8
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013bfa:	b480      	push	{r7}
 8013bfc:	b083      	sub	sp, #12
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013c08:	3301      	adds	r3, #1
 8013c0a:	b2da      	uxtb	r2, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8013c12:	bf00      	nop
 8013c14:	370c      	adds	r7, #12
 8013c16:	46bd      	mov	sp, r7
 8013c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1c:	4770      	bx	lr
	...

08013c20 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	460b      	mov	r3, r1
 8013c2a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013c2c:	78fb      	ldrb	r3, [r7, #3]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013c32:	78fb      	ldrb	r3, [r7, #3]
 8013c34:	2b02      	cmp	r3, #2
 8013c36:	d105      	bne.n	8013c44 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	78fa      	ldrb	r2, [r7, #3]
 8013c3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8013c40:	2301      	movs	r3, #1
 8013c42:	e027      	b.n	8013c94 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013c44:	78fb      	ldrb	r3, [r7, #3]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d123      	bne.n	8013c92 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d014      	beq.n	8013c7c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	339c      	adds	r3, #156	@ 0x9c
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	4798      	blx	r3
 8013c5e:	4603      	mov	r3, r0
 8013c60:	461a      	mov	r2, r3
 8013c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d008      	beq.n	8013c7c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8013c9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	f083 0301 	eor.w	r3, r3, #1
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d001      	beq.n	8013c7c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013c78:	2301      	movs	r3, #1
 8013c7a:	e000      	b.n	8013c7e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d005      	beq.n	8013c8e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	78fa      	ldrb	r2, [r7, #3]
 8013c86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e002      	b.n	8013c94 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	e000      	b.n	8013c94 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013c92:	2300      	movs	r3, #0
    }
 8013c94:	4618      	mov	r0, r3
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	200122c2 	.word	0x200122c2

08013ca0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8013ca0:	b480      	push	{r7}
 8013ca2:	b083      	sub	sp, #12
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	683a      	ldr	r2, [r7, #0]
 8013cae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8013cb0:	bf00      	nop
 8013cb2:	370c      	adds	r7, #12
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cba:	4770      	bx	lr

08013cbc <__NVIC_EnableIRQ>:
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	db0b      	blt.n	8013ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013cce:	79fb      	ldrb	r3, [r7, #7]
 8013cd0:	f003 021f 	and.w	r2, r3, #31
 8013cd4:	4907      	ldr	r1, [pc, #28]	@ (8013cf4 <__NVIC_EnableIRQ+0x38>)
 8013cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cda:	095b      	lsrs	r3, r3, #5
 8013cdc:	2001      	movs	r0, #1
 8013cde:	fa00 f202 	lsl.w	r2, r0, r2
 8013ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013ce6:	bf00      	nop
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	e000e100 	.word	0xe000e100

08013cf8 <__NVIC_DisableIRQ>:
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b083      	sub	sp, #12
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	4603      	mov	r3, r0
 8013d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	db12      	blt.n	8013d30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013d0a:	79fb      	ldrb	r3, [r7, #7]
 8013d0c:	f003 021f 	and.w	r2, r3, #31
 8013d10:	490a      	ldr	r1, [pc, #40]	@ (8013d3c <__NVIC_DisableIRQ+0x44>)
 8013d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d16:	095b      	lsrs	r3, r3, #5
 8013d18:	2001      	movs	r0, #1
 8013d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8013d1e:	3320      	adds	r3, #32
 8013d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013d24:	f3bf 8f4f 	dsb	sy
}
 8013d28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013d2a:	f3bf 8f6f 	isb	sy
}
 8013d2e:	bf00      	nop
}
 8013d30:	bf00      	nop
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr
 8013d3c:	e000e100 	.word	0xe000e100

08013d40 <__NVIC_SetPriority>:
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	4603      	mov	r3, r0
 8013d48:	6039      	str	r1, [r7, #0]
 8013d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	db0a      	blt.n	8013d6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	490c      	ldr	r1, [pc, #48]	@ (8013d8c <__NVIC_SetPriority+0x4c>)
 8013d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d5e:	0112      	lsls	r2, r2, #4
 8013d60:	b2d2      	uxtb	r2, r2
 8013d62:	440b      	add	r3, r1
 8013d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013d68:	e00a      	b.n	8013d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	b2da      	uxtb	r2, r3
 8013d6e:	4908      	ldr	r1, [pc, #32]	@ (8013d90 <__NVIC_SetPriority+0x50>)
 8013d70:	79fb      	ldrb	r3, [r7, #7]
 8013d72:	f003 030f 	and.w	r3, r3, #15
 8013d76:	3b04      	subs	r3, #4
 8013d78:	0112      	lsls	r2, r2, #4
 8013d7a:	b2d2      	uxtb	r2, r2
 8013d7c:	440b      	add	r3, r1
 8013d7e:	761a      	strb	r2, [r3, #24]
}
 8013d80:	bf00      	nop
 8013d82:	370c      	adds	r7, #12
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr
 8013d8c:	e000e100 	.word	0xe000e100
 8013d90:	e000ed00 	.word	0xe000ed00

08013d94 <SCB_CleanInvalidateDCache>:
{
 8013d94:	b480      	push	{r7}
 8013d96:	b085      	sub	sp, #20
 8013d98:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013d9a:	4b20      	ldr	r3, [pc, #128]	@ (8013e1c <SCB_CleanInvalidateDCache+0x88>)
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013da2:	f3bf 8f4f 	dsb	sy
}
 8013da6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8013da8:	4b1c      	ldr	r3, [pc, #112]	@ (8013e1c <SCB_CleanInvalidateDCache+0x88>)
 8013daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dae:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	0b5b      	lsrs	r3, r3, #13
 8013db4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013db8:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	08db      	lsrs	r3, r3, #3
 8013dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013dc2:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	015a      	lsls	r2, r3, #5
 8013dc8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8013dcc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8013dce:	68ba      	ldr	r2, [r7, #8]
 8013dd0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013dd2:	4912      	ldr	r1, [pc, #72]	@ (8013e1c <SCB_CleanInvalidateDCache+0x88>)
 8013dd4:	4313      	orrs	r3, r2
 8013dd6:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	1e5a      	subs	r2, r3, #1
 8013dde:	60ba      	str	r2, [r7, #8]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	bf14      	ite	ne
 8013de4:	2301      	movne	r3, #1
 8013de6:	2300      	moveq	r3, #0
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d1ea      	bne.n	8013dc4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	1e5a      	subs	r2, r3, #1
 8013df2:	60fa      	str	r2, [r7, #12]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	bf14      	ite	ne
 8013df8:	2301      	movne	r3, #1
 8013dfa:	2300      	moveq	r3, #0
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d1db      	bne.n	8013dba <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013e02:	f3bf 8f4f 	dsb	sy
}
 8013e06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013e08:	f3bf 8f6f 	isb	sy
}
 8013e0c:	bf00      	nop
}
 8013e0e:	bf00      	nop
 8013e10:	3714      	adds	r7, #20
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr
 8013e1a:	bf00      	nop
 8013e1c:	e000ed00 	.word	0xe000ed00

08013e20 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013e20:	b5b0      	push	{r4, r5, r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f001 facb 	bl	80153c6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013e30:	687d      	ldr	r5, [r7, #4]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3364      	adds	r3, #100	@ 0x64
 8013e38:	681c      	ldr	r4, [r3, #0]
 8013e3a:	f007 f921 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	4619      	mov	r1, r3
 8013e42:	4628      	mov	r0, r5
 8013e44:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	490b      	ldr	r1, [pc, #44]	@ (8013e78 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7ff ff28 	bl	8013ca0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2101      	movs	r1, #1
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7ff fee3 	bl	8013c20 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	3388      	adds	r3, #136	@ 0x88
 8013e62:	681c      	ldr	r4, [r3, #0]
 8013e64:	2300      	movs	r3, #0
 8013e66:	2200      	movs	r2, #0
 8013e68:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8013e6c:	47a0      	blx	r4
}
 8013e6e:	bf00      	nop
 8013e70:	3708      	adds	r7, #8
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bdb0      	pop	{r4, r5, r7, pc}
 8013e76:	bf00      	nop
 8013e78:	08012685 	.word	0x08012685

08013e7c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013e84:	2109      	movs	r1, #9
 8013e86:	205a      	movs	r0, #90	@ 0x5a
 8013e88:	f7ff ff5a 	bl	8013d40 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013e8c:	2109      	movs	r1, #9
 8013e8e:	2058      	movs	r0, #88	@ 0x58
 8013e90:	f7ff ff56 	bl	8013d40 <__NVIC_SetPriority>
}
 8013e94:	bf00      	nop
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013ea4:	205a      	movs	r0, #90	@ 0x5a
 8013ea6:	f7ff ff09 	bl	8013cbc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013eaa:	2058      	movs	r0, #88	@ 0x58
 8013eac:	f7ff ff06 	bl	8013cbc <__NVIC_EnableIRQ>
}
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013ec0:	205a      	movs	r0, #90	@ 0x5a
 8013ec2:	f7ff ff19 	bl	8013cf8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013ec6:	2058      	movs	r0, #88	@ 0x58
 8013ec8:	f7ff ff16 	bl	8013cf8 <__NVIC_DisableIRQ>
}
 8013ecc:	bf00      	nop
 8013ece:	3708      	adds	r7, #8
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013edc:	4b11      	ldr	r3, [pc, #68]	@ (8013f24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	3b01      	subs	r3, #1
 8013eea:	b29a      	uxth	r2, r3
 8013eec:	4b0e      	ldr	r3, [pc, #56]	@ (8013f28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013eee:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8013f24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	3b01      	subs	r3, #1
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	4b0a      	ldr	r3, [pc, #40]	@ (8013f2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013f02:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013f04:	4b08      	ldr	r3, [pc, #32]	@ (8013f28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013f06:	881a      	ldrh	r2, [r3, #0]
 8013f08:	4b06      	ldr	r3, [pc, #24]	@ (8013f24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013f0a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013f0c:	4b05      	ldr	r3, [pc, #20]	@ (8013f24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f10:	4a04      	ldr	r2, [pc, #16]	@ (8013f24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013f12:	f043 0301 	orr.w	r3, r3, #1
 8013f16:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8013f18:	bf00      	nop
 8013f1a:	370c      	adds	r7, #12
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f22:	4770      	bx	lr
 8013f24:	40016800 	.word	0x40016800
 8013f28:	200122b4 	.word	0x200122b4
 8013f2c:	200122b6 	.word	0x200122b6

08013f30 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f001 fa2a 	bl	8015394 <_ZN8touchgfx3HAL10beginFrameEv>
 8013f40:	4603      	mov	r3, r0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3708      	adds	r7, #8
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013f4a:	b580      	push	{r7, lr}
 8013f4c:	b082      	sub	sp, #8
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f001 fa29 	bl	80153ac <_ZN8touchgfx3HAL8endFrameEv>
}
 8013f5a:	bf00      	nop
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
	...

08013f64 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013f64:	b480      	push	{r7}
 8013f66:	b083      	sub	sp, #12
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013f6c:	4b03      	ldr	r3, [pc, #12]	@ (8013f7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	370c      	adds	r7, #12
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr
 8013f7c:	40016884 	.word	0x40016884

08013f80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013f80:	b480      	push	{r7}
 8013f82:	b083      	sub	sp, #12
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013f8a:	4a06      	ldr	r2, [pc, #24]	@ (8013fa4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013f90:	4b05      	ldr	r3, [pc, #20]	@ (8013fa8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013f92:	2201      	movs	r2, #1
 8013f94:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8013f96:	bf00      	nop
 8013f98:	370c      	adds	r7, #12
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr
 8013fa2:	bf00      	nop
 8013fa4:	40016884 	.word	0x40016884
 8013fa8:	40016800 	.word	0x40016800

08013fac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6839      	ldr	r1, [r7, #0]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f001 f9b4 	bl	8015328 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013fc0:	bf00      	nop
 8013fc2:	3708      	adds	r7, #8
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
 8013fd4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	68b9      	ldr	r1, [r7, #8]
 8013fde:	f001 fb14 	bl	801560a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013fe2:	4603      	mov	r3, r0
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3710      	adds	r7, #16
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}

08013fec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013ff4:	4b0d      	ldr	r3, [pc, #52]	@ (801402c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ff8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013ffa:	4b0c      	ldr	r3, [pc, #48]	@ (801402c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013ffc:	68db      	ldr	r3, [r3, #12]
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014004:	b29b      	uxth	r3, r3
 8014006:	3301      	adds	r3, #1
 8014008:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 801400a:	89fa      	ldrh	r2, [r7, #14]
 801400c:	89bb      	ldrh	r3, [r7, #12]
 801400e:	429a      	cmp	r2, r3
 8014010:	d304      	bcc.n	801401c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8014012:	89fa      	ldrh	r2, [r7, #14]
 8014014:	89bb      	ldrh	r3, [r7, #12]
 8014016:	1ad3      	subs	r3, r2, r3
 8014018:	b29b      	uxth	r3, r3
 801401a:	e000      	b.n	801401e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 801401c:	2300      	movs	r3, #0
}
 801401e:	4618      	mov	r0, r3
 8014020:	3714      	adds	r7, #20
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	40016800 	.word	0x40016800

08014030 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014038:	4b08      	ldr	r3, [pc, #32]	@ (801405c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 801403a:	695b      	ldr	r3, [r3, #20]
 801403c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014040:	2b00      	cmp	r3, #0
 8014042:	bf14      	ite	ne
 8014044:	2301      	movne	r3, #1
 8014046:	2300      	moveq	r3, #0
 8014048:	b2db      	uxtb	r3, r3
 801404a:	2b00      	cmp	r3, #0
 801404c:	d001      	beq.n	8014052 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 801404e:	f7ff fea1 	bl	8013d94 <SCB_CleanInvalidateDCache>
    }
}
 8014052:	bf00      	nop
 8014054:	3708      	adds	r7, #8
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	e000ed00 	.word	0xe000ed00

08014060 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014068:	4b08      	ldr	r3, [pc, #32]	@ (801408c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014070:	2b00      	cmp	r3, #0
 8014072:	bf14      	ite	ne
 8014074:	2301      	movne	r3, #1
 8014076:	2300      	moveq	r3, #0
 8014078:	b2db      	uxtb	r3, r3
 801407a:	2b00      	cmp	r3, #0
 801407c:	d001      	beq.n	8014082 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 801407e:	f7ff fe89 	bl	8013d94 <SCB_CleanInvalidateDCache>
    }
}
 8014082:	bf00      	nop
 8014084:	3708      	adds	r7, #8
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	e000ed00 	.word	0xe000ed00

08014090 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8014098:	f7f6 fd46 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	bf0c      	ite	eq
 80140a2:	2301      	moveq	r3, #1
 80140a4:	2300      	movne	r3, #0
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d132      	bne.n	8014112 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80140ac:	4b1b      	ldr	r3, [pc, #108]	@ (801411c <HAL_LTDC_LineEventCallback+0x8c>)
 80140ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140b0:	4a1b      	ldr	r2, [pc, #108]	@ (8014120 <HAL_LTDC_LineEventCallback+0x90>)
 80140b2:	8812      	ldrh	r2, [r2, #0]
 80140b4:	4293      	cmp	r3, r2
 80140b6:	bf0c      	ite	eq
 80140b8:	2301      	moveq	r3, #1
 80140ba:	2300      	movne	r3, #0
 80140bc:	b2db      	uxtb	r3, r3
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d017      	beq.n	80140f2 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80140c2:	4b18      	ldr	r3, [pc, #96]	@ (8014124 <HAL_LTDC_LineEventCallback+0x94>)
 80140c4:	881b      	ldrh	r3, [r3, #0]
 80140c6:	4619      	mov	r1, r3
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7ef ffc1 	bl	8004050 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80140ce:	f7f6 fd2b 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 80140d2:	4603      	mov	r3, r0
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7ff fd90 	bl	8013bfa <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80140da:	f7fe fab3 	bl	8012644 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80140de:	f7f6 fd23 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 80140e2:	4603      	mov	r3, r0
 80140e4:	4618      	mov	r0, r3
 80140e6:	f001 febb 	bl	8015e60 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80140ea:	2000      	movs	r0, #0
 80140ec:	f7fd ffb2 	bl	8012054 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80140f0:	e010      	b.n	8014114 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80140f2:	4b0b      	ldr	r3, [pc, #44]	@ (8014120 <HAL_LTDC_LineEventCallback+0x90>)
 80140f4:	881b      	ldrh	r3, [r3, #0]
 80140f6:	4619      	mov	r1, r3
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f7ef ffa9 	bl	8004050 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80140fe:	f7f6 fd13 	bl	800ab28 <_ZN8touchgfx3HAL11getInstanceEv>
 8014102:	4603      	mov	r3, r0
 8014104:	4618      	mov	r0, r3
 8014106:	f7ff fd6a 	bl	8013bde <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801410a:	2000      	movs	r0, #0
 801410c:	f7fd ffbe 	bl	801208c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014110:	e000      	b.n	8014114 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8014112:	bf00      	nop
        }
    }
 8014114:	3708      	adds	r7, #8
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	40016800 	.word	0x40016800
 8014120:	200122b4 	.word	0x200122b4
 8014124:	200122b6 	.word	0x200122b6

08014128 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014128:	8880      	ldrh	r0, [r0, #4]
 801412a:	4770      	bx	lr

0801412c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	6803      	ldr	r3, [r0, #0]
 8014130:	460c      	mov	r4, r1
 8014132:	2100      	movs	r1, #0
 8014134:	4605      	mov	r5, r0
 8014136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014138:	4798      	blx	r3
 801413a:	4606      	mov	r6, r0
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	4628      	mov	r0, r5
 8014140:	1ba4      	subs	r4, r4, r6
 8014142:	6a1b      	ldr	r3, [r3, #32]
 8014144:	b2a4      	uxth	r4, r4
 8014146:	4798      	blx	r3
 8014148:	fbb4 f0f0 	udiv	r0, r4, r0
 801414c:	bd70      	pop	{r4, r5, r6, pc}

0801414e <_ZN8touchgfx17AbstractPartition5clearEv>:
 801414e:	2300      	movs	r3, #0
 8014150:	8083      	strh	r3, [r0, #4]
 8014152:	4770      	bx	lr

08014154 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014154:	b510      	push	{r4, lr}
 8014156:	6803      	ldr	r3, [r0, #0]
 8014158:	4604      	mov	r4, r0
 801415a:	8881      	ldrh	r1, [r0, #4]
 801415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801415e:	4798      	blx	r3
 8014160:	88a3      	ldrh	r3, [r4, #4]
 8014162:	3301      	adds	r3, #1
 8014164:	80a3      	strh	r3, [r4, #4]
 8014166:	bd10      	pop	{r4, pc}

08014168 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014168:	6803      	ldr	r3, [r0, #0]
 801416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801416c:	4718      	bx	r3

0801416e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801416e:	4770      	bx	lr

08014170 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014170:	4a02      	ldr	r2, [pc, #8]	@ (801417c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014172:	6002      	str	r2, [r0, #0]
 8014174:	2200      	movs	r2, #0
 8014176:	8082      	strh	r2, [r0, #4]
 8014178:	4770      	bx	lr
 801417a:	bf00      	nop
 801417c:	08031028 	.word	0x08031028

08014180 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8014180:	b510      	push	{r4, lr}
 8014182:	6803      	ldr	r3, [r0, #0]
 8014184:	4604      	mov	r4, r0
 8014186:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801418a:	4798      	blx	r3
 801418c:	b110      	cbz	r0, 8014194 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 801418e:	4620      	mov	r0, r4
 8014190:	f7f6 fa78 	bl	800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8014194:	bd10      	pop	{r4, pc}

08014196 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 8014196:	30dc      	adds	r0, #220	@ 0xdc
 8014198:	4770      	bx	lr

0801419a <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 801419a:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 801419e:	4770      	bx	lr

080141a0 <_ZNK8touchgfx12TextProgress8getColorEv>:
 80141a0:	f8d0 00e4 	ldr.w	r0, [r0, #228]	@ 0xe4
 80141a4:	4770      	bx	lr

080141a6 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 80141a6:	2902      	cmp	r1, #2
 80141a8:	b570      	push	{r4, r5, r6, lr}
 80141aa:	bf28      	it	cs
 80141ac:	2102      	movcs	r1, #2
 80141ae:	6803      	ldr	r3, [r0, #0]
 80141b0:	4604      	mov	r4, r0
 80141b2:	f8a0 1112 	strh.w	r1, [r0, #274]	@ 0x112
 80141b6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 80141ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80141be:	4798      	blx	r3
 80141c0:	462b      	mov	r3, r5
 80141c2:	4601      	mov	r1, r0
 80141c4:	4620      	mov	r0, r4
 80141c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141ca:	4718      	bx	r3

080141cc <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 80141cc:	f8b0 0112 	ldrh.w	r0, [r0, #274]	@ 0x112
 80141d0:	4770      	bx	lr

080141d2 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 80141d2:	30b4      	adds	r0, #180	@ 0xb4
 80141d4:	f004 ba3a 	b.w	801864c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

080141d8 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4604      	mov	r4, r0
 80141dc:	460d      	mov	r5, r1
 80141de:	f000 fa27 	bl	8014630 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80141e2:	f884 50ea 	strb.w	r5, [r4, #234]	@ 0xea
 80141e6:	bd38      	pop	{r3, r4, r5, pc}

080141e8 <_ZN8touchgfx12TextProgress8setValueEi>:
 80141e8:	b570      	push	{r4, r5, r6, lr}
 80141ea:	f100 05b4 	add.w	r5, r0, #180	@ 0xb4
 80141ee:	4604      	mov	r4, r0
 80141f0:	460e      	mov	r6, r1
 80141f2:	b086      	sub	sp, #24
 80141f4:	4628      	mov	r0, r5
 80141f6:	f7f6 fa45 	bl	800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80141fa:	4631      	mov	r1, r6
 80141fc:	4620      	mov	r0, r4
 80141fe:	f504 7680 	add.w	r6, r4, #256	@ 0x100
 8014202:	f000 fa60 	bl	80146c6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014206:	4b1b      	ldr	r3, [pc, #108]	@ (8014274 <_ZN8touchgfx12TextProgress8setValueEi+0x8c>)
 8014208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801420c:	ab06      	add	r3, sp, #24
 801420e:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8014212:	f8b4 3112 	ldrh.w	r3, [r4, #274]	@ 0x112
 8014216:	aa06      	add	r2, sp, #24
 8014218:	4620      	mov	r0, r4
 801421a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801421e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8014222:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014226:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801422a:	0089      	lsls	r1, r1, #2
 801422c:	b289      	uxth	r1, r1
 801422e:	f000 fa6c 	bl	801470a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014232:	f8b4 1112 	ldrh.w	r1, [r4, #274]	@ 0x112
 8014236:	b1b1      	cbz	r1, 8014266 <_ZN8touchgfx12TextProgress8setValueEi+0x7e>
 8014238:	ab06      	add	r3, sp, #24
 801423a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801423e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8014242:	fb90 f3f2 	sdiv	r3, r0, r2
 8014246:	fb02 0213 	mls	r2, r2, r3, r0
 801424a:	4630      	mov	r0, r6
 801424c:	e9cd 1200 	strd	r1, r2, [sp]
 8014250:	4a09      	ldr	r2, [pc, #36]	@ (8014278 <_ZN8touchgfx12TextProgress8setValueEi+0x90>)
 8014252:	2108      	movs	r1, #8
 8014254:	f00a f87e 	bl	801e354 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014258:	4628      	mov	r0, r5
 801425a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
 801425e:	f7f6 fa11 	bl	800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8014262:	b006      	add	sp, #24
 8014264:	bd70      	pop	{r4, r5, r6, pc}
 8014266:	4603      	mov	r3, r0
 8014268:	4a04      	ldr	r2, [pc, #16]	@ (801427c <_ZN8touchgfx12TextProgress8setValueEi+0x94>)
 801426a:	2108      	movs	r1, #8
 801426c:	4630      	mov	r0, r6
 801426e:	f00a f871 	bl	801e354 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014272:	e7f1      	b.n	8014258 <_ZN8touchgfx12TextProgress8setValueEi+0x70>
 8014274:	0802fe74 	.word	0x0802fe74
 8014278:	08031054 	.word	0x08031054
 801427c:	0803105c 	.word	0x0803105c

08014280 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8014280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014284:	461d      	mov	r5, r3
 8014286:	f100 07b4 	add.w	r7, r0, #180	@ 0xb4
 801428a:	2300      	movs	r3, #0
 801428c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8014290:	4691      	mov	r9, r2
 8014292:	4604      	mov	r4, r0
 8014294:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8014298:	4688      	mov	r8, r1
 801429a:	4638      	mov	r0, r7
 801429c:	4629      	mov	r1, r5
 801429e:	f7fb ffdc 	bl	801025a <_ZN8touchgfx8TextArea8setWidthEs>
 80142a2:	4631      	mov	r1, r6
 80142a4:	4638      	mov	r0, r7
 80142a6:	f7fb fff8 	bl	801029a <_ZN8touchgfx8TextArea9setHeightEs>
 80142aa:	9608      	str	r6, [sp, #32]
 80142ac:	462b      	mov	r3, r5
 80142ae:	464a      	mov	r2, r9
 80142b0:	4641      	mov	r1, r8
 80142b2:	4620      	mov	r0, r4
 80142b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142b8:	f000 ba81 	b.w	80147be <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080142bc <_ZN8touchgfx12TextProgressC1Ev>:
 80142bc:	b510      	push	{r4, lr}
 80142be:	4604      	mov	r4, r0
 80142c0:	f000 faaa 	bl	8014818 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80142c4:	2201      	movs	r2, #1
 80142c6:	4b25      	ldr	r3, [pc, #148]	@ (801435c <_ZN8touchgfx12TextProgressC1Ev+0xa0>)
 80142c8:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 80142cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80142d0:	f884 20d9 	strb.w	r2, [r4, #217]	@ 0xd9
 80142d4:	4a22      	ldr	r2, [pc, #136]	@ (8014360 <_ZN8touchgfx12TextProgressC1Ev+0xa4>)
 80142d6:	6023      	str	r3, [r4, #0]
 80142d8:	2300      	movs	r3, #0
 80142da:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
 80142de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80142e2:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 80142e6:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 80142ea:	f8a4 20e0 	strh.w	r2, [r4, #224]	@ 0xe0
 80142ee:	f8a4 20f4 	strh.w	r2, [r4, #244]	@ 0xf4
 80142f2:	f8a4 20f6 	strh.w	r2, [r4, #246]	@ 0xf6
 80142f6:	4a1b      	ldr	r2, [pc, #108]	@ (8014364 <_ZN8touchgfx12TextProgressC1Ev+0xa8>)
 80142f8:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 80142fc:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
 8014300:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8014304:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8014308:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 801430c:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8014310:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8014314:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8014318:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 801431c:	f8a4 30d4 	strh.w	r3, [r4, #212]	@ 0xd4
 8014320:	f8a4 30d6 	strh.w	r3, [r4, #214]	@ 0xd6
 8014324:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
 8014328:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 801432c:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 8014330:	f884 30ed 	strb.w	r3, [r4, #237]	@ 0xed
 8014334:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
 8014338:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 801433c:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 8014340:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
 8014344:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
 8014348:	f8a4 3112 	strh.w	r3, [r4, #274]	@ 0x112
 801434c:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8014350:	e9c4 3332 	strd	r3, r3, [r4, #200]	@ 0xc8
 8014354:	f000 fac0 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014358:	4620      	mov	r0, r4
 801435a:	bd10      	pop	{r4, pc}
 801435c:	080310d8 	.word	0x080310d8
 8014360:	0802ff08 	.word	0x0802ff08
 8014364:	080308c0 	.word	0x080308c0

08014368 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014368:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
 801436c:	4770      	bx	lr

0801436e <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801436e:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
 8014372:	4770      	bx	lr

08014374 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014374:	b538      	push	{r3, r4, r5, lr}
 8014376:	4604      	mov	r4, r0
 8014378:	460d      	mov	r5, r1
 801437a:	f000 f959 	bl	8014630 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801437e:	f884 50de 	strb.w	r5, [r4, #222]	@ 0xde
 8014382:	bd38      	pop	{r3, r4, r5, pc}

08014384 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8014384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014388:	4617      	mov	r7, r2
 801438a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801438e:	2200      	movs	r2, #0
 8014390:	4604      	mov	r4, r0
 8014392:	460e      	mov	r6, r1
 8014394:	4698      	mov	r8, r3
 8014396:	4611      	mov	r1, r2
 8014398:	9500      	str	r5, [sp, #0]
 801439a:	30b8      	adds	r0, #184	@ 0xb8
 801439c:	f7f6 f99c 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80143a0:	4643      	mov	r3, r8
 80143a2:	463a      	mov	r2, r7
 80143a4:	4631      	mov	r1, r6
 80143a6:	4620      	mov	r0, r4
 80143a8:	9508      	str	r5, [sp, #32]
 80143aa:	b002      	add	sp, #8
 80143ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	f000 ba05 	b.w	80147be <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080143b4 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80143b4:	b530      	push	{r4, r5, lr}
 80143b6:	4604      	mov	r4, r0
 80143b8:	b085      	sub	sp, #20
 80143ba:	f000 f984 	bl	80146c6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80143be:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 80143c2:	2b03      	cmp	r3, #3
 80143c4:	d814      	bhi.n	80143f0 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 80143c6:	e8df f003 	tbb	[pc, r3]
 80143ca:	0202      	.short	0x0202
 80143cc:	1010      	.short	0x1010
 80143ce:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80143d2:	4620      	mov	r0, r4
 80143d4:	f000 f999 	bl	801470a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80143d8:	b200      	sxth	r0, r0
 80143da:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 80143de:	2b03      	cmp	r3, #3
 80143e0:	d830      	bhi.n	8014444 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 80143e2:	e8df f003 	tbb	[pc, r3]
 80143e6:	3107      	.short	0x3107
 80143e8:	6442      	.short	0x6442
 80143ea:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 80143ee:	e7f0      	b.n	80143d2 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 80143f0:	2000      	movs	r0, #0
 80143f2:	e7f2      	b.n	80143da <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80143f4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 80143f8:	2200      	movs	r2, #0
 80143fa:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	4611      	mov	r1, r2
 8014402:	4603      	mov	r3, r0
 8014404:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8014408:	f7f6 f966 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801440c:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 8014410:	4629      	mov	r1, r5
 8014412:	429d      	cmp	r5, r3
 8014414:	eba5 0503 	sub.w	r5, r5, r3
 8014418:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 801441c:	bfa8      	it	ge
 801441e:	4619      	movge	r1, r3
 8014420:	2d00      	cmp	r5, #0
 8014422:	f8ad 200e 	strh.w	r2, [sp, #14]
 8014426:	f8ad 1008 	strh.w	r1, [sp, #8]
 801442a:	f04f 0100 	mov.w	r1, #0
 801442e:	bfb8      	it	lt
 8014430:	426d      	neglt	r5, r5
 8014432:	f8ad 100a 	strh.w	r1, [sp, #10]
 8014436:	f8ad 500c 	strh.w	r5, [sp, #12]
 801443a:	a902      	add	r1, sp, #8
 801443c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014440:	f007 ff5a 	bl	801c2f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8014444:	b005      	add	sp, #20
 8014446:	bd30      	pop	{r4, r5, pc}
 8014448:	8921      	ldrh	r1, [r4, #8]
 801444a:	2200      	movs	r2, #0
 801444c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8014450:	1a09      	subs	r1, r1, r0
 8014452:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	@ 0xbc
 8014456:	9300      	str	r3, [sp, #0]
 8014458:	4603      	mov	r3, r0
 801445a:	b209      	sxth	r1, r1
 801445c:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8014460:	f7f6 f93a 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014464:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 8014468:	e7d2      	b.n	8014410 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 801446a:	2200      	movs	r2, #0
 801446c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8014470:	9000      	str	r0, [sp, #0]
 8014472:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8014476:	4611      	mov	r1, r2
 8014478:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
 801447c:	f7f6 f92c 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014480:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 8014484:	2100      	movs	r1, #0
 8014486:	429d      	cmp	r5, r3
 8014488:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 801448c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014490:	4629      	mov	r1, r5
 8014492:	eba5 0503 	sub.w	r5, r5, r3
 8014496:	bfa8      	it	ge
 8014498:	4619      	movge	r1, r3
 801449a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801449e:	2d00      	cmp	r5, #0
 80144a0:	f8ad 100a 	strh.w	r1, [sp, #10]
 80144a4:	bfb8      	it	lt
 80144a6:	426d      	neglt	r5, r5
 80144a8:	f8ad 500e 	strh.w	r5, [sp, #14]
 80144ac:	e7c5      	b.n	801443a <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 80144ae:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 80144b2:	2100      	movs	r1, #0
 80144b4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80144b8:	1a12      	subs	r2, r2, r0
 80144ba:	9000      	str	r0, [sp, #0]
 80144bc:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80144c0:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	@ 0xbe
 80144c4:	b212      	sxth	r2, r2
 80144c6:	f7f6 f907 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80144ca:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 80144ce:	e7d9      	b.n	8014484 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

080144d0 <_ZN8touchgfx11BoxProgressC1Ev>:
 80144d0:	b510      	push	{r4, lr}
 80144d2:	4604      	mov	r4, r0
 80144d4:	f000 f852 	bl	801457c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80144d8:	2201      	movs	r2, #1
 80144da:	4b17      	ldr	r3, [pc, #92]	@ (8014538 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 80144dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80144e0:	f104 01b8 	add.w	r1, r4, #184	@ 0xb8
 80144e4:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
 80144e8:	4a14      	ldr	r2, [pc, #80]	@ (801453c <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 80144ea:	6023      	str	r3, [r4, #0]
 80144ec:	2300      	movs	r3, #0
 80144ee:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 80144f2:	22ff      	movs	r2, #255	@ 0xff
 80144f4:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 80144f8:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 80144fc:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8014500:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8014504:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8014508:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 801450c:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 8014510:	f8a4 30ca 	strh.w	r3, [r4, #202]	@ 0xca
 8014514:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8014518:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 801451c:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
 8014520:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
 8014524:	f884 20de 	strb.w	r2, [r4, #222]	@ 0xde
 8014528:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 801452c:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 8014530:	f000 f9d2 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014534:	4620      	mov	r0, r4
 8014536:	bd10      	pop	{r4, pc}
 8014538:	080311c4 	.word	0x080311c4
 801453c:	080320a4 	.word	0x080320a4

08014540 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8014540:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 8014544:	4770      	bx	lr

08014546 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 8014546:	b570      	push	{r4, r5, r6, lr}
 8014548:	4604      	mov	r4, r0
 801454a:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 801454e:	3058      	adds	r0, #88	@ 0x58
 8014550:	f007 fe81 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014554:	6823      	ldr	r3, [r4, #0]
 8014556:	4620      	mov	r0, r4
 8014558:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 801455c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014560:	4798      	blx	r3
 8014562:	462b      	mov	r3, r5
 8014564:	4601      	mov	r1, r0
 8014566:	4620      	mov	r0, r4
 8014568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801456c:	4718      	bx	r3

0801456e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801456e:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 8014572:	428b      	cmp	r3, r1
 8014574:	d001      	beq.n	801457a <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 8014576:	f7ff bfe6 	b.w	8014546 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 801457a:	4770      	bx	lr

0801457c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801457c:	b510      	push	{r4, lr}
 801457e:	4604      	mov	r4, r0
 8014580:	f000 f94a 	bl	8014818 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014584:	4b03      	ldr	r3, [pc, #12]	@ (8014594 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8014586:	4620      	mov	r0, r4
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	2300      	movs	r3, #0
 801458c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8014590:	bd10      	pop	{r4, pc}
 8014592:	bf00      	nop
 8014594:	080312a8 	.word	0x080312a8

08014598 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8014598:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 801459c:	4770      	bx	lr

0801459e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801459e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 80145a2:	4770      	bx	lr

080145a4 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80145a4:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 80145a8:	4770      	bx	lr

080145aa <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80145aa:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 80145ae:	4770      	bx	lr

080145b0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 80145b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b2:	461e      	mov	r6, r3
 80145b4:	6803      	ldr	r3, [r0, #0]
 80145b6:	460f      	mov	r7, r1
 80145b8:	4604      	mov	r4, r0
 80145ba:	4615      	mov	r5, r2
 80145bc:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 80145c0:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 80145c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80145c8:	4798      	blx	r3
 80145ca:	b93e      	cbnz	r6, 80145dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 80145cc:	1bed      	subs	r5, r5, r7
 80145ce:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 80145d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80145d6:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 80145da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145dc:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 80145e0:	e7f7      	b.n	80145d2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

080145e2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 80145e2:	b510      	push	{r4, lr}
 80145e4:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 80145e8:	600c      	str	r4, [r1, #0]
 80145ea:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80145ee:	6011      	str	r1, [r2, #0]
 80145f0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80145f4:	801a      	strh	r2, [r3, #0]
 80145f6:	9b02      	ldr	r3, [sp, #8]
 80145f8:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 80145fc:	801a      	strh	r2, [r3, #0]
 80145fe:	bd10      	pop	{r4, pc}

08014600 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8014600:	b510      	push	{r4, lr}
 8014602:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8014606:	600c      	str	r4, [r1, #0]
 8014608:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 801460c:	6011      	str	r1, [r2, #0]
 801460e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8014612:	801a      	strh	r2, [r3, #0]
 8014614:	bd10      	pop	{r4, pc}

08014616 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8014616:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 801461a:	600b      	str	r3, [r1, #0]
 801461c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8014620:	6013      	str	r3, [r2, #0]
 8014622:	4770      	bx	lr

08014624 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8014624:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8014628:	4770      	bx	lr

0801462a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801462a:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 801462e:	4770      	bx	lr

08014630 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8014630:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 8014634:	4770      	bx	lr

08014636 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8014636:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 801463a:	4770      	bx	lr

0801463c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 801463c:	b570      	push	{r4, r5, r6, lr}
 801463e:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 8014642:	4604      	mov	r4, r0
 8014644:	4616      	mov	r6, r2
 8014646:	428d      	cmp	r5, r1
 8014648:	bfb8      	it	lt
 801464a:	460d      	movlt	r5, r1
 801464c:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8014650:	428d      	cmp	r5, r1
 8014652:	bfa8      	it	ge
 8014654:	460d      	movge	r5, r1
 8014656:	b99a      	cbnz	r2, 8014680 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8014658:	6803      	ldr	r3, [r0, #0]
 801465a:	4629      	mov	r1, r5
 801465c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014660:	4798      	blx	r3
 8014662:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8014666:	b368      	cbz	r0, 80146c4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8014668:	6803      	ldr	r3, [r0, #0]
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	4798      	blx	r3
 801466e:	b348      	cbz	r0, 80146c4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8014670:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8014674:	4621      	mov	r1, r4
 8014676:	6803      	ldr	r3, [r0, #0]
 8014678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	4718      	bx	r3
 8014680:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8014684:	2b00      	cmp	r3, #0
 8014686:	dd08      	ble.n	801469a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8014688:	f006 fcfa 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 801468c:	4621      	mov	r1, r4
 801468e:	3004      	adds	r0, #4
 8014690:	f006 fd43 	bl	801b11a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8014694:	2300      	movs	r3, #0
 8014696:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	4620      	mov	r0, r4
 801469e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80146a2:	4798      	blx	r3
 80146a4:	2300      	movs	r3, #0
 80146a6:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 80146aa:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 80146ae:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 80146b2:	f006 fce5 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 80146b6:	4621      	mov	r1, r4
 80146b8:	3004      	adds	r0, #4
 80146ba:	f006 fdd7 	bl	801b26c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80146be:	2301      	movs	r3, #1
 80146c0:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 80146c4:	bd70      	pop	{r4, r5, r6, pc}

080146c6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80146c6:	b510      	push	{r4, lr}
 80146c8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80146cc:	4604      	mov	r4, r0
 80146ce:	4299      	cmp	r1, r3
 80146d0:	bfb8      	it	lt
 80146d2:	4619      	movlt	r1, r3
 80146d4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80146d8:	4299      	cmp	r1, r3
 80146da:	bfa8      	it	ge
 80146dc:	4619      	movge	r1, r3
 80146de:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80146e2:	428b      	cmp	r3, r1
 80146e4:	d010      	beq.n	8014708 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80146e6:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 80146ea:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 80146ee:	b158      	cbz	r0, 8014708 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80146f0:	6803      	ldr	r3, [r0, #0]
 80146f2:	68db      	ldr	r3, [r3, #12]
 80146f4:	4798      	blx	r3
 80146f6:	b138      	cbz	r0, 8014708 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80146f8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80146fc:	4621      	mov	r1, r4
 80146fe:	6803      	ldr	r3, [r0, #0]
 8014700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014704:	689b      	ldr	r3, [r3, #8]
 8014706:	4718      	bx	r3
 8014708:	bd10      	pop	{r4, pc}

0801470a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801470a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801470c:	4604      	mov	r4, r0
 801470e:	460d      	mov	r5, r1
 8014710:	b1a9      	cbz	r1, 801473e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8014712:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 8014716:	ab01      	add	r3, sp, #4
 8014718:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 801471c:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 8014720:	1b89      	subs	r1, r1, r6
 8014722:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 8014726:	1a12      	subs	r2, r2, r0
 8014728:	1a38      	subs	r0, r7, r0
 801472a:	f007 ff3f 	bl	801c5ac <_ZN8touchgfx6muldivElllRl>
 801472e:	4629      	mov	r1, r5
 8014730:	ab01      	add	r3, sp, #4
 8014732:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 8014736:	4430      	add	r0, r6
 8014738:	f007 ff38 	bl	801c5ac <_ZN8touchgfx6muldivElllRl>
 801473c:	b285      	uxth	r5, r0
 801473e:	4628      	mov	r0, r5
 8014740:	b003      	add	sp, #12
 8014742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014744 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8014744:	b570      	push	{r4, r5, r6, lr}
 8014746:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 801474a:	4604      	mov	r4, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d035      	beq.n	80147bc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8014750:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 8014754:	2100      	movs	r1, #0
 8014756:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 801475a:	3001      	adds	r0, #1
 801475c:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 8014760:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 8014764:	b280      	uxth	r0, r0
 8014766:	1ad2      	subs	r2, r2, r3
 8014768:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801476c:	b212      	sxth	r2, r2
 801476e:	47a8      	blx	r5
 8014770:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8014774:	6823      	ldr	r3, [r4, #0]
 8014776:	4401      	add	r1, r0
 8014778:	4620      	mov	r0, r4
 801477a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801477e:	4798      	blx	r3
 8014780:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8014784:	429a      	cmp	r2, r3
 8014786:	db19      	blt.n	80147bc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8014788:	2500      	movs	r5, #0
 801478a:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 801478e:	f006 fc77 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 8014792:	4621      	mov	r1, r4
 8014794:	3004      	adds	r0, #4
 8014796:	f006 fcc0 	bl	801b11a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801479a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801479e:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80147a2:	b158      	cbz	r0, 80147bc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80147a4:	6803      	ldr	r3, [r0, #0]
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	4798      	blx	r3
 80147aa:	b138      	cbz	r0, 80147bc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80147ac:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80147b0:	4621      	mov	r1, r4
 80147b2:	6803      	ldr	r3, [r0, #0]
 80147b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147b8:	689b      	ldr	r3, [r3, #8]
 80147ba:	4718      	bx	r3
 80147bc:	bd70      	pop	{r4, r5, r6, pc}

080147be <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80147be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147c2:	4604      	mov	r4, r0
 80147c4:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80147c8:	4698      	mov	r8, r3
 80147ca:	460e      	mov	r6, r1
 80147cc:	4615      	mov	r5, r2
 80147ce:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 80147d2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80147d6:	4619      	mov	r1, r3
 80147d8:	463a      	mov	r2, r7
 80147da:	3058      	adds	r0, #88	@ 0x58
 80147dc:	f7f6 f831 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80147e0:	4446      	add	r6, r8
 80147e2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80147e6:	443d      	add	r5, r7
 80147e8:	42b3      	cmp	r3, r6
 80147ea:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80147ee:	bfb8      	it	lt
 80147f0:	8126      	strhlt	r6, [r4, #8]
 80147f2:	42ab      	cmp	r3, r5
 80147f4:	bfb8      	it	lt
 80147f6:	8165      	strhlt	r5, [r4, #10]
 80147f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147fc <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80147fc:	b510      	push	{r4, lr}
 80147fe:	4604      	mov	r4, r0
 8014800:	302c      	adds	r0, #44	@ 0x2c
 8014802:	f004 f895 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014806:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 801480a:	4620      	mov	r0, r4
 801480c:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8014810:	f7f6 f817 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014814:	bd10      	pop	{r4, pc}
	...

08014818 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8014818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801481a:	4604      	mov	r4, r0
 801481c:	2500      	movs	r5, #0
 801481e:	f7f5 fee1 	bl	800a5e4 <_ZN8touchgfx8DrawableC1Ev>
 8014822:	4b24      	ldr	r3, [pc, #144]	@ (80148b4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8014824:	4626      	mov	r6, r4
 8014826:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801482a:	2226      	movs	r2, #38	@ 0x26
 801482c:	4629      	mov	r1, r5
 801482e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8014830:	f846 3b2c 	str.w	r3, [r6], #44
 8014834:	4630      	mov	r0, r6
 8014836:	f8ad 7004 	strh.w	r7, [sp, #4]
 801483a:	f019 fbf7 	bl	802e02c <memset>
 801483e:	4630      	mov	r0, r6
 8014840:	f7f5 fed0 	bl	800a5e4 <_ZN8touchgfx8DrawableC1Ev>
 8014844:	a902      	add	r1, sp, #8
 8014846:	4b1c      	ldr	r3, [pc, #112]	@ (80148b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8014848:	4630      	mov	r0, r6
 801484a:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 801484e:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8014852:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014854:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8014858:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 801485c:	f004 f868 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014860:	4638      	mov	r0, r7
 8014862:	f7f5 febf 	bl	800a5e4 <_ZN8touchgfx8DrawableC1Ev>
 8014866:	4b15      	ldr	r3, [pc, #84]	@ (80148bc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8014868:	4629      	mov	r1, r5
 801486a:	4630      	mov	r0, r6
 801486c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801486e:	2364      	movs	r3, #100	@ 0x64
 8014870:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8014874:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8014878:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 801487c:	4b10      	ldr	r3, [pc, #64]	@ (80148c0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 801487e:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 8014882:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8014886:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 801488a:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 801488e:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8014892:	f7f5 ff5c 	bl	800a74e <_ZN8touchgfx8Drawable4setXEs>
 8014896:	4629      	mov	r1, r5
 8014898:	4630      	mov	r0, r6
 801489a:	f7f5 ff67 	bl	800a76c <_ZN8touchgfx8Drawable4setYEs>
 801489e:	4631      	mov	r1, r6
 80148a0:	4620      	mov	r0, r4
 80148a2:	f000 f819 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80148a6:	4620      	mov	r0, r4
 80148a8:	4639      	mov	r1, r7
 80148aa:	f000 f815 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80148ae:	4620      	mov	r0, r4
 80148b0:	b003      	add	sp, #12
 80148b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148b4:	08031384 	.word	0x08031384
 80148b8:	08032210 	.word	0x08032210
 80148bc:	08031458 	.word	0x08031458
 80148c0:	0801ccfb 	.word	0x0801ccfb

080148c4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80148c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80148c6:	2000      	movs	r0, #0
 80148c8:	b12b      	cbz	r3, 80148d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80148ca:	b920      	cbnz	r0, 80148d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80148cc:	1a5a      	subs	r2, r3, r1
 80148ce:	699b      	ldr	r3, [r3, #24]
 80148d0:	4250      	negs	r0, r2
 80148d2:	4150      	adcs	r0, r2
 80148d4:	e7f8      	b.n	80148c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80148d6:	4770      	bx	lr

080148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80148d8:	2300      	movs	r3, #0
 80148da:	6148      	str	r0, [r1, #20]
 80148dc:	618b      	str	r3, [r1, #24]
 80148de:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80148e0:	b913      	cbnz	r3, 80148e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80148e2:	6281      	str	r1, [r0, #40]	@ 0x28
 80148e4:	4770      	bx	lr
 80148e6:	4613      	mov	r3, r2
 80148e8:	699a      	ldr	r2, [r3, #24]
 80148ea:	2a00      	cmp	r2, #0
 80148ec:	d1fb      	bne.n	80148e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80148ee:	6199      	str	r1, [r3, #24]
 80148f0:	4770      	bx	lr

080148f2 <_ZN8touchgfx9Container9removeAllEv>:
 80148f2:	2200      	movs	r2, #0
 80148f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80148f6:	b123      	cbz	r3, 8014902 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80148f8:	6999      	ldr	r1, [r3, #24]
 80148fa:	6281      	str	r1, [r0, #40]	@ 0x28
 80148fc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014900:	e7f8      	b.n	80148f4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014902:	4770      	bx	lr

08014904 <_ZN8touchgfx9Container6unlinkEv>:
 8014904:	2300      	movs	r3, #0
 8014906:	6283      	str	r3, [r0, #40]	@ 0x28
 8014908:	4770      	bx	lr

0801490a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801490a:	2200      	movs	r2, #0
 801490c:	8002      	strh	r2, [r0, #0]
 801490e:	8042      	strh	r2, [r0, #2]
 8014910:	8082      	strh	r2, [r0, #4]
 8014912:	80c2      	strh	r2, [r0, #6]
 8014914:	4770      	bx	lr

08014916 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014916:	b570      	push	{r4, r5, r6, lr}
 8014918:	460d      	mov	r5, r1
 801491a:	4616      	mov	r6, r2
 801491c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801491e:	b13c      	cbz	r4, 8014930 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014920:	6823      	ldr	r3, [r4, #0]
 8014922:	4620      	mov	r0, r4
 8014924:	4632      	mov	r2, r6
 8014926:	4629      	mov	r1, r5
 8014928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801492a:	4798      	blx	r3
 801492c:	69a4      	ldr	r4, [r4, #24]
 801492e:	e7f6      	b.n	801491e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014930:	bd70      	pop	{r4, r5, r6, pc}

08014932 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014932:	b538      	push	{r3, r4, r5, lr}
 8014934:	460d      	mov	r5, r1
 8014936:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014938:	b134      	cbz	r4, 8014948 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801493a:	682b      	ldr	r3, [r5, #0]
 801493c:	4621      	mov	r1, r4
 801493e:	4628      	mov	r0, r5
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	4798      	blx	r3
 8014944:	69a4      	ldr	r4, [r4, #24]
 8014946:	e7f7      	b.n	8014938 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014948:	bd38      	pop	{r3, r4, r5, pc}

0801494a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801494a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801494c:	b19b      	cbz	r3, 8014976 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801494e:	428b      	cmp	r3, r1
 8014950:	d109      	bne.n	8014966 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014952:	699a      	ldr	r2, [r3, #24]
 8014954:	2100      	movs	r1, #0
 8014956:	6159      	str	r1, [r3, #20]
 8014958:	6282      	str	r2, [r0, #40]	@ 0x28
 801495a:	b902      	cbnz	r2, 801495e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801495c:	4770      	bx	lr
 801495e:	6199      	str	r1, [r3, #24]
 8014960:	4770      	bx	lr
 8014962:	4613      	mov	r3, r2
 8014964:	b13a      	cbz	r2, 8014976 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014966:	699a      	ldr	r2, [r3, #24]
 8014968:	428a      	cmp	r2, r1
 801496a:	d1fa      	bne.n	8014962 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801496c:	698a      	ldr	r2, [r1, #24]
 801496e:	619a      	str	r2, [r3, #24]
 8014970:	2300      	movs	r3, #0
 8014972:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014976:	4770      	bx	lr

08014978 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014978:	b410      	push	{r4}
 801497a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801497c:	4604      	mov	r4, r0
 801497e:	b92b      	cbnz	r3, 801498c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014980:	6803      	ldr	r3, [r0, #0]
 8014982:	4611      	mov	r1, r2
 8014984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801498a:	4718      	bx	r3
 801498c:	b941      	cbnz	r1, 80149a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801498e:	6193      	str	r3, [r2, #24]
 8014990:	6282      	str	r2, [r0, #40]	@ 0x28
 8014992:	6154      	str	r4, [r2, #20]
 8014994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014998:	4770      	bx	lr
 801499a:	4603      	mov	r3, r0
 801499c:	2800      	cmp	r0, #0
 801499e:	d0f9      	beq.n	8014994 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80149a0:	4299      	cmp	r1, r3
 80149a2:	6998      	ldr	r0, [r3, #24]
 80149a4:	d1f9      	bne.n	801499a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80149a6:	6190      	str	r0, [r2, #24]
 80149a8:	618a      	str	r2, [r1, #24]
 80149aa:	e7f2      	b.n	8014992 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080149ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80149ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b0:	461f      	mov	r7, r3
 80149b2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80149b6:	460d      	mov	r5, r1
 80149b8:	4616      	mov	r6, r2
 80149ba:	b103      	cbz	r3, 80149be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80149bc:	6038      	str	r0, [r7, #0]
 80149be:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80149c0:	b314      	cbz	r4, 8014a08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80149c2:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80149c6:	b1eb      	cbz	r3, 8014a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80149c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80149cc:	428d      	cmp	r5, r1
 80149ce:	db19      	blt.n	8014a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80149d0:	b289      	uxth	r1, r1
 80149d2:	8923      	ldrh	r3, [r4, #8]
 80149d4:	440b      	add	r3, r1
 80149d6:	b21b      	sxth	r3, r3
 80149d8:	429d      	cmp	r5, r3
 80149da:	da13      	bge.n	8014a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80149dc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80149e0:	4296      	cmp	r6, r2
 80149e2:	db0f      	blt.n	8014a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80149e4:	b292      	uxth	r2, r2
 80149e6:	8963      	ldrh	r3, [r4, #10]
 80149e8:	4413      	add	r3, r2
 80149ea:	b21b      	sxth	r3, r3
 80149ec:	429e      	cmp	r6, r3
 80149ee:	da09      	bge.n	8014a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80149f0:	6823      	ldr	r3, [r4, #0]
 80149f2:	1ab2      	subs	r2, r6, r2
 80149f4:	1a69      	subs	r1, r5, r1
 80149f6:	4620      	mov	r0, r4
 80149f8:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80149fc:	b212      	sxth	r2, r2
 80149fe:	463b      	mov	r3, r7
 8014a00:	b209      	sxth	r1, r1
 8014a02:	47c0      	blx	r8
 8014a04:	69a4      	ldr	r4, [r4, #24]
 8014a06:	e7db      	b.n	80149c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a10:	4c6d      	ldr	r4, [pc, #436]	@ (8014bc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8014a12:	b0a1      	sub	sp, #132	@ 0x84
 8014a14:	4606      	mov	r6, r0
 8014a16:	6824      	ldr	r4, [r4, #0]
 8014a18:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014a1a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8014a1e:	2400      	movs	r4, #0
 8014a20:	9303      	str	r3, [sp, #12]
 8014a22:	802c      	strh	r4, [r5, #0]
 8014a24:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8014a26:	802c      	strh	r4, [r5, #0]
 8014a28:	601c      	str	r4, [r3, #0]
 8014a2a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014a2e:	f7ff ffbd 	bl	80149ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014a32:	f1b9 0f03 	cmp.w	r9, #3
 8014a36:	f340 80c1 	ble.w	8014bbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014a3a:	4631      	mov	r1, r6
 8014a3c:	a80c      	add	r0, sp, #48	@ 0x30
 8014a3e:	f007 fca5 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a42:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8014a46:	9306      	str	r3, [sp, #24]
 8014a48:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014a4c:	9307      	str	r3, [sp, #28]
 8014a4e:	9b03      	ldr	r3, [sp, #12]
 8014a50:	f8d3 a000 	ldr.w	sl, [r3]
 8014a54:	f1ba 0f00 	cmp.w	sl, #0
 8014a58:	f000 80b3 	beq.w	8014bc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014a5c:	4651      	mov	r1, sl
 8014a5e:	a810      	add	r0, sp, #64	@ 0x40
 8014a60:	f007 fc94 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a64:	2002      	movs	r0, #2
 8014a66:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8014a6a:	9b01      	ldr	r3, [sp, #4]
 8014a6c:	9a06      	ldr	r2, [sp, #24]
 8014a6e:	fb91 f1f0 	sdiv	r1, r1, r0
 8014a72:	189d      	adds	r5, r3, r2
 8014a74:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8014a78:	9a07      	ldr	r2, [sp, #28]
 8014a7a:	4419      	add	r1, r3
 8014a7c:	9b02      	ldr	r3, [sp, #8]
 8014a7e:	4413      	add	r3, r2
 8014a80:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8014a84:	1a6d      	subs	r5, r5, r1
 8014a86:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8014a8a:	fb92 f2f0 	sdiv	r2, r2, r0
 8014a8e:	440a      	add	r2, r1
 8014a90:	1a9b      	subs	r3, r3, r2
 8014a92:	435b      	muls	r3, r3
 8014a94:	fb05 3505 	mla	r5, r5, r5, r3
 8014a98:	4f4c      	ldr	r7, [pc, #304]	@ (8014bcc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8014a9a:	ac10      	add	r4, sp, #64	@ 0x40
 8014a9c:	f1b9 0f0c 	cmp.w	r9, #12
 8014aa0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014aa4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014aa8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014aac:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ab4:	f04f 0303 	mov.w	r3, #3
 8014ab8:	bfd8      	it	le
 8014aba:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014abe:	f04f 0400 	mov.w	r4, #0
 8014ac2:	f8cd 9000 	str.w	r9, [sp]
 8014ac6:	bfcc      	ite	gt
 8014ac8:	4698      	movgt	r8, r3
 8014aca:	fb92 f8f3 	sdivle	r8, r2, r3
 8014ace:	1c63      	adds	r3, r4, #1
 8014ad0:	aa10      	add	r2, sp, #64	@ 0x40
 8014ad2:	f004 0401 	and.w	r4, r4, #1
 8014ad6:	f04f 0b00 	mov.w	fp, #0
 8014ada:	9308      	str	r3, [sp, #32]
 8014adc:	9b00      	ldr	r3, [sp, #0]
 8014ade:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014ae2:	fb93 f3f8 	sdiv	r3, r3, r8
 8014ae6:	3404      	adds	r4, #4
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	9304      	str	r3, [sp, #16]
 8014aec:	9a04      	ldr	r2, [sp, #16]
 8014aee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014af2:	fb13 f302 	smulbb	r3, r3, r2
 8014af6:	9a01      	ldr	r2, [sp, #4]
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	1899      	adds	r1, r3, r2
 8014afc:	9305      	str	r3, [sp, #20]
 8014afe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014b02:	b209      	sxth	r1, r1
 8014b04:	4299      	cmp	r1, r3
 8014b06:	db4d      	blt.n	8014ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014b08:	8932      	ldrh	r2, [r6, #8]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	b21b      	sxth	r3, r3
 8014b0e:	4299      	cmp	r1, r3
 8014b10:	da48      	bge.n	8014ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014b12:	9b04      	ldr	r3, [sp, #16]
 8014b14:	6827      	ldr	r7, [r4, #0]
 8014b16:	fb17 f703 	smulbb	r7, r7, r3
 8014b1a:	9b02      	ldr	r3, [sp, #8]
 8014b1c:	b2bf      	uxth	r7, r7
 8014b1e:	18fa      	adds	r2, r7, r3
 8014b20:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014b24:	b212      	sxth	r2, r2
 8014b26:	429a      	cmp	r2, r3
 8014b28:	db3c      	blt.n	8014ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014b2a:	8970      	ldrh	r0, [r6, #10]
 8014b2c:	4403      	add	r3, r0
 8014b2e:	b21b      	sxth	r3, r3
 8014b30:	429a      	cmp	r2, r3
 8014b32:	da37      	bge.n	8014ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014b34:	2300      	movs	r3, #0
 8014b36:	4630      	mov	r0, r6
 8014b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014b3a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8014b3c:	f7ff ff36 	bl	80149ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014b40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014b42:	b37a      	cbz	r2, 8014ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014b44:	4552      	cmp	r2, sl
 8014b46:	d02d      	beq.n	8014ba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014b48:	4611      	mov	r1, r2
 8014b4a:	a80e      	add	r0, sp, #56	@ 0x38
 8014b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b4e:	f007 fc1d 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014b52:	f04f 0e02 	mov.w	lr, #2
 8014b56:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8014b5a:	9a06      	ldr	r2, [sp, #24]
 8014b5c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8014b60:	9b01      	ldr	r3, [sp, #4]
 8014b62:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8014b66:	4413      	add	r3, r2
 8014b68:	9a07      	ldr	r2, [sp, #28]
 8014b6a:	fb91 f1fe 	sdiv	r1, r1, lr
 8014b6e:	fb9c fcfe 	sdiv	ip, ip, lr
 8014b72:	4401      	add	r1, r0
 8014b74:	1a58      	subs	r0, r3, r1
 8014b76:	9b02      	ldr	r3, [sp, #8]
 8014b78:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8014b7c:	4413      	add	r3, r2
 8014b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b80:	448c      	add	ip, r1
 8014b82:	eba3 030c 	sub.w	r3, r3, ip
 8014b86:	435b      	muls	r3, r3
 8014b88:	fb00 3300 	mla	r3, r0, r0, r3
 8014b8c:	42ab      	cmp	r3, r5
 8014b8e:	d208      	bcs.n	8014ba2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8014b90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014b92:	461d      	mov	r5, r3
 8014b94:	9803      	ldr	r0, [sp, #12]
 8014b96:	6001      	str	r1, [r0, #0]
 8014b98:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8014b9a:	9805      	ldr	r0, [sp, #20]
 8014b9c:	8008      	strh	r0, [r1, #0]
 8014b9e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014ba0:	800f      	strh	r7, [r1, #0]
 8014ba2:	4692      	mov	sl, r2
 8014ba4:	f10b 0b01 	add.w	fp, fp, #1
 8014ba8:	3408      	adds	r4, #8
 8014baa:	f1bb 0f04 	cmp.w	fp, #4
 8014bae:	d19d      	bne.n	8014aec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8014bb0:	9b00      	ldr	r3, [sp, #0]
 8014bb2:	9c08      	ldr	r4, [sp, #32]
 8014bb4:	444b      	add	r3, r9
 8014bb6:	4544      	cmp	r4, r8
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	d188      	bne.n	8014ace <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8014bbc:	b021      	add	sp, #132	@ 0x84
 8014bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc2:	f04f 35ff 	mov.w	r5, #4294967295
 8014bc6:	e767      	b.n	8014a98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014bc8:	200122c4 	.word	0x200122c4
 8014bcc:	0802fe80 	.word	0x0802fe80

08014bd0 <_ZN8touchgfx4RectaNERKS0_>:
 8014bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bd4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014bd8:	888c      	ldrh	r4, [r1, #4]
 8014bda:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014bde:	443c      	add	r4, r7
 8014be0:	b2a4      	uxth	r4, r4
 8014be2:	fa0f f884 	sxth.w	r8, r4
 8014be6:	45c1      	cmp	r9, r8
 8014be8:	da2f      	bge.n	8014c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014bea:	8882      	ldrh	r2, [r0, #4]
 8014bec:	444a      	add	r2, r9
 8014bee:	b292      	uxth	r2, r2
 8014bf0:	fa0f fe82 	sxth.w	lr, r2
 8014bf4:	4577      	cmp	r7, lr
 8014bf6:	da28      	bge.n	8014c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014bf8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014bfc:	88cb      	ldrh	r3, [r1, #6]
 8014bfe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014c02:	442b      	add	r3, r5
 8014c04:	b21b      	sxth	r3, r3
 8014c06:	429e      	cmp	r6, r3
 8014c08:	da1f      	bge.n	8014c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014c0a:	88c3      	ldrh	r3, [r0, #6]
 8014c0c:	4433      	add	r3, r6
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	fa0f fc83 	sxth.w	ip, r3
 8014c14:	4565      	cmp	r5, ip
 8014c16:	da18      	bge.n	8014c4a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014c18:	454f      	cmp	r7, r9
 8014c1a:	bfb8      	it	lt
 8014c1c:	464f      	movlt	r7, r9
 8014c1e:	42b5      	cmp	r5, r6
 8014c20:	bfb8      	it	lt
 8014c22:	4635      	movlt	r5, r6
 8014c24:	45f0      	cmp	r8, lr
 8014c26:	bfd8      	it	le
 8014c28:	4622      	movle	r2, r4
 8014c2a:	1bd2      	subs	r2, r2, r7
 8014c2c:	8082      	strh	r2, [r0, #4]
 8014c2e:	884a      	ldrh	r2, [r1, #2]
 8014c30:	88c9      	ldrh	r1, [r1, #6]
 8014c32:	8007      	strh	r7, [r0, #0]
 8014c34:	440a      	add	r2, r1
 8014c36:	8045      	strh	r5, [r0, #2]
 8014c38:	b292      	uxth	r2, r2
 8014c3a:	b211      	sxth	r1, r2
 8014c3c:	458c      	cmp	ip, r1
 8014c3e:	bfa8      	it	ge
 8014c40:	4613      	movge	r3, r2
 8014c42:	1b5b      	subs	r3, r3, r5
 8014c44:	80c3      	strh	r3, [r0, #6]
 8014c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	8003      	strh	r3, [r0, #0]
 8014c4e:	8043      	strh	r3, [r0, #2]
 8014c50:	8083      	strh	r3, [r0, #4]
 8014c52:	80c3      	strh	r3, [r0, #6]
 8014c54:	e7f7      	b.n	8014c46 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014c56 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014c56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	dd06      	ble.n	8014c6c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014c5e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014c62:	2800      	cmp	r0, #0
 8014c64:	bfcc      	ite	gt
 8014c66:	2000      	movgt	r0, #0
 8014c68:	2001      	movle	r0, #1
 8014c6a:	4770      	bx	lr
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	4770      	bx	lr

08014c70 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c74:	2300      	movs	r3, #0
 8014c76:	4604      	mov	r4, r0
 8014c78:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014c7a:	8003      	strh	r3, [r0, #0]
 8014c7c:	8043      	strh	r3, [r0, #2]
 8014c7e:	8083      	strh	r3, [r0, #4]
 8014c80:	80c3      	strh	r3, [r0, #6]
 8014c82:	2d00      	cmp	r5, #0
 8014c84:	d040      	beq.n	8014d08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014c86:	1d28      	adds	r0, r5, #4
 8014c88:	f7ff ffe5 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c8c:	b988      	cbnz	r0, 8014cb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014c8e:	4620      	mov	r0, r4
 8014c90:	f7ff ffe1 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c94:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014c98:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014c9c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014ca0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014ca4:	b138      	cbz	r0, 8014cb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014ca6:	8022      	strh	r2, [r4, #0]
 8014ca8:	8063      	strh	r3, [r4, #2]
 8014caa:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014cae:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014cb2:	69ad      	ldr	r5, [r5, #24]
 8014cb4:	e7e5      	b.n	8014c82 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014cb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014cba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014cbe:	4290      	cmp	r0, r2
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014cc6:	460e      	mov	r6, r1
 8014cc8:	bfa8      	it	ge
 8014cca:	4617      	movge	r7, r2
 8014ccc:	4299      	cmp	r1, r3
 8014cce:	4472      	add	r2, lr
 8014cd0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014cd4:	bfa8      	it	ge
 8014cd6:	461e      	movge	r6, r3
 8014cd8:	4440      	add	r0, r8
 8014cda:	4471      	add	r1, lr
 8014cdc:	4463      	add	r3, ip
 8014cde:	b200      	sxth	r0, r0
 8014ce0:	8027      	strh	r7, [r4, #0]
 8014ce2:	b212      	sxth	r2, r2
 8014ce4:	8066      	strh	r6, [r4, #2]
 8014ce6:	b209      	sxth	r1, r1
 8014ce8:	b21b      	sxth	r3, r3
 8014cea:	4290      	cmp	r0, r2
 8014cec:	bfac      	ite	ge
 8014cee:	ebc7 0200 	rsbge	r2, r7, r0
 8014cf2:	ebc7 0202 	rsblt	r2, r7, r2
 8014cf6:	4299      	cmp	r1, r3
 8014cf8:	bfac      	ite	ge
 8014cfa:	ebc6 0301 	rsbge	r3, r6, r1
 8014cfe:	ebc6 0303 	rsblt	r3, r6, r3
 8014d02:	80a2      	strh	r2, [r4, #4]
 8014d04:	80e3      	strh	r3, [r4, #6]
 8014d06:	e7d4      	b.n	8014cb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014d08:	4620      	mov	r0, r4
 8014d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014d0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d12:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014d16:	b383      	cbz	r3, 8014d7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014d18:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014d1a:	b374      	cbz	r4, 8014d7a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014d1c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014d20:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014d24:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014d28:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014d2c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014d30:	b303      	cbz	r3, 8014d74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014d32:	4668      	mov	r0, sp
 8014d34:	1d21      	adds	r1, r4, #4
 8014d36:	f8ad 5000 	strh.w	r5, [sp]
 8014d3a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014d3e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014d42:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014d46:	f7ff ff43 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8014d4a:	4668      	mov	r0, sp
 8014d4c:	f7ff ff83 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d50:	b980      	cbnz	r0, 8014d74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014d52:	f8bd 3000 	ldrh.w	r3, [sp]
 8014d56:	4669      	mov	r1, sp
 8014d58:	88a2      	ldrh	r2, [r4, #4]
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	1a9b      	subs	r3, r3, r2
 8014d5e:	88e2      	ldrh	r2, [r4, #6]
 8014d60:	f8ad 3000 	strh.w	r3, [sp]
 8014d64:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014d68:	1a9b      	subs	r3, r3, r2
 8014d6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	689b      	ldr	r3, [r3, #8]
 8014d72:	4798      	blx	r3
 8014d74:	69a4      	ldr	r4, [r4, #24]
 8014d76:	2c00      	cmp	r4, #0
 8014d78:	d1d8      	bne.n	8014d2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014d7a:	b002      	add	sp, #8
 8014d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d82:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014d86:	460d      	mov	r5, r1
 8014d88:	4616      	mov	r6, r2
 8014d8a:	b323      	cbz	r3, 8014dd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014d8c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014d8e:	b314      	cbz	r4, 8014dd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014d90:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014d94:	b1eb      	cbz	r3, 8014dd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014d96:	6828      	ldr	r0, [r5, #0]
 8014d98:	466b      	mov	r3, sp
 8014d9a:	6869      	ldr	r1, [r5, #4]
 8014d9c:	c303      	stmia	r3!, {r0, r1}
 8014d9e:	4668      	mov	r0, sp
 8014da0:	1d21      	adds	r1, r4, #4
 8014da2:	f7ff ff15 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8014da6:	4668      	mov	r0, sp
 8014da8:	f7ff ff55 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014dac:	b988      	cbnz	r0, 8014dd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014dae:	f8bd 3000 	ldrh.w	r3, [sp]
 8014db2:	4669      	mov	r1, sp
 8014db4:	88a2      	ldrh	r2, [r4, #4]
 8014db6:	4620      	mov	r0, r4
 8014db8:	1a9b      	subs	r3, r3, r2
 8014dba:	88e2      	ldrh	r2, [r4, #6]
 8014dbc:	f8ad 3000 	strh.w	r3, [sp]
 8014dc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014dc4:	1a9b      	subs	r3, r3, r2
 8014dc6:	4632      	mov	r2, r6
 8014dc8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014dcc:	6823      	ldr	r3, [r4, #0]
 8014dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dd0:	4798      	blx	r3
 8014dd2:	69a4      	ldr	r4, [r4, #24]
 8014dd4:	e7db      	b.n	8014d8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014dd6:	b002      	add	sp, #8
 8014dd8:	bd70      	pop	{r4, r5, r6, pc}

08014dda <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8014dda:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 8014dde:	4770      	bx	lr

08014de0 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8014de0:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	@ 0xe6
 8014de4:	4770      	bx	lr

08014de6 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8014de6:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 8014dea:	4770      	bx	lr

08014dec <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8014dec:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	@ 0x32
 8014df0:	4770      	bx	lr

08014df2 <_ZN8touchgfx6Slider8setValueEs>:
 8014df2:	b570      	push	{r4, r5, r6, lr}
 8014df4:	6803      	ldr	r3, [r0, #0]
 8014df6:	4604      	mov	r4, r0
 8014df8:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	@ 0xac
 8014dfc:	4798      	blx	r3
 8014dfe:	4601      	mov	r1, r0
 8014e00:	462b      	mov	r3, r5
 8014e02:	4620      	mov	r0, r4
 8014e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e08:	4718      	bx	r3

08014e0a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8014e0a:	b570      	push	{r4, r5, r6, lr}
 8014e0c:	6803      	ldr	r3, [r0, #0]
 8014e0e:	4604      	mov	r4, r0
 8014e10:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014e14:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 8014e18:	b95a      	cbnz	r2, 8014e32 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 8014e1a:	894d      	ldrh	r5, [r1, #10]
 8014e1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014e20:	4620      	mov	r0, r4
 8014e22:	4798      	blx	r3
 8014e24:	1a29      	subs	r1, r5, r0
 8014e26:	4633      	mov	r3, r6
 8014e28:	4620      	mov	r0, r4
 8014e2a:	b209      	sxth	r1, r1
 8014e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e30:	4718      	bx	r3
 8014e32:	898d      	ldrh	r5, [r1, #12]
 8014e34:	e7f2      	b.n	8014e1c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

08014e36 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8014e36:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014e3a:	2302      	movs	r3, #2
 8014e3c:	b922      	cbnz	r2, 8014e48 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 8014e3e:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	@ 0x94
 8014e42:	fb90 f0f3 	sdiv	r0, r0, r3
 8014e46:	4770      	bx	lr
 8014e48:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	@ 0x96
 8014e4c:	e7f9      	b.n	8014e42 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08014e4e <_ZN8touchgfx6Slider13setValueRangeEsss>:
 8014e4e:	8642      	strh	r2, [r0, #50]	@ 0x32
 8014e50:	6802      	ldr	r2, [r0, #0]
 8014e52:	8601      	strh	r1, [r0, #48]	@ 0x30
 8014e54:	4619      	mov	r1, r3
 8014e56:	b410      	push	{r4}
 8014e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e5c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8014e60:	4710      	bx	r2

08014e62 <_ZN8touchgfx6Slider13setValueRangeEss>:
 8014e62:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8014e66:	428b      	cmp	r3, r1
 8014e68:	b410      	push	{r4}
 8014e6a:	db09      	blt.n	8014e80 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	bfa8      	it	ge
 8014e70:	4613      	movge	r3, r2
 8014e72:	6804      	ldr	r4, [r0, #0]
 8014e74:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
 8014e78:	46a4      	mov	ip, r4
 8014e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e7e:	4760      	bx	ip
 8014e80:	460b      	mov	r3, r1
 8014e82:	e7f6      	b.n	8014e72 <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

08014e84 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8014e84:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	@ 0xe6
 8014e88:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	@ 0xe4
 8014e8c:	1a10      	subs	r0, r2, r0
 8014e8e:	4770      	bx	lr

08014e90 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8014e90:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 8014e94:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 8014e98:	1a10      	subs	r0, r2, r0
 8014e9a:	4770      	bx	lr

08014e9c <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8014e9c:	b570      	push	{r4, r5, r6, lr}
 8014e9e:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	@ 0x32
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 8014ea8:	428d      	cmp	r5, r1
 8014eaa:	bfa8      	it	ge
 8014eac:	460d      	movge	r5, r1
 8014eae:	429d      	cmp	r5, r3
 8014eb0:	bfac      	ite	ge
 8014eb2:	ebc3 0505 	rsbge	r5, r3, r5
 8014eb6:	ebc3 0503 	rsblt	r5, r3, r3
 8014eba:	6803      	ldr	r3, [r0, #0]
 8014ebc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014ec0:	4798      	blx	r3
 8014ec2:	6823      	ldr	r3, [r4, #0]
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014ecc:	4798      	blx	r3
 8014ece:	4631      	mov	r1, r6
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f007 fb89 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 8014ed8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014edc:	2b01      	cmp	r3, #1
 8014ede:	bf0b      	itete	eq
 8014ee0:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	@ 0xe6
 8014ee4:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	@ 0xe4
 8014ee8:	1a18      	subeq	r0, r3, r0
 8014eea:	18c0      	addne	r0, r0, r3
 8014eec:	b200      	sxth	r0, r0
 8014eee:	bd70      	pop	{r4, r5, r6, pc}

08014ef0 <_ZNK8touchgfx6Slider15positionToValueEs>:
 8014ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef2:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	@ 0xe6
 8014ef6:	4605      	mov	r5, r0
 8014ef8:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	@ 0xe4
 8014efc:	4299      	cmp	r1, r3
 8014efe:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014f02:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	@ 0x30
 8014f06:	bfa8      	it	ge
 8014f08:	4619      	movge	r1, r3
 8014f0a:	42a1      	cmp	r1, r4
 8014f0c:	bfb8      	it	lt
 8014f0e:	4621      	movlt	r1, r4
 8014f10:	2a01      	cmp	r2, #1
 8014f12:	b289      	uxth	r1, r1
 8014f14:	bf08      	it	eq
 8014f16:	1a5c      	subeq	r4, r3, r1
 8014f18:	6803      	ldr	r3, [r0, #0]
 8014f1a:	bf18      	it	ne
 8014f1c:	1b0c      	subne	r4, r1, r4
 8014f1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014f22:	4798      	blx	r3
 8014f24:	682b      	ldr	r3, [r5, #0]
 8014f26:	4607      	mov	r7, r0
 8014f28:	b224      	sxth	r4, r4
 8014f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014f2e:	4628      	mov	r0, r5
 8014f30:	4798      	blx	r3
 8014f32:	4639      	mov	r1, r7
 8014f34:	4602      	mov	r2, r0
 8014f36:	4620      	mov	r0, r4
 8014f38:	f007 fb57 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 8014f3c:	4430      	add	r0, r6
 8014f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f40 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8014f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f44:	790b      	ldrb	r3, [r1, #4]
 8014f46:	4604      	mov	r4, r0
 8014f48:	460d      	mov	r5, r1
 8014f4a:	b32b      	cbz	r3, 8014f98 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d137      	bne.n	8014fc0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014f50:	6823      	ldr	r3, [r4, #0]
 8014f52:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014f56:	f8d3 70ac 	ldr.w	r7, [r3, #172]	@ 0xac
 8014f5a:	2a00      	cmp	r2, #0
 8014f5c:	d12e      	bne.n	8014fbc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8014f5e:	88ee      	ldrh	r6, [r5, #6]
 8014f60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014f64:	4620      	mov	r0, r4
 8014f66:	4798      	blx	r3
 8014f68:	1a31      	subs	r1, r6, r0
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	b209      	sxth	r1, r1
 8014f6e:	47b8      	blx	r7
 8014f70:	792b      	ldrb	r3, [r5, #4]
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d124      	bne.n	8014fc0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014f76:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8014f7a:	b308      	cbz	r0, 8014fc0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014f7c:	6803      	ldr	r3, [r0, #0]
 8014f7e:	68db      	ldr	r3, [r3, #12]
 8014f80:	4798      	blx	r3
 8014f82:	b1e8      	cbz	r0, 8014fc0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8014f84:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8014f88:	4621      	mov	r1, r4
 8014f8a:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8014f8e:	6803      	ldr	r3, [r0, #0]
 8014f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f94:	689b      	ldr	r3, [r3, #8]
 8014f96:	4718      	bx	r3
 8014f98:	f8d0 00e8 	ldr.w	r0, [r0, #232]	@ 0xe8
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d0d7      	beq.n	8014f50 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014fa0:	6803      	ldr	r3, [r0, #0]
 8014fa2:	68db      	ldr	r3, [r3, #12]
 8014fa4:	4798      	blx	r3
 8014fa6:	2800      	cmp	r0, #0
 8014fa8:	d0d2      	beq.n	8014f50 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014faa:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 8014fae:	4621      	mov	r1, r4
 8014fb0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8014fb4:	6803      	ldr	r3, [r0, #0]
 8014fb6:	689b      	ldr	r3, [r3, #8]
 8014fb8:	4798      	blx	r3
 8014fba:	e7c9      	b.n	8014f50 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8014fbc:	892e      	ldrh	r6, [r5, #8]
 8014fbe:	e7cf      	b.n	8014f60 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 8014fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fc4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8014fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc8:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	@ 0xe4
 8014fcc:	4604      	mov	r4, r0
 8014fce:	308c      	adds	r0, #140	@ 0x8c
 8014fd0:	4588      	cmp	r8, r1
 8014fd2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014fd6:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 8014fda:	bfb8      	it	lt
 8014fdc:	4688      	movlt	r8, r1
 8014fde:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 8014fe2:	4588      	cmp	r8, r1
 8014fe4:	bfa8      	it	ge
 8014fe6:	4688      	movge	r8, r1
 8014fe8:	fa1f f788 	uxth.w	r7, r8
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d130      	bne.n	8015052 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 8014ff0:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	@ 0x92
 8014ff4:	4641      	mov	r1, r8
 8014ff6:	f7f5 fc71 	bl	800a8dc <_ZN8touchgfx8Drawable6moveToEss>
 8014ffa:	4630      	mov	r0, r6
 8014ffc:	f007 f92b 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015000:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8015004:	6823      	ldr	r3, [r4, #0]
 8015006:	4620      	mov	r0, r4
 8015008:	1abf      	subs	r7, r7, r2
 801500a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801500e:	b2bf      	uxth	r7, r7
 8015010:	4798      	blx	r3
 8015012:	4407      	add	r7, r0
 8015014:	f8a4 70c0 	strh.w	r7, [r4, #192]	@ 0xc0
 8015018:	4630      	mov	r0, r6
 801501a:	f007 f91c 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 801501e:	6823      	ldr	r3, [r4, #0]
 8015020:	4641      	mov	r1, r8
 8015022:	4620      	mov	r0, r4
 8015024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015028:	4798      	blx	r3
 801502a:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 801502c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8015030:	2800      	cmp	r0, #0
 8015032:	d03c      	beq.n	80150ae <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 8015034:	6803      	ldr	r3, [r0, #0]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	4798      	blx	r3
 801503a:	2800      	cmp	r0, #0
 801503c:	d037      	beq.n	80150ae <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 801503e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8015042:	4621      	mov	r1, r4
 8015044:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 8015048:	6803      	ldr	r3, [r0, #0]
 801504a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	4718      	bx	r3
 8015052:	4642      	mov	r2, r8
 8015054:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	@ 0x90
 8015058:	f7f5 fc40 	bl	800a8dc <_ZN8touchgfx8Drawable6moveToEss>
 801505c:	4630      	mov	r0, r6
 801505e:	f007 f8fa 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015062:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 8015064:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
 8015066:	6823      	ldr	r3, [r4, #0]
 8015068:	4405      	add	r5, r0
 801506a:	4620      	mov	r0, r4
 801506c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015070:	b2ad      	uxth	r5, r5
 8015072:	4798      	blx	r3
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	1bed      	subs	r5, r5, r7
 8015078:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	@ 0xbc
 801507c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015080:	1a2d      	subs	r5, r5, r0
 8015082:	4620      	mov	r0, r4
 8015084:	4798      	blx	r3
 8015086:	4438      	add	r0, r7
 8015088:	b2ad      	uxth	r5, r5
 801508a:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	@ 0xc0
 801508e:	b202      	sxth	r2, r0
 8015090:	4651      	mov	r1, sl
 8015092:	4630      	mov	r0, r6
 8015094:	f7f5 fb79 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 8015098:	4630      	mov	r0, r6
 801509a:	b22a      	sxth	r2, r5
 801509c:	4649      	mov	r1, r9
 801509e:	f7f5 fbd0 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80150a2:	f8b4 006a 	ldrh.w	r0, [r4, #106]	@ 0x6a
 80150a6:	1a2d      	subs	r5, r5, r0
 80150a8:	f8a4 5066 	strh.w	r5, [r4, #102]	@ 0x66
 80150ac:	e7b4      	b.n	8015018 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 80150ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080150b2 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 80150b2:	b570      	push	{r4, r5, r6, lr}
 80150b4:	4604      	mov	r4, r0
 80150b6:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 80150ba:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 80150be:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80150c2:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80150c6:	f7f5 fb60 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 80150ca:	4632      	mov	r2, r6
 80150cc:	4629      	mov	r1, r5
 80150ce:	4620      	mov	r0, r4
 80150d0:	f7f5 fbb7 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80150d4:	bd70      	pop	{r4, r5, r6, pc}

080150d6 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 80150d6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150da:	f04f 0a00 	mov.w	sl, #0
 80150de:	f100 0b34 	add.w	fp, r0, #52	@ 0x34
 80150e2:	4604      	mov	r4, r0
 80150e4:	461d      	mov	r5, r3
 80150e6:	f880 a02c 	strb.w	sl, [r0, #44]	@ 0x2c
 80150ea:	4658      	mov	r0, fp
 80150ec:	4690      	mov	r8, r2
 80150ee:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80150f2:	4689      	mov	r9, r1
 80150f4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80150f8:	f7f5 fb47 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 80150fc:	4659      	mov	r1, fp
 80150fe:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8015102:	f7ff ffd6 	bl	80150b2 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8015106:	4652      	mov	r2, sl
 8015108:	4651      	mov	r1, sl
 801510a:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 801510e:	f7f5 fb3c 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 8015112:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015114:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8015116:	4620      	mov	r0, r4
 8015118:	4490      	add	r8, r2
 801511a:	f8b4 2096 	ldrh.w	r2, [r4, #150]	@ 0x96
 801511e:	f8a4 5092 	strh.w	r5, [r4, #146]	@ 0x92
 8015122:	4489      	add	r9, r1
 8015124:	4415      	add	r5, r2
 8015126:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 801512a:	fa0f f288 	sxth.w	r2, r8
 801512e:	f8a4 70e4 	strh.w	r7, [r4, #228]	@ 0xe4
 8015132:	1873      	adds	r3, r6, r1
 8015134:	b22d      	sxth	r5, r5
 8015136:	fa0f f989 	sxth.w	r9, r9
 801513a:	f8a4 60e6 	strh.w	r6, [r4, #230]	@ 0xe6
 801513e:	b219      	sxth	r1, r3
 8015140:	42aa      	cmp	r2, r5
 8015142:	bfb8      	it	lt
 8015144:	462a      	movlt	r2, r5
 8015146:	4549      	cmp	r1, r9
 8015148:	bfb8      	it	lt
 801514a:	4649      	movlt	r1, r9
 801514c:	f7f5 fb79 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015150:	6823      	ldr	r3, [r4, #0]
 8015152:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 8015156:	4620      	mov	r0, r4
 8015158:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801515c:	b001      	add	sp, #4
 801515e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015162:	4718      	bx	r3

08015164 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 8015164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015168:	461d      	mov	r5, r3
 801516a:	f100 0a34 	add.w	sl, r0, #52	@ 0x34
 801516e:	2301      	movs	r3, #1
 8015170:	4604      	mov	r4, r0
 8015172:	4617      	mov	r7, r2
 8015174:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8015178:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801517c:	4650      	mov	r0, sl
 801517e:	460e      	mov	r6, r1
 8015180:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8015184:	f7f5 fb01 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 8015188:	4651      	mov	r1, sl
 801518a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 801518e:	f7ff ff90 	bl	80150b2 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8015192:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8015194:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015196:	4620      	mov	r0, r4
 8015198:	f8b4 3096 	ldrh.w	r3, [r4, #150]	@ 0x96
 801519c:	440e      	add	r6, r1
 801519e:	443a      	add	r2, r7
 80151a0:	f8b4 1094 	ldrh.w	r1, [r4, #148]	@ 0x94
 80151a4:	4443      	add	r3, r8
 80151a6:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 80151aa:	b212      	sxth	r2, r2
 80151ac:	440d      	add	r5, r1
 80151ae:	b21b      	sxth	r3, r3
 80151b0:	f8a4 90e4 	strh.w	r9, [r4, #228]	@ 0xe4
 80151b4:	b231      	sxth	r1, r6
 80151b6:	f8a4 80e6 	strh.w	r8, [r4, #230]	@ 0xe6
 80151ba:	429a      	cmp	r2, r3
 80151bc:	b22d      	sxth	r5, r5
 80151be:	bfb8      	it	lt
 80151c0:	461a      	movlt	r2, r3
 80151c2:	42a9      	cmp	r1, r5
 80151c4:	bfb8      	it	lt
 80151c6:	4629      	movlt	r1, r5
 80151c8:	f7f5 fb3b 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80151cc:	6823      	ldr	r3, [r4, #0]
 80151ce:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 80151d2:	4620      	mov	r0, r4
 80151d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80151d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151dc:	4718      	bx	r3
	...

080151e0 <_ZN8touchgfx6SliderC1Ev>:
 80151e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80151e4:	4604      	mov	r4, r0
 80151e6:	f7f5 f9fd 	bl	800a5e4 <_ZN8touchgfx8DrawableC1Ev>
 80151ea:	4b28      	ldr	r3, [pc, #160]	@ (801528c <_ZN8touchgfx6SliderC1Ev+0xac>)
 80151ec:	2500      	movs	r5, #0
 80151ee:	ae02      	add	r6, sp, #8
 80151f0:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	f104 0934 	add.w	r9, r4, #52	@ 0x34
 80151fa:	2364      	movs	r3, #100	@ 0x64
 80151fc:	f104 0a60 	add.w	sl, r4, #96	@ 0x60
 8015200:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8015204:	4648      	mov	r0, r9
 8015206:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015208:	4631      	mov	r1, r6
 801520a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801520c:	f104 088c 	add.w	r8, r4, #140	@ 0x8c
 8015210:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8015214:	85e5      	strh	r5, [r4, #46]	@ 0x2e
 8015216:	8625      	strh	r5, [r4, #48]	@ 0x30
 8015218:	f7f7 fcda 	bl	800cbd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801521c:	4631      	mov	r1, r6
 801521e:	4650      	mov	r0, sl
 8015220:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015224:	f7f7 fcd4 	bl	800cbd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015228:	4631      	mov	r1, r6
 801522a:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 801522e:	4640      	mov	r0, r8
 8015230:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015234:	f7f7 fccc 	bl	800cbd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015238:	4630      	mov	r0, r6
 801523a:	f7f5 f9d3 	bl	800a5e4 <_ZN8touchgfx8DrawableC1Ev>
 801523e:	4b14      	ldr	r3, [pc, #80]	@ (8015290 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8015240:	4651      	mov	r1, sl
 8015242:	4630      	mov	r0, r6
 8015244:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8015248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801524c:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 8015250:	e9c4 3539 	strd	r3, r5, [r4, #228]	@ 0xe4
 8015254:	2301      	movs	r3, #1
 8015256:	e9c4 553b 	strd	r5, r5, [r4, #236]	@ 0xec
 801525a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801525e:	f7ff fb3b 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015262:	4649      	mov	r1, r9
 8015264:	4620      	mov	r0, r4
 8015266:	f7ff fb37 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801526a:	4631      	mov	r1, r6
 801526c:	4620      	mov	r0, r4
 801526e:	f7ff fb33 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015272:	4641      	mov	r1, r8
 8015274:	4620      	mov	r0, r4
 8015276:	f7ff fb2f 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801527a:	4620      	mov	r0, r4
 801527c:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	@ 0xe4
 8015280:	f7ff fea0 	bl	8014fc4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 8015284:	4620      	mov	r0, r4
 8015286:	b002      	add	sp, #8
 8015288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801528c:	080314e8 	.word	0x080314e8
 8015290:	08031458 	.word	0x08031458

08015294 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8015294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015298:	4604      	mov	r4, r0
 801529a:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 801529e:	4689      	mov	r9, r1
 80152a0:	461f      	mov	r7, r3
 80152a2:	f104 058c 	add.w	r5, r4, #140	@ 0x8c
 80152a6:	4630      	mov	r0, r6
 80152a8:	4690      	mov	r8, r2
 80152aa:	f006 ffd4 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 80152ae:	4628      	mov	r0, r5
 80152b0:	f006 ffd1 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 80152b4:	4649      	mov	r1, r9
 80152b6:	4630      	mov	r0, r6
 80152b8:	f003 fb3a 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80152bc:	4641      	mov	r1, r8
 80152be:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80152c2:	f003 fb35 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80152c6:	4639      	mov	r1, r7
 80152c8:	4628      	mov	r0, r5
 80152ca:	f003 fb31 	bl	8018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80152ce:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	@ 0x6a
 80152d2:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	@ 0x68
 80152d6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80152da:	f7f5 fab2 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80152de:	6823      	ldr	r3, [r4, #0]
 80152e0:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	@ 0x2e
 80152e4:	4620      	mov	r0, r4
 80152e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80152ea:	4798      	blx	r3
 80152ec:	4630      	mov	r0, r6
 80152ee:	f006 ffb2 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 80152f2:	4628      	mov	r0, r5
 80152f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152f8:	f006 bfad 	b.w	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>

080152fc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80152fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8015300:	4770      	bx	lr

08015302 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015302:	4770      	bx	lr

08015304 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015304:	4770      	bx	lr

08015306 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015306:	6803      	ldr	r3, [r0, #0]
 8015308:	b513      	push	{r0, r1, r4, lr}
 801530a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 801530e:	2300      	movs	r3, #0
 8015310:	e9cd 3300 	strd	r3, r3, [sp]
 8015314:	466b      	mov	r3, sp
 8015316:	47a0      	blx	r4
 8015318:	b002      	add	sp, #8
 801531a:	bd10      	pop	{r4, pc}

0801531c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801531c:	2301      	movs	r3, #1
 801531e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8015322:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8015326:	4770      	bx	lr

08015328 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015328:	2301      	movs	r3, #1
 801532a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801532e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8015332:	4770      	bx	lr

08015334 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015334:	6843      	ldr	r3, [r0, #4]
 8015336:	2201      	movs	r2, #1
 8015338:	725a      	strb	r2, [r3, #9]
 801533a:	6840      	ldr	r0, [r0, #4]
 801533c:	6803      	ldr	r3, [r0, #0]
 801533e:	691b      	ldr	r3, [r3, #16]
 8015340:	4718      	bx	r3

08015342 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015342:	6840      	ldr	r0, [r0, #4]
 8015344:	6803      	ldr	r3, [r0, #0]
 8015346:	689b      	ldr	r3, [r3, #8]
 8015348:	4718      	bx	r3

0801534a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801534a:	b530      	push	{r4, r5, lr}
 801534c:	b08b      	sub	sp, #44	@ 0x2c
 801534e:	6804      	ldr	r4, [r0, #0]
 8015350:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8015354:	9509      	str	r5, [sp, #36]	@ 0x24
 8015356:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801535a:	9508      	str	r5, [sp, #32]
 801535c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8015360:	9507      	str	r5, [sp, #28]
 8015362:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8015366:	9506      	str	r5, [sp, #24]
 8015368:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801536c:	9505      	str	r5, [sp, #20]
 801536e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8015372:	9504      	str	r5, [sp, #16]
 8015374:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8015378:	9503      	str	r5, [sp, #12]
 801537a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801537e:	9502      	str	r5, [sp, #8]
 8015380:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8015384:	e9cd 3500 	strd	r3, r5, [sp]
 8015388:	4613      	mov	r3, r2
 801538a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 801538c:	2200      	movs	r2, #0
 801538e:	47a0      	blx	r4
 8015390:	b00b      	add	sp, #44	@ 0x2c
 8015392:	bd30      	pop	{r4, r5, pc}

08015394 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015394:	4b04      	ldr	r3, [pc, #16]	@ (80153a8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	b123      	cbz	r3, 80153a4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801539a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801539e:	f080 0001 	eor.w	r0, r0, #1
 80153a2:	4770      	bx	lr
 80153a4:	2001      	movs	r0, #1
 80153a6:	4770      	bx	lr
 80153a8:	200122c2 	.word	0x200122c2

080153ac <_ZN8touchgfx3HAL8endFrameEv>:
 80153ac:	b510      	push	{r4, lr}
 80153ae:	4604      	mov	r4, r0
 80153b0:	6840      	ldr	r0, [r0, #4]
 80153b2:	6803      	ldr	r3, [r0, #0]
 80153b4:	689b      	ldr	r3, [r3, #8]
 80153b6:	4798      	blx	r3
 80153b8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80153bc:	b113      	cbz	r3, 80153c4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80153be:	2301      	movs	r3, #1
 80153c0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80153c4:	bd10      	pop	{r4, pc}

080153c6 <_ZN8touchgfx3HAL10initializeEv>:
 80153c6:	b510      	push	{r4, lr}
 80153c8:	4604      	mov	r4, r0
 80153ca:	f7fd f8d3 	bl	8012574 <_ZN8touchgfx10OSWrappers10initializeEv>
 80153ce:	f7fc fe39 	bl	8012044 <_ZN8touchgfx4GPIO4initEv>
 80153d2:	6860      	ldr	r0, [r4, #4]
 80153d4:	6803      	ldr	r3, [r0, #0]
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	4798      	blx	r3
 80153da:	68e0      	ldr	r0, [r4, #12]
 80153dc:	6803      	ldr	r3, [r0, #0]
 80153de:	689b      	ldr	r3, [r3, #8]
 80153e0:	4798      	blx	r3
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	4620      	mov	r0, r4
 80153e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153ec:	4718      	bx	r3

080153ee <_ZN8touchgfx3HAL9taskEntryEv>:
 80153ee:	b508      	push	{r3, lr}
 80153f0:	6803      	ldr	r3, [r0, #0]
 80153f2:	4604      	mov	r4, r0
 80153f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80153f8:	4798      	blx	r3
 80153fa:	6823      	ldr	r3, [r4, #0]
 80153fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80153fe:	4620      	mov	r0, r4
 8015400:	4798      	blx	r3
 8015402:	f7fd f92b 	bl	801265c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801540a:	e7f8      	b.n	80153fe <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801540c <_ZN8touchgfx3HAL4tickEv>:
 801540c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801540e:	6803      	ldr	r3, [r0, #0]
 8015410:	4604      	mov	r4, r0
 8015412:	4d5b      	ldr	r5, [pc, #364]	@ (8015580 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8015414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015418:	4798      	blx	r3
 801541a:	2800      	cmp	r0, #0
 801541c:	f000 8095 	beq.w	801554a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015420:	2001      	movs	r0, #1
 8015422:	2600      	movs	r6, #0
 8015424:	f7fc fe16 	bl	8012054 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015428:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 801542c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8015430:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8015434:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8015438:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 801543c:	b133      	cbz	r3, 801544c <_ZN8touchgfx3HAL4tickEv+0x40>
 801543e:	6823      	ldr	r3, [r4, #0]
 8015440:	4620      	mov	r0, r4
 8015442:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8015446:	4798      	blx	r3
 8015448:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 801544c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8015450:	2601      	movs	r6, #1
 8015452:	6862      	ldr	r2, [r4, #4]
 8015454:	f083 0301 	eor.w	r3, r3, #1
 8015458:	702e      	strb	r6, [r5, #0]
 801545a:	7253      	strb	r3, [r2, #9]
 801545c:	f005 fe10 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 8015460:	6803      	ldr	r3, [r0, #0]
 8015462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015464:	4798      	blx	r3
 8015466:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801546a:	b90b      	cbnz	r3, 8015470 <_ZN8touchgfx3HAL4tickEv+0x64>
 801546c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8015470:	f005 fe06 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 8015474:	6803      	ldr	r3, [r0, #0]
 8015476:	695b      	ldr	r3, [r3, #20]
 8015478:	4798      	blx	r3
 801547a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801547c:	6803      	ldr	r3, [r0, #0]
 801547e:	691b      	ldr	r3, [r3, #16]
 8015480:	4798      	blx	r3
 8015482:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8015486:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801548a:	3b01      	subs	r3, #1
 801548c:	b2db      	uxtb	r3, r3
 801548e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8015492:	b10a      	cbz	r2, 8015498 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1eb      	bne.n	8015470 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015498:	4a3a      	ldr	r2, [pc, #232]	@ (8015584 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801549a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 801549e:	7813      	ldrb	r3, [r2, #0]
 80154a0:	3301      	adds	r3, #1
 80154a2:	b25b      	sxtb	r3, r3
 80154a4:	4299      	cmp	r1, r3
 80154a6:	7013      	strb	r3, [r2, #0]
 80154a8:	dc10      	bgt.n	80154cc <_ZN8touchgfx3HAL4tickEv+0xc0>
 80154aa:	2300      	movs	r3, #0
 80154ac:	68e0      	ldr	r0, [r4, #12]
 80154ae:	a902      	add	r1, sp, #8
 80154b0:	7013      	strb	r3, [r2, #0]
 80154b2:	aa03      	add	r2, sp, #12
 80154b4:	6803      	ldr	r3, [r0, #0]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	4798      	blx	r3
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	2800      	cmp	r0, #0
 80154be:	d050      	beq.n	8015562 <_ZN8touchgfx3HAL4tickEv+0x156>
 80154c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80154c4:	4620      	mov	r0, r4
 80154c6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80154ca:	4798      	blx	r3
 80154cc:	2300      	movs	r3, #0
 80154ce:	6960      	ldr	r0, [r4, #20]
 80154d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80154d4:	b158      	cbz	r0, 80154ee <_ZN8touchgfx3HAL4tickEv+0xe2>
 80154d6:	6803      	ldr	r3, [r0, #0]
 80154d8:	f10d 0107 	add.w	r1, sp, #7
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	4798      	blx	r3
 80154e0:	b128      	cbz	r0, 80154ee <_ZN8touchgfx3HAL4tickEv+0xe2>
 80154e2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80154e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80154e8:	6803      	ldr	r3, [r0, #0]
 80154ea:	68db      	ldr	r3, [r3, #12]
 80154ec:	4798      	blx	r3
 80154ee:	f104 001c 	add.w	r0, r4, #28
 80154f2:	f017 f985 	bl	802c800 <_ZN8touchgfx8Gestures4tickEv>
 80154f6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80154fa:	b30b      	cbz	r3, 8015540 <_ZN8touchgfx3HAL4tickEv+0x134>
 80154fc:	6920      	ldr	r0, [r4, #16]
 80154fe:	6803      	ldr	r3, [r0, #0]
 8015500:	691b      	ldr	r3, [r3, #16]
 8015502:	4798      	blx	r3
 8015504:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015506:	4606      	mov	r6, r0
 8015508:	b903      	cbnz	r3, 801550c <_ZN8touchgfx3HAL4tickEv+0x100>
 801550a:	6760      	str	r0, [r4, #116]	@ 0x74
 801550c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801550e:	4a1e      	ldr	r2, [pc, #120]	@ (8015588 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015510:	1af3      	subs	r3, r6, r3
 8015512:	4293      	cmp	r3, r2
 8015514:	d914      	bls.n	8015540 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015516:	6920      	ldr	r0, [r4, #16]
 8015518:	6803      	ldr	r3, [r0, #0]
 801551a:	699b      	ldr	r3, [r3, #24]
 801551c:	4798      	blx	r3
 801551e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015520:	2264      	movs	r2, #100	@ 0x64
 8015522:	1af3      	subs	r3, r6, r3
 8015524:	fbb3 f3f2 	udiv	r3, r3, r2
 8015528:	fbb0 f0f3 	udiv	r0, r0, r3
 801552c:	2800      	cmp	r0, #0
 801552e:	dc1d      	bgt.n	801556c <_ZN8touchgfx3HAL4tickEv+0x160>
 8015530:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8015534:	6920      	ldr	r0, [r4, #16]
 8015536:	2100      	movs	r1, #0
 8015538:	6803      	ldr	r3, [r0, #0]
 801553a:	69db      	ldr	r3, [r3, #28]
 801553c:	4798      	blx	r3
 801553e:	6766      	str	r6, [r4, #116]	@ 0x74
 8015540:	f005 fd9e 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 8015544:	6803      	ldr	r3, [r0, #0]
 8015546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015548:	4798      	blx	r3
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	4620      	mov	r0, r4
 801554e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015552:	4798      	blx	r3
 8015554:	2001      	movs	r0, #1
 8015556:	f7fc fd99 	bl	801208c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801555a:	2300      	movs	r3, #0
 801555c:	702b      	strb	r3, [r5, #0]
 801555e:	b004      	add	sp, #16
 8015560:	bd70      	pop	{r4, r5, r6, pc}
 8015562:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015566:	4620      	mov	r0, r4
 8015568:	4798      	blx	r3
 801556a:	e7af      	b.n	80154cc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801556c:	2863      	cmp	r0, #99	@ 0x63
 801556e:	bfcb      	itete	gt
 8015570:	2300      	movgt	r3, #0
 8015572:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8015576:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801557a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 801557e:	e7d9      	b.n	8015534 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015580:	200122c8 	.word	0x200122c8
 8015584:	200122c9 	.word	0x200122c9
 8015588:	05f5e100 	.word	0x05f5e100

0801558c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801558c:	b510      	push	{r4, lr}
 801558e:	4604      	mov	r4, r0
 8015590:	f7fd f834 	bl	80125fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8015594:	2200      	movs	r2, #0
 8015596:	6863      	ldr	r3, [r4, #4]
 8015598:	729a      	strb	r2, [r3, #10]
 801559a:	bd10      	pop	{r4, pc}

0801559c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801559c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 801559e:	301c      	adds	r0, #28
 80155a0:	f017 b92c 	b.w	802c7fc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080155a4 <_ZN8touchgfx3HAL5touchEll>:
 80155a4:	b530      	push	{r4, r5, lr}
 80155a6:	b087      	sub	sp, #28
 80155a8:	4604      	mov	r4, r0
 80155aa:	a804      	add	r0, sp, #16
 80155ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80155b0:	f005 fb9e 	bl	801acf0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80155b4:	9b04      	ldr	r3, [sp, #16]
 80155b6:	a906      	add	r1, sp, #24
 80155b8:	a803      	add	r0, sp, #12
 80155ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80155be:	9b05      	ldr	r3, [sp, #20]
 80155c0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80155c4:	f005 fbe6 	bl	801ad94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80155c8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80155cc:	f104 001c 	add.w	r0, r4, #28
 80155d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80155d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80155d8:	b189      	cbz	r1, 80155fe <_ZN8touchgfx3HAL5touchEll+0x5a>
 80155da:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	4613      	mov	r3, r2
 80155e2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80155e6:	462a      	mov	r2, r5
 80155e8:	f017 f918 	bl	802c81c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80155ec:	b128      	cbz	r0, 80155fa <_ZN8touchgfx3HAL5touchEll+0x56>
 80155ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80155f2:	6623      	str	r3, [r4, #96]	@ 0x60
 80155f4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80155f8:	6663      	str	r3, [r4, #100]	@ 0x64
 80155fa:	b007      	add	sp, #28
 80155fc:	bd30      	pop	{r4, r5, pc}
 80155fe:	f017 f94d 	bl	802c89c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015602:	2301      	movs	r3, #1
 8015604:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015608:	e7f1      	b.n	80155ee <_ZN8touchgfx3HAL5touchEll+0x4a>

0801560a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801560a:	b510      	push	{r4, lr}
 801560c:	2b00      	cmp	r3, #0
 801560e:	d046      	beq.n	801569e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015610:	ea81 0002 	eor.w	r0, r1, r2
 8015614:	07c4      	lsls	r4, r0, #31
 8015616:	d508      	bpl.n	801562a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015618:	440b      	add	r3, r1
 801561a:	3a01      	subs	r2, #1
 801561c:	428b      	cmp	r3, r1
 801561e:	d93e      	bls.n	801569e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015620:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015624:	f801 0b01 	strb.w	r0, [r1], #1
 8015628:	e7f8      	b.n	801561c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801562a:	07d0      	lsls	r0, r2, #31
 801562c:	bf42      	ittt	mi
 801562e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015632:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015636:	f801 0b01 	strbmi.w	r0, [r1], #1
 801563a:	2b01      	cmp	r3, #1
 801563c:	d911      	bls.n	8015662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801563e:	ea81 0402 	eor.w	r4, r1, r2
 8015642:	4610      	mov	r0, r2
 8015644:	07a4      	lsls	r4, r4, #30
 8015646:	d022      	beq.n	801568e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015648:	f023 0401 	bic.w	r4, r3, #1
 801564c:	440c      	add	r4, r1
 801564e:	428c      	cmp	r4, r1
 8015650:	4602      	mov	r2, r0
 8015652:	d904      	bls.n	801565e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015654:	8812      	ldrh	r2, [r2, #0]
 8015656:	3002      	adds	r0, #2
 8015658:	f821 2b02 	strh.w	r2, [r1], #2
 801565c:	e7f7      	b.n	801564e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801565e:	f003 0301 	and.w	r3, r3, #1
 8015662:	f023 0003 	bic.w	r0, r3, #3
 8015666:	4408      	add	r0, r1
 8015668:	4288      	cmp	r0, r1
 801566a:	4614      	mov	r4, r2
 801566c:	d904      	bls.n	8015678 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801566e:	6824      	ldr	r4, [r4, #0]
 8015670:	3204      	adds	r2, #4
 8015672:	f841 4b04 	str.w	r4, [r1], #4
 8015676:	e7f7      	b.n	8015668 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015678:	f003 0303 	and.w	r3, r3, #3
 801567c:	3a01      	subs	r2, #1
 801567e:	440b      	add	r3, r1
 8015680:	428b      	cmp	r3, r1
 8015682:	d90c      	bls.n	801569e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015684:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015688:	f801 0b01 	strb.w	r0, [r1], #1
 801568c:	e7f8      	b.n	8015680 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801568e:	0790      	lsls	r0, r2, #30
 8015690:	d0e7      	beq.n	8015662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015692:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015696:	3b02      	subs	r3, #2
 8015698:	f821 0b02 	strh.w	r0, [r1], #2
 801569c:	e7e1      	b.n	8015662 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801569e:	2001      	movs	r0, #1
 80156a0:	bd10      	pop	{r4, pc}

080156a2 <_ZN8touchgfx3HAL7noTouchEv>:
 80156a2:	b510      	push	{r4, lr}
 80156a4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80156a8:	4604      	mov	r4, r0
 80156aa:	b153      	cbz	r3, 80156c2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80156ac:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80156b0:	2101      	movs	r1, #1
 80156b2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80156b6:	301c      	adds	r0, #28
 80156b8:	f017 f8f0 	bl	802c89c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80156bc:	2300      	movs	r3, #0
 80156be:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80156c2:	bd10      	pop	{r4, pc}

080156c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80156c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156c8:	b085      	sub	sp, #20
 80156ca:	4604      	mov	r4, r0
 80156cc:	2000      	movs	r0, #0
 80156ce:	4699      	mov	r9, r3
 80156d0:	ad04      	add	r5, sp, #16
 80156d2:	460f      	mov	r7, r1
 80156d4:	4690      	mov	r8, r2
 80156d6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80156da:	69a0      	ldr	r0, [r4, #24]
 80156dc:	6806      	ldr	r6, [r0, #0]
 80156de:	9501      	str	r5, [sp, #4]
 80156e0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80156e4:	9500      	str	r5, [sp, #0]
 80156e6:	6835      	ldr	r5, [r6, #0]
 80156e8:	47a8      	blx	r5
 80156ea:	4d10      	ldr	r5, [pc, #64]	@ (801572c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80156ec:	4606      	mov	r6, r0
 80156ee:	f8a5 9000 	strh.w	r9, [r5]
 80156f2:	f7f5 fa25 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 80156f6:	6803      	ldr	r3, [r0, #0]
 80156f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156fa:	4798      	blx	r3
 80156fc:	b128      	cbz	r0, 801570a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80156fe:	2801      	cmp	r0, #1
 8015700:	d00b      	beq.n	801571a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015702:	4630      	mov	r0, r6
 8015704:	b005      	add	sp, #20
 8015706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801570a:	882b      	ldrh	r3, [r5, #0]
 801570c:	fb08 7203 	mla	r2, r8, r3, r7
 8015710:	9b03      	ldr	r3, [sp, #12]
 8015712:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015716:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015718:	e7f3      	b.n	8015702 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801571a:	882a      	ldrh	r2, [r5, #0]
 801571c:	9b03      	ldr	r3, [sp, #12]
 801571e:	fb08 7202 	mla	r2, r8, r2, r7
 8015722:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015726:	1a9a      	subs	r2, r3, r2
 8015728:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801572a:	e7ea      	b.n	8015702 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801572c:	200122be 	.word	0x200122be

08015730 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015732:	b08b      	sub	sp, #44	@ 0x2c
 8015734:	4617      	mov	r7, r2
 8015736:	4604      	mov	r4, r0
 8015738:	460e      	mov	r6, r1
 801573a:	461d      	mov	r5, r3
 801573c:	f7f5 fa00 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8015740:	6803      	ldr	r3, [r0, #0]
 8015742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015744:	4798      	blx	r3
 8015746:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801574a:	9007      	str	r0, [sp, #28]
 801574c:	4631      	mov	r1, r6
 801574e:	6822      	ldr	r2, [r4, #0]
 8015750:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015754:	4b0c      	ldr	r3, [pc, #48]	@ (8015788 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015756:	4620      	mov	r0, r4
 8015758:	881b      	ldrh	r3, [r3, #0]
 801575a:	9306      	str	r3, [sp, #24]
 801575c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015760:	9305      	str	r3, [sp, #20]
 8015762:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8015766:	9304      	str	r3, [sp, #16]
 8015768:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801576c:	9303      	str	r3, [sp, #12]
 801576e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015772:	9302      	str	r3, [sp, #8]
 8015774:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015778:	e9cd 5300 	strd	r5, r3, [sp]
 801577c:	463b      	mov	r3, r7
 801577e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8015780:	2200      	movs	r2, #0
 8015782:	47a8      	blx	r5
 8015784:	b00b      	add	sp, #44	@ 0x2c
 8015786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015788:	200122be 	.word	0x200122be

0801578c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801578c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015790:	4698      	mov	r8, r3
 8015792:	6803      	ldr	r3, [r0, #0]
 8015794:	b08b      	sub	sp, #44	@ 0x2c
 8015796:	4617      	mov	r7, r2
 8015798:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 801579a:	460e      	mov	r6, r1
 801579c:	4b13      	ldr	r3, [pc, #76]	@ (80157ec <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801579e:	4604      	mov	r4, r0
 80157a0:	f8b3 9000 	ldrh.w	r9, [r3]
 80157a4:	f7f5 f9cc 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 80157a8:	6803      	ldr	r3, [r0, #0]
 80157aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157ac:	4798      	blx	r3
 80157ae:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80157b2:	2200      	movs	r2, #0
 80157b4:	4631      	mov	r1, r6
 80157b6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80157ba:	2302      	movs	r3, #2
 80157bc:	4620      	mov	r0, r4
 80157be:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80157c2:	2301      	movs	r3, #1
 80157c4:	9305      	str	r3, [sp, #20]
 80157c6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80157ca:	9304      	str	r3, [sp, #16]
 80157cc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80157d0:	9303      	str	r3, [sp, #12]
 80157d2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80157d6:	9302      	str	r3, [sp, #8]
 80157d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80157dc:	e9cd 8300 	strd	r8, r3, [sp]
 80157e0:	463b      	mov	r3, r7
 80157e2:	47a8      	blx	r5
 80157e4:	b00b      	add	sp, #44	@ 0x2c
 80157e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157ea:	bf00      	nop
 80157ec:	200122be 	.word	0x200122be

080157f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80157f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157f4:	4698      	mov	r8, r3
 80157f6:	6803      	ldr	r3, [r0, #0]
 80157f8:	b087      	sub	sp, #28
 80157fa:	460e      	mov	r6, r1
 80157fc:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80157fe:	4617      	mov	r7, r2
 8015800:	4b0f      	ldr	r3, [pc, #60]	@ (8015840 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015802:	4604      	mov	r4, r0
 8015804:	f8b3 9000 	ldrh.w	r9, [r3]
 8015808:	f7f5 f99a 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 801580c:	6803      	ldr	r3, [r0, #0]
 801580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015810:	4798      	blx	r3
 8015812:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8015816:	463a      	mov	r2, r7
 8015818:	4631      	mov	r1, r6
 801581a:	f8cd 900c 	str.w	r9, [sp, #12]
 801581e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015822:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8015826:	4620      	mov	r0, r4
 8015828:	9302      	str	r3, [sp, #8]
 801582a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801582e:	9301      	str	r3, [sp, #4]
 8015830:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015834:	9300      	str	r3, [sp, #0]
 8015836:	4643      	mov	r3, r8
 8015838:	47a8      	blx	r5
 801583a:	b007      	add	sp, #28
 801583c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015840:	200122be 	.word	0x200122be

08015844 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	4604      	mov	r4, r0
 801584a:	b08f      	sub	sp, #60	@ 0x3c
 801584c:	4610      	mov	r0, r2
 801584e:	460d      	mov	r5, r1
 8015850:	4691      	mov	r9, r2
 8015852:	461e      	mov	r6, r3
 8015854:	f008 fda4 	bl	801e3a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015858:	2800      	cmp	r0, #0
 801585a:	f000 809d 	beq.w	8015998 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801585e:	6823      	ldr	r3, [r4, #0]
 8015860:	4620      	mov	r0, r4
 8015862:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80159fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015866:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801586c:	4798      	blx	r3
 801586e:	6823      	ldr	r3, [r4, #0]
 8015870:	4620      	mov	r0, r4
 8015872:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8015a00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015878:	4798      	blx	r3
 801587a:	f8bb 3000 	ldrh.w	r3, [fp]
 801587e:	4f5c      	ldr	r7, [pc, #368]	@ (80159f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015880:	9301      	str	r3, [sp, #4]
 8015882:	f8ba 3000 	ldrh.w	r3, [sl]
 8015886:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801588a:	4640      	mov	r0, r8
 801588c:	9302      	str	r3, [sp, #8]
 801588e:	883b      	ldrh	r3, [r7, #0]
 8015890:	9303      	str	r3, [sp, #12]
 8015892:	4b58      	ldr	r3, [pc, #352]	@ (80159f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015894:	881a      	ldrh	r2, [r3, #0]
 8015896:	9305      	str	r3, [sp, #20]
 8015898:	9204      	str	r2, [sp, #16]
 801589a:	f008 fed1 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801589e:	8038      	strh	r0, [r7, #0]
 80158a0:	4640      	mov	r0, r8
 80158a2:	f008 ff01 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80158a6:	9b05      	ldr	r3, [sp, #20]
 80158a8:	b280      	uxth	r0, r0
 80158aa:	8018      	strh	r0, [r3, #0]
 80158ac:	4b52      	ldr	r3, [pc, #328]	@ (80159f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d174      	bne.n	801599e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80158b4:	883b      	ldrh	r3, [r7, #0]
 80158b6:	f8aa 0000 	strh.w	r0, [sl]
 80158ba:	f8ab 3000 	strh.w	r3, [fp]
 80158be:	4648      	mov	r0, r9
 80158c0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80158c4:	f008 fd6c 	bl	801e3a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80158c8:	2200      	movs	r2, #0
 80158ca:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80158ce:	4611      	mov	r1, r2
 80158d0:	4628      	mov	r0, r5
 80158d2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80158d6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80158da:	f7f4 ff56 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 80158de:	2301      	movs	r3, #1
 80158e0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80158e4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80158e8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	dd5c      	ble.n	80159aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80158f0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	dd58      	ble.n	80159aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80158f8:	462a      	mov	r2, r5
 80158fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80158fc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015900:	6851      	ldr	r1, [r2, #4]
 8015902:	c303      	stmia	r3!, {r0, r1}
 8015904:	4631      	mov	r1, r6
 8015906:	a80a      	add	r0, sp, #40	@ 0x28
 8015908:	f7ff f962 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801590c:	4b38      	ldr	r3, [pc, #224]	@ (80159f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801590e:	2100      	movs	r1, #0
 8015910:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015914:	4b37      	ldr	r3, [pc, #220]	@ (80159f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015916:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801591a:	aa0a      	add	r2, sp, #40	@ 0x28
 801591c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015920:	910c      	str	r1, [sp, #48]	@ 0x30
 8015922:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015926:	ab08      	add	r3, sp, #32
 8015928:	e892 0003 	ldmia.w	r2, {r0, r1}
 801592c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015930:	4618      	mov	r0, r3
 8015932:	a90c      	add	r1, sp, #48	@ 0x30
 8015934:	f7ff f94c 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8015938:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801593a:	2b00      	cmp	r3, #0
 801593c:	d13c      	bne.n	80159b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801593e:	2000      	movs	r0, #0
 8015940:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8015944:	2600      	movs	r6, #0
 8015946:	696b      	ldr	r3, [r5, #20]
 8015948:	a908      	add	r1, sp, #32
 801594a:	682a      	ldr	r2, [r5, #0]
 801594c:	4628      	mov	r0, r5
 801594e:	9305      	str	r3, [sp, #20]
 8015950:	616e      	str	r6, [r5, #20]
 8015952:	6892      	ldr	r2, [r2, #8]
 8015954:	4790      	blx	r2
 8015956:	9b05      	ldr	r3, [sp, #20]
 8015958:	4652      	mov	r2, sl
 801595a:	4649      	mov	r1, r9
 801595c:	616b      	str	r3, [r5, #20]
 801595e:	4628      	mov	r0, r5
 8015960:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8015964:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8015968:	f7f4 ff0f 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 801596c:	9a01      	ldr	r2, [sp, #4]
 801596e:	4b23      	ldr	r3, [pc, #140]	@ (80159fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015970:	4620      	mov	r0, r4
 8015972:	801a      	strh	r2, [r3, #0]
 8015974:	9a02      	ldr	r2, [sp, #8]
 8015976:	4b22      	ldr	r3, [pc, #136]	@ (8015a00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015978:	801a      	strh	r2, [r3, #0]
 801597a:	9a03      	ldr	r2, [sp, #12]
 801597c:	4b1c      	ldr	r3, [pc, #112]	@ (80159f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801597e:	801a      	strh	r2, [r3, #0]
 8015980:	4b1c      	ldr	r3, [pc, #112]	@ (80159f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015982:	9a04      	ldr	r2, [sp, #16]
 8015984:	801a      	strh	r2, [r3, #0]
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801598e:	4798      	blx	r3
 8015990:	6823      	ldr	r3, [r4, #0]
 8015992:	4620      	mov	r0, r4
 8015994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015996:	4798      	blx	r3
 8015998:	b00f      	add	sp, #60	@ 0x3c
 801599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599e:	883b      	ldrh	r3, [r7, #0]
 80159a0:	f8ab 0000 	strh.w	r0, [fp]
 80159a4:	f8aa 3000 	strh.w	r3, [sl]
 80159a8:	e789      	b.n	80158be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80159aa:	462a      	mov	r2, r5
 80159ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80159ae:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80159b2:	6851      	ldr	r1, [r2, #4]
 80159b4:	c303      	stmia	r3!, {r0, r1}
 80159b6:	e7a9      	b.n	801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80159b8:	a807      	add	r0, sp, #28
 80159ba:	f008 ffb7 	bl	801e92c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80159be:	4606      	mov	r6, r0
 80159c0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80159c2:	6803      	ldr	r3, [r0, #0]
 80159c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159c6:	4798      	blx	r3
 80159c8:	4286      	cmp	r6, r0
 80159ca:	d1b8      	bne.n	801593e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80159cc:	f7f5 f8b8 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 80159d0:	6803      	ldr	r3, [r0, #0]
 80159d2:	4606      	mov	r6, r0
 80159d4:	a807      	add	r0, sp, #28
 80159d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80159d8:	9305      	str	r3, [sp, #20]
 80159da:	f008 ffa7 	bl	801e92c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80159de:	9b05      	ldr	r3, [sp, #20]
 80159e0:	4601      	mov	r1, r0
 80159e2:	4630      	mov	r0, r6
 80159e4:	4798      	blx	r3
 80159e6:	f080 0001 	eor.w	r0, r0, #1
 80159ea:	b2c0      	uxtb	r0, r0
 80159ec:	e7a8      	b.n	8015940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80159ee:	bf00      	nop
 80159f0:	200122b8 	.word	0x200122b8
 80159f4:	200122ba 	.word	0x200122ba
 80159f8:	200122bc 	.word	0x200122bc
 80159fc:	200122be 	.word	0x200122be
 8015a00:	200122c0 	.word	0x200122c0

08015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015a04:	4b07      	ldr	r3, [pc, #28]	@ (8015a24 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015a06:	b510      	push	{r4, lr}
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	b13b      	cbz	r3, 8015a1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015a0e:	6803      	ldr	r3, [r0, #0]
 8015a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a12:	4798      	blx	r3
 8015a14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015a16:	4283      	cmp	r3, r0
 8015a18:	d101      	bne.n	8015a1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015a1a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8015a1c:	bd10      	pop	{r4, pc}
 8015a1e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8015a20:	e7fc      	b.n	8015a1c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015a22:	bf00      	nop
 8015a24:	200122c2 	.word	0x200122c2

08015a28 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	461d      	mov	r5, r3
 8015a2e:	b08a      	sub	sp, #40	@ 0x28
 8015a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a34:	4690      	mov	r8, r2
 8015a36:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8015a3a:	2400      	movs	r4, #0
 8015a3c:	4607      	mov	r7, r0
 8015a3e:	fb06 8505 	mla	r5, r6, r5, r8
 8015a42:	9404      	str	r4, [sp, #16]
 8015a44:	f88d 4020 	strb.w	r4, [sp, #32]
 8015a48:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015a4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015a50:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015a54:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015a58:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015a5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015a60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015a64:	f7ff ffce 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a68:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015a72:	a901      	add	r1, sp, #4
 8015a74:	9505      	str	r5, [sp, #20]
 8015a76:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015a7a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8015a7e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015a82:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015a86:	6803      	ldr	r3, [r0, #0]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	4798      	blx	r3
 8015a8c:	b00a      	add	sp, #40	@ 0x28
 8015a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a92 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015a92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a96:	b08b      	sub	sp, #44	@ 0x2c
 8015a98:	2400      	movs	r4, #0
 8015a9a:	4691      	mov	r9, r2
 8015a9c:	461d      	mov	r5, r3
 8015a9e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8015aa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015aa6:	4688      	mov	r8, r1
 8015aa8:	4607      	mov	r7, r0
 8015aaa:	9404      	str	r4, [sp, #16]
 8015aac:	fb06 9505 	mla	r5, r6, r5, r9
 8015ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ab4:	f7ff ffa6 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ab8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015abc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015ac6:	a901      	add	r1, sp, #4
 8015ac8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015acc:	9505      	str	r5, [sp, #20]
 8015ace:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015ad2:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015ad6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015ada:	f8cd 8010 	str.w	r8, [sp, #16]
 8015ade:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015ae2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015ae6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015aea:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015aee:	6803      	ldr	r3, [r0, #0]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	4798      	blx	r3
 8015af4:	b00b      	add	sp, #44	@ 0x2c
 8015af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b00:	b08a      	sub	sp, #40	@ 0x28
 8015b02:	4698      	mov	r8, r3
 8015b04:	2300      	movs	r3, #0
 8015b06:	4606      	mov	r6, r0
 8015b08:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015b0c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8015b10:	2d0b      	cmp	r5, #11
 8015b12:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8015b16:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8015b1a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8015b1e:	9304      	str	r3, [sp, #16]
 8015b20:	d137      	bne.n	8015b92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015b22:	2380      	movs	r3, #128	@ 0x80
 8015b24:	f88d 0020 	strb.w	r0, [sp, #32]
 8015b28:	4630      	mov	r0, r6
 8015b2a:	9203      	str	r2, [sp, #12]
 8015b2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015b30:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015b34:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015b38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015b3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015b40:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015b44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b48:	f7ff ff5c 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b4c:	2c0b      	cmp	r4, #11
 8015b4e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015b52:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015b56:	bf94      	ite	ls
 8015b58:	4b19      	ldrls	r3, [pc, #100]	@ (8015bc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015b5a:	2100      	movhi	r1, #0
 8015b5c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015b60:	bf98      	it	ls
 8015b62:	5d19      	ldrbls	r1, [r3, r4]
 8015b64:	fb02 8307 	mla	r3, r2, r7, r8
 8015b68:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015b6c:	10c9      	asrs	r1, r1, #3
 8015b6e:	fb01 0003 	mla	r0, r1, r3, r0
 8015b72:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8015b76:	a901      	add	r1, sp, #4
 8015b78:	9005      	str	r0, [sp, #20]
 8015b7a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015b7e:	2300      	movs	r3, #0
 8015b80:	6870      	ldr	r0, [r6, #4]
 8015b82:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015b86:	6803      	ldr	r3, [r0, #0]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	4798      	blx	r3
 8015b8c:	b00a      	add	sp, #40	@ 0x28
 8015b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b92:	2d02      	cmp	r5, #2
 8015b94:	d109      	bne.n	8015baa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015b96:	28ff      	cmp	r0, #255	@ 0xff
 8015b98:	d105      	bne.n	8015ba6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015b9a:	f1bc 0f00 	cmp.w	ip, #0
 8015b9e:	bf14      	ite	ne
 8015ba0:	2340      	movne	r3, #64	@ 0x40
 8015ba2:	2320      	moveq	r3, #32
 8015ba4:	e7be      	b.n	8015b24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ba6:	2340      	movs	r3, #64	@ 0x40
 8015ba8:	e7bc      	b.n	8015b24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015baa:	28ff      	cmp	r0, #255	@ 0xff
 8015bac:	d105      	bne.n	8015bba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015bae:	f1bc 0f00 	cmp.w	ip, #0
 8015bb2:	bf14      	ite	ne
 8015bb4:	2304      	movne	r3, #4
 8015bb6:	2301      	moveq	r3, #1
 8015bb8:	e7b4      	b.n	8015b24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015bba:	2304      	movs	r3, #4
 8015bbc:	e7b2      	b.n	8015b24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015bbe:	bf00      	nop
 8015bc0:	080315ac 	.word	0x080315ac

08015bc4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc8:	b08b      	sub	sp, #44	@ 0x2c
 8015bca:	461d      	mov	r5, r3
 8015bcc:	2400      	movs	r4, #0
 8015bce:	4688      	mov	r8, r1
 8015bd0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8015bd4:	4693      	mov	fp, r2
 8015bd6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8015bda:	4607      	mov	r7, r0
 8015bdc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015be0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8015be4:	9404      	str	r4, [sp, #16]
 8015be6:	bf14      	ite	ne
 8015be8:	2308      	movne	r3, #8
 8015bea:	2302      	moveq	r3, #2
 8015bec:	fb05 b50a 	mla	r5, r5, sl, fp
 8015bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015bf4:	f7ff ff06 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015bf8:	2e0b      	cmp	r6, #11
 8015bfa:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015bfe:	a901      	add	r1, sp, #4
 8015c00:	bf98      	it	ls
 8015c02:	4b13      	ldrls	r3, [pc, #76]	@ (8015c50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015c04:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015c08:	bf98      	it	ls
 8015c0a:	5d9c      	ldrbls	r4, [r3, r6]
 8015c0c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015c10:	10e4      	asrs	r4, r4, #3
 8015c12:	f8cd 8010 	str.w	r8, [sp, #16]
 8015c16:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015c1a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015c1e:	fb04 0405 	mla	r4, r4, r5, r0
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015c28:	2300      	movs	r3, #0
 8015c2a:	9405      	str	r4, [sp, #20]
 8015c2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c30:	f88d 9020 	strb.w	r9, [sp, #32]
 8015c34:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8015c38:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015c3c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015c40:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8015c44:	6803      	ldr	r3, [r0, #0]
 8015c46:	685b      	ldr	r3, [r3, #4]
 8015c48:	4798      	blx	r3
 8015c4a:	b00b      	add	sp, #44	@ 0x2c
 8015c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c50:	080315ac 	.word	0x080315ac

08015c54 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c58:	461e      	mov	r6, r3
 8015c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8015c84 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015c5c:	460f      	mov	r7, r1
 8015c5e:	4690      	mov	r8, r2
 8015c60:	881d      	ldrh	r5, [r3, #0]
 8015c62:	f7f4 ff6d 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8015c66:	6803      	ldr	r3, [r0, #0]
 8015c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c6a:	4798      	blx	r3
 8015c6c:	280b      	cmp	r0, #11
 8015c6e:	bf96      	itet	ls
 8015c70:	4b05      	ldrls	r3, [pc, #20]	@ (8015c88 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015c72:	2400      	movhi	r4, #0
 8015c74:	5c1c      	ldrbls	r4, [r3, r0]
 8015c76:	fb08 7005 	mla	r0, r8, r5, r7
 8015c7a:	10e4      	asrs	r4, r4, #3
 8015c7c:	fb04 6000 	mla	r0, r4, r0, r6
 8015c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c84:	200122be 	.word	0x200122be
 8015c88:	080315ac 	.word	0x080315ac

08015c8c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8e:	b08b      	sub	sp, #44	@ 0x2c
 8015c90:	461f      	mov	r7, r3
 8015c92:	4604      	mov	r4, r0
 8015c94:	4616      	mov	r6, r2
 8015c96:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015c9a:	2500      	movs	r5, #0
 8015c9c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015ca0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015ca4:	9504      	str	r5, [sp, #16]
 8015ca6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015caa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015cae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015cb2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015cb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015cba:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015cbe:	f88d 3020 	strb.w	r3, [sp, #32]
 8015cc2:	f7ff fe9f 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015cc6:	463a      	mov	r2, r7
 8015cc8:	4631      	mov	r1, r6
 8015cca:	4603      	mov	r3, r0
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f7ff ffc1 	bl	8015c54 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8015d0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015cd4:	9005      	str	r0, [sp, #20]
 8015cd6:	881b      	ldrh	r3, [r3, #0]
 8015cd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015cdc:	f7f4 ff30 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8015ce0:	6803      	ldr	r3, [r0, #0]
 8015ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ce4:	4798      	blx	r3
 8015ce6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015ce8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8015cec:	a901      	add	r1, sp, #4
 8015cee:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015cf2:	9304      	str	r3, [sp, #16]
 8015cf4:	6860      	ldr	r0, [r4, #4]
 8015cf6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015cfa:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8015cfe:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015d02:	6803      	ldr	r3, [r0, #0]
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	4798      	blx	r3
 8015d08:	b00b      	add	sp, #44	@ 0x2c
 8015d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d0c:	200122be 	.word	0x200122be

08015d10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d12:	b08d      	sub	sp, #52	@ 0x34
 8015d14:	2501      	movs	r5, #1
 8015d16:	4604      	mov	r4, r0
 8015d18:	466b      	mov	r3, sp
 8015d1a:	9503      	str	r5, [sp, #12]
 8015d1c:	e883 0006 	stmia.w	r3, {r1, r2}
 8015d20:	2300      	movs	r3, #0
 8015d22:	f8bd 6000 	ldrh.w	r6, [sp]
 8015d26:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015d2a:	9306      	str	r3, [sp, #24]
 8015d2c:	6803      	ldr	r3, [r0, #0]
 8015d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d30:	4798      	blx	r3
 8015d32:	463a      	mov	r2, r7
 8015d34:	4631      	mov	r1, r6
 8015d36:	4603      	mov	r3, r0
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7ff ff8b 	bl	8015c54 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015d3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015d40:	9004      	str	r0, [sp, #16]
 8015d42:	9307      	str	r3, [sp, #28]
 8015d44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015d48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015d4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015d50:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015d54:	4b0e      	ldr	r3, [pc, #56]	@ (8015d90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015d56:	881b      	ldrh	r3, [r3, #0]
 8015d58:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015d5c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015d60:	f7f4 feee 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8015d64:	6803      	ldr	r3, [r0, #0]
 8015d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d68:	4798      	blx	r3
 8015d6a:	23ff      	movs	r3, #255	@ 0xff
 8015d6c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015d70:	a903      	add	r1, sp, #12
 8015d72:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015d76:	6860      	ldr	r0, [r4, #4]
 8015d78:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015d7c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015d80:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015d84:	6803      	ldr	r3, [r0, #0]
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	4798      	blx	r3
 8015d8a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015d8c:	b00d      	add	sp, #52	@ 0x34
 8015d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d90:	200122be 	.word	0x200122be

08015d94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d98:	b08c      	sub	sp, #48	@ 0x30
 8015d9a:	461e      	mov	r6, r3
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	4604      	mov	r4, r0
 8015da0:	466d      	mov	r5, sp
 8015da2:	9306      	str	r3, [sp, #24]
 8015da4:	6803      	ldr	r3, [r0, #0]
 8015da6:	e885 0006 	stmia.w	r5, {r1, r2}
 8015daa:	2501      	movs	r5, #1
 8015dac:	f8bd 7000 	ldrh.w	r7, [sp]
 8015db0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015db4:	9503      	str	r5, [sp, #12]
 8015db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015db8:	4798      	blx	r3
 8015dba:	4642      	mov	r2, r8
 8015dbc:	4639      	mov	r1, r7
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	4620      	mov	r0, r4
 8015dc2:	f7ff ff47 	bl	8015c54 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015dc6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015dca:	9004      	str	r0, [sp, #16]
 8015dcc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015dd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015dd4:	9607      	str	r6, [sp, #28]
 8015dd6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015dda:	4b10      	ldr	r3, [pc, #64]	@ (8015e1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015ddc:	881b      	ldrh	r3, [r3, #0]
 8015dde:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015de2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015de4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015de8:	f7f4 feaa 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8015dec:	6803      	ldr	r3, [r0, #0]
 8015dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015df0:	4798      	blx	r3
 8015df2:	23ff      	movs	r3, #255	@ 0xff
 8015df4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015df8:	a903      	add	r1, sp, #12
 8015dfa:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015dfe:	6860      	ldr	r0, [r4, #4]
 8015e00:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015e04:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015e08:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015e0c:	6803      	ldr	r3, [r0, #0]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	4798      	blx	r3
 8015e12:	4630      	mov	r0, r6
 8015e14:	b00c      	add	sp, #48	@ 0x30
 8015e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e1a:	bf00      	nop
 8015e1c:	200122be 	.word	0x200122be

08015e20 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e22:	b085      	sub	sp, #20
 8015e24:	4605      	mov	r5, r0
 8015e26:	ac02      	add	r4, sp, #8
 8015e28:	e884 0006 	stmia.w	r4, {r1, r2}
 8015e2c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015e30:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015e34:	f7ff fde6 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e38:	4631      	mov	r1, r6
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	463a      	mov	r2, r7
 8015e3e:	4628      	mov	r0, r5
 8015e40:	f7ff ff08 	bl	8015c54 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015e44:	4a05      	ldr	r2, [pc, #20]	@ (8015e5c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015e46:	682b      	ldr	r3, [r5, #0]
 8015e48:	8812      	ldrh	r2, [r2, #0]
 8015e4a:	9200      	str	r2, [sp, #0]
 8015e4c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015e4e:	4603      	mov	r3, r0
 8015e50:	4628      	mov	r0, r5
 8015e52:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015e56:	47b0      	blx	r6
 8015e58:	b005      	add	sp, #20
 8015e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e5c:	200122be 	.word	0x200122be

08015e60 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015e60:	b570      	push	{r4, r5, r6, lr}
 8015e62:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8015e66:	4604      	mov	r4, r0
 8015e68:	b19b      	cbz	r3, 8015e92 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015e6a:	2002      	movs	r0, #2
 8015e6c:	f7fc f92a 	bl	80120c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015e70:	2300      	movs	r3, #0
 8015e72:	4620      	mov	r0, r4
 8015e74:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015e78:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8015e7c:	6823      	ldr	r3, [r4, #0]
 8015e7e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8015e82:	f7ff fdbf 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e86:	4601      	mov	r1, r0
 8015e88:	4620      	mov	r0, r4
 8015e8a:	462b      	mov	r3, r5
 8015e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e90:	4718      	bx	r3
 8015e92:	bd70      	pop	{r4, r5, r6, pc}

08015e94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015e94:	b538      	push	{r3, r4, r5, lr}
 8015e96:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8015e9a:	4604      	mov	r4, r0
 8015e9c:	460d      	mov	r5, r1
 8015e9e:	428b      	cmp	r3, r1
 8015ea0:	d006      	beq.n	8015eb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8015ea2:	6803      	ldr	r3, [r0, #0]
 8015ea4:	b929      	cbnz	r1, 8015eb2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015ea6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8015eaa:	4798      	blx	r3
 8015eac:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8015eb0:	bd38      	pop	{r3, r4, r5, pc}
 8015eb2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8015eb6:	e7f8      	b.n	8015eaa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015eb8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8015ef0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015eba:	b510      	push	{r4, lr}
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	b95b      	cbnz	r3, 8015eda <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ec2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015ec6:	2b02      	cmp	r3, #2
 8015ec8:	d007      	beq.n	8015eda <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015eca:	6840      	ldr	r0, [r0, #4]
 8015ecc:	f000 f928 	bl	8016120 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015ed0:	b118      	cbz	r0, 8015eda <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ed2:	6862      	ldr	r2, [r4, #4]
 8015ed4:	7a53      	ldrb	r3, [r2, #9]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d0fc      	beq.n	8015ed4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015eda:	f7fc fb81 	bl	80125e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015ede:	4620      	mov	r0, r4
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	f7ff ffd7 	bl	8015e94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015ee6:	4620      	mov	r0, r4
 8015ee8:	f7ff fd8c 	bl	8015a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015eec:	bd10      	pop	{r4, pc}
 8015eee:	bf00      	nop
 8015ef0:	200122c2 	.word	0x200122c2

08015ef4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8015ef4:	b570      	push	{r4, r5, r6, lr}
 8015ef6:	4604      	mov	r4, r0
 8015ef8:	6803      	ldr	r3, [r0, #0]
 8015efa:	b919      	cbnz	r1, 8015f04 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f02:	4718      	bx	r3
 8015f04:	2200      	movs	r2, #0
 8015f06:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8015f0a:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8015f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f10:	4798      	blx	r3
 8015f12:	6863      	ldr	r3, [r4, #4]
 8015f14:	2101      	movs	r1, #1
 8015f16:	4605      	mov	r5, r0
 8015f18:	4620      	mov	r0, r4
 8015f1a:	7299      	strb	r1, [r3, #10]
 8015f1c:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015f20:	f7ff ffb8 	bl	8015e94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015f24:	4628      	mov	r0, r5
 8015f26:	bd70      	pop	{r4, r5, r6, pc}

08015f28 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015f28:	4770      	bx	lr

08015f2a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015f2a:	2000      	movs	r0, #0
 8015f2c:	4770      	bx	lr

08015f2e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015f2e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015f32:	1a13      	subs	r3, r2, r0
 8015f34:	4258      	negs	r0, r3
 8015f36:	4158      	adcs	r0, r3
 8015f38:	4770      	bx	lr

08015f3a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015f3a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015f3e:	1a9b      	subs	r3, r3, r2
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	bfdc      	itt	le
 8015f44:	6882      	ldrle	r2, [r0, #8]
 8015f46:	189b      	addle	r3, r3, r2
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	bfcc      	ite	gt
 8015f4c:	2000      	movgt	r0, #0
 8015f4e:	2001      	movle	r0, #1
 8015f50:	4770      	bx	lr

08015f52 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015f52:	6902      	ldr	r2, [r0, #16]
 8015f54:	6843      	ldr	r3, [r0, #4]
 8015f56:	2024      	movs	r0, #36	@ 0x24
 8015f58:	fb00 3002 	mla	r0, r0, r2, r3
 8015f5c:	4770      	bx	lr

08015f5e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015f5e:	6803      	ldr	r3, [r0, #0]
 8015f60:	691b      	ldr	r3, [r3, #16]
 8015f62:	4718      	bx	r3

08015f64 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015f64:	2301      	movs	r3, #1
 8015f66:	b570      	push	{r4, r5, r6, lr}
 8015f68:	7203      	strb	r3, [r0, #8]
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	6840      	ldr	r0, [r0, #4]
 8015f6e:	6803      	ldr	r3, [r0, #0]
 8015f70:	699b      	ldr	r3, [r3, #24]
 8015f72:	4798      	blx	r3
 8015f74:	6803      	ldr	r3, [r0, #0]
 8015f76:	4605      	mov	r5, r0
 8015f78:	2b40      	cmp	r3, #64	@ 0x40
 8015f7a:	d00c      	beq.n	8015f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f7c:	d810      	bhi.n	8015fa0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015f7e:	2b04      	cmp	r3, #4
 8015f80:	d01d      	beq.n	8015fbe <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015f82:	d804      	bhi.n	8015f8e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d006      	beq.n	8015f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f88:	2b02      	cmp	r3, #2
 8015f8a:	d02c      	beq.n	8015fe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015f8c:	bd70      	pop	{r4, r5, r6, pc}
 8015f8e:	2b08      	cmp	r3, #8
 8015f90:	d01d      	beq.n	8015fce <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015f92:	2b20      	cmp	r3, #32
 8015f94:	d1fa      	bne.n	8015f8c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015f96:	6823      	ldr	r3, [r4, #0]
 8015f98:	4620      	mov	r0, r4
 8015f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f9c:	4798      	blx	r3
 8015f9e:	e013      	b.n	8015fc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015fa4:	d0f7      	beq.n	8015f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015fa6:	d804      	bhi.n	8015fb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015fa8:	2b80      	cmp	r3, #128	@ 0x80
 8015faa:	d0f4      	beq.n	8015f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015fb0:	e7f0      	b.n	8015f94 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015fb6:	d0ee      	beq.n	8015f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015fbc:	e7e5      	b.n	8015f8a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015fbe:	6823      	ldr	r3, [r4, #0]
 8015fc0:	7f01      	ldrb	r1, [r0, #28]
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fc6:	4798      	blx	r3
 8015fc8:	6823      	ldr	r3, [r4, #0]
 8015fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fcc:	e006      	b.n	8015fdc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015fce:	6823      	ldr	r3, [r4, #0]
 8015fd0:	7f01      	ldrb	r1, [r0, #28]
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fd6:	4798      	blx	r3
 8015fd8:	6823      	ldr	r3, [r4, #0]
 8015fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015fdc:	4629      	mov	r1, r5
 8015fde:	4620      	mov	r0, r4
 8015fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fe4:	4718      	bx	r3
 8015fe6:	6823      	ldr	r3, [r4, #0]
 8015fe8:	4620      	mov	r0, r4
 8015fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fec:	4798      	blx	r3
 8015fee:	e7f3      	b.n	8015fd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015ff0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015ff0:	4770      	bx	lr

08015ff2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015ff2:	4770      	bx	lr

08015ff4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015ff4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015ff8:	b510      	push	{r4, lr}
 8015ffa:	1ad2      	subs	r2, r2, r3
 8015ffc:	2a00      	cmp	r2, #0
 8015ffe:	bfdc      	itt	le
 8016000:	6884      	ldrle	r4, [r0, #8]
 8016002:	1912      	addle	r2, r2, r4
 8016004:	2a01      	cmp	r2, #1
 8016006:	dd16      	ble.n	8016036 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016008:	6842      	ldr	r2, [r0, #4]
 801600a:	2424      	movs	r4, #36	@ 0x24
 801600c:	fb04 2303 	mla	r3, r4, r3, r2
 8016010:	f101 0220 	add.w	r2, r1, #32
 8016014:	f851 4b04 	ldr.w	r4, [r1], #4
 8016018:	4291      	cmp	r1, r2
 801601a:	f843 4b04 	str.w	r4, [r3], #4
 801601e:	d1f9      	bne.n	8016014 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016020:	780a      	ldrb	r2, [r1, #0]
 8016022:	701a      	strb	r2, [r3, #0]
 8016024:	68c3      	ldr	r3, [r0, #12]
 8016026:	6882      	ldr	r2, [r0, #8]
 8016028:	f3bf 8f5b 	dmb	ish
 801602c:	3301      	adds	r3, #1
 801602e:	429a      	cmp	r2, r3
 8016030:	bfd8      	it	le
 8016032:	1a9b      	suble	r3, r3, r2
 8016034:	60c3      	str	r3, [r0, #12]
 8016036:	bd10      	pop	{r4, pc}

08016038 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016038:	6903      	ldr	r3, [r0, #16]
 801603a:	6882      	ldr	r2, [r0, #8]
 801603c:	f3bf 8f5b 	dmb	ish
 8016040:	3301      	adds	r3, #1
 8016042:	429a      	cmp	r2, r3
 8016044:	bfd8      	it	le
 8016046:	1a9b      	suble	r3, r3, r2
 8016048:	6103      	str	r3, [r0, #16]
 801604a:	4770      	bx	lr

0801604c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801604c:	b570      	push	{r4, r5, r6, lr}
 801604e:	4604      	mov	r4, r0
 8016050:	460e      	mov	r6, r1
 8016052:	6860      	ldr	r0, [r4, #4]
 8016054:	6803      	ldr	r3, [r0, #0]
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	4798      	blx	r3
 801605a:	2800      	cmp	r0, #0
 801605c:	d1f9      	bne.n	8016052 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801605e:	4d0d      	ldr	r5, [pc, #52]	@ (8016094 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016060:	6828      	ldr	r0, [r5, #0]
 8016062:	6803      	ldr	r3, [r0, #0]
 8016064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016066:	4798      	blx	r3
 8016068:	f7fc fad4 	bl	8012614 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801606c:	6828      	ldr	r0, [r5, #0]
 801606e:	2101      	movs	r1, #1
 8016070:	f7ff ff10 	bl	8015e94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016074:	6860      	ldr	r0, [r4, #4]
 8016076:	4631      	mov	r1, r6
 8016078:	6803      	ldr	r3, [r0, #0]
 801607a:	689b      	ldr	r3, [r3, #8]
 801607c:	4798      	blx	r3
 801607e:	6823      	ldr	r3, [r4, #0]
 8016080:	4620      	mov	r0, r4
 8016082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016084:	4798      	blx	r3
 8016086:	6828      	ldr	r0, [r5, #0]
 8016088:	6803      	ldr	r3, [r0, #0]
 801608a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801608e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016090:	4718      	bx	r3
 8016092:	bf00      	nop
 8016094:	200122c4 	.word	0x200122c4

08016098 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016098:	b508      	push	{r3, lr}
 801609a:	f7fc faa1 	bl	80125e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801609e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80160a2:	f7fc baab 	b.w	80125fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080160a6 <_ZN8touchgfx13DMA_Interface5startEv>:
 80160a6:	b510      	push	{r4, lr}
 80160a8:	4604      	mov	r4, r0
 80160aa:	6840      	ldr	r0, [r0, #4]
 80160ac:	6803      	ldr	r3, [r0, #0]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	4798      	blx	r3
 80160b2:	b948      	cbnz	r0, 80160c8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80160b4:	7a63      	ldrb	r3, [r4, #9]
 80160b6:	b13b      	cbz	r3, 80160c8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80160b8:	7a23      	ldrb	r3, [r4, #8]
 80160ba:	b92b      	cbnz	r3, 80160c8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80160bc:	6823      	ldr	r3, [r4, #0]
 80160be:	4620      	mov	r0, r4
 80160c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160c6:	4718      	bx	r3
 80160c8:	bd10      	pop	{r4, pc}

080160ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80160ca:	b570      	push	{r4, r5, r6, lr}
 80160cc:	4604      	mov	r4, r0
 80160ce:	6840      	ldr	r0, [r0, #4]
 80160d0:	6803      	ldr	r3, [r0, #0]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	4798      	blx	r3
 80160d6:	4605      	mov	r5, r0
 80160d8:	b930      	cbnz	r0, 80160e8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80160da:	7a23      	ldrb	r3, [r4, #8]
 80160dc:	b123      	cbz	r3, 80160e8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80160de:	6860      	ldr	r0, [r4, #4]
 80160e0:	6803      	ldr	r3, [r0, #0]
 80160e2:	695b      	ldr	r3, [r3, #20]
 80160e4:	4798      	blx	r3
 80160e6:	7225      	strb	r5, [r4, #8]
 80160e8:	6860      	ldr	r0, [r4, #4]
 80160ea:	6803      	ldr	r3, [r0, #0]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	4798      	blx	r3
 80160f0:	b928      	cbnz	r0, 80160fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80160f2:	6823      	ldr	r3, [r4, #0]
 80160f4:	4620      	mov	r0, r4
 80160f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160fc:	4718      	bx	r3
 80160fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016102:	f7fc ba93 	b.w	801262c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08016108 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016108:	b510      	push	{r4, lr}
 801610a:	6082      	str	r2, [r0, #8]
 801610c:	2200      	movs	r2, #0
 801610e:	4c03      	ldr	r4, [pc, #12]	@ (801611c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016110:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016114:	e9c0 4100 	strd	r4, r1, [r0]
 8016118:	bd10      	pop	{r4, pc}
 801611a:	bf00      	nop
 801611c:	080316e8 	.word	0x080316e8

08016120 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016120:	6840      	ldr	r0, [r0, #4]
 8016122:	6803      	ldr	r3, [r0, #0]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4718      	bx	r3

08016128 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 8016128:	b410      	push	{r4}
 801612a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 801612e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016132:	68c2      	ldr	r2, [r0, #12]
 8016134:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8016138:	4620      	mov	r0, r4
 801613a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801613e:	f7fc bf9d 	b.w	801307c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>

08016142 <_ZNK8touchgfx15PainterARGB88888tearDownEv>:
 8016142:	f7fc bf69 	b.w	8013018 <_ZN8touchgfx5paint8tearDownEv>
	...

08016148 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801614a:	6803      	ldr	r3, [r0, #0]
 801614c:	460d      	mov	r5, r1
 801614e:	4604      	mov	r4, r0
 8016150:	4601      	mov	r1, r0
 8016152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016154:	a802      	add	r0, sp, #8
 8016156:	4798      	blx	r3
 8016158:	6828      	ldr	r0, [r5, #0]
 801615a:	6869      	ldr	r1, [r5, #4]
 801615c:	466b      	mov	r3, sp
 801615e:	c303      	stmia	r3!, {r0, r1}
 8016160:	4668      	mov	r0, sp
 8016162:	4619      	mov	r1, r3
 8016164:	f7fe fd34 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8016168:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801616a:	b188      	cbz	r0, 8016190 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801616c:	6803      	ldr	r3, [r0, #0]
 801616e:	1d21      	adds	r1, r4, #4
 8016170:	68db      	ldr	r3, [r3, #12]
 8016172:	4798      	blx	r3
 8016174:	b160      	cbz	r0, 8016190 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016176:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	dd08      	ble.n	8016190 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801617e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8016182:	2d00      	cmp	r5, #0
 8016184:	dd04      	ble.n	8016190 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016186:	4a2b      	ldr	r2, [pc, #172]	@ (8016234 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8016188:	7812      	ldrb	r2, [r2, #0]
 801618a:	b11a      	cbz	r2, 8016194 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801618c:	2a01      	cmp	r2, #1
 801618e:	d029      	beq.n	80161e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8016190:	b004      	add	sp, #16
 8016192:	bd70      	pop	{r4, r5, r6, pc}
 8016194:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016198:	441d      	add	r5, r3
 801619a:	b2ad      	uxth	r5, r5
 801619c:	b22e      	sxth	r6, r5
 801619e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80161a2:	42b3      	cmp	r3, r6
 80161a4:	daf4      	bge.n	8016190 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80161a6:	6823      	ldr	r3, [r4, #0]
 80161a8:	4669      	mov	r1, sp
 80161aa:	4620      	mov	r0, r4
 80161ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161ae:	4798      	blx	r3
 80161b0:	b940      	cbnz	r0, 80161c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80161b2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d004      	beq.n	80161c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80161ba:	3301      	adds	r3, #1
 80161bc:	105b      	asrs	r3, r3, #1
 80161be:	f8ad 3006 	strh.w	r3, [sp, #6]
 80161c2:	e7f0      	b.n	80161a6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80161c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80161c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80161cc:	4413      	add	r3, r2
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	441a      	add	r2, r3
 80161d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80161d6:	b212      	sxth	r2, r2
 80161d8:	4296      	cmp	r6, r2
 80161da:	dae0      	bge.n	801619e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80161dc:	1aeb      	subs	r3, r5, r3
 80161de:	f8ad 3006 	strh.w	r3, [sp, #6]
 80161e2:	e7dc      	b.n	801619e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80161e4:	f8bd 5000 	ldrh.w	r5, [sp]
 80161e8:	441d      	add	r5, r3
 80161ea:	b2ad      	uxth	r5, r5
 80161ec:	b22e      	sxth	r6, r5
 80161ee:	f9bd 3000 	ldrsh.w	r3, [sp]
 80161f2:	42b3      	cmp	r3, r6
 80161f4:	dacc      	bge.n	8016190 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80161f6:	6823      	ldr	r3, [r4, #0]
 80161f8:	4669      	mov	r1, sp
 80161fa:	4620      	mov	r0, r4
 80161fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161fe:	4798      	blx	r3
 8016200:	b940      	cbnz	r0, 8016214 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8016202:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016206:	2b01      	cmp	r3, #1
 8016208:	d004      	beq.n	8016214 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801620a:	3301      	adds	r3, #1
 801620c:	105b      	asrs	r3, r3, #1
 801620e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016212:	e7f0      	b.n	80161f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8016214:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016218:	f8bd 3000 	ldrh.w	r3, [sp]
 801621c:	4413      	add	r3, r2
 801621e:	b29b      	uxth	r3, r3
 8016220:	441a      	add	r2, r3
 8016222:	f8ad 3000 	strh.w	r3, [sp]
 8016226:	b212      	sxth	r2, r2
 8016228:	4296      	cmp	r6, r2
 801622a:	dae0      	bge.n	80161ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801622c:	1aeb      	subs	r3, r5, r3
 801622e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016232:	e7dc      	b.n	80161ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016234:	200122bc 	.word	0x200122bc

08016238 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801623a:	6803      	ldr	r3, [r0, #0]
 801623c:	4604      	mov	r4, r0
 801623e:	4601      	mov	r1, r0
 8016240:	4668      	mov	r0, sp
 8016242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016244:	4798      	blx	r3
 8016246:	2100      	movs	r1, #0
 8016248:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801624c:	4668      	mov	r0, sp
 801624e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016252:	9102      	str	r1, [sp, #8]
 8016254:	a902      	add	r1, sp, #8
 8016256:	f8ad 200c 	strh.w	r2, [sp, #12]
 801625a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801625e:	f7fe fcb7 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	4669      	mov	r1, sp
 8016266:	4620      	mov	r0, r4
 8016268:	691b      	ldr	r3, [r3, #16]
 801626a:	4798      	blx	r3
 801626c:	b004      	add	sp, #16
 801626e:	bd10      	pop	{r4, pc}

08016270 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016270:	2101      	movs	r1, #1
 8016272:	2200      	movs	r2, #0
 8016274:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016278:	490a      	ldr	r1, [pc, #40]	@ (80162a4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801627a:	8082      	strh	r2, [r0, #4]
 801627c:	6001      	str	r1, [r0, #0]
 801627e:	21ff      	movs	r1, #255	@ 0xff
 8016280:	80c2      	strh	r2, [r0, #6]
 8016282:	8102      	strh	r2, [r0, #8]
 8016284:	8142      	strh	r2, [r0, #10]
 8016286:	8182      	strh	r2, [r0, #12]
 8016288:	81c2      	strh	r2, [r0, #14]
 801628a:	8202      	strh	r2, [r0, #16]
 801628c:	8242      	strh	r2, [r0, #18]
 801628e:	61c2      	str	r2, [r0, #28]
 8016290:	8402      	strh	r2, [r0, #32]
 8016292:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016294:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016298:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801629c:	6282      	str	r2, [r0, #40]	@ 0x28
 801629e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80162a2:	4770      	bx	lr
 80162a4:	08031744 	.word	0x08031744

080162a8 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 80162a8:	6301      	str	r1, [r0, #48]	@ 0x30
 80162aa:	4770      	bx	lr

080162ac <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 80162ac:	6341      	str	r1, [r0, #52]	@ 0x34
 80162ae:	4770      	bx	lr

080162b0 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 80162b0:	4770      	bx	lr

080162b2 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 80162b2:	4608      	mov	r0, r1
 80162b4:	4770      	bx	lr

080162b6 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 80162b6:	4608      	mov	r0, r1
 80162b8:	4770      	bx	lr

080162ba <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80162ba:	b530      	push	{r4, r5, lr}
 80162bc:	460d      	mov	r5, r1
 80162be:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80162c0:	8949      	ldrh	r1, [r1, #10]
 80162c2:	b085      	sub	sp, #20
 80162c4:	4604      	mov	r4, r0
 80162c6:	1ac9      	subs	r1, r1, r3
 80162c8:	6803      	ldr	r3, [r0, #0]
 80162ca:	f10d 0206 	add.w	r2, sp, #6
 80162ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80162d2:	b209      	sxth	r1, r1
 80162d4:	4798      	blx	r3
 80162d6:	b1a0      	cbz	r0, 8016302 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80162d8:	792b      	ldrb	r3, [r5, #4]
 80162da:	b993      	cbnz	r3, 8016302 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80162dc:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80162e0:	b178      	cbz	r0, 8016302 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80162e2:	6803      	ldr	r3, [r0, #0]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	4798      	blx	r3
 80162e8:	b158      	cbz	r0, 8016302 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80162ea:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80162ee:	aa02      	add	r2, sp, #8
 80162f0:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80162f4:	4621      	mov	r1, r4
 80162f6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80162fa:	9503      	str	r5, [sp, #12]
 80162fc:	6803      	ldr	r3, [r0, #0]
 80162fe:	689b      	ldr	r3, [r3, #8]
 8016300:	4798      	blx	r3
 8016302:	b005      	add	sp, #20
 8016304:	bd30      	pop	{r4, r5, pc}

08016306 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8016306:	428a      	cmp	r2, r1
 8016308:	bfbc      	itt	lt
 801630a:	460b      	movlt	r3, r1
 801630c:	4611      	movlt	r1, r2
 801630e:	b510      	push	{r4, lr}
 8016310:	bfb8      	it	lt
 8016312:	461a      	movlt	r2, r3
 8016314:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8016318:	4604      	mov	r4, r0
 801631a:	428b      	cmp	r3, r1
 801631c:	d103      	bne.n	8016326 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 801631e:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8016322:	4293      	cmp	r3, r2
 8016324:	d011      	beq.n	801634a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8016326:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 801632a:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801632e:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8016332:	f005 ff90 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016336:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801633a:	f005 ff8c 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 801633e:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016346:	f005 bf86 	b.w	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 801634a:	bd10      	pop	{r4, pc}

0801634c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 801634c:	428a      	cmp	r2, r1
 801634e:	bfbc      	itt	lt
 8016350:	460b      	movlt	r3, r1
 8016352:	4611      	movlt	r1, r2
 8016354:	b510      	push	{r4, lr}
 8016356:	bfb8      	it	lt
 8016358:	461a      	movlt	r2, r3
 801635a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 801635e:	4604      	mov	r4, r0
 8016360:	428b      	cmp	r3, r1
 8016362:	d103      	bne.n	801636c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8016364:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8016368:	4293      	cmp	r3, r2
 801636a:	d011      	beq.n	8016390 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 801636c:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8016370:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8016374:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8016378:	f005 ff6d 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 801637c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016380:	f005 ff69 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016384:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801638c:	f005 bf63 	b.w	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016390:	bd10      	pop	{r4, pc}

08016392 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8016392:	2300      	movs	r3, #0
 8016394:	3038      	adds	r0, #56	@ 0x38
 8016396:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 801639a:	f005 bf5c 	b.w	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>

0801639e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 801639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163a2:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80163a6:	4605      	mov	r5, r0
 80163a8:	460f      	mov	r7, r1
 80163aa:	4616      	mov	r6, r2
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d03d      	beq.n	801642c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80163b0:	6803      	ldr	r3, [r0, #0]
 80163b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80163b6:	4798      	blx	r3
 80163b8:	682b      	ldr	r3, [r5, #0]
 80163ba:	b204      	sxth	r4, r0
 80163bc:	4628      	mov	r0, r5
 80163be:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80163c2:	4798      	blx	r3
 80163c4:	b203      	sxth	r3, r0
 80163c6:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 80163ca:	429c      	cmp	r4, r3
 80163cc:	bfc4      	itt	gt
 80163ce:	4622      	movgt	r2, r4
 80163d0:	461c      	movgt	r4, r3
 80163d2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80163d6:	bfc8      	it	gt
 80163d8:	4613      	movgt	r3, r2
 80163da:	4284      	cmp	r4, r0
 80163dc:	da26      	bge.n	801642c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80163de:	4298      	cmp	r0, r3
 80163e0:	bfa8      	it	ge
 80163e2:	4618      	movge	r0, r3
 80163e4:	2800      	cmp	r0, #0
 80163e6:	db21      	blt.n	801642c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80163e8:	b9ef      	cbnz	r7, 8016426 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 80163ea:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80163ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80163f2:	4619      	mov	r1, r3
 80163f4:	42a0      	cmp	r0, r4
 80163f6:	dd0b      	ble.n	8016410 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80163f8:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80163fc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016400:	3401      	adds	r4, #1
 8016402:	4291      	cmp	r1, r2
 8016404:	bfa8      	it	ge
 8016406:	4611      	movge	r1, r2
 8016408:	4293      	cmp	r3, r2
 801640a:	bfb8      	it	lt
 801640c:	4613      	movlt	r3, r2
 801640e:	e7f1      	b.n	80163f4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8016410:	1b89      	subs	r1, r1, r6
 8016412:	18f2      	adds	r2, r6, r3
 8016414:	4291      	cmp	r1, r2
 8016416:	d009      	beq.n	801642c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016418:	682b      	ldr	r3, [r5, #0]
 801641a:	4628      	mov	r0, r5
 801641c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016424:	4718      	bx	r3
 8016426:	4273      	negs	r3, r6
 8016428:	4631      	mov	r1, r6
 801642a:	e7e3      	b.n	80163f4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 801642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016430 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8016430:	b530      	push	{r4, r5, lr}
 8016432:	790b      	ldrb	r3, [r1, #4]
 8016434:	b085      	sub	sp, #20
 8016436:	4604      	mov	r4, r0
 8016438:	460d      	mov	r5, r1
 801643a:	2b02      	cmp	r3, #2
 801643c:	d020      	beq.n	8016480 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801643e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8016440:	f10d 0206 	add.w	r2, sp, #6
 8016444:	88c9      	ldrh	r1, [r1, #6]
 8016446:	1ac9      	subs	r1, r1, r3
 8016448:	6803      	ldr	r3, [r0, #0]
 801644a:	b209      	sxth	r1, r1
 801644c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016450:	4798      	blx	r3
 8016452:	b1a8      	cbz	r0, 8016480 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016454:	792b      	ldrb	r3, [r5, #4]
 8016456:	2b01      	cmp	r3, #1
 8016458:	d812      	bhi.n	8016480 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801645a:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801645e:	b178      	cbz	r0, 8016480 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016460:	6803      	ldr	r3, [r0, #0]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	4798      	blx	r3
 8016466:	b158      	cbz	r0, 8016480 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016468:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801646c:	aa02      	add	r2, sp, #8
 801646e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8016472:	4621      	mov	r1, r4
 8016474:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016478:	9503      	str	r5, [sp, #12]
 801647a:	6803      	ldr	r3, [r0, #0]
 801647c:	689b      	ldr	r3, [r3, #8]
 801647e:	4798      	blx	r3
 8016480:	b005      	add	sp, #20
 8016482:	bd30      	pop	{r4, r5, pc}

08016484 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8016484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016488:	4604      	mov	r4, r0
 801648a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 801648e:	4690      	mov	r8, r2
 8016490:	461f      	mov	r7, r3
 8016492:	9e06      	ldr	r6, [sp, #24]
 8016494:	b928      	cbnz	r0, 80164a2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8016496:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801649a:	8033      	strh	r3, [r6, #0]
 801649c:	803b      	strh	r3, [r7, #0]
 801649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164a2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80164a6:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 80164aa:	1883      	adds	r3, r0, r2
 80164ac:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80164b0:	1ad2      	subs	r2, r2, r3
 80164b2:	b212      	sxth	r2, r2
 80164b4:	2a01      	cmp	r2, #1
 80164b6:	dc07      	bgt.n	80164c8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80164b8:	2300      	movs	r3, #0
 80164ba:	803b      	strh	r3, [r7, #0]
 80164bc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 80164c0:	3b01      	subs	r3, #1
 80164c2:	8033      	strh	r3, [r6, #0]
 80164c4:	2001      	movs	r0, #1
 80164c6:	e7ea      	b.n	801649e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80164c8:	1a08      	subs	r0, r1, r0
 80164ca:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 80164ce:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80164d2:	0140      	lsls	r0, r0, #5
 80164d4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164d6:	1a5b      	subs	r3, r3, r1
 80164d8:	d459      	bmi.n	801658e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 80164da:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80164de:	fb93 f1f5 	sdiv	r1, r3, r5
 80164e2:	2302      	movs	r3, #2
 80164e4:	fb91 f1f3 	sdiv	r1, r1, r3
 80164e8:	3a01      	subs	r2, #1
 80164ea:	f006 f87e 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 80164ee:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80164f2:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80164f6:	2900      	cmp	r1, #0
 80164f8:	db55      	blt.n	80165a6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80164fa:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80164fe:	2502      	movs	r5, #2
 8016500:	fb93 f3fc 	sdiv	r3, r3, ip
 8016504:	fb93 f3f5 	sdiv	r3, r3, r5
 8016508:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 801650c:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8016510:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8016514:	1a52      	subs	r2, r2, r1
 8016516:	eba8 0003 	sub.w	r0, r8, r3
 801651a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801651e:	d44e      	bmi.n	80165be <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8016520:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8016524:	fb92 f1fc 	sdiv	r1, r2, ip
 8016528:	2202      	movs	r2, #2
 801652a:	fb91 f1f2 	sdiv	r1, r1, r2
 801652e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8016532:	4413      	add	r3, r2
 8016534:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016538:	1ad2      	subs	r2, r2, r3
 801653a:	b212      	sxth	r2, r2
 801653c:	3a01      	subs	r2, #1
 801653e:	f006 f854 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 8016542:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8016546:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016548:	2b00      	cmp	r3, #0
 801654a:	db44      	blt.n	80165d6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 801654c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016550:	fb93 f3f2 	sdiv	r3, r3, r2
 8016554:	2202      	movs	r2, #2
 8016556:	fb93 f3f2 	sdiv	r3, r3, r2
 801655a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801655e:	2020      	movs	r0, #32
 8016560:	429d      	cmp	r5, r3
 8016562:	bfde      	ittt	le
 8016564:	461a      	movle	r2, r3
 8016566:	462b      	movle	r3, r5
 8016568:	4615      	movle	r5, r2
 801656a:	b21b      	sxth	r3, r3
 801656c:	2d00      	cmp	r5, #0
 801656e:	bfaa      	itet	ge
 8016570:	351f      	addge	r5, #31
 8016572:	fb95 f5f0 	sdivlt	r5, r5, r0
 8016576:	116d      	asrge	r5, r5, #5
 8016578:	fb93 f3f0 	sdiv	r3, r3, r0
 801657c:	b22d      	sxth	r5, r5
 801657e:	803b      	strh	r3, [r7, #0]
 8016580:	2d00      	cmp	r5, #0
 8016582:	8035      	strh	r5, [r6, #0]
 8016584:	da33      	bge.n	80165ee <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8016586:	2000      	movs	r0, #0
 8016588:	8030      	strh	r0, [r6, #0]
 801658a:	8038      	strh	r0, [r7, #0]
 801658c:	e787      	b.n	801649e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801658e:	f06f 0101 	mvn.w	r1, #1
 8016592:	fb01 5303 	mla	r3, r1, r3, r5
 8016596:	1e59      	subs	r1, r3, #1
 8016598:	2302      	movs	r3, #2
 801659a:	fb91 f1f5 	sdiv	r1, r1, r5
 801659e:	fb91 f1f3 	sdiv	r1, r1, r3
 80165a2:	4249      	negs	r1, r1
 80165a4:	e7a0      	b.n	80164e8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 80165a6:	f06f 0301 	mvn.w	r3, #1
 80165aa:	2502      	movs	r5, #2
 80165ac:	fb03 c301 	mla	r3, r3, r1, ip
 80165b0:	3b01      	subs	r3, #1
 80165b2:	fb93 f3fc 	sdiv	r3, r3, ip
 80165b6:	fb93 f3f5 	sdiv	r3, r3, r5
 80165ba:	425b      	negs	r3, r3
 80165bc:	e7a4      	b.n	8016508 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 80165be:	f06f 0101 	mvn.w	r1, #1
 80165c2:	fb01 c202 	mla	r2, r1, r2, ip
 80165c6:	1e51      	subs	r1, r2, #1
 80165c8:	2202      	movs	r2, #2
 80165ca:	fb91 f1fc 	sdiv	r1, r1, ip
 80165ce:	fb91 f1f2 	sdiv	r1, r1, r2
 80165d2:	4249      	negs	r1, r1
 80165d4:	e7ab      	b.n	801652e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 80165d6:	f06f 0101 	mvn.w	r1, #1
 80165da:	fb01 2303 	mla	r3, r1, r3, r2
 80165de:	3b01      	subs	r3, #1
 80165e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80165e4:	2202      	movs	r2, #2
 80165e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80165ea:	425b      	negs	r3, r3
 80165ec:	e7b5      	b.n	801655a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80165ee:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80165f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80165f6:	4293      	cmp	r3, r2
 80165f8:	dc05      	bgt.n	8016606 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80165fa:	3b01      	subs	r3, #1
 80165fc:	2000      	movs	r0, #0
 80165fe:	b21b      	sxth	r3, r3
 8016600:	8033      	strh	r3, [r6, #0]
 8016602:	803b      	strh	r3, [r7, #0]
 8016604:	e74b      	b.n	801649e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016606:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801660a:	803a      	strh	r2, [r7, #0]
 801660c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016610:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016614:	4293      	cmp	r3, r2
 8016616:	bfdc      	itt	le
 8016618:	f103 33ff 	addle.w	r3, r3, #4294967295
 801661c:	b21a      	sxthle	r2, r3
 801661e:	8032      	strh	r2, [r6, #0]
 8016620:	e750      	b.n	80164c4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08016624 <_ZN8touchgfx9ContainerC1Ev>:
 8016624:	2101      	movs	r1, #1
 8016626:	2200      	movs	r2, #0
 8016628:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801662c:	4909      	ldr	r1, [pc, #36]	@ (8016654 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 801662e:	8082      	strh	r2, [r0, #4]
 8016630:	80c2      	strh	r2, [r0, #6]
 8016632:	8102      	strh	r2, [r0, #8]
 8016634:	8142      	strh	r2, [r0, #10]
 8016636:	8182      	strh	r2, [r0, #12]
 8016638:	81c2      	strh	r2, [r0, #14]
 801663a:	8202      	strh	r2, [r0, #16]
 801663c:	8242      	strh	r2, [r0, #18]
 801663e:	61c2      	str	r2, [r0, #28]
 8016640:	8402      	strh	r2, [r0, #32]
 8016642:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016644:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016648:	6001      	str	r1, [r0, #0]
 801664a:	6282      	str	r2, [r0, #40]	@ 0x28
 801664c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016650:	4770      	bx	lr
 8016652:	bf00      	nop
 8016654:	08031458 	.word	0x08031458

08016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8016658:	6800      	ldr	r0, [r0, #0]
 801665a:	2800      	cmp	r0, #0
 801665c:	bfbd      	ittte	lt
 801665e:	380f      	sublt	r0, #15
 8016660:	2320      	movlt	r3, #32
 8016662:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016666:	3010      	addge	r0, #16
 8016668:	bfa8      	it	ge
 801666a:	1140      	asrge	r0, r0, #5
 801666c:	4770      	bx	lr

0801666e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801666e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016672:	4605      	mov	r5, r0
 8016674:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8016678:	4688      	mov	r8, r1
 801667a:	4691      	mov	r9, r2
 801667c:	469a      	mov	sl, r3
 801667e:	b360      	cbz	r0, 80166da <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8016680:	2700      	movs	r7, #0
 8016682:	f04f 3bff 	mov.w	fp, #4294967295
 8016686:	b23e      	sxth	r6, r7
 8016688:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801668c:	42b3      	cmp	r3, r6
 801668e:	dd23      	ble.n	80166d8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8016690:	682b      	ldr	r3, [r5, #0]
 8016692:	4631      	mov	r1, r6
 8016694:	4628      	mov	r0, r5
 8016696:	3701      	adds	r7, #1
 8016698:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801669c:	4798      	blx	r3
 801669e:	9001      	str	r0, [sp, #4]
 80166a0:	a801      	add	r0, sp, #4
 80166a2:	f7ff ffd9 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80166a6:	682b      	ldr	r3, [r5, #0]
 80166a8:	eba0 0008 	sub.w	r0, r0, r8
 80166ac:	4631      	mov	r1, r6
 80166ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80166b2:	b204      	sxth	r4, r0
 80166b4:	4628      	mov	r0, r5
 80166b6:	4798      	blx	r3
 80166b8:	9001      	str	r0, [sp, #4]
 80166ba:	a801      	add	r0, sp, #4
 80166bc:	f7ff ffcc 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80166c0:	eba0 0009 	sub.w	r0, r0, r9
 80166c4:	fb10 f000 	smulbb	r0, r0, r0
 80166c8:	fb04 0404 	mla	r4, r4, r4, r0
 80166cc:	455c      	cmp	r4, fp
 80166ce:	bf3c      	itt	cc
 80166d0:	f8aa 6000 	strhcc.w	r6, [sl]
 80166d4:	46a3      	movcc	fp, r4
 80166d6:	e7d6      	b.n	8016686 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 80166d8:	2001      	movs	r0, #1
 80166da:	b003      	add	sp, #12
 80166dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166e0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80166e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166e4:	460e      	mov	r6, r1
 80166e6:	2100      	movs	r1, #0
 80166e8:	4605      	mov	r5, r0
 80166ea:	4617      	mov	r7, r2
 80166ec:	8011      	strh	r1, [r2, #0]
 80166ee:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80166f2:	b36b      	cbz	r3, 8016750 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 80166f4:	6803      	ldr	r3, [r0, #0]
 80166f6:	f10d 0808 	add.w	r8, sp, #8
 80166fa:	2401      	movs	r4, #1
 80166fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016700:	4798      	blx	r3
 8016702:	f848 0d04 	str.w	r0, [r8, #-4]!
 8016706:	4640      	mov	r0, r8
 8016708:	f7ff ffa6 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801670c:	b200      	sxth	r0, r0
 801670e:	1b80      	subs	r0, r0, r6
 8016710:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8016714:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8016718:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801671c:	42a3      	cmp	r3, r4
 801671e:	dd1b      	ble.n	8016758 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8016720:	682b      	ldr	r3, [r5, #0]
 8016722:	4621      	mov	r1, r4
 8016724:	4628      	mov	r0, r5
 8016726:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801672a:	4798      	blx	r3
 801672c:	9001      	str	r0, [sp, #4]
 801672e:	4640      	mov	r0, r8
 8016730:	f7ff ff92 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016734:	b200      	sxth	r0, r0
 8016736:	1b80      	subs	r0, r0, r6
 8016738:	2800      	cmp	r0, #0
 801673a:	bfb8      	it	lt
 801673c:	4240      	neglt	r0, r0
 801673e:	4548      	cmp	r0, r9
 8016740:	bf38      	it	cc
 8016742:	803c      	strhcc	r4, [r7, #0]
 8016744:	f104 0401 	add.w	r4, r4, #1
 8016748:	bf38      	it	cc
 801674a:	4681      	movcc	r9, r0
 801674c:	b224      	sxth	r4, r4
 801674e:	e7e3      	b.n	8016718 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8016750:	4618      	mov	r0, r3
 8016752:	b003      	add	sp, #12
 8016754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016758:	2001      	movs	r0, #1
 801675a:	e7fa      	b.n	8016752 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

0801675c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801675c:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8016760:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016764:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8016768:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 801676c:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8016770:	4770      	bx	lr

08016772 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8016772:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016774:	4604      	mov	r4, r0
 8016776:	3038      	adds	r0, #56	@ 0x38
 8016778:	460d      	mov	r5, r1
 801677a:	f7fe f8ad 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801677e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8016782:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016786:	4628      	mov	r0, r5
 8016788:	9200      	str	r2, [sp, #0]
 801678a:	2200      	movs	r2, #0
 801678c:	4611      	mov	r1, r2
 801678e:	f7f3 ffa3 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016792:	b003      	add	sp, #12
 8016794:	bd30      	pop	{r4, r5, pc}

08016796 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 8016796:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016798:	4604      	mov	r4, r0
 801679a:	3064      	adds	r0, #100	@ 0x64
 801679c:	460d      	mov	r5, r1
 801679e:	f7fe f89b 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80167a2:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 80167a6:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 80167aa:	4628      	mov	r0, r5
 80167ac:	9200      	str	r2, [sp, #0]
 80167ae:	2200      	movs	r2, #0
 80167b0:	4611      	mov	r1, r2
 80167b2:	f7f3 ff91 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80167b6:	b003      	add	sp, #12
 80167b8:	bd30      	pop	{r4, r5, pc}

080167ba <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 80167ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167bc:	4604      	mov	r4, r0
 80167be:	30e8      	adds	r0, #232	@ 0xe8
 80167c0:	460d      	mov	r5, r1
 80167c2:	f7fe f889 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80167c6:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 80167ca:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 80167ce:	4628      	mov	r0, r5
 80167d0:	9200      	str	r2, [sp, #0]
 80167d2:	2200      	movs	r2, #0
 80167d4:	4611      	mov	r1, r2
 80167d6:	f7f3 ff7f 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80167da:	b003      	add	sp, #12
 80167dc:	bd30      	pop	{r4, r5, pc}

080167de <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 80167de:	b538      	push	{r3, r4, r5, lr}
 80167e0:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80167e4:	460d      	mov	r5, r1
 80167e6:	428b      	cmp	r3, r1
 80167e8:	dd08      	ble.n	80167fc <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80167ea:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 80167ec:	b134      	cbz	r4, 80167fc <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80167ee:	6823      	ldr	r3, [r4, #0]
 80167f0:	4620      	mov	r0, r4
 80167f2:	4629      	mov	r1, r5
 80167f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80167f6:	4798      	blx	r3
 80167f8:	69a4      	ldr	r4, [r4, #24]
 80167fa:	e7f7      	b.n	80167ec <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 80167fc:	bd38      	pop	{r3, r4, r5, pc}

080167fe <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 80167fe:	b570      	push	{r4, r5, r6, lr}
 8016800:	4606      	mov	r6, r0
 8016802:	460d      	mov	r5, r1
 8016804:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8016808:	b134      	cbz	r4, 8016818 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801680a:	6823      	ldr	r3, [r4, #0]
 801680c:	4620      	mov	r0, r4
 801680e:	4629      	mov	r1, r5
 8016810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016812:	4798      	blx	r3
 8016814:	69a4      	ldr	r4, [r4, #24]
 8016816:	e7f7      	b.n	8016808 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8016818:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 801681c:	b134      	cbz	r4, 801682c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 801681e:	6823      	ldr	r3, [r4, #0]
 8016820:	4620      	mov	r0, r4
 8016822:	4629      	mov	r1, r5
 8016824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016826:	4798      	blx	r3
 8016828:	69a4      	ldr	r4, [r4, #24]
 801682a:	e7f7      	b.n	801681c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 801682c:	bd70      	pop	{r4, r5, r6, pc}

0801682e <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 801682e:	b538      	push	{r3, r4, r5, lr}
 8016830:	4604      	mov	r4, r0
 8016832:	2500      	movs	r5, #0
 8016834:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016838:	42ab      	cmp	r3, r5
 801683a:	db05      	blt.n	8016848 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 801683c:	b229      	sxth	r1, r5
 801683e:	4620      	mov	r0, r4
 8016840:	f7ff ffdd 	bl	80167fe <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016844:	3501      	adds	r5, #1
 8016846:	e7f5      	b.n	8016834 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8016848:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801684c:	f005 fd03 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016850:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016858:	f005 bcfd 	b.w	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>

0801685c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 801685c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801685e:	4604      	mov	r4, r0
 8016860:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8016862:	b15d      	cbz	r5, 801687c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8016864:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8016868:	4628      	mov	r0, r5
 801686a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801686e:	9200      	str	r2, [sp, #0]
 8016870:	2200      	movs	r2, #0
 8016872:	4611      	mov	r1, r2
 8016874:	f7f3 ff30 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016878:	69ad      	ldr	r5, [r5, #24]
 801687a:	e7f2      	b.n	8016862 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 801687c:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8016880:	b15d      	cbz	r5, 801689a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8016882:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8016886:	4628      	mov	r0, r5
 8016888:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 801688c:	9200      	str	r2, [sp, #0]
 801688e:	2200      	movs	r2, #0
 8016890:	4611      	mov	r1, r2
 8016892:	f7f3 ff21 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016896:	69ad      	ldr	r5, [r5, #24]
 8016898:	e7f2      	b.n	8016880 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801689a:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 801689e:	b15d      	cbz	r5, 80168b8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 80168a0:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 80168a4:	4628      	mov	r0, r5
 80168a6:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 80168aa:	9200      	str	r2, [sp, #0]
 80168ac:	2200      	movs	r2, #0
 80168ae:	4611      	mov	r1, r2
 80168b0:	f7f3 ff12 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168b4:	69ad      	ldr	r5, [r5, #24]
 80168b6:	e7f2      	b.n	801689e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 80168b8:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 80168bc:	b15d      	cbz	r5, 80168d6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 80168be:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 80168c2:	4628      	mov	r0, r5
 80168c4:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 80168c8:	9200      	str	r2, [sp, #0]
 80168ca:	2200      	movs	r2, #0
 80168cc:	4611      	mov	r1, r2
 80168ce:	f7f3 ff03 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168d2:	69ad      	ldr	r5, [r5, #24]
 80168d4:	e7f2      	b.n	80168bc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 80168d6:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 80168da:	b15d      	cbz	r5, 80168f4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 80168dc:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 80168e0:	4628      	mov	r0, r5
 80168e2:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 80168e6:	9200      	str	r2, [sp, #0]
 80168e8:	2200      	movs	r2, #0
 80168ea:	4611      	mov	r1, r2
 80168ec:	f7f3 fef4 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168f0:	69ad      	ldr	r5, [r5, #24]
 80168f2:	e7f2      	b.n	80168da <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 80168f4:	6823      	ldr	r3, [r4, #0]
 80168f6:	4620      	mov	r0, r4
 80168f8:	695b      	ldr	r3, [r3, #20]
 80168fa:	b003      	add	sp, #12
 80168fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016900:	4718      	bx	r3

08016902 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8016902:	b430      	push	{r4, r5}
 8016904:	b28a      	uxth	r2, r1
 8016906:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 801690a:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 801690e:	1b15      	subs	r5, r2, r4
 8016910:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8016914:	8101      	strh	r1, [r0, #8]
 8016916:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 801691a:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 801691e:	442c      	add	r4, r5
 8016920:	1b12      	subs	r2, r2, r4
 8016922:	bc30      	pop	{r4, r5}
 8016924:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016928:	f7ff bf98 	b.w	801685c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801692c <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 801692c:	b430      	push	{r4, r5}
 801692e:	b28a      	uxth	r2, r1
 8016930:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8016934:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8016938:	1b15      	subs	r5, r2, r4
 801693a:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 801693e:	8141      	strh	r1, [r0, #10]
 8016940:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8016944:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8016948:	442c      	add	r4, r5
 801694a:	1b12      	subs	r2, r2, r4
 801694c:	bc30      	pop	{r4, r5}
 801694e:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8016952:	f7ff bf83 	b.w	801685c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016956 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8016956:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801695a:	fa1f fa83 	uxth.w	sl, r3
 801695e:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8016962:	4615      	mov	r5, r2
 8016964:	4699      	mov	r9, r3
 8016966:	fa1f f887 	uxth.w	r8, r7
 801696a:	8903      	ldrh	r3, [r0, #8]
 801696c:	4452      	add	r2, sl
 801696e:	4604      	mov	r4, r0
 8016970:	8940      	ldrh	r0, [r0, #10]
 8016972:	460e      	mov	r6, r1
 8016974:	1a9b      	subs	r3, r3, r2
 8016976:	eb08 0201 	add.w	r2, r8, r1
 801697a:	1a80      	subs	r0, r0, r2
 801697c:	b21b      	sxth	r3, r3
 801697e:	460a      	mov	r2, r1
 8016980:	4629      	mov	r1, r5
 8016982:	b200      	sxth	r0, r0
 8016984:	9000      	str	r0, [sp, #0]
 8016986:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801698a:	f7f3 fea5 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801698e:	2200      	movs	r2, #0
 8016990:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016994:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016998:	4611      	mov	r1, r2
 801699a:	9600      	str	r6, [sp, #0]
 801699c:	f7f3 fe9c 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80169a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80169a4:	2200      	movs	r2, #0
 80169a6:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80169aa:	9300      	str	r3, [sp, #0]
 80169ac:	462b      	mov	r3, r5
 80169ae:	4611      	mov	r1, r2
 80169b0:	f7f3 fe92 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80169b4:	8921      	ldrh	r1, [r4, #8]
 80169b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80169ba:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80169be:	eba1 010a 	sub.w	r1, r1, sl
 80169c2:	2200      	movs	r2, #0
 80169c4:	9300      	str	r3, [sp, #0]
 80169c6:	464b      	mov	r3, r9
 80169c8:	b209      	sxth	r1, r1
 80169ca:	f7f3 fe85 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80169ce:	8962      	ldrh	r2, [r4, #10]
 80169d0:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80169d4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80169d8:	eba2 0208 	sub.w	r2, r2, r8
 80169dc:	9700      	str	r7, [sp, #0]
 80169de:	2100      	movs	r1, #0
 80169e0:	b212      	sxth	r2, r2
 80169e2:	f7f3 fe79 	bl	800a6d8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80169e6:	4620      	mov	r0, r4
 80169e8:	b002      	add	sp, #8
 80169ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169ee:	f7ff bf35 	b.w	801685c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

080169f4 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 80169f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f8:	b085      	sub	sp, #20
 80169fa:	4604      	mov	r4, r0
 80169fc:	2601      	movs	r6, #1
 80169fe:	2500      	movs	r5, #0
 8016a00:	9103      	str	r1, [sp, #12]
 8016a02:	f7ff fe0f 	bl	8016624 <_ZN8touchgfx9ContainerC1Ev>
 8016a06:	4b2c      	ldr	r3, [pc, #176]	@ (8016ab8 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8016a08:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8016a0c:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8016a10:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8016a14:	6023      	str	r3, [r4, #0]
 8016a16:	23ff      	movs	r3, #255	@ 0xff
 8016a18:	4658      	mov	r0, fp
 8016a1a:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8016a1e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016a22:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8016a26:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016a2a:	f7ff fdfb 	bl	8016624 <_ZN8touchgfx9ContainerC1Ev>
 8016a2e:	4648      	mov	r0, r9
 8016a30:	f7ff fdf8 	bl	8016624 <_ZN8touchgfx9ContainerC1Ev>
 8016a34:	4640      	mov	r0, r8
 8016a36:	f7ff fdf5 	bl	8016624 <_ZN8touchgfx9ContainerC1Ev>
 8016a3a:	4650      	mov	r0, sl
 8016a3c:	f7ff fdf2 	bl	8016624 <_ZN8touchgfx9ContainerC1Ev>
 8016a40:	4638      	mov	r0, r7
 8016a42:	f7ff fdef 	bl	8016624 <_ZN8touchgfx9ContainerC1Ev>
 8016a46:	9903      	ldr	r1, [sp, #12]
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8016a4e:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 8016a52:	4659      	mov	r1, fp
 8016a54:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8016a58:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8016a5c:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8016a60:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8016a64:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8016a68:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8016a6c:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8016a70:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8016a74:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8016a78:	f7fd ff2e 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016a7c:	4651      	mov	r1, sl
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f7fd ff2a 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016a84:	4649      	mov	r1, r9
 8016a86:	4620      	mov	r0, r4
 8016a88:	f7fd ff26 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016a8c:	4641      	mov	r1, r8
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f7fd ff22 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016a94:	4639      	mov	r1, r7
 8016a96:	4620      	mov	r0, r4
 8016a98:	f7fd ff1e 	bl	80148d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	9500      	str	r5, [sp, #0]
 8016aa0:	462b      	mov	r3, r5
 8016aa2:	462a      	mov	r2, r5
 8016aa4:	4629      	mov	r1, r5
 8016aa6:	f7ff ff56 	bl	8016956 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8016ab0:	b005      	add	sp, #20
 8016ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ab6:	bf00      	nop
 8016ab8:	08031954 	.word	0x08031954

08016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8016abc:	4291      	cmp	r1, r2
 8016abe:	4613      	mov	r3, r2
 8016ac0:	d003      	beq.n	8016aca <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8016ac2:	460a      	mov	r2, r1
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	f005 bd90 	b.w	801c5ea <_ZN8touchgfx6muldivElll>
 8016aca:	4770      	bx	lr

08016acc <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8016acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad0:	6803      	ldr	r3, [r0, #0]
 8016ad2:	460d      	mov	r5, r1
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016ada:	4798      	blx	r3
 8016adc:	42a8      	cmp	r0, r5
 8016ade:	4606      	mov	r6, r0
 8016ae0:	d024      	beq.n	8016b2c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8016ae2:	6823      	ldr	r3, [r4, #0]
 8016ae4:	4601      	mov	r1, r0
 8016ae6:	462a      	mov	r2, r5
 8016ae8:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8016aec:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8016af0:	f7ff ffe4 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016af4:	4680      	mov	r8, r0
 8016af6:	462a      	mov	r2, r5
 8016af8:	4631      	mov	r1, r6
 8016afa:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8016afe:	f7ff ffdd 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b02:	4641      	mov	r1, r8
 8016b04:	4602      	mov	r2, r0
 8016b06:	4620      	mov	r0, r4
 8016b08:	47b8      	blx	r7
 8016b0a:	462a      	mov	r2, r5
 8016b0c:	4631      	mov	r1, r6
 8016b0e:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8016b12:	f7ff ffd3 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b16:	462a      	mov	r2, r5
 8016b18:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8016b1c:	4631      	mov	r1, r6
 8016b1e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8016b22:	f7ff ffcb 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b26:	6325      	str	r5, [r4, #48]	@ 0x30
 8016b28:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8016b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b30 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8016b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b34:	4604      	mov	r4, r0
 8016b36:	460f      	mov	r7, r1
 8016b38:	b1b2      	cbz	r2, 8016b68 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8016b3a:	6803      	ldr	r3, [r0, #0]
 8016b3c:	2600      	movs	r6, #0
 8016b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016b42:	4798      	blx	r3
 8016b44:	4681      	mov	r9, r0
 8016b46:	b235      	sxth	r5, r6
 8016b48:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016b4c:	3601      	adds	r6, #1
 8016b4e:	42ab      	cmp	r3, r5
 8016b50:	dd0a      	ble.n	8016b68 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8016b52:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8016b56:	463a      	mov	r2, r7
 8016b58:	4649      	mov	r1, r9
 8016b5a:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8016b5e:	f7ff ffad 	bl	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b62:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8016b66:	e7ee      	b.n	8016b46 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8016b68:	6367      	str	r7, [r4, #52]	@ 0x34
 8016b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016b6e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8016b6e:	b570      	push	{r4, r5, r6, lr}
 8016b70:	6803      	ldr	r3, [r0, #0]
 8016b72:	4604      	mov	r4, r0
 8016b74:	460d      	mov	r5, r1
 8016b76:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016b7a:	4798      	blx	r3
 8016b7c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8016b80:	4629      	mov	r1, r5
 8016b82:	4620      	mov	r0, r4
 8016b84:	3301      	adds	r3, #1
 8016b86:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8016b8a:	6823      	ldr	r3, [r4, #0]
 8016b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b90:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016b94:	4718      	bx	r3

08016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b98:	4604      	mov	r4, r0
 8016b9a:	4608      	mov	r0, r1
 8016b9c:	460d      	mov	r5, r1
 8016b9e:	f7fe f85a 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ba2:	b978      	cbnz	r0, 8016bc4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f7fe f856 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016baa:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016bae:	b150      	cbz	r0, 8016bc6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016bb0:	8026      	strh	r6, [r4, #0]
 8016bb2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016bb6:	8063      	strh	r3, [r4, #2]
 8016bb8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016bbc:	80a3      	strh	r3, [r4, #4]
 8016bbe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016bc2:	80e3      	strh	r3, [r4, #6]
 8016bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc6:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016bca:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016bce:	42b1      	cmp	r1, r6
 8016bd0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016bd4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016bd8:	460f      	mov	r7, r1
 8016bda:	88ed      	ldrh	r5, [r5, #6]
 8016bdc:	bfa8      	it	ge
 8016bde:	4637      	movge	r7, r6
 8016be0:	4293      	cmp	r3, r2
 8016be2:	4618      	mov	r0, r3
 8016be4:	4466      	add	r6, ip
 8016be6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016bea:	bfa8      	it	ge
 8016bec:	4610      	movge	r0, r2
 8016bee:	442a      	add	r2, r5
 8016bf0:	88e5      	ldrh	r5, [r4, #6]
 8016bf2:	4461      	add	r1, ip
 8016bf4:	b236      	sxth	r6, r6
 8016bf6:	8027      	strh	r7, [r4, #0]
 8016bf8:	442b      	add	r3, r5
 8016bfa:	b209      	sxth	r1, r1
 8016bfc:	b212      	sxth	r2, r2
 8016bfe:	8060      	strh	r0, [r4, #2]
 8016c00:	b21b      	sxth	r3, r3
 8016c02:	428e      	cmp	r6, r1
 8016c04:	bfac      	ite	ge
 8016c06:	ebc7 0106 	rsbge	r1, r7, r6
 8016c0a:	ebc7 0101 	rsblt	r1, r7, r1
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	bfac      	ite	ge
 8016c12:	ebc0 0202 	rsbge	r2, r0, r2
 8016c16:	ebc0 0203 	rsblt	r2, r0, r3
 8016c1a:	80a1      	strh	r1, [r4, #4]
 8016c1c:	80e2      	strh	r2, [r4, #6]
 8016c1e:	e7d1      	b.n	8016bc4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08016c20 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8016c20:	6800      	ldr	r0, [r0, #0]
 8016c22:	2800      	cmp	r0, #0
 8016c24:	bfb9      	ittee	lt
 8016c26:	2320      	movlt	r3, #32
 8016c28:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016c2c:	301f      	addge	r0, #31
 8016c2e:	1140      	asrge	r0, r0, #5
 8016c30:	4770      	bx	lr

08016c32 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8016c32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c36:	6803      	ldr	r3, [r0, #0]
 8016c38:	b093      	sub	sp, #76	@ 0x4c
 8016c3a:	6945      	ldr	r5, [r0, #20]
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	460f      	mov	r7, r1
 8016c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016c42:	2d00      	cmp	r5, #0
 8016c44:	f000 81ad 	beq.w	8016fa2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 8016c48:	696d      	ldr	r5, [r5, #20]
 8016c4a:	4798      	blx	r3
 8016c4c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d077      	beq.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016c54:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016c58:	fb13 f000 	smulbb	r0, r3, r0
 8016c5c:	b283      	uxth	r3, r0
 8016c5e:	1c58      	adds	r0, r3, #1
 8016c60:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016c64:	1200      	asrs	r0, r0, #8
 8016c66:	d06d      	beq.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016c68:	b2c3      	uxtb	r3, r0
 8016c6a:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8016c6e:	462a      	mov	r2, r5
 8016c70:	4621      	mov	r1, r4
 8016c72:	9308      	str	r3, [sp, #32]
 8016c74:	4640      	mov	r0, r8
 8016c76:	6823      	ldr	r3, [r4, #0]
 8016c78:	ae0e      	add	r6, sp, #56	@ 0x38
 8016c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016c7e:	4798      	blx	r3
 8016c80:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016c84:	e886 0003 	stmia.w	r6, {r0, r1}
 8016c88:	4639      	mov	r1, r7
 8016c8a:	4630      	mov	r0, r6
 8016c8c:	f7fd ffa0 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	4629      	mov	r1, r5
 8016c94:	4620      	mov	r0, r4
 8016c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016c9a:	4798      	blx	r3
 8016c9c:	6823      	ldr	r3, [r4, #0]
 8016c9e:	4607      	mov	r7, r0
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	4798      	blx	r3
 8016caa:	4681      	mov	r9, r0
 8016cac:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 8016cb0:	4629      	mov	r1, r5
 8016cb2:	0103      	lsls	r3, r0, #4
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cb8:	6823      	ldr	r3, [r4, #0]
 8016cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016cbe:	4798      	blx	r3
 8016cc0:	4629      	mov	r1, r5
 8016cc2:	b203      	sxth	r3, r0
 8016cc4:	4620      	mov	r0, r4
 8016cc6:	9306      	str	r3, [sp, #24]
 8016cc8:	6823      	ldr	r3, [r4, #0]
 8016cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016cce:	4798      	blx	r3
 8016cd0:	2f00      	cmp	r7, #0
 8016cd2:	b203      	sxth	r3, r0
 8016cd4:	9307      	str	r3, [sp, #28]
 8016cd6:	d138      	bne.n	8016d4a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8016cd8:	f1b9 0f00 	cmp.w	r9, #0
 8016cdc:	d132      	bne.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016cde:	6823      	ldr	r3, [r4, #0]
 8016ce0:	464a      	mov	r2, r9
 8016ce2:	4629      	mov	r1, r5
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016cea:	4798      	blx	r3
 8016cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cee:	1ac0      	subs	r0, r0, r3
 8016cf0:	9010      	str	r0, [sp, #64]	@ 0x40
 8016cf2:	4640      	mov	r0, r8
 8016cf4:	f7ff fcb0 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016cf8:	6823      	ldr	r3, [r4, #0]
 8016cfa:	4607      	mov	r7, r0
 8016cfc:	4629      	mov	r1, r5
 8016cfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016d02:	4620      	mov	r0, r4
 8016d04:	4798      	blx	r3
 8016d06:	1a38      	subs	r0, r7, r0
 8016d08:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016d0c:	fa0f f880 	sxth.w	r8, r0
 8016d10:	eb13 0f08 	cmn.w	r3, r8
 8016d14:	d416      	bmi.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016d16:	6823      	ldr	r3, [r4, #0]
 8016d18:	4629      	mov	r1, r5
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016d20:	4798      	blx	r3
 8016d22:	4580      	cmp	r8, r0
 8016d24:	da0e      	bge.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016d26:	9a08      	ldr	r2, [sp, #32]
 8016d28:	b23f      	sxth	r7, r7
 8016d2a:	6823      	ldr	r3, [r4, #0]
 8016d2c:	4631      	mov	r1, r6
 8016d2e:	9202      	str	r2, [sp, #8]
 8016d30:	4620      	mov	r0, r4
 8016d32:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8016d36:	9700      	str	r7, [sp, #0]
 8016d38:	9201      	str	r2, [sp, #4]
 8016d3a:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8016d3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d42:	47a8      	blx	r5
 8016d44:	b013      	add	sp, #76	@ 0x4c
 8016d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d4a:	ddfb      	ble.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016d4c:	6823      	ldr	r3, [r4, #0]
 8016d4e:	4629      	mov	r1, r5
 8016d50:	4620      	mov	r0, r4
 8016d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016d56:	4798      	blx	r3
 8016d58:	6823      	ldr	r3, [r4, #0]
 8016d5a:	4683      	mov	fp, r0
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016d62:	4620      	mov	r0, r4
 8016d64:	4798      	blx	r3
 8016d66:	eba0 030b 	sub.w	r3, r0, fp
 8016d6a:	4680      	mov	r8, r0
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	bfb8      	it	lt
 8016d70:	425b      	neglt	r3, r3
 8016d72:	fb93 f3f7 	sdiv	r3, r3, r7
 8016d76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8016d7a:	dce3      	bgt.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016d7c:	6823      	ldr	r3, [r4, #0]
 8016d7e:	465a      	mov	r2, fp
 8016d80:	4629      	mov	r1, r5
 8016d82:	4620      	mov	r0, r4
 8016d84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016d88:	4798      	blx	r3
 8016d8a:	6823      	ldr	r3, [r4, #0]
 8016d8c:	4606      	mov	r6, r0
 8016d8e:	4642      	mov	r2, r8
 8016d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016d94:	4629      	mov	r1, r5
 8016d96:	4620      	mov	r0, r4
 8016d98:	4798      	blx	r3
 8016d9a:	42b0      	cmp	r0, r6
 8016d9c:	bfa2      	ittt	ge
 8016d9e:	4643      	movge	r3, r8
 8016da0:	46d8      	movge	r8, fp
 8016da2:	469b      	movge	fp, r3
 8016da4:	fb98 f6f7 	sdiv	r6, r8, r7
 8016da8:	fb9b f2f7 	sdiv	r2, fp, r7
 8016dac:	45d8      	cmp	r8, fp
 8016dae:	bfac      	ite	ge
 8016db0:	f04f 33ff 	movge.w	r3, #4294967295
 8016db4:	2301      	movlt	r3, #1
 8016db6:	1af6      	subs	r6, r6, r3
 8016db8:	441a      	add	r2, r3
 8016dba:	4296      	cmp	r6, r2
 8016dbc:	bfac      	ite	ge
 8016dbe:	f04f 3aff 	movge.w	sl, #4294967295
 8016dc2:	f04f 0a01 	movlt.w	sl, #1
 8016dc6:	f1b9 0f00 	cmp.w	r9, #0
 8016dca:	d13e      	bne.n	8016e4a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8016dcc:	fb07 fb0a 	mul.w	fp, r7, sl
 8016dd0:	eb0a 0802 	add.w	r8, sl, r2
 8016dd4:	4377      	muls	r7, r6
 8016dd6:	45b0      	cmp	r8, r6
 8016dd8:	d0b4      	beq.n	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016dda:	6823      	ldr	r3, [r4, #0]
 8016ddc:	463a      	mov	r2, r7
 8016dde:	4629      	mov	r1, r5
 8016de0:	4620      	mov	r0, r4
 8016de2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016de6:	4798      	blx	r3
 8016de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dea:	1ac0      	subs	r0, r0, r3
 8016dec:	9010      	str	r0, [sp, #64]	@ 0x40
 8016dee:	a810      	add	r0, sp, #64	@ 0x40
 8016df0:	f7ff fc32 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016df4:	6823      	ldr	r3, [r4, #0]
 8016df6:	4681      	mov	r9, r0
 8016df8:	4629      	mov	r1, r5
 8016dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016dfe:	4620      	mov	r0, r4
 8016e00:	4798      	blx	r3
 8016e02:	eba9 0000 	sub.w	r0, r9, r0
 8016e06:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8016e0a:	b203      	sxth	r3, r0
 8016e0c:	42da      	cmn	r2, r3
 8016e0e:	9304      	str	r3, [sp, #16]
 8016e10:	d418      	bmi.n	8016e44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8016e12:	6822      	ldr	r2, [r4, #0]
 8016e14:	4629      	mov	r1, r5
 8016e16:	4620      	mov	r0, r4
 8016e18:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8016e1c:	4790      	blx	r2
 8016e1e:	9b04      	ldr	r3, [sp, #16]
 8016e20:	4283      	cmp	r3, r0
 8016e22:	da0f      	bge.n	8016e44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8016e24:	9b08      	ldr	r3, [sp, #32]
 8016e26:	a90e      	add	r1, sp, #56	@ 0x38
 8016e28:	6822      	ldr	r2, [r4, #0]
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	9302      	str	r3, [sp, #8]
 8016e2e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016e32:	9301      	str	r3, [sp, #4]
 8016e34:	fa0f f389 	sxth.w	r3, r9
 8016e38:	9300      	str	r3, [sp, #0]
 8016e3a:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 8016e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e42:	47c8      	blx	r9
 8016e44:	4456      	add	r6, sl
 8016e46:	445f      	add	r7, fp
 8016e48:	e7c5      	b.n	8016dd6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8016e4a:	fb98 f8f9 	sdiv	r8, r8, r9
 8016e4e:	eba8 0203 	sub.w	r2, r8, r3
 8016e52:	4629      	mov	r1, r5
 8016e54:	4620      	mov	r0, r4
 8016e56:	9204      	str	r2, [sp, #16]
 8016e58:	fb9b f8f9 	sdiv	r8, fp, r9
 8016e5c:	4498      	add	r8, r3
 8016e5e:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8016e62:	4542      	cmp	r2, r8
 8016e64:	bfac      	ite	ge
 8016e66:	f04f 33ff 	movge.w	r3, #4294967295
 8016e6a:	2301      	movlt	r3, #1
 8016e6c:	fb02 f209 	mul.w	r2, r2, r9
 8016e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e72:	6823      	ldr	r3, [r4, #0]
 8016e74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016e78:	4798      	blx	r3
 8016e7a:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8016e7e:	4658      	mov	r0, fp
 8016e80:	f7ff fbea 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e84:	fb06 f207 	mul.w	r2, r6, r7
 8016e88:	b203      	sxth	r3, r0
 8016e8a:	4629      	mov	r1, r5
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	9305      	str	r3, [sp, #20]
 8016e90:	6823      	ldr	r3, [r4, #0]
 8016e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016e96:	4798      	blx	r3
 8016e98:	9010      	str	r0, [sp, #64]	@ 0x40
 8016e9a:	4658      	mov	r0, fp
 8016e9c:	f7ff fbdc 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016ea0:	fb07 f20a 	mul.w	r2, r7, sl
 8016ea4:	b203      	sxth	r3, r0
 8016ea6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016ea8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016eaa:	4442      	add	r2, r8
 8016eac:	920c      	str	r2, [sp, #48]	@ 0x30
 8016eae:	9a05      	ldr	r2, [sp, #20]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	dc16      	bgt.n	8016ee2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8016eb4:	eb06 080a 	add.w	r8, r6, sl
 8016eb8:	fb07 f808 	mul.w	r8, r7, r8
 8016ebc:	9a05      	ldr	r2, [sp, #20]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	db54      	blt.n	8016f6c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8016ec2:	6823      	ldr	r3, [r4, #0]
 8016ec4:	4642      	mov	r2, r8
 8016ec6:	4629      	mov	r1, r5
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016ece:	4456      	add	r6, sl
 8016ed0:	4798      	blx	r3
 8016ed2:	9010      	str	r0, [sp, #64]	@ 0x40
 8016ed4:	4658      	mov	r0, fp
 8016ed6:	f7ff fbbf 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016eda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016edc:	b203      	sxth	r3, r0
 8016ede:	4490      	add	r8, r2
 8016ee0:	e7ec      	b.n	8016ebc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8016ee2:	6823      	ldr	r3, [r4, #0]
 8016ee4:	fb07 f206 	mul.w	r2, r7, r6
 8016ee8:	4629      	mov	r1, r5
 8016eea:	4620      	mov	r0, r4
 8016eec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016ef0:	4798      	blx	r3
 8016ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ef4:	1ac0      	subs	r0, r0, r3
 8016ef6:	9010      	str	r0, [sp, #64]	@ 0x40
 8016ef8:	4658      	mov	r0, fp
 8016efa:	f7ff fbad 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016efe:	6823      	ldr	r3, [r4, #0]
 8016f00:	4680      	mov	r8, r0
 8016f02:	4629      	mov	r1, r5
 8016f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016f08:	4620      	mov	r0, r4
 8016f0a:	4798      	blx	r3
 8016f0c:	eba8 0000 	sub.w	r0, r8, r0
 8016f10:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8016f14:	b203      	sxth	r3, r0
 8016f16:	42da      	cmn	r2, r3
 8016f18:	930d      	str	r3, [sp, #52]	@ 0x34
 8016f1a:	d418      	bmi.n	8016f4e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8016f1c:	6822      	ldr	r2, [r4, #0]
 8016f1e:	4629      	mov	r1, r5
 8016f20:	4620      	mov	r0, r4
 8016f22:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8016f26:	4790      	blx	r2
 8016f28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f2a:	4283      	cmp	r3, r0
 8016f2c:	da0f      	bge.n	8016f4e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8016f2e:	9b08      	ldr	r3, [sp, #32]
 8016f30:	a90e      	add	r1, sp, #56	@ 0x38
 8016f32:	6822      	ldr	r2, [r4, #0]
 8016f34:	4620      	mov	r0, r4
 8016f36:	9302      	str	r3, [sp, #8]
 8016f38:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016f3c:	9301      	str	r3, [sp, #4]
 8016f3e:	fa0f f388 	sxth.w	r3, r8
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 8016f48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f4c:	47c0      	blx	r8
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	4456      	add	r6, sl
 8016f52:	4629      	mov	r1, r5
 8016f54:	4620      	mov	r0, r4
 8016f56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016f5a:	fb06 f207 	mul.w	r2, r6, r7
 8016f5e:	4798      	blx	r3
 8016f60:	9010      	str	r0, [sp, #64]	@ 0x40
 8016f62:	4658      	mov	r0, fp
 8016f64:	f7ff fb78 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016f68:	b203      	sxth	r3, r0
 8016f6a:	e7a0      	b.n	8016eae <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8016f6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016f70:	9b04      	ldr	r3, [sp, #16]
 8016f72:	4413      	add	r3, r2
 8016f74:	9304      	str	r3, [sp, #16]
 8016f76:	9a04      	ldr	r2, [sp, #16]
 8016f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f7a:	4293      	cmp	r3, r2
 8016f7c:	f43f aee2 	beq.w	8016d44 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016f80:	9b04      	ldr	r3, [sp, #16]
 8016f82:	4629      	mov	r1, r5
 8016f84:	6822      	ldr	r2, [r4, #0]
 8016f86:	4620      	mov	r0, r4
 8016f88:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 8016f8c:	fb03 f209 	mul.w	r2, r3, r9
 8016f90:	47c0      	blx	r8
 8016f92:	9010      	str	r0, [sp, #64]	@ 0x40
 8016f94:	4658      	mov	r0, fp
 8016f96:	f7ff fb5f 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016f9a:	b203      	sxth	r3, r0
 8016f9c:	9305      	str	r3, [sp, #20]
 8016f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016fa0:	e785      	b.n	8016eae <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8016fa2:	4798      	blx	r3
 8016fa4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016fa8:	deff      	udf	#255	@ 0xff

08016faa <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016faa:	b510      	push	{r4, lr}
 8016fac:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016fb0:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016fb4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016fb8:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016fbc:	139b      	asrs	r3, r3, #14
 8016fbe:	13a4      	asrs	r4, r4, #14
 8016fc0:	429c      	cmp	r4, r3
 8016fc2:	bfb8      	it	lt
 8016fc4:	461c      	movlt	r4, r3
 8016fc6:	2c01      	cmp	r4, #1
 8016fc8:	dd07      	ble.n	8016fda <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016fca:	fb91 f1f4 	sdiv	r1, r1, r4
 8016fce:	fb90 f0f4 	sdiv	r0, r0, r4
 8016fd2:	f7ff ffea 	bl	8016faa <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016fd6:	4360      	muls	r0, r4
 8016fd8:	bd10      	pop	{r4, pc}
 8016fda:	4340      	muls	r0, r0
 8016fdc:	fb01 0101 	mla	r1, r1, r1, r0
 8016fe0:	2000      	movs	r0, #0
 8016fe2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8016fe6:	bfb4      	ite	lt
 8016fe8:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8016fec:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8016ff0:	18c2      	adds	r2, r0, r3
 8016ff2:	428a      	cmp	r2, r1
 8016ff4:	bf9c      	itt	ls
 8016ff6:	1898      	addls	r0, r3, r2
 8016ff8:	1a89      	subls	r1, r1, r2
 8016ffa:	089b      	lsrs	r3, r3, #2
 8016ffc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8017000:	d1f6      	bne.n	8016ff0 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8017002:	e7e9      	b.n	8016fd8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08017004 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8017004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017006:	9906      	ldr	r1, [sp, #24]
 8017008:	4606      	mov	r6, r0
 801700a:	461c      	mov	r4, r3
 801700c:	2020      	movs	r0, #32
 801700e:	4291      	cmp	r1, r2
 8017010:	bfbc      	itt	lt
 8017012:	9206      	strlt	r2, [sp, #24]
 8017014:	460a      	movlt	r2, r1
 8017016:	9907      	ldr	r1, [sp, #28]
 8017018:	428b      	cmp	r3, r1
 801701a:	bfc4      	itt	gt
 801701c:	460c      	movgt	r4, r1
 801701e:	9307      	strgt	r3, [sp, #28]
 8017020:	fb92 f5f0 	sdiv	r5, r2, r0
 8017024:	fb94 f4f0 	sdiv	r4, r4, r0
 8017028:	a806      	add	r0, sp, #24
 801702a:	f7ff fdf9 	bl	8016c20 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801702e:	4607      	mov	r7, r0
 8017030:	a807      	add	r0, sp, #28
 8017032:	f7ff fdf5 	bl	8016c20 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017036:	1b7a      	subs	r2, r7, r5
 8017038:	1b00      	subs	r0, r0, r4
 801703a:	8035      	strh	r5, [r6, #0]
 801703c:	8074      	strh	r4, [r6, #2]
 801703e:	80f0      	strh	r0, [r6, #6]
 8017040:	4630      	mov	r0, r6
 8017042:	80b2      	strh	r2, [r6, #4]
 8017044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017046 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8017046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017048:	9c08      	ldr	r4, [sp, #32]
 801704a:	2602      	movs	r6, #2
 801704c:	4605      	mov	r5, r0
 801704e:	3401      	adds	r4, #1
 8017050:	fb94 f4f6 	sdiv	r4, r4, r6
 8017054:	18a6      	adds	r6, r4, r2
 8017056:	191f      	adds	r7, r3, r4
 8017058:	1b12      	subs	r2, r2, r4
 801705a:	1b1b      	subs	r3, r3, r4
 801705c:	e9cd 6700 	strd	r6, r7, [sp]
 8017060:	f7ff ffd0 	bl	8017004 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8017064:	4628      	mov	r0, r5
 8017066:	b003      	add	sp, #12
 8017068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801706a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801706a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801706e:	6943      	ldr	r3, [r0, #20]
 8017070:	b087      	sub	sp, #28
 8017072:	4606      	mov	r6, r0
 8017074:	460d      	mov	r5, r1
 8017076:	2b00      	cmp	r3, #0
 8017078:	d072      	beq.n	8017160 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 801707a:	695c      	ldr	r4, [r3, #20]
 801707c:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8017080:	6823      	ldr	r3, [r4, #0]
 8017082:	4620      	mov	r0, r4
 8017084:	017f      	lsls	r7, r7, #5
 8017086:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801708a:	4798      	blx	r3
 801708c:	6823      	ldr	r3, [r4, #0]
 801708e:	4680      	mov	r8, r0
 8017090:	4629      	mov	r1, r5
 8017092:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017096:	4620      	mov	r0, r4
 8017098:	4798      	blx	r3
 801709a:	9700      	str	r7, [sp, #0]
 801709c:	4603      	mov	r3, r0
 801709e:	4642      	mov	r2, r8
 80170a0:	4631      	mov	r1, r6
 80170a2:	a802      	add	r0, sp, #8
 80170a4:	f7ff ffcf 	bl	8017046 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80170a8:	2d00      	cmp	r5, #0
 80170aa:	dd1b      	ble.n	80170e4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 80170ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80170b0:	6823      	ldr	r3, [r4, #0]
 80170b2:	4620      	mov	r0, r4
 80170b4:	fa0f f888 	sxth.w	r8, r8
 80170b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80170bc:	4641      	mov	r1, r8
 80170be:	4798      	blx	r3
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	4681      	mov	r9, r0
 80170c4:	4641      	mov	r1, r8
 80170c6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80170ca:	4620      	mov	r0, r4
 80170cc:	4798      	blx	r3
 80170ce:	4631      	mov	r1, r6
 80170d0:	4603      	mov	r3, r0
 80170d2:	9700      	str	r7, [sp, #0]
 80170d4:	a804      	add	r0, sp, #16
 80170d6:	464a      	mov	r2, r9
 80170d8:	f7ff ffb5 	bl	8017046 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80170dc:	a904      	add	r1, sp, #16
 80170de:	a802      	add	r0, sp, #8
 80170e0:	f7ff fd59 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80170e4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80170e8:	3b01      	subs	r3, #1
 80170ea:	429d      	cmp	r5, r3
 80170ec:	da19      	bge.n	8017122 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 80170ee:	3501      	adds	r5, #1
 80170f0:	6823      	ldr	r3, [r4, #0]
 80170f2:	4620      	mov	r0, r4
 80170f4:	b22d      	sxth	r5, r5
 80170f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80170fa:	4629      	mov	r1, r5
 80170fc:	4798      	blx	r3
 80170fe:	6823      	ldr	r3, [r4, #0]
 8017100:	4680      	mov	r8, r0
 8017102:	4629      	mov	r1, r5
 8017104:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017108:	4620      	mov	r0, r4
 801710a:	4798      	blx	r3
 801710c:	4631      	mov	r1, r6
 801710e:	4603      	mov	r3, r0
 8017110:	9700      	str	r7, [sp, #0]
 8017112:	a804      	add	r0, sp, #16
 8017114:	4642      	mov	r2, r8
 8017116:	f7ff ff96 	bl	8017046 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801711a:	a904      	add	r1, sp, #16
 801711c:	a802      	add	r0, sp, #8
 801711e:	f7ff fd3a 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017122:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8017126:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 801712a:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 801712e:	18ca      	adds	r2, r1, r3
 8017130:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8017134:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017138:	a904      	add	r1, sp, #16
 801713a:	1a9b      	subs	r3, r3, r2
 801713c:	2200      	movs	r2, #0
 801713e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017142:	a802      	add	r0, sp, #8
 8017144:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017148:	f8ad 3016 	strh.w	r3, [sp, #22]
 801714c:	f7fd fd40 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8017150:	6833      	ldr	r3, [r6, #0]
 8017152:	a902      	add	r1, sp, #8
 8017154:	4630      	mov	r0, r6
 8017156:	691b      	ldr	r3, [r3, #16]
 8017158:	4798      	blx	r3
 801715a:	b007      	add	sp, #28
 801715c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	deff      	udf	#255	@ 0xff

08017164 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8017164:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017168:	2b00      	cmp	r3, #0
 801716a:	da05      	bge.n	8017178 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 801716c:	b29b      	uxth	r3, r3
 801716e:	880a      	ldrh	r2, [r1, #0]
 8017170:	441a      	add	r2, r3
 8017172:	425b      	negs	r3, r3
 8017174:	800a      	strh	r2, [r1, #0]
 8017176:	808b      	strh	r3, [r1, #4]
 8017178:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801717c:	2b00      	cmp	r3, #0
 801717e:	da05      	bge.n	801718c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8017180:	b29b      	uxth	r3, r3
 8017182:	884a      	ldrh	r2, [r1, #2]
 8017184:	441a      	add	r2, r3
 8017186:	425b      	negs	r3, r3
 8017188:	804a      	strh	r2, [r1, #2]
 801718a:	80cb      	strh	r3, [r1, #6]
 801718c:	4770      	bx	lr

0801718e <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 801718e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017190:	4604      	mov	r4, r0
 8017192:	460d      	mov	r5, r1
 8017194:	6801      	ldr	r1, [r0, #0]
 8017196:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 801719a:	9001      	str	r0, [sp, #4]
 801719c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80171a0:	9000      	str	r0, [sp, #0]
 80171a2:	a802      	add	r0, sp, #8
 80171a4:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 80171a8:	4621      	mov	r1, r4
 80171aa:	47b0      	blx	r6
 80171ac:	a902      	add	r1, sp, #8
 80171ae:	4620      	mov	r0, r4
 80171b0:	f7ff ffd8 	bl	8017164 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 80171b4:	a802      	add	r0, sp, #8
 80171b6:	4629      	mov	r1, r5
 80171b8:	f7fd fd0a 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 80171bc:	a802      	add	r0, sp, #8
 80171be:	f7fd fd4a 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 80171c2:	b968      	cbnz	r0, 80171e0 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	a902      	add	r1, sp, #8
 80171c8:	4620      	mov	r0, r4
 80171ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171cc:	4798      	blx	r3
 80171ce:	f7f3 fcb7 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 80171d2:	6803      	ldr	r3, [r0, #0]
 80171d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80171d6:	a902      	add	r1, sp, #8
 80171d8:	6a1d      	ldr	r5, [r3, #32]
 80171da:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80171de:	47a8      	blx	r5
 80171e0:	b004      	add	sp, #16
 80171e2:	bd70      	pop	{r4, r5, r6, pc}

080171e4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 80171e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e8:	b08b      	sub	sp, #44	@ 0x2c
 80171ea:	461e      	mov	r6, r3
 80171ec:	460f      	mov	r7, r1
 80171ee:	4615      	mov	r5, r2
 80171f0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 80171f4:	429e      	cmp	r6, r3
 80171f6:	9304      	str	r3, [sp, #16]
 80171f8:	d074      	beq.n	80172e4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 80171fa:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80171fe:	4631      	mov	r1, r6
 8017200:	4610      	mov	r0, r2
 8017202:	4634      	mov	r4, r6
 8017204:	015b      	lsls	r3, r3, #5
 8017206:	9303      	str	r3, [sp, #12]
 8017208:	6813      	ldr	r3, [r2, #0]
 801720a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801720e:	4798      	blx	r3
 8017210:	ab0a      	add	r3, sp, #40	@ 0x28
 8017212:	f843 0d10 	str.w	r0, [r3, #-16]!
 8017216:	4618      	mov	r0, r3
 8017218:	f7ff fa1e 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801721c:	682b      	ldr	r3, [r5, #0]
 801721e:	4631      	mov	r1, r6
 8017220:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017224:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017228:	4628      	mov	r0, r5
 801722a:	4798      	blx	r3
 801722c:	ab0a      	add	r3, sp, #40	@ 0x28
 801722e:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8017232:	4618      	mov	r0, r3
 8017234:	f7ff fa10 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017238:	4641      	mov	r1, r8
 801723a:	ea4f 1940 	mov.w	r9, r0, lsl #5
 801723e:	4638      	mov	r0, r7
 8017240:	464a      	mov	r2, r9
 8017242:	f015 fdc5 	bl	802cdd0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017246:	2301      	movs	r3, #1
 8017248:	9300      	str	r3, [sp, #0]
 801724a:	4628      	mov	r0, r5
 801724c:	9b00      	ldr	r3, [sp, #0]
 801724e:	441c      	add	r4, r3
 8017250:	682b      	ldr	r3, [r5, #0]
 8017252:	b224      	sxth	r4, r4
 8017254:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017258:	4621      	mov	r1, r4
 801725a:	4798      	blx	r3
 801725c:	9008      	str	r0, [sp, #32]
 801725e:	a808      	add	r0, sp, #32
 8017260:	f7ff f9fa 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017264:	4621      	mov	r1, r4
 8017266:	0143      	lsls	r3, r0, #5
 8017268:	4628      	mov	r0, r5
 801726a:	9301      	str	r3, [sp, #4]
 801726c:	682b      	ldr	r3, [r5, #0]
 801726e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017272:	4798      	blx	r3
 8017274:	9009      	str	r0, [sp, #36]	@ 0x24
 8017276:	a809      	add	r0, sp, #36	@ 0x24
 8017278:	f7ff f9ee 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801727c:	0143      	lsls	r3, r0, #5
 801727e:	9302      	str	r3, [sp, #8]
 8017280:	9b01      	ldr	r3, [sp, #4]
 8017282:	eba3 0b08 	sub.w	fp, r3, r8
 8017286:	9b02      	ldr	r3, [sp, #8]
 8017288:	eba3 0a09 	sub.w	sl, r3, r9
 801728c:	4658      	mov	r0, fp
 801728e:	4651      	mov	r1, sl
 8017290:	f7ff fe8b 	bl	8016faa <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017294:	b320      	cbz	r0, 80172e0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8017296:	4602      	mov	r2, r0
 8017298:	4651      	mov	r1, sl
 801729a:	9005      	str	r0, [sp, #20]
 801729c:	9803      	ldr	r0, [sp, #12]
 801729e:	f005 f9a4 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 80172a2:	2302      	movs	r3, #2
 80172a4:	4659      	mov	r1, fp
 80172a6:	fb90 faf3 	sdiv	sl, r0, r3
 80172aa:	9b05      	ldr	r3, [sp, #20]
 80172ac:	9803      	ldr	r0, [sp, #12]
 80172ae:	461a      	mov	r2, r3
 80172b0:	f005 f99b 	bl	801c5ea <_ZN8touchgfx6muldivElll>
 80172b4:	2302      	movs	r3, #2
 80172b6:	eba8 010a 	sub.w	r1, r8, sl
 80172ba:	fb90 fbf3 	sdiv	fp, r0, r3
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	eb0b 0209 	add.w	r2, fp, r9
 80172c4:	4638      	mov	r0, r7
 80172c6:	689b      	ldr	r3, [r3, #8]
 80172c8:	4798      	blx	r3
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	9a02      	ldr	r2, [sp, #8]
 80172ce:	4638      	mov	r0, r7
 80172d0:	9901      	ldr	r1, [sp, #4]
 80172d2:	689b      	ldr	r3, [r3, #8]
 80172d4:	445a      	add	r2, fp
 80172d6:	eba1 010a 	sub.w	r1, r1, sl
 80172da:	4798      	blx	r3
 80172dc:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 80172e0:	42a6      	cmp	r6, r4
 80172e2:	db02      	blt.n	80172ea <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 80172e4:	b00b      	add	sp, #44	@ 0x2c
 80172e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ea:	9b00      	ldr	r3, [sp, #0]
 80172ec:	9a04      	ldr	r2, [sp, #16]
 80172ee:	42a2      	cmp	r2, r4
 80172f0:	bf08      	it	eq
 80172f2:	f04f 33ff 	moveq.w	r3, #4294967295
 80172f6:	e7a7      	b.n	8017248 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

080172f8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 80172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fc:	6943      	ldr	r3, [r0, #20]
 80172fe:	b0a4      	sub	sp, #144	@ 0x90
 8017300:	4605      	mov	r5, r0
 8017302:	460f      	mov	r7, r1
 8017304:	2b00      	cmp	r3, #0
 8017306:	d077      	beq.n	80173f8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8017308:	695c      	ldr	r4, [r3, #20]
 801730a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801730e:	2b01      	cmp	r3, #1
 8017310:	dc04      	bgt.n	801731c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8017312:	2401      	movs	r4, #1
 8017314:	4620      	mov	r0, r4
 8017316:	b024      	add	sp, #144	@ 0x90
 8017318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801731c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8017320:	ae24      	add	r6, sp, #144	@ 0x90
 8017322:	011b      	lsls	r3, r3, #4
 8017324:	f846 3d74 	str.w	r3, [r6, #-116]!
 8017328:	4630      	mov	r0, r6
 801732a:	f7ff fc79 	bl	8016c20 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801732e:	8839      	ldrh	r1, [r7, #0]
 8017330:	88ba      	ldrh	r2, [r7, #4]
 8017332:	b280      	uxth	r0, r0
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	440a      	add	r2, r1
 8017338:	1a09      	subs	r1, r1, r0
 801733a:	4402      	add	r2, r0
 801733c:	f10d 000a 	add.w	r0, sp, #10
 8017340:	b209      	sxth	r1, r1
 8017342:	9000      	str	r0, [sp, #0]
 8017344:	b212      	sxth	r2, r2
 8017346:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 801734a:	4620      	mov	r0, r4
 801734c:	ab02      	add	r3, sp, #8
 801734e:	47c0      	blx	r8
 8017350:	2800      	cmp	r0, #0
 8017352:	d0de      	beq.n	8017312 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8017354:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8017358:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 801735c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8017360:	18ca      	adds	r2, r1, r3
 8017362:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8017366:	f8ad 100e 	strh.w	r1, [sp, #14]
 801736a:	4639      	mov	r1, r7
 801736c:	1a9b      	subs	r3, r3, r2
 801736e:	2200      	movs	r2, #0
 8017370:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017374:	a803      	add	r0, sp, #12
 8017376:	f8ad 200c 	strh.w	r2, [sp, #12]
 801737a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801737e:	f7fd fc27 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8017382:	4629      	mov	r1, r5
 8017384:	a805      	add	r0, sp, #20
 8017386:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8017388:	f005 f800 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801738c:	682b      	ldr	r3, [r5, #0]
 801738e:	4628      	mov	r0, r5
 8017390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017392:	4798      	blx	r3
 8017394:	ab03      	add	r3, sp, #12
 8017396:	9000      	str	r0, [sp, #0]
 8017398:	aa05      	add	r2, sp, #20
 801739a:	4639      	mov	r1, r7
 801739c:	4630      	mov	r0, r6
 801739e:	f015 fbcb 	bl	802cb38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80173a2:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 80173a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80173aa:	2f00      	cmp	r7, #0
 80173ac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80173b0:	dd03      	ble.n	80173ba <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 80173b2:	42bb      	cmp	r3, r7
 80173b4:	da01      	bge.n	80173ba <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 80173b6:	42ba      	cmp	r2, r7
 80173b8:	da11      	bge.n	80173de <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 80173ba:	9200      	str	r2, [sp, #0]
 80173bc:	4622      	mov	r2, r4
 80173be:	4631      	mov	r1, r6
 80173c0:	4628      	mov	r0, r5
 80173c2:	f7ff ff0f 	bl	80171e4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80173c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80173ca:	4630      	mov	r0, r6
 80173cc:	f015 fc48 	bl	802cc60 <_ZN8touchgfx6Canvas6renderEh>
 80173d0:	4b0b      	ldr	r3, [pc, #44]	@ (8017400 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 80173d2:	4604      	mov	r4, r0
 80173d4:	a80c      	add	r0, sp, #48	@ 0x30
 80173d6:	9307      	str	r3, [sp, #28]
 80173d8:	f001 fb20 	bl	8018a1c <_ZN8touchgfx7OutlineD1Ev>
 80173dc:	e79a      	b.n	8017314 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 80173de:	1e7a      	subs	r2, r7, #1
 80173e0:	4631      	mov	r1, r6
 80173e2:	4628      	mov	r0, r5
 80173e4:	b212      	sxth	r2, r2
 80173e6:	9200      	str	r2, [sp, #0]
 80173e8:	4622      	mov	r2, r4
 80173ea:	f7ff fefb 	bl	80171e4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80173ee:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80173f2:	9300      	str	r3, [sp, #0]
 80173f4:	463b      	mov	r3, r7
 80173f6:	e7e1      	b.n	80173bc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 80173f8:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 80173fc:	deff      	udf	#255	@ 0xff
 80173fe:	bf00      	nop
 8017400:	08032770 	.word	0x08032770

08017404 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8017404:	4770      	bx	lr

08017406 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8017406:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8017408:	b118      	cbz	r0, 8017412 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 801740a:	6803      	ldr	r3, [r0, #0]
 801740c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017410:	4718      	bx	r3
 8017412:	4770      	bx	lr

08017414 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8017414:	680b      	ldr	r3, [r1, #0]
 8017416:	4608      	mov	r0, r1
 8017418:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801741c:	4718      	bx	r3

0801741e <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 801741e:	680b      	ldr	r3, [r1, #0]
 8017420:	4608      	mov	r0, r1
 8017422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017426:	4718      	bx	r3

08017428 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8017428:	680b      	ldr	r3, [r1, #0]
 801742a:	4608      	mov	r0, r1
 801742c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8017430:	4718      	bx	r3

08017432 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8017432:	680b      	ldr	r3, [r1, #0]
 8017434:	4608      	mov	r0, r1
 8017436:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801743a:	4718      	bx	r3

0801743c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 801743c:	4a38      	ldr	r2, [pc, #224]	@ (8017520 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 801743e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017442:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8017444:	b087      	sub	sp, #28
 8017446:	8812      	ldrh	r2, [r2, #0]
 8017448:	4604      	mov	r4, r0
 801744a:	4689      	mov	r9, r1
 801744c:	429a      	cmp	r2, r3
 801744e:	d937      	bls.n	80174c0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8017450:	4a34      	ldr	r2, [pc, #208]	@ (8017524 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8017452:	6812      	ldr	r2, [r2, #0]
 8017454:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017458:	4b33      	ldr	r3, [pc, #204]	@ (8017528 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8017460:	f1b8 0f00 	cmp.w	r8, #0
 8017464:	d02c      	beq.n	80174c0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8017466:	6803      	ldr	r3, [r0, #0]
 8017468:	6945      	ldr	r5, [r0, #20]
 801746a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801746c:	2d00      	cmp	r5, #0
 801746e:	d052      	beq.n	8017516 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8017470:	696f      	ldr	r7, [r5, #20]
 8017472:	4798      	blx	r3
 8017474:	f897 502c 	ldrb.w	r5, [r7, #44]	@ 0x2c
 8017478:	fb15 f000 	smulbb	r0, r5, r0
 801747c:	b280      	uxth	r0, r0
 801747e:	1c45      	adds	r5, r0, #1
 8017480:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017484:	122d      	asrs	r5, r5, #8
 8017486:	d01b      	beq.n	80174c0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8017488:	6823      	ldr	r3, [r4, #0]
 801748a:	4639      	mov	r1, r7
 801748c:	4620      	mov	r0, r4
 801748e:	b2ed      	uxtb	r5, r5
 8017490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017494:	4798      	blx	r3
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	4606      	mov	r6, r0
 801749a:	4639      	mov	r1, r7
 801749c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80174a0:	4620      	mov	r0, r4
 80174a2:	4798      	blx	r3
 80174a4:	4683      	mov	fp, r0
 80174a6:	b970      	cbnz	r0, 80174c6 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 80174a8:	b96e      	cbnz	r6, 80174c6 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 80174aa:	6823      	ldr	r3, [r4, #0]
 80174ac:	4642      	mov	r2, r8
 80174ae:	9600      	str	r6, [sp, #0]
 80174b0:	4649      	mov	r1, r9
 80174b2:	4620      	mov	r0, r4
 80174b4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80174b8:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 80174bc:	463b      	mov	r3, r7
 80174be:	47a8      	blx	r5
 80174c0:	b007      	add	sp, #28
 80174c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c6:	2e00      	cmp	r6, #0
 80174c8:	ddfa      	ble.n	80174c0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	4639      	mov	r1, r7
 80174ce:	4620      	mov	r0, r4
 80174d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80174d4:	4798      	blx	r3
 80174d6:	6823      	ldr	r3, [r4, #0]
 80174d8:	4682      	mov	sl, r0
 80174da:	4639      	mov	r1, r7
 80174dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80174e0:	4620      	mov	r0, r4
 80174e2:	4798      	blx	r3
 80174e4:	4582      	cmp	sl, r0
 80174e6:	bfde      	ittt	le
 80174e8:	4603      	movle	r3, r0
 80174ea:	4650      	movle	r0, sl
 80174ec:	469a      	movle	sl, r3
 80174ee:	ebaa 0300 	sub.w	r3, sl, r0
 80174f2:	fb93 f3f6 	sdiv	r3, r3, r6
 80174f6:	2b64      	cmp	r3, #100	@ 0x64
 80174f8:	dce2      	bgt.n	80174c0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	4642      	mov	r2, r8
 80174fe:	9000      	str	r0, [sp, #0]
 8017500:	4649      	mov	r1, r9
 8017502:	4620      	mov	r0, r4
 8017504:	e9cd b503 	strd	fp, r5, [sp, #12]
 8017508:	e9cd a601 	strd	sl, r6, [sp, #4]
 801750c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8017510:	463b      	mov	r3, r7
 8017512:	47a8      	blx	r5
 8017514:	e7d4      	b.n	80174c0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8017516:	4798      	blx	r3
 8017518:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801751c:	deff      	udf	#255	@ 0xff
 801751e:	bf00      	nop
 8017520:	20012320 	.word	0x20012320
 8017524:	2001231c 	.word	0x2001231c
 8017528:	20012324 	.word	0x20012324

0801752c <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801752c:	b538      	push	{r3, r4, r5, lr}
 801752e:	680a      	ldr	r2, [r1, #0]
 8017530:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8017534:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8017538:	4608      	mov	r0, r1
 801753a:	4790      	blx	r2
 801753c:	4629      	mov	r1, r5
 801753e:	4602      	mov	r2, r0
 8017540:	4620      	mov	r0, r4
 8017542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017546:	f7ff bab9 	b.w	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0801754a <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801754a:	b538      	push	{r3, r4, r5, lr}
 801754c:	680a      	ldr	r2, [r1, #0]
 801754e:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8017552:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8017556:	4608      	mov	r0, r1
 8017558:	4790      	blx	r2
 801755a:	4629      	mov	r1, r5
 801755c:	4602      	mov	r2, r0
 801755e:	4620      	mov	r0, r4
 8017560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017564:	f7ff baaa 	b.w	8016abc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08017568 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8017568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801756c:	b08d      	sub	sp, #52	@ 0x34
 801756e:	4606      	mov	r6, r0
 8017570:	9309      	str	r3, [sp, #36]	@ 0x24
 8017572:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8017576:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	@ 0x60
 801757a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801757e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	@ 0x58
 8017582:	930a      	str	r3, [sp, #40]	@ 0x28
 8017584:	f1b9 0f00 	cmp.w	r9, #0
 8017588:	d117      	bne.n	80175ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 801758a:	2f00      	cmp	r7, #0
 801758c:	dc7c      	bgt.n	8017688 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 801758e:	f1b8 0f00 	cmp.w	r8, #0
 8017592:	da01      	bge.n	8017598 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8017594:	2f00      	cmp	r7, #0
 8017596:	d17a      	bne.n	801768e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8017598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801759a:	4630      	mov	r0, r6
 801759c:	6832      	ldr	r2, [r6, #0]
 801759e:	9318      	str	r3, [sp, #96]	@ 0x60
 80175a0:	2300      	movs	r3, #0
 80175a2:	9907      	ldr	r1, [sp, #28]
 80175a4:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 80175a8:	f8d2 408c 	ldr.w	r4, [r2, #140]	@ 0x8c
 80175ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80175b0:	46a4      	mov	ip, r4
 80175b2:	b00d      	add	sp, #52	@ 0x34
 80175b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b8:	4760      	bx	ip
 80175ba:	fb97 f4f9 	sdiv	r4, r7, r9
 80175be:	1e63      	subs	r3, r4, #1
 80175c0:	9305      	str	r3, [sp, #20]
 80175c2:	f1ba 0f00 	cmp.w	sl, #0
 80175c6:	d122      	bne.n	801760e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 80175c8:	fb03 f509 	mul.w	r5, r3, r9
 80175cc:	fb98 faf9 	sdiv	sl, r8, r9
 80175d0:	f10a 0a02 	add.w	sl, sl, #2
 80175d4:	9b05      	ldr	r3, [sp, #20]
 80175d6:	459a      	cmp	sl, r3
 80175d8:	d059      	beq.n	801768e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80175da:	42af      	cmp	r7, r5
 80175dc:	dc5a      	bgt.n	8017694 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 80175de:	45a8      	cmp	r8, r5
 80175e0:	da01      	bge.n	80175e6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 80175e2:	42af      	cmp	r7, r5
 80175e4:	db0e      	blt.n	8017604 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80175e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175e8:	4630      	mov	r0, r6
 80175ea:	9905      	ldr	r1, [sp, #20]
 80175ec:	9302      	str	r3, [sp, #8]
 80175ee:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80175f0:	6832      	ldr	r2, [r6, #0]
 80175f2:	434b      	muls	r3, r1
 80175f4:	9907      	ldr	r1, [sp, #28]
 80175f6:	e9cd 5300 	strd	r5, r3, [sp]
 80175fa:	f8d2 b08c 	ldr.w	fp, [r2, #140]	@ 0x8c
 80175fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017602:	47d8      	blx	fp
 8017604:	9b05      	ldr	r3, [sp, #20]
 8017606:	444d      	add	r5, r9
 8017608:	3301      	adds	r3, #1
 801760a:	9305      	str	r3, [sp, #20]
 801760c:	e7e2      	b.n	80175d4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 801760e:	fb97 f3fa 	sdiv	r3, r7, sl
 8017612:	3b01      	subs	r3, #1
 8017614:	9306      	str	r3, [sp, #24]
 8017616:	9a06      	ldr	r2, [sp, #24]
 8017618:	fb98 f3fa 	sdiv	r3, r8, sl
 801761c:	fb02 fb0a 	mul.w	fp, r2, sl
 8017620:	9a05      	ldr	r2, [sp, #20]
 8017622:	3302      	adds	r3, #2
 8017624:	fb02 f509 	mul.w	r5, r2, r9
 8017628:	930b      	str	r3, [sp, #44]	@ 0x2c
 801762a:	45ab      	cmp	fp, r5
 801762c:	dd1d      	ble.n	801766a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 801762e:	42af      	cmp	r7, r5
 8017630:	dc08      	bgt.n	8017644 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8017632:	45a8      	cmp	r8, r5
 8017634:	da08      	bge.n	8017648 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8017636:	42af      	cmp	r7, r5
 8017638:	da06      	bge.n	8017648 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 801763a:	9b05      	ldr	r3, [sp, #20]
 801763c:	444d      	add	r5, r9
 801763e:	3301      	adds	r3, #1
 8017640:	9305      	str	r3, [sp, #20]
 8017642:	e7f2      	b.n	801762a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8017644:	45a8      	cmp	r8, r5
 8017646:	dcf8      	bgt.n	801763a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8017648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801764a:	4630      	mov	r0, r6
 801764c:	9905      	ldr	r1, [sp, #20]
 801764e:	9302      	str	r3, [sp, #8]
 8017650:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8017652:	6832      	ldr	r2, [r6, #0]
 8017654:	434b      	muls	r3, r1
 8017656:	9907      	ldr	r1, [sp, #28]
 8017658:	e9cd 5300 	strd	r5, r3, [sp]
 801765c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8017660:	461c      	mov	r4, r3
 8017662:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017666:	47a0      	blx	r4
 8017668:	e7e7      	b.n	801763a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 801766a:	45ab      	cmp	fp, r5
 801766c:	db04      	blt.n	8017678 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 801766e:	9b05      	ldr	r3, [sp, #20]
 8017670:	444d      	add	r5, r9
 8017672:	3301      	adds	r3, #1
 8017674:	9305      	str	r3, [sp, #20]
 8017676:	e7f8      	b.n	801766a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8017678:	9b06      	ldr	r3, [sp, #24]
 801767a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801767c:	3301      	adds	r3, #1
 801767e:	4293      	cmp	r3, r2
 8017680:	9306      	str	r3, [sp, #24]
 8017682:	d004      	beq.n	801768e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8017684:	44d3      	add	fp, sl
 8017686:	e7d0      	b.n	801762a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8017688:	f1b8 0f00 	cmp.w	r8, #0
 801768c:	dd84      	ble.n	8017598 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 801768e:	b00d      	add	sp, #52	@ 0x34
 8017690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017694:	45a8      	cmp	r8, r5
 8017696:	dcb5      	bgt.n	8017604 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8017698:	e7a5      	b.n	80175e6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

0801769a <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 801769a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801769e:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	@ 0x120
 80176a2:	b089      	sub	sp, #36	@ 0x24
 80176a4:	468a      	mov	sl, r1
 80176a6:	4693      	mov	fp, r2
 80176a8:	2c00      	cmp	r4, #0
 80176aa:	9007      	str	r0, [sp, #28]
 80176ac:	461d      	mov	r5, r3
 80176ae:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80176b2:	e9dd c612 	ldrd	ip, r6, [sp, #72]	@ 0x48
 80176b6:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	@ 0x50
 80176ba:	dd03      	ble.n	80176c4 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 80176bc:	4564      	cmp	r4, ip
 80176be:	dd01      	ble.n	80176c4 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 80176c0:	42b4      	cmp	r4, r6
 80176c2:	dd0e      	ble.n	80176e2 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 80176c4:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 80176c8:	e9cd 8915 	strd	r8, r9, [sp, #84]	@ 0x54
 80176cc:	e9cd 6713 	strd	r6, r7, [sp, #76]	@ 0x4c
 80176d0:	462b      	mov	r3, r5
 80176d2:	465a      	mov	r2, fp
 80176d4:	4651      	mov	r1, sl
 80176d6:	9807      	ldr	r0, [sp, #28]
 80176d8:	b009      	add	sp, #36	@ 0x24
 80176da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176de:	f7ff bf43 	b.w	8017568 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 80176e2:	f104 3eff 	add.w	lr, r4, #4294967295
 80176e6:	9702      	str	r7, [sp, #8]
 80176e8:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80176ec:	e9cd ce00 	strd	ip, lr, [sp]
 80176f0:	f7ff ff3a 	bl	8017568 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 80176f4:	9412      	str	r4, [sp, #72]	@ 0x48
 80176f6:	e9cd 8915 	strd	r8, r9, [sp, #84]	@ 0x54
 80176fa:	e9cd 6713 	strd	r6, r7, [sp, #76]	@ 0x4c
 80176fe:	e7e7      	b.n	80176d0 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

08017700 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 8017700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017704:	f1b3 0900 	subs.w	r9, r3, #0
 8017708:	460d      	mov	r5, r1
 801770a:	4690      	mov	r8, r2
 801770c:	9f08      	ldr	r7, [sp, #32]
 801770e:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8017712:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017714:	da18      	bge.n	8017748 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8017716:	2a01      	cmp	r2, #1
 8017718:	dd16      	ble.n	8017748 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 801771a:	232d      	movs	r3, #45	@ 0x2d
 801771c:	f1c9 0900 	rsb	r9, r9, #0
 8017720:	2001      	movs	r0, #1
 8017722:	800b      	strh	r3, [r1, #0]
 8017724:	2f00      	cmp	r7, #0
 8017726:	d111      	bne.n	801774c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8017728:	2302      	movs	r3, #2
 801772a:	eba8 0100 	sub.w	r1, r8, r0
 801772e:	4a26      	ldr	r2, [pc, #152]	@ (80177c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8017730:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8017734:	b289      	uxth	r1, r1
 8017736:	fb96 f3f3 	sdiv	r3, r6, r3
 801773a:	444b      	add	r3, r9
 801773c:	fb93 f3f6 	sdiv	r3, r3, r6
 8017740:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017744:	f006 be06 	b.w	801e354 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017748:	2000      	movs	r0, #0
 801774a:	e7eb      	b.n	8017724 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 801774c:	dd39      	ble.n	80177c2 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801774e:	eba8 0100 	sub.w	r1, r8, r0
 8017752:	4a1d      	ldr	r2, [pc, #116]	@ (80177c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8017754:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8017758:	f108 38ff 	add.w	r8, r8, #4294967295
 801775c:	b289      	uxth	r1, r1
 801775e:	fb99 f4f6 	sdiv	r4, r9, r6
 8017762:	4623      	mov	r3, r4
 8017764:	f006 fdf6 	bl	801e354 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017768:	4628      	mov	r0, r5
 801776a:	f006 fa87 	bl	801dc7c <_ZN8touchgfx7Unicode6strlenEPKt>
 801776e:	4580      	cmp	r8, r0
 8017770:	dd27      	ble.n	80177c2 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8017772:	f04f 0e02 	mov.w	lr, #2
 8017776:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 801777a:	fb06 9314 	mls	r3, r6, r4, r9
 801777e:	3001      	adds	r0, #1
 8017780:	2200      	movs	r2, #0
 8017782:	f04f 090a 	mov.w	r9, #10
 8017786:	f107 3aff 	add.w	sl, r7, #4294967295
 801778a:	fb96 fefe 	sdiv	lr, r6, lr
 801778e:	4580      	cmp	r8, r0
 8017790:	4684      	mov	ip, r0
 8017792:	dd13      	ble.n	80177bc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8017794:	fb09 f303 	mul.w	r3, r9, r3
 8017798:	4592      	cmp	sl, r2
 801779a:	f102 0201 	add.w	r2, r2, #1
 801779e:	f100 0c01 	add.w	ip, r0, #1
 80177a2:	bf08      	it	eq
 80177a4:	4473      	addeq	r3, lr
 80177a6:	4297      	cmp	r7, r2
 80177a8:	fb93 f4f6 	sdiv	r4, r3, r6
 80177ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80177b0:	fb06 3314 	mls	r3, r6, r4, r3
 80177b4:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 80177b8:	4660      	mov	r0, ip
 80177ba:	d1e8      	bne.n	801778e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 80177bc:	2300      	movs	r3, #0
 80177be:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 80177c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177c6:	bf00      	nop
 80177c8:	0803105c 	.word	0x0803105c

080177cc <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 80177cc:	4a69      	ldr	r2, [pc, #420]	@ (8017974 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 80177ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177d2:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80177d4:	b093      	sub	sp, #76	@ 0x4c
 80177d6:	8812      	ldrh	r2, [r2, #0]
 80177d8:	4604      	mov	r4, r0
 80177da:	460e      	mov	r6, r1
 80177dc:	429a      	cmp	r2, r3
 80177de:	d93a      	bls.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80177e0:	4a65      	ldr	r2, [pc, #404]	@ (8017978 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 80177e2:	6812      	ldr	r2, [r2, #0]
 80177e4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80177e8:	4b64      	ldr	r3, [pc, #400]	@ (801797c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80177f0:	f1b8 0f00 	cmp.w	r8, #0
 80177f4:	d02f      	beq.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80177f6:	6803      	ldr	r3, [r0, #0]
 80177f8:	6945      	ldr	r5, [r0, #20]
 80177fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80177fc:	2d00      	cmp	r5, #0
 80177fe:	f000 80b5 	beq.w	801796c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 8017802:	696f      	ldr	r7, [r5, #20]
 8017804:	4798      	blx	r3
 8017806:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801780a:	fb13 f000 	smulbb	r0, r3, r0
 801780e:	b280      	uxth	r0, r0
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017816:	0a03      	lsrs	r3, r0, #8
 8017818:	d01d      	beq.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801781a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801781c:	4620      	mov	r0, r4
 801781e:	6823      	ldr	r3, [r4, #0]
 8017820:	434e      	muls	r6, r1
 8017822:	4639      	mov	r1, r7
 8017824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017828:	4798      	blx	r3
 801782a:	6823      	ldr	r3, [r4, #0]
 801782c:	4605      	mov	r5, r0
 801782e:	4639      	mov	r1, r7
 8017830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017834:	4620      	mov	r0, r4
 8017836:	4798      	blx	r3
 8017838:	2d00      	cmp	r5, #0
 801783a:	dd0f      	ble.n	801785c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 801783c:	fb96 f3f5 	sdiv	r3, r6, r5
 8017840:	436b      	muls	r3, r5
 8017842:	1b9a      	subs	r2, r3, r6
 8017844:	4253      	negs	r3, r2
 8017846:	4153      	adcs	r3, r2
 8017848:	2800      	cmp	r0, #0
 801784a:	dd09      	ble.n	8017860 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 801784c:	fb96 f2f0 	sdiv	r2, r6, r0
 8017850:	4350      	muls	r0, r2
 8017852:	42b0      	cmp	r0, r6
 8017854:	d10d      	bne.n	8017872 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8017856:	b013      	add	sp, #76	@ 0x4c
 8017858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801785c:	2300      	movs	r3, #0
 801785e:	e7f3      	b.n	8017848 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 8017860:	d107      	bne.n	8017872 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8017862:	2d00      	cmp	r5, #0
 8017864:	d17f      	bne.n	8017966 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 8017866:	2e00      	cmp	r6, #0
 8017868:	d063      	beq.n	8017932 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 801786a:	2b00      	cmp	r3, #0
 801786c:	d0f3      	beq.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801786e:	462a      	mov	r2, r5
 8017870:	e007      	b.n	8017882 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8017872:	2b00      	cmp	r3, #0
 8017874:	d0ef      	beq.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8017876:	2d00      	cmp	r5, #0
 8017878:	d0f9      	beq.n	801786e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 801787a:	fb96 f2f5 	sdiv	r2, r6, r5
 801787e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8017880:	436a      	muls	r2, r5
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	4631      	mov	r1, r6
 8017886:	4638      	mov	r0, r7
 8017888:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801788c:	4798      	blx	r3
 801788e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017890:	2214      	movs	r2, #20
 8017892:	a908      	add	r1, sp, #32
 8017894:	9302      	str	r3, [sp, #8]
 8017896:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 801789a:	9301      	str	r3, [sp, #4]
 801789c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80178a0:	9300      	str	r3, [sp, #0]
 80178a2:	4603      	mov	r3, r0
 80178a4:	4620      	mov	r0, r4
 80178a6:	f7ff ff2b 	bl	8017700 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80178aa:	4b35      	ldr	r3, [pc, #212]	@ (8017980 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 80178ac:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80178ae:	6818      	ldr	r0, [r3, #0]
 80178b0:	f7f9 ff44 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 80178b4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80178b8:	4681      	mov	r9, r0
 80178ba:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80178be:	f8d8 3000 	ldr.w	r3, [r8]
 80178c2:	d138      	bne.n	8017936 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 80178c4:	4601      	mov	r1, r0
 80178c6:	699b      	ldr	r3, [r3, #24]
 80178c8:	aa08      	add	r2, sp, #32
 80178ca:	4640      	mov	r0, r8
 80178cc:	4798      	blx	r3
 80178ce:	b205      	sxth	r5, r0
 80178d0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80178d4:	2002      	movs	r0, #2
 80178d6:	4631      	mov	r1, r6
 80178d8:	f8b7 906c 	ldrh.w	r9, [r7, #108]	@ 0x6c
 80178dc:	2b01      	cmp	r3, #1
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	bf88      	it	hi
 80178e2:	f105 0801 	addhi.w	r8, r5, #1
 80178e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80178ea:	bf8c      	ite	hi
 80178ec:	fb98 f8f0 	sdivhi	r8, r8, r0
 80178f0:	fb95 f8f0 	sdivls	r8, r5, r0
 80178f4:	4638      	mov	r0, r7
 80178f6:	bf88      	it	hi
 80178f8:	fa0f f888 	sxthhi.w	r8, r8
 80178fc:	4798      	blx	r3
 80178fe:	ab12      	add	r3, sp, #72	@ 0x48
 8017900:	f843 0d34 	str.w	r0, [r3, #-52]!
 8017904:	4618      	mov	r0, r3
 8017906:	f7fe fea7 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801790a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801790e:	4448      	add	r0, r9
 8017910:	2200      	movs	r2, #0
 8017912:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017916:	a906      	add	r1, sp, #24
 8017918:	eba0 0808 	sub.w	r8, r0, r8
 801791c:	6823      	ldr	r3, [r4, #0]
 801791e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8017922:	4620      	mov	r0, r4
 8017924:	f8ad 8018 	strh.w	r8, [sp, #24]
 8017928:	f8ad 501c 	strh.w	r5, [sp, #28]
 801792c:	691b      	ldr	r3, [r3, #16]
 801792e:	4798      	blx	r3
 8017930:	e791      	b.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8017932:	4632      	mov	r2, r6
 8017934:	e7a5      	b.n	8017882 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8017936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017938:	4640      	mov	r0, r8
 801793a:	4798      	blx	r3
 801793c:	f8d8 3000 	ldr.w	r3, [r8]
 8017940:	4605      	mov	r5, r0
 8017942:	aa08      	add	r2, sp, #32
 8017944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017946:	4649      	mov	r1, r9
 8017948:	4640      	mov	r0, r8
 801794a:	4798      	blx	r3
 801794c:	fb15 f500 	smulbb	r5, r5, r0
 8017950:	f8d8 3000 	ldr.w	r3, [r8]
 8017954:	aa08      	add	r2, sp, #32
 8017956:	b2ad      	uxth	r5, r5
 8017958:	4649      	mov	r1, r9
 801795a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801795c:	4640      	mov	r0, r8
 801795e:	4798      	blx	r3
 8017960:	4405      	add	r5, r0
 8017962:	b22d      	sxth	r5, r5
 8017964:	e7b4      	b.n	80178d0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 8017966:	2b00      	cmp	r3, #0
 8017968:	d187      	bne.n	801787a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 801796a:	e774      	b.n	8017856 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801796c:	4798      	blx	r3
 801796e:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017972:	deff      	udf	#255	@ 0xff
 8017974:	20012320 	.word	0x20012320
 8017978:	2001231c 	.word	0x2001231c
 801797c:	20012324 	.word	0x20012324
 8017980:	20012328 	.word	0x20012328

08017984 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8017984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017988:	b09b      	sub	sp, #108	@ 0x6c
 801798a:	461e      	mov	r6, r3
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	4604      	mov	r4, r0
 8017990:	af1a      	add	r7, sp, #104	@ 0x68
 8017992:	9104      	str	r1, [sp, #16]
 8017994:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8017998:	4630      	mov	r0, r6
 801799a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801799c:	4690      	mov	r8, r2
 801799e:	4798      	blx	r3
 80179a0:	f847 0d28 	str.w	r0, [r7, #-40]!
 80179a4:	4638      	mov	r0, r7
 80179a6:	f7fe fe57 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80179aa:	f8b6 3116 	ldrh.w	r3, [r6, #278]	@ 0x116
 80179ae:	1ac0      	subs	r0, r0, r3
 80179b0:	b200      	sxth	r0, r0
 80179b2:	2800      	cmp	r0, #0
 80179b4:	f2c0 80b8 	blt.w	8017b28 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 80179b8:	f8b6 2118 	ldrh.w	r2, [r6, #280]	@ 0x118
 80179bc:	441a      	add	r2, r3
 80179be:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
 80179c2:	1a9b      	subs	r3, r3, r2
 80179c4:	b21b      	sxth	r3, r3
 80179c6:	4298      	cmp	r0, r3
 80179c8:	f280 80ae 	bge.w	8017b28 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 80179cc:	6833      	ldr	r3, [r6, #0]
 80179ce:	4630      	mov	r0, r6
 80179d0:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	@ 0x90
 80179d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80179d8:	4798      	blx	r3
 80179da:	6833      	ldr	r3, [r6, #0]
 80179dc:	f8b4 9042 	ldrh.w	r9, [r4, #66]	@ 0x42
 80179e0:	4605      	mov	r5, r0
 80179e2:	f8b4 b044 	ldrh.w	fp, [r4, #68]	@ 0x44
 80179e6:	4630      	mov	r0, r6
 80179e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80179ec:	4798      	blx	r3
 80179ee:	f8cd 9000 	str.w	r9, [sp]
 80179f2:	462b      	mov	r3, r5
 80179f4:	2214      	movs	r2, #20
 80179f6:	4639      	mov	r1, r7
 80179f8:	e9cd b001 	strd	fp, r0, [sp, #4]
 80179fc:	4620      	mov	r0, r4
 80179fe:	f7ff fe7f 	bl	8017700 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8017a02:	4b57      	ldr	r3, [pc, #348]	@ (8017b60 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 8017a04:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017a06:	6818      	ldr	r0, [r3, #0]
 8017a08:	f7f9 fe98 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 8017a0c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017a10:	4681      	mov	r9, r0
 8017a12:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017a16:	f8d8 3000 	ldr.w	r3, [r8]
 8017a1a:	f040 8088 	bne.w	8017b2e <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 8017a1e:	4601      	mov	r1, r0
 8017a20:	699b      	ldr	r3, [r3, #24]
 8017a22:	463a      	mov	r2, r7
 8017a24:	4640      	mov	r0, r8
 8017a26:	4798      	blx	r3
 8017a28:	b205      	sxth	r5, r0
 8017a2a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017a2e:	2002      	movs	r0, #2
 8017a30:	6832      	ldr	r2, [r6, #0]
 8017a32:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 8017a36:	2b01      	cmp	r3, #1
 8017a38:	f8b6 306c 	ldrh.w	r3, [r6, #108]	@ 0x6c
 8017a3c:	f8d2 2114 	ldr.w	r2, [r2, #276]	@ 0x114
 8017a40:	bf88      	it	hi
 8017a42:	f105 0b01 	addhi.w	fp, r5, #1
 8017a46:	9305      	str	r3, [sp, #20]
 8017a48:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8017a4a:	bf8c      	ite	hi
 8017a4c:	fb9b fbf0 	sdivhi	fp, fp, r0
 8017a50:	fb95 fbf0 	sdivls	fp, r5, r0
 8017a54:	4630      	mov	r0, r6
 8017a56:	bf88      	it	hi
 8017a58:	fa0f fb8b 	sxthhi.w	fp, fp
 8017a5c:	4790      	blx	r2
 8017a5e:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8017a62:	4650      	mov	r0, sl
 8017a64:	2600      	movs	r6, #0
 8017a66:	f7fe fdf7 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017a6a:	9b05      	ldr	r3, [sp, #20]
 8017a6c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017a70:	4418      	add	r0, r3
 8017a72:	f8ad 5020 	strh.w	r5, [sp, #32]
 8017a76:	ad07      	add	r5, sp, #28
 8017a78:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017a7c:	eba0 0b0b 	sub.w	fp, r0, fp
 8017a80:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8017a84:	f8ad b01c 	strh.w	fp, [sp, #28]
 8017a88:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8017a8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017a90:	e88b 0003 	stmia.w	fp, {r0, r1}
 8017a94:	9904      	ldr	r1, [sp, #16]
 8017a96:	4658      	mov	r0, fp
 8017a98:	f7fd f89a 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8017a9c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8017aa0:	42b3      	cmp	r3, r6
 8017aa2:	dd41      	ble.n	8017b28 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8017aa4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8017aa8:	42b3      	cmp	r3, r6
 8017aaa:	dd3d      	ble.n	8017b28 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8017aac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017ab6:	1a5b      	subs	r3, r3, r1
 8017ab8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8017abc:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8017ac0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8017ac4:	1a5b      	subs	r3, r3, r1
 8017ac6:	4629      	mov	r1, r5
 8017ac8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8017acc:	6823      	ldr	r3, [r4, #0]
 8017ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ad0:	4798      	blx	r3
 8017ad2:	4b24      	ldr	r3, [pc, #144]	@ (8017b64 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 8017ad4:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8017adc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017ae0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017ae2:	785b      	ldrb	r3, [r3, #1]
 8017ae4:	910d      	str	r1, [sp, #52]	@ 0x34
 8017ae6:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8017aea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017aee:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8017af2:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8017af6:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8017afa:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 8017afe:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017b02:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8017b06:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
 8017b0a:	f88d 603b 	strb.w	r6, [sp, #59]	@ 0x3b
 8017b0e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8017b12:	f7f3 f815 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8017b16:	465b      	mov	r3, fp
 8017b18:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8017b1c:	e9cd a900 	strd	sl, r9, [sp]
 8017b20:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017b24:	f7f9 fd9b 	bl	801165e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017b28:	b01b      	add	sp, #108	@ 0x6c
 8017b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b30:	4640      	mov	r0, r8
 8017b32:	4798      	blx	r3
 8017b34:	f8d8 3000 	ldr.w	r3, [r8]
 8017b38:	4605      	mov	r5, r0
 8017b3a:	463a      	mov	r2, r7
 8017b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b3e:	4649      	mov	r1, r9
 8017b40:	4640      	mov	r0, r8
 8017b42:	4798      	blx	r3
 8017b44:	fb15 f500 	smulbb	r5, r5, r0
 8017b48:	f8d8 3000 	ldr.w	r3, [r8]
 8017b4c:	463a      	mov	r2, r7
 8017b4e:	b2ad      	uxth	r5, r5
 8017b50:	4649      	mov	r1, r9
 8017b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b54:	4640      	mov	r0, r8
 8017b56:	4798      	blx	r3
 8017b58:	4405      	add	r5, r0
 8017b5a:	b22d      	sxth	r5, r5
 8017b5c:	e765      	b.n	8017a2a <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 8017b5e:	bf00      	nop
 8017b60:	20012328 	.word	0x20012328
 8017b64:	2001231c 	.word	0x2001231c

08017b68 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8017b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b6c:	b09b      	sub	sp, #108	@ 0x6c
 8017b6e:	4698      	mov	r8, r3
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	4604      	mov	r4, r0
 8017b74:	ae1a      	add	r6, sp, #104	@ 0x68
 8017b76:	9104      	str	r1, [sp, #16]
 8017b78:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017b7c:	4640      	mov	r0, r8
 8017b7e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8017b80:	4617      	mov	r7, r2
 8017b82:	4798      	blx	r3
 8017b84:	f846 0d28 	str.w	r0, [r6, #-40]!
 8017b88:	4630      	mov	r0, r6
 8017b8a:	f7fe fd65 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017b8e:	f8b8 3114 	ldrh.w	r3, [r8, #276]	@ 0x114
 8017b92:	1ac0      	subs	r0, r0, r3
 8017b94:	b200      	sxth	r0, r0
 8017b96:	2800      	cmp	r0, #0
 8017b98:	f2c0 80ba 	blt.w	8017d10 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017b9c:	f8b8 211a 	ldrh.w	r2, [r8, #282]	@ 0x11a
 8017ba0:	441a      	add	r2, r3
 8017ba2:	f8b8 3042 	ldrh.w	r3, [r8, #66]	@ 0x42
 8017ba6:	1a9b      	subs	r3, r3, r2
 8017ba8:	b21b      	sxth	r3, r3
 8017baa:	4298      	cmp	r0, r3
 8017bac:	f280 80b0 	bge.w	8017d10 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017bb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bb2:	2214      	movs	r2, #20
 8017bb4:	4631      	mov	r1, r6
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	9302      	str	r3, [sp, #8]
 8017bba:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8017bbe:	9301      	str	r3, [sp, #4]
 8017bc0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8017bc4:	9300      	str	r3, [sp, #0]
 8017bc6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8017bc8:	f7ff fd9a 	bl	8017700 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8017bcc:	4b55      	ldr	r3, [pc, #340]	@ (8017d24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 8017bce:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017bd0:	6818      	ldr	r0, [r3, #0]
 8017bd2:	f7f9 fdb3 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 8017bd6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017bda:	4681      	mov	r9, r0
 8017bdc:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	f040 8098 	bne.w	8017d16 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8017be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017be8:	4638      	mov	r0, r7
 8017bea:	4798      	blx	r3
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	4605      	mov	r5, r0
 8017bf0:	4632      	mov	r2, r6
 8017bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017bf4:	4649      	mov	r1, r9
 8017bf6:	4638      	mov	r0, r7
 8017bf8:	4798      	blx	r3
 8017bfa:	fb15 f500 	smulbb	r5, r5, r0
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	4632      	mov	r2, r6
 8017c02:	b2ad      	uxth	r5, r5
 8017c04:	4649      	mov	r1, r9
 8017c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c08:	4638      	mov	r0, r7
 8017c0a:	4798      	blx	r3
 8017c0c:	4405      	add	r5, r0
 8017c0e:	b22d      	sxth	r5, r5
 8017c10:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017c14:	2002      	movs	r0, #2
 8017c16:	f8d8 2000 	ldr.w	r2, [r8]
 8017c1a:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	@ 0xc6
 8017c24:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8017c28:	bf88      	it	hi
 8017c2a:	f105 0b01 	addhi.w	fp, r5, #1
 8017c2e:	9305      	str	r3, [sp, #20]
 8017c30:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8017c32:	bf8c      	ite	hi
 8017c34:	fb9b fbf0 	sdivhi	fp, fp, r0
 8017c38:	fb95 fbf0 	sdivls	fp, r5, r0
 8017c3c:	4640      	mov	r0, r8
 8017c3e:	bf88      	it	hi
 8017c40:	fa0f fb8b 	sxthhi.w	fp, fp
 8017c44:	4790      	blx	r2
 8017c46:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8017c4a:	4650      	mov	r0, sl
 8017c4c:	f04f 0800 	mov.w	r8, #0
 8017c50:	f7fe fd02 	bl	8016658 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017c54:	9b05      	ldr	r3, [sp, #20]
 8017c56:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017c5a:	4418      	add	r0, r3
 8017c5c:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
 8017c60:	ad07      	add	r5, sp, #28
 8017c62:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017c66:	eba0 0b0b 	sub.w	fp, r0, fp
 8017c6a:	f8ad 1020 	strh.w	r1, [sp, #32]
 8017c6e:	f8ad b01e 	strh.w	fp, [sp, #30]
 8017c72:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8017c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017c7a:	e88b 0003 	stmia.w	fp, {r0, r1}
 8017c7e:	9904      	ldr	r1, [sp, #16]
 8017c80:	4658      	mov	r0, fp
 8017c82:	f7fc ffa5 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8017c86:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8017c8a:	4543      	cmp	r3, r8
 8017c8c:	dd40      	ble.n	8017d10 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017c8e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8017c92:	4543      	cmp	r3, r8
 8017c94:	dd3c      	ble.n	8017d10 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8017c96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017ca0:	1a5b      	subs	r3, r3, r1
 8017ca2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8017ca6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8017caa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8017cae:	1a5b      	subs	r3, r3, r1
 8017cb0:	4629      	mov	r1, r5
 8017cb2:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8017cb6:	6823      	ldr	r3, [r4, #0]
 8017cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cba:	4798      	blx	r3
 8017cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8017d28 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 8017cbe:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8017cc6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017cca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017ccc:	785b      	ldrb	r3, [r3, #1]
 8017cce:	910d      	str	r1, [sp, #52]	@ 0x34
 8017cd0:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8017cd4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017cd8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8017cda:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8017cde:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8017ce2:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 8017ce6:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017cea:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8017cee:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 8017cf2:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 8017cf6:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 8017cfa:	f7f2 ff21 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8017cfe:	465b      	mov	r3, fp
 8017d00:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8017d04:	e9cd a900 	strd	sl, r9, [sp]
 8017d08:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017d0c:	f7f9 fca7 	bl	801165e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017d10:	b01b      	add	sp, #108	@ 0x6c
 8017d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d16:	4601      	mov	r1, r0
 8017d18:	699b      	ldr	r3, [r3, #24]
 8017d1a:	4632      	mov	r2, r6
 8017d1c:	4638      	mov	r0, r7
 8017d1e:	4798      	blx	r3
 8017d20:	b205      	sxth	r5, r0
 8017d22:	e775      	b.n	8017c10 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8017d24:	20012328 	.word	0x20012328
 8017d28:	2001231c 	.word	0x2001231c

08017d2c <_ZN8touchgfx15GraphScrollData5clearEv>:
 8017d2c:	b510      	push	{r4, lr}
 8017d2e:	4604      	mov	r4, r0
 8017d30:	f7fe fb2f 	bl	8016392 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8017d34:	2300      	movs	r3, #0
 8017d36:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8017d3a:	bd10      	pop	{r4, pc}

08017d3c <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 8017d3c:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8017d40:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	@ 0x11c
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d101      	bne.n	8017d4c <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 8017d48:	f7fe bd71 	b.w	801682e <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017d4c:	4770      	bx	lr

08017d4e <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 8017d4e:	b538      	push	{r3, r4, r5, lr}
 8017d50:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	@ 0x11c
 8017d54:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8017d58:	42a5      	cmp	r5, r4
 8017d5a:	da04      	bge.n	8017d66 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8017d5c:	6803      	ldr	r3, [r0, #0]
 8017d5e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017d62:	4798      	blx	r3
 8017d64:	bd38      	pop	{r3, r4, r5, pc}
 8017d66:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8017d6a:	4408      	add	r0, r1
 8017d6c:	1b00      	subs	r0, r0, r4
 8017d6e:	e7f9      	b.n	8017d64 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

08017d70 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 8017d70:	b570      	push	{r4, r5, r6, lr}
 8017d72:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 8017d76:	4604      	mov	r4, r0
 8017d78:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8017d7c:	1c6b      	adds	r3, r5, #1
 8017d7e:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	@ 0x11e
 8017d82:	b21b      	sxth	r3, r3
 8017d84:	42ae      	cmp	r6, r5
 8017d86:	fb93 f0f2 	sdiv	r0, r3, r2
 8017d8a:	bf08      	it	eq
 8017d8c:	f8a4 311e 	strheq.w	r3, [r4, #286]	@ 0x11e
 8017d90:	4296      	cmp	r6, r2
 8017d92:	fb02 3010 	mls	r0, r2, r0, r3
 8017d96:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 8017d9a:	f8a4 014c 	strh.w	r0, [r4, #332]	@ 0x14c
 8017d9e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017da2:	d108      	bne.n	8017db6 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8017da4:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8017da8:	f004 fa55 	bl	801c256 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017dac:	4620      	mov	r0, r4
 8017dae:	f7fe fd3e 	bl	801682e <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017db2:	4628      	mov	r0, r5
 8017db4:	bd70      	pop	{r4, r5, r6, pc}
 8017db6:	4629      	mov	r1, r5
 8017db8:	4620      	mov	r0, r4
 8017dba:	f7fe fd10 	bl	80167de <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8017dbe:	e7f8      	b.n	8017db2 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08017dc0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017dc0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8017dc4:	4770      	bx	lr

08017dc6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8017dc6:	b510      	push	{r4, lr}
 8017dc8:	4604      	mov	r4, r0
 8017dca:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017dcc:	b150      	cbz	r0, 8017de4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017dce:	6803      	ldr	r3, [r0, #0]
 8017dd0:	68db      	ldr	r3, [r3, #12]
 8017dd2:	4798      	blx	r3
 8017dd4:	b130      	cbz	r0, 8017de4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017dd6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017dd8:	4621      	mov	r1, r4
 8017dda:	6803      	ldr	r3, [r0, #0]
 8017ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017de0:	689b      	ldr	r3, [r3, #8]
 8017de2:	4718      	bx	r3
 8017de4:	bd10      	pop	{r4, pc}

08017de6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017de6:	790b      	ldrb	r3, [r1, #4]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	bf0c      	ite	eq
 8017dec:	2301      	moveq	r3, #1
 8017dee:	2300      	movne	r3, #0
 8017df0:	b570      	push	{r4, r5, r6, lr}
 8017df2:	4604      	mov	r4, r0
 8017df4:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017df8:	460e      	mov	r6, r1
 8017dfa:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8017dfe:	d109      	bne.n	8017e14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8017e00:	b14d      	cbz	r5, 8017e16 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8017e02:	7933      	ldrb	r3, [r6, #4]
 8017e04:	2b01      	cmp	r3, #1
 8017e06:	d10c      	bne.n	8017e22 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017e08:	6823      	ldr	r3, [r4, #0]
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e12:	4718      	bx	r3
 8017e14:	b12d      	cbz	r5, 8017e22 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017e16:	6823      	ldr	r3, [r4, #0]
 8017e18:	4620      	mov	r0, r4
 8017e1a:	695b      	ldr	r3, [r3, #20]
 8017e1c:	4798      	blx	r3
 8017e1e:	2d00      	cmp	r5, #0
 8017e20:	d1ef      	bne.n	8017e02 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8017e22:	bd70      	pop	{r4, r5, r6, pc}

08017e24 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8017e24:	b508      	push	{r3, lr}
 8017e26:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8017e2a:	b10b      	cbz	r3, 8017e30 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8017e2c:	f7f2 fc2a 	bl	800a684 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8017e30:	bd08      	pop	{r3, pc}

08017e32 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8017e32:	6803      	ldr	r3, [r0, #0]
 8017e34:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8017e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017e3a:	4718      	bx	r3

08017e3c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8017e3c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017e40:	2bff      	cmp	r3, #255	@ 0xff
 8017e42:	b510      	push	{r4, lr}
 8017e44:	d104      	bne.n	8017e50 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8017e46:	8cca      	ldrh	r2, [r1, #38]	@ 0x26
 8017e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d105      	bne.n	8017e5c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8017e50:	2300      	movs	r3, #0
 8017e52:	8003      	strh	r3, [r0, #0]
 8017e54:	8043      	strh	r3, [r0, #2]
 8017e56:	8083      	strh	r3, [r0, #4]
 8017e58:	80c3      	strh	r3, [r0, #6]
 8017e5a:	bd10      	pop	{r4, pc}
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017e62:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017e66:	8003      	strh	r3, [r0, #0]
 8017e68:	8043      	strh	r3, [r0, #2]
 8017e6a:	8084      	strh	r4, [r0, #4]
 8017e6c:	80c2      	strh	r2, [r0, #6]
 8017e6e:	e7f4      	b.n	8017e5a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08017e70 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8017e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e74:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8017e78:	b087      	sub	sp, #28
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	4689      	mov	r9, r1
 8017e7e:	b363      	cbz	r3, 8017eda <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017e80:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8017e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d027      	beq.n	8017eda <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017e8a:	ad06      	add	r5, sp, #24
 8017e8c:	2700      	movs	r7, #0
 8017e8e:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8017e92:	4628      	mov	r0, r5
 8017e94:	f006 fbd4 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e98:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e9c:	a904      	add	r1, sp, #16
 8017e9e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017ea2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	6823      	ldr	r3, [r4, #0]
 8017eaa:	9704      	str	r7, [sp, #16]
 8017eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eae:	4798      	blx	r3
 8017eb0:	f7f2 fe46 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8017eb4:	6803      	ldr	r3, [r0, #0]
 8017eb6:	4606      	mov	r6, r0
 8017eb8:	4628      	mov	r0, r5
 8017eba:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8017ebe:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8017ec0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017ec4:	f006 fcae 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017ec8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017ecc:	4601      	mov	r1, r0
 8017ece:	9701      	str	r7, [sp, #4]
 8017ed0:	aa04      	add	r2, sp, #16
 8017ed2:	9300      	str	r3, [sp, #0]
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	464b      	mov	r3, r9
 8017ed8:	47c0      	blx	r8
 8017eda:	b007      	add	sp, #28
 8017edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017ee0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8017ee0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017ee2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017ee6:	460d      	mov	r5, r1
 8017ee8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017eec:	2100      	movs	r1, #0
 8017eee:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	6803      	ldr	r3, [r0, #0]
 8017ef6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017efc:	9100      	str	r1, [sp, #0]
 8017efe:	4669      	mov	r1, sp
 8017f00:	4798      	blx	r3
 8017f02:	4621      	mov	r1, r4
 8017f04:	a802      	add	r0, sp, #8
 8017f06:	f004 fa41 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017f0a:	f7f2 fe19 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 8017f0e:	6803      	ldr	r3, [r0, #0]
 8017f10:	aa02      	add	r2, sp, #8
 8017f12:	4669      	mov	r1, sp
 8017f14:	695e      	ldr	r6, [r3, #20]
 8017f16:	462b      	mov	r3, r5
 8017f18:	47b0      	blx	r6
 8017f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f1e:	2800      	cmp	r0, #0
 8017f20:	bf08      	it	eq
 8017f22:	461d      	moveq	r5, r3
 8017f24:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8017f26:	b004      	add	sp, #16
 8017f28:	bd70      	pop	{r4, r5, r6, pc}
	...

08017f2c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	8082      	strh	r2, [r0, #4]
 8017f30:	80c2      	strh	r2, [r0, #6]
 8017f32:	8102      	strh	r2, [r0, #8]
 8017f34:	8142      	strh	r2, [r0, #10]
 8017f36:	8182      	strh	r2, [r0, #12]
 8017f38:	81c2      	strh	r2, [r0, #14]
 8017f3a:	8202      	strh	r2, [r0, #16]
 8017f3c:	8242      	strh	r2, [r0, #18]
 8017f3e:	61c2      	str	r2, [r0, #28]
 8017f40:	8402      	strh	r2, [r0, #32]
 8017f42:	8442      	strh	r2, [r0, #34]	@ 0x22
 8017f44:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8017f48:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8017f52:	4a04      	ldr	r2, [pc, #16]	@ (8017f64 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8017f54:	6002      	str	r2, [r0, #0]
 8017f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f5a:	84c2      	strh	r2, [r0, #38]	@ 0x26
 8017f5c:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 8017f60:	4770      	bx	lr
 8017f62:	bf00      	nop
 8017f64:	08031fa4 	.word	0x08031fa4

08017f68 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017f68:	2000      	movs	r0, #0
 8017f6a:	4770      	bx	lr

08017f6c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017f6c:	4b07      	ldr	r3, [pc, #28]	@ (8017f8c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017f6e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017f70:	881b      	ldrh	r3, [r3, #0]
 8017f72:	4293      	cmp	r3, r2
 8017f74:	bf81      	itttt	hi
 8017f76:	4b06      	ldrhi	r3, [pc, #24]	@ (8017f90 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017f78:	681b      	ldrhi	r3, [r3, #0]
 8017f7a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017f7e:	7858      	ldrbhi	r0, [r3, #1]
 8017f80:	bf8c      	ite	hi
 8017f82:	f000 0003 	andhi.w	r0, r0, #3
 8017f86:	2000      	movls	r0, #0
 8017f88:	4770      	bx	lr
 8017f8a:	bf00      	nop
 8017f8c:	20012320 	.word	0x20012320
 8017f90:	2001231c 	.word	0x2001231c

08017f94 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017f94:	4b11      	ldr	r3, [pc, #68]	@ (8017fdc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f9a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	881b      	ldrh	r3, [r3, #0]
 8017fa0:	428b      	cmp	r3, r1
 8017fa2:	d918      	bls.n	8017fd6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017fa4:	6803      	ldr	r3, [r0, #0]
 8017fa6:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8017fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8017fe0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017faa:	6818      	ldr	r0, [r3, #0]
 8017fac:	f7f9 fbc6 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 8017fb0:	6823      	ldr	r3, [r4, #0]
 8017fb2:	4606      	mov	r6, r0
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017fb8:	4798      	blx	r3
 8017fba:	6823      	ldr	r3, [r4, #0]
 8017fbc:	4607      	mov	r7, r0
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fc4:	4798      	blx	r3
 8017fc6:	463a      	mov	r2, r7
 8017fc8:	4603      	mov	r3, r0
 8017fca:	4631      	mov	r1, r6
 8017fcc:	4620      	mov	r0, r4
 8017fce:	46ac      	mov	ip, r5
 8017fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd4:	4760      	bx	ip
 8017fd6:	2000      	movs	r0, #0
 8017fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fdc:	20012320 	.word	0x20012320
 8017fe0:	20012328 	.word	0x20012328

08017fe4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017fe4:	4b18      	ldr	r3, [pc, #96]	@ (8018048 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017fe6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017fea:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017fec:	4604      	mov	r4, r0
 8017fee:	881b      	ldrh	r3, [r3, #0]
 8017ff0:	428b      	cmp	r3, r1
 8017ff2:	d926      	bls.n	8018042 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017ff4:	4b15      	ldr	r3, [pc, #84]	@ (801804c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017ffc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018000:	4b13      	ldr	r3, [pc, #76]	@ (8018050 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018002:	7855      	ldrb	r5, [r2, #1]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801800a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801800e:	6833      	ldr	r3, [r6, #0]
 8018010:	69df      	ldr	r7, [r3, #28]
 8018012:	4b10      	ldr	r3, [pc, #64]	@ (8018054 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018014:	6818      	ldr	r0, [r3, #0]
 8018016:	f7f9 fb91 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 801801a:	6823      	ldr	r3, [r4, #0]
 801801c:	4680      	mov	r8, r0
 801801e:	4620      	mov	r0, r4
 8018020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018022:	4798      	blx	r3
 8018024:	6823      	ldr	r3, [r4, #0]
 8018026:	4681      	mov	r9, r0
 8018028:	4620      	mov	r0, r4
 801802a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801802e:	4798      	blx	r3
 8018030:	464b      	mov	r3, r9
 8018032:	9000      	str	r0, [sp, #0]
 8018034:	4642      	mov	r2, r8
 8018036:	4629      	mov	r1, r5
 8018038:	4630      	mov	r0, r6
 801803a:	47b8      	blx	r7
 801803c:	b003      	add	sp, #12
 801803e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018042:	2000      	movs	r0, #0
 8018044:	e7fa      	b.n	801803c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8018046:	bf00      	nop
 8018048:	20012320 	.word	0x20012320
 801804c:	2001231c 	.word	0x2001231c
 8018050:	20012324 	.word	0x20012324
 8018054:	20012328 	.word	0x20012328

08018058 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018058:	b40e      	push	{r1, r2, r3}
 801805a:	4b30      	ldr	r3, [pc, #192]	@ (801811c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018060:	881a      	ldrh	r2, [r3, #0]
 8018062:	b09d      	sub	sp, #116	@ 0x74
 8018064:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8018066:	4604      	mov	r4, r0
 8018068:	429a      	cmp	r2, r3
 801806a:	d954      	bls.n	8018116 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801806c:	aa26      	add	r2, sp, #152	@ 0x98
 801806e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8018120 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018072:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8018124 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8018076:	9202      	str	r2, [sp, #8]
 8018078:	f8d9 2000 	ldr.w	r2, [r9]
 801807c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018080:	f8d8 3000 	ldr.w	r3, [r8]
 8018084:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018088:	682b      	ldr	r3, [r5, #0]
 801808a:	4628      	mov	r0, r5
 801808c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801808e:	4798      	blx	r3
 8018090:	4606      	mov	r6, r0
 8018092:	b207      	sxth	r7, r0
 8018094:	a803      	add	r0, sp, #12
 8018096:	f004 fe5d 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801809a:	682b      	ldr	r3, [r5, #0]
 801809c:	4628      	mov	r0, r5
 801809e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80180a0:	4798      	blx	r3
 80180a2:	682b      	ldr	r3, [r5, #0]
 80180a4:	4682      	mov	sl, r0
 80180a6:	4628      	mov	r0, r5
 80180a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80180aa:	4798      	blx	r3
 80180ac:	4653      	mov	r3, sl
 80180ae:	9000      	str	r0, [sp, #0]
 80180b0:	a803      	add	r0, sp, #12
 80180b2:	9a02      	ldr	r2, [sp, #8]
 80180b4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80180b6:	f004 fea8 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80180ba:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80180bc:	f8d9 3000 	ldr.w	r3, [r9]
 80180c0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80180c4:	8925      	ldrh	r5, [r4, #8]
 80180c6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80180ca:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80180ce:	eba5 050c 	sub.w	r5, r5, ip
 80180d2:	784a      	ldrb	r2, [r1, #1]
 80180d4:	f8d8 3000 	ldr.w	r3, [r8]
 80180d8:	b22d      	sxth	r5, r5
 80180da:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80180de:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80180e2:	9500      	str	r5, [sp, #0]
 80180e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80180e8:	a803      	add	r0, sp, #12
 80180ea:	f002 fb87 	bl	801a7fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80180ee:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80180f2:	b203      	sxth	r3, r0
 80180f4:	18b9      	adds	r1, r7, r2
 80180f6:	2900      	cmp	r1, #0
 80180f8:	dd0b      	ble.n	8018112 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80180fa:	3b01      	subs	r3, #1
 80180fc:	fb13 f302 	smulbb	r3, r3, r2
 8018100:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018104:	b21f      	sxth	r7, r3
 8018106:	4638      	mov	r0, r7
 8018108:	b01d      	add	sp, #116	@ 0x74
 801810a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801810e:	b003      	add	sp, #12
 8018110:	4770      	bx	lr
 8018112:	2b00      	cmp	r3, #0
 8018114:	dcf7      	bgt.n	8018106 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018116:	2700      	movs	r7, #0
 8018118:	e7f5      	b.n	8018106 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801811a:	bf00      	nop
 801811c:	20012320 	.word	0x20012320
 8018120:	2001231c 	.word	0x2001231c
 8018124:	20012324 	.word	0x20012324

08018128 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8018128:	4bbd      	ldr	r3, [pc, #756]	@ (8018420 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801812a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801812e:	460c      	mov	r4, r1
 8018130:	881b      	ldrh	r3, [r3, #0]
 8018132:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8018134:	b0a9      	sub	sp, #164	@ 0xa4
 8018136:	4680      	mov	r8, r0
 8018138:	428b      	cmp	r3, r1
 801813a:	d809      	bhi.n	8018150 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801813c:	2300      	movs	r3, #0
 801813e:	f04f 32ff 	mov.w	r2, #4294967295
 8018142:	6083      	str	r3, [r0, #8]
 8018144:	e9c0 3200 	strd	r3, r2, [r0]
 8018148:	4640      	mov	r0, r8
 801814a:	b029      	add	sp, #164	@ 0xa4
 801814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018150:	4eb4      	ldr	r6, [pc, #720]	@ (8018424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8018152:	6833      	ldr	r3, [r6, #0]
 8018154:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018158:	4bb3      	ldr	r3, [pc, #716]	@ (8018428 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018160:	4bb2      	ldr	r3, [pc, #712]	@ (801842c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8018162:	6818      	ldr	r0, [r3, #0]
 8018164:	f7f9 faea 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 8018168:	682b      	ldr	r3, [r5, #0]
 801816a:	4681      	mov	r9, r0
 801816c:	4628      	mov	r0, r5
 801816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018170:	4798      	blx	r3
 8018172:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8018174:	b203      	sxth	r3, r0
 8018176:	4682      	mov	sl, r0
 8018178:	4407      	add	r7, r0
 801817a:	a80f      	add	r0, sp, #60	@ 0x3c
 801817c:	9304      	str	r3, [sp, #16]
 801817e:	b2bb      	uxth	r3, r7
 8018180:	9303      	str	r3, [sp, #12]
 8018182:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8018186:	2b00      	cmp	r3, #0
 8018188:	f040 80a5 	bne.w	80182d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801818c:	f004 fde2 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 8018190:	682b      	ldr	r3, [r5, #0]
 8018192:	4628      	mov	r0, r5
 8018194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018196:	4798      	blx	r3
 8018198:	682b      	ldr	r3, [r5, #0]
 801819a:	4606      	mov	r6, r0
 801819c:	4628      	mov	r0, r5
 801819e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80181a0:	4798      	blx	r3
 80181a2:	6823      	ldr	r3, [r4, #0]
 80181a4:	4607      	mov	r7, r0
 80181a6:	4620      	mov	r0, r4
 80181a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80181aa:	4798      	blx	r3
 80181ac:	6823      	ldr	r3, [r4, #0]
 80181ae:	4683      	mov	fp, r0
 80181b0:	4620      	mov	r0, r4
 80181b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181b6:	4798      	blx	r3
 80181b8:	463b      	mov	r3, r7
 80181ba:	4649      	mov	r1, r9
 80181bc:	4632      	mov	r2, r6
 80181be:	2600      	movs	r6, #0
 80181c0:	e9cd b000 	strd	fp, r0, [sp]
 80181c4:	a80f      	add	r0, sp, #60	@ 0x3c
 80181c6:	4637      	mov	r7, r6
 80181c8:	f004 fe34 	bl	801ce34 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80181cc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80181d0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8018424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80181d4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80181d8:	bf0c      	ite	eq
 80181da:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80181de:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80181e2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80181e4:	4629      	mov	r1, r5
 80181e6:	f8db 3000 	ldr.w	r3, [fp]
 80181ea:	a80f      	add	r0, sp, #60	@ 0x3c
 80181ec:	3701      	adds	r7, #1
 80181ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80181f2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80181f6:	b2bf      	uxth	r7, r7
 80181f8:	785b      	ldrb	r3, [r3, #1]
 80181fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80181fe:	f002 f804 	bl	801a20a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018202:	9b03      	ldr	r3, [sp, #12]
 8018204:	4286      	cmp	r6, r0
 8018206:	eba9 0903 	sub.w	r9, r9, r3
 801820a:	bfb8      	it	lt
 801820c:	4606      	movlt	r6, r0
 801820e:	a80f      	add	r0, sp, #60	@ 0x3c
 8018210:	fa0f f989 	sxth.w	r9, r9
 8018214:	b236      	sxth	r6, r6
 8018216:	f004 fdc4 	bl	801cda2 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801821a:	b918      	cbnz	r0, 8018224 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801821c:	7a2b      	ldrb	r3, [r5, #8]
 801821e:	444b      	add	r3, r9
 8018220:	2b00      	cmp	r3, #0
 8018222:	dcde      	bgt.n	80181e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8018224:	9b03      	ldr	r3, [sp, #12]
 8018226:	4620      	mov	r0, r4
 8018228:	9a04      	ldr	r2, [sp, #16]
 801822a:	fb13 f707 	smulbb	r7, r3, r7
 801822e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018230:	f895 9009 	ldrb.w	r9, [r5, #9]
 8018234:	1aff      	subs	r7, r7, r3
 8018236:	b2bf      	uxth	r7, r7
 8018238:	b23b      	sxth	r3, r7
 801823a:	429a      	cmp	r2, r3
 801823c:	bfa8      	it	ge
 801823e:	4657      	movge	r7, sl
 8018240:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018244:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018248:	6823      	ldr	r3, [r4, #0]
 801824a:	444f      	add	r7, r9
 801824c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801824e:	bf08      	it	eq
 8018250:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8018254:	fa1f f987 	uxth.w	r9, r7
 8018258:	bf18      	it	ne
 801825a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801825e:	4798      	blx	r3
 8018260:	2801      	cmp	r0, #1
 8018262:	fa0f f789 	sxth.w	r7, r9
 8018266:	b2b3      	uxth	r3, r6
 8018268:	f000 80e2 	beq.w	8018430 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801826c:	2802      	cmp	r0, #2
 801826e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8018272:	f000 80e3 	beq.w	801843c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8018276:	7aea      	ldrb	r2, [r5, #11]
 8018278:	b236      	sxth	r6, r6
 801827a:	7b2d      	ldrb	r5, [r5, #12]
 801827c:	1ab6      	subs	r6, r6, r2
 801827e:	442a      	add	r2, r5
 8018280:	fa1f fa86 	uxth.w	sl, r6
 8018284:	4413      	add	r3, r2
 8018286:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801828a:	fa0f fb8a 	sxth.w	fp, sl
 801828e:	b29b      	uxth	r3, r3
 8018290:	2a02      	cmp	r2, #2
 8018292:	b21e      	sxth	r6, r3
 8018294:	f000 80d6 	beq.w	8018444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8018298:	2a03      	cmp	r2, #3
 801829a:	f000 80de 	beq.w	801845a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801829e:	2a01      	cmp	r2, #1
 80182a0:	f040 80e6 	bne.w	8018470 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80182a4:	8925      	ldrh	r5, [r4, #8]
 80182a6:	4633      	mov	r3, r6
 80182a8:	463e      	mov	r6, r7
 80182aa:	eba5 0909 	sub.w	r9, r5, r9
 80182ae:	461f      	mov	r7, r3
 80182b0:	465d      	mov	r5, fp
 80182b2:	fa0f fb89 	sxth.w	fp, r9
 80182b6:	4b5d      	ldr	r3, [pc, #372]	@ (801842c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80182b8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80182ba:	6818      	ldr	r0, [r3, #0]
 80182bc:	f7f9 fa3e 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 80182c0:	f8a8 b000 	strh.w	fp, [r8]
 80182c4:	f8a8 5002 	strh.w	r5, [r8, #2]
 80182c8:	f8a8 6004 	strh.w	r6, [r8, #4]
 80182cc:	f8a8 7006 	strh.w	r7, [r8, #6]
 80182d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80182d4:	e738      	b.n	8018148 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80182d6:	f004 fd3d 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 80182da:	682b      	ldr	r3, [r5, #0]
 80182dc:	4628      	mov	r0, r5
 80182de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80182e0:	4798      	blx	r3
 80182e2:	682b      	ldr	r3, [r5, #0]
 80182e4:	4607      	mov	r7, r0
 80182e6:	4628      	mov	r0, r5
 80182e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80182ea:	4798      	blx	r3
 80182ec:	6823      	ldr	r3, [r4, #0]
 80182ee:	4683      	mov	fp, r0
 80182f0:	4620      	mov	r0, r4
 80182f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80182f4:	4798      	blx	r3
 80182f6:	6822      	ldr	r2, [r4, #0]
 80182f8:	9005      	str	r0, [sp, #20]
 80182fa:	4620      	mov	r0, r4
 80182fc:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8018300:	4790      	blx	r2
 8018302:	9b05      	ldr	r3, [sp, #20]
 8018304:	463a      	mov	r2, r7
 8018306:	4649      	mov	r1, r9
 8018308:	9001      	str	r0, [sp, #4]
 801830a:	a80f      	add	r0, sp, #60	@ 0x3c
 801830c:	9300      	str	r3, [sp, #0]
 801830e:	465b      	mov	r3, fp
 8018310:	f004 fd90 	bl	801ce34 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018314:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018318:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801831c:	af0f      	add	r7, sp, #60	@ 0x3c
 801831e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018322:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018326:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8018328:	bf0a      	itet	eq
 801832a:	464a      	moveq	r2, r9
 801832c:	461a      	movne	r2, r3
 801832e:	4699      	moveq	r9, r3
 8018330:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8018334:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8018338:	1ad2      	subs	r2, r2, r3
 801833a:	6833      	ldr	r3, [r6, #0]
 801833c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8018340:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018344:	7859      	ldrb	r1, [r3, #1]
 8018346:	2300      	movs	r3, #0
 8018348:	9707      	str	r7, [sp, #28]
 801834a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801834e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018352:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8018356:	f88d 1020 	strb.w	r1, [sp, #32]
 801835a:	9509      	str	r5, [sp, #36]	@ 0x24
 801835c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018360:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8018364:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8018368:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801836c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8018370:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018374:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8018378:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801837c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018380:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8018384:	b350      	cbz	r0, 80183dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018386:	682b      	ldr	r3, [r5, #0]
 8018388:	4628      	mov	r0, r5
 801838a:	695b      	ldr	r3, [r3, #20]
 801838c:	4798      	blx	r3
 801838e:	4607      	mov	r7, r0
 8018390:	b320      	cbz	r0, 80183dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018394:	4639      	mov	r1, r7
 8018396:	6803      	ldr	r3, [r0, #0]
 8018398:	68db      	ldr	r3, [r3, #12]
 801839a:	4798      	blx	r3
 801839c:	4606      	mov	r6, r0
 801839e:	b1e8      	cbz	r0, 80183dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80183a0:	7b43      	ldrb	r3, [r0, #13]
 80183a2:	7a82      	ldrb	r2, [r0, #10]
 80183a4:	005b      	lsls	r3, r3, #1
 80183a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80183aa:	4313      	orrs	r3, r2
 80183ac:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80183b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80183b4:	2b06      	cmp	r3, #6
 80183b6:	d111      	bne.n	80183dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80183b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80183ba:	4632      	mov	r2, r6
 80183bc:	4639      	mov	r1, r7
 80183be:	6803      	ldr	r3, [r0, #0]
 80183c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80183c2:	4798      	blx	r3
 80183c4:	7b73      	ldrb	r3, [r6, #13]
 80183c6:	005b      	lsls	r3, r3, #1
 80183c8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80183cc:	7ab3      	ldrb	r3, [r6, #10]
 80183ce:	4313      	orrs	r3, r2
 80183d0:	4418      	add	r0, r3
 80183d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80183d6:	4418      	add	r0, r3
 80183d8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80183dc:	2600      	movs	r6, #0
 80183de:	4637      	mov	r7, r6
 80183e0:	a806      	add	r0, sp, #24
 80183e2:	3701      	adds	r7, #1
 80183e4:	f002 f907 	bl	801a5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80183e8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 80183ec:	9b03      	ldr	r3, [sp, #12]
 80183ee:	b2bf      	uxth	r7, r7
 80183f0:	4286      	cmp	r6, r0
 80183f2:	eba9 0903 	sub.w	r9, r9, r3
 80183f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80183fa:	bfb8      	it	lt
 80183fc:	4606      	movlt	r6, r0
 80183fe:	fa0f f989 	sxth.w	r9, r9
 8018402:	b236      	sxth	r6, r6
 8018404:	2b00      	cmp	r3, #0
 8018406:	f43f af0d 	beq.w	8018224 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801840a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801840e:	2b00      	cmp	r3, #0
 8018410:	f47f af08 	bne.w	8018224 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018414:	7a2b      	ldrb	r3, [r5, #8]
 8018416:	444b      	add	r3, r9
 8018418:	2b00      	cmp	r3, #0
 801841a:	dce1      	bgt.n	80183e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801841c:	e702      	b.n	8018224 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801841e:	bf00      	nop
 8018420:	20012320 	.word	0x20012320
 8018424:	2001231c 	.word	0x2001231c
 8018428:	20012324 	.word	0x20012324
 801842c:	20012328 	.word	0x20012328
 8018430:	ebaa 0606 	sub.w	r6, sl, r6
 8018434:	2002      	movs	r0, #2
 8018436:	fb96 f6f0 	sdiv	r6, r6, r0
 801843a:	e71c      	b.n	8018276 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801843c:	441e      	add	r6, r3
 801843e:	ebaa 0606 	sub.w	r6, sl, r6
 8018442:	e718      	b.n	8018276 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018444:	8925      	ldrh	r5, [r4, #8]
 8018446:	1aed      	subs	r5, r5, r3
 8018448:	eba5 050a 	sub.w	r5, r5, sl
 801844c:	fa0f fb85 	sxth.w	fp, r5
 8018450:	8965      	ldrh	r5, [r4, #10]
 8018452:	eba5 0509 	sub.w	r5, r5, r9
 8018456:	b22d      	sxth	r5, r5
 8018458:	e72d      	b.n	80182b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801845a:	8965      	ldrh	r5, [r4, #10]
 801845c:	f04f 0b00 	mov.w	fp, #0
 8018460:	1aed      	subs	r5, r5, r3
 8018462:	4633      	mov	r3, r6
 8018464:	463e      	mov	r6, r7
 8018466:	eba5 050a 	sub.w	r5, r5, sl
 801846a:	461f      	mov	r7, r3
 801846c:	b22d      	sxth	r5, r5
 801846e:	e722      	b.n	80182b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018470:	2500      	movs	r5, #0
 8018472:	e720      	b.n	80182b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08018474 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8018474:	b513      	push	{r0, r1, r4, lr}
 8018476:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801847a:	4604      	mov	r4, r0
 801847c:	b1fb      	cbz	r3, 80184be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801847e:	4b16      	ldr	r3, [pc, #88]	@ (80184d8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8018480:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	428b      	cmp	r3, r1
 8018486:	d91a      	bls.n	80184be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018488:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801848c:	2b00      	cmp	r3, #0
 801848e:	dd16      	ble.n	80184be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018490:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018494:	2b00      	cmp	r3, #0
 8018496:	dd12      	ble.n	80184be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018498:	4b10      	ldr	r3, [pc, #64]	@ (80184dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801849a:	6818      	ldr	r0, [r3, #0]
 801849c:	f7f9 f94e 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 80184a0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80184a4:	6822      	ldr	r2, [r4, #0]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	db06      	blt.n	80184b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80184aa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	db02      	blt.n	80184b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80184b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80184b4:	4298      	cmp	r0, r3
 80184b6:	d004      	beq.n	80184c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80184b8:	6953      	ldr	r3, [r2, #20]
 80184ba:	4620      	mov	r0, r4
 80184bc:	4798      	blx	r3
 80184be:	b002      	add	sp, #8
 80184c0:	bd10      	pop	{r4, pc}
 80184c2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80184c6:	466b      	mov	r3, sp
 80184c8:	6912      	ldr	r2, [r2, #16]
 80184ca:	c903      	ldmia	r1, {r0, r1}
 80184cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80184d0:	4619      	mov	r1, r3
 80184d2:	4620      	mov	r0, r4
 80184d4:	4790      	blx	r2
 80184d6:	e7f2      	b.n	80184be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80184d8:	20012320 	.word	0x20012320
 80184dc:	20012328 	.word	0x20012328

080184e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80184e0:	4b45      	ldr	r3, [pc, #276]	@ (80185f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80184e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184e6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80184e8:	b08e      	sub	sp, #56	@ 0x38
 80184ea:	881b      	ldrh	r3, [r3, #0]
 80184ec:	4604      	mov	r4, r0
 80184ee:	4293      	cmp	r3, r2
 80184f0:	d97e      	bls.n	80185f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80184f2:	6808      	ldr	r0, [r1, #0]
 80184f4:	ab05      	add	r3, sp, #20
 80184f6:	6849      	ldr	r1, [r1, #4]
 80184f8:	4d40      	ldr	r5, [pc, #256]	@ (80185fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80184fa:	c303      	stmia	r3!, {r0, r1}
 80184fc:	4611      	mov	r1, r2
 80184fe:	6828      	ldr	r0, [r5, #0]
 8018500:	f7f9 f91c 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 8018504:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8018508:	2b00      	cmp	r3, #0
 801850a:	db11      	blt.n	8018530 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801850c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8018510:	2b00      	cmp	r3, #0
 8018512:	db0d      	blt.n	8018530 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018514:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018516:	4298      	cmp	r0, r3
 8018518:	d10a      	bne.n	8018530 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801851a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801851e:	ab09      	add	r3, sp, #36	@ 0x24
 8018520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018524:	e883 0003 	stmia.w	r3, {r0, r1}
 8018528:	4619      	mov	r1, r3
 801852a:	a805      	add	r0, sp, #20
 801852c:	f7fc fb50 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8018530:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018534:	2b00      	cmp	r3, #0
 8018536:	dd5b      	ble.n	80185f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018538:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801853c:	2b00      	cmp	r3, #0
 801853e:	dd57      	ble.n	80185f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018540:	4f2f      	ldr	r7, [pc, #188]	@ (8018600 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8018542:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801854a:	4b2e      	ldr	r3, [pc, #184]	@ (8018604 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018552:	2e00      	cmp	r6, #0
 8018554:	d04c      	beq.n	80185f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018556:	6823      	ldr	r3, [r4, #0]
 8018558:	4620      	mov	r0, r4
 801855a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801855e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018560:	4798      	blx	r3
 8018562:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801856a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801856e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8018572:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8018576:	785b      	ldrb	r3, [r3, #1]
 8018578:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 801857c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018580:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018582:	9609      	str	r6, [sp, #36]	@ 0x24
 8018584:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018588:	4b1f      	ldr	r3, [pc, #124]	@ (8018608 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801858a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8018594:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018596:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 801859a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 801859e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80185a2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80185a6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80185aa:	b10a      	cbz	r2, 80185b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80185ac:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80185ae:	b906      	cbnz	r6, 80185b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80185b0:	689e      	ldr	r6, [r3, #8]
 80185b2:	af07      	add	r7, sp, #28
 80185b4:	4621      	mov	r1, r4
 80185b6:	4638      	mov	r0, r7
 80185b8:	f003 fee8 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80185bc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80185be:	6828      	ldr	r0, [r5, #0]
 80185c0:	f7f9 f8bc 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 80185c4:	6823      	ldr	r3, [r4, #0]
 80185c6:	4605      	mov	r5, r0
 80185c8:	4620      	mov	r0, r4
 80185ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80185cc:	4798      	blx	r3
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	4680      	mov	r8, r0
 80185d2:	4620      	mov	r0, r4
 80185d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185d8:	4798      	blx	r3
 80185da:	ab09      	add	r3, sp, #36	@ 0x24
 80185dc:	9501      	str	r5, [sp, #4]
 80185de:	9300      	str	r3, [sp, #0]
 80185e0:	ab05      	add	r3, sp, #20
 80185e2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80185e6:	4630      	mov	r0, r6
 80185e8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80185ec:	f7f9 f837 	bl	801165e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80185f0:	b00e      	add	sp, #56	@ 0x38
 80185f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185f6:	bf00      	nop
 80185f8:	20012320 	.word	0x20012320
 80185fc:	20012328 	.word	0x20012328
 8018600:	2001231c 	.word	0x2001231c
 8018604:	20012324 	.word	0x20012324
 8018608:	200122c4 	.word	0x200122c4

0801860c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801860c:	b538      	push	{r3, r4, r5, lr}
 801860e:	4b0e      	ldr	r3, [pc, #56]	@ (8018648 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8018610:	4604      	mov	r4, r0
 8018612:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018614:	881b      	ldrh	r3, [r3, #0]
 8018616:	429a      	cmp	r2, r3
 8018618:	d214      	bcs.n	8018644 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801861a:	6803      	ldr	r3, [r0, #0]
 801861c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801861e:	4798      	blx	r3
 8018620:	6823      	ldr	r3, [r4, #0]
 8018622:	4605      	mov	r5, r0
 8018624:	4620      	mov	r0, r4
 8018626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018628:	4798      	blx	r3
 801862a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801862e:	b22d      	sxth	r5, r5
 8018630:	4601      	mov	r1, r0
 8018632:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018636:	bf06      	itte	eq
 8018638:	4602      	moveq	r2, r0
 801863a:	4629      	moveq	r1, r5
 801863c:	462a      	movne	r2, r5
 801863e:	4620      	mov	r0, r4
 8018640:	f7f2 f8ff 	bl	800a842 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018644:	bd38      	pop	{r3, r4, r5, pc}
 8018646:	bf00      	nop
 8018648:	20012320 	.word	0x20012320

0801864c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801864c:	b530      	push	{r4, r5, lr}
 801864e:	888b      	ldrh	r3, [r1, #4]
 8018650:	b085      	sub	sp, #20
 8018652:	4604      	mov	r4, r0
 8018654:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018656:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801865a:	b923      	cbnz	r3, 8018666 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801865c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018660:	b90b      	cbnz	r3, 8018666 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018662:	f7ff ffd3 	bl	801860c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	466d      	mov	r5, sp
 801866a:	4621      	mov	r1, r4
 801866c:	343c      	adds	r4, #60	@ 0x3c
 801866e:	4628      	mov	r0, r5
 8018670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018674:	4798      	blx	r3
 8018676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801867a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801867e:	b005      	add	sp, #20
 8018680:	bd30      	pop	{r4, r5, pc}

08018682 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018682:	2300      	movs	r3, #0
 8018684:	8083      	strh	r3, [r0, #4]
 8018686:	80c3      	strh	r3, [r0, #6]
 8018688:	8003      	strh	r3, [r0, #0]
 801868a:	8043      	strh	r3, [r0, #2]
 801868c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8018690:	2bff      	cmp	r3, #255	@ 0xff
 8018692:	bf01      	itttt	eq
 8018694:	890b      	ldrheq	r3, [r1, #8]
 8018696:	8083      	strheq	r3, [r0, #4]
 8018698:	894b      	ldrheq	r3, [r1, #10]
 801869a:	80c3      	strheq	r3, [r0, #6]
 801869c:	4770      	bx	lr
	...

080186a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80186a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186a2:	4604      	mov	r4, r0
 80186a4:	466b      	mov	r3, sp
 80186a6:	6808      	ldr	r0, [r1, #0]
 80186a8:	6849      	ldr	r1, [r1, #4]
 80186aa:	c303      	stmia	r3!, {r0, r1}
 80186ac:	6823      	ldr	r3, [r4, #0]
 80186ae:	4669      	mov	r1, sp
 80186b0:	4620      	mov	r0, r4
 80186b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186b4:	4798      	blx	r3
 80186b6:	4b08      	ldr	r3, [pc, #32]	@ (80186d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80186be:	b10a      	cbz	r2, 80186c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80186c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80186c2:	b900      	cbnz	r0, 80186c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80186c4:	6898      	ldr	r0, [r3, #8]
 80186c6:	6803      	ldr	r3, [r0, #0]
 80186c8:	4669      	mov	r1, sp
 80186ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80186cc:	6a1d      	ldr	r5, [r3, #32]
 80186ce:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80186d2:	47a8      	blx	r5
 80186d4:	b003      	add	sp, #12
 80186d6:	bd30      	pop	{r4, r5, pc}
 80186d8:	200122c4 	.word	0x200122c4

080186dc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80186dc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80186e0:	b12a      	cbz	r2, 80186ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80186e2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80186e6:	b112      	cbz	r2, 80186ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80186e8:	6803      	ldr	r3, [r0, #0]
 80186ea:	695b      	ldr	r3, [r3, #20]
 80186ec:	4718      	bx	r3
 80186ee:	4770      	bx	lr

080186f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80186f0:	b570      	push	{r4, r5, r6, lr}
 80186f2:	880b      	ldrh	r3, [r1, #0]
 80186f4:	4605      	mov	r5, r0
 80186f6:	4604      	mov	r4, r0
 80186f8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80186fa:	8813      	ldrh	r3, [r2, #0]
 80186fc:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018700:	4628      	mov	r0, r5
 8018702:	f005 ff9d 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018706:	4606      	mov	r6, r0
 8018708:	4628      	mov	r0, r5
 801870a:	f005 ffcd 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801870e:	6823      	ldr	r3, [r4, #0]
 8018710:	4605      	mov	r5, r0
 8018712:	4631      	mov	r1, r6
 8018714:	4620      	mov	r0, r4
 8018716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018718:	4798      	blx	r3
 801871a:	6823      	ldr	r3, [r4, #0]
 801871c:	4629      	mov	r1, r5
 801871e:	4620      	mov	r0, r4
 8018720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018726:	4718      	bx	r3

08018728 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8018728:	b510      	push	{r4, lr}
 801872a:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801872e:	4604      	mov	r4, r0
 8018730:	2bff      	cmp	r3, #255	@ 0xff
 8018732:	d006      	beq.n	8018742 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8018734:	2300      	movs	r3, #0
 8018736:	8003      	strh	r3, [r0, #0]
 8018738:	8043      	strh	r3, [r0, #2]
 801873a:	8083      	strh	r3, [r0, #4]
 801873c:	80c3      	strh	r3, [r0, #6]
 801873e:	4620      	mov	r0, r4
 8018740:	bd10      	pop	{r4, pc}
 8018742:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8018746:	b11b      	cbz	r3, 8018750 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8018748:	3130      	adds	r1, #48	@ 0x30
 801874a:	f005 ffe1 	bl	801e710 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801874e:	e7f6      	b.n	801873e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018750:	312e      	adds	r1, #46	@ 0x2e
 8018752:	e7fa      	b.n	801874a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08018754 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018758:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801875c:	b08a      	sub	sp, #40	@ 0x28
 801875e:	4604      	mov	r4, r0
 8018760:	4688      	mov	r8, r1
 8018762:	2b00      	cmp	r3, #0
 8018764:	d066      	beq.n	8018834 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018766:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8018768:	a805      	add	r0, sp, #20
 801876a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801876e:	f005 ff67 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018772:	4607      	mov	r7, r0
 8018774:	a805      	add	r0, sp, #20
 8018776:	f005 ff97 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801877a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801877e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8018782:	2300      	movs	r3, #0
 8018784:	4432      	add	r2, r6
 8018786:	9306      	str	r3, [sp, #24]
 8018788:	b292      	uxth	r2, r2
 801878a:	fa0f fc82 	sxth.w	ip, r2
 801878e:	459c      	cmp	ip, r3
 8018790:	dd52      	ble.n	8018838 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018792:	42b7      	cmp	r7, r6
 8018794:	dd50      	ble.n	8018838 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018796:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801879a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801879e:	442b      	add	r3, r5
 80187a0:	b29b      	uxth	r3, r3
 80187a2:	b219      	sxth	r1, r3
 80187a4:	2900      	cmp	r1, #0
 80187a6:	dd47      	ble.n	8018838 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80187a8:	42a8      	cmp	r0, r5
 80187aa:	dd45      	ble.n	8018838 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80187ac:	4567      	cmp	r7, ip
 80187ae:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80187b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80187b6:	bfb8      	it	lt
 80187b8:	b2ba      	uxthlt	r2, r7
 80187ba:	4288      	cmp	r0, r1
 80187bc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80187c0:	bfb8      	it	lt
 80187c2:	b283      	uxthlt	r3, r0
 80187c4:	1b92      	subs	r2, r2, r6
 80187c6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80187ca:	1b5b      	subs	r3, r3, r5
 80187cc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80187d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80187d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80187d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80187dc:	429a      	cmp	r2, r3
 80187de:	d026      	beq.n	801882e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80187e0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	dd22      	ble.n	801882e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80187e8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	dd1e      	ble.n	801882e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80187f0:	2300      	movs	r3, #0
 80187f2:	a908      	add	r1, sp, #32
 80187f4:	4620      	mov	r0, r4
 80187f6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187fe:	4798      	blx	r3
 8018800:	4b0f      	ldr	r3, [pc, #60]	@ (8018840 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018808:	b10a      	cbz	r2, 801880e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801880a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801880c:	b900      	cbnz	r0, 8018810 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801880e:	6898      	ldr	r0, [r3, #8]
 8018810:	2501      	movs	r5, #1
 8018812:	6801      	ldr	r1, [r0, #0]
 8018814:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8018818:	9502      	str	r5, [sp, #8]
 801881a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801881e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018822:	9401      	str	r4, [sp, #4]
 8018824:	ac06      	add	r4, sp, #24
 8018826:	9400      	str	r4, [sp, #0]
 8018828:	688c      	ldr	r4, [r1, #8]
 801882a:	a905      	add	r1, sp, #20
 801882c:	47a0      	blx	r4
 801882e:	b00a      	add	sp, #40	@ 0x28
 8018830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018834:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8018836:	e797      	b.n	8018768 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018838:	2300      	movs	r3, #0
 801883a:	9307      	str	r3, [sp, #28]
 801883c:	e7ca      	b.n	80187d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801883e:	bf00      	nop
 8018840:	200122c4 	.word	0x200122c4

08018844 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8018844:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8018848:	b12a      	cbz	r2, 8018856 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801884a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801884e:	b112      	cbz	r2, 8018856 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018850:	6803      	ldr	r3, [r0, #0]
 8018852:	695b      	ldr	r3, [r3, #20]
 8018854:	4718      	bx	r3
 8018856:	4770      	bx	lr

08018858 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8018858:	4b30      	ldr	r3, [pc, #192]	@ (801891c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801885a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801885e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018860:	b08d      	sub	sp, #52	@ 0x34
 8018862:	881b      	ldrh	r3, [r3, #0]
 8018864:	4604      	mov	r4, r0
 8018866:	460f      	mov	r7, r1
 8018868:	4293      	cmp	r3, r2
 801886a:	d954      	bls.n	8018916 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801886c:	4b2c      	ldr	r3, [pc, #176]	@ (8018920 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801886e:	6819      	ldr	r1, [r3, #0]
 8018870:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8018874:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8018878:	4a2a      	ldr	r2, [pc, #168]	@ (8018924 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801887a:	6812      	ldr	r2, [r2, #0]
 801887c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8018880:	2900      	cmp	r1, #0
 8018882:	d048      	beq.n	8018916 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018884:	785a      	ldrb	r2, [r3, #1]
 8018886:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801888a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801888e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018892:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8018896:	4b24      	ldr	r3, [pc, #144]	@ (8018928 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8018898:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 801889c:	681a      	ldr	r2, [r3, #0]
 801889e:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 80188a2:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 80188a6:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 80188aa:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80188ac:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80188b0:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80188b4:	9107      	str	r1, [sp, #28]
 80188b6:	f88d 8020 	strb.w	r8, [sp, #32]
 80188ba:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80188be:	9609      	str	r6, [sp, #36]	@ 0x24
 80188c0:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80188c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80188c8:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80188cc:	b10b      	cbz	r3, 80188d2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80188ce:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80188d0:	b905      	cbnz	r5, 80188d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80188d2:	6895      	ldr	r5, [r2, #8]
 80188d4:	ae05      	add	r6, sp, #20
 80188d6:	4621      	mov	r1, r4
 80188d8:	4630      	mov	r0, r6
 80188da:	f003 fd57 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80188de:	4b13      	ldr	r3, [pc, #76]	@ (801892c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80188e0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80188e2:	6818      	ldr	r0, [r3, #0]
 80188e4:	f7f8 ff2a 	bl	801173c <_ZNK8touchgfx5Texts7getTextEt>
 80188e8:	6823      	ldr	r3, [r4, #0]
 80188ea:	4680      	mov	r8, r0
 80188ec:	4620      	mov	r0, r4
 80188ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80188f0:	4798      	blx	r3
 80188f2:	6823      	ldr	r3, [r4, #0]
 80188f4:	4681      	mov	r9, r0
 80188f6:	4620      	mov	r0, r4
 80188f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80188fc:	4798      	blx	r3
 80188fe:	ab07      	add	r3, sp, #28
 8018900:	f8cd 8004 	str.w	r8, [sp, #4]
 8018904:	9300      	str	r3, [sp, #0]
 8018906:	463b      	mov	r3, r7
 8018908:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801890c:	4628      	mov	r0, r5
 801890e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018912:	f7f8 fea4 	bl	801165e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018916:	b00d      	add	sp, #52	@ 0x34
 8018918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801891c:	20012320 	.word	0x20012320
 8018920:	2001231c 	.word	0x2001231c
 8018924:	20012324 	.word	0x20012324
 8018928:	200122c4 	.word	0x200122c4
 801892c:	20012328 	.word	0x20012328

08018930 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018930:	b570      	push	{r4, r5, r6, lr}
 8018932:	880b      	ldrh	r3, [r1, #0]
 8018934:	460d      	mov	r5, r1
 8018936:	4604      	mov	r4, r0
 8018938:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801893a:	4608      	mov	r0, r1
 801893c:	f005 fe80 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018940:	4606      	mov	r6, r0
 8018942:	4628      	mov	r0, r5
 8018944:	f005 feb0 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018948:	6823      	ldr	r3, [r4, #0]
 801894a:	4605      	mov	r5, r0
 801894c:	4631      	mov	r1, r6
 801894e:	4620      	mov	r0, r4
 8018950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018952:	4798      	blx	r3
 8018954:	6823      	ldr	r3, [r4, #0]
 8018956:	4629      	mov	r1, r5
 8018958:	4620      	mov	r0, r4
 801895a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801895c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018960:	4718      	bx	r3

08018962 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018962:	b510      	push	{r4, lr}
 8018964:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8018968:	4604      	mov	r4, r0
 801896a:	2bff      	cmp	r3, #255	@ 0xff
 801896c:	d006      	beq.n	801897c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801896e:	2300      	movs	r3, #0
 8018970:	8003      	strh	r3, [r0, #0]
 8018972:	8043      	strh	r3, [r0, #2]
 8018974:	8083      	strh	r3, [r0, #4]
 8018976:	80c3      	strh	r3, [r0, #6]
 8018978:	4620      	mov	r0, r4
 801897a:	bd10      	pop	{r4, pc}
 801897c:	3126      	adds	r1, #38	@ 0x26
 801897e:	f005 fec7 	bl	801e710 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018982:	e7f9      	b.n	8018978 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018984 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8018984:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8018988:	b12a      	cbz	r2, 8018996 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801898a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801898e:	b112      	cbz	r2, 8018996 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8018990:	6803      	ldr	r3, [r0, #0]
 8018992:	695b      	ldr	r3, [r3, #20]
 8018994:	4718      	bx	r3
 8018996:	4770      	bx	lr

08018998 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801899c:	4604      	mov	r4, r0
 801899e:	b088      	sub	sp, #32
 80189a0:	2500      	movs	r5, #0
 80189a2:	460f      	mov	r7, r1
 80189a4:	f854 3b26 	ldr.w	r3, [r4], #38
 80189a8:	a904      	add	r1, sp, #16
 80189aa:	4606      	mov	r6, r0
 80189ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80189b2:	4798      	blx	r3
 80189b4:	4620      	mov	r0, r4
 80189b6:	f005 fe43 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80189ba:	4680      	mov	r8, r0
 80189bc:	4620      	mov	r0, r4
 80189be:	f005 fe73 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80189c2:	9506      	str	r5, [sp, #24]
 80189c4:	ad06      	add	r5, sp, #24
 80189c6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80189ca:	4639      	mov	r1, r7
 80189cc:	f8ad 801c 	strh.w	r8, [sp, #28]
 80189d0:	4628      	mov	r0, r5
 80189d2:	f7fc f8fd 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 80189d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	dd19      	ble.n	8018a12 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80189de:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	dd15      	ble.n	8018a12 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80189e6:	4b0c      	ldr	r3, [pc, #48]	@ (8018a18 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80189ee:	b10a      	cbz	r2, 80189f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80189f0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80189f2:	b900      	cbnz	r0, 80189f6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80189f4:	6898      	ldr	r0, [r3, #8]
 80189f6:	2701      	movs	r7, #1
 80189f8:	6801      	ldr	r1, [r0, #0]
 80189fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80189fe:	9702      	str	r7, [sp, #8]
 8018a00:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8018a04:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018a08:	e9cd 5600 	strd	r5, r6, [sp]
 8018a0c:	688d      	ldr	r5, [r1, #8]
 8018a0e:	4621      	mov	r1, r4
 8018a10:	47a8      	blx	r5
 8018a12:	b008      	add	sp, #32
 8018a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a18:	200122c4 	.word	0x200122c4

08018a1c <_ZN8touchgfx7OutlineD1Ev>:
 8018a1c:	4770      	bx	lr

08018a1e <_ZN8touchgfx7OutlineD0Ev>:
 8018a1e:	b510      	push	{r4, lr}
 8018a20:	4604      	mov	r4, r0
 8018a22:	2130      	movs	r1, #48	@ 0x30
 8018a24:	f014 fa95 	bl	802cf52 <_ZdlPvj>
 8018a28:	4620      	mov	r0, r4
 8018a2a:	bd10      	pop	{r4, pc}

08018a2c <_ZN8touchgfx7Outline5resetEv>:
 8018a2c:	b510      	push	{r4, lr}
 8018a2e:	4604      	mov	r4, r0
 8018a30:	f000 fe86 	bl	8019740 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8018a34:	60e0      	str	r0, [r4, #12]
 8018a36:	f000 fe89 	bl	801974c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8018a3a:	68e3      	ldr	r3, [r4, #12]
 8018a3c:	08c0      	lsrs	r0, r0, #3
 8018a3e:	2200      	movs	r2, #0
 8018a40:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018a44:	6123      	str	r3, [r4, #16]
 8018a46:	3801      	subs	r0, #1
 8018a48:	60a2      	str	r2, [r4, #8]
 8018a4a:	6060      	str	r0, [r4, #4]
 8018a4c:	8019      	strh	r1, [r3, #0]
 8018a4e:	8059      	strh	r1, [r3, #2]
 8018a50:	809a      	strh	r2, [r3, #4]
 8018a52:	80da      	strh	r2, [r3, #6]
 8018a54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018a56:	f023 0301 	bic.w	r3, r3, #1
 8018a5a:	f043 0302 	orr.w	r3, r3, #2
 8018a5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8018a60:	bd10      	pop	{r4, pc}
	...

08018a64 <_ZN8touchgfx7OutlineC1Ev>:
 8018a64:	4b0a      	ldr	r3, [pc, #40]	@ (8018a90 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8018a66:	b510      	push	{r4, lr}
 8018a68:	6003      	str	r3, [r0, #0]
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	4604      	mov	r4, r0
 8018a6e:	6243      	str	r3, [r0, #36]	@ 0x24
 8018a70:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8018a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a78:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8018a7c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8018a80:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018a84:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8018a88:	f7ff ffd0 	bl	8018a2c <_ZN8touchgfx7Outline5resetEv>
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	bd10      	pop	{r4, pc}
 8018a90:	0803227c 	.word	0x0803227c

08018a94 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8018a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a98:	b093      	sub	sp, #76	@ 0x4c
 8018a9a:	1156      	asrs	r6, r2, #5
 8018a9c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8018a9e:	9305      	str	r3, [sp, #20]
 8018aa0:	1153      	asrs	r3, r2, #5
 8018aa2:	f004 051f 	and.w	r5, r4, #31
 8018aa6:	9303      	str	r3, [sp, #12]
 8018aa8:	1163      	asrs	r3, r4, #5
 8018aaa:	9504      	str	r5, [sp, #16]
 8018aac:	1165      	asrs	r5, r4, #5
 8018aae:	9306      	str	r3, [sp, #24]
 8018ab0:	f002 031f 	and.w	r3, r2, #31
 8018ab4:	42ae      	cmp	r6, r5
 8018ab6:	f040 80f4 	bne.w	8018ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8018aba:	9c04      	ldr	r4, [sp, #16]
 8018abc:	9a05      	ldr	r2, [sp, #20]
 8018abe:	42a3      	cmp	r3, r4
 8018ac0:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8018ac4:	6902      	ldr	r2, [r0, #16]
 8018ac6:	d125      	bne.n	8018b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8018ac8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018acc:	459e      	cmp	lr, r3
 8018ace:	d103      	bne.n	8018ad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8018ad0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018ad4:	429e      	cmp	r6, r3
 8018ad6:	d035      	beq.n	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018ad8:	88d1      	ldrh	r1, [r2, #6]
 8018ada:	8893      	ldrh	r3, [r2, #4]
 8018adc:	430b      	orrs	r3, r1
 8018ade:	d010      	beq.n	8018b02 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018ae0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	db0c      	blt.n	8018b02 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018ae8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018aea:	428b      	cmp	r3, r1
 8018aec:	da09      	bge.n	8018b02 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018aee:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018af2:	428b      	cmp	r3, r1
 8018af4:	f103 0301 	add.w	r3, r3, #1
 8018af8:	bf38      	it	cc
 8018afa:	3208      	addcc	r2, #8
 8018afc:	6083      	str	r3, [r0, #8]
 8018afe:	bf38      	it	cc
 8018b00:	6102      	strcc	r2, [r0, #16]
 8018b02:	6903      	ldr	r3, [r0, #16]
 8018b04:	9a03      	ldr	r2, [sp, #12]
 8018b06:	f8a3 e000 	strh.w	lr, [r3]
 8018b0a:	805a      	strh	r2, [r3, #2]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	809a      	strh	r2, [r3, #4]
 8018b10:	80da      	strh	r2, [r3, #6]
 8018b12:	e017      	b.n	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018b14:	9c05      	ldr	r4, [sp, #20]
 8018b16:	114e      	asrs	r6, r1, #5
 8018b18:	f001 0c1f 	and.w	ip, r1, #31
 8018b1c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018b20:	f004 041f 	and.w	r4, r4, #31
 8018b24:	4576      	cmp	r6, lr
 8018b26:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8018b2a:	9402      	str	r4, [sp, #8]
 8018b2c:	9c04      	ldr	r4, [sp, #16]
 8018b2e:	eba4 0403 	sub.w	r4, r4, r3
 8018b32:	d10a      	bne.n	8018b4a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8018b34:	9b02      	ldr	r3, [sp, #8]
 8018b36:	44a0      	add	r8, r4
 8018b38:	449c      	add	ip, r3
 8018b3a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018b3e:	fb04 a40c 	mla	r4, r4, ip, sl
 8018b42:	80d4      	strh	r4, [r2, #6]
 8018b44:	b013      	add	sp, #76	@ 0x4c
 8018b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b4a:	9d05      	ldr	r5, [sp, #20]
 8018b4c:	1a69      	subs	r1, r5, r1
 8018b4e:	bf51      	iteee	pl
 8018b50:	f1cc 0520 	rsbpl	r5, ip, #32
 8018b54:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018b58:	4249      	negmi	r1, r1
 8018b5a:	2500      	movmi	r5, #0
 8018b5c:	bf5d      	ittte	pl
 8018b5e:	436c      	mulpl	r4, r5
 8018b60:	2520      	movpl	r5, #32
 8018b62:	f04f 0901 	movpl.w	r9, #1
 8018b66:	f04f 39ff 	movmi.w	r9, #4294967295
 8018b6a:	9501      	str	r5, [sp, #4]
 8018b6c:	9f01      	ldr	r7, [sp, #4]
 8018b6e:	444e      	add	r6, r9
 8018b70:	fb94 f5f1 	sdiv	r5, r4, r1
 8018b74:	fb01 4415 	mls	r4, r1, r5, r4
 8018b78:	44bc      	add	ip, r7
 8018b7a:	2c00      	cmp	r4, #0
 8018b7c:	bfbc      	itt	lt
 8018b7e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018b82:	1864      	addlt	r4, r4, r1
 8018b84:	44a8      	add	r8, r5
 8018b86:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018b8a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018b8e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018b92:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018b96:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018b9a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8018b9e:	ea58 0202 	orrs.w	r2, r8, r2
 8018ba2:	d011      	beq.n	8018bc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018ba4:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018ba8:	f1b8 0f00 	cmp.w	r8, #0
 8018bac:	db0c      	blt.n	8018bc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018bae:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018bb0:	4590      	cmp	r8, r2
 8018bb2:	da09      	bge.n	8018bc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018bb4:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018bb8:	4590      	cmp	r8, r2
 8018bba:	bf3c      	itt	cc
 8018bbc:	f10c 0208 	addcc.w	r2, ip, #8
 8018bc0:	6102      	strcc	r2, [r0, #16]
 8018bc2:	f108 0201 	add.w	r2, r8, #1
 8018bc6:	6082      	str	r2, [r0, #8]
 8018bc8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018bcc:	2700      	movs	r7, #0
 8018bce:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018bd2:	45b6      	cmp	lr, r6
 8018bd4:	f8ac 6000 	strh.w	r6, [ip]
 8018bd8:	442b      	add	r3, r5
 8018bda:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018bde:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018be2:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018be6:	d04b      	beq.n	8018c80 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018be8:	9f04      	ldr	r7, [sp, #16]
 8018bea:	1a64      	subs	r4, r4, r1
 8018bec:	f04f 0a00 	mov.w	sl, #0
 8018bf0:	1aff      	subs	r7, r7, r3
 8018bf2:	443d      	add	r5, r7
 8018bf4:	016d      	lsls	r5, r5, #5
 8018bf6:	fb95 f8f1 	sdiv	r8, r5, r1
 8018bfa:	fb01 5518 	mls	r5, r1, r8, r5
 8018bfe:	2d00      	cmp	r5, #0
 8018c00:	bfbc      	itt	lt
 8018c02:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018c06:	186d      	addlt	r5, r5, r1
 8018c08:	f108 0701 	add.w	r7, r8, #1
 8018c0c:	9703      	str	r7, [sp, #12]
 8018c0e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c12:	1964      	adds	r4, r4, r5
 8018c14:	444e      	add	r6, r9
 8018c16:	bf54      	ite	pl
 8018c18:	9f03      	ldrpl	r7, [sp, #12]
 8018c1a:	4647      	movmi	r7, r8
 8018c1c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018c20:	bf58      	it	pl
 8018c22:	1a64      	subpl	r4, r4, r1
 8018c24:	443b      	add	r3, r7
 8018c26:	44bb      	add	fp, r7
 8018c28:	f8ac b004 	strh.w	fp, [ip, #4]
 8018c2c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018c30:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018c34:	f8ac b006 	strh.w	fp, [ip, #6]
 8018c38:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c3c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018c40:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018c44:	ea5b 0707 	orrs.w	r7, fp, r7
 8018c48:	d011      	beq.n	8018c6e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018c4a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018c4e:	f1bb 0f00 	cmp.w	fp, #0
 8018c52:	db0c      	blt.n	8018c6e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018c54:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018c56:	45bb      	cmp	fp, r7
 8018c58:	da09      	bge.n	8018c6e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018c5a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018c5e:	45bb      	cmp	fp, r7
 8018c60:	bf3c      	itt	cc
 8018c62:	f10c 0708 	addcc.w	r7, ip, #8
 8018c66:	6107      	strcc	r7, [r0, #16]
 8018c68:	f10b 0701 	add.w	r7, fp, #1
 8018c6c:	6087      	str	r7, [r0, #8]
 8018c6e:	6907      	ldr	r7, [r0, #16]
 8018c70:	45b6      	cmp	lr, r6
 8018c72:	803e      	strh	r6, [r7, #0]
 8018c74:	807a      	strh	r2, [r7, #2]
 8018c76:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018c7a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018c7e:	d1c6      	bne.n	8018c0e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8018c80:	9a04      	ldr	r2, [sp, #16]
 8018c82:	1ad3      	subs	r3, r2, r3
 8018c84:	6902      	ldr	r2, [r0, #16]
 8018c86:	8891      	ldrh	r1, [r2, #4]
 8018c88:	88d6      	ldrh	r6, [r2, #6]
 8018c8a:	4419      	add	r1, r3
 8018c8c:	8091      	strh	r1, [r2, #4]
 8018c8e:	9902      	ldr	r1, [sp, #8]
 8018c90:	f101 0c20 	add.w	ip, r1, #32
 8018c94:	9901      	ldr	r1, [sp, #4]
 8018c96:	ebac 0c01 	sub.w	ip, ip, r1
 8018c9a:	fb03 630c 	mla	r3, r3, ip, r6
 8018c9e:	80d3      	strh	r3, [r2, #6]
 8018ca0:	e750      	b.n	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018ca2:	9d05      	ldr	r5, [sp, #20]
 8018ca4:	1aa2      	subs	r2, r4, r2
 8018ca6:	eba5 0501 	sub.w	r5, r5, r1
 8018caa:	9202      	str	r2, [sp, #8]
 8018cac:	9508      	str	r5, [sp, #32]
 8018cae:	f140 8128 	bpl.w	8018f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018cb2:	9a03      	ldr	r2, [sp, #12]
 8018cb4:	2a00      	cmp	r2, #0
 8018cb6:	f6ff af45 	blt.w	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018cba:	9a02      	ldr	r2, [sp, #8]
 8018cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8018cc0:	4252      	negs	r2, r2
 8018cc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018cc4:	2400      	movs	r4, #0
 8018cc6:	9202      	str	r2, [sp, #8]
 8018cc8:	9a06      	ldr	r2, [sp, #24]
 8018cca:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018cce:	9206      	str	r2, [sp, #24]
 8018cd0:	462a      	mov	r2, r5
 8018cd2:	435a      	muls	r2, r3
 8018cd4:	9401      	str	r4, [sp, #4]
 8018cd6:	9c02      	ldr	r4, [sp, #8]
 8018cd8:	9d02      	ldr	r5, [sp, #8]
 8018cda:	fb92 f4f4 	sdiv	r4, r2, r4
 8018cde:	fb05 2214 	mls	r2, r5, r4, r2
 8018ce2:	2a00      	cmp	r2, #0
 8018ce4:	9207      	str	r2, [sp, #28]
 8018ce6:	bfbc      	itt	lt
 8018ce8:	1952      	addlt	r2, r2, r5
 8018cea:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018cee:	6905      	ldr	r5, [r0, #16]
 8018cf0:	bfb8      	it	lt
 8018cf2:	9207      	strlt	r2, [sp, #28]
 8018cf4:	eb04 0901 	add.w	r9, r4, r1
 8018cf8:	9a01      	ldr	r2, [sp, #4]
 8018cfa:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018cfe:	429a      	cmp	r2, r3
 8018d00:	f040 8111 	bne.w	8018f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018d04:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018d08:	429e      	cmp	r6, r3
 8018d0a:	d104      	bne.n	8018d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8018d0c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018d10:	9a03      	ldr	r2, [sp, #12]
 8018d12:	429a      	cmp	r2, r3
 8018d14:	d01b      	beq.n	8018d4e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018d16:	88ea      	ldrh	r2, [r5, #6]
 8018d18:	88ab      	ldrh	r3, [r5, #4]
 8018d1a:	4313      	orrs	r3, r2
 8018d1c:	d010      	beq.n	8018d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018d1e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018d22:	2a00      	cmp	r2, #0
 8018d24:	db0c      	blt.n	8018d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018d26:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	da09      	bge.n	8018d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018d2c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018d30:	429a      	cmp	r2, r3
 8018d32:	f102 0201 	add.w	r2, r2, #1
 8018d36:	bf38      	it	cc
 8018d38:	3508      	addcc	r5, #8
 8018d3a:	6082      	str	r2, [r0, #8]
 8018d3c:	bf38      	it	cc
 8018d3e:	6105      	strcc	r5, [r0, #16]
 8018d40:	6903      	ldr	r3, [r0, #16]
 8018d42:	9a03      	ldr	r2, [sp, #12]
 8018d44:	801e      	strh	r6, [r3, #0]
 8018d46:	805a      	strh	r2, [r3, #2]
 8018d48:	2200      	movs	r2, #0
 8018d4a:	809a      	strh	r2, [r3, #4]
 8018d4c:	80da      	strh	r2, [r3, #6]
 8018d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d50:	9a03      	ldr	r2, [sp, #12]
 8018d52:	6901      	ldr	r1, [r0, #16]
 8018d54:	441a      	add	r2, r3
 8018d56:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018d5a:	42b3      	cmp	r3, r6
 8018d5c:	d103      	bne.n	8018d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8018d5e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d01a      	beq.n	8018d9c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8018d66:	88cc      	ldrh	r4, [r1, #6]
 8018d68:	888b      	ldrh	r3, [r1, #4]
 8018d6a:	4323      	orrs	r3, r4
 8018d6c:	d010      	beq.n	8018d90 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018d6e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018d72:	2c00      	cmp	r4, #0
 8018d74:	db0c      	blt.n	8018d90 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018d76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018d78:	429c      	cmp	r4, r3
 8018d7a:	da09      	bge.n	8018d90 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018d7c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018d80:	429c      	cmp	r4, r3
 8018d82:	f104 0401 	add.w	r4, r4, #1
 8018d86:	bf38      	it	cc
 8018d88:	3108      	addcc	r1, #8
 8018d8a:	6084      	str	r4, [r0, #8]
 8018d8c:	bf38      	it	cc
 8018d8e:	6101      	strcc	r1, [r0, #16]
 8018d90:	6903      	ldr	r3, [r0, #16]
 8018d92:	2100      	movs	r1, #0
 8018d94:	801e      	strh	r6, [r3, #0]
 8018d96:	805a      	strh	r2, [r3, #2]
 8018d98:	8099      	strh	r1, [r3, #4]
 8018d9a:	80d9      	strh	r1, [r3, #6]
 8018d9c:	9b06      	ldr	r3, [sp, #24]
 8018d9e:	4293      	cmp	r3, r2
 8018da0:	f000 8082 	beq.w	8018ea8 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018da4:	9b08      	ldr	r3, [sp, #32]
 8018da6:	9902      	ldr	r1, [sp, #8]
 8018da8:	015b      	lsls	r3, r3, #5
 8018daa:	9c02      	ldr	r4, [sp, #8]
 8018dac:	fb93 f1f1 	sdiv	r1, r3, r1
 8018db0:	fb04 3311 	mls	r3, r4, r1, r3
 8018db4:	9103      	str	r1, [sp, #12]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	9308      	str	r3, [sp, #32]
 8018dba:	da04      	bge.n	8018dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8018dbc:	1e4b      	subs	r3, r1, #1
 8018dbe:	9303      	str	r3, [sp, #12]
 8018dc0:	9b08      	ldr	r3, [sp, #32]
 8018dc2:	4423      	add	r3, r4
 8018dc4:	9308      	str	r3, [sp, #32]
 8018dc6:	9b07      	ldr	r3, [sp, #28]
 8018dc8:	464f      	mov	r7, r9
 8018dca:	9902      	ldr	r1, [sp, #8]
 8018dcc:	2600      	movs	r6, #0
 8018dce:	1a5b      	subs	r3, r3, r1
 8018dd0:	9307      	str	r3, [sp, #28]
 8018dd2:	9b01      	ldr	r3, [sp, #4]
 8018dd4:	f1c3 0320 	rsb	r3, r3, #32
 8018dd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8018dda:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018ddc:	9b01      	ldr	r3, [sp, #4]
 8018dde:	1a5b      	subs	r3, r3, r1
 8018de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8018de2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018de6:	185b      	adds	r3, r3, r1
 8018de8:	bf58      	it	pl
 8018dea:	9902      	ldrpl	r1, [sp, #8]
 8018dec:	9307      	str	r3, [sp, #28]
 8018dee:	bf57      	itett	pl
 8018df0:	1a5b      	subpl	r3, r3, r1
 8018df2:	9903      	ldrmi	r1, [sp, #12]
 8018df4:	9307      	strpl	r3, [sp, #28]
 8018df6:	9b03      	ldrpl	r3, [sp, #12]
 8018df8:	bf58      	it	pl
 8018dfa:	1c59      	addpl	r1, r3, #1
 8018dfc:	2a00      	cmp	r2, #0
 8018dfe:	4489      	add	r9, r1
 8018e00:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018e04:	db2e      	blt.n	8018e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018e06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018e08:	4293      	cmp	r3, r2
 8018e0a:	dd2b      	ble.n	8018e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018e0c:	9c01      	ldr	r4, [sp, #4]
 8018e0e:	6905      	ldr	r5, [r0, #16]
 8018e10:	46a0      	mov	r8, r4
 8018e12:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018e14:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018e18:	45a0      	cmp	r8, r4
 8018e1a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018e1e:	f040 814c 	bne.w	80190ba <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8018e22:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018e26:	4551      	cmp	r1, sl
 8018e28:	d103      	bne.n	8018e32 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8018e2a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018e2e:	4291      	cmp	r1, r2
 8018e30:	d018      	beq.n	8018e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018e32:	ea5c 010e 	orrs.w	r1, ip, lr
 8018e36:	d00f      	beq.n	8018e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018e38:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018e3c:	2900      	cmp	r1, #0
 8018e3e:	db0b      	blt.n	8018e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018e40:	428b      	cmp	r3, r1
 8018e42:	dd09      	ble.n	8018e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018e44:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018e48:	4299      	cmp	r1, r3
 8018e4a:	f101 0101 	add.w	r1, r1, #1
 8018e4e:	bf38      	it	cc
 8018e50:	3508      	addcc	r5, #8
 8018e52:	6081      	str	r1, [r0, #8]
 8018e54:	bf38      	it	cc
 8018e56:	6105      	strcc	r5, [r0, #16]
 8018e58:	6903      	ldr	r3, [r0, #16]
 8018e5a:	f8a3 a000 	strh.w	sl, [r3]
 8018e5e:	805a      	strh	r2, [r3, #2]
 8018e60:	809e      	strh	r6, [r3, #4]
 8018e62:	80de      	strh	r6, [r3, #6]
 8018e64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e66:	6901      	ldr	r1, [r0, #16]
 8018e68:	441a      	add	r2, r3
 8018e6a:	88cc      	ldrh	r4, [r1, #6]
 8018e6c:	888b      	ldrh	r3, [r1, #4]
 8018e6e:	4323      	orrs	r3, r4
 8018e70:	d010      	beq.n	8018e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018e72:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018e76:	2c00      	cmp	r4, #0
 8018e78:	db0c      	blt.n	8018e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018e7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018e7c:	429c      	cmp	r4, r3
 8018e7e:	da09      	bge.n	8018e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018e80:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018e84:	429c      	cmp	r4, r3
 8018e86:	f104 0401 	add.w	r4, r4, #1
 8018e8a:	bf38      	it	cc
 8018e8c:	3108      	addcc	r1, #8
 8018e8e:	6084      	str	r4, [r0, #8]
 8018e90:	bf38      	it	cc
 8018e92:	6101      	strcc	r1, [r0, #16]
 8018e94:	6903      	ldr	r3, [r0, #16]
 8018e96:	464f      	mov	r7, r9
 8018e98:	f8a3 a000 	strh.w	sl, [r3]
 8018e9c:	805a      	strh	r2, [r3, #2]
 8018e9e:	809e      	strh	r6, [r3, #4]
 8018ea0:	80de      	strh	r6, [r3, #6]
 8018ea2:	9b06      	ldr	r3, [sp, #24]
 8018ea4:	4293      	cmp	r3, r2
 8018ea6:	d19c      	bne.n	8018de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018ea8:	9b01      	ldr	r3, [sp, #4]
 8018eaa:	6907      	ldr	r7, [r0, #16]
 8018eac:	f1c3 0620 	rsb	r6, r3, #32
 8018eb0:	9b05      	ldr	r3, [sp, #20]
 8018eb2:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018eb6:	9b04      	ldr	r3, [sp, #16]
 8018eb8:	429e      	cmp	r6, r3
 8018eba:	f040 81c7 	bne.w	801924c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8018ebe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018ec2:	459e      	cmp	lr, r3
 8018ec4:	d104      	bne.n	8018ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018ec6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	f43f ae3a 	beq.w	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018ed0:	88f9      	ldrh	r1, [r7, #6]
 8018ed2:	88bb      	ldrh	r3, [r7, #4]
 8018ed4:	430b      	orrs	r3, r1
 8018ed6:	d010      	beq.n	8018efa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018ed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	db0c      	blt.n	8018efa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018ee0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018ee2:	428b      	cmp	r3, r1
 8018ee4:	da09      	bge.n	8018efa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018ee6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018eea:	428b      	cmp	r3, r1
 8018eec:	f103 0301 	add.w	r3, r3, #1
 8018ef0:	bf38      	it	cc
 8018ef2:	3708      	addcc	r7, #8
 8018ef4:	6083      	str	r3, [r0, #8]
 8018ef6:	bf38      	it	cc
 8018ef8:	6107      	strcc	r7, [r0, #16]
 8018efa:	6903      	ldr	r3, [r0, #16]
 8018efc:	f8a3 e000 	strh.w	lr, [r3]
 8018f00:	e603      	b.n	8018b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018f02:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018f04:	9c03      	ldr	r4, [sp, #12]
 8018f06:	42a2      	cmp	r2, r4
 8018f08:	f6ff ae1c 	blt.w	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018f0c:	9c06      	ldr	r4, [sp, #24]
 8018f0e:	42a2      	cmp	r2, r4
 8018f10:	9c08      	ldr	r4, [sp, #32]
 8018f12:	bfbc      	itt	lt
 8018f14:	3201      	addlt	r2, #1
 8018f16:	9206      	strlt	r2, [sp, #24]
 8018f18:	f1c3 0220 	rsb	r2, r3, #32
 8018f1c:	4362      	muls	r2, r4
 8018f1e:	2401      	movs	r4, #1
 8018f20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018f22:	2420      	movs	r4, #32
 8018f24:	e6d6      	b.n	8018cd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8018f26:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018f2a:	f009 021f 	and.w	r2, r9, #31
 8018f2e:	f001 011f 	and.w	r1, r1, #31
 8018f32:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018f36:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f38:	45b0      	cmp	r8, r6
 8018f3a:	9a01      	ldr	r2, [sp, #4]
 8018f3c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018f40:	eba2 0203 	sub.w	r2, r2, r3
 8018f44:	d108      	bne.n	8018f58 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8018f46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f48:	4496      	add	lr, r2
 8018f4a:	4419      	add	r1, r3
 8018f4c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018f50:	fb02 a101 	mla	r1, r2, r1, sl
 8018f54:	80e9      	strh	r1, [r5, #6]
 8018f56:	e6fa      	b.n	8018d4e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018f58:	2c00      	cmp	r4, #0
 8018f5a:	f2c0 80a7 	blt.w	80190ac <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8018f5e:	2701      	movs	r7, #1
 8018f60:	f1c1 0c20 	rsb	ip, r1, #32
 8018f64:	970a      	str	r7, [sp, #40]	@ 0x28
 8018f66:	2720      	movs	r7, #32
 8018f68:	fb02 f20c 	mul.w	r2, r2, ip
 8018f6c:	9709      	str	r7, [sp, #36]	@ 0x24
 8018f6e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018f70:	fb92 fcf4 	sdiv	ip, r2, r4
 8018f74:	fb04 221c 	mls	r2, r4, ip, r2
 8018f78:	4439      	add	r1, r7
 8018f7a:	2a00      	cmp	r2, #0
 8018f7c:	bfbc      	itt	lt
 8018f7e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018f82:	1912      	addlt	r2, r2, r4
 8018f84:	fb0c a101 	mla	r1, ip, r1, sl
 8018f88:	44e6      	add	lr, ip
 8018f8a:	80e9      	strh	r1, [r5, #6]
 8018f8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018f8e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018f92:	eb08 0501 	add.w	r5, r8, r1
 8018f96:	6901      	ldr	r1, [r0, #16]
 8018f98:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8018f9c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018fa0:	ea58 070e 	orrs.w	r7, r8, lr
 8018fa4:	d010      	beq.n	8018fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018fa6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8018faa:	f1be 0f00 	cmp.w	lr, #0
 8018fae:	db0b      	blt.n	8018fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018fb0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018fb2:	45be      	cmp	lr, r7
 8018fb4:	da08      	bge.n	8018fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018fb6:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018fba:	45be      	cmp	lr, r7
 8018fbc:	bf3c      	itt	cc
 8018fbe:	3108      	addcc	r1, #8
 8018fc0:	6101      	strcc	r1, [r0, #16]
 8018fc2:	f10e 0101 	add.w	r1, lr, #1
 8018fc6:	6081      	str	r1, [r0, #8]
 8018fc8:	6901      	ldr	r1, [r0, #16]
 8018fca:	f04f 0e00 	mov.w	lr, #0
 8018fce:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018fd2:	42ae      	cmp	r6, r5
 8018fd4:	800d      	strh	r5, [r1, #0]
 8018fd6:	4463      	add	r3, ip
 8018fd8:	f8a1 8002 	strh.w	r8, [r1, #2]
 8018fdc:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018fe0:	f8a1 e006 	strh.w	lr, [r1, #6]
 8018fe4:	d053      	beq.n	801908e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8018fe6:	9901      	ldr	r1, [sp, #4]
 8018fe8:	1b12      	subs	r2, r2, r4
 8018fea:	1ac9      	subs	r1, r1, r3
 8018fec:	4461      	add	r1, ip
 8018fee:	0149      	lsls	r1, r1, #5
 8018ff0:	fb91 fef4 	sdiv	lr, r1, r4
 8018ff4:	fb04 111e 	mls	r1, r4, lr, r1
 8018ff8:	2900      	cmp	r1, #0
 8018ffa:	bfbc      	itt	lt
 8018ffc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8019000:	1909      	addlt	r1, r1, r4
 8019002:	f10e 0701 	add.w	r7, lr, #1
 8019006:	970d      	str	r7, [sp, #52]	@ 0x34
 8019008:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801900c:	1852      	adds	r2, r2, r1
 801900e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019010:	bf54      	ite	pl
 8019012:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8019016:	46f4      	movmi	ip, lr
 8019018:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801901c:	bf58      	it	pl
 801901e:	1b12      	subpl	r2, r2, r4
 8019020:	4463      	add	r3, ip
 8019022:	443d      	add	r5, r7
 8019024:	44e3      	add	fp, ip
 8019026:	f8aa b004 	strh.w	fp, [sl, #4]
 801902a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801902e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8019032:	f8aa b006 	strh.w	fp, [sl, #6]
 8019036:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801903a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801903e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8019042:	ea5b 070a 	orrs.w	r7, fp, sl
 8019046:	d014      	beq.n	8019072 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019048:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801904c:	f1ba 0f00 	cmp.w	sl, #0
 8019050:	db0f      	blt.n	8019072 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019052:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019054:	45ba      	cmp	sl, r7
 8019056:	da0c      	bge.n	8019072 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019058:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801905c:	45ba      	cmp	sl, r7
 801905e:	f10a 0a01 	add.w	sl, sl, #1
 8019062:	bf38      	it	cc
 8019064:	f10c 0c08 	addcc.w	ip, ip, #8
 8019068:	f8c0 a008 	str.w	sl, [r0, #8]
 801906c:	bf38      	it	cc
 801906e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8019072:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019076:	f04f 0700 	mov.w	r7, #0
 801907a:	42ae      	cmp	r6, r5
 801907c:	f8ac 5000 	strh.w	r5, [ip]
 8019080:	f8ac 8002 	strh.w	r8, [ip, #2]
 8019084:	f8ac 7004 	strh.w	r7, [ip, #4]
 8019088:	f8ac 7006 	strh.w	r7, [ip, #6]
 801908c:	d1bc      	bne.n	8019008 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801908e:	6904      	ldr	r4, [r0, #16]
 8019090:	9a01      	ldr	r2, [sp, #4]
 8019092:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019094:	1ad3      	subs	r3, r2, r3
 8019096:	88a2      	ldrh	r2, [r4, #4]
 8019098:	3120      	adds	r1, #32
 801909a:	441a      	add	r2, r3
 801909c:	80a2      	strh	r2, [r4, #4]
 801909e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190a0:	1a89      	subs	r1, r1, r2
 80190a2:	88e2      	ldrh	r2, [r4, #6]
 80190a4:	fb03 2301 	mla	r3, r3, r1, r2
 80190a8:	80e3      	strh	r3, [r4, #6]
 80190aa:	e650      	b.n	8018d4e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80190ac:	f04f 37ff 	mov.w	r7, #4294967295
 80190b0:	434a      	muls	r2, r1
 80190b2:	4264      	negs	r4, r4
 80190b4:	970a      	str	r7, [sp, #40]	@ 0x28
 80190b6:	2700      	movs	r7, #0
 80190b8:	e758      	b.n	8018f6c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80190ba:	ea4f 1867 	mov.w	r8, r7, asr #5
 80190be:	f009 031f 	and.w	r3, r9, #31
 80190c2:	f007 071f 	and.w	r7, r7, #31
 80190c6:	fa1f fc8c 	uxth.w	ip, ip
 80190ca:	45d0      	cmp	r8, sl
 80190cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80190ce:	fa1f fe8e 	uxth.w	lr, lr
 80190d2:	d10a      	bne.n	80190ea <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80190d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190d6:	449c      	add	ip, r3
 80190d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190da:	441f      	add	r7, r3
 80190dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190de:	f8a5 c004 	strh.w	ip, [r5, #4]
 80190e2:	fb03 e707 	mla	r7, r3, r7, lr
 80190e6:	80ef      	strh	r7, [r5, #6]
 80190e8:	e6bc      	b.n	8018e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80190ea:	2900      	cmp	r1, #0
 80190ec:	f2c0 80a6 	blt.w	801923c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80190f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80190f2:	f1c7 0320 	rsb	r3, r7, #32
 80190f6:	4363      	muls	r3, r4
 80190f8:	2401      	movs	r4, #1
 80190fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80190fc:	2420      	movs	r4, #32
 80190fe:	940c      	str	r4, [sp, #48]	@ 0x30
 8019100:	fb93 f4f1 	sdiv	r4, r3, r1
 8019104:	fb01 3b14 	mls	fp, r1, r4, r3
 8019108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801910a:	f1bb 0f00 	cmp.w	fp, #0
 801910e:	441f      	add	r7, r3
 8019110:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019112:	bfbc      	itt	lt
 8019114:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019118:	448b      	addlt	fp, r1
 801911a:	fb04 e707 	mla	r7, r4, r7, lr
 801911e:	44a4      	add	ip, r4
 8019120:	80ef      	strh	r7, [r5, #6]
 8019122:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019126:	eb08 0503 	add.w	r5, r8, r3
 801912a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801912e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8019132:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019136:	ea5e 0307 	orrs.w	r3, lr, r7
 801913a:	d011      	beq.n	8019160 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801913c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8019140:	f1be 0f00 	cmp.w	lr, #0
 8019144:	db0c      	blt.n	8019160 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019146:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019148:	45be      	cmp	lr, r7
 801914a:	da09      	bge.n	8019160 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801914c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019150:	45be      	cmp	lr, r7
 8019152:	bf3c      	itt	cc
 8019154:	f10c 0708 	addcc.w	r7, ip, #8
 8019158:	6107      	strcc	r7, [r0, #16]
 801915a:	f10e 0701 	add.w	r7, lr, #1
 801915e:	6087      	str	r7, [r0, #8]
 8019160:	6907      	ldr	r7, [r0, #16]
 8019162:	b213      	sxth	r3, r2
 8019164:	4555      	cmp	r5, sl
 8019166:	9310      	str	r3, [sp, #64]	@ 0x40
 8019168:	807b      	strh	r3, [r7, #2]
 801916a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801916c:	803d      	strh	r5, [r7, #0]
 801916e:	80be      	strh	r6, [r7, #4]
 8019170:	eb04 0c03 	add.w	ip, r4, r3
 8019174:	80fe      	strh	r6, [r7, #6]
 8019176:	d050      	beq.n	801921a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8019178:	9b01      	ldr	r3, [sp, #4]
 801917a:	eba3 070c 	sub.w	r7, r3, ip
 801917e:	ebab 0301 	sub.w	r3, fp, r1
 8019182:	443c      	add	r4, r7
 8019184:	9309      	str	r3, [sp, #36]	@ 0x24
 8019186:	0164      	lsls	r4, r4, #5
 8019188:	fb94 f8f1 	sdiv	r8, r4, r1
 801918c:	fb01 4418 	mls	r4, r1, r8, r4
 8019190:	2c00      	cmp	r4, #0
 8019192:	bfbc      	itt	lt
 8019194:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019198:	1864      	addlt	r4, r4, r1
 801919a:	f108 0701 	add.w	r7, r8, #1
 801919e:	9711      	str	r7, [sp, #68]	@ 0x44
 80191a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191a2:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80191a6:	191b      	adds	r3, r3, r4
 80191a8:	f8be b004 	ldrh.w	fp, [lr, #4]
 80191ac:	bf54      	ite	pl
 80191ae:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80191b0:	4647      	movmi	r7, r8
 80191b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80191b4:	bf58      	it	pl
 80191b6:	1a5b      	subpl	r3, r3, r1
 80191b8:	44bb      	add	fp, r7
 80191ba:	44bc      	add	ip, r7
 80191bc:	bf58      	it	pl
 80191be:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80191c0:	f8ae b004 	strh.w	fp, [lr, #4]
 80191c4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80191c8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80191cc:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80191ce:	f8ae b006 	strh.w	fp, [lr, #6]
 80191d2:	443d      	add	r5, r7
 80191d4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80191d8:	f8be b006 	ldrh.w	fp, [lr, #6]
 80191dc:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80191e0:	ea5b 0307 	orrs.w	r3, fp, r7
 80191e4:	d011      	beq.n	801920a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80191e6:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80191ea:	f1bb 0f00 	cmp.w	fp, #0
 80191ee:	db0c      	blt.n	801920a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80191f0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80191f2:	45bb      	cmp	fp, r7
 80191f4:	da09      	bge.n	801920a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80191f6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80191fa:	45bb      	cmp	fp, r7
 80191fc:	bf3c      	itt	cc
 80191fe:	f10e 0708 	addcc.w	r7, lr, #8
 8019202:	6107      	strcc	r7, [r0, #16]
 8019204:	f10b 0701 	add.w	r7, fp, #1
 8019208:	6087      	str	r7, [r0, #8]
 801920a:	6907      	ldr	r7, [r0, #16]
 801920c:	4555      	cmp	r5, sl
 801920e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019210:	803d      	strh	r5, [r7, #0]
 8019212:	807b      	strh	r3, [r7, #2]
 8019214:	80be      	strh	r6, [r7, #4]
 8019216:	80fe      	strh	r6, [r7, #6]
 8019218:	d1c2      	bne.n	80191a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801921a:	9b01      	ldr	r3, [sp, #4]
 801921c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801921e:	eba3 0c0c 	sub.w	ip, r3, ip
 8019222:	6903      	ldr	r3, [r0, #16]
 8019224:	3720      	adds	r7, #32
 8019226:	8899      	ldrh	r1, [r3, #4]
 8019228:	4461      	add	r1, ip
 801922a:	8099      	strh	r1, [r3, #4]
 801922c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801922e:	1a7f      	subs	r7, r7, r1
 8019230:	88d9      	ldrh	r1, [r3, #6]
 8019232:	fb0c 1c07 	mla	ip, ip, r7, r1
 8019236:	f8a3 c006 	strh.w	ip, [r3, #6]
 801923a:	e613      	b.n	8018e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801923c:	f04f 34ff 	mov.w	r4, #4294967295
 8019240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019242:	4249      	negs	r1, r1
 8019244:	940d      	str	r4, [sp, #52]	@ 0x34
 8019246:	2400      	movs	r4, #0
 8019248:	437b      	muls	r3, r7
 801924a:	e758      	b.n	80190fe <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801924c:	9905      	ldr	r1, [sp, #20]
 801924e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8019252:	f009 0c1f 	and.w	ip, r9, #31
 8019256:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801925a:	f001 011f 	and.w	r1, r1, #31
 801925e:	45f3      	cmp	fp, lr
 8019260:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8019264:	9102      	str	r1, [sp, #8]
 8019266:	9904      	ldr	r1, [sp, #16]
 8019268:	eba1 0406 	sub.w	r4, r1, r6
 801926c:	d108      	bne.n	8019280 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801926e:	9b02      	ldr	r3, [sp, #8]
 8019270:	44a0      	add	r8, r4
 8019272:	449c      	add	ip, r3
 8019274:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019278:	fb04 a40c 	mla	r4, r4, ip, sl
 801927c:	80fc      	strh	r4, [r7, #6]
 801927e:	e461      	b.n	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019280:	9905      	ldr	r1, [sp, #20]
 8019282:	ebb1 0109 	subs.w	r1, r1, r9
 8019286:	bf51      	iteee	pl
 8019288:	f1cc 0520 	rsbpl	r5, ip, #32
 801928c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8019290:	4249      	negmi	r1, r1
 8019292:	2500      	movmi	r5, #0
 8019294:	bf5d      	ittte	pl
 8019296:	436c      	mulpl	r4, r5
 8019298:	2520      	movpl	r5, #32
 801929a:	f04f 0901 	movpl.w	r9, #1
 801929e:	f04f 39ff 	movmi.w	r9, #4294967295
 80192a2:	9501      	str	r5, [sp, #4]
 80192a4:	9b01      	ldr	r3, [sp, #4]
 80192a6:	fb94 f5f1 	sdiv	r5, r4, r1
 80192aa:	fb01 4415 	mls	r4, r1, r5, r4
 80192ae:	449c      	add	ip, r3
 80192b0:	eb0b 0309 	add.w	r3, fp, r9
 80192b4:	2c00      	cmp	r4, #0
 80192b6:	bfbc      	itt	lt
 80192b8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80192bc:	1864      	addlt	r4, r4, r1
 80192be:	44a8      	add	r8, r5
 80192c0:	fb05 ac0c 	mla	ip, r5, ip, sl
 80192c4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80192c8:	f8a7 c006 	strh.w	ip, [r7, #6]
 80192cc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80192d0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80192d4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80192d8:	ea58 0707 	orrs.w	r7, r8, r7
 80192dc:	d011      	beq.n	8019302 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80192de:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80192e2:	f1b8 0f00 	cmp.w	r8, #0
 80192e6:	db0c      	blt.n	8019302 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80192e8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80192ea:	45b8      	cmp	r8, r7
 80192ec:	da09      	bge.n	8019302 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80192ee:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80192f2:	45b8      	cmp	r8, r7
 80192f4:	bf3c      	itt	cc
 80192f6:	f10c 0708 	addcc.w	r7, ip, #8
 80192fa:	6107      	strcc	r7, [r0, #16]
 80192fc:	f108 0701 	add.w	r7, r8, #1
 8019300:	6087      	str	r7, [r0, #8]
 8019302:	6907      	ldr	r7, [r0, #16]
 8019304:	f04f 0c00 	mov.w	ip, #0
 8019308:	b212      	sxth	r2, r2
 801930a:	459e      	cmp	lr, r3
 801930c:	803b      	strh	r3, [r7, #0]
 801930e:	442e      	add	r6, r5
 8019310:	807a      	strh	r2, [r7, #2]
 8019312:	f8a7 c004 	strh.w	ip, [r7, #4]
 8019316:	f8a7 c006 	strh.w	ip, [r7, #6]
 801931a:	d04b      	beq.n	80193b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801931c:	9f04      	ldr	r7, [sp, #16]
 801931e:	1a64      	subs	r4, r4, r1
 8019320:	f04f 0a00 	mov.w	sl, #0
 8019324:	1bbf      	subs	r7, r7, r6
 8019326:	443d      	add	r5, r7
 8019328:	016d      	lsls	r5, r5, #5
 801932a:	fb95 f8f1 	sdiv	r8, r5, r1
 801932e:	fb01 5518 	mls	r5, r1, r8, r5
 8019332:	4565      	cmp	r5, ip
 8019334:	bfbc      	itt	lt
 8019336:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801933a:	186d      	addlt	r5, r5, r1
 801933c:	f108 0701 	add.w	r7, r8, #1
 8019340:	9703      	str	r7, [sp, #12]
 8019342:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019346:	1964      	adds	r4, r4, r5
 8019348:	444b      	add	r3, r9
 801934a:	bf54      	ite	pl
 801934c:	9f03      	ldrpl	r7, [sp, #12]
 801934e:	4647      	movmi	r7, r8
 8019350:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019354:	bf58      	it	pl
 8019356:	1a64      	subpl	r4, r4, r1
 8019358:	443e      	add	r6, r7
 801935a:	44bb      	add	fp, r7
 801935c:	f8ac b004 	strh.w	fp, [ip, #4]
 8019360:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019364:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019368:	f8ac b006 	strh.w	fp, [ip, #6]
 801936c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019370:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019374:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019378:	ea5b 0707 	orrs.w	r7, fp, r7
 801937c:	d011      	beq.n	80193a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801937e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019382:	f1bb 0f00 	cmp.w	fp, #0
 8019386:	db0c      	blt.n	80193a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8019388:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801938a:	45bb      	cmp	fp, r7
 801938c:	da09      	bge.n	80193a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801938e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019392:	45bb      	cmp	fp, r7
 8019394:	bf3c      	itt	cc
 8019396:	f10c 0708 	addcc.w	r7, ip, #8
 801939a:	6107      	strcc	r7, [r0, #16]
 801939c:	f10b 0701 	add.w	r7, fp, #1
 80193a0:	6087      	str	r7, [r0, #8]
 80193a2:	6907      	ldr	r7, [r0, #16]
 80193a4:	459e      	cmp	lr, r3
 80193a6:	803b      	strh	r3, [r7, #0]
 80193a8:	807a      	strh	r2, [r7, #2]
 80193aa:	f8a7 a004 	strh.w	sl, [r7, #4]
 80193ae:	f8a7 a006 	strh.w	sl, [r7, #6]
 80193b2:	d1c6      	bne.n	8019342 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80193b4:	9b04      	ldr	r3, [sp, #16]
 80193b6:	1b9e      	subs	r6, r3, r6
 80193b8:	6903      	ldr	r3, [r0, #16]
 80193ba:	889a      	ldrh	r2, [r3, #4]
 80193bc:	4432      	add	r2, r6
 80193be:	809a      	strh	r2, [r3, #4]
 80193c0:	9a02      	ldr	r2, [sp, #8]
 80193c2:	f102 0c20 	add.w	ip, r2, #32
 80193c6:	9a01      	ldr	r2, [sp, #4]
 80193c8:	ebac 0c02 	sub.w	ip, ip, r2
 80193cc:	88da      	ldrh	r2, [r3, #6]
 80193ce:	fb06 260c 	mla	r6, r6, ip, r2
 80193d2:	80de      	strh	r6, [r3, #6]
 80193d4:	f7ff bbb6 	b.w	8018b44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080193d8 <_ZN8touchgfx7Outline6lineToEii>:
 80193d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80193da:	079b      	lsls	r3, r3, #30
 80193dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193de:	460e      	mov	r6, r1
 80193e0:	4615      	mov	r5, r2
 80193e2:	d511      	bpl.n	8019408 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80193e4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80193e8:	ea86 0701 	eor.w	r7, r6, r1
 80193ec:	ea85 0302 	eor.w	r3, r5, r2
 80193f0:	433b      	orrs	r3, r7
 80193f2:	d009      	beq.n	8019408 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80193f4:	4633      	mov	r3, r6
 80193f6:	9500      	str	r5, [sp, #0]
 80193f8:	f7ff fb4c 	bl	8018a94 <_ZN8touchgfx7Outline10renderLineEiiii>
 80193fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80193fe:	f043 0301 	orr.w	r3, r3, #1
 8019402:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8019406:	6243      	str	r3, [r0, #36]	@ 0x24
 8019408:	b003      	add	sp, #12
 801940a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801940c <_ZN8touchgfx7Outline6moveToEii>:
 801940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801940e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019410:	4615      	mov	r5, r2
 8019412:	4604      	mov	r4, r0
 8019414:	460e      	mov	r6, r1
 8019416:	079a      	lsls	r2, r3, #30
 8019418:	d401      	bmi.n	801941e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801941a:	f7ff fb07 	bl	8018a2c <_ZN8touchgfx7Outline5resetEv>
 801941e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019420:	07db      	lsls	r3, r3, #31
 8019422:	d504      	bpl.n	801942e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8019424:	4620      	mov	r0, r4
 8019426:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801942a:	f7ff ffd5 	bl	80193d8 <_ZN8touchgfx7Outline6lineToEii>
 801942e:	6923      	ldr	r3, [r4, #16]
 8019430:	1170      	asrs	r0, r6, #5
 8019432:	1169      	asrs	r1, r5, #5
 8019434:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019438:	4290      	cmp	r0, r2
 801943a:	d103      	bne.n	8019444 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801943c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019440:	4291      	cmp	r1, r2
 8019442:	d01a      	beq.n	801947a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8019444:	88df      	ldrh	r7, [r3, #6]
 8019446:	889a      	ldrh	r2, [r3, #4]
 8019448:	433a      	orrs	r2, r7
 801944a:	d010      	beq.n	801946e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801944c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019450:	2a00      	cmp	r2, #0
 8019452:	db0c      	blt.n	801946e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019454:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019456:	42ba      	cmp	r2, r7
 8019458:	da09      	bge.n	801946e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801945a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801945e:	42ba      	cmp	r2, r7
 8019460:	f102 0201 	add.w	r2, r2, #1
 8019464:	bf38      	it	cc
 8019466:	3308      	addcc	r3, #8
 8019468:	60a2      	str	r2, [r4, #8]
 801946a:	bf38      	it	cc
 801946c:	6123      	strcc	r3, [r4, #16]
 801946e:	6923      	ldr	r3, [r4, #16]
 8019470:	2200      	movs	r2, #0
 8019472:	8018      	strh	r0, [r3, #0]
 8019474:	8059      	strh	r1, [r3, #2]
 8019476:	809a      	strh	r2, [r3, #4]
 8019478:	80da      	strh	r2, [r3, #6]
 801947a:	6166      	str	r6, [r4, #20]
 801947c:	6225      	str	r5, [r4, #32]
 801947e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019484 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8019484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019488:	b0d0      	sub	sp, #320	@ 0x140
 801948a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801948e:	466c      	mov	r4, sp
 8019490:	4627      	mov	r7, r4
 8019492:	1a0d      	subs	r5, r1, r0
 8019494:	f100 0308 	add.w	r3, r0, #8
 8019498:	2d48      	cmp	r5, #72	@ 0x48
 801949a:	f340 80d5 	ble.w	8019648 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801949e:	112d      	asrs	r5, r5, #4
 80194a0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80194a4:	f9b0 9000 	ldrsh.w	r9, [r0]
 80194a8:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80194ac:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80194b0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80194b4:	6816      	ldr	r6, [r2, #0]
 80194b6:	6006      	str	r6, [r0, #0]
 80194b8:	6856      	ldr	r6, [r2, #4]
 80194ba:	6046      	str	r6, [r0, #4]
 80194bc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80194c0:	f8a2 8002 	strh.w	r8, [r2, #2]
 80194c4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80194c8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80194cc:	f1a1 0208 	sub.w	r2, r1, #8
 80194d0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80194d4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80194d8:	4565      	cmp	r5, ip
 80194da:	db06      	blt.n	80194ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80194dc:	d119      	bne.n	8019512 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80194de:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80194e2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80194e6:	42ae      	cmp	r6, r5
 80194e8:	dd13      	ble.n	8019512 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80194ea:	460e      	mov	r6, r1
 80194ec:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80194f0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80194f4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80194f8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80194fc:	601d      	str	r5, [r3, #0]
 80194fe:	6875      	ldr	r5, [r6, #4]
 8019500:	605d      	str	r5, [r3, #4]
 8019502:	f821 9c08 	strh.w	r9, [r1, #-8]
 8019506:	f821 cc06 	strh.w	ip, [r1, #-6]
 801950a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801950e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8019512:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019516:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801951a:	42ae      	cmp	r6, r5
 801951c:	db06      	blt.n	801952c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801951e:	d116      	bne.n	801954e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019520:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019524:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8019528:	45ac      	cmp	ip, r5
 801952a:	da10      	bge.n	801954e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801952c:	681d      	ldr	r5, [r3, #0]
 801952e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019532:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8019536:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801953a:	6005      	str	r5, [r0, #0]
 801953c:	685d      	ldr	r5, [r3, #4]
 801953e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8019542:	6045      	str	r5, [r0, #4]
 8019544:	8146      	strh	r6, [r0, #10]
 8019546:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801954a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801954e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019552:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019556:	4565      	cmp	r5, ip
 8019558:	db06      	blt.n	8019568 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801955a:	d119      	bne.n	8019590 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801955c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8019560:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019564:	42ae      	cmp	r6, r5
 8019566:	da13      	bge.n	8019590 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019568:	460e      	mov	r6, r1
 801956a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801956e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8019572:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8019576:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801957a:	6005      	str	r5, [r0, #0]
 801957c:	6875      	ldr	r5, [r6, #4]
 801957e:	6045      	str	r5, [r0, #4]
 8019580:	f821 9c08 	strh.w	r9, [r1, #-8]
 8019584:	f821 cc06 	strh.w	ip, [r1, #-6]
 8019588:	f821 8c04 	strh.w	r8, [r1, #-4]
 801958c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8019590:	3308      	adds	r3, #8
 8019592:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019596:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801959a:	45e6      	cmp	lr, ip
 801959c:	dbf8      	blt.n	8019590 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801959e:	d105      	bne.n	80195ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195a0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80195a4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80195a8:	42ae      	cmp	r6, r5
 80195aa:	dbf1      	blt.n	8019590 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195ac:	4615      	mov	r5, r2
 80195ae:	3a08      	subs	r2, #8
 80195b0:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80195b4:	45b4      	cmp	ip, r6
 80195b6:	dbf9      	blt.n	80195ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195b8:	d105      	bne.n	80195c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80195ba:	f9b0 8000 	ldrsh.w	r8, [r0]
 80195be:	f9b2 6000 	ldrsh.w	r6, [r2]
 80195c2:	45b0      	cmp	r8, r6
 80195c4:	dbf2      	blt.n	80195ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195c6:	4293      	cmp	r3, r2
 80195c8:	f1a5 0608 	sub.w	r6, r5, #8
 80195cc:	d816      	bhi.n	80195fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80195ce:	f8d6 c000 	ldr.w	ip, [r6]
 80195d2:	f9b3 a000 	ldrsh.w	sl, [r3]
 80195d6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80195da:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80195de:	f8c3 c000 	str.w	ip, [r3]
 80195e2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80195e6:	f8c3 c004 	str.w	ip, [r3, #4]
 80195ea:	f825 ac08 	strh.w	sl, [r5, #-8]
 80195ee:	f825 ec06 	strh.w	lr, [r5, #-6]
 80195f2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80195f6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80195fa:	e7c9      	b.n	8019590 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195fc:	f8d6 e000 	ldr.w	lr, [r6]
 8019600:	f9b0 a000 	ldrsh.w	sl, [r0]
 8019604:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8019608:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801960c:	f8c0 e000 	str.w	lr, [r0]
 8019610:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8019614:	1a16      	subs	r6, r2, r0
 8019616:	f8c0 e004 	str.w	lr, [r0, #4]
 801961a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801961e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8019622:	f825 9c04 	strh.w	r9, [r5, #-4]
 8019626:	f825 8c02 	strh.w	r8, [r5, #-2]
 801962a:	1acd      	subs	r5, r1, r3
 801962c:	10ed      	asrs	r5, r5, #3
 801962e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8019632:	bfb5      	itete	lt
 8019634:	e9c4 0200 	strdlt	r0, r2, [r4]
 8019638:	e9c4 3100 	strdge	r3, r1, [r4]
 801963c:	460a      	movlt	r2, r1
 801963e:	4603      	movge	r3, r0
 8019640:	3408      	adds	r4, #8
 8019642:	4618      	mov	r0, r3
 8019644:	4611      	mov	r1, r2
 8019646:	e724      	b.n	8019492 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8019648:	4299      	cmp	r1, r3
 801964a:	d927      	bls.n	801969c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801964c:	f1a3 0210 	sub.w	r2, r3, #16
 8019650:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8019654:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8019658:	45ac      	cmp	ip, r5
 801965a:	db06      	blt.n	801966a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801965c:	d11c      	bne.n	8019698 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801965e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8019662:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8019666:	42ae      	cmp	r6, r5
 8019668:	da16      	bge.n	8019698 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801966a:	4615      	mov	r5, r2
 801966c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8019670:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8019674:	3a08      	subs	r2, #8
 8019676:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801967a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801967e:	6196      	str	r6, [r2, #24]
 8019680:	42a8      	cmp	r0, r5
 8019682:	686e      	ldr	r6, [r5, #4]
 8019684:	f8a2 9010 	strh.w	r9, [r2, #16]
 8019688:	61d6      	str	r6, [r2, #28]
 801968a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801968e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8019692:	f8a2 e016 	strh.w	lr, [r2, #22]
 8019696:	d1db      	bne.n	8019650 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8019698:	3308      	adds	r3, #8
 801969a:	e7d5      	b.n	8019648 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801969c:	42bc      	cmp	r4, r7
 801969e:	d903      	bls.n	80196a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80196a0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80196a4:	3c08      	subs	r4, #8
 80196a6:	e6f4      	b.n	8019492 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80196a8:	b050      	add	sp, #320	@ 0x140
 80196aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080196ae <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80196ae:	b510      	push	{r4, lr}
 80196b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80196b2:	4604      	mov	r4, r0
 80196b4:	07da      	lsls	r2, r3, #31
 80196b6:	d507      	bpl.n	80196c8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80196b8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80196bc:	f7ff fe8c 	bl	80193d8 <_ZN8touchgfx7Outline6lineToEii>
 80196c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80196c2:	f023 0301 	bic.w	r3, r3, #1
 80196c6:	6243      	str	r3, [r0, #36]	@ 0x24
 80196c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80196ca:	079b      	lsls	r3, r3, #30
 80196cc:	d521      	bpl.n	8019712 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80196ce:	6923      	ldr	r3, [r4, #16]
 80196d0:	88d9      	ldrh	r1, [r3, #6]
 80196d2:	889a      	ldrh	r2, [r3, #4]
 80196d4:	430a      	orrs	r2, r1
 80196d6:	d010      	beq.n	80196fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80196d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80196dc:	2a00      	cmp	r2, #0
 80196de:	db0c      	blt.n	80196fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80196e0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80196e2:	428a      	cmp	r2, r1
 80196e4:	da09      	bge.n	80196fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80196e6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80196ea:	4291      	cmp	r1, r2
 80196ec:	f102 0201 	add.w	r2, r2, #1
 80196f0:	bf88      	it	hi
 80196f2:	3308      	addhi	r3, #8
 80196f4:	60a2      	str	r2, [r4, #8]
 80196f6:	bf88      	it	hi
 80196f8:	6123      	strhi	r3, [r4, #16]
 80196fa:	68a1      	ldr	r1, [r4, #8]
 80196fc:	b129      	cbz	r1, 801970a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80196fe:	6863      	ldr	r3, [r4, #4]
 8019700:	4299      	cmp	r1, r3
 8019702:	d802      	bhi.n	801970a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019704:	68e0      	ldr	r0, [r4, #12]
 8019706:	f7ff febd 	bl	8019484 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801970a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801970c:	f023 0302 	bic.w	r3, r3, #2
 8019710:	6263      	str	r3, [r4, #36]	@ 0x24
 8019712:	68e0      	ldr	r0, [r4, #12]
 8019714:	bd10      	pop	{r4, pc}
	...

08019718 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8019718:	4b02      	ldr	r3, [pc, #8]	@ (8019724 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801971a:	6018      	str	r0, [r3, #0]
 801971c:	4b02      	ldr	r3, [pc, #8]	@ (8019728 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801971e:	6019      	str	r1, [r3, #0]
 8019720:	4770      	bx	lr
 8019722:	bf00      	nop
 8019724:	200122cc 	.word	0x200122cc
 8019728:	200122d0 	.word	0x200122d0

0801972c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 801972c:	2300      	movs	r3, #0
 801972e:	4a02      	ldr	r2, [pc, #8]	@ (8019738 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8019730:	6013      	str	r3, [r2, #0]
 8019732:	4a02      	ldr	r2, [pc, #8]	@ (801973c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8019734:	6013      	str	r3, [r2, #0]
 8019736:	4770      	bx	lr
 8019738:	200122cc 	.word	0x200122cc
 801973c:	200122d0 	.word	0x200122d0

08019740 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8019740:	4b01      	ldr	r3, [pc, #4]	@ (8019748 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8019742:	6818      	ldr	r0, [r3, #0]
 8019744:	4770      	bx	lr
 8019746:	bf00      	nop
 8019748:	200122cc 	.word	0x200122cc

0801974c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801974c:	4b01      	ldr	r3, [pc, #4]	@ (8019754 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801974e:	6818      	ldr	r0, [r3, #0]
 8019750:	4770      	bx	lr
 8019752:	bf00      	nop
 8019754:	200122d0 	.word	0x200122d0

08019758 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019758:	b510      	push	{r4, lr}
 801975a:	6803      	ldr	r3, [r0, #0]
 801975c:	460c      	mov	r4, r1
 801975e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019760:	4798      	blx	r3
 8019762:	1b03      	subs	r3, r0, r4
 8019764:	4258      	negs	r0, r3
 8019766:	4158      	adcs	r0, r3
 8019768:	bd10      	pop	{r4, pc}
	...

0801976c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801976c:	4b01      	ldr	r3, [pc, #4]	@ (8019774 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801976e:	6019      	str	r1, [r3, #0]
 8019770:	4770      	bx	lr
 8019772:	bf00      	nop
 8019774:	200122d4 	.word	0x200122d4

08019778 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801977c:	4696      	mov	lr, r2
 801977e:	b097      	sub	sp, #92	@ 0x5c
 8019780:	4605      	mov	r5, r0
 8019782:	4614      	mov	r4, r2
 8019784:	460e      	mov	r6, r1
 8019786:	461f      	mov	r7, r3
 8019788:	f10d 0c1c 	add.w	ip, sp, #28
 801978c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8019790:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8019794:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8019798:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801979c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197a0:	f8de 3000 	ldr.w	r3, [lr]
 80197a4:	f104 0e14 	add.w	lr, r4, #20
 80197a8:	f8cc 3000 	str.w	r3, [ip]
 80197ac:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80197b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197b8:	f8de 3000 	ldr.w	r3, [lr]
 80197bc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80197c0:	f8cc 3000 	str.w	r3, [ip]
 80197c4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80197c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197d0:	f8de 3000 	ldr.w	r3, [lr]
 80197d4:	4631      	mov	r1, r6
 80197d6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80197d8:	4628      	mov	r0, r5
 80197da:	f8cc 3000 	str.w	r3, [ip]
 80197de:	682b      	ldr	r3, [r5, #0]
 80197e0:	9201      	str	r2, [sp, #4]
 80197e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80197e4:	f8cd 8008 	str.w	r8, [sp, #8]
 80197e8:	9200      	str	r2, [sp, #0]
 80197ea:	aa07      	add	r2, sp, #28
 80197ec:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80197f0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80197f4:	463b      	mov	r3, r7
 80197f6:	47d8      	blx	fp
 80197f8:	46a6      	mov	lr, r4
 80197fa:	f10d 0c1c 	add.w	ip, sp, #28
 80197fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019806:	f8de 3000 	ldr.w	r3, [lr]
 801980a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801980e:	343c      	adds	r4, #60	@ 0x3c
 8019810:	f8cc 3000 	str.w	r3, [ip]
 8019814:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019818:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801981c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019820:	f8de 3000 	ldr.w	r3, [lr]
 8019824:	f8cc 3000 	str.w	r3, [ip]
 8019828:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801982c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801982e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019832:	6823      	ldr	r3, [r4, #0]
 8019834:	4631      	mov	r1, r6
 8019836:	4628      	mov	r0, r5
 8019838:	f8cc 3000 	str.w	r3, [ip]
 801983c:	682b      	ldr	r3, [r5, #0]
 801983e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019842:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019844:	f8cd 8008 	str.w	r8, [sp, #8]
 8019848:	9201      	str	r2, [sp, #4]
 801984a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801984c:	9200      	str	r2, [sp, #0]
 801984e:	aa07      	add	r2, sp, #28
 8019850:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8019852:	463b      	mov	r3, r7
 8019854:	47a0      	blx	r4
 8019856:	b017      	add	sp, #92	@ 0x5c
 8019858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801985c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801985c:	2000      	movs	r0, #0
 801985e:	4770      	bx	lr

08019860 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019864:	b08d      	sub	sp, #52	@ 0x34
 8019866:	4688      	mov	r8, r1
 8019868:	f8d3 c000 	ldr.w	ip, [r3]
 801986c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801986e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8019872:	680f      	ldr	r7, [r1, #0]
 8019874:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8019878:	eba7 070c 	sub.w	r7, r7, ip
 801987c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8019880:	edd3 6a07 	vldr	s13, [r3, #28]
 8019884:	42bc      	cmp	r4, r7
 8019886:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019888:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801988c:	bfa8      	it	ge
 801988e:	463c      	movge	r4, r7
 8019890:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019894:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019898:	ee07 4a90 	vmov	s15, r4
 801989c:	eb09 0e0c 	add.w	lr, r9, ip
 80198a0:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80198a4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80198a8:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80198ac:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80198b0:	4571      	cmp	r1, lr
 80198b2:	ee25 4a04 	vmul.f32	s8, s10, s8
 80198b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80198ba:	ee25 5a27 	vmul.f32	s10, s10, s15
 80198be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80198c2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80198c6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80198ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80198ce:	ee36 0a84 	vadd.f32	s0, s13, s8
 80198d2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80198d6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80198da:	f340 808c 	ble.w	80199f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80198de:	eba1 060e 	sub.w	r6, r1, lr
 80198e2:	fb96 f5f4 	sdiv	r5, r6, r4
 80198e6:	ee07 5a10 	vmov	s14, r5
 80198ea:	2d00      	cmp	r5, #0
 80198ec:	fb04 6615 	mls	r6, r4, r5, r6
 80198f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80198f4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80198f8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80198fc:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019900:	dd12      	ble.n	8019928 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019902:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019906:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801990a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801990e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019916:	bf14      	ite	ne
 8019918:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801991c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019920:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019924:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019928:	fb05 f204 	mul.w	r2, r5, r4
 801992c:	1abf      	subs	r7, r7, r2
 801992e:	4494      	add	ip, r2
 8019930:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019934:	4411      	add	r1, r2
 8019936:	eb09 020c 	add.w	r2, r9, ip
 801993a:	b209      	sxth	r1, r1
 801993c:	443a      	add	r2, r7
 801993e:	428a      	cmp	r2, r1
 8019940:	bfc4      	itt	gt
 8019942:	eba1 0209 	subgt.w	r2, r1, r9
 8019946:	eba2 070c 	subgt.w	r7, r2, ip
 801994a:	2f00      	cmp	r7, #0
 801994c:	dd50      	ble.n	80199f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801994e:	fb97 f1f4 	sdiv	r1, r7, r4
 8019952:	fb04 7211 	mls	r2, r4, r1, r7
 8019956:	b90a      	cbnz	r2, 801995c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019958:	3901      	subs	r1, #1
 801995a:	4622      	mov	r2, r4
 801995c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019960:	6840      	ldr	r0, [r0, #4]
 8019962:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8019966:	44b6      	add	lr, r6
 8019968:	f8d0 a000 	ldr.w	sl, [r0]
 801996c:	2900      	cmp	r1, #0
 801996e:	bfcc      	ite	gt
 8019970:	46a1      	movgt	r9, r4
 8019972:	4691      	movle	r9, r2
 8019974:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019976:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8019978:	fb04 e505 	mla	r5, r4, r5, lr
 801997c:	eef0 6a42 	vmov.f32	s13, s4
 8019980:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019984:	9008      	str	r0, [sp, #32]
 8019986:	eeb0 7a61 	vmov.f32	s14, s3
 801998a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801998c:	695b      	ldr	r3, [r3, #20]
 801998e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019992:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019996:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801999a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801999c:	445b      	add	r3, fp
 801999e:	9307      	str	r3, [sp, #28]
 80199a0:	ee16 3a90 	vmov	r3, s13
 80199a4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80199a8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80199ac:	ee21 3a23 	vmul.f32	s6, s2, s7
 80199b0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80199b4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80199b8:	ee17 7a90 	vmov	r7, s15
 80199bc:	ee73 7a42 	vsub.f32	s15, s6, s4
 80199c0:	fb97 f7f4 	sdiv	r7, r7, r4
 80199c4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80199c8:	ee17 ca90 	vmov	ip, s15
 80199cc:	fb9c fcf4 	sdiv	ip, ip, r4
 80199d0:	fb0c 3306 	mla	r3, ip, r6, r3
 80199d4:	9302      	str	r3, [sp, #8]
 80199d6:	ee17 3a10 	vmov	r3, s14
 80199da:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80199de:	fb07 3706 	mla	r7, r7, r6, r3
 80199e2:	eba9 0306 	sub.w	r3, r9, r6
 80199e6:	e9cd 4700 	strd	r4, r7, [sp]
 80199ea:	f8da 4008 	ldr.w	r4, [sl, #8]
 80199ee:	47a0      	blx	r4
 80199f0:	b00d      	add	sp, #52	@ 0x34
 80199f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f6:	2500      	movs	r5, #0
 80199f8:	462e      	mov	r6, r5
 80199fa:	e799      	b.n	8019930 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080199fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80199fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a00:	b0db      	sub	sp, #364	@ 0x16c
 8019a02:	461d      	mov	r5, r3
 8019a04:	4614      	mov	r4, r2
 8019a06:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8019a0a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019a0c:	4629      	mov	r1, r5
 8019a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a10:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019a14:	9009      	str	r0, [sp, #36]	@ 0x24
 8019a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a18:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019a1c:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019a20:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a22:	6803      	ldr	r3, [r0, #0]
 8019a24:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8019a26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8019a2a:	47b8      	blx	r7
 8019a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a2e:	6058      	str	r0, [r3, #4]
 8019a30:	2800      	cmp	r0, #0
 8019a32:	f000 83a1 	beq.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a36:	682b      	ldr	r3, [r5, #0]
 8019a38:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019a3c:	ed94 7a02 	vldr	s14, [r4, #8]
 8019a40:	9314      	str	r3, [sp, #80]	@ 0x50
 8019a42:	686b      	ldr	r3, [r5, #4]
 8019a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a48:	9315      	str	r3, [sp, #84]	@ 0x54
 8019a4a:	4bc1      	ldr	r3, [pc, #772]	@ (8019d50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019a4c:	7819      	ldrb	r1, [r3, #0]
 8019a4e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019a52:	2900      	cmp	r1, #0
 8019a54:	bf16      	itet	ne
 8019a56:	4619      	movne	r1, r3
 8019a58:	4611      	moveq	r1, r2
 8019a5a:	4613      	movne	r3, r2
 8019a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a60:	9116      	str	r1, [sp, #88]	@ 0x58
 8019a62:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8019a66:	f240 8387 	bls.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a6a:	ed94 7a07 	vldr	s14, [r4, #28]
 8019a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a76:	f240 837f 	bls.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a7a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8019a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a86:	f240 8377 	bls.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a8a:	6822      	ldr	r2, [r4, #0]
 8019a8c:	4bb1      	ldr	r3, [pc, #708]	@ (8019d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	f2c0 8372 	blt.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a94:	49b0      	ldr	r1, [pc, #704]	@ (8019d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019a96:	6963      	ldr	r3, [r4, #20]
 8019a98:	428a      	cmp	r2, r1
 8019a9a:	f300 836d 	bgt.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a9e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8019aa2:	48ae      	ldr	r0, [pc, #696]	@ (8019d5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019aa4:	33ff      	adds	r3, #255	@ 0xff
 8019aa6:	4283      	cmp	r3, r0
 8019aa8:	f200 8366 	bhi.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019aae:	4dac      	ldr	r5, [pc, #688]	@ (8019d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019ab0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8019ab4:	33ff      	adds	r3, #255	@ 0xff
 8019ab6:	42ab      	cmp	r3, r5
 8019ab8:	f200 835e 	bhi.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019abc:	6862      	ldr	r2, [r4, #4]
 8019abe:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8019ac2:	33ff      	adds	r3, #255	@ 0xff
 8019ac4:	4283      	cmp	r3, r0
 8019ac6:	f200 8357 	bhi.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aca:	69a1      	ldr	r1, [r4, #24]
 8019acc:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8019ad0:	33ff      	adds	r3, #255	@ 0xff
 8019ad2:	4283      	cmp	r3, r0
 8019ad4:	f200 8350 	bhi.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ad8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019ada:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8019ade:	30ff      	adds	r0, #255	@ 0xff
 8019ae0:	42a8      	cmp	r0, r5
 8019ae2:	f200 8349 	bhi.w	801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ae6:	428a      	cmp	r2, r1
 8019ae8:	f280 8110 	bge.w	8019d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019aec:	429a      	cmp	r2, r3
 8019aee:	f300 8119 	bgt.w	8019d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019af2:	4299      	cmp	r1, r3
 8019af4:	f280 811d 	bge.w	8019d32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019af8:	2502      	movs	r5, #2
 8019afa:	2701      	movs	r7, #1
 8019afc:	46a9      	mov	r9, r5
 8019afe:	46b8      	mov	r8, r7
 8019b00:	f04f 0a00 	mov.w	sl, #0
 8019b04:	4621      	mov	r1, r4
 8019b06:	a849      	add	r0, sp, #292	@ 0x124
 8019b08:	f003 fe9c 	bl	801d844 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019b0c:	4622      	mov	r2, r4
 8019b0e:	4653      	mov	r3, sl
 8019b10:	a949      	add	r1, sp, #292	@ 0x124
 8019b12:	f8cd 9000 	str.w	r9, [sp]
 8019b16:	a819      	add	r0, sp, #100	@ 0x64
 8019b18:	f003 ffc4 	bl	801daa4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b1c:	4622      	mov	r2, r4
 8019b1e:	4653      	mov	r3, sl
 8019b20:	a949      	add	r1, sp, #292	@ 0x124
 8019b22:	f8cd 8000 	str.w	r8, [sp]
 8019b26:	a829      	add	r0, sp, #164	@ 0xa4
 8019b28:	f003 ffbc 	bl	801daa4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b2c:	4643      	mov	r3, r8
 8019b2e:	4622      	mov	r2, r4
 8019b30:	a949      	add	r1, sp, #292	@ 0x124
 8019b32:	f8cd 9000 	str.w	r9, [sp]
 8019b36:	a839      	add	r0, sp, #228	@ 0xe4
 8019b38:	f003 ffb4 	bl	801daa4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b3c:	42af      	cmp	r7, r5
 8019b3e:	af12      	add	r7, sp, #72	@ 0x48
 8019b40:	bfb7      	itett	lt
 8019b42:	2300      	movlt	r3, #0
 8019b44:	2301      	movge	r3, #1
 8019b46:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8019b48:	ac19      	addlt	r4, sp, #100	@ 0x64
 8019b4a:	bfb1      	iteee	lt
 8019b4c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019b4e:	ad19      	addge	r5, sp, #100	@ 0x64
 8019b50:	930e      	strge	r3, [sp, #56]	@ 0x38
 8019b52:	ac29      	addge	r4, sp, #164	@ 0xa4
 8019b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b5a:	e887 0003 	stmia.w	r7, {r0, r1}
 8019b5e:	b928      	cbnz	r0, 8019b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019b60:	4b80      	ldr	r3, [pc, #512]	@ (8019d64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019b62:	6818      	ldr	r0, [r3, #0]
 8019b64:	6803      	ldr	r3, [r0, #0]
 8019b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b68:	4798      	blx	r3
 8019b6a:	6038      	str	r0, [r7, #0]
 8019b6c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019b6e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019b72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b76:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8019b78:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019b7c:	6963      	ldr	r3, [r4, #20]
 8019b7e:	440b      	add	r3, r1
 8019b80:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019b84:	4408      	add	r0, r1
 8019b86:	b200      	sxth	r0, r0
 8019b88:	4283      	cmp	r3, r0
 8019b8a:	900d      	str	r0, [sp, #52]	@ 0x34
 8019b8c:	f280 80dd 	bge.w	8019d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019b90:	428b      	cmp	r3, r1
 8019b92:	da08      	bge.n	8019ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019b94:	2a00      	cmp	r2, #0
 8019b96:	dd06      	ble.n	8019ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019b98:	1acb      	subs	r3, r1, r3
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	f2c0 80e4 	blt.w	8019d68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	f300 80e2 	bgt.w	8019d6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019ba6:	6967      	ldr	r7, [r4, #20]
 8019ba8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019bae:	443b      	add	r3, r7
 8019bb0:	461f      	mov	r7, r3
 8019bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019bb4:	1bdf      	subs	r7, r3, r7
 8019bb6:	4297      	cmp	r7, r2
 8019bb8:	bfa8      	it	ge
 8019bba:	4617      	movge	r7, r2
 8019bbc:	2f00      	cmp	r7, #0
 8019bbe:	f340 8166 	ble.w	8019e8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019bc2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019bc4:	6829      	ldr	r1, [r5, #0]
 8019bc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bca:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019bce:	4411      	add	r1, r2
 8019bd0:	6820      	ldr	r0, [r4, #0]
 8019bd2:	4299      	cmp	r1, r3
 8019bd4:	dd1a      	ble.n	8019c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019bd6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019bda:	4402      	add	r2, r0
 8019bdc:	440b      	add	r3, r1
 8019bde:	b21b      	sxth	r3, r3
 8019be0:	429a      	cmp	r2, r3
 8019be2:	dc13      	bgt.n	8019c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019be4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019be6:	a912      	add	r1, sp, #72	@ 0x48
 8019be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	9206      	str	r2, [sp, #24]
 8019bf0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019bf2:	9500      	str	r5, [sp, #0]
 8019bf4:	9205      	str	r2, [sp, #20]
 8019bf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019bf8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019bfc:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019bfe:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019c02:	aa49      	add	r2, sp, #292	@ 0x124
 8019c04:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019c08:	4623      	mov	r3, r4
 8019c0a:	47c8      	blx	r9
 8019c0c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019c10:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019c14:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c1c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019c20:	68a1      	ldr	r1, [r4, #8]
 8019c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c26:	ed94 6a08 	vldr	s12, [r4, #32]
 8019c2a:	edd4 6a07 	vldr	s13, [r4, #28]
 8019c2e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019c32:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019c36:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019c3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019c3e:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c42:	441a      	add	r2, r3
 8019c44:	6963      	ldr	r3, [r4, #20]
 8019c46:	3301      	adds	r3, #1
 8019c48:	6022      	str	r2, [r4, #0]
 8019c4a:	6163      	str	r3, [r4, #20]
 8019c4c:	69a3      	ldr	r3, [r4, #24]
 8019c4e:	3b01      	subs	r3, #1
 8019c50:	61a3      	str	r3, [r4, #24]
 8019c52:	6923      	ldr	r3, [r4, #16]
 8019c54:	440b      	add	r3, r1
 8019c56:	68e1      	ldr	r1, [r4, #12]
 8019c58:	428b      	cmp	r3, r1
 8019c5a:	6123      	str	r3, [r4, #16]
 8019c5c:	db15      	blt.n	8019c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019c5e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019c62:	3201      	adds	r2, #1
 8019c64:	1a5b      	subs	r3, r3, r1
 8019c66:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c6a:	6022      	str	r2, [r4, #0]
 8019c6c:	6123      	str	r3, [r4, #16]
 8019c6e:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c72:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019c76:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c7a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019c7e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c86:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019c8a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019c8e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019c92:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c9a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019c9e:	68a9      	ldr	r1, [r5, #8]
 8019ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ca4:	ed95 6a08 	vldr	s12, [r5, #32]
 8019ca8:	edd5 6a07 	vldr	s13, [r5, #28]
 8019cac:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019cb0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019cb4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019cb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019cbc:	edc5 6a07 	vstr	s13, [r5, #28]
 8019cc0:	441a      	add	r2, r3
 8019cc2:	696b      	ldr	r3, [r5, #20]
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	602a      	str	r2, [r5, #0]
 8019cc8:	616b      	str	r3, [r5, #20]
 8019cca:	69ab      	ldr	r3, [r5, #24]
 8019ccc:	3b01      	subs	r3, #1
 8019cce:	61ab      	str	r3, [r5, #24]
 8019cd0:	692b      	ldr	r3, [r5, #16]
 8019cd2:	440b      	add	r3, r1
 8019cd4:	68e9      	ldr	r1, [r5, #12]
 8019cd6:	428b      	cmp	r3, r1
 8019cd8:	612b      	str	r3, [r5, #16]
 8019cda:	db15      	blt.n	8019d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019cdc:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019ce0:	3201      	adds	r2, #1
 8019ce2:	1a5b      	subs	r3, r3, r1
 8019ce4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019ce8:	602a      	str	r2, [r5, #0]
 8019cea:	612b      	str	r3, [r5, #16]
 8019cec:	edc5 6a07 	vstr	s13, [r5, #28]
 8019cf0:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019cf4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019cf8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019cfc:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d04:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019d08:	3f01      	subs	r7, #1
 8019d0a:	e757      	b.n	8019bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019d0c:	4299      	cmp	r1, r3
 8019d0e:	dc13      	bgt.n	8019d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019d10:	429a      	cmp	r2, r3
 8019d12:	da14      	bge.n	8019d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019d14:	2502      	movs	r5, #2
 8019d16:	2703      	movs	r7, #3
 8019d18:	f04f 0800 	mov.w	r8, #0
 8019d1c:	46a9      	mov	r9, r5
 8019d1e:	f04f 0a01 	mov.w	sl, #1
 8019d22:	e6ef      	b.n	8019b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019d24:	2501      	movs	r5, #1
 8019d26:	2700      	movs	r7, #0
 8019d28:	46a9      	mov	r9, r5
 8019d2a:	46b8      	mov	r8, r7
 8019d2c:	f04f 0a02 	mov.w	sl, #2
 8019d30:	e6e8      	b.n	8019b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019d32:	2501      	movs	r5, #1
 8019d34:	2702      	movs	r7, #2
 8019d36:	e6e1      	b.n	8019afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019d38:	2500      	movs	r5, #0
 8019d3a:	2701      	movs	r7, #1
 8019d3c:	e7f4      	b.n	8019d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019d3e:	2702      	movs	r7, #2
 8019d40:	2503      	movs	r5, #3
 8019d42:	f04f 0900 	mov.w	r9, #0
 8019d46:	46b8      	mov	r8, r7
 8019d48:	e7e9      	b.n	8019d1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019d4a:	4613      	mov	r3, r2
 8019d4c:	e728      	b.n	8019ba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019d4e:	bf00      	nop
 8019d50:	200122bc 	.word	0x200122bc
 8019d54:	fffd8f01 	.word	0xfffd8f01
 8019d58:	00027100 	.word	0x00027100
 8019d5c:	0004e1ff 	.word	0x0004e1ff
 8019d60:	0004e1fe 	.word	0x0004e1fe
 8019d64:	200122c4 	.word	0x200122c4
 8019d68:	4613      	mov	r3, r2
 8019d6a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8019d6c:	469e      	mov	lr, r3
 8019d6e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8019d70:	469c      	mov	ip, r3
 8019d72:	9111      	str	r1, [sp, #68]	@ 0x44
 8019d74:	f04f 0900 	mov.w	r9, #0
 8019d78:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8019d7c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8019d80:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8019d84:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8019d88:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8019d8c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019d90:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8019d94:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8019d98:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8019d9c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8019da0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8019da4:	f1bc 0f00 	cmp.w	ip, #0
 8019da8:	d147      	bne.n	8019e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019daa:	eb03 0c07 	add.w	ip, r3, r7
 8019dae:	1ad7      	subs	r7, r2, r3
 8019db0:	f1b9 0f00 	cmp.w	r9, #0
 8019db4:	d009      	beq.n	8019dca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019db6:	9029      	str	r0, [sp, #164]	@ 0xa4
 8019db8:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8019dbc:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8019dc0:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8019dc4:	912d      	str	r1, [sp, #180]	@ 0xb4
 8019dc6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8019dca:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019dcc:	f04f 0800 	mov.w	r8, #0
 8019dd0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019dd4:	9111      	str	r1, [sp, #68]	@ 0x44
 8019dd6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019dda:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019dde:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019de2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019de6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019dea:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019dee:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019df2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019df6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019dfa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019dfe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019e02:	f1be 0f00 	cmp.w	lr, #0
 8019e06:	d031      	beq.n	8019e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019e08:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019e0a:	4450      	add	r0, sl
 8019e0c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019e10:	4431      	add	r1, r6
 8019e12:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019e16:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019e1a:	4549      	cmp	r1, r9
 8019e1c:	db08      	blt.n	8019e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019e1e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019e22:	3001      	adds	r0, #1
 8019e24:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019e28:	eba1 0109 	sub.w	r1, r1, r9
 8019e2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019e30:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019e34:	f04f 0801 	mov.w	r8, #1
 8019e38:	e7e3      	b.n	8019e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019e3a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019e3c:	4450      	add	r0, sl
 8019e3e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019e42:	4431      	add	r1, r6
 8019e44:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019e48:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019e4c:	4541      	cmp	r1, r8
 8019e4e:	db08      	blt.n	8019e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019e50:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019e54:	3001      	adds	r0, #1
 8019e56:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019e5a:	eba1 0108 	sub.w	r1, r1, r8
 8019e5e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019e62:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019e66:	f04f 0901 	mov.w	r9, #1
 8019e6a:	e79b      	b.n	8019da4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019e6c:	449c      	add	ip, r3
 8019e6e:	1aff      	subs	r7, r7, r3
 8019e70:	f1b8 0f00 	cmp.w	r8, #0
 8019e74:	d009      	beq.n	8019e8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019e76:	9019      	str	r0, [sp, #100]	@ 0x64
 8019e78:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019e7c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019e80:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019e84:	911d      	str	r1, [sp, #116]	@ 0x74
 8019e86:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019e8a:	1ad2      	subs	r2, r2, r3
 8019e8c:	e68b      	b.n	8019ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e90:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	f000 80d1 	beq.w	801a03a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019e98:	ad19      	add	r5, sp, #100	@ 0x64
 8019e9a:	ac39      	add	r4, sp, #228	@ 0xe4
 8019e9c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019e9e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019ea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019ea6:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ea8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019eaa:	6963      	ldr	r3, [r4, #20]
 8019eac:	440b      	add	r3, r1
 8019eae:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019eb2:	4408      	add	r0, r1
 8019eb4:	b200      	sxth	r0, r0
 8019eb6:	4283      	cmp	r3, r0
 8019eb8:	900d      	str	r0, [sp, #52]	@ 0x34
 8019eba:	f280 80c1 	bge.w	801a040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019ebe:	428b      	cmp	r3, r1
 8019ec0:	da08      	bge.n	8019ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019ec2:	2a00      	cmp	r2, #0
 8019ec4:	dd06      	ble.n	8019ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019ec6:	1acb      	subs	r3, r1, r3
 8019ec8:	429a      	cmp	r2, r3
 8019eca:	f2c0 80bb 	blt.w	801a044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f300 80b9 	bgt.w	801a046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019ed4:	6967      	ldr	r7, [r4, #20]
 8019ed6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019edc:	443b      	add	r3, r7
 8019ede:	461f      	mov	r7, r3
 8019ee0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019ee2:	1bdf      	subs	r7, r3, r7
 8019ee4:	4297      	cmp	r7, r2
 8019ee6:	bfa8      	it	ge
 8019ee8:	4617      	movge	r7, r2
 8019eea:	2f00      	cmp	r7, #0
 8019eec:	f340 813c 	ble.w	801a168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019ef0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019ef2:	6829      	ldr	r1, [r5, #0]
 8019ef4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ef8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019efc:	4411      	add	r1, r2
 8019efe:	6820      	ldr	r0, [r4, #0]
 8019f00:	4299      	cmp	r1, r3
 8019f02:	dd1a      	ble.n	8019f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019f04:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019f08:	4402      	add	r2, r0
 8019f0a:	440b      	add	r3, r1
 8019f0c:	b21b      	sxth	r3, r3
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	dc13      	bgt.n	8019f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019f12:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019f14:	a912      	add	r1, sp, #72	@ 0x48
 8019f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	9206      	str	r2, [sp, #24]
 8019f1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019f20:	9500      	str	r5, [sp, #0]
 8019f22:	9205      	str	r2, [sp, #20]
 8019f24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019f26:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019f2a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019f2c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019f30:	aa49      	add	r2, sp, #292	@ 0x124
 8019f32:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019f36:	4623      	mov	r3, r4
 8019f38:	47c8      	blx	r9
 8019f3a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019f3e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019f42:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f4a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019f4e:	68a1      	ldr	r1, [r4, #8]
 8019f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f54:	ed94 6a08 	vldr	s12, [r4, #32]
 8019f58:	edd4 6a07 	vldr	s13, [r4, #28]
 8019f5c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019f60:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019f64:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019f68:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f6c:	edc4 6a07 	vstr	s13, [r4, #28]
 8019f70:	441a      	add	r2, r3
 8019f72:	6963      	ldr	r3, [r4, #20]
 8019f74:	3301      	adds	r3, #1
 8019f76:	6022      	str	r2, [r4, #0]
 8019f78:	6163      	str	r3, [r4, #20]
 8019f7a:	69a3      	ldr	r3, [r4, #24]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	61a3      	str	r3, [r4, #24]
 8019f80:	6923      	ldr	r3, [r4, #16]
 8019f82:	440b      	add	r3, r1
 8019f84:	68e1      	ldr	r1, [r4, #12]
 8019f86:	428b      	cmp	r3, r1
 8019f88:	6123      	str	r3, [r4, #16]
 8019f8a:	db15      	blt.n	8019fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019f8c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019f90:	3201      	adds	r2, #1
 8019f92:	1a5b      	subs	r3, r3, r1
 8019f94:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019f98:	6022      	str	r2, [r4, #0]
 8019f9a:	6123      	str	r3, [r4, #16]
 8019f9c:	edc4 6a07 	vstr	s13, [r4, #28]
 8019fa0:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019fa4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019fa8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019fac:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fb4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019fb8:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019fbc:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019fc0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019fc8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019fcc:	68a9      	ldr	r1, [r5, #8]
 8019fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019fd2:	ed95 6a08 	vldr	s12, [r5, #32]
 8019fd6:	edd5 6a07 	vldr	s13, [r5, #28]
 8019fda:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019fde:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019fe2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019fea:	edc5 6a07 	vstr	s13, [r5, #28]
 8019fee:	441a      	add	r2, r3
 8019ff0:	696b      	ldr	r3, [r5, #20]
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	602a      	str	r2, [r5, #0]
 8019ff6:	616b      	str	r3, [r5, #20]
 8019ff8:	69ab      	ldr	r3, [r5, #24]
 8019ffa:	3b01      	subs	r3, #1
 8019ffc:	61ab      	str	r3, [r5, #24]
 8019ffe:	692b      	ldr	r3, [r5, #16]
 801a000:	440b      	add	r3, r1
 801a002:	68e9      	ldr	r1, [r5, #12]
 801a004:	428b      	cmp	r3, r1
 801a006:	612b      	str	r3, [r5, #16]
 801a008:	db15      	blt.n	801a036 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a00a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a00e:	3201      	adds	r2, #1
 801a010:	1a5b      	subs	r3, r3, r1
 801a012:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a016:	602a      	str	r2, [r5, #0]
 801a018:	612b      	str	r3, [r5, #16]
 801a01a:	edc5 6a07 	vstr	s13, [r5, #28]
 801a01e:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a022:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a026:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a02a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a02e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a032:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a036:	3f01      	subs	r7, #1
 801a038:	e757      	b.n	8019eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a03a:	ad39      	add	r5, sp, #228	@ 0xe4
 801a03c:	ac19      	add	r4, sp, #100	@ 0x64
 801a03e:	e72d      	b.n	8019e9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a040:	4613      	mov	r3, r2
 801a042:	e744      	b.n	8019ece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a044:	4613      	mov	r3, r2
 801a046:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801a048:	469e      	mov	lr, r3
 801a04a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801a04e:	461f      	mov	r7, r3
 801a050:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801a054:	f04f 0900 	mov.w	r9, #0
 801a058:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801a05c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801a060:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801a064:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801a068:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801a06c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801a06e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801a072:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801a076:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801a07a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801a07e:	960e      	str	r6, [sp, #56]	@ 0x38
 801a080:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801a084:	2f00      	cmp	r7, #0
 801a086:	d146      	bne.n	801a116 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a088:	449c      	add	ip, r3
 801a08a:	1ad7      	subs	r7, r2, r3
 801a08c:	f1b9 0f00 	cmp.w	r9, #0
 801a090:	d009      	beq.n	801a0a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a092:	9039      	str	r0, [sp, #228]	@ 0xe4
 801a094:	913d      	str	r1, [sp, #244]	@ 0xf4
 801a096:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801a09a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801a09e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801a0a2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801a0a6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a0a8:	f04f 0800 	mov.w	r8, #0
 801a0ac:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a0b0:	910e      	str	r1, [sp, #56]	@ 0x38
 801a0b2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a0b6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a0ba:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a0be:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a0c2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a0c6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a0ca:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a0ce:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a0d2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a0d6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a0da:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a0de:	f1be 0f00 	cmp.w	lr, #0
 801a0e2:	d030      	beq.n	801a146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a0e4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a0e6:	4450      	add	r0, sl
 801a0e8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a0ec:	4431      	add	r1, r6
 801a0ee:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a0f2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a0f6:	4549      	cmp	r1, r9
 801a0f8:	db08      	blt.n	801a10c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a0fa:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a0fe:	3001      	adds	r0, #1
 801a100:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a104:	eba1 0109 	sub.w	r1, r1, r9
 801a108:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a10c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a110:	f04f 0801 	mov.w	r8, #1
 801a114:	e7e3      	b.n	801a0de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a116:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a118:	4450      	add	r0, sl
 801a11a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a11e:	4431      	add	r1, r6
 801a120:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a124:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a128:	4541      	cmp	r1, r8
 801a12a:	db08      	blt.n	801a13e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a12c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a130:	3001      	adds	r0, #1
 801a132:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a136:	eba1 0108 	sub.w	r1, r1, r8
 801a13a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a13e:	3f01      	subs	r7, #1
 801a140:	f04f 0901 	mov.w	r9, #1
 801a144:	e79e      	b.n	801a084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a146:	449c      	add	ip, r3
 801a148:	1aff      	subs	r7, r7, r3
 801a14a:	f1b8 0f00 	cmp.w	r8, #0
 801a14e:	d009      	beq.n	801a164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a150:	9019      	str	r0, [sp, #100]	@ 0x64
 801a152:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a156:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a15a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a15e:	911d      	str	r1, [sp, #116]	@ 0x74
 801a160:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a164:	1ad2      	subs	r2, r2, r3
 801a166:	e6b5      	b.n	8019ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	b923      	cbnz	r3, 801a178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a16e:	4b04      	ldr	r3, [pc, #16]	@ (801a180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a170:	6818      	ldr	r0, [r3, #0]
 801a172:	6803      	ldr	r3, [r0, #0]
 801a174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a176:	4798      	blx	r3
 801a178:	b05b      	add	sp, #364	@ 0x16c
 801a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a17e:	bf00      	nop
 801a180:	200122c4 	.word	0x200122c4

0801a184 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801a184:	b570      	push	{r4, r5, r6, lr}
 801a186:	4604      	mov	r4, r0
 801a188:	2500      	movs	r5, #0
 801a18a:	9805      	ldr	r0, [sp, #20]
 801a18c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801a190:	6061      	str	r1, [r4, #4]
 801a192:	8263      	strh	r3, [r4, #18]
 801a194:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801a198:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a19c:	8025      	strh	r5, [r4, #0]
 801a19e:	7221      	strb	r1, [r4, #8]
 801a1a0:	7266      	strb	r6, [r4, #9]
 801a1a2:	60e0      	str	r0, [r4, #12]
 801a1a4:	8222      	strh	r2, [r4, #16]
 801a1a6:	82a3      	strh	r3, [r4, #20]
 801a1a8:	82e5      	strh	r5, [r4, #22]
 801a1aa:	8325      	strh	r5, [r4, #24]
 801a1ac:	8365      	strh	r5, [r4, #26]
 801a1ae:	83a5      	strh	r5, [r4, #28]
 801a1b0:	83e5      	strh	r5, [r4, #30]
 801a1b2:	8425      	strh	r5, [r4, #32]
 801a1b4:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 801a1b8:	b32e      	cbz	r6, 801a206 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1ba:	6803      	ldr	r3, [r0, #0]
 801a1bc:	695b      	ldr	r3, [r3, #20]
 801a1be:	4798      	blx	r3
 801a1c0:	4606      	mov	r6, r0
 801a1c2:	b300      	cbz	r0, 801a206 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1c4:	68e0      	ldr	r0, [r4, #12]
 801a1c6:	4631      	mov	r1, r6
 801a1c8:	6803      	ldr	r3, [r0, #0]
 801a1ca:	68db      	ldr	r3, [r3, #12]
 801a1cc:	4798      	blx	r3
 801a1ce:	4605      	mov	r5, r0
 801a1d0:	b1c8      	cbz	r0, 801a206 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1d2:	7b43      	ldrb	r3, [r0, #13]
 801a1d4:	7a82      	ldrb	r2, [r0, #10]
 801a1d6:	005b      	lsls	r3, r3, #1
 801a1d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a1dc:	4313      	orrs	r3, r2
 801a1de:	8423      	strh	r3, [r4, #32]
 801a1e0:	7a63      	ldrb	r3, [r4, #9]
 801a1e2:	2b06      	cmp	r3, #6
 801a1e4:	d10f      	bne.n	801a206 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1e6:	68e0      	ldr	r0, [r4, #12]
 801a1e8:	462a      	mov	r2, r5
 801a1ea:	4631      	mov	r1, r6
 801a1ec:	6803      	ldr	r3, [r0, #0]
 801a1ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a1f0:	4798      	blx	r3
 801a1f2:	7b6b      	ldrb	r3, [r5, #13]
 801a1f4:	005b      	lsls	r3, r3, #1
 801a1f6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a1fa:	7aab      	ldrb	r3, [r5, #10]
 801a1fc:	4313      	orrs	r3, r2
 801a1fe:	4418      	add	r0, r3
 801a200:	8c23      	ldrh	r3, [r4, #32]
 801a202:	4418      	add	r0, r3
 801a204:	8420      	strh	r0, [r4, #32]
 801a206:	4620      	mov	r0, r4
 801a208:	bd70      	pop	{r4, r5, r6, pc}

0801a20a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a20a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a20e:	2400      	movs	r4, #0
 801a210:	b085      	sub	sp, #20
 801a212:	4681      	mov	r9, r0
 801a214:	4688      	mov	r8, r1
 801a216:	4692      	mov	sl, r2
 801a218:	469b      	mov	fp, r3
 801a21a:	4627      	mov	r7, r4
 801a21c:	4625      	mov	r5, r4
 801a21e:	4626      	mov	r6, r4
 801a220:	4554      	cmp	r4, sl
 801a222:	da2a      	bge.n	801a27a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a224:	2300      	movs	r3, #0
 801a226:	9303      	str	r3, [sp, #12]
 801a228:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a22c:	429d      	cmp	r5, r3
 801a22e:	d004      	beq.n	801a23a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a230:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a234:	429d      	cmp	r5, r3
 801a236:	bf18      	it	ne
 801a238:	462f      	movne	r7, r5
 801a23a:	ab03      	add	r3, sp, #12
 801a23c:	4642      	mov	r2, r8
 801a23e:	4659      	mov	r1, fp
 801a240:	4648      	mov	r0, r9
 801a242:	f003 f915 	bl	801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a246:	4605      	mov	r5, r0
 801a248:	b1b8      	cbz	r0, 801a27a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a24a:	280a      	cmp	r0, #10
 801a24c:	d015      	beq.n	801a27a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a24e:	9a03      	ldr	r2, [sp, #12]
 801a250:	b18a      	cbz	r2, 801a276 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a252:	7b50      	ldrb	r0, [r2, #13]
 801a254:	4639      	mov	r1, r7
 801a256:	7a93      	ldrb	r3, [r2, #10]
 801a258:	0040      	lsls	r0, r0, #1
 801a25a:	8895      	ldrh	r5, [r2, #4]
 801a25c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a260:	4303      	orrs	r3, r0
 801a262:	4640      	mov	r0, r8
 801a264:	9301      	str	r3, [sp, #4]
 801a266:	f8d8 3000 	ldr.w	r3, [r8]
 801a26a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a26c:	4798      	blx	r3
 801a26e:	9b01      	ldr	r3, [sp, #4]
 801a270:	4418      	add	r0, r3
 801a272:	4406      	add	r6, r0
 801a274:	b2b6      	uxth	r6, r6
 801a276:	3401      	adds	r4, #1
 801a278:	e7d2      	b.n	801a220 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a27a:	4630      	mov	r0, r6
 801a27c:	b005      	add	sp, #20
 801a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a282 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a282:	2a02      	cmp	r2, #2
 801a284:	b530      	push	{r4, r5, lr}
 801a286:	d011      	beq.n	801a2ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a288:	2a03      	cmp	r2, #3
 801a28a:	d01c      	beq.n	801a2c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a28c:	2a01      	cmp	r2, #1
 801a28e:	d10c      	bne.n	801a2aa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a290:	888b      	ldrh	r3, [r1, #4]
 801a292:	8801      	ldrh	r1, [r0, #0]
 801a294:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a298:	1a5b      	subs	r3, r3, r1
 801a29a:	8844      	ldrh	r4, [r0, #2]
 801a29c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a2a0:	1a9b      	subs	r3, r3, r2
 801a2a2:	8004      	strh	r4, [r0, #0]
 801a2a4:	8081      	strh	r1, [r0, #4]
 801a2a6:	8043      	strh	r3, [r0, #2]
 801a2a8:	80c2      	strh	r2, [r0, #6]
 801a2aa:	bd30      	pop	{r4, r5, pc}
 801a2ac:	88cb      	ldrh	r3, [r1, #6]
 801a2ae:	8842      	ldrh	r2, [r0, #2]
 801a2b0:	1a9b      	subs	r3, r3, r2
 801a2b2:	88c2      	ldrh	r2, [r0, #6]
 801a2b4:	1a9b      	subs	r3, r3, r2
 801a2b6:	888a      	ldrh	r2, [r1, #4]
 801a2b8:	8801      	ldrh	r1, [r0, #0]
 801a2ba:	8043      	strh	r3, [r0, #2]
 801a2bc:	1a52      	subs	r2, r2, r1
 801a2be:	8881      	ldrh	r1, [r0, #4]
 801a2c0:	1a52      	subs	r2, r2, r1
 801a2c2:	8002      	strh	r2, [r0, #0]
 801a2c4:	e7f1      	b.n	801a2aa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a2c6:	88cb      	ldrh	r3, [r1, #6]
 801a2c8:	8841      	ldrh	r1, [r0, #2]
 801a2ca:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a2ce:	1a5b      	subs	r3, r3, r1
 801a2d0:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a2d4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a2d8:	1a9b      	subs	r3, r3, r2
 801a2da:	8045      	strh	r5, [r0, #2]
 801a2dc:	8082      	strh	r2, [r0, #4]
 801a2de:	8003      	strh	r3, [r0, #0]
 801a2e0:	80c4      	strh	r4, [r0, #6]
 801a2e2:	e7e2      	b.n	801a2aa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a2e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2e8:	b09f      	sub	sp, #124	@ 0x7c
 801a2ea:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a2ec:	9312      	str	r3, [sp, #72]	@ 0x48
 801a2ee:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a2f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a2f2:	8812      	ldrh	r2, [r2, #0]
 801a2f4:	889b      	ldrh	r3, [r3, #4]
 801a2f6:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801a2f8:	4413      	add	r3, r2
 801a2fa:	900e      	str	r0, [sp, #56]	@ 0x38
 801a2fc:	6828      	ldr	r0, [r5, #0]
 801a2fe:	b21b      	sxth	r3, r3
 801a300:	9117      	str	r1, [sp, #92]	@ 0x5c
 801a302:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801a306:	9311      	str	r3, [sp, #68]	@ 0x44
 801a308:	6803      	ldr	r3, [r0, #0]
 801a30a:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801a30e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a310:	4798      	blx	r3
 801a312:	682b      	ldr	r3, [r5, #0]
 801a314:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a316:	7b1a      	ldrb	r2, [r3, #12]
 801a318:	7adb      	ldrb	r3, [r3, #11]
 801a31a:	9215      	str	r2, [sp, #84]	@ 0x54
 801a31c:	9316      	str	r3, [sp, #88]	@ 0x58
 801a31e:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801a322:	2c00      	cmp	r4, #0
 801a324:	d067      	beq.n	801a3f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a326:	7c2b      	ldrb	r3, [r5, #16]
 801a328:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801a32a:	2b06      	cmp	r3, #6
 801a32c:	bf14      	ite	ne
 801a32e:	2301      	movne	r3, #1
 801a330:	2302      	moveq	r3, #2
 801a332:	4413      	add	r3, r2
 801a334:	f04f 0900 	mov.w	r9, #0
 801a338:	9310      	str	r3, [sp, #64]	@ 0x40
 801a33a:	464c      	mov	r4, r9
 801a33c:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801a340:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801a344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a346:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a348:	4293      	cmp	r3, r2
 801a34a:	f280 808b 	bge.w	801a464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a34e:	2300      	movs	r3, #0
 801a350:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801a354:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 801a358:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a35c:	429c      	cmp	r4, r3
 801a35e:	d006      	beq.n	801a36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801a360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a362:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a366:	4294      	cmp	r4, r2
 801a368:	bf18      	it	ne
 801a36a:	4623      	movne	r3, r4
 801a36c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a36e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a370:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801a372:	682a      	ldr	r2, [r5, #0]
 801a374:	428b      	cmp	r3, r1
 801a376:	db40      	blt.n	801a3fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a378:	6813      	ldr	r3, [r2, #0]
 801a37a:	4610      	mov	r0, r2
 801a37c:	695b      	ldr	r3, [r3, #20]
 801a37e:	4798      	blx	r3
 801a380:	4604      	mov	r4, r0
 801a382:	6828      	ldr	r0, [r5, #0]
 801a384:	aa1d      	add	r2, sp, #116	@ 0x74
 801a386:	4621      	mov	r1, r4
 801a388:	6803      	ldr	r3, [r0, #0]
 801a38a:	689f      	ldr	r7, [r3, #8]
 801a38c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a390:	47b8      	blx	r7
 801a392:	901c      	str	r0, [sp, #112]	@ 0x70
 801a394:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a398:	429c      	cmp	r4, r3
 801a39a:	f000 80eb 	beq.w	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a39e:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a3a2:	429c      	cmp	r4, r3
 801a3a4:	f000 80e6 	beq.w	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a3a8:	2c00      	cmp	r4, #0
 801a3aa:	f000 810d 	beq.w	801a5c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a3ae:	2c0a      	cmp	r4, #10
 801a3b0:	d05e      	beq.n	801a470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a3b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a3b4:	b36a      	cbz	r2, 801a412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a3b6:	8894      	ldrh	r4, [r2, #4]
 801a3b8:	f1bb 0f00 	cmp.w	fp, #0
 801a3bc:	d03a      	beq.n	801a434 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a3be:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a3c2:	f1bb 0f01 	cmp.w	fp, #1
 801a3c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a3ca:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801a3ce:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a3d2:	ea49 0903 	orr.w	r9, r9, r3
 801a3d6:	d133      	bne.n	801a440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801a3d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3da:	eba6 0609 	sub.w	r6, r6, r9
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d14d      	bne.n	801a47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a3e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a3e4:	eb09 0306 	add.w	r3, r9, r6
 801a3e8:	4413      	add	r3, r2
 801a3ea:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a3ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a3f0:	4293      	cmp	r3, r2
 801a3f2:	da4e      	bge.n	801a492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a3f4:	e036      	b.n	801a464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a3f6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a3f8:	e79c      	b.n	801a334 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801a3fa:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a3fe:	4659      	mov	r1, fp
 801a400:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a402:	9301      	str	r3, [sp, #4]
 801a404:	ab1d      	add	r3, sp, #116	@ 0x74
 801a406:	9300      	str	r3, [sp, #0]
 801a408:	ab1c      	add	r3, sp, #112	@ 0x70
 801a40a:	f003 f87a 	bl	801d502 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a40e:	4604      	mov	r4, r0
 801a410:	e7c0      	b.n	801a394 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a412:	6828      	ldr	r0, [r5, #0]
 801a414:	6803      	ldr	r3, [r0, #0]
 801a416:	691b      	ldr	r3, [r3, #16]
 801a418:	4798      	blx	r3
 801a41a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a41e:	4298      	cmp	r0, r3
 801a420:	f000 80a8 	beq.w	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a424:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a428:	4298      	cmp	r0, r3
 801a42a:	f000 80a3 	beq.w	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a42e:	f1bb 0f00 	cmp.w	fp, #0
 801a432:	d100      	bne.n	801a436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a434:	444e      	add	r6, r9
 801a436:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a438:	2a00      	cmp	r2, #0
 801a43a:	d1c0      	bne.n	801a3be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a43c:	4691      	mov	r9, r2
 801a43e:	e099      	b.n	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a442:	2b00      	cmp	r3, #0
 801a444:	f000 80c2 	beq.w	801a5cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 801a448:	f1bb 0f00 	cmp.w	fp, #0
 801a44c:	d117      	bne.n	801a47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a44e:	6828      	ldr	r0, [r5, #0]
 801a450:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a452:	6803      	ldr	r3, [r0, #0]
 801a454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a456:	4798      	blx	r3
 801a458:	4406      	add	r6, r0
 801a45a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a45c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a45e:	1af3      	subs	r3, r6, r3
 801a460:	4293      	cmp	r3, r2
 801a462:	dd16      	ble.n	801a492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a464:	2c00      	cmp	r4, #0
 801a466:	f000 80af 	beq.w	801a5c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a46a:	2c0a      	cmp	r4, #10
 801a46c:	f040 809d 	bne.w	801a5aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801a470:	240a      	movs	r4, #10
 801a472:	fab4 f084 	clz	r0, r4
 801a476:	0940      	lsrs	r0, r0, #5
 801a478:	b01f      	add	sp, #124	@ 0x7c
 801a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a47e:	6828      	ldr	r0, [r5, #0]
 801a480:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a482:	6803      	ldr	r3, [r0, #0]
 801a484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a486:	4798      	blx	r3
 801a488:	f1bb 0f01 	cmp.w	fp, #1
 801a48c:	eba6 0600 	sub.w	r6, r6, r0
 801a490:	d0a7      	beq.n	801a3e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a492:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a494:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a496:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a49a:	f9b3 8000 	ldrsh.w	r8, [r3]
 801a49e:	7b43      	ldrb	r3, [r0, #13]
 801a4a0:	4431      	add	r1, r6
 801a4a2:	015b      	lsls	r3, r3, #5
 801a4a4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a4a8:	7983      	ldrb	r3, [r0, #6]
 801a4aa:	4313      	orrs	r3, r2
 801a4ac:	440b      	add	r3, r1
 801a4ae:	4543      	cmp	r3, r8
 801a4b0:	db60      	blt.n	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a4b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4b4:	4299      	cmp	r1, r3
 801a4b6:	da5d      	bge.n	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a4b8:	6828      	ldr	r0, [r5, #0]
 801a4ba:	45b0      	cmp	r8, r6
 801a4bc:	6803      	ldr	r3, [r0, #0]
 801a4be:	bfcc      	ite	gt
 801a4c0:	eba8 0806 	subgt.w	r8, r8, r6
 801a4c4:	f04f 0800 	movle.w	r8, #0
 801a4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a4ca:	bfc8      	it	gt
 801a4cc:	fa1f f888 	uxthgt.w	r8, r8
 801a4d0:	4798      	blx	r3
 801a4d2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a4d4:	7b53      	ldrb	r3, [r2, #13]
 801a4d6:	00d9      	lsls	r1, r3, #3
 801a4d8:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801a4dc:	7a11      	ldrb	r1, [r2, #8]
 801a4de:	4339      	orrs	r1, r7
 801a4e0:	065f      	lsls	r7, r3, #25
 801a4e2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801a4e4:	bf48      	it	mi
 801a4e6:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801a4ea:	4407      	add	r7, r0
 801a4ec:	bf48      	it	mi
 801a4ee:	b209      	sxthmi	r1, r1
 801a4f0:	1a7f      	subs	r7, r7, r1
 801a4f2:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801a4f4:	b2bf      	uxth	r7, r7
 801a4f6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a4fa:	fa0f fa87 	sxth.w	sl, r7
 801a4fe:	4551      	cmp	r1, sl
 801a500:	dd3c      	ble.n	801a57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a502:	011b      	lsls	r3, r3, #4
 801a504:	79d0      	ldrb	r0, [r2, #7]
 801a506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a50a:	4303      	orrs	r3, r0
 801a50c:	449a      	add	sl, r3
 801a50e:	4551      	cmp	r1, sl
 801a510:	dc30      	bgt.n	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a512:	1bcf      	subs	r7, r1, r7
 801a514:	468a      	mov	sl, r1
 801a516:	b23f      	sxth	r7, r7
 801a518:	9219      	str	r2, [sp, #100]	@ 0x64
 801a51a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a51c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a51e:	6828      	ldr	r0, [r5, #0]
 801a520:	2a00      	cmp	r2, #0
 801a522:	d12d      	bne.n	801a580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801a524:	9318      	str	r3, [sp, #96]	@ 0x60
 801a526:	b2bf      	uxth	r7, r7
 801a528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a52a:	6819      	ldr	r1, [r3, #0]
 801a52c:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801a52e:	6801      	ldr	r1, [r0, #0]
 801a530:	9314      	str	r3, [sp, #80]	@ 0x50
 801a532:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801a534:	4788      	blx	r1
 801a536:	79a9      	ldrb	r1, [r5, #6]
 801a538:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a53a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a53c:	7ba9      	ldrb	r1, [r5, #14]
 801a53e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a540:	910a      	str	r1, [sp, #40]	@ 0x28
 801a542:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801a546:	9109      	str	r1, [sp, #36]	@ 0x24
 801a548:	68a9      	ldr	r1, [r5, #8]
 801a54a:	9306      	str	r3, [sp, #24]
 801a54c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a54e:	9205      	str	r2, [sp, #20]
 801a550:	9304      	str	r3, [sp, #16]
 801a552:	f8cd a004 	str.w	sl, [sp, #4]
 801a556:	e9cd 8702 	strd	r8, r7, [sp, #8]
 801a55a:	44b0      	add	r8, r6
 801a55c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801a55e:	fa0f f388 	sxth.w	r3, r8
 801a562:	9300      	str	r3, [sp, #0]
 801a564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a566:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a56a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a56c:	681a      	ldr	r2, [r3, #0]
 801a56e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a570:	685b      	ldr	r3, [r3, #4]
 801a572:	47b8      	blx	r7
 801a574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a576:	3301      	adds	r3, #1
 801a578:	930d      	str	r3, [sp, #52]	@ 0x34
 801a57a:	e6e3      	b.n	801a344 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801a57c:	2700      	movs	r7, #0
 801a57e:	e7cb      	b.n	801a518 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801a580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a582:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801a586:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a588:	f8dc 1000 	ldr.w	r1, [ip]
 801a58c:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801a590:	79aa      	ldrb	r2, [r5, #6]
 801a592:	9203      	str	r2, [sp, #12]
 801a594:	7baa      	ldrb	r2, [r5, #14]
 801a596:	9202      	str	r2, [sp, #8]
 801a598:	68aa      	ldr	r2, [r5, #8]
 801a59a:	e9cd 0200 	strd	r0, r2, [sp]
 801a59e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a5a0:	4660      	mov	r0, ip
 801a5a2:	688f      	ldr	r7, [r1, #8]
 801a5a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a5a6:	47b8      	blx	r7
 801a5a8:	e7e4      	b.n	801a574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a5aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a5ac:	3501      	adds	r5, #1
 801a5ae:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a5b0:	429d      	cmp	r5, r3
 801a5b2:	f6bf af5e 	bge.w	801a472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a5b6:	4659      	mov	r1, fp
 801a5b8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a5ba:	f7f6 ff9f 	bl	80114fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a5be:	4604      	mov	r4, r0
 801a5c0:	b110      	cbz	r0, 801a5c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a5c2:	280a      	cmp	r0, #10
 801a5c4:	d1f2      	bne.n	801a5ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801a5c6:	e753      	b.n	801a470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a5c8:	2400      	movs	r4, #0
 801a5ca:	e752      	b.n	801a472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a5cc:	f1bb 0f00 	cmp.w	fp, #0
 801a5d0:	f43f af43 	beq.w	801a45a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a5d4:	e75d      	b.n	801a492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801a5d6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a5d6:	b530      	push	{r4, r5, lr}
 801a5d8:	8ac4      	ldrh	r4, [r0, #22]
 801a5da:	8b45      	ldrh	r5, [r0, #26]
 801a5dc:	8343      	strh	r3, [r0, #26]
 801a5de:	442c      	add	r4, r5
 801a5e0:	1ae4      	subs	r4, r4, r3
 801a5e2:	8b83      	ldrh	r3, [r0, #28]
 801a5e4:	82c4      	strh	r4, [r0, #22]
 801a5e6:	8b04      	ldrh	r4, [r0, #24]
 801a5e8:	4422      	add	r2, r4
 801a5ea:	440c      	add	r4, r1
 801a5ec:	1a59      	subs	r1, r3, r1
 801a5ee:	83c2      	strh	r2, [r0, #30]
 801a5f0:	8304      	strh	r4, [r0, #24]
 801a5f2:	8381      	strh	r1, [r0, #28]
 801a5f4:	bd30      	pop	{r4, r5, pc}

0801a5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801a5f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	8a47      	ldrh	r7, [r0, #18]
 801a5fe:	68c0      	ldr	r0, [r0, #12]
 801a600:	b085      	sub	sp, #20
 801a602:	6803      	ldr	r3, [r0, #0]
 801a604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a606:	4798      	blx	r3
 801a608:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801a60c:	7a63      	ldrb	r3, [r4, #9]
 801a60e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a612:	3b01      	subs	r3, #1
 801a614:	42b7      	cmp	r7, r6
 801a616:	bfac      	ite	ge
 801a618:	f04f 0900 	movge.w	r9, #0
 801a61c:	f04f 0901 	movlt.w	r9, #1
 801a620:	2b05      	cmp	r3, #5
 801a622:	d804      	bhi.n	801a62e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801a624:	e8df f003 	tbb	[pc, r3]
 801a628:	470f0854 	.word	0x470f0854
 801a62c:	4c4c      	.short	0x4c4c
 801a62e:	2500      	movs	r5, #0
 801a630:	46a9      	mov	r9, r5
 801a632:	462e      	mov	r6, r5
 801a634:	462f      	mov	r7, r5
 801a636:	e00e      	b.n	801a656 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a638:	42b7      	cmp	r7, r6
 801a63a:	f04f 0500 	mov.w	r5, #0
 801a63e:	bfb4      	ite	lt
 801a640:	2600      	movlt	r6, #0
 801a642:	2601      	movge	r6, #1
 801a644:	e7f6      	b.n	801a634 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a646:	42b7      	cmp	r7, r6
 801a648:	464d      	mov	r5, r9
 801a64a:	f04f 0900 	mov.w	r9, #0
 801a64e:	bfb4      	ite	lt
 801a650:	2600      	movlt	r6, #0
 801a652:	2601      	movge	r6, #1
 801a654:	464f      	mov	r7, r9
 801a656:	f04f 0800 	mov.w	r8, #0
 801a65a:	f8a4 8016 	strh.w	r8, [r4, #22]
 801a65e:	f8a4 8018 	strh.w	r8, [r4, #24]
 801a662:	f8cd 8004 	str.w	r8, [sp, #4]
 801a666:	2300      	movs	r3, #0
 801a668:	9303      	str	r3, [sp, #12]
 801a66a:	8823      	ldrh	r3, [r4, #0]
 801a66c:	2b20      	cmp	r3, #32
 801a66e:	d033      	beq.n	801a6d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801a670:	f242 010b 	movw	r1, #8203	@ 0x200b
 801a674:	1a5a      	subs	r2, r3, r1
 801a676:	f1d2 0a00 	rsbs	sl, r2, #0
 801a67a:	eb4a 0a02 	adc.w	sl, sl, r2
 801a67e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a682:	4293      	cmp	r3, r2
 801a684:	d008      	beq.n	801a698 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a686:	428b      	cmp	r3, r1
 801a688:	9a01      	ldr	r2, [sp, #4]
 801a68a:	bf0e      	itee	eq
 801a68c:	f04f 0a01 	moveq.w	sl, #1
 801a690:	461a      	movne	r2, r3
 801a692:	f04f 0a00 	movne.w	sl, #0
 801a696:	9201      	str	r2, [sp, #4]
 801a698:	ab03      	add	r3, sp, #12
 801a69a:	68e2      	ldr	r2, [r4, #12]
 801a69c:	7a21      	ldrb	r1, [r4, #8]
 801a69e:	6860      	ldr	r0, [r4, #4]
 801a6a0:	f002 fee6 	bl	801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a6a4:	8020      	strh	r0, [r4, #0]
 801a6a6:	b9d8      	cbnz	r0, 801a6e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801a6a8:	8ba2      	ldrh	r2, [r4, #28]
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	4611      	mov	r1, r2
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f7ff ff91 	bl	801a5d6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a6b4:	e06e      	b.n	801a794 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a6b6:	2500      	movs	r5, #0
 801a6b8:	2701      	movs	r7, #1
 801a6ba:	46a9      	mov	r9, r5
 801a6bc:	462e      	mov	r6, r5
 801a6be:	e7ca      	b.n	801a656 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a6c0:	42b7      	cmp	r7, r6
 801a6c2:	f04f 0500 	mov.w	r5, #0
 801a6c6:	bfb4      	ite	lt
 801a6c8:	2700      	movlt	r7, #0
 801a6ca:	2701      	movge	r7, #1
 801a6cc:	462e      	mov	r6, r5
 801a6ce:	e7c2      	b.n	801a656 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a6d0:	2500      	movs	r5, #0
 801a6d2:	2601      	movs	r6, #1
 801a6d4:	46a9      	mov	r9, r5
 801a6d6:	e7ad      	b.n	801a634 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a6d8:	9301      	str	r3, [sp, #4]
 801a6da:	f04f 0a01 	mov.w	sl, #1
 801a6de:	e7db      	b.n	801a698 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a6e0:	8b63      	ldrh	r3, [r4, #26]
 801a6e2:	280a      	cmp	r0, #10
 801a6e4:	f103 0301 	add.w	r3, r3, #1
 801a6e8:	8363      	strh	r3, [r4, #26]
 801a6ea:	d0dd      	beq.n	801a6a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801a6ec:	9a03      	ldr	r2, [sp, #12]
 801a6ee:	bb62      	cbnz	r2, 801a74a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801a6f0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a6f4:	4298      	cmp	r0, r3
 801a6f6:	d003      	beq.n	801a700 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a6f8:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a6fc:	4298      	cmp	r0, r3
 801a6fe:	d1b2      	bne.n	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a700:	8823      	ldrh	r3, [r4, #0]
 801a702:	8ba1      	ldrh	r1, [r4, #28]
 801a704:	2b20      	cmp	r3, #32
 801a706:	d003      	beq.n	801a710 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801a708:	f242 000b 	movw	r0, #8203	@ 0x200b
 801a70c:	4283      	cmp	r3, r0
 801a70e:	d131      	bne.n	801a774 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801a710:	f1ba 0f00 	cmp.w	sl, #0
 801a714:	bf0a      	itet	eq
 801a716:	4688      	moveq	r8, r1
 801a718:	4650      	movne	r0, sl
 801a71a:	2001      	moveq	r0, #1
 801a71c:	440a      	add	r2, r1
 801a71e:	8b23      	ldrh	r3, [r4, #24]
 801a720:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a724:	b292      	uxth	r2, r2
 801a726:	83a2      	strh	r2, [r4, #28]
 801a728:	4413      	add	r3, r2
 801a72a:	f1b9 0f00 	cmp.w	r9, #0
 801a72e:	d102      	bne.n	801a736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801a730:	2d00      	cmp	r5, #0
 801a732:	d042      	beq.n	801a7ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801a734:	b300      	cbz	r0, 801a778 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801a736:	8c21      	ldrh	r1, [r4, #32]
 801a738:	4419      	add	r1, r3
 801a73a:	458c      	cmp	ip, r1
 801a73c:	da37      	bge.n	801a7ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a73e:	8ae1      	ldrh	r1, [r4, #22]
 801a740:	2900      	cmp	r1, #0
 801a742:	d034      	beq.n	801a7ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a744:	4563      	cmp	r3, ip
 801a746:	dd8e      	ble.n	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a748:	e01d      	b.n	801a786 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801a74a:	8893      	ldrh	r3, [r2, #4]
 801a74c:	9901      	ldr	r1, [sp, #4]
 801a74e:	8023      	strh	r3, [r4, #0]
 801a750:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801a754:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801a758:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801a75c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a760:	ea4b 0b00 	orr.w	fp, fp, r0
 801a764:	68e0      	ldr	r0, [r4, #12]
 801a766:	6803      	ldr	r3, [r0, #0]
 801a768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a76a:	4798      	blx	r3
 801a76c:	eb0b 0200 	add.w	r2, fp, r0
 801a770:	b292      	uxth	r2, r2
 801a772:	e7c5      	b.n	801a700 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a774:	2000      	movs	r0, #0
 801a776:	e7d1      	b.n	801a71c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801a778:	4563      	cmp	r3, ip
 801a77a:	f77f af74 	ble.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a77e:	8ae3      	ldrh	r3, [r4, #22]
 801a780:	2b00      	cmp	r3, #0
 801a782:	f43f af70 	beq.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a786:	2301      	movs	r3, #1
 801a788:	8c22      	ldrh	r2, [r4, #32]
 801a78a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801a78e:	8be3      	ldrh	r3, [r4, #30]
 801a790:	4413      	add	r3, r2
 801a792:	83e3      	strh	r3, [r4, #30]
 801a794:	68e0      	ldr	r0, [r4, #12]
 801a796:	6803      	ldr	r3, [r0, #0]
 801a798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a79a:	4798      	blx	r3
 801a79c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a7a0:	4418      	add	r0, r3
 801a7a2:	8a63      	ldrh	r3, [r4, #18]
 801a7a4:	1a18      	subs	r0, r3, r0
 801a7a6:	8260      	strh	r0, [r4, #18]
 801a7a8:	b005      	add	sp, #20
 801a7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	4611      	mov	r1, r2
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	f7ff ff0f 	bl	801a5d6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a7b8:	e755      	b.n	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7ba:	4563      	cmp	r3, ip
 801a7bc:	dd14      	ble.n	801a7e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a7be:	b117      	cbz	r7, 801a7c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a7c0:	2301      	movs	r3, #1
 801a7c2:	460a      	mov	r2, r1
 801a7c4:	e772      	b.n	801a6ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a7c6:	2e00      	cmp	r6, #0
 801a7c8:	f43f af4d 	beq.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7cc:	2800      	cmp	r0, #0
 801a7ce:	f47f af4a 	bne.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7d2:	f1ba 0f00 	cmp.w	sl, #0
 801a7d6:	d002      	beq.n	801a7de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a7d8:	2301      	movs	r3, #1
 801a7da:	4642      	mov	r2, r8
 801a7dc:	e767      	b.n	801a6ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a7de:	8ae3      	ldrh	r3, [r4, #22]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	f43f af40 	beq.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7e6:	e7d5      	b.n	801a794 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a7e8:	2800      	cmp	r0, #0
 801a7ea:	f47f af3c 	bne.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7ee:	f1ba 0f00 	cmp.w	sl, #0
 801a7f2:	f43f af38 	beq.w	801a666 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7f6:	2301      	movs	r3, #1
 801a7f8:	4642      	mov	r2, r8
 801a7fa:	e7da      	b.n	801a7b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a7fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7fe:	4605      	mov	r5, r0
 801a800:	b08f      	sub	sp, #60	@ 0x3c
 801a802:	4617      	mov	r7, r2
 801a804:	461c      	mov	r4, r3
 801a806:	460e      	mov	r6, r1
 801a808:	b1d1      	cbz	r1, 801a840 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	4620      	mov	r0, r4
 801a80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a810:	4798      	blx	r3
 801a812:	4240      	negs	r0, r0
 801a814:	9603      	str	r6, [sp, #12]
 801a816:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a81a:	b200      	sxth	r0, r0
 801a81c:	9700      	str	r7, [sp, #0]
 801a81e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a822:	4629      	mov	r1, r5
 801a824:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a828:	2401      	movs	r4, #1
 801a82a:	a805      	add	r0, sp, #20
 801a82c:	f7ff fcaa 	bl	801a184 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a830:	a805      	add	r0, sp, #20
 801a832:	f7ff fee0 	bl	801a5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a836:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a83a:	b163      	cbz	r3, 801a856 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a83c:	3401      	adds	r4, #1
 801a83e:	e7f7      	b.n	801a830 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a840:	2401      	movs	r4, #1
 801a842:	f002 fee1 	bl	801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a846:	280a      	cmp	r0, #10
 801a848:	4628      	mov	r0, r5
 801a84a:	bf08      	it	eq
 801a84c:	3401      	addeq	r4, #1
 801a84e:	f002 fedb 	bl	801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a852:	2800      	cmp	r0, #0
 801a854:	d1f7      	bne.n	801a846 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a856:	b2a0      	uxth	r0, r4
 801a858:	b00f      	add	sp, #60	@ 0x3c
 801a85a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a85c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a860:	b0e3      	sub	sp, #396	@ 0x18c
 801a862:	461c      	mov	r4, r3
 801a864:	4683      	mov	fp, r0
 801a866:	4688      	mov	r8, r1
 801a868:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	f000 8112 	beq.w	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a870:	6823      	ldr	r3, [r4, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	f000 810e 	beq.w	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a878:	7ba3      	ldrb	r3, [r4, #14]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	f000 810a 	beq.w	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a880:	ad0a      	add	r5, sp, #40	@ 0x28
 801a882:	6810      	ldr	r0, [r2, #0]
 801a884:	6851      	ldr	r1, [r2, #4]
 801a886:	462b      	mov	r3, r5
 801a888:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a88c:	c303      	stmia	r3!, {r0, r1}
 801a88e:	2100      	movs	r1, #0
 801a890:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a894:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a898:	4628      	mov	r0, r5
 801a89a:	910c      	str	r1, [sp, #48]	@ 0x30
 801a89c:	a90c      	add	r1, sp, #48	@ 0x30
 801a89e:	79a2      	ldrb	r2, [r4, #6]
 801a8a0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a8a4:	f7ff fced 	bl	801a282 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a8a8:	a90c      	add	r1, sp, #48	@ 0x30
 801a8aa:	79a2      	ldrb	r2, [r4, #6]
 801a8ac:	4608      	mov	r0, r1
 801a8ae:	f7ff fce8 	bl	801a282 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a8b2:	a817      	add	r0, sp, #92	@ 0x5c
 801a8b4:	f002 fa4e 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801a8b8:	6820      	ldr	r0, [r4, #0]
 801a8ba:	6803      	ldr	r3, [r0, #0]
 801a8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8be:	4798      	blx	r3
 801a8c0:	4606      	mov	r6, r0
 801a8c2:	6820      	ldr	r0, [r4, #0]
 801a8c4:	6803      	ldr	r3, [r0, #0]
 801a8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a8c8:	4798      	blx	r3
 801a8ca:	4633      	mov	r3, r6
 801a8cc:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a8ce:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a8d0:	9000      	str	r0, [sp, #0]
 801a8d2:	a817      	add	r0, sp, #92	@ 0x5c
 801a8d4:	f002 fa99 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a8d8:	6820      	ldr	r0, [r4, #0]
 801a8da:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a8de:	6803      	ldr	r3, [r0, #0]
 801a8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a8e2:	4798      	blx	r3
 801a8e4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a8e8:	6823      	ldr	r3, [r4, #0]
 801a8ea:	4607      	mov	r7, r0
 801a8ec:	4406      	add	r6, r0
 801a8ee:	a830      	add	r0, sp, #192	@ 0xc0
 801a8f0:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a8f4:	f002 fa2e 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801a8f8:	7c23      	ldrb	r3, [r4, #16]
 801a8fa:	b17b      	cbz	r3, 801a91c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a8fc:	6820      	ldr	r0, [r4, #0]
 801a8fe:	6803      	ldr	r3, [r0, #0]
 801a900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a902:	4798      	blx	r3
 801a904:	9009      	str	r0, [sp, #36]	@ 0x24
 801a906:	6820      	ldr	r0, [r4, #0]
 801a908:	6802      	ldr	r2, [r0, #0]
 801a90a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801a90c:	4790      	blx	r2
 801a90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a910:	9000      	str	r0, [sp, #0]
 801a912:	a830      	add	r0, sp, #192	@ 0xc0
 801a914:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a916:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a918:	f002 fa77 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a91c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a920:	a80e      	add	r0, sp, #56	@ 0x38
 801a922:	7be2      	ldrb	r2, [r4, #15]
 801a924:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a928:	1a8a      	subs	r2, r1, r2
 801a92a:	7c21      	ldrb	r1, [r4, #16]
 801a92c:	9103      	str	r1, [sp, #12]
 801a92e:	b292      	uxth	r2, r2
 801a930:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a934:	9102      	str	r1, [sp, #8]
 801a936:	6821      	ldr	r1, [r4, #0]
 801a938:	9101      	str	r1, [sp, #4]
 801a93a:	7961      	ldrb	r1, [r4, #5]
 801a93c:	9100      	str	r1, [sp, #0]
 801a93e:	a930      	add	r1, sp, #192	@ 0xc0
 801a940:	f7ff fc20 	bl	801a184 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a944:	2e00      	cmp	r6, #0
 801a946:	dc5b      	bgt.n	801aa00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a948:	af17      	add	r7, sp, #92	@ 0x5c
 801a94a:	f04f 0900 	mov.w	r9, #0
 801a94e:	7c23      	ldrb	r3, [r4, #16]
 801a950:	2b00      	cmp	r3, #0
 801a952:	f000 80b1 	beq.w	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a956:	a80e      	add	r0, sp, #56	@ 0x38
 801a958:	f7ff fe4d 	bl	801a5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a95c:	f1ba 0f00 	cmp.w	sl, #0
 801a960:	f000 80a5 	beq.w	801aaae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a964:	7c23      	ldrb	r3, [r4, #16]
 801a966:	2264      	movs	r2, #100	@ 0x64
 801a968:	4639      	mov	r1, r7
 801a96a:	a849      	add	r0, sp, #292	@ 0x124
 801a96c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a96e:	f013 fc8a 	bl	802e286 <memcpy>
 801a972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a974:	2b00      	cmp	r3, #0
 801a976:	f000 80a7 	beq.w	801aac8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a97a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801a97e:	7922      	ldrb	r2, [r4, #4]
 801a980:	2a01      	cmp	r2, #1
 801a982:	f040 808a 	bne.w	801aa9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a986:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801a98a:	1ac0      	subs	r0, r0, r3
 801a98c:	2302      	movs	r3, #2
 801a98e:	fb90 f0f3 	sdiv	r0, r0, r3
 801a992:	b200      	sxth	r0, r0
 801a994:	7c23      	ldrb	r3, [r4, #16]
 801a996:	2b00      	cmp	r3, #0
 801a998:	f000 808b 	beq.w	801aab2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a99c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801a9a0:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801a9a4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a9a8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a9ac:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a9b0:	2100      	movs	r1, #0
 801a9b2:	4410      	add	r0, r2
 801a9b4:	4642      	mov	r2, r8
 801a9b6:	b200      	sxth	r0, r0
 801a9b8:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a9bc:	9000      	str	r0, [sp, #0]
 801a9be:	4658      	mov	r0, fp
 801a9c0:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a9c4:	f7ff fc8e 	bl	801a2e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a9c8:	2800      	cmp	r0, #0
 801a9ca:	d163      	bne.n	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a9cc:	b2b2      	uxth	r2, r6
 801a9ce:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a9d2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a9d6:	4413      	add	r3, r2
 801a9d8:	1a8a      	subs	r2, r1, r2
 801a9da:	b21b      	sxth	r3, r3
 801a9dc:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a9e0:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801a9e4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a9e8:	2a00      	cmp	r2, #0
 801a9ea:	d153      	bne.n	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a9ec:	6822      	ldr	r2, [r4, #0]
 801a9ee:	8869      	ldrh	r1, [r5, #2]
 801a9f0:	7a12      	ldrb	r2, [r2, #8]
 801a9f2:	1a9b      	subs	r3, r3, r2
 801a9f4:	88ea      	ldrh	r2, [r5, #6]
 801a9f6:	440a      	add	r2, r1
 801a9f8:	b212      	sxth	r2, r2
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	dda7      	ble.n	801a94e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a9fe:	e049      	b.n	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa00:	7c23      	ldrb	r3, [r4, #16]
 801aa02:	444f      	add	r7, r9
 801aa04:	b1c3      	cbz	r3, 801aa38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801aa06:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801aa0a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801aa0e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aa12:	443b      	add	r3, r7
 801aa14:	4293      	cmp	r3, r2
 801aa16:	da97      	bge.n	801a948 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801aa18:	a80e      	add	r0, sp, #56	@ 0x38
 801aa1a:	f7ff fdec 	bl	801a5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801aa1e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801aa22:	3b01      	subs	r3, #1
 801aa24:	b29b      	uxth	r3, r3
 801aa26:	454b      	cmp	r3, r9
 801aa28:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa2a:	d021      	beq.n	801aa70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801aa2c:	7961      	ldrb	r1, [r4, #5]
 801aa2e:	a817      	add	r0, sp, #92	@ 0x5c
 801aa30:	f7f6 fd64 	bl	80114fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aa34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa36:	e7f4      	b.n	801aa22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801aa38:	fa1f f986 	uxth.w	r9, r6
 801aa3c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801aa40:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aa44:	443b      	add	r3, r7
 801aa46:	4293      	cmp	r3, r2
 801aa48:	f6bf af7e 	bge.w	801a948 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801aa4c:	a817      	add	r0, sp, #92	@ 0x5c
 801aa4e:	f002 fddb 	bl	801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa52:	b1f8      	cbz	r0, 801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa54:	280a      	cmp	r0, #10
 801aa56:	d1f1      	bne.n	801aa3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801aa58:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801aa5c:	444b      	add	r3, r9
 801aa5e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801aa62:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801aa66:	eba3 0309 	sub.w	r3, r3, r9
 801aa6a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801aa6e:	e7e5      	b.n	801aa3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801aa70:	b2b3      	uxth	r3, r6
 801aa72:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801aa76:	441a      	add	r2, r3
 801aa78:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801aa7c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801aa80:	1ad3      	subs	r3, r2, r3
 801aa82:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801aa86:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801aa8a:	b11b      	cbz	r3, 801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa8c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d0ba      	beq.n	801aa0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801aa94:	b063      	add	sp, #396	@ 0x18c
 801aa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa9a:	2a02      	cmp	r2, #2
 801aa9c:	d105      	bne.n	801aaaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801aa9e:	7be2      	ldrb	r2, [r4, #15]
 801aaa0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801aaa4:	1a80      	subs	r0, r0, r2
 801aaa6:	1ac0      	subs	r0, r0, r3
 801aaa8:	e773      	b.n	801a992 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801aaaa:	2000      	movs	r0, #0
 801aaac:	e772      	b.n	801a994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801aaae:	7be0      	ldrb	r0, [r4, #15]
 801aab0:	e770      	b.n	801a994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801aab2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801aab6:	e773      	b.n	801a9a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801aab8:	f1ba 0f00 	cmp.w	sl, #0
 801aabc:	d0f7      	beq.n	801aaae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801aabe:	2264      	movs	r2, #100	@ 0x64
 801aac0:	4639      	mov	r1, r7
 801aac2:	a849      	add	r0, sp, #292	@ 0x124
 801aac4:	f013 fbdf 	bl	802e286 <memcpy>
 801aac8:	2300      	movs	r3, #0
 801aaca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801aace:	6821      	ldr	r1, [r4, #0]
 801aad0:	a849      	add	r0, sp, #292	@ 0x124
 801aad2:	f7ff fb9a 	bl	801a20a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801aad6:	b203      	sxth	r3, r0
 801aad8:	e751      	b.n	801a97e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801aada <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801aada:	2b03      	cmp	r3, #3
 801aadc:	d818      	bhi.n	801ab10 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801aade:	e8df f003 	tbb	[pc, r3]
 801aae2:	0602      	.short	0x0602
 801aae4:	130d      	.short	0x130d
 801aae6:	f9b0 2000 	ldrsh.w	r2, [r0]
 801aaea:	1850      	adds	r0, r2, r1
 801aaec:	4770      	bx	lr
 801aaee:	8803      	ldrh	r3, [r0, #0]
 801aaf0:	8880      	ldrh	r0, [r0, #4]
 801aaf2:	4418      	add	r0, r3
 801aaf4:	b200      	sxth	r0, r0
 801aaf6:	1a80      	subs	r0, r0, r2
 801aaf8:	3801      	subs	r0, #1
 801aafa:	4770      	bx	lr
 801aafc:	8803      	ldrh	r3, [r0, #0]
 801aafe:	8880      	ldrh	r0, [r0, #4]
 801ab00:	4418      	add	r0, r3
 801ab02:	b200      	sxth	r0, r0
 801ab04:	1a40      	subs	r0, r0, r1
 801ab06:	e7f7      	b.n	801aaf8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ab08:	f9b0 0000 	ldrsh.w	r0, [r0]
 801ab0c:	4410      	add	r0, r2
 801ab0e:	4770      	bx	lr
 801ab10:	2000      	movs	r0, #0
 801ab12:	4770      	bx	lr

0801ab14 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ab14:	2b03      	cmp	r3, #3
 801ab16:	d817      	bhi.n	801ab48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801ab18:	e8df f003 	tbb	[pc, r3]
 801ab1c:	10090602 	.word	0x10090602
 801ab20:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ab24:	1850      	adds	r0, r2, r1
 801ab26:	4770      	bx	lr
 801ab28:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ab2c:	e7fa      	b.n	801ab24 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801ab2e:	8843      	ldrh	r3, [r0, #2]
 801ab30:	88c0      	ldrh	r0, [r0, #6]
 801ab32:	4418      	add	r0, r3
 801ab34:	b200      	sxth	r0, r0
 801ab36:	1a80      	subs	r0, r0, r2
 801ab38:	3801      	subs	r0, #1
 801ab3a:	4770      	bx	lr
 801ab3c:	8843      	ldrh	r3, [r0, #2]
 801ab3e:	88c0      	ldrh	r0, [r0, #6]
 801ab40:	4418      	add	r0, r3
 801ab42:	b200      	sxth	r0, r0
 801ab44:	1a40      	subs	r0, r0, r1
 801ab46:	e7f7      	b.n	801ab38 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ab48:	2000      	movs	r0, #0
 801ab4a:	4770      	bx	lr

0801ab4c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ab4c:	4b01      	ldr	r3, [pc, #4]	@ (801ab54 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ab4e:	2200      	movs	r2, #0
 801ab50:	601a      	str	r2, [r3, #0]
 801ab52:	4770      	bx	lr
 801ab54:	200122d4 	.word	0x200122d4

0801ab58 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ab58:	4603      	mov	r3, r0
 801ab5a:	b1c8      	cbz	r0, 801ab90 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ab5c:	0c02      	lsrs	r2, r0, #16
 801ab5e:	0412      	lsls	r2, r2, #16
 801ab60:	b9a2      	cbnz	r2, 801ab8c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ab62:	0403      	lsls	r3, r0, #16
 801ab64:	2010      	movs	r0, #16
 801ab66:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801ab6a:	bf04      	itt	eq
 801ab6c:	021b      	lsleq	r3, r3, #8
 801ab6e:	3008      	addeq	r0, #8
 801ab70:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801ab74:	bf04      	itt	eq
 801ab76:	011b      	lsleq	r3, r3, #4
 801ab78:	3004      	addeq	r0, #4
 801ab7a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801ab7e:	bf04      	itt	eq
 801ab80:	009b      	lsleq	r3, r3, #2
 801ab82:	3002      	addeq	r0, #2
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	db04      	blt.n	801ab92 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ab88:	3001      	adds	r0, #1
 801ab8a:	4770      	bx	lr
 801ab8c:	2000      	movs	r0, #0
 801ab8e:	e7ea      	b.n	801ab66 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ab90:	2020      	movs	r0, #32
 801ab92:	4770      	bx	lr

0801ab94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab98:	b087      	sub	sp, #28
 801ab9a:	460d      	mov	r5, r1
 801ab9c:	4616      	mov	r6, r2
 801ab9e:	4698      	mov	r8, r3
 801aba0:	4601      	mov	r1, r0
 801aba2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801aba6:	b120      	cbz	r0, 801abb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801aba8:	b11a      	cbz	r2, 801abb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801abaa:	2d1f      	cmp	r5, #31
 801abac:	d801      	bhi.n	801abb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801abae:	2b1f      	cmp	r3, #31
 801abb0:	d904      	bls.n	801abbc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801abb2:	2000      	movs	r0, #0
 801abb4:	6038      	str	r0, [r7, #0]
 801abb6:	b007      	add	sp, #28
 801abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abbc:	b97d      	cbnz	r5, 801abde <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801abbe:	b143      	cbz	r3, 801abd2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801abc0:	4602      	mov	r2, r0
 801abc2:	462b      	mov	r3, r5
 801abc4:	4641      	mov	r1, r8
 801abc6:	4630      	mov	r0, r6
 801abc8:	e9cd 4700 	strd	r4, r7, [sp]
 801abcc:	f7ff ffe2 	bl	801ab94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801abd0:	e7f1      	b.n	801abb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801abd2:	f04f 33ff 	mov.w	r3, #4294967295
 801abd6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801abda:	603b      	str	r3, [r7, #0]
 801abdc:	e7eb      	b.n	801abb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801abde:	fa32 fa05 	lsrs.w	sl, r2, r5
 801abe2:	d106      	bne.n	801abf2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801abe4:	4346      	muls	r6, r0
 801abe6:	fbb6 f0f4 	udiv	r0, r6, r4
 801abea:	fb04 6610 	mls	r6, r4, r0, r6
 801abee:	603e      	str	r6, [r7, #0]
 801abf0:	e7e1      	b.n	801abb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801abf2:	2201      	movs	r2, #1
 801abf4:	fa00 fb05 	lsl.w	fp, r0, r5
 801abf8:	40aa      	lsls	r2, r5
 801abfa:	fbbb f9f4 	udiv	r9, fp, r4
 801abfe:	3a01      	subs	r2, #1
 801ac00:	fb0a f309 	mul.w	r3, sl, r9
 801ac04:	fb04 b919 	mls	r9, r4, r9, fp
 801ac08:	4016      	ands	r6, r2
 801ac0a:	9303      	str	r3, [sp, #12]
 801ac0c:	4630      	mov	r0, r6
 801ac0e:	f7ff ffa3 	bl	801ab58 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ac12:	462b      	mov	r3, r5
 801ac14:	460a      	mov	r2, r1
 801ac16:	4601      	mov	r1, r0
 801ac18:	4630      	mov	r0, r6
 801ac1a:	e9cd 4700 	strd	r4, r7, [sp]
 801ac1e:	f7ff ffb9 	bl	801ab94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ac22:	4606      	mov	r6, r0
 801ac24:	4648      	mov	r0, r9
 801ac26:	eb05 0108 	add.w	r1, r5, r8
 801ac2a:	f7ff ff95 	bl	801ab58 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ac2e:	ab05      	add	r3, sp, #20
 801ac30:	464a      	mov	r2, r9
 801ac32:	e9cd 4300 	strd	r4, r3, [sp]
 801ac36:	4603      	mov	r3, r0
 801ac38:	4650      	mov	r0, sl
 801ac3a:	f7ff ffab 	bl	801ab94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ac3e:	6839      	ldr	r1, [r7, #0]
 801ac40:	9a05      	ldr	r2, [sp, #20]
 801ac42:	9b03      	ldr	r3, [sp, #12]
 801ac44:	4411      	add	r1, r2
 801ac46:	fbb1 f2f4 	udiv	r2, r1, r4
 801ac4a:	18d3      	adds	r3, r2, r3
 801ac4c:	fb04 1412 	mls	r4, r4, r2, r1
 801ac50:	441e      	add	r6, r3
 801ac52:	603c      	str	r4, [r7, #0]
 801ac54:	4430      	add	r0, r6
 801ac56:	e7ae      	b.n	801abb6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801ac58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ac58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac5c:	b085      	sub	sp, #20
 801ac5e:	f1b0 0900 	subs.w	r9, r0, #0
 801ac62:	461d      	mov	r5, r3
 801ac64:	4617      	mov	r7, r2
 801ac66:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ac68:	bfbb      	ittet	lt
 801ac6a:	f1c9 0900 	rsblt	r9, r9, #0
 801ac6e:	f04f 36ff 	movlt.w	r6, #4294967295
 801ac72:	2601      	movge	r6, #1
 801ac74:	6823      	ldrlt	r3, [r4, #0]
 801ac76:	bfbc      	itt	lt
 801ac78:	425b      	neglt	r3, r3
 801ac7a:	6023      	strlt	r3, [r4, #0]
 801ac7c:	2a00      	cmp	r2, #0
 801ac7e:	da04      	bge.n	801ac8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ac80:	6823      	ldr	r3, [r4, #0]
 801ac82:	4257      	negs	r7, r2
 801ac84:	4276      	negs	r6, r6
 801ac86:	425b      	negs	r3, r3
 801ac88:	6023      	str	r3, [r4, #0]
 801ac8a:	2d00      	cmp	r5, #0
 801ac8c:	4638      	mov	r0, r7
 801ac8e:	bfba      	itte	lt
 801ac90:	426d      	neglt	r5, r5
 801ac92:	f04f 38ff 	movlt.w	r8, #4294967295
 801ac96:	f04f 0801 	movge.w	r8, #1
 801ac9a:	f7ff ff5d 	bl	801ab58 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ac9e:	ab03      	add	r3, sp, #12
 801aca0:	463a      	mov	r2, r7
 801aca2:	e9cd 5300 	strd	r5, r3, [sp]
 801aca6:	4603      	mov	r3, r0
 801aca8:	4648      	mov	r0, r9
 801acaa:	f7ff ff73 	bl	801ab94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801acae:	6823      	ldr	r3, [r4, #0]
 801acb0:	9a03      	ldr	r2, [sp, #12]
 801acb2:	4546      	cmp	r6, r8
 801acb4:	441a      	add	r2, r3
 801acb6:	fb92 f3f5 	sdiv	r3, r2, r5
 801acba:	4418      	add	r0, r3
 801acbc:	fb05 2313 	mls	r3, r5, r3, r2
 801acc0:	bf18      	it	ne
 801acc2:	4240      	negne	r0, r0
 801acc4:	1c72      	adds	r2, r6, #1
 801acc6:	6023      	str	r3, [r4, #0]
 801acc8:	d105      	bne.n	801acd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801acca:	2b00      	cmp	r3, #0
 801accc:	f1c3 0200 	rsb	r2, r3, #0
 801acd0:	db0b      	blt.n	801acea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801acd2:	6022      	str	r2, [r4, #0]
 801acd4:	e006      	b.n	801ace4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801acd6:	2e01      	cmp	r6, #1
 801acd8:	d104      	bne.n	801ace4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801acda:	2b00      	cmp	r3, #0
 801acdc:	da02      	bge.n	801ace4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801acde:	442b      	add	r3, r5
 801ace0:	3801      	subs	r0, #1
 801ace2:	6023      	str	r3, [r4, #0]
 801ace4:	b005      	add	sp, #20
 801ace6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acea:	3801      	subs	r0, #1
 801acec:	1b52      	subs	r2, r2, r5
 801acee:	e7f0      	b.n	801acd2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801acf0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801acf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801acf4:	4c1c      	ldr	r4, [pc, #112]	@ (801ad68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801acf6:	4605      	mov	r5, r0
 801acf8:	6807      	ldr	r7, [r0, #0]
 801acfa:	69a3      	ldr	r3, [r4, #24]
 801acfc:	b92b      	cbnz	r3, 801ad0a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801acfe:	6840      	ldr	r0, [r0, #4]
 801ad00:	e9c5 7000 	strd	r7, r0, [r5]
 801ad04:	b004      	add	sp, #16
 801ad06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad0a:	f04f 0802 	mov.w	r8, #2
 801ad0e:	68a2      	ldr	r2, [r4, #8]
 801ad10:	ae04      	add	r6, sp, #16
 801ad12:	6820      	ldr	r0, [r4, #0]
 801ad14:	fb93 f1f8 	sdiv	r1, r3, r8
 801ad18:	440a      	add	r2, r1
 801ad1a:	69e1      	ldr	r1, [r4, #28]
 801ad1c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ad20:	463a      	mov	r2, r7
 801ad22:	9600      	str	r6, [sp, #0]
 801ad24:	f7ff ff98 	bl	801ac58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad28:	69a3      	ldr	r3, [r4, #24]
 801ad2a:	4607      	mov	r7, r0
 801ad2c:	686a      	ldr	r2, [r5, #4]
 801ad2e:	6a21      	ldr	r1, [r4, #32]
 801ad30:	9600      	str	r6, [sp, #0]
 801ad32:	6860      	ldr	r0, [r4, #4]
 801ad34:	f7ff ff90 	bl	801ac58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad38:	69a3      	ldr	r3, [r4, #24]
 801ad3a:	6962      	ldr	r2, [r4, #20]
 801ad3c:	4407      	add	r7, r0
 801ad3e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ad40:	9600      	str	r6, [sp, #0]
 801ad42:	68e0      	ldr	r0, [r4, #12]
 801ad44:	fb93 f8f8 	sdiv	r8, r3, r8
 801ad48:	4442      	add	r2, r8
 801ad4a:	9203      	str	r2, [sp, #12]
 801ad4c:	682a      	ldr	r2, [r5, #0]
 801ad4e:	f7ff ff83 	bl	801ac58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad52:	4680      	mov	r8, r0
 801ad54:	9600      	str	r6, [sp, #0]
 801ad56:	69a3      	ldr	r3, [r4, #24]
 801ad58:	686a      	ldr	r2, [r5, #4]
 801ad5a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ad5c:	6920      	ldr	r0, [r4, #16]
 801ad5e:	f7ff ff7b 	bl	801ac58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad62:	4440      	add	r0, r8
 801ad64:	e7cc      	b.n	801ad00 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801ad66:	bf00      	nop
 801ad68:	200122d8 	.word	0x200122d8

0801ad6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ad6c:	4b07      	ldr	r3, [pc, #28]	@ (801ad8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	2b01      	cmp	r3, #1
 801ad72:	d109      	bne.n	801ad88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801ad74:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ad78:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ad7c:	8003      	strh	r3, [r0, #0]
 801ad7e:	4b04      	ldr	r3, [pc, #16]	@ (801ad90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ad80:	881b      	ldrh	r3, [r3, #0]
 801ad82:	3b01      	subs	r3, #1
 801ad84:	1a9b      	subs	r3, r3, r2
 801ad86:	800b      	strh	r3, [r1, #0]
 801ad88:	4770      	bx	lr
 801ad8a:	bf00      	nop
 801ad8c:	200122bc 	.word	0x200122bc
 801ad90:	200122b8 	.word	0x200122b8

0801ad94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ad94:	4b07      	ldr	r3, [pc, #28]	@ (801adb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ad96:	b510      	push	{r4, lr}
 801ad98:	781b      	ldrb	r3, [r3, #0]
 801ad9a:	2b01      	cmp	r3, #1
 801ad9c:	d108      	bne.n	801adb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ad9e:	4b06      	ldr	r3, [pc, #24]	@ (801adb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ada0:	880c      	ldrh	r4, [r1, #0]
 801ada2:	881b      	ldrh	r3, [r3, #0]
 801ada4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ada8:	3b01      	subs	r3, #1
 801adaa:	1b1b      	subs	r3, r3, r4
 801adac:	8003      	strh	r3, [r0, #0]
 801adae:	800a      	strh	r2, [r1, #0]
 801adb0:	bd10      	pop	{r4, pc}
 801adb2:	bf00      	nop
 801adb4:	200122bc 	.word	0x200122bc
 801adb8:	200122b8 	.word	0x200122b8

0801adbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801adbc:	4b0a      	ldr	r3, [pc, #40]	@ (801ade8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801adbe:	b510      	push	{r4, lr}
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	2b01      	cmp	r3, #1
 801adc4:	d10e      	bne.n	801ade4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801adc6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801adca:	8843      	ldrh	r3, [r0, #2]
 801adcc:	f9b0 4000 	ldrsh.w	r4, [r0]
 801add0:	18ca      	adds	r2, r1, r3
 801add2:	4b06      	ldr	r3, [pc, #24]	@ (801adec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801add4:	8044      	strh	r4, [r0, #2]
 801add6:	881b      	ldrh	r3, [r3, #0]
 801add8:	1a9b      	subs	r3, r3, r2
 801adda:	8003      	strh	r3, [r0, #0]
 801addc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ade0:	8081      	strh	r1, [r0, #4]
 801ade2:	80c3      	strh	r3, [r0, #6]
 801ade4:	bd10      	pop	{r4, pc}
 801ade6:	bf00      	nop
 801ade8:	200122bc 	.word	0x200122bc
 801adec:	200122b8 	.word	0x200122b8

0801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801adf0:	4b08      	ldr	r3, [pc, #32]	@ (801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801adf2:	781b      	ldrb	r3, [r3, #0]
 801adf4:	2b01      	cmp	r3, #1
 801adf6:	d10c      	bne.n	801ae12 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801adf8:	8803      	ldrh	r3, [r0, #0]
 801adfa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801adfe:	8842      	ldrh	r2, [r0, #2]
 801ae00:	8002      	strh	r2, [r0, #0]
 801ae02:	185a      	adds	r2, r3, r1
 801ae04:	4b04      	ldr	r3, [pc, #16]	@ (801ae18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ae06:	881b      	ldrh	r3, [r3, #0]
 801ae08:	1a9b      	subs	r3, r3, r2
 801ae0a:	8043      	strh	r3, [r0, #2]
 801ae0c:	88c3      	ldrh	r3, [r0, #6]
 801ae0e:	80c1      	strh	r1, [r0, #6]
 801ae10:	8083      	strh	r3, [r0, #4]
 801ae12:	4770      	bx	lr
 801ae14:	200122bc 	.word	0x200122bc
 801ae18:	200122b8 	.word	0x200122b8

0801ae1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ae1c:	4b07      	ldr	r3, [pc, #28]	@ (801ae3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ae1e:	b510      	push	{r4, lr}
 801ae20:	781b      	ldrb	r3, [r3, #0]
 801ae22:	2b01      	cmp	r3, #1
 801ae24:	d108      	bne.n	801ae38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ae26:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ae2a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ae2e:	8003      	strh	r3, [r0, #0]
 801ae30:	8893      	ldrh	r3, [r2, #4]
 801ae32:	3b01      	subs	r3, #1
 801ae34:	1b1b      	subs	r3, r3, r4
 801ae36:	800b      	strh	r3, [r1, #0]
 801ae38:	bd10      	pop	{r4, pc}
 801ae3a:	bf00      	nop
 801ae3c:	200122bc 	.word	0x200122bc

0801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ae40:	4b0a      	ldr	r3, [pc, #40]	@ (801ae6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ae42:	460a      	mov	r2, r1
 801ae44:	b510      	push	{r4, lr}
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	2b01      	cmp	r3, #1
 801ae4a:	d10d      	bne.n	801ae68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ae4c:	8881      	ldrh	r1, [r0, #4]
 801ae4e:	8803      	ldrh	r3, [r0, #0]
 801ae50:	440b      	add	r3, r1
 801ae52:	4601      	mov	r1, r0
 801ae54:	3b01      	subs	r3, #1
 801ae56:	f821 3b02 	strh.w	r3, [r1], #2
 801ae5a:	f7ff ffdf 	bl	801ae1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ae5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ae62:	88c2      	ldrh	r2, [r0, #6]
 801ae64:	80c3      	strh	r3, [r0, #6]
 801ae66:	8082      	strh	r2, [r0, #4]
 801ae68:	bd10      	pop	{r4, pc}
 801ae6a:	bf00      	nop
 801ae6c:	200122bc 	.word	0x200122bc

0801ae70 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ae70:	4b06      	ldr	r3, [pc, #24]	@ (801ae8c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ae72:	2100      	movs	r1, #0
 801ae74:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae78:	4b05      	ldr	r3, [pc, #20]	@ (801ae90 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ae7a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801ae7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae82:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801ae86:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801ae8a:	4770      	bx	lr
 801ae8c:	200122b8 	.word	0x200122b8
 801ae90:	200122ba 	.word	0x200122ba

0801ae94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ae94:	4b03      	ldr	r3, [pc, #12]	@ (801aea4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801ae96:	6818      	ldr	r0, [r3, #0]
 801ae98:	b110      	cbz	r0, 801aea0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801ae9a:	6803      	ldr	r3, [r0, #0]
 801ae9c:	699b      	ldr	r3, [r3, #24]
 801ae9e:	4718      	bx	r3
 801aea0:	4770      	bx	lr
 801aea2:	bf00      	nop
 801aea4:	20012308 	.word	0x20012308

0801aea8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801aea8:	4770      	bx	lr
	...

0801aeac <_ZN8touchgfx11Application4drawEv>:
 801aeac:	4b09      	ldr	r3, [pc, #36]	@ (801aed4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801aeae:	b507      	push	{r0, r1, r2, lr}
 801aeb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aeb4:	2100      	movs	r1, #0
 801aeb6:	4b08      	ldr	r3, [pc, #32]	@ (801aed8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801aeb8:	9100      	str	r1, [sp, #0]
 801aeba:	4669      	mov	r1, sp
 801aebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aec0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aec4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aec8:	6803      	ldr	r3, [r0, #0]
 801aeca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aecc:	4798      	blx	r3
 801aece:	b003      	add	sp, #12
 801aed0:	f85d fb04 	ldr.w	pc, [sp], #4
 801aed4:	200122b8 	.word	0x200122b8
 801aed8:	200122ba 	.word	0x200122ba

0801aedc <_ZN8touchgfx11Application10invalidateEv>:
 801aedc:	4b09      	ldr	r3, [pc, #36]	@ (801af04 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801aede:	b082      	sub	sp, #8
 801aee0:	2100      	movs	r1, #0
 801aee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aee6:	4b08      	ldr	r3, [pc, #32]	@ (801af08 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801aee8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aeec:	aa02      	add	r2, sp, #8
 801aeee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aef2:	9100      	str	r1, [sp, #0]
 801aef4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aef8:	6803      	ldr	r3, [r0, #0]
 801aefa:	e912 0006 	ldmdb	r2, {r1, r2}
 801aefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af00:	b002      	add	sp, #8
 801af02:	4718      	bx	r3
 801af04:	200122b8 	.word	0x200122b8
 801af08:	200122ba 	.word	0x200122ba

0801af0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801af0c:	4b03      	ldr	r3, [pc, #12]	@ (801af1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801af0e:	6818      	ldr	r0, [r3, #0]
 801af10:	b110      	cbz	r0, 801af18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801af12:	6803      	ldr	r3, [r0, #0]
 801af14:	69db      	ldr	r3, [r3, #28]
 801af16:	4718      	bx	r3
 801af18:	4770      	bx	lr
 801af1a:	bf00      	nop
 801af1c:	20012308 	.word	0x20012308

0801af20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801af20:	4b03      	ldr	r3, [pc, #12]	@ (801af30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801af22:	6818      	ldr	r0, [r3, #0]
 801af24:	b110      	cbz	r0, 801af2c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801af26:	6803      	ldr	r3, [r0, #0]
 801af28:	6a1b      	ldr	r3, [r3, #32]
 801af2a:	4718      	bx	r3
 801af2c:	4770      	bx	lr
 801af2e:	bf00      	nop
 801af30:	20012308 	.word	0x20012308

0801af34 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801af34:	2300      	movs	r3, #0
 801af36:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801af3a:	4770      	bx	lr

0801af3c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801af3c:	4b03      	ldr	r3, [pc, #12]	@ (801af4c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801af3e:	6818      	ldr	r0, [r3, #0]
 801af40:	b110      	cbz	r0, 801af48 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801af42:	6803      	ldr	r3, [r0, #0]
 801af44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af46:	4718      	bx	r3
 801af48:	4770      	bx	lr
 801af4a:	bf00      	nop
 801af4c:	20012308 	.word	0x20012308

0801af50 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801af50:	b510      	push	{r4, lr}
 801af52:	f9b1 4000 	ldrsh.w	r4, [r1]
 801af56:	888a      	ldrh	r2, [r1, #4]
 801af58:	f9b0 3000 	ldrsh.w	r3, [r0]
 801af5c:	4422      	add	r2, r4
 801af5e:	b212      	sxth	r2, r2
 801af60:	4293      	cmp	r3, r2
 801af62:	da15      	bge.n	801af90 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801af64:	8882      	ldrh	r2, [r0, #4]
 801af66:	4413      	add	r3, r2
 801af68:	b21b      	sxth	r3, r3
 801af6a:	429c      	cmp	r4, r3
 801af6c:	da10      	bge.n	801af90 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801af6e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801af72:	88c9      	ldrh	r1, [r1, #6]
 801af74:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801af78:	4419      	add	r1, r3
 801af7a:	b209      	sxth	r1, r1
 801af7c:	428a      	cmp	r2, r1
 801af7e:	da07      	bge.n	801af90 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801af80:	88c0      	ldrh	r0, [r0, #6]
 801af82:	4410      	add	r0, r2
 801af84:	b200      	sxth	r0, r0
 801af86:	4283      	cmp	r3, r0
 801af88:	bfac      	ite	ge
 801af8a:	2000      	movge	r0, #0
 801af8c:	2001      	movlt	r0, #1
 801af8e:	bd10      	pop	{r4, pc}
 801af90:	2000      	movs	r0, #0
 801af92:	e7fc      	b.n	801af8e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801af94 <_ZN8touchgfx4Rect10restrictToEss>:
 801af94:	f9b0 3000 	ldrsh.w	r3, [r0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	b510      	push	{r4, lr}
 801af9c:	da04      	bge.n	801afa8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801af9e:	8884      	ldrh	r4, [r0, #4]
 801afa0:	4423      	add	r3, r4
 801afa2:	8083      	strh	r3, [r0, #4]
 801afa4:	2300      	movs	r3, #0
 801afa6:	8003      	strh	r3, [r0, #0]
 801afa8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801afac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801afb0:	1b09      	subs	r1, r1, r4
 801afb2:	428b      	cmp	r3, r1
 801afb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801afb8:	bfc8      	it	gt
 801afba:	8081      	strhgt	r1, [r0, #4]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	da04      	bge.n	801afca <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801afc0:	88c1      	ldrh	r1, [r0, #6]
 801afc2:	440b      	add	r3, r1
 801afc4:	80c3      	strh	r3, [r0, #6]
 801afc6:	2300      	movs	r3, #0
 801afc8:	8043      	strh	r3, [r0, #2]
 801afca:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801afce:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801afd2:	1a52      	subs	r2, r2, r1
 801afd4:	4293      	cmp	r3, r2
 801afd6:	bfc8      	it	gt
 801afd8:	80c2      	strhgt	r2, [r0, #6]
 801afda:	bd10      	pop	{r4, pc}

0801afdc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801afdc:	4b10      	ldr	r3, [pc, #64]	@ (801b020 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801afde:	b510      	push	{r4, lr}
 801afe0:	460c      	mov	r4, r1
 801afe2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801afe6:	4b0f      	ldr	r3, [pc, #60]	@ (801b024 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801afe8:	4620      	mov	r0, r4
 801afea:	f9b3 1000 	ldrsh.w	r1, [r3]
 801afee:	f7ff ffd1 	bl	801af94 <_ZN8touchgfx4Rect10restrictToEss>
 801aff2:	4b0d      	ldr	r3, [pc, #52]	@ (801b028 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801aff4:	6818      	ldr	r0, [r3, #0]
 801aff6:	b190      	cbz	r0, 801b01e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801aff8:	6803      	ldr	r3, [r0, #0]
 801affa:	4621      	mov	r1, r4
 801affc:	689b      	ldr	r3, [r3, #8]
 801affe:	4798      	blx	r3
 801b000:	4b0a      	ldr	r3, [pc, #40]	@ (801b02c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b002:	6818      	ldr	r0, [r3, #0]
 801b004:	b118      	cbz	r0, 801b00e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b006:	6803      	ldr	r3, [r0, #0]
 801b008:	4621      	mov	r1, r4
 801b00a:	689b      	ldr	r3, [r3, #8]
 801b00c:	4798      	blx	r3
 801b00e:	4b08      	ldr	r3, [pc, #32]	@ (801b030 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b010:	4621      	mov	r1, r4
 801b012:	6818      	ldr	r0, [r3, #0]
 801b014:	6803      	ldr	r3, [r0, #0]
 801b016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b01a:	69db      	ldr	r3, [r3, #28]
 801b01c:	4718      	bx	r3
 801b01e:	bd10      	pop	{r4, pc}
 801b020:	200122ba 	.word	0x200122ba
 801b024:	200122b8 	.word	0x200122b8
 801b028:	20012308 	.word	0x20012308
 801b02c:	20012304 	.word	0x20012304
 801b030:	200122c4 	.word	0x200122c4

0801b034 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b036:	4606      	mov	r6, r0
 801b038:	4608      	mov	r0, r1
 801b03a:	460f      	mov	r7, r1
 801b03c:	f7f9 fe0b 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b040:	b9e8      	cbnz	r0, 801b07e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b042:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b046:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b04a:	42a5      	cmp	r5, r4
 801b04c:	db17      	blt.n	801b07e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b04e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b052:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b056:	429a      	cmp	r2, r3
 801b058:	db11      	blt.n	801b07e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b05a:	88b9      	ldrh	r1, [r7, #4]
 801b05c:	440d      	add	r5, r1
 801b05e:	88b1      	ldrh	r1, [r6, #4]
 801b060:	440c      	add	r4, r1
 801b062:	b22d      	sxth	r5, r5
 801b064:	b224      	sxth	r4, r4
 801b066:	42a5      	cmp	r5, r4
 801b068:	dc09      	bgt.n	801b07e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b06a:	88f8      	ldrh	r0, [r7, #6]
 801b06c:	4410      	add	r0, r2
 801b06e:	88f2      	ldrh	r2, [r6, #6]
 801b070:	4413      	add	r3, r2
 801b072:	b200      	sxth	r0, r0
 801b074:	b21b      	sxth	r3, r3
 801b076:	4298      	cmp	r0, r3
 801b078:	bfcc      	ite	gt
 801b07a:	2000      	movgt	r0, #0
 801b07c:	2001      	movle	r0, #1
 801b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b080 <_ZN8touchgfx11Application11getInstanceEv>:
 801b080:	4b01      	ldr	r3, [pc, #4]	@ (801b088 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b082:	6818      	ldr	r0, [r3, #0]
 801b084:	4770      	bx	lr
 801b086:	bf00      	nop
 801b088:	20012318 	.word	0x20012318

0801b08c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 801b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b08e:	4b10      	ldr	r3, [pc, #64]	@ (801b0d0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801b090:	4605      	mov	r5, r0
 801b092:	781b      	ldrb	r3, [r3, #0]
 801b094:	b1d3      	cbz	r3, 801b0cc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801b096:	4b0f      	ldr	r3, [pc, #60]	@ (801b0d4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801b098:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 801b09c:	4f0e      	ldr	r7, [pc, #56]	@ (801b0d8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801b09e:	881c      	ldrh	r4, [r3, #0]
 801b0a0:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 801b0a4:	42a3      	cmp	r3, r4
 801b0a6:	d90e      	bls.n	801b0c6 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801b0ae:	b10a      	cbz	r2, 801b0b4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801b0b0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801b0b2:	b900      	cbnz	r0, 801b0b6 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 801b0b4:	6898      	ldr	r0, [r3, #8]
 801b0b6:	6803      	ldr	r3, [r0, #0]
 801b0b8:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 801b0bc:	3401      	adds	r4, #1
 801b0be:	69db      	ldr	r3, [r3, #28]
 801b0c0:	4798      	blx	r3
 801b0c2:	b2a4      	uxth	r4, r4
 801b0c4:	e7ec      	b.n	801b0a0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 801b0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0ce:	bf00      	nop
 801b0d0:	200122c2 	.word	0x200122c2
 801b0d4:	20000018 	.word	0x20000018
 801b0d8:	200122c4 	.word	0x200122c4

0801b0dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801b0dc:	2300      	movs	r3, #0
 801b0de:	b510      	push	{r4, lr}
 801b0e0:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801b0e4:	4604      	mov	r4, r0
 801b0e6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b0ea:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b0ee:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801b0f2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801b0f6:	429a      	cmp	r2, r3
 801b0f8:	d90e      	bls.n	801b118 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801b0fa:	18e2      	adds	r2, r4, r3
 801b0fc:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801b100:	b122      	cbz	r2, 801b10c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801b102:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b106:	6803      	ldr	r3, [r0, #0]
 801b108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b10a:	4798      	blx	r3
 801b10c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801b110:	3301      	adds	r3, #1
 801b112:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b116:	e7ea      	b.n	801b0ee <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801b118:	bd10      	pop	{r4, pc}

0801b11a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801b11a:	b530      	push	{r4, r5, lr}
 801b11c:	2200      	movs	r2, #0
 801b11e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801b122:	b293      	uxth	r3, r2
 801b124:	429d      	cmp	r5, r3
 801b126:	d90e      	bls.n	801b146 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b128:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801b12c:	428b      	cmp	r3, r1
 801b12e:	d10b      	bne.n	801b148 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b130:	1884      	adds	r4, r0, r2
 801b132:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801b136:	b13b      	cbz	r3, 801b148 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b138:	3b01      	subs	r3, #1
 801b13a:	b2db      	uxtb	r3, r3
 801b13c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801b140:	b90b      	cbnz	r3, 801b146 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b142:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b146:	bd30      	pop	{r4, r5, pc}
 801b148:	3201      	adds	r2, #1
 801b14a:	e7ea      	b.n	801b122 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801b14c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b14c:	2300      	movs	r3, #0
 801b14e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801b152:	30a4      	adds	r0, #164	@ 0xa4
 801b154:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b158:	f802 3b01 	strb.w	r3, [r2], #1
 801b15c:	4282      	cmp	r2, r0
 801b15e:	d1fb      	bne.n	801b158 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b160:	4770      	bx	lr
	...

0801b164 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b164:	b570      	push	{r4, r5, r6, lr}
 801b166:	4c0b      	ldr	r4, [pc, #44]	@ (801b194 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b168:	4605      	mov	r5, r0
 801b16a:	460e      	mov	r6, r1
 801b16c:	6820      	ldr	r0, [r4, #0]
 801b16e:	b110      	cbz	r0, 801b176 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b170:	6803      	ldr	r3, [r0, #0]
 801b172:	695b      	ldr	r3, [r3, #20]
 801b174:	4798      	blx	r3
 801b176:	1d28      	adds	r0, r5, #4
 801b178:	f7ff ffe8 	bl	801b14c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b17c:	6026      	str	r6, [r4, #0]
 801b17e:	6833      	ldr	r3, [r6, #0]
 801b180:	4630      	mov	r0, r6
 801b182:	68db      	ldr	r3, [r3, #12]
 801b184:	4798      	blx	r3
 801b186:	682b      	ldr	r3, [r5, #0]
 801b188:	4628      	mov	r0, r5
 801b18a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b190:	4718      	bx	r3
 801b192:	bf00      	nop
 801b194:	20012308 	.word	0x20012308

0801b198 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b198:	2300      	movs	r3, #0
 801b19a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801b19e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801b1a2:	461a      	mov	r2, r3
 801b1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1a6:	461c      	mov	r4, r3
 801b1a8:	461d      	mov	r5, r3
 801b1aa:	459c      	cmp	ip, r3
 801b1ac:	dd1a      	ble.n	801b1e4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b1ae:	18c6      	adds	r6, r0, r3
 801b1b0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801b1b4:	b16e      	cbz	r6, 801b1d2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b1b6:	429a      	cmp	r2, r3
 801b1b8:	d008      	beq.n	801b1cc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b1ba:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b1be:	fa1f fe82 	uxth.w	lr, r2
 801b1c2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b1c6:	1887      	adds	r7, r0, r2
 801b1c8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801b1cc:	3201      	adds	r2, #1
 801b1ce:	3301      	adds	r3, #1
 801b1d0:	e7eb      	b.n	801b1aa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b1d2:	4299      	cmp	r1, r3
 801b1d4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801b1d8:	bfa8      	it	ge
 801b1da:	3501      	addge	r5, #1
 801b1dc:	429e      	cmp	r6, r3
 801b1de:	bfc8      	it	gt
 801b1e0:	3401      	addgt	r4, #1
 801b1e2:	e7f4      	b.n	801b1ce <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b1e4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801b1e8:	1b49      	subs	r1, r1, r5
 801b1ea:	1b1b      	subs	r3, r3, r4
 801b1ec:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801b1f0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b1f4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b1f8:	4293      	cmp	r3, r2
 801b1fa:	dd03      	ble.n	801b204 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b1fc:	3b01      	subs	r3, #1
 801b1fe:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801b202:	e7f7      	b.n	801b1f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b208 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b208:	b570      	push	{r4, r5, r6, lr}
 801b20a:	4d16      	ldr	r5, [pc, #88]	@ (801b264 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b20c:	4604      	mov	r4, r0
 801b20e:	6828      	ldr	r0, [r5, #0]
 801b210:	b140      	cbz	r0, 801b224 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b212:	7a03      	ldrb	r3, [r0, #8]
 801b214:	b933      	cbnz	r3, 801b224 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b216:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b21a:	6803      	ldr	r3, [r0, #0]
 801b21c:	689b      	ldr	r3, [r3, #8]
 801b21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b222:	4718      	bx	r3
 801b224:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801b228:	4e0f      	ldr	r6, [pc, #60]	@ (801b268 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b22a:	b973      	cbnz	r3, 801b24a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b22c:	b168      	cbz	r0, 801b24a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b22e:	7a03      	ldrb	r3, [r0, #8]
 801b230:	b15b      	cbz	r3, 801b24a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b232:	6830      	ldr	r0, [r6, #0]
 801b234:	b110      	cbz	r0, 801b23c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b236:	6803      	ldr	r3, [r0, #0]
 801b238:	691b      	ldr	r3, [r3, #16]
 801b23a:	4798      	blx	r3
 801b23c:	6828      	ldr	r0, [r5, #0]
 801b23e:	6803      	ldr	r3, [r0, #0]
 801b240:	68db      	ldr	r3, [r3, #12]
 801b242:	4798      	blx	r3
 801b244:	2301      	movs	r3, #1
 801b246:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b24a:	3404      	adds	r4, #4
 801b24c:	4620      	mov	r0, r4
 801b24e:	f7ff ff45 	bl	801b0dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b252:	4620      	mov	r0, r4
 801b254:	f7ff ffa0 	bl	801b198 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b258:	6830      	ldr	r0, [r6, #0]
 801b25a:	b110      	cbz	r0, 801b262 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b25c:	6803      	ldr	r3, [r0, #0]
 801b25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b260:	e7dd      	b.n	801b21e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b262:	bd70      	pop	{r4, r5, r6, pc}
 801b264:	2001230c 	.word	0x2001230c
 801b268:	20012308 	.word	0x20012308

0801b26c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b26e:	2300      	movs	r3, #0
 801b270:	4604      	mov	r4, r0
 801b272:	460d      	mov	r5, r1
 801b274:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801b278:	4618      	mov	r0, r3
 801b27a:	b29a      	uxth	r2, r3
 801b27c:	4291      	cmp	r1, r2
 801b27e:	d912      	bls.n	801b2a6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801b280:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801b284:	18e6      	adds	r6, r4, r3
 801b286:	42af      	cmp	r7, r5
 801b288:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801b28c:	d105      	bne.n	801b29a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801b28e:	2aff      	cmp	r2, #255	@ 0xff
 801b290:	d002      	beq.n	801b298 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b292:	3201      	adds	r2, #1
 801b294:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801b298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b29a:	2a00      	cmp	r2, #0
 801b29c:	f103 0301 	add.w	r3, r3, #1
 801b2a0:	bf08      	it	eq
 801b2a2:	2001      	moveq	r0, #1
 801b2a4:	e7e9      	b.n	801b27a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801b2a6:	b120      	cbz	r0, 801b2b2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b2a8:	2920      	cmp	r1, #32
 801b2aa:	d102      	bne.n	801b2b2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b2ac:	4620      	mov	r0, r4
 801b2ae:	f7ff ff73 	bl	801b198 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b2b2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801b2b6:	2b1f      	cmp	r3, #31
 801b2b8:	d8ee      	bhi.n	801b298 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b2ba:	18e2      	adds	r2, r4, r3
 801b2bc:	2101      	movs	r1, #1
 801b2be:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801b2c2:	185a      	adds	r2, r3, r1
 801b2c4:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801b2c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b2cc:	e7e4      	b.n	801b298 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801b2ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	801a      	strh	r2, [r3, #0]
 801b2d8:	3308      	adds	r3, #8
 801b2da:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b2de:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b2e2:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b2e6:	428b      	cmp	r3, r1
 801b2e8:	d1f5      	bne.n	801b2d6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b2ea:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801b2ee:	4770      	bx	lr

0801b2f0 <_ZN8touchgfx11ApplicationC1Ev>:
 801b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2f2:	4b1d      	ldr	r3, [pc, #116]	@ (801b368 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b2f4:	4606      	mov	r6, r0
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	2500      	movs	r5, #0
 801b2fa:	f846 3b04 	str.w	r3, [r6], #4
 801b2fe:	22a8      	movs	r2, #168	@ 0xa8
 801b300:	2100      	movs	r1, #0
 801b302:	4630      	mov	r0, r6
 801b304:	f012 fe92 	bl	802e02c <memset>
 801b308:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801b30c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b310:	4f16      	ldr	r7, [pc, #88]	@ (801b36c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b312:	f7ff ffdc 	bl	801b2ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b316:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801b31a:	f7ff ffd8 	bl	801b2ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b31e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801b322:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801b326:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801b32a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801b32e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801b332:	490f      	ldr	r1, [pc, #60]	@ (801b370 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b334:	480f      	ldr	r0, [pc, #60]	@ (801b374 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b336:	f011 f9ef 	bl	802c718 <CRC_Lock>
 801b33a:	4b0f      	ldr	r3, [pc, #60]	@ (801b378 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b33c:	b158      	cbz	r0, 801b356 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b33e:	801d      	strh	r5, [r3, #0]
 801b340:	2300      	movs	r3, #0
 801b342:	4a0e      	ldr	r2, [pc, #56]	@ (801b37c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b344:	4630      	mov	r0, r6
 801b346:	6013      	str	r3, [r2, #0]
 801b348:	4a0d      	ldr	r2, [pc, #52]	@ (801b380 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b34a:	603b      	str	r3, [r7, #0]
 801b34c:	6013      	str	r3, [r2, #0]
 801b34e:	f7ff fefd 	bl	801b14c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b352:	4620      	mov	r0, r4
 801b354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b35a:	2002      	movs	r0, #2
 801b35c:	801a      	strh	r2, [r3, #0]
 801b35e:	6038      	str	r0, [r7, #0]
 801b360:	f001 fb1e 	bl	801c9a0 <_ZN8touchgfx6Screen4drawEv>
 801b364:	e7ec      	b.n	801b340 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b366:	bf00      	nop
 801b368:	080322e4 	.word	0x080322e4
 801b36c:	20012308 	.word	0x20012308
 801b370:	b5e8b5cd 	.word	0xb5e8b5cd
 801b374:	f407a5c2 	.word	0xf407a5c2
 801b378:	20000018 	.word	0x20000018
 801b37c:	20012318 	.word	0x20012318
 801b380:	2001230c 	.word	0x2001230c

0801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b384:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801b388:	3b01      	subs	r3, #1
 801b38a:	b29b      	uxth	r3, r3
 801b38c:	428b      	cmp	r3, r1
 801b38e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801b392:	b510      	push	{r4, lr}
 801b394:	d908      	bls.n	801b3a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b396:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b39a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b39e:	681a      	ldr	r2, [r3, #0]
 801b3a0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b3a4:	685a      	ldr	r2, [r3, #4]
 801b3a6:	6062      	str	r2, [r4, #4]
 801b3a8:	bd10      	pop	{r4, pc}
	...

0801b3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b0:	b08f      	sub	sp, #60	@ 0x3c
 801b3b2:	4b8f      	ldr	r3, [pc, #572]	@ (801b5f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b3b4:	4683      	mov	fp, r0
 801b3b6:	ac0a      	add	r4, sp, #40	@ 0x28
 801b3b8:	e884 0006 	stmia.w	r4, {r1, r2}
 801b3bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	4b8c      	ldr	r3, [pc, #560]	@ (801b5f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b3c4:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b3c8:	f7ff fde4 	bl	801af94 <_ZN8touchgfx4Rect10restrictToEss>
 801b3cc:	4620      	mov	r0, r4
 801b3ce:	f7f9 fc42 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3d2:	2800      	cmp	r0, #0
 801b3d4:	d16a      	bne.n	801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b3d6:	9403      	str	r4, [sp, #12]
 801b3d8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b3dc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b3e0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b3e4:	9301      	str	r3, [sp, #4]
 801b3e6:	35a4      	adds	r5, #164	@ 0xa4
 801b3e8:	b15c      	cbz	r4, 801b402 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b3ea:	4629      	mov	r1, r5
 801b3ec:	9803      	ldr	r0, [sp, #12]
 801b3ee:	f7ff fe21 	bl	801b034 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b3f2:	3c01      	subs	r4, #1
 801b3f4:	b118      	cbz	r0, 801b3fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b3f6:	b2a1      	uxth	r1, r4
 801b3f8:	9801      	ldr	r0, [sp, #4]
 801b3fa:	f7ff ffc3 	bl	801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b3fe:	3d08      	subs	r5, #8
 801b400:	e7f2      	b.n	801b3e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b402:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801b406:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b40a:	f8cd a010 	str.w	sl, [sp, #16]
 801b40e:	9302      	str	r3, [sp, #8]
 801b410:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b414:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801b418:	9306      	str	r3, [sp, #24]
 801b41a:	445c      	add	r4, fp
 801b41c:	2500      	movs	r5, #0
 801b41e:	4626      	mov	r6, r4
 801b420:	f8cd a014 	str.w	sl, [sp, #20]
 801b424:	462f      	mov	r7, r5
 801b426:	9b05      	ldr	r3, [sp, #20]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d073      	beq.n	801b514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b42c:	9903      	ldr	r1, [sp, #12]
 801b42e:	4630      	mov	r0, r6
 801b430:	f7ff fd8e 	bl	801af50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b434:	b350      	cbz	r0, 801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b436:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801b43a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b43e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801b442:	45e6      	cmp	lr, ip
 801b444:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b448:	db33      	blt.n	801b4b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b44a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b44e:	88b3      	ldrh	r3, [r6, #4]
 801b450:	4472      	add	r2, lr
 801b452:	4463      	add	r3, ip
 801b454:	b212      	sxth	r2, r2
 801b456:	b21b      	sxth	r3, r3
 801b458:	429a      	cmp	r2, r3
 801b45a:	dc2a      	bgt.n	801b4b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b45c:	fa1f f289 	uxth.w	r2, r9
 801b460:	88f3      	ldrh	r3, [r6, #6]
 801b462:	45c8      	cmp	r8, r9
 801b464:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b468:	4413      	add	r3, r2
 801b46a:	fa1f fc88 	uxth.w	ip, r8
 801b46e:	b29b      	uxth	r3, r3
 801b470:	fa0f fe83 	sxth.w	lr, r3
 801b474:	db0f      	blt.n	801b496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b476:	eba3 030c 	sub.w	r3, r3, ip
 801b47a:	1ac9      	subs	r1, r1, r3
 801b47c:	b209      	sxth	r1, r1
 801b47e:	2900      	cmp	r1, #0
 801b480:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b484:	dd12      	ble.n	801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b486:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801b48a:	4605      	mov	r5, r0
 801b48c:	9b05      	ldr	r3, [sp, #20]
 801b48e:	3e08      	subs	r6, #8
 801b490:	3b01      	subs	r3, #1
 801b492:	9305      	str	r3, [sp, #20]
 801b494:	e7c7      	b.n	801b426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b496:	4461      	add	r1, ip
 801b498:	b209      	sxth	r1, r1
 801b49a:	4571      	cmp	r1, lr
 801b49c:	dc38      	bgt.n	801b510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b49e:	eba2 020c 	sub.w	r2, r2, ip
 801b4a2:	b212      	sxth	r2, r2
 801b4a4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801b4a8:	2a00      	cmp	r2, #0
 801b4aa:	dcee      	bgt.n	801b48a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b4ac:	b00f      	add	sp, #60	@ 0x3c
 801b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4b2:	45c8      	cmp	r8, r9
 801b4b4:	db2c      	blt.n	801b510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4b6:	88f3      	ldrh	r3, [r6, #6]
 801b4b8:	4499      	add	r9, r3
 801b4ba:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801b4be:	4498      	add	r8, r3
 801b4c0:	fa0f f989 	sxth.w	r9, r9
 801b4c4:	fa0f f888 	sxth.w	r8, r8
 801b4c8:	45c1      	cmp	r9, r8
 801b4ca:	db21      	blt.n	801b510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4cc:	fa1f f28c 	uxth.w	r2, ip
 801b4d0:	88b3      	ldrh	r3, [r6, #4]
 801b4d2:	45e6      	cmp	lr, ip
 801b4d4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b4d8:	4413      	add	r3, r2
 801b4da:	fa1f f88e 	uxth.w	r8, lr
 801b4de:	b29b      	uxth	r3, r3
 801b4e0:	fa0f f983 	sxth.w	r9, r3
 801b4e4:	db0a      	blt.n	801b4fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801b4e6:	eba3 0308 	sub.w	r3, r3, r8
 801b4ea:	1ac9      	subs	r1, r1, r3
 801b4ec:	b209      	sxth	r1, r1
 801b4ee:	2900      	cmp	r1, #0
 801b4f0:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801b4f4:	ddda      	ble.n	801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b4f6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b4fa:	e7c6      	b.n	801b48a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b4fc:	4441      	add	r1, r8
 801b4fe:	b209      	sxth	r1, r1
 801b500:	4549      	cmp	r1, r9
 801b502:	dc05      	bgt.n	801b510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b504:	eba2 0208 	sub.w	r2, r2, r8
 801b508:	b212      	sxth	r2, r2
 801b50a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801b50e:	e7cb      	b.n	801b4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b510:	4607      	mov	r7, r0
 801b512:	e7bb      	b.n	801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b514:	2d00      	cmp	r5, #0
 801b516:	d181      	bne.n	801b41c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801b518:	2f00      	cmp	r7, #0
 801b51a:	f000 81dd 	beq.w	801b8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b51e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801b522:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801b526:	b2b3      	uxth	r3, r6
 801b528:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801b52c:	9305      	str	r3, [sp, #20]
 801b52e:	9a05      	ldr	r2, [sp, #20]
 801b530:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b534:	4413      	add	r3, r2
 801b536:	b2ba      	uxth	r2, r7
 801b538:	4492      	add	sl, r2
 801b53a:	b29b      	uxth	r3, r3
 801b53c:	fa1f fa8a 	uxth.w	sl, sl
 801b540:	fa0f f883 	sxth.w	r8, r3
 801b544:	fa0f f98a 	sxth.w	r9, sl
 801b548:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b54c:	9b04      	ldr	r3, [sp, #16]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d052      	beq.n	801b5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b552:	9903      	ldr	r1, [sp, #12]
 801b554:	4620      	mov	r0, r4
 801b556:	f7ff fcfb 	bl	801af50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b55a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b55e:	b1c0      	cbz	r0, 801b592 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b560:	f9b4 e000 	ldrsh.w	lr, [r4]
 801b564:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b568:	4576      	cmp	r6, lr
 801b56a:	dc22      	bgt.n	801b5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b56c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b570:	44f4      	add	ip, lr
 801b572:	fa0f fc8c 	sxth.w	ip, ip
 801b576:	45e0      	cmp	r8, ip
 801b578:	db1b      	blt.n	801b5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b57a:	428f      	cmp	r7, r1
 801b57c:	fa1f fc81 	uxth.w	ip, r1
 801b580:	88e1      	ldrh	r1, [r4, #6]
 801b582:	dc0d      	bgt.n	801b5a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801b584:	ebaa 0c0c 	sub.w	ip, sl, ip
 801b588:	f8a4 9002 	strh.w	r9, [r4, #2]
 801b58c:	eba1 010c 	sub.w	r1, r1, ip
 801b590:	80e1      	strh	r1, [r4, #6]
 801b592:	4628      	mov	r0, r5
 801b594:	9904      	ldr	r1, [sp, #16]
 801b596:	3c08      	subs	r4, #8
 801b598:	4605      	mov	r5, r0
 801b59a:	3901      	subs	r1, #1
 801b59c:	9104      	str	r1, [sp, #16]
 801b59e:	e7d3      	b.n	801b548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801b5a0:	4461      	add	r1, ip
 801b5a2:	b209      	sxth	r1, r1
 801b5a4:	4549      	cmp	r1, r9
 801b5a6:	dcf5      	bgt.n	801b594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5a8:	eba2 0c0c 	sub.w	ip, r2, ip
 801b5ac:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b5b0:	e7ef      	b.n	801b592 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5b2:	428f      	cmp	r7, r1
 801b5b4:	dcee      	bgt.n	801b594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5b6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801b5ba:	4461      	add	r1, ip
 801b5bc:	b209      	sxth	r1, r1
 801b5be:	4589      	cmp	r9, r1
 801b5c0:	dbe8      	blt.n	801b594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5c2:	4576      	cmp	r6, lr
 801b5c4:	fa1f fc8e 	uxth.w	ip, lr
 801b5c8:	88a1      	ldrh	r1, [r4, #4]
 801b5ca:	dc07      	bgt.n	801b5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801b5cc:	eba3 0c0c 	sub.w	ip, r3, ip
 801b5d0:	f8a4 8000 	strh.w	r8, [r4]
 801b5d4:	eba1 010c 	sub.w	r1, r1, ip
 801b5d8:	80a1      	strh	r1, [r4, #4]
 801b5da:	e7da      	b.n	801b592 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5dc:	4461      	add	r1, ip
 801b5de:	b209      	sxth	r1, r1
 801b5e0:	4588      	cmp	r8, r1
 801b5e2:	dbd7      	blt.n	801b594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5e4:	9905      	ldr	r1, [sp, #20]
 801b5e6:	eba1 0c0c 	sub.w	ip, r1, ip
 801b5ea:	f8a4 c004 	strh.w	ip, [r4, #4]
 801b5ee:	e7d0      	b.n	801b592 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5f0:	200122ba 	.word	0x200122ba
 801b5f4:	200122b8 	.word	0x200122b8
 801b5f8:	2d00      	cmp	r5, #0
 801b5fa:	f000 816d 	beq.w	801b8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b5fe:	9b06      	ldr	r3, [sp, #24]
 801b600:	445b      	add	r3, fp
 801b602:	461c      	mov	r4, r3
 801b604:	9b02      	ldr	r3, [sp, #8]
 801b606:	3301      	adds	r3, #1
 801b608:	f000 8166 	beq.w	801b8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b60c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801b610:	9803      	ldr	r0, [sp, #12]
 801b612:	4629      	mov	r1, r5
 801b614:	f7ff fd0e 	bl	801b034 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b618:	b120      	cbz	r0, 801b624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b61a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b61e:	9801      	ldr	r0, [sp, #4]
 801b620:	f7ff feb0 	bl	801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b624:	9903      	ldr	r1, [sp, #12]
 801b626:	4628      	mov	r0, r5
 801b628:	f7ff fc92 	bl	801af50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b62c:	2800      	cmp	r0, #0
 801b62e:	f000 809c 	beq.w	801b76a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b632:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801b636:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b63a:	fa1f f189 	uxth.w	r1, r9
 801b63e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b642:	9309      	str	r3, [sp, #36]	@ 0x24
 801b644:	eb01 0c03 	add.w	ip, r1, r3
 801b648:	b283      	uxth	r3, r0
 801b64a:	4548      	cmp	r0, r9
 801b64c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801b650:	fa1f fa8c 	uxth.w	sl, ip
 801b654:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801b658:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801b65c:	eb03 050c 	add.w	r5, r3, ip
 801b660:	b2ad      	uxth	r5, r5
 801b662:	9505      	str	r5, [sp, #20]
 801b664:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b668:	9504      	str	r5, [sp, #16]
 801b66a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801b66e:	f340 8099 	ble.w	801b7a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b672:	1a5b      	subs	r3, r3, r1
 801b674:	4596      	cmp	lr, r2
 801b676:	fa0f f08a 	sxth.w	r0, sl
 801b67a:	b29b      	uxth	r3, r3
 801b67c:	b21e      	sxth	r6, r3
 801b67e:	dd2e      	ble.n	801b6de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b680:	9f02      	ldr	r7, [sp, #8]
 801b682:	fa1f fe8e 	uxth.w	lr, lr
 801b686:	b292      	uxth	r2, r2
 801b688:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801b68c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b690:	9f04      	ldr	r7, [sp, #16]
 801b692:	ebae 0102 	sub.w	r1, lr, r2
 801b696:	44a6      	add	lr, r4
 801b698:	1a3f      	subs	r7, r7, r0
 801b69a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801b69e:	b289      	uxth	r1, r1
 801b6a0:	4402      	add	r2, r0
 801b6a2:	fa0f fe8e 	sxth.w	lr, lr
 801b6a6:	b20d      	sxth	r5, r1
 801b6a8:	b212      	sxth	r2, r2
 801b6aa:	436f      	muls	r7, r5
 801b6ac:	ebae 0202 	sub.w	r2, lr, r2
 801b6b0:	4372      	muls	r2, r6
 801b6b2:	4297      	cmp	r7, r2
 801b6b4:	db09      	blt.n	801b6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b6b6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801b6ba:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801b6be:	449c      	add	ip, r3
 801b6c0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b6c4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b6c8:	e686      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b6ca:	4421      	add	r1, r4
 801b6cc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801b6d0:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801b6d4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b6d8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b6dc:	e67c      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b6de:	9f04      	ldr	r7, [sp, #16]
 801b6e0:	42b8      	cmp	r0, r7
 801b6e2:	da27      	bge.n	801b734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b6e4:	9902      	ldr	r1, [sp, #8]
 801b6e6:	1a3f      	subs	r7, r7, r0
 801b6e8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801b6ec:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b6f0:	eb05 010e 	add.w	r1, r5, lr
 801b6f4:	fa1f f881 	uxth.w	r8, r1
 801b6f8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801b6fc:	4411      	add	r1, r2
 801b6fe:	fa0f f988 	sxth.w	r9, r8
 801b702:	eba2 020e 	sub.w	r2, r2, lr
 801b706:	eba1 0108 	sub.w	r1, r1, r8
 801b70a:	4372      	muls	r2, r6
 801b70c:	b289      	uxth	r1, r1
 801b70e:	fa0f f881 	sxth.w	r8, r1
 801b712:	fb08 f707 	mul.w	r7, r8, r7
 801b716:	42ba      	cmp	r2, r7
 801b718:	dc06      	bgt.n	801b728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b71a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801b71e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801b722:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801b726:	e7ca      	b.n	801b6be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b728:	4429      	add	r1, r5
 801b72a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801b72e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b732:	e651      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b734:	9805      	ldr	r0, [sp, #20]
 801b736:	2d06      	cmp	r5, #6
 801b738:	ebaa 0000 	sub.w	r0, sl, r0
 801b73c:	b280      	uxth	r0, r0
 801b73e:	fa0f fe80 	sxth.w	lr, r0
 801b742:	d817      	bhi.n	801b774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b744:	9b04      	ldr	r3, [sp, #16]
 801b746:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801b74a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b74e:	1c6b      	adds	r3, r5, #1
 801b750:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801b754:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b758:	9b01      	ldr	r3, [sp, #4]
 801b75a:	9801      	ldr	r0, [sp, #4]
 801b75c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b760:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b764:	805a      	strh	r2, [r3, #2]
 801b766:	809e      	strh	r6, [r3, #4]
 801b768:	80d9      	strh	r1, [r3, #6]
 801b76a:	9b02      	ldr	r3, [sp, #8]
 801b76c:	3c08      	subs	r4, #8
 801b76e:	3b01      	subs	r3, #1
 801b770:	9302      	str	r3, [sp, #8]
 801b772:	e747      	b.n	801b604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b774:	9a02      	ldr	r2, [sp, #8]
 801b776:	45b6      	cmp	lr, r6
 801b778:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b77c:	db0d      	blt.n	801b79a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b77e:	449c      	add	ip, r3
 801b780:	445a      	add	r2, fp
 801b782:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b786:	fa1f fc8c 	uxth.w	ip, ip
 801b78a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801b78e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b792:	448c      	add	ip, r1
 801b794:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801b798:	e61e      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b79a:	445a      	add	r2, fp
 801b79c:	4484      	add	ip, r0
 801b79e:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801b7a2:	e78f      	b.n	801b6c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b7a4:	fa1f f18e 	uxth.w	r1, lr
 801b7a8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801b7ac:	b293      	uxth	r3, r2
 801b7ae:	4596      	cmp	lr, r2
 801b7b0:	eb01 0806 	add.w	r8, r1, r6
 801b7b4:	9306      	str	r3, [sp, #24]
 801b7b6:	fa1f f888 	uxth.w	r8, r8
 801b7ba:	9f06      	ldr	r7, [sp, #24]
 801b7bc:	fa0f f388 	sxth.w	r3, r8
 801b7c0:	9307      	str	r3, [sp, #28]
 801b7c2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b7c6:	443b      	add	r3, r7
 801b7c8:	b29b      	uxth	r3, r3
 801b7ca:	9308      	str	r3, [sp, #32]
 801b7cc:	da24      	bge.n	801b818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b7ce:	9905      	ldr	r1, [sp, #20]
 801b7d0:	eba3 0308 	sub.w	r3, r3, r8
 801b7d4:	eba2 020e 	sub.w	r2, r2, lr
 801b7d8:	eba9 0000 	sub.w	r0, r9, r0
 801b7dc:	ebaa 0401 	sub.w	r4, sl, r1
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	b2a4      	uxth	r4, r4
 801b7e4:	b219      	sxth	r1, r3
 801b7e6:	b225      	sxth	r5, r4
 801b7e8:	4348      	muls	r0, r1
 801b7ea:	436a      	muls	r2, r5
 801b7ec:	4282      	cmp	r2, r0
 801b7ee:	9a02      	ldr	r2, [sp, #8]
 801b7f0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b7f4:	445a      	add	r2, fp
 801b7f6:	dc06      	bgt.n	801b806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b7f8:	9b07      	ldr	r3, [sp, #28]
 801b7fa:	44a4      	add	ip, r4
 801b7fc:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801b800:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801b804:	e75e      	b.n	801b6c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b806:	9904      	ldr	r1, [sp, #16]
 801b808:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801b80c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801b810:	4433      	add	r3, r6
 801b812:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b816:	e5df      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b818:	9f06      	ldr	r7, [sp, #24]
 801b81a:	9b04      	ldr	r3, [sp, #16]
 801b81c:	1bc9      	subs	r1, r1, r7
 801b81e:	fa0f f78a 	sxth.w	r7, sl
 801b822:	b289      	uxth	r1, r1
 801b824:	429f      	cmp	r7, r3
 801b826:	fa0f fe81 	sxth.w	lr, r1
 801b82a:	dd23      	ble.n	801b874 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b82c:	9a05      	ldr	r2, [sp, #20]
 801b82e:	eba9 0000 	sub.w	r0, r9, r0
 801b832:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b836:	ebaa 0202 	sub.w	r2, sl, r2
 801b83a:	9d07      	ldr	r5, [sp, #28]
 801b83c:	fb0e f000 	mul.w	r0, lr, r0
 801b840:	b292      	uxth	r2, r2
 801b842:	eba5 0a03 	sub.w	sl, r5, r3
 801b846:	9b02      	ldr	r3, [sp, #8]
 801b848:	b214      	sxth	r4, r2
 801b84a:	00db      	lsls	r3, r3, #3
 801b84c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b850:	445b      	add	r3, fp
 801b852:	4550      	cmp	r0, sl
 801b854:	db03      	blt.n	801b85e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b856:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801b85a:	4494      	add	ip, r2
 801b85c:	e732      	b.n	801b6c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b85e:	9a04      	ldr	r2, [sp, #16]
 801b860:	4431      	add	r1, r6
 801b862:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801b866:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801b86a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801b86e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b872:	e75c      	b.n	801b72e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b874:	9b08      	ldr	r3, [sp, #32]
 801b876:	2d06      	cmp	r5, #6
 801b878:	eba3 0308 	sub.w	r3, r3, r8
 801b87c:	b29b      	uxth	r3, r3
 801b87e:	b218      	sxth	r0, r3
 801b880:	d813      	bhi.n	801b8aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b882:	9b07      	ldr	r3, [sp, #28]
 801b884:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801b888:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801b88c:	1c6b      	adds	r3, r5, #1
 801b88e:	9901      	ldr	r1, [sp, #4]
 801b890:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b894:	9b01      	ldr	r3, [sp, #4]
 801b896:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b89a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b89e:	805a      	strh	r2, [r3, #2]
 801b8a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8a2:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b8a6:	809a      	strh	r2, [r3, #4]
 801b8a8:	e75f      	b.n	801b76a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b8aa:	9c02      	ldr	r4, [sp, #8]
 801b8ac:	4570      	cmp	r0, lr
 801b8ae:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b8b2:	db0d      	blt.n	801b8d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b8b4:	4431      	add	r1, r6
 801b8b6:	9b06      	ldr	r3, [sp, #24]
 801b8b8:	445c      	add	r4, fp
 801b8ba:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801b8be:	b289      	uxth	r1, r1
 801b8c0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801b8c4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b8c8:	4419      	add	r1, r3
 801b8ca:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801b8ce:	e583      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8d0:	445c      	add	r4, fp
 801b8d2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801b8d6:	e79b      	b.n	801b810 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b8d8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b8dc:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801b8e0:	1e65      	subs	r5, r4, #1
 801b8e2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b8e6:	b2ad      	uxth	r5, r5
 801b8e8:	42b5      	cmp	r5, r6
 801b8ea:	d044      	beq.n	801b976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b8ec:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b8f0:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b8f4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b8f8:	4282      	cmp	r2, r0
 801b8fa:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b8fe:	d11f      	bne.n	801b940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b900:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b904:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b908:	459c      	cmp	ip, r3
 801b90a:	d119      	bne.n	801b940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b90c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b910:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b914:	19d8      	adds	r0, r3, r7
 801b916:	b200      	sxth	r0, r0
 801b918:	4288      	cmp	r0, r1
 801b91a:	d109      	bne.n	801b930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b91c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b920:	4413      	add	r3, r2
 801b922:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b926:	4629      	mov	r1, r5
 801b928:	9801      	ldr	r0, [sp, #4]
 801b92a:	f7ff fd2b 	bl	801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b92e:	e003      	b.n	801b938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b930:	4411      	add	r1, r2
 801b932:	b209      	sxth	r1, r1
 801b934:	42b9      	cmp	r1, r7
 801b936:	d0f3      	beq.n	801b920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b938:	3d01      	subs	r5, #1
 801b93a:	3c08      	subs	r4, #8
 801b93c:	b2ad      	uxth	r5, r5
 801b93e:	e7d3      	b.n	801b8e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b940:	42b9      	cmp	r1, r7
 801b942:	d1f9      	bne.n	801b938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b944:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b948:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b94c:	4299      	cmp	r1, r3
 801b94e:	d1f3      	bne.n	801b938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b950:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b954:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b958:	181f      	adds	r7, r3, r0
 801b95a:	b23f      	sxth	r7, r7
 801b95c:	42ba      	cmp	r2, r7
 801b95e:	d105      	bne.n	801b96c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b960:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b964:	440b      	add	r3, r1
 801b966:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b96a:	e7dc      	b.n	801b926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b96c:	440a      	add	r2, r1
 801b96e:	b212      	sxth	r2, r2
 801b970:	4290      	cmp	r0, r2
 801b972:	d1e1      	bne.n	801b938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b974:	e7f6      	b.n	801b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b976:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b97a:	2e07      	cmp	r6, #7
 801b97c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b980:	d812      	bhi.n	801b9a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b982:	1c75      	adds	r5, r6, #1
 801b984:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b988:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b98c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b990:	9d01      	ldr	r5, [sp, #4]
 801b992:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b996:	442c      	add	r4, r5
 801b998:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b99c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b9a0:	8061      	strh	r1, [r4, #2]
 801b9a2:	80a2      	strh	r2, [r4, #4]
 801b9a4:	80e3      	strh	r3, [r4, #6]
 801b9a6:	e581      	b.n	801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b9a8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b9ac:	3e01      	subs	r6, #1
 801b9ae:	445c      	add	r4, fp
 801b9b0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b9b4:	f04f 37ff 	mov.w	r7, #4294967295
 801b9b8:	2500      	movs	r5, #0
 801b9ba:	9305      	str	r3, [sp, #20]
 801b9bc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b9c0:	1e72      	subs	r2, r6, #1
 801b9c2:	9302      	str	r3, [sp, #8]
 801b9c4:	4691      	mov	r9, r2
 801b9c6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b9ca:	9304      	str	r3, [sp, #16]
 801b9cc:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b9d0:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b9d4:	6818      	ldr	r0, [r3, #0]
 801b9d6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b9da:	9207      	str	r2, [sp, #28]
 801b9dc:	bf16      	itet	ne
 801b9de:	9905      	ldrne	r1, [sp, #20]
 801b9e0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b9e4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b9e8:	9306      	str	r3, [sp, #24]
 801b9ea:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b9ee:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b9f2:	fb18 f801 	smulbb	r8, r8, r1
 801b9f6:	6859      	ldr	r1, [r3, #4]
 801b9f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b9fc:	4671      	mov	r1, lr
 801b9fe:	a80c      	add	r0, sp, #48	@ 0x30
 801ba00:	f7fb f8c9 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba04:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801ba08:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801ba0c:	f04f 0c08 	mov.w	ip, #8
 801ba10:	9b04      	ldr	r3, [sp, #16]
 801ba12:	9a02      	ldr	r2, [sp, #8]
 801ba14:	fb10 f001 	smulbb	r0, r0, r1
 801ba18:	fb02 8803 	mla	r8, r2, r3, r8
 801ba1c:	eba0 0108 	sub.w	r1, r0, r8
 801ba20:	fb90 f0fc 	sdiv	r0, r0, ip
 801ba24:	4288      	cmp	r0, r1
 801ba26:	dc20      	bgt.n	801ba6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801ba28:	4551      	cmp	r1, sl
 801ba2a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ba2e:	da03      	bge.n	801ba38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801ba30:	b1d9      	cbz	r1, 801ba6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801ba32:	468a      	mov	sl, r1
 801ba34:	464f      	mov	r7, r9
 801ba36:	4635      	mov	r5, r6
 801ba38:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba3c:	f119 0f02 	cmn.w	r9, #2
 801ba40:	d1c6      	bne.n	801b9d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801ba42:	4616      	mov	r6, r2
 801ba44:	3201      	adds	r2, #1
 801ba46:	f1a4 0408 	sub.w	r4, r4, #8
 801ba4a:	d1b7      	bne.n	801b9bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801ba4c:	9b01      	ldr	r3, [sp, #4]
 801ba4e:	b2ac      	uxth	r4, r5
 801ba50:	00ed      	lsls	r5, r5, #3
 801ba52:	1958      	adds	r0, r3, r5
 801ba54:	1c7b      	adds	r3, r7, #1
 801ba56:	d10b      	bne.n	801ba70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801ba58:	4601      	mov	r1, r0
 801ba5a:	9803      	ldr	r0, [sp, #12]
 801ba5c:	f7fb f89b 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba60:	4621      	mov	r1, r4
 801ba62:	9801      	ldr	r0, [sp, #4]
 801ba64:	f7ff fc8e 	bl	801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ba68:	e4b6      	b.n	801b3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ba6a:	464f      	mov	r7, r9
 801ba6c:	4635      	mov	r5, r6
 801ba6e:	e7ed      	b.n	801ba4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801ba70:	9b01      	ldr	r3, [sp, #4]
 801ba72:	00ff      	lsls	r7, r7, #3
 801ba74:	445d      	add	r5, fp
 801ba76:	19d9      	adds	r1, r3, r7
 801ba78:	445f      	add	r7, fp
 801ba7a:	f7fb f88c 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba7e:	9b03      	ldr	r3, [sp, #12]
 801ba80:	cb03      	ldmia	r3!, {r0, r1}
 801ba82:	9b03      	ldr	r3, [sp, #12]
 801ba84:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801ba88:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801ba8c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801ba90:	6869      	ldr	r1, [r5, #4]
 801ba92:	c303      	stmia	r3!, {r0, r1}
 801ba94:	e7e4      	b.n	801ba60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801ba96:	bf00      	nop

0801ba98 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801baa0:	b09b      	sub	sp, #108	@ 0x6c
 801baa2:	4604      	mov	r4, r0
 801baa4:	4630      	mov	r0, r6
 801baa6:	f7f9 f8d6 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801baaa:	4605      	mov	r5, r0
 801baac:	b948      	cbnz	r0, 801bac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801baae:	6823      	ldr	r3, [r4, #0]
 801bab0:	4620      	mov	r0, r4
 801bab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bab4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bab8:	4798      	blx	r3
 801baba:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801babe:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801bac2:	4bc5      	ldr	r3, [pc, #788]	@ (801bdd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d03f      	beq.n	801bb4a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801baca:	4dc4      	ldr	r5, [pc, #784]	@ (801bddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801bacc:	4628      	mov	r0, r5
 801bace:	f7f9 f8c2 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bad2:	4606      	mov	r6, r0
 801bad4:	2800      	cmp	r0, #0
 801bad6:	d138      	bne.n	801bb4a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801bad8:	4628      	mov	r0, r5
 801bada:	f7ff f96f 	bl	801adbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bade:	6823      	ldr	r3, [r4, #0]
 801bae0:	6829      	ldr	r1, [r5, #0]
 801bae2:	4620      	mov	r0, r4
 801bae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bae6:	686a      	ldr	r2, [r5, #4]
 801bae8:	4798      	blx	r3
 801baea:	802e      	strh	r6, [r5, #0]
 801baec:	806e      	strh	r6, [r5, #2]
 801baee:	80ae      	strh	r6, [r5, #4]
 801baf0:	80ee      	strh	r6, [r5, #6]
 801baf2:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801baf6:	4dba      	ldr	r5, [pc, #744]	@ (801bde0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801baf8:	4640      	mov	r0, r8
 801bafa:	f7ff fbe8 	bl	801b2ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bafe:	882e      	ldrh	r6, [r5, #0]
 801bb00:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801bb04:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801bb08:	4633      	mov	r3, r6
 801bb0a:	42bb      	cmp	r3, r7
 801bb0c:	d224      	bcs.n	801bb58 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801bb0e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801bb12:	2907      	cmp	r1, #7
 801bb14:	d816      	bhi.n	801bb44 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801bb16:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801bb1a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801bb1e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801bb22:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801bb26:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801bb2a:	1c4a      	adds	r2, r1, #1
 801bb2c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801bb30:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801bb34:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801bb38:	f8a2 a002 	strh.w	sl, [r2, #2]
 801bb3c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bb40:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bb44:	3301      	adds	r3, #1
 801bb46:	b29b      	uxth	r3, r3
 801bb48:	e7df      	b.n	801bb0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801bb4a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d1cf      	bne.n	801baf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801bb52:	b01b      	add	sp, #108	@ 0x6c
 801bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb58:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801bb5c:	42b3      	cmp	r3, r6
 801bb5e:	d90c      	bls.n	801bb7a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801bb60:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bb64:	6822      	ldr	r2, [r4, #0]
 801bb66:	3601      	adds	r6, #1
 801bb68:	4620      	mov	r0, r4
 801bb6a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801bb6c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801bb70:	b2b6      	uxth	r6, r6
 801bb72:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801bb76:	47b8      	blx	r7
 801bb78:	e7ee      	b.n	801bb58 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801bb7a:	4a9a      	ldr	r2, [pc, #616]	@ (801bde4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bb7c:	6813      	ldr	r3, [r2, #0]
 801bb7e:	4691      	mov	r9, r2
 801bb80:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801bb84:	2b01      	cmp	r3, #1
 801bb86:	f040 80e0 	bne.w	801bd4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801bb8a:	8829      	ldrh	r1, [r5, #0]
 801bb8c:	2600      	movs	r6, #0
 801bb8e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801bb92:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801bb96:	33ae      	adds	r3, #174	@ 0xae
 801bb98:	428f      	cmp	r7, r1
 801bb9a:	f103 0308 	add.w	r3, r3, #8
 801bb9e:	dd0a      	ble.n	801bbb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801bba0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801bba4:	3101      	adds	r1, #1
 801bba6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801bbaa:	4402      	add	r2, r0
 801bbac:	b212      	sxth	r2, r2
 801bbae:	4296      	cmp	r6, r2
 801bbb0:	bfb8      	it	lt
 801bbb2:	4616      	movlt	r6, r2
 801bbb4:	e7f0      	b.n	801bb98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801bbb6:	4b8c      	ldr	r3, [pc, #560]	@ (801bde8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bbb8:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801bde4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801bbbc:	881b      	ldrh	r3, [r3, #0]
 801bbbe:	2b0f      	cmp	r3, #15
 801bbc0:	bf8c      	ite	hi
 801bbc2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801bbc6:	f04f 0b01 	movls.w	fp, #1
 801bbca:	2300      	movs	r3, #0
 801bbcc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bbd0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801bbd4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801bbd8:	4b82      	ldr	r3, [pc, #520]	@ (801bde4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bbda:	4438      	add	r0, r7
 801bbdc:	b207      	sxth	r7, r0
 801bbde:	6818      	ldr	r0, [r3, #0]
 801bbe0:	42b7      	cmp	r7, r6
 801bbe2:	6803      	ldr	r3, [r0, #0]
 801bbe4:	f280 8083 	bge.w	801bcee <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801bbe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801bbec:	4798      	blx	r3
 801bbee:	eb07 030b 	add.w	r3, r7, fp
 801bbf2:	4298      	cmp	r0, r3
 801bbf4:	da07      	bge.n	801bc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bbf6:	42b0      	cmp	r0, r6
 801bbf8:	da05      	bge.n	801bc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bbfa:	4287      	cmp	r7, r0
 801bbfc:	dd6c      	ble.n	801bcd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bbfe:	2f00      	cmp	r7, #0
 801bc00:	dd6a      	ble.n	801bcd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bc02:	4630      	mov	r0, r6
 801bc04:	e004      	b.n	801bc10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801bc06:	4287      	cmp	r7, r0
 801bc08:	dcfb      	bgt.n	801bc02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801bc0a:	42b0      	cmp	r0, r6
 801bc0c:	bfa8      	it	ge
 801bc0e:	4630      	movge	r0, r6
 801bc10:	4b76      	ldr	r3, [pc, #472]	@ (801bdec <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bc12:	1bc0      	subs	r0, r0, r7
 801bc14:	2200      	movs	r2, #0
 801bc16:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bc1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc1e:	882f      	ldrh	r7, [r5, #0]
 801bc20:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bc24:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc28:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bc2c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bc30:	42bb      	cmp	r3, r7
 801bc32:	d9cd      	bls.n	801bbd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bc34:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801bc38:	ab07      	add	r3, sp, #28
 801bc3a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bc3e:	6851      	ldr	r1, [r2, #4]
 801bc40:	c303      	stmia	r3!, {r0, r1}
 801bc42:	a905      	add	r1, sp, #20
 801bc44:	a807      	add	r0, sp, #28
 801bc46:	f7ff f983 	bl	801af50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bc4a:	2800      	cmp	r0, #0
 801bc4c:	d04c      	beq.n	801bce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801bc4e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bc52:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801bc56:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801bc5a:	4686      	mov	lr, r0
 801bc5c:	4290      	cmp	r0, r2
 801bc5e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bc62:	4450      	add	r0, sl
 801bc64:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801bc68:	bfb8      	it	lt
 801bc6a:	4696      	movlt	lr, r2
 801bc6c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bc70:	4452      	add	r2, sl
 801bc72:	b280      	uxth	r0, r0
 801bc74:	4299      	cmp	r1, r3
 801bc76:	468c      	mov	ip, r1
 801bc78:	b292      	uxth	r2, r2
 801bc7a:	9302      	str	r3, [sp, #8]
 801bc7c:	bfb8      	it	lt
 801bc7e:	469c      	movlt	ip, r3
 801bc80:	b203      	sxth	r3, r0
 801bc82:	fa0f fa82 	sxth.w	sl, r2
 801bc86:	f8ad e01c 	strh.w	lr, [sp, #28]
 801bc8a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bc8e:	4553      	cmp	r3, sl
 801bc90:	bfb8      	it	lt
 801bc92:	4602      	movlt	r2, r0
 801bc94:	9b02      	ldr	r3, [sp, #8]
 801bc96:	eba2 020e 	sub.w	r2, r2, lr
 801bc9a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bc9e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801bca2:	4411      	add	r1, r2
 801bca4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bca8:	4413      	add	r3, r2
 801bcaa:	b289      	uxth	r1, r1
 801bcac:	b29b      	uxth	r3, r3
 801bcae:	b208      	sxth	r0, r1
 801bcb0:	b21a      	sxth	r2, r3
 801bcb2:	4290      	cmp	r0, r2
 801bcb4:	bfb8      	it	lt
 801bcb6:	460b      	movlt	r3, r1
 801bcb8:	eba3 030c 	sub.w	r3, r3, ip
 801bcbc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bcc0:	a807      	add	r0, sp, #28
 801bcc2:	f7f8 ffc8 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bcc6:	b920      	cbnz	r0, 801bcd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801bcc8:	6823      	ldr	r3, [r4, #0]
 801bcca:	a907      	add	r1, sp, #28
 801bccc:	4620      	mov	r0, r4
 801bcce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bcd0:	4798      	blx	r3
 801bcd2:	3701      	adds	r7, #1
 801bcd4:	b2bf      	uxth	r7, r7
 801bcd6:	e7a9      	b.n	801bc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801bcd8:	f8d9 0000 	ldr.w	r0, [r9]
 801bcdc:	2101      	movs	r1, #1
 801bcde:	6803      	ldr	r3, [r0, #0]
 801bce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801bce4:	4798      	blx	r3
 801bce6:	e773      	b.n	801bbd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bce8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bcec:	e7e8      	b.n	801bcc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801bcee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcf0:	4798      	blx	r3
 801bcf2:	4b3f      	ldr	r3, [pc, #252]	@ (801bdf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bcf4:	781b      	ldrb	r3, [r3, #0]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	f43f af2b 	beq.w	801bb52 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801bd02:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801bd06:	882b      	ldrh	r3, [r5, #0]
 801bd08:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801bd0c:	42ab      	cmp	r3, r5
 801bd0e:	f4bf af20 	bcs.w	801bb52 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bd12:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801bd16:	2907      	cmp	r1, #7
 801bd18:	d814      	bhi.n	801bd44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801bd1a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801bd1e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801bd22:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801bd26:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801bd2a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801bd2e:	1c4a      	adds	r2, r1, #1
 801bd30:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801bd34:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801bd38:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801bd3c:	f8a2 c002 	strh.w	ip, [r2, #2]
 801bd40:	8097      	strh	r7, [r2, #4]
 801bd42:	80d6      	strh	r6, [r2, #6]
 801bd44:	3301      	adds	r3, #1
 801bd46:	b29b      	uxth	r3, r3
 801bd48:	e7e0      	b.n	801bd0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801bd4a:	2b02      	cmp	r3, #2
 801bd4c:	f040 8133 	bne.w	801bfb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801bd50:	4b28      	ldr	r3, [pc, #160]	@ (801bdf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bd52:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801bd56:	781b      	ldrb	r3, [r3, #0]
 801bd58:	2b01      	cmp	r3, #1
 801bd5a:	f000 8098 	beq.w	801be8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bd5e:	882a      	ldrh	r2, [r5, #0]
 801bd60:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801bd64:	3201      	adds	r2, #1
 801bd66:	b292      	uxth	r2, r2
 801bd68:	2900      	cmp	r1, #0
 801bd6a:	d0c2      	beq.n	801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bd6c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801bd70:	4694      	mov	ip, r2
 801bd72:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801bd76:	f04f 0900 	mov.w	r9, #0
 801bd7a:	441e      	add	r6, r3
 801bd7c:	b236      	sxth	r6, r6
 801bd7e:	fa1f f38c 	uxth.w	r3, ip
 801bd82:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801bd86:	4299      	cmp	r1, r3
 801bd88:	f240 80be 	bls.w	801bf08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801bd8c:	4427      	add	r7, r4
 801bd8e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801bd92:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801bd96:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801bd9a:	4283      	cmp	r3, r0
 801bd9c:	f340 80a0 	ble.w	801bee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801bda0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801bda4:	46e1      	mov	r9, ip
 801bda6:	4406      	add	r6, r0
 801bda8:	b236      	sxth	r6, r6
 801bdaa:	429e      	cmp	r6, r3
 801bdac:	bfa8      	it	ge
 801bdae:	461e      	movge	r6, r3
 801bdb0:	f10c 0c01 	add.w	ip, ip, #1
 801bdb4:	e7e3      	b.n	801bd7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801bdb6:	d10a      	bne.n	801bdce <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801bdb8:	4562      	cmp	r2, ip
 801bdba:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801bdbe:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801bdc2:	bfb8      	it	lt
 801bdc4:	4662      	movlt	r2, ip
 801bdc6:	4288      	cmp	r0, r1
 801bdc8:	bfb8      	it	lt
 801bdca:	461f      	movlt	r7, r3
 801bdcc:	e086      	b.n	801bedc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bdce:	428a      	cmp	r2, r1
 801bdd0:	bfb8      	it	lt
 801bdd2:	460a      	movlt	r2, r1
 801bdd4:	e082      	b.n	801bedc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bdd6:	bf00      	nop
 801bdd8:	20012304 	.word	0x20012304
 801bddc:	20012310 	.word	0x20012310
 801bde0:	20000018 	.word	0x20000018
 801bde4:	200122c4 	.word	0x200122c4
 801bde8:	200122ba 	.word	0x200122ba
 801bdec:	200122b8 	.word	0x200122b8
 801bdf0:	200122c2 	.word	0x200122c2
 801bdf4:	200122bc 	.word	0x200122bc
 801bdf8:	19a1      	adds	r1, r4, r6
 801bdfa:	ab07      	add	r3, sp, #28
 801bdfc:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801be00:	6849      	ldr	r1, [r1, #4]
 801be02:	c303      	stmia	r3!, {r0, r1}
 801be04:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801be08:	a807      	add	r0, sp, #28
 801be0a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be0e:	2b13      	cmp	r3, #19
 801be10:	440b      	add	r3, r1
 801be12:	bfd8      	it	le
 801be14:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801be18:	1a9b      	subs	r3, r3, r2
 801be1a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801be1e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801be22:	f7fe ffe5 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be26:	a807      	add	r0, sp, #28
 801be28:	f7f8 ff15 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be2c:	bb78      	cbnz	r0, 801be8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801be2e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801be32:	4426      	add	r6, r4
 801be34:	f8d9 0000 	ldr.w	r0, [r9]
 801be38:	f1bc 0f14 	cmp.w	ip, #20
 801be3c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801be40:	f8d0 e000 	ldr.w	lr, [r0]
 801be44:	bfa8      	it	ge
 801be46:	f04f 0c14 	movge.w	ip, #20
 801be4a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801be4e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be52:	fa1f fc8c 	uxth.w	ip, ip
 801be56:	f8cd c000 	str.w	ip, [sp]
 801be5a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801be5e:	47d8      	blx	fp
 801be60:	4683      	mov	fp, r0
 801be62:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801be66:	a807      	add	r0, sp, #28
 801be68:	f7fe ffa8 	bl	801adbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801be6c:	6823      	ldr	r3, [r4, #0]
 801be6e:	4620      	mov	r0, r4
 801be70:	a907      	add	r1, sp, #28
 801be72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be74:	4798      	blx	r3
 801be76:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801be7a:	eba0 000b 	sub.w	r0, r0, fp
 801be7e:	b200      	sxth	r0, r0
 801be80:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801be84:	b918      	cbnz	r0, 801be8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801be86:	b2b9      	uxth	r1, r7
 801be88:	4650      	mov	r0, sl
 801be8a:	f7ff fa7b 	bl	801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be8e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801be92:	f1bb 0f00 	cmp.w	fp, #0
 801be96:	f43f af2c 	beq.w	801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801be9a:	882b      	ldrh	r3, [r5, #0]
 801be9c:	2700      	movs	r7, #0
 801be9e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801bea2:	3301      	adds	r3, #1
 801bea4:	b29b      	uxth	r3, r3
 801bea6:	b299      	uxth	r1, r3
 801bea8:	00fe      	lsls	r6, r7, #3
 801beaa:	458b      	cmp	fp, r1
 801beac:	d9a4      	bls.n	801bdf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801beae:	4426      	add	r6, r4
 801beb0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801beb4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801beb8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801bebc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801bec0:	4408      	add	r0, r1
 801bec2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801bec6:	4461      	add	r1, ip
 801bec8:	b200      	sxth	r0, r0
 801beca:	b209      	sxth	r1, r1
 801becc:	4288      	cmp	r0, r1
 801bece:	f6bf af72 	bge.w	801bdb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801bed2:	4584      	cmp	ip, r0
 801bed4:	4662      	mov	r2, ip
 801bed6:	461f      	mov	r7, r3
 801bed8:	bfb8      	it	lt
 801beda:	4602      	movlt	r2, r0
 801bedc:	3301      	adds	r3, #1
 801bede:	e7e2      	b.n	801bea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801bee0:	d10e      	bne.n	801bf00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801bee2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801bee6:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801beea:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801beee:	4473      	add	r3, lr
 801bef0:	b21b      	sxth	r3, r3
 801bef2:	429e      	cmp	r6, r3
 801bef4:	bfa8      	it	ge
 801bef6:	461e      	movge	r6, r3
 801bef8:	4287      	cmp	r7, r0
 801befa:	bfb8      	it	lt
 801befc:	46e1      	movlt	r9, ip
 801befe:	e757      	b.n	801bdb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801bf00:	4286      	cmp	r6, r0
 801bf02:	bfa8      	it	ge
 801bf04:	4606      	movge	r6, r0
 801bf06:	e753      	b.n	801bdb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801bf08:	eb0a 0007 	add.w	r0, sl, r7
 801bf0c:	4427      	add	r7, r4
 801bf0e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801bf12:	f1bb 0f13 	cmp.w	fp, #19
 801bf16:	bfdc      	itt	le
 801bf18:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801bf1c:	445e      	addle	r6, fp
 801bf1e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801bf22:	bfd8      	it	le
 801bf24:	b236      	sxthle	r6, r6
 801bf26:	f7f8 fe96 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf2a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bf2e:	2800      	cmp	r0, #0
 801bf30:	f47f af1a 	bne.w	801bd68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801bf34:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801bf38:	fa1f fb8b 	uxth.w	fp, fp
 801bf3c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bf40:	1ab6      	subs	r6, r6, r2
 801bf42:	4829      	ldr	r0, [pc, #164]	@ (801bfe8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801bf44:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801bf48:	2e14      	cmp	r6, #20
 801bf4a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801bf4e:	6800      	ldr	r0, [r0, #0]
 801bf50:	bfa8      	it	ge
 801bf52:	2614      	movge	r6, #20
 801bf54:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bf58:	f8ad 201e 	strh.w	r2, [sp, #30]
 801bf5c:	b289      	uxth	r1, r1
 801bf5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bf62:	b2b6      	uxth	r6, r6
 801bf64:	f8d0 c000 	ldr.w	ip, [r0]
 801bf68:	b292      	uxth	r2, r2
 801bf6a:	455e      	cmp	r6, fp
 801bf6c:	bf94      	ite	ls
 801bf6e:	9600      	strls	r6, [sp, #0]
 801bf70:	f8cd b000 	strhi.w	fp, [sp]
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801bf7a:	47b0      	blx	r6
 801bf7c:	6823      	ldr	r3, [r4, #0]
 801bf7e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bf82:	a907      	add	r1, sp, #28
 801bf84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bf86:	4620      	mov	r0, r4
 801bf88:	4798      	blx	r3
 801bf8a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801bf8e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801bf92:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801bf96:	1a5b      	subs	r3, r3, r1
 801bf98:	440a      	add	r2, r1
 801bf9a:	b21b      	sxth	r3, r3
 801bf9c:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801bfa0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	f47f aeda 	bne.w	801bd5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801bfaa:	fa1f f189 	uxth.w	r1, r9
 801bfae:	4650      	mov	r0, sl
 801bfb0:	f7ff f9e8 	bl	801b384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bfb4:	e6d3      	b.n	801bd5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801bfb6:	882e      	ldrh	r6, [r5, #0]
 801bfb8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bfbc:	42b3      	cmp	r3, r6
 801bfbe:	f67f ae98 	bls.w	801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bfc2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801bfc6:	ab07      	add	r3, sp, #28
 801bfc8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bfcc:	6851      	ldr	r1, [r2, #4]
 801bfce:	c303      	stmia	r3!, {r0, r1}
 801bfd0:	a807      	add	r0, sp, #28
 801bfd2:	f7f8 fe40 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfd6:	b920      	cbnz	r0, 801bfe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801bfd8:	6823      	ldr	r3, [r4, #0]
 801bfda:	a907      	add	r1, sp, #28
 801bfdc:	4620      	mov	r0, r4
 801bfde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bfe0:	4798      	blx	r3
 801bfe2:	3601      	adds	r6, #1
 801bfe4:	b2b6      	uxth	r6, r6
 801bfe6:	e7e7      	b.n	801bfb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801bfe8:	200122c4 	.word	0x200122c4

0801bfec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801bfec:	4b03      	ldr	r3, [pc, #12]	@ (801bffc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801bfee:	2200      	movs	r2, #0
 801bff0:	801a      	strh	r2, [r3, #0]
 801bff2:	805a      	strh	r2, [r3, #2]
 801bff4:	809a      	strh	r2, [r3, #4]
 801bff6:	80da      	strh	r2, [r3, #6]
 801bff8:	4770      	bx	lr
 801bffa:	bf00      	nop
 801bffc:	20012310 	.word	0x20012310

0801c000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c004:	b09d      	sub	sp, #116	@ 0x74
 801c006:	4606      	mov	r6, r0
 801c008:	4614      	mov	r4, r2
 801c00a:	468a      	mov	sl, r1
 801c00c:	a803      	add	r0, sp, #12
 801c00e:	461d      	mov	r5, r3
 801c010:	f000 fea0 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801c014:	6833      	ldr	r3, [r6, #0]
 801c016:	4630      	mov	r0, r6
 801c018:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801c01c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c01e:	4798      	blx	r3
 801c020:	6833      	ldr	r3, [r6, #0]
 801c022:	4607      	mov	r7, r0
 801c024:	4630      	mov	r0, r6
 801c026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c028:	4798      	blx	r3
 801c02a:	462a      	mov	r2, r5
 801c02c:	2500      	movs	r5, #0
 801c02e:	4621      	mov	r1, r4
 801c030:	9000      	str	r0, [sp, #0]
 801c032:	463b      	mov	r3, r7
 801c034:	462c      	mov	r4, r5
 801c036:	46a9      	mov	r9, r5
 801c038:	46a8      	mov	r8, r5
 801c03a:	a803      	add	r0, sp, #12
 801c03c:	f000 fee5 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c040:	2300      	movs	r3, #0
 801c042:	9302      	str	r3, [sp, #8]
 801c044:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801c048:	429c      	cmp	r4, r3
 801c04a:	d002      	beq.n	801c052 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c04c:	455c      	cmp	r4, fp
 801c04e:	bf18      	it	ne
 801c050:	4625      	movne	r5, r4
 801c052:	ab02      	add	r3, sp, #8
 801c054:	4632      	mov	r2, r6
 801c056:	4651      	mov	r1, sl
 801c058:	a803      	add	r0, sp, #12
 801c05a:	f001 fa09 	bl	801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c05e:	4604      	mov	r4, r0
 801c060:	b108      	cbz	r0, 801c066 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c062:	280a      	cmp	r0, #10
 801c064:	d10a      	bne.n	801c07c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c066:	45c1      	cmp	r9, r8
 801c068:	bf38      	it	cc
 801c06a:	46c1      	movcc	r9, r8
 801c06c:	f04f 0800 	mov.w	r8, #0
 801c070:	2c00      	cmp	r4, #0
 801c072:	d1e5      	bne.n	801c040 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c074:	4648      	mov	r0, r9
 801c076:	b01d      	add	sp, #116	@ 0x74
 801c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c07c:	9a02      	ldr	r2, [sp, #8]
 801c07e:	2a00      	cmp	r2, #0
 801c080:	d0de      	beq.n	801c040 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c082:	7b57      	ldrb	r7, [r2, #13]
 801c084:	4629      	mov	r1, r5
 801c086:	6833      	ldr	r3, [r6, #0]
 801c088:	007f      	lsls	r7, r7, #1
 801c08a:	8894      	ldrh	r4, [r2, #4]
 801c08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c08e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801c092:	7a97      	ldrb	r7, [r2, #10]
 801c094:	4307      	orrs	r7, r0
 801c096:	4630      	mov	r0, r6
 801c098:	4798      	blx	r3
 801c09a:	4438      	add	r0, r7
 801c09c:	4480      	add	r8, r0
 801c09e:	fa1f f888 	uxth.w	r8, r8
 801c0a2:	e7e5      	b.n	801c070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c0a4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c0a4:	b508      	push	{r3, lr}
 801c0a6:	6803      	ldr	r3, [r0, #0]
 801c0a8:	68db      	ldr	r3, [r3, #12]
 801c0aa:	4798      	blx	r3
 801c0ac:	b128      	cbz	r0, 801c0ba <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c0ae:	7b43      	ldrb	r3, [r0, #13]
 801c0b0:	7a80      	ldrb	r0, [r0, #10]
 801c0b2:	005b      	lsls	r3, r3, #1
 801c0b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c0b8:	4318      	orrs	r0, r3
 801c0ba:	bd08      	pop	{r3, pc}

0801c0bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c0bc:	b40e      	push	{r1, r2, r3}
 801c0be:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0c0:	b09e      	sub	sp, #120	@ 0x78
 801c0c2:	4605      	mov	r5, r0
 801c0c4:	ab23      	add	r3, sp, #140	@ 0x8c
 801c0c6:	a805      	add	r0, sp, #20
 801c0c8:	f853 4b04 	ldr.w	r4, [r3], #4
 801c0cc:	9303      	str	r3, [sp, #12]
 801c0ce:	f000 fe41 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801c0d2:	682b      	ldr	r3, [r5, #0]
 801c0d4:	4628      	mov	r0, r5
 801c0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0d8:	4798      	blx	r3
 801c0da:	682b      	ldr	r3, [r5, #0]
 801c0dc:	4606      	mov	r6, r0
 801c0de:	4628      	mov	r0, r5
 801c0e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c0e2:	4798      	blx	r3
 801c0e4:	4633      	mov	r3, r6
 801c0e6:	4621      	mov	r1, r4
 801c0e8:	ae1e      	add	r6, sp, #120	@ 0x78
 801c0ea:	2400      	movs	r4, #0
 801c0ec:	9000      	str	r0, [sp, #0]
 801c0ee:	9a03      	ldr	r2, [sp, #12]
 801c0f0:	a805      	add	r0, sp, #20
 801c0f2:	f000 fe8a 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c0f6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c0fa:	462a      	mov	r2, r5
 801c0fc:	4633      	mov	r3, r6
 801c0fe:	4621      	mov	r1, r4
 801c100:	a805      	add	r0, sp, #20
 801c102:	f001 f9b5 	bl	801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c106:	b300      	cbz	r0, 801c14a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c108:	280a      	cmp	r0, #10
 801c10a:	d01a      	beq.n	801c142 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c10c:	9f04      	ldr	r7, [sp, #16]
 801c10e:	b1c7      	cbz	r7, 801c142 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c110:	7b78      	ldrb	r0, [r7, #13]
 801c112:	7a3b      	ldrb	r3, [r7, #8]
 801c114:	00c1      	lsls	r1, r0, #3
 801c116:	88ea      	ldrh	r2, [r5, #6]
 801c118:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c11c:	4319      	orrs	r1, r3
 801c11e:	0643      	lsls	r3, r0, #25
 801c120:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c124:	bf48      	it	mi
 801c126:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801c12a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c12e:	bf48      	it	mi
 801c130:	b219      	sxthmi	r1, r3
 801c132:	79fb      	ldrb	r3, [r7, #7]
 801c134:	4303      	orrs	r3, r0
 801c136:	4413      	add	r3, r2
 801c138:	1a5b      	subs	r3, r3, r1
 801c13a:	b21b      	sxth	r3, r3
 801c13c:	429c      	cmp	r4, r3
 801c13e:	bfb8      	it	lt
 801c140:	461c      	movlt	r4, r3
 801c142:	4633      	mov	r3, r6
 801c144:	462a      	mov	r2, r5
 801c146:	2100      	movs	r1, #0
 801c148:	e7da      	b.n	801c100 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c14a:	b2a0      	uxth	r0, r4
 801c14c:	b01e      	add	sp, #120	@ 0x78
 801c14e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c152:	b003      	add	sp, #12
 801c154:	4770      	bx	lr

0801c156 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c156:	7a43      	ldrb	r3, [r0, #9]
 801c158:	8880      	ldrh	r0, [r0, #4]
 801c15a:	4418      	add	r0, r3
 801c15c:	b280      	uxth	r0, r0
 801c15e:	4770      	bx	lr

0801c160 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c160:	6803      	ldr	r3, [r0, #0]
 801c162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c164:	4718      	bx	r3

0801c166 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c166:	b40e      	push	{r1, r2, r3}
 801c168:	b570      	push	{r4, r5, r6, lr}
 801c16a:	b09d      	sub	sp, #116	@ 0x74
 801c16c:	4604      	mov	r4, r0
 801c16e:	ab21      	add	r3, sp, #132	@ 0x84
 801c170:	a803      	add	r0, sp, #12
 801c172:	f853 5b04 	ldr.w	r5, [r3], #4
 801c176:	9302      	str	r3, [sp, #8]
 801c178:	f000 fdec 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801c17c:	6823      	ldr	r3, [r4, #0]
 801c17e:	4620      	mov	r0, r4
 801c180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c182:	4798      	blx	r3
 801c184:	6823      	ldr	r3, [r4, #0]
 801c186:	4606      	mov	r6, r0
 801c188:	4620      	mov	r0, r4
 801c18a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c18c:	2401      	movs	r4, #1
 801c18e:	4798      	blx	r3
 801c190:	4633      	mov	r3, r6
 801c192:	9000      	str	r0, [sp, #0]
 801c194:	4629      	mov	r1, r5
 801c196:	9a02      	ldr	r2, [sp, #8]
 801c198:	a803      	add	r0, sp, #12
 801c19a:	f000 fe36 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c19e:	a803      	add	r0, sp, #12
 801c1a0:	f001 fa32 	bl	801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c1a4:	b2a3      	uxth	r3, r4
 801c1a6:	b138      	cbz	r0, 801c1b8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c1a8:	280a      	cmp	r0, #10
 801c1aa:	a803      	add	r0, sp, #12
 801c1ac:	bf04      	itt	eq
 801c1ae:	3301      	addeq	r3, #1
 801c1b0:	b21c      	sxtheq	r4, r3
 801c1b2:	f001 fa29 	bl	801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c1b6:	e7f5      	b.n	801c1a4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	b01d      	add	sp, #116	@ 0x74
 801c1bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1c0:	b003      	add	sp, #12
 801c1c2:	4770      	bx	lr

0801c1c4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c1c4:	b40e      	push	{r1, r2, r3}
 801c1c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1c8:	b09e      	sub	sp, #120	@ 0x78
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	ab23      	add	r3, sp, #140	@ 0x8c
 801c1ce:	a805      	add	r0, sp, #20
 801c1d0:	f853 5b04 	ldr.w	r5, [r3], #4
 801c1d4:	9303      	str	r3, [sp, #12]
 801c1d6:	f000 fdbd 	bl	801cd54 <_ZN8touchgfx12TextProviderC1Ev>
 801c1da:	6823      	ldr	r3, [r4, #0]
 801c1dc:	4620      	mov	r0, r4
 801c1de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c1e0:	4798      	blx	r3
 801c1e2:	6823      	ldr	r3, [r4, #0]
 801c1e4:	4606      	mov	r6, r0
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c1ea:	4798      	blx	r3
 801c1ec:	4633      	mov	r3, r6
 801c1ee:	4629      	mov	r1, r5
 801c1f0:	9000      	str	r0, [sp, #0]
 801c1f2:	9a03      	ldr	r2, [sp, #12]
 801c1f4:	a805      	add	r0, sp, #20
 801c1f6:	f000 fe08 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c1fa:	ad1e      	add	r5, sp, #120	@ 0x78
 801c1fc:	2100      	movs	r1, #0
 801c1fe:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801c202:	4622      	mov	r2, r4
 801c204:	a805      	add	r0, sp, #20
 801c206:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c20a:	462b      	mov	r3, r5
 801c20c:	f001 f930 	bl	801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c210:	b1d8      	cbz	r0, 801c24a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c212:	280a      	cmp	r0, #10
 801c214:	d012      	beq.n	801c23c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c216:	9804      	ldr	r0, [sp, #16]
 801c218:	b180      	cbz	r0, 801c23c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c21a:	7b47      	ldrb	r7, [r0, #13]
 801c21c:	88e2      	ldrh	r2, [r4, #6]
 801c21e:	00fb      	lsls	r3, r7, #3
 801c220:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c224:	7a03      	ldrb	r3, [r0, #8]
 801c226:	430b      	orrs	r3, r1
 801c228:	0679      	lsls	r1, r7, #25
 801c22a:	bf44      	itt	mi
 801c22c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c230:	b21b      	sxthmi	r3, r3
 801c232:	1ad3      	subs	r3, r2, r3
 801c234:	b21b      	sxth	r3, r3
 801c236:	429e      	cmp	r6, r3
 801c238:	bfa8      	it	ge
 801c23a:	461e      	movge	r6, r3
 801c23c:	462b      	mov	r3, r5
 801c23e:	4622      	mov	r2, r4
 801c240:	2100      	movs	r1, #0
 801c242:	a805      	add	r0, sp, #20
 801c244:	f001 f914 	bl	801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c248:	e7e2      	b.n	801c210 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c24a:	4630      	mov	r0, r6
 801c24c:	b01e      	add	sp, #120	@ 0x78
 801c24e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c252:	b003      	add	sp, #12
 801c254:	4770      	bx	lr

0801c256 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c256:	b513      	push	{r0, r1, r4, lr}
 801c258:	6803      	ldr	r3, [r0, #0]
 801c25a:	2400      	movs	r4, #0
 801c25c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c260:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c264:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c268:	4669      	mov	r1, sp
 801c26a:	691b      	ldr	r3, [r3, #16]
 801c26c:	9400      	str	r4, [sp, #0]
 801c26e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c272:	4798      	blx	r3
 801c274:	b002      	add	sp, #8
 801c276:	bd10      	pop	{r4, pc}

0801c278 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c278:	b538      	push	{r3, r4, r5, lr}
 801c27a:	680b      	ldr	r3, [r1, #0]
 801c27c:	460c      	mov	r4, r1
 801c27e:	4605      	mov	r5, r0
 801c280:	68db      	ldr	r3, [r3, #12]
 801c282:	4798      	blx	r3
 801c284:	6823      	ldr	r3, [r4, #0]
 801c286:	4620      	mov	r0, r4
 801c288:	4629      	mov	r1, r5
 801c28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c28c:	4798      	blx	r3
 801c28e:	4628      	mov	r0, r5
 801c290:	bd38      	pop	{r3, r4, r5, pc}

0801c292 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c292:	b410      	push	{r4}
 801c294:	880a      	ldrh	r2, [r1, #0]
 801c296:	8884      	ldrh	r4, [r0, #4]
 801c298:	4422      	add	r2, r4
 801c29a:	800a      	strh	r2, [r1, #0]
 801c29c:	884a      	ldrh	r2, [r1, #2]
 801c29e:	88c4      	ldrh	r4, [r0, #6]
 801c2a0:	4422      	add	r2, r4
 801c2a2:	804a      	strh	r2, [r1, #2]
 801c2a4:	6940      	ldr	r0, [r0, #20]
 801c2a6:	b120      	cbz	r0, 801c2b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c2a8:	6803      	ldr	r3, [r0, #0]
 801c2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2b0:	4718      	bx	r3
 801c2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2b6:	4770      	bx	lr

0801c2b8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c2b8:	b570      	push	{r4, r5, r6, lr}
 801c2ba:	8882      	ldrh	r2, [r0, #4]
 801c2bc:	460c      	mov	r4, r1
 801c2be:	880b      	ldrh	r3, [r1, #0]
 801c2c0:	4605      	mov	r5, r0
 801c2c2:	4413      	add	r3, r2
 801c2c4:	800b      	strh	r3, [r1, #0]
 801c2c6:	884b      	ldrh	r3, [r1, #2]
 801c2c8:	88c2      	ldrh	r2, [r0, #6]
 801c2ca:	4413      	add	r3, r2
 801c2cc:	804b      	strh	r3, [r1, #2]
 801c2ce:	1d01      	adds	r1, r0, #4
 801c2d0:	4620      	mov	r0, r4
 801c2d2:	f7f8 fc7d 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801c2d6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	dd0b      	ble.n	801c2f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	dd07      	ble.n	801c2f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2e6:	6968      	ldr	r0, [r5, #20]
 801c2e8:	b128      	cbz	r0, 801c2f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2ea:	6803      	ldr	r3, [r0, #0]
 801c2ec:	4621      	mov	r1, r4
 801c2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2f4:	4718      	bx	r3
 801c2f6:	bd70      	pop	{r4, r5, r6, pc}

0801c2f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c2f8:	b570      	push	{r4, r5, r6, lr}
 801c2fa:	8882      	ldrh	r2, [r0, #4]
 801c2fc:	460c      	mov	r4, r1
 801c2fe:	880b      	ldrh	r3, [r1, #0]
 801c300:	4605      	mov	r5, r0
 801c302:	4413      	add	r3, r2
 801c304:	800b      	strh	r3, [r1, #0]
 801c306:	884b      	ldrh	r3, [r1, #2]
 801c308:	88c2      	ldrh	r2, [r0, #6]
 801c30a:	4413      	add	r3, r2
 801c30c:	804b      	strh	r3, [r1, #2]
 801c30e:	1d01      	adds	r1, r0, #4
 801c310:	4620      	mov	r0, r4
 801c312:	f7f8 fc5d 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801c316:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	dd19      	ble.n	801c352 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c31e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c322:	2b00      	cmp	r3, #0
 801c324:	dd15      	ble.n	801c352 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c326:	6968      	ldr	r0, [r5, #20]
 801c328:	b128      	cbz	r0, 801c336 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c32a:	6803      	ldr	r3, [r0, #0]
 801c32c:	4621      	mov	r1, r4
 801c32e:	691b      	ldr	r3, [r3, #16]
 801c330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c334:	4718      	bx	r3
 801c336:	4b07      	ldr	r3, [pc, #28]	@ (801c354 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	3304      	adds	r3, #4
 801c33c:	429d      	cmp	r5, r3
 801c33e:	d108      	bne.n	801c352 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c340:	f7fe fe9e 	bl	801b080 <_ZN8touchgfx11Application11getInstanceEv>
 801c344:	6803      	ldr	r3, [r0, #0]
 801c346:	6821      	ldr	r1, [r4, #0]
 801c348:	6862      	ldr	r2, [r4, #4]
 801c34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c34c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c350:	4718      	bx	r3
 801c352:	bd70      	pop	{r4, r5, r6, pc}
 801c354:	20012308 	.word	0x20012308

0801c358 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c358:	b570      	push	{r4, r5, r6, lr}
 801c35a:	4604      	mov	r4, r0
 801c35c:	4616      	mov	r6, r2
 801c35e:	460d      	mov	r5, r1
 801c360:	b901      	cbnz	r1, 801c364 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c362:	b192      	cbz	r2, 801c38a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c364:	6823      	ldr	r3, [r4, #0]
 801c366:	4620      	mov	r0, r4
 801c368:	699b      	ldr	r3, [r3, #24]
 801c36a:	4798      	blx	r3
 801c36c:	88e2      	ldrh	r2, [r4, #6]
 801c36e:	88a1      	ldrh	r1, [r4, #4]
 801c370:	4620      	mov	r0, r4
 801c372:	4432      	add	r2, r6
 801c374:	4429      	add	r1, r5
 801c376:	b212      	sxth	r2, r2
 801c378:	b209      	sxth	r1, r1
 801c37a:	f7ee fa06 	bl	800a78a <_ZN8touchgfx8Drawable5setXYEss>
 801c37e:	6823      	ldr	r3, [r4, #0]
 801c380:	4620      	mov	r0, r4
 801c382:	699b      	ldr	r3, [r3, #24]
 801c384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c388:	4718      	bx	r3
 801c38a:	bd70      	pop	{r4, r5, r6, pc}

0801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c38c:	b510      	push	{r4, lr}
 801c38e:	2300      	movs	r3, #0
 801c390:	4604      	mov	r4, r0
 801c392:	4608      	mov	r0, r1
 801c394:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c398:	8023      	strh	r3, [r4, #0]
 801c39a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c39e:	8063      	strh	r3, [r4, #2]
 801c3a0:	6803      	ldr	r3, [r0, #0]
 801c3a2:	80a1      	strh	r1, [r4, #4]
 801c3a4:	4621      	mov	r1, r4
 801c3a6:	80e2      	strh	r2, [r4, #6]
 801c3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c3aa:	4798      	blx	r3
 801c3ac:	4620      	mov	r0, r4
 801c3ae:	bd10      	pop	{r4, pc}

0801c3b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c3b0:	b530      	push	{r4, r5, lr}
 801c3b2:	8083      	strh	r3, [r0, #4]
 801c3b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c3b8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c3bc:	80c3      	strh	r3, [r0, #6]
 801c3be:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c3c2:	6141      	str	r1, [r0, #20]
 801c3c4:	7203      	strb	r3, [r0, #8]
 801c3c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c3ca:	8302      	strh	r2, [r0, #24]
 801c3cc:	7243      	strb	r3, [r0, #9]
 801c3ce:	7a83      	ldrb	r3, [r0, #10]
 801c3d0:	f365 0306 	bfi	r3, r5, #0, #7
 801c3d4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c3d8:	f365 13c7 	bfi	r3, r5, #7, #1
 801c3dc:	7283      	strb	r3, [r0, #10]
 801c3de:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c3e2:	72c3      	strb	r3, [r0, #11]
 801c3e4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c3e8:	7303      	strb	r3, [r0, #12]
 801c3ea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c3ee:	81c3      	strh	r3, [r0, #14]
 801c3f0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c3f4:	8203      	strh	r3, [r0, #16]
 801c3f6:	4b01      	ldr	r3, [pc, #4]	@ (801c3fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c3f8:	6003      	str	r3, [r0, #0]
 801c3fa:	bd30      	pop	{r4, r5, pc}
 801c3fc:	080323a0 	.word	0x080323a0

0801c400 <_ZNK8touchgfx9ConstFont4findEt>:
 801c400:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c402:	6944      	ldr	r4, [r0, #20]
 801c404:	b3bc      	cbz	r4, 801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c406:	88a3      	ldrh	r3, [r4, #4]
 801c408:	8b02      	ldrh	r2, [r0, #24]
 801c40a:	1acb      	subs	r3, r1, r3
 801c40c:	f102 32ff 	add.w	r2, r2, #4294967295
 801c410:	d431      	bmi.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c412:	4293      	cmp	r3, r2
 801c414:	dd0c      	ble.n	801c430 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c416:	230e      	movs	r3, #14
 801c418:	fb03 4302 	mla	r3, r3, r2, r4
 801c41c:	889b      	ldrh	r3, [r3, #4]
 801c41e:	1a5b      	subs	r3, r3, r1
 801c420:	1ad3      	subs	r3, r2, r3
 801c422:	429a      	cmp	r2, r3
 801c424:	db27      	blt.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c426:	2b00      	cmp	r3, #0
 801c428:	bfbc      	itt	lt
 801c42a:	2302      	movlt	r3, #2
 801c42c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c430:	2500      	movs	r5, #0
 801c432:	260e      	movs	r6, #14
 801c434:	4295      	cmp	r5, r2
 801c436:	dc1e      	bgt.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c438:	fb06 4003 	mla	r0, r6, r3, r4
 801c43c:	8887      	ldrh	r7, [r0, #4]
 801c43e:	42b9      	cmp	r1, r7
 801c440:	d01a      	beq.n	801c478 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c442:	d20d      	bcs.n	801c460 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c444:	1e5a      	subs	r2, r3, #1
 801c446:	4295      	cmp	r5, r2
 801c448:	dc15      	bgt.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c44a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c44e:	1a5b      	subs	r3, r3, r1
 801c450:	1ad3      	subs	r3, r2, r3
 801c452:	429a      	cmp	r2, r3
 801c454:	db0f      	blt.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c456:	429d      	cmp	r5, r3
 801c458:	ddec      	ble.n	801c434 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c45a:	1953      	adds	r3, r2, r5
 801c45c:	105b      	asrs	r3, r3, #1
 801c45e:	e7e9      	b.n	801c434 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c460:	1c5d      	adds	r5, r3, #1
 801c462:	42aa      	cmp	r2, r5
 801c464:	db07      	blt.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c466:	8a43      	ldrh	r3, [r0, #18]
 801c468:	1acb      	subs	r3, r1, r3
 801c46a:	442b      	add	r3, r5
 801c46c:	429d      	cmp	r5, r3
 801c46e:	dc02      	bgt.n	801c476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c470:	429a      	cmp	r2, r3
 801c472:	dadf      	bge.n	801c434 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c474:	e7f1      	b.n	801c45a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c476:	2000      	movs	r0, #0
 801c478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c47a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c47c:	4604      	mov	r4, r0
 801c47e:	4617      	mov	r7, r2
 801c480:	461e      	mov	r6, r3
 801c482:	b911      	cbnz	r1, 801c48a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c484:	2500      	movs	r5, #0
 801c486:	4628      	mov	r0, r5
 801c488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c48a:	290a      	cmp	r1, #10
 801c48c:	d0fa      	beq.n	801c484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c48e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801c492:	4291      	cmp	r1, r2
 801c494:	d0f6      	beq.n	801c484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c496:	f242 020b 	movw	r2, #8203	@ 0x200b
 801c49a:	4291      	cmp	r1, r2
 801c49c:	d0f2      	beq.n	801c484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c49e:	f7ff ffaf 	bl	801c400 <_ZNK8touchgfx9ConstFont4findEt>
 801c4a2:	4605      	mov	r5, r0
 801c4a4:	b950      	cbnz	r0, 801c4bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c4a6:	6823      	ldr	r3, [r4, #0]
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	691b      	ldr	r3, [r3, #16]
 801c4ac:	4798      	blx	r3
 801c4ae:	4601      	mov	r1, r0
 801c4b0:	4620      	mov	r0, r4
 801c4b2:	f7ff ffa5 	bl	801c400 <_ZNK8touchgfx9ConstFont4findEt>
 801c4b6:	4605      	mov	r5, r0
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	d0e3      	beq.n	801c484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c4bc:	6823      	ldr	r3, [r4, #0]
 801c4be:	4629      	mov	r1, r5
 801c4c0:	4620      	mov	r0, r4
 801c4c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c4c4:	4798      	blx	r3
 801c4c6:	6038      	str	r0, [r7, #0]
 801c4c8:	6823      	ldr	r3, [r4, #0]
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c4ce:	4798      	blx	r3
 801c4d0:	7030      	strb	r0, [r6, #0]
 801c4d2:	e7d8      	b.n	801c486 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c4d4 <_ZN8touchgfx4clzuEm>:
 801c4d4:	4603      	mov	r3, r0
 801c4d6:	b1c8      	cbz	r0, 801c50c <_ZN8touchgfx4clzuEm+0x38>
 801c4d8:	0c02      	lsrs	r2, r0, #16
 801c4da:	0412      	lsls	r2, r2, #16
 801c4dc:	b9a2      	cbnz	r2, 801c508 <_ZN8touchgfx4clzuEm+0x34>
 801c4de:	0403      	lsls	r3, r0, #16
 801c4e0:	2010      	movs	r0, #16
 801c4e2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801c4e6:	bf04      	itt	eq
 801c4e8:	021b      	lsleq	r3, r3, #8
 801c4ea:	3008      	addeq	r0, #8
 801c4ec:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801c4f0:	bf04      	itt	eq
 801c4f2:	011b      	lsleq	r3, r3, #4
 801c4f4:	3004      	addeq	r0, #4
 801c4f6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801c4fa:	bf04      	itt	eq
 801c4fc:	009b      	lsleq	r3, r3, #2
 801c4fe:	3002      	addeq	r0, #2
 801c500:	2b00      	cmp	r3, #0
 801c502:	db04      	blt.n	801c50e <_ZN8touchgfx4clzuEm+0x3a>
 801c504:	3001      	adds	r0, #1
 801c506:	4770      	bx	lr
 801c508:	2000      	movs	r0, #0
 801c50a:	e7ea      	b.n	801c4e2 <_ZN8touchgfx4clzuEm+0xe>
 801c50c:	2020      	movs	r0, #32
 801c50e:	4770      	bx	lr

0801c510 <_ZN8touchgfx7muldivuEmmmRm>:
 801c510:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c514:	460f      	mov	r7, r1
 801c516:	4615      	mov	r5, r2
 801c518:	461e      	mov	r6, r3
 801c51a:	4601      	mov	r1, r0
 801c51c:	b100      	cbz	r0, 801c520 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801c51e:	b927      	cbnz	r7, 801c52a <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801c520:	2000      	movs	r0, #0
 801c522:	6030      	str	r0, [r6, #0]
 801c524:	b002      	add	sp, #8
 801c526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c52a:	f7ff ffd3 	bl	801c4d4 <_ZN8touchgfx4clzuEm>
 801c52e:	b980      	cbnz	r0, 801c552 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801c530:	4638      	mov	r0, r7
 801c532:	f7ff ffcf 	bl	801c4d4 <_ZN8touchgfx4clzuEm>
 801c536:	2800      	cmp	r0, #0
 801c538:	dd05      	ble.n	801c546 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801c53a:	4633      	mov	r3, r6
 801c53c:	462a      	mov	r2, r5
 801c53e:	4638      	mov	r0, r7
 801c540:	f7ff ffe6 	bl	801c510 <_ZN8touchgfx7muldivuEmmmRm>
 801c544:	e7ee      	b.n	801c524 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c546:	f04f 33ff 	mov.w	r3, #4294967295
 801c54a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c54e:	6033      	str	r3, [r6, #0]
 801c550:	e7e8      	b.n	801c524 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c552:	fa37 f800 	lsrs.w	r8, r7, r0
 801c556:	fb07 f301 	mul.w	r3, r7, r1
 801c55a:	d105      	bne.n	801c568 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801c55c:	fbb3 f0f5 	udiv	r0, r3, r5
 801c560:	fb05 3510 	mls	r5, r5, r0, r3
 801c564:	6035      	str	r5, [r6, #0]
 801c566:	e7dd      	b.n	801c524 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c568:	2301      	movs	r3, #1
 801c56a:	fa01 fa00 	lsl.w	sl, r1, r0
 801c56e:	462a      	mov	r2, r5
 801c570:	fa03 f000 	lsl.w	r0, r3, r0
 801c574:	4633      	mov	r3, r6
 801c576:	fbba f9f5 	udiv	r9, sl, r5
 801c57a:	3801      	subs	r0, #1
 801c57c:	fb08 f409 	mul.w	r4, r8, r9
 801c580:	4038      	ands	r0, r7
 801c582:	f7ff ffc5 	bl	801c510 <_ZN8touchgfx7muldivuEmmmRm>
 801c586:	462a      	mov	r2, r5
 801c588:	4607      	mov	r7, r0
 801c58a:	ab01      	add	r3, sp, #4
 801c58c:	fb05 a119 	mls	r1, r5, r9, sl
 801c590:	4640      	mov	r0, r8
 801c592:	f7ff ffbd 	bl	801c510 <_ZN8touchgfx7muldivuEmmmRm>
 801c596:	9b01      	ldr	r3, [sp, #4]
 801c598:	6832      	ldr	r2, [r6, #0]
 801c59a:	441a      	add	r2, r3
 801c59c:	fbb2 f3f5 	udiv	r3, r2, r5
 801c5a0:	441c      	add	r4, r3
 801c5a2:	fb05 2513 	mls	r5, r5, r3, r2
 801c5a6:	443c      	add	r4, r7
 801c5a8:	4420      	add	r0, r4
 801c5aa:	e7db      	b.n	801c564 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801c5ac <_ZN8touchgfx6muldivElllRl>:
 801c5ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	461e      	mov	r6, r3
 801c5b2:	bfba      	itte	lt
 801c5b4:	4240      	neglt	r0, r0
 801c5b6:	f04f 34ff 	movlt.w	r4, #4294967295
 801c5ba:	2401      	movge	r4, #1
 801c5bc:	2900      	cmp	r1, #0
 801c5be:	bfbc      	itt	lt
 801c5c0:	4249      	neglt	r1, r1
 801c5c2:	4264      	neglt	r4, r4
 801c5c4:	2a00      	cmp	r2, #0
 801c5c6:	bfb6      	itet	lt
 801c5c8:	4265      	neglt	r5, r4
 801c5ca:	4625      	movge	r5, r4
 801c5cc:	4252      	neglt	r2, r2
 801c5ce:	4288      	cmp	r0, r1
 801c5d0:	bfc2      	ittt	gt
 801c5d2:	4603      	movgt	r3, r0
 801c5d4:	4608      	movgt	r0, r1
 801c5d6:	4619      	movgt	r1, r3
 801c5d8:	ab01      	add	r3, sp, #4
 801c5da:	f7ff ff99 	bl	801c510 <_ZN8touchgfx7muldivuEmmmRm>
 801c5de:	9b01      	ldr	r3, [sp, #4]
 801c5e0:	4368      	muls	r0, r5
 801c5e2:	435c      	muls	r4, r3
 801c5e4:	6034      	str	r4, [r6, #0]
 801c5e6:	b002      	add	sp, #8
 801c5e8:	bd70      	pop	{r4, r5, r6, pc}

0801c5ea <_ZN8touchgfx6muldivElll>:
 801c5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c5ec:	4606      	mov	r6, r0
 801c5ee:	ab01      	add	r3, sp, #4
 801c5f0:	460d      	mov	r5, r1
 801c5f2:	4614      	mov	r4, r2
 801c5f4:	f7ff ffda 	bl	801c5ac <_ZN8touchgfx6muldivElllRl>
 801c5f8:	2e00      	cmp	r6, #0
 801c5fa:	db20      	blt.n	801c63e <_ZN8touchgfx6muldivElll+0x54>
 801c5fc:	bf14      	ite	ne
 801c5fe:	2301      	movne	r3, #1
 801c600:	2300      	moveq	r3, #0
 801c602:	2d00      	cmp	r5, #0
 801c604:	db1e      	blt.n	801c644 <_ZN8touchgfx6muldivElll+0x5a>
 801c606:	bf14      	ite	ne
 801c608:	2201      	movne	r2, #1
 801c60a:	2200      	moveq	r2, #0
 801c60c:	2c00      	cmp	r4, #0
 801c60e:	fb03 f202 	mul.w	r2, r3, r2
 801c612:	db1a      	blt.n	801c64a <_ZN8touchgfx6muldivElll+0x60>
 801c614:	bf14      	ite	ne
 801c616:	2301      	movne	r3, #1
 801c618:	2300      	moveq	r3, #0
 801c61a:	4353      	muls	r3, r2
 801c61c:	2b01      	cmp	r3, #1
 801c61e:	d117      	bne.n	801c650 <_ZN8touchgfx6muldivElll+0x66>
 801c620:	2c00      	cmp	r4, #0
 801c622:	9b01      	ldr	r3, [sp, #4]
 801c624:	bfb8      	it	lt
 801c626:	4264      	neglt	r4, r4
 801c628:	2b00      	cmp	r3, #0
 801c62a:	f104 0401 	add.w	r4, r4, #1
 801c62e:	bfb8      	it	lt
 801c630:	425b      	neglt	r3, r3
 801c632:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c636:	db00      	blt.n	801c63a <_ZN8touchgfx6muldivElll+0x50>
 801c638:	3001      	adds	r0, #1
 801c63a:	b002      	add	sp, #8
 801c63c:	bd70      	pop	{r4, r5, r6, pc}
 801c63e:	f04f 33ff 	mov.w	r3, #4294967295
 801c642:	e7de      	b.n	801c602 <_ZN8touchgfx6muldivElll+0x18>
 801c644:	f04f 32ff 	mov.w	r2, #4294967295
 801c648:	e7e0      	b.n	801c60c <_ZN8touchgfx6muldivElll+0x22>
 801c64a:	f04f 33ff 	mov.w	r3, #4294967295
 801c64e:	e7e4      	b.n	801c61a <_ZN8touchgfx6muldivElll+0x30>
 801c650:	3301      	adds	r3, #1
 801c652:	d1f2      	bne.n	801c63a <_ZN8touchgfx6muldivElll+0x50>
 801c654:	9b01      	ldr	r3, [sp, #4]
 801c656:	2c00      	cmp	r4, #0
 801c658:	bfb8      	it	lt
 801c65a:	4264      	neglt	r4, r4
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	bfb8      	it	lt
 801c660:	425b      	neglt	r3, r3
 801c662:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c666:	bfc8      	it	gt
 801c668:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801c66c:	e7e5      	b.n	801c63a <_ZN8touchgfx6muldivElll+0x50>

0801c66e <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c66e:	2000      	movs	r0, #0
 801c670:	4770      	bx	lr

0801c672 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c672:	2001      	movs	r0, #1
 801c674:	4770      	bx	lr

0801c676 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c676:	2002      	movs	r0, #2
 801c678:	4770      	bx	lr

0801c67a <_ZN8touchgfx12GestureEventD1Ev>:
 801c67a:	4770      	bx	lr

0801c67c <_ZN8touchgfx9DragEventD1Ev>:
 801c67c:	4770      	bx	lr

0801c67e <_ZN8touchgfx10ClickEventD1Ev>:
 801c67e:	4770      	bx	lr

0801c680 <_ZN8touchgfx10ClickEventD0Ev>:
 801c680:	b510      	push	{r4, lr}
 801c682:	4604      	mov	r4, r0
 801c684:	210c      	movs	r1, #12
 801c686:	f010 fc64 	bl	802cf52 <_ZdlPvj>
 801c68a:	4620      	mov	r0, r4
 801c68c:	bd10      	pop	{r4, pc}

0801c68e <_ZN8touchgfx9DragEventD0Ev>:
 801c68e:	b510      	push	{r4, lr}
 801c690:	4604      	mov	r4, r0
 801c692:	2110      	movs	r1, #16
 801c694:	f010 fc5d 	bl	802cf52 <_ZdlPvj>
 801c698:	4620      	mov	r0, r4
 801c69a:	bd10      	pop	{r4, pc}

0801c69c <_ZN8touchgfx12GestureEventD0Ev>:
 801c69c:	b510      	push	{r4, lr}
 801c69e:	4604      	mov	r4, r0
 801c6a0:	210c      	movs	r1, #12
 801c6a2:	f010 fc56 	bl	802cf52 <_ZdlPvj>
 801c6a6:	4620      	mov	r0, r4
 801c6a8:	bd10      	pop	{r4, pc}
	...

0801c6ac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c6ac:	b530      	push	{r4, r5, lr}
 801c6ae:	460d      	mov	r5, r1
 801c6b0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c6b2:	b087      	sub	sp, #28
 801c6b4:	4604      	mov	r4, r0
 801c6b6:	b301      	cbz	r1, 801c6fa <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c6b8:	a801      	add	r0, sp, #4
 801c6ba:	f7ff fe67 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6be:	892a      	ldrh	r2, [r5, #8]
 801c6c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c6c4:	7928      	ldrb	r0, [r5, #4]
 801c6c6:	1ad2      	subs	r2, r2, r3
 801c6c8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801c6ca:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c6ce:	441a      	add	r2, r3
 801c6d0:	896b      	ldrh	r3, [r5, #10]
 801c6d2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c6d6:	f88d 0010 	strb.w	r0, [sp, #16]
 801c6da:	1b5b      	subs	r3, r3, r5
 801c6dc:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801c6de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c6e0:	442b      	add	r3, r5
 801c6e2:	4d07      	ldr	r5, [pc, #28]	@ (801c700 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c6e4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c6e8:	a903      	add	r1, sp, #12
 801c6ea:	9503      	str	r5, [sp, #12]
 801c6ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c6f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c6f4:	6803      	ldr	r3, [r0, #0]
 801c6f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c6f8:	4798      	blx	r3
 801c6fa:	b007      	add	sp, #28
 801c6fc:	bd30      	pop	{r4, r5, pc}
 801c6fe:	bf00      	nop
 801c700:	08032430 	.word	0x08032430

0801c704 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c708:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c70a:	b08a      	sub	sp, #40	@ 0x28
 801c70c:	4604      	mov	r4, r0
 801c70e:	460d      	mov	r5, r1
 801c710:	b113      	cbz	r3, 801c718 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c712:	790b      	ldrb	r3, [r1, #4]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d044      	beq.n	801c7a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c718:	f104 0804 	add.w	r8, r4, #4
 801c71c:	a803      	add	r0, sp, #12
 801c71e:	4641      	mov	r1, r8
 801c720:	f7ff fe34 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c724:	792b      	ldrb	r3, [r5, #4]
 801c726:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c72a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c72e:	b983      	cbnz	r3, 801c752 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c730:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801c734:	892a      	ldrh	r2, [r5, #8]
 801c736:	88e9      	ldrh	r1, [r5, #6]
 801c738:	4640      	mov	r0, r8
 801c73a:	1b92      	subs	r2, r2, r6
 801c73c:	9301      	str	r3, [sp, #4]
 801c73e:	1bc9      	subs	r1, r1, r7
 801c740:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801c744:	b212      	sxth	r2, r2
 801c746:	9300      	str	r3, [sp, #0]
 801c748:	b209      	sxth	r1, r1
 801c74a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801c74e:	f7f8 f95d 	bl	8014a0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c752:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c754:	b329      	cbz	r1, 801c7a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c756:	a805      	add	r0, sp, #20
 801c758:	f7ff fe18 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c75c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c760:	792b      	ldrb	r3, [r5, #4]
 801c762:	a907      	add	r1, sp, #28
 801c764:	1abf      	subs	r7, r7, r2
 801c766:	88ea      	ldrh	r2, [r5, #6]
 801c768:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c76a:	4417      	add	r7, r2
 801c76c:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801c76e:	f88d 3020 	strb.w	r3, [sp, #32]
 801c772:	4417      	add	r7, r2
 801c774:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c778:	1ab6      	subs	r6, r6, r2
 801c77a:	892a      	ldrh	r2, [r5, #8]
 801c77c:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801c780:	4416      	add	r6, r2
 801c782:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c784:	4416      	add	r6, r2
 801c786:	4a08      	ldr	r2, [pc, #32]	@ (801c7a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c788:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801c78c:	2600      	movs	r6, #0
 801c78e:	9207      	str	r2, [sp, #28]
 801c790:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801c794:	6803      	ldr	r3, [r0, #0]
 801c796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c798:	4798      	blx	r3
 801c79a:	792b      	ldrb	r3, [r5, #4]
 801c79c:	b10b      	cbz	r3, 801c7a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c79e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801c7a2:	b00a      	add	sp, #40	@ 0x28
 801c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7a8:	08032408 	.word	0x08032408

0801c7ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7b0:	460c      	mov	r4, r1
 801c7b2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c7b4:	b088      	sub	sp, #32
 801c7b6:	4605      	mov	r5, r0
 801c7b8:	2900      	cmp	r1, #0
 801c7ba:	d06d      	beq.n	801c898 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c7bc:	4668      	mov	r0, sp
 801c7be:	f7ff fde5 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c7c2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801c7c4:	88e3      	ldrh	r3, [r4, #6]
 801c7c6:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c7ca:	440b      	add	r3, r1
 801c7cc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c7d0:	b21b      	sxth	r3, r3
 801c7d2:	4543      	cmp	r3, r8
 801c7d4:	db31      	blt.n	801c83a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c7d6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c7da:	44c4      	add	ip, r8
 801c7dc:	fa0f fc8c 	sxth.w	ip, ip
 801c7e0:	4563      	cmp	r3, ip
 801c7e2:	da2a      	bge.n	801c83a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c7e4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801c7e6:	8926      	ldrh	r6, [r4, #8]
 801c7e8:	4416      	add	r6, r2
 801c7ea:	b236      	sxth	r6, r6
 801c7ec:	42be      	cmp	r6, r7
 801c7ee:	db24      	blt.n	801c83a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c7f0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c7f4:	4438      	add	r0, r7
 801c7f6:	b200      	sxth	r0, r0
 801c7f8:	4286      	cmp	r6, r0
 801c7fa:	da1e      	bge.n	801c83a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c7fc:	8963      	ldrh	r3, [r4, #10]
 801c7fe:	4419      	add	r1, r3
 801c800:	b209      	sxth	r1, r1
 801c802:	4541      	cmp	r1, r8
 801c804:	db08      	blt.n	801c818 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c806:	4561      	cmp	r1, ip
 801c808:	da06      	bge.n	801c818 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c80a:	89a3      	ldrh	r3, [r4, #12]
 801c80c:	441a      	add	r2, r3
 801c80e:	b212      	sxth	r2, r2
 801c810:	42ba      	cmp	r2, r7
 801c812:	db01      	blt.n	801c818 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c814:	4282      	cmp	r2, r0
 801c816:	db10      	blt.n	801c83a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c818:	4b21      	ldr	r3, [pc, #132]	@ (801c8a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c81a:	a904      	add	r1, sp, #16
 801c81c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c81e:	9304      	str	r3, [sp, #16]
 801c820:	2302      	movs	r3, #2
 801c822:	f88d 3014 	strb.w	r3, [sp, #20]
 801c826:	2300      	movs	r3, #0
 801c828:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c82c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c830:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c834:	6803      	ldr	r3, [r0, #0]
 801c836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c838:	4798      	blx	r3
 801c83a:	1d29      	adds	r1, r5, #4
 801c83c:	a802      	add	r0, sp, #8
 801c83e:	f7ff fda5 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c842:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c846:	88e0      	ldrh	r0, [r4, #6]
 801c848:	eba3 0808 	sub.w	r8, r3, r8
 801c84c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c850:	7921      	ldrb	r1, [r4, #4]
 801c852:	fa1f f888 	uxth.w	r8, r8
 801c856:	1bdf      	subs	r7, r3, r7
 801c858:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801c85c:	b2bb      	uxth	r3, r7
 801c85e:	4440      	add	r0, r8
 801c860:	8922      	ldrh	r2, [r4, #8]
 801c862:	8967      	ldrh	r7, [r4, #10]
 801c864:	4460      	add	r0, ip
 801c866:	89a4      	ldrh	r4, [r4, #12]
 801c868:	441a      	add	r2, r3
 801c86a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801c86c:	44b8      	add	r8, r7
 801c86e:	4423      	add	r3, r4
 801c870:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c874:	4432      	add	r2, r6
 801c876:	44e0      	add	r8, ip
 801c878:	4433      	add	r3, r6
 801c87a:	4c0a      	ldr	r4, [pc, #40]	@ (801c8a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c87c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c87e:	f88d 1014 	strb.w	r1, [sp, #20]
 801c882:	a904      	add	r1, sp, #16
 801c884:	9404      	str	r4, [sp, #16]
 801c886:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c88a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c88e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c892:	6803      	ldr	r3, [r0, #0]
 801c894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c896:	4798      	blx	r3
 801c898:	b008      	add	sp, #32
 801c89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c89e:	bf00      	nop
 801c8a0:	08032408 	.word	0x08032408
 801c8a4:	0803241c 	.word	0x0803241c

0801c8a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c8b0:	3201      	adds	r2, #1
 801c8b2:	d112      	bne.n	801c8da <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c8b4:	2500      	movs	r5, #0
 801c8b6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c8ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c8be:	6803      	ldr	r3, [r0, #0]
 801c8c0:	9500      	str	r5, [sp, #0]
 801c8c2:	466d      	mov	r5, sp
 801c8c4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c8c8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c8cc:	4629      	mov	r1, r5
 801c8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c8d0:	4798      	blx	r3
 801c8d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c8d6:	e884 0003 	stmia.w	r4, {r0, r1}
 801c8da:	4620      	mov	r0, r4
 801c8dc:	b003      	add	sp, #12
 801c8de:	bd30      	pop	{r4, r5, pc}

0801c8e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c8e0:	b513      	push	{r0, r1, r4, lr}
 801c8e2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c8e6:	4604      	mov	r4, r0
 801c8e8:	3301      	adds	r3, #1
 801c8ea:	d109      	bne.n	801c900 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c8ec:	4601      	mov	r1, r0
 801c8ee:	4668      	mov	r0, sp
 801c8f0:	f7ff fd4c 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c8f4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c8f8:	8423      	strh	r3, [r4, #32]
 801c8fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c8fe:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c900:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c904:	b002      	add	sp, #8
 801c906:	bd10      	pop	{r4, pc}

0801c908 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c908:	b513      	push	{r0, r1, r4, lr}
 801c90a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801c90e:	4604      	mov	r4, r0
 801c910:	3301      	adds	r3, #1
 801c912:	d109      	bne.n	801c928 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c914:	4601      	mov	r1, r0
 801c916:	4668      	mov	r0, sp
 801c918:	f7ff fd38 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c91c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c920:	8423      	strh	r3, [r4, #32]
 801c922:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c926:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c928:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801c92c:	b002      	add	sp, #8
 801c92e:	bd10      	pop	{r4, pc}

0801c930 <_ZN8touchgfx6ScreenC1Ev>:
 801c930:	b570      	push	{r4, r5, r6, lr}
 801c932:	4b17      	ldr	r3, [pc, #92]	@ (801c990 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c934:	4605      	mov	r5, r0
 801c936:	4a17      	ldr	r2, [pc, #92]	@ (801c994 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c938:	2101      	movs	r1, #1
 801c93a:	f845 3b04 	str.w	r3, [r5], #4
 801c93e:	2300      	movs	r3, #0
 801c940:	6042      	str	r2, [r0, #4]
 801c942:	4604      	mov	r4, r0
 801c944:	8103      	strh	r3, [r0, #8]
 801c946:	8143      	strh	r3, [r0, #10]
 801c948:	8183      	strh	r3, [r0, #12]
 801c94a:	81c3      	strh	r3, [r0, #14]
 801c94c:	8203      	strh	r3, [r0, #16]
 801c94e:	8243      	strh	r3, [r0, #18]
 801c950:	8283      	strh	r3, [r0, #20]
 801c952:	82c3      	strh	r3, [r0, #22]
 801c954:	6203      	str	r3, [r0, #32]
 801c956:	8483      	strh	r3, [r0, #36]	@ 0x24
 801c958:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801c95a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801c95e:	6343      	str	r3, [r0, #52]	@ 0x34
 801c960:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801c964:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801c968:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c96c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801c970:	4b09      	ldr	r3, [pc, #36]	@ (801c998 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c972:	4628      	mov	r0, r5
 801c974:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c978:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801c97a:	4a08      	ldr	r2, [pc, #32]	@ (801c99c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c97c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c980:	4798      	blx	r3
 801c982:	6863      	ldr	r3, [r4, #4]
 801c984:	4628      	mov	r0, r5
 801c986:	4631      	mov	r1, r6
 801c988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c98a:	4798      	blx	r3
 801c98c:	4620      	mov	r0, r4
 801c98e:	bd70      	pop	{r4, r5, r6, pc}
 801c990:	08032444 	.word	0x08032444
 801c994:	08031458 	.word	0x08031458
 801c998:	200122ba 	.word	0x200122ba
 801c99c:	200122b8 	.word	0x200122b8

0801c9a0 <_ZN8touchgfx6Screen4drawEv>:
 801c9a0:	4b09      	ldr	r3, [pc, #36]	@ (801c9c8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c9a2:	b507      	push	{r0, r1, r2, lr}
 801c9a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c9a8:	2100      	movs	r1, #0
 801c9aa:	4b08      	ldr	r3, [pc, #32]	@ (801c9cc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c9ac:	9100      	str	r1, [sp, #0]
 801c9ae:	4669      	mov	r1, sp
 801c9b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c9b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c9bc:	6803      	ldr	r3, [r0, #0]
 801c9be:	689b      	ldr	r3, [r3, #8]
 801c9c0:	4798      	blx	r3
 801c9c2:	b003      	add	sp, #12
 801c9c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c9c8:	200122b8 	.word	0x200122b8
 801c9cc:	200122ba 	.word	0x200122ba

0801c9d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c9d8:	b089      	sub	sp, #36	@ 0x24
 801c9da:	4680      	mov	r8, r0
 801c9dc:	460c      	mov	r4, r1
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	4615      	mov	r5, r2
 801c9e2:	dd0e      	ble.n	801ca02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c9e4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	dd0a      	ble.n	801ca02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c9ec:	4628      	mov	r0, r5
 801c9ee:	f7ff ff5b 	bl	801c8a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c9f2:	4621      	mov	r1, r4
 801c9f4:	f7fe faac 	bl	801af50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c9f8:	69eb      	ldr	r3, [r5, #28]
 801c9fa:	b928      	cbnz	r0, 801ca08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c9fc:	461d      	mov	r5, r3
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d1f4      	bne.n	801c9ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801ca02:	b009      	add	sp, #36	@ 0x24
 801ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca08:	ae04      	add	r6, sp, #16
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	f000 80b5 	beq.w	801cb7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ca10:	682b      	ldr	r3, [r5, #0]
 801ca12:	4629      	mov	r1, r5
 801ca14:	a802      	add	r0, sp, #8
 801ca16:	68db      	ldr	r3, [r3, #12]
 801ca18:	4798      	blx	r3
 801ca1a:	4628      	mov	r0, r5
 801ca1c:	f7ff ff60 	bl	801c8e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ca20:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801ca24:	4407      	add	r7, r0
 801ca26:	4628      	mov	r0, r5
 801ca28:	f7ff ff6e 	bl	801c908 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ca2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ca30:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801ca34:	b23f      	sxth	r7, r7
 801ca36:	4418      	add	r0, r3
 801ca38:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ca3c:	4621      	mov	r1, r4
 801ca3e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ca42:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ca46:	4630      	mov	r0, r6
 801ca48:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca4c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801ca50:	f7f8 f8be 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801ca54:	4628      	mov	r0, r5
 801ca56:	f7ff ff27 	bl	801c8a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ca5a:	ab06      	add	r3, sp, #24
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ca62:	e883 0003 	stmia.w	r3, {r0, r1}
 801ca66:	4611      	mov	r1, r2
 801ca68:	4618      	mov	r0, r3
 801ca6a:	f7f8 f8b1 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801ca6e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ca72:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ca76:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801ca7a:	4299      	cmp	r1, r3
 801ca7c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801ca80:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801ca84:	d10b      	bne.n	801ca9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801ca86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ca8a:	4552      	cmp	r2, sl
 801ca8c:	d107      	bne.n	801ca9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801ca8e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ca92:	455a      	cmp	r2, fp
 801ca94:	d103      	bne.n	801ca9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801ca96:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801ca9a:	454a      	cmp	r2, r9
 801ca9c:	d06d      	beq.n	801cb7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ca9e:	f1bb 0f00 	cmp.w	fp, #0
 801caa2:	dd65      	ble.n	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801caa4:	f1b9 0f00 	cmp.w	r9, #0
 801caa8:	dd62      	ble.n	801cb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801caaa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801caae:	fa1f f08a 	uxth.w	r0, sl
 801cab2:	4552      	cmp	r2, sl
 801cab4:	9000      	str	r0, [sp, #0]
 801cab6:	da12      	bge.n	801cade <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cab8:	9301      	str	r3, [sp, #4]
 801caba:	9b00      	ldr	r3, [sp, #0]
 801cabc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cac0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cac4:	1a9a      	subs	r2, r3, r2
 801cac6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801caca:	4631      	mov	r1, r6
 801cacc:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cad0:	4640      	mov	r0, r8
 801cad2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cad6:	69ea      	ldr	r2, [r5, #28]
 801cad8:	f7ff ff7a 	bl	801c9d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cadc:	9b01      	ldr	r3, [sp, #4]
 801cade:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cae2:	b29f      	uxth	r7, r3
 801cae4:	429a      	cmp	r2, r3
 801cae6:	da0d      	bge.n	801cb04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cae8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801caec:	1aba      	subs	r2, r7, r2
 801caee:	f8ad a012 	strh.w	sl, [sp, #18]
 801caf2:	4631      	mov	r1, r6
 801caf4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801caf8:	4640      	mov	r0, r8
 801cafa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cafe:	69ea      	ldr	r2, [r5, #28]
 801cb00:	f7ff ff66 	bl	801c9d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cb04:	8822      	ldrh	r2, [r4, #0]
 801cb06:	445f      	add	r7, fp
 801cb08:	88a3      	ldrh	r3, [r4, #4]
 801cb0a:	b2bf      	uxth	r7, r7
 801cb0c:	4413      	add	r3, r2
 801cb0e:	b23a      	sxth	r2, r7
 801cb10:	b29b      	uxth	r3, r3
 801cb12:	b219      	sxth	r1, r3
 801cb14:	4291      	cmp	r1, r2
 801cb16:	dd0d      	ble.n	801cb34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801cb18:	1bdb      	subs	r3, r3, r7
 801cb1a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cb1e:	f8ad a012 	strh.w	sl, [sp, #18]
 801cb22:	4631      	mov	r1, r6
 801cb24:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cb28:	4640      	mov	r0, r8
 801cb2a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cb2e:	69ea      	ldr	r2, [r5, #28]
 801cb30:	f7ff ff4e 	bl	801c9d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cb34:	88e2      	ldrh	r2, [r4, #6]
 801cb36:	8863      	ldrh	r3, [r4, #2]
 801cb38:	4413      	add	r3, r2
 801cb3a:	9a00      	ldr	r2, [sp, #0]
 801cb3c:	444a      	add	r2, r9
 801cb3e:	b29b      	uxth	r3, r3
 801cb40:	fa1f f982 	uxth.w	r9, r2
 801cb44:	b219      	sxth	r1, r3
 801cb46:	fa0f f289 	sxth.w	r2, r9
 801cb4a:	428a      	cmp	r2, r1
 801cb4c:	da15      	bge.n	801cb7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cb4e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cb52:	eba3 0309 	sub.w	r3, r3, r9
 801cb56:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cb5a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cb5e:	4631      	mov	r1, r6
 801cb60:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cb64:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cb68:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb6c:	69ea      	ldr	r2, [r5, #28]
 801cb6e:	e001      	b.n	801cb74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801cb70:	69ea      	ldr	r2, [r5, #28]
 801cb72:	4621      	mov	r1, r4
 801cb74:	4640      	mov	r0, r8
 801cb76:	f7ff ff2b 	bl	801c9d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cb7a:	4628      	mov	r0, r5
 801cb7c:	f7ff fe94 	bl	801c8a8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cb80:	6861      	ldr	r1, [r4, #4]
 801cb82:	4602      	mov	r2, r0
 801cb84:	4633      	mov	r3, r6
 801cb86:	6820      	ldr	r0, [r4, #0]
 801cb88:	c303      	stmia	r3!, {r0, r1}
 801cb8a:	4611      	mov	r1, r2
 801cb8c:	4630      	mov	r0, r6
 801cb8e:	f7f8 f81f 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801cb92:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f77f af33 	ble.w	801ca02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cb9c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	f77f af2e 	ble.w	801ca02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cba6:	4628      	mov	r0, r5
 801cba8:	f7ff fe9a 	bl	801c8e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cbac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cbb0:	1a18      	subs	r0, r3, r0
 801cbb2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cbb6:	4628      	mov	r0, r5
 801cbb8:	f7ff fea6 	bl	801c908 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cbbc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cbc0:	4631      	mov	r1, r6
 801cbc2:	1a18      	subs	r0, r3, r0
 801cbc4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cbc8:	4628      	mov	r0, r5
 801cbca:	682b      	ldr	r3, [r5, #0]
 801cbcc:	689b      	ldr	r3, [r3, #8]
 801cbce:	4798      	blx	r3
 801cbd0:	e717      	b.n	801ca02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801cbd2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cbd2:	b570      	push	{r4, r5, r6, lr}
 801cbd4:	1d06      	adds	r6, r0, #4
 801cbd6:	b086      	sub	sp, #24
 801cbd8:	460c      	mov	r4, r1
 801cbda:	2300      	movs	r3, #0
 801cbdc:	4631      	mov	r1, r6
 801cbde:	4605      	mov	r5, r0
 801cbe0:	a802      	add	r0, sp, #8
 801cbe2:	9301      	str	r3, [sp, #4]
 801cbe4:	f7ff fbd2 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cbe8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cbec:	8822      	ldrh	r2, [r4, #0]
 801cbee:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cbf2:	1ad2      	subs	r2, r2, r3
 801cbf4:	8863      	ldrh	r3, [r4, #2]
 801cbf6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cbfa:	1a5b      	subs	r3, r3, r1
 801cbfc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cc00:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cc04:	aa01      	add	r2, sp, #4
 801cc06:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cc0a:	4630      	mov	r0, r6
 801cc0c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cc10:	a904      	add	r1, sp, #16
 801cc12:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cc16:	f7f8 f8b3 	bl	8014d80 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cc1a:	9a01      	ldr	r2, [sp, #4]
 801cc1c:	b11a      	cbz	r2, 801cc26 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cc1e:	4621      	mov	r1, r4
 801cc20:	4628      	mov	r0, r5
 801cc22:	f7ff fed5 	bl	801c9d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc26:	b006      	add	sp, #24
 801cc28:	bd70      	pop	{r4, r5, r6, pc}

0801cc2a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	b530      	push	{r4, r5, lr}
 801cc2e:	4604      	mov	r4, r0
 801cc30:	b085      	sub	sp, #20
 801cc32:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cc36:	460d      	mov	r5, r1
 801cc38:	466b      	mov	r3, sp
 801cc3a:	6851      	ldr	r1, [r2, #4]
 801cc3c:	c303      	stmia	r3!, {r0, r1}
 801cc3e:	4629      	mov	r1, r5
 801cc40:	4668      	mov	r0, sp
 801cc42:	f7f7 ffc5 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 801cc46:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801cc4a:	b12b      	cbz	r3, 801cc58 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cc4c:	4669      	mov	r1, sp
 801cc4e:	4620      	mov	r0, r4
 801cc50:	f7ff ffbf 	bl	801cbd2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cc54:	b005      	add	sp, #20
 801cc56:	bd30      	pop	{r4, r5, pc}
 801cc58:	3404      	adds	r4, #4
 801cc5a:	a802      	add	r0, sp, #8
 801cc5c:	4621      	mov	r1, r4
 801cc5e:	f7ff fb95 	bl	801c38c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cc62:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc66:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cc6a:	4669      	mov	r1, sp
 801cc6c:	4620      	mov	r0, r4
 801cc6e:	1a9b      	subs	r3, r3, r2
 801cc70:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cc74:	f8ad 3000 	strh.w	r3, [sp]
 801cc78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cc7c:	1a9b      	subs	r3, r3, r2
 801cc7e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cc82:	f7f8 f844 	bl	8014d0e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cc86:	e7e5      	b.n	801cc54 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cc88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cc88:	460b      	mov	r3, r1
 801cc8a:	680a      	ldr	r2, [r1, #0]
 801cc8c:	1d01      	adds	r1, r0, #4
 801cc8e:	6992      	ldr	r2, [r2, #24]
 801cc90:	4618      	mov	r0, r3
 801cc92:	4710      	bx	r2

0801cc94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cc94:	4298      	cmp	r0, r3
 801cc96:	d200      	bcs.n	801cc9a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cc98:	b913      	cbnz	r3, 801cca0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cc9a:	440a      	add	r2, r1
 801cc9c:	b210      	sxth	r0, r2
 801cc9e:	4770      	bx	lr
 801cca0:	ee07 0a90 	vmov	s15, r0
 801cca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cca8:	ee07 3a90 	vmov	s15, r3
 801ccac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ccb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ccb4:	ee07 2a90 	vmov	s15, r2
 801ccb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ccbc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801ccc0:	ee07 1a90 	vmov	s15, r1
 801ccc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ccc8:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cccc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801ccd0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ccd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ccd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ccdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cce4:	bfcc      	ite	gt
 801cce6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801ccea:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801ccee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ccf2:	ee17 3a90 	vmov	r3, s15
 801ccf6:	b218      	sxth	r0, r3
 801ccf8:	4770      	bx	lr

0801ccfa <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801ccfa:	4298      	cmp	r0, r3
 801ccfc:	d200      	bcs.n	801cd00 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801ccfe:	b913      	cbnz	r3, 801cd06 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801cd00:	440a      	add	r2, r1
 801cd02:	b210      	sxth	r0, r2
 801cd04:	4770      	bx	lr
 801cd06:	ee07 2a90 	vmov	s15, r2
 801cd0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cd0e:	ee07 0a90 	vmov	s15, r0
 801cd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cd1a:	ee07 3a10 	vmov	s14, r3
 801cd1e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801cd22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cd26:	ee07 1a90 	vmov	s15, r1
 801cd2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cd32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cd36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd3e:	bfcc      	ite	gt
 801cd40:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cd44:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cd48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cd4c:	ee17 3a90 	vmov	r3, s15
 801cd50:	b218      	sxth	r0, r3
 801cd52:	4770      	bx	lr

0801cd54 <_ZN8touchgfx12TextProviderC1Ev>:
 801cd54:	b538      	push	{r3, r4, r5, lr}
 801cd56:	2500      	movs	r5, #0
 801cd58:	2302      	movs	r3, #2
 801cd5a:	4604      	mov	r4, r0
 801cd5c:	220e      	movs	r2, #14
 801cd5e:	7403      	strb	r3, [r0, #16]
 801cd60:	4629      	mov	r1, r5
 801cd62:	6145      	str	r5, [r0, #20]
 801cd64:	7605      	strb	r5, [r0, #24]
 801cd66:	83c5      	strh	r5, [r0, #30]
 801cd68:	8405      	strh	r5, [r0, #32]
 801cd6a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801cd6c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801cd6e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801cd70:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801cd74:	e9c0 5500 	strd	r5, r5, [r0]
 801cd78:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801cd7c:	304c      	adds	r0, #76	@ 0x4c
 801cd7e:	f011 f955 	bl	802e02c <memset>
 801cd82:	2301      	movs	r3, #1
 801cd84:	4620      	mov	r0, r4
 801cd86:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801cd8a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801cd8e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801cd92:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801cd96:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801cd9a:	f7f4 fc55 	bl	8011648 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801cd9e:	4620      	mov	r0, r4
 801cda0:	bd38      	pop	{r3, r4, r5, pc}

0801cda2 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801cda2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801cda4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cda8:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801cdaa:	fab0 f080 	clz	r0, r0
 801cdae:	0940      	lsrs	r0, r0, #5
 801cdb0:	4770      	bx	lr

0801cdb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cdb2:	b530      	push	{r4, r5, lr}
 801cdb4:	2500      	movs	r5, #0
 801cdb6:	2401      	movs	r4, #1
 801cdb8:	6843      	ldr	r3, [r0, #4]
 801cdba:	b913      	cbnz	r3, 801cdc2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cdbc:	6803      	ldr	r3, [r0, #0]
 801cdbe:	b313      	cbz	r3, 801ce06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cdc0:	6043      	str	r3, [r0, #4]
 801cdc2:	7e03      	ldrb	r3, [r0, #24]
 801cdc4:	b143      	cbz	r3, 801cdd8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cdc6:	6943      	ldr	r3, [r0, #20]
 801cdc8:	b12b      	cbz	r3, 801cdd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cdca:	881a      	ldrh	r2, [r3, #0]
 801cdcc:	b11a      	cbz	r2, 801cdd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cdce:	1c9a      	adds	r2, r3, #2
 801cdd0:	6142      	str	r2, [r0, #20]
 801cdd2:	8818      	ldrh	r0, [r3, #0]
 801cdd4:	bd30      	pop	{r4, r5, pc}
 801cdd6:	7605      	strb	r5, [r0, #24]
 801cdd8:	6843      	ldr	r3, [r0, #4]
 801cdda:	8819      	ldrh	r1, [r3, #0]
 801cddc:	b199      	cbz	r1, 801ce06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cdde:	1c9a      	adds	r2, r3, #2
 801cde0:	2902      	cmp	r1, #2
 801cde2:	6042      	str	r2, [r0, #4]
 801cde4:	d1f5      	bne.n	801cdd2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801cde6:	7c03      	ldrb	r3, [r0, #16]
 801cde8:	2b01      	cmp	r3, #1
 801cdea:	d8e5      	bhi.n	801cdb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cdec:	1c5a      	adds	r2, r3, #1
 801cdee:	3302      	adds	r3, #2
 801cdf0:	7402      	strb	r2, [r0, #16]
 801cdf2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cdf6:	6143      	str	r3, [r0, #20]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d0dd      	beq.n	801cdb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cdfc:	881b      	ldrh	r3, [r3, #0]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d0da      	beq.n	801cdb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce02:	7604      	strb	r4, [r0, #24]
 801ce04:	e7d8      	b.n	801cdb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce06:	2000      	movs	r0, #0
 801ce08:	e7e4      	b.n	801cdd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ce0a:	6001      	str	r1, [r0, #0]
 801ce0c:	2100      	movs	r1, #0
 801ce0e:	b430      	push	{r4, r5}
 801ce10:	6041      	str	r1, [r0, #4]
 801ce12:	6815      	ldr	r5, [r2, #0]
 801ce14:	6085      	str	r5, [r0, #8]
 801ce16:	6852      	ldr	r2, [r2, #4]
 801ce18:	6443      	str	r3, [r0, #68]	@ 0x44
 801ce1a:	9b02      	ldr	r3, [sp, #8]
 801ce1c:	60c2      	str	r2, [r0, #12]
 801ce1e:	7401      	strb	r1, [r0, #16]
 801ce20:	6141      	str	r1, [r0, #20]
 801ce22:	7601      	strb	r1, [r0, #24]
 801ce24:	8701      	strh	r1, [r0, #56]	@ 0x38
 801ce26:	8401      	strh	r1, [r0, #32]
 801ce28:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801ce2c:	6483      	str	r3, [r0, #72]	@ 0x48
 801ce2e:	bc30      	pop	{r4, r5}
 801ce30:	f7f4 bc0a 	b.w	8011648 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ce34 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801ce34:	b408      	push	{r3}
 801ce36:	b510      	push	{r4, lr}
 801ce38:	b085      	sub	sp, #20
 801ce3a:	ac07      	add	r4, sp, #28
 801ce3c:	f854 3b04 	ldr.w	r3, [r4], #4
 801ce40:	9300      	str	r3, [sp, #0]
 801ce42:	4613      	mov	r3, r2
 801ce44:	4622      	mov	r2, r4
 801ce46:	9403      	str	r4, [sp, #12]
 801ce48:	f7ff ffdf 	bl	801ce0a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ce4c:	b005      	add	sp, #20
 801ce4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce52:	b001      	add	sp, #4
 801ce54:	4770      	bx	lr

0801ce56 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ce56:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce58:	4605      	mov	r5, r0
 801ce5a:	4608      	mov	r0, r1
 801ce5c:	b1f1      	cbz	r1, 801ce9c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ce5e:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801ce62:	460b      	mov	r3, r1
 801ce64:	f101 0708 	add.w	r7, r1, #8
 801ce68:	4622      	mov	r2, r4
 801ce6a:	6818      	ldr	r0, [r3, #0]
 801ce6c:	3308      	adds	r3, #8
 801ce6e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ce72:	4626      	mov	r6, r4
 801ce74:	42bb      	cmp	r3, r7
 801ce76:	c603      	stmia	r6!, {r0, r1}
 801ce78:	4634      	mov	r4, r6
 801ce7a:	d1f6      	bne.n	801ce6a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ce7c:	6818      	ldr	r0, [r3, #0]
 801ce7e:	6030      	str	r0, [r6, #0]
 801ce80:	4610      	mov	r0, r2
 801ce82:	889b      	ldrh	r3, [r3, #4]
 801ce84:	80b3      	strh	r3, [r6, #4]
 801ce86:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801ce8a:	015b      	lsls	r3, r3, #5
 801ce8c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ce90:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801ce94:	430b      	orrs	r3, r1
 801ce96:	425b      	negs	r3, r3
 801ce98:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801ce9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce9e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ce9e:	b538      	push	{r3, r4, r5, lr}
 801cea0:	460c      	mov	r4, r1
 801cea2:	6811      	ldr	r1, [r2, #0]
 801cea4:	4610      	mov	r0, r2
 801cea6:	68cd      	ldr	r5, [r1, #12]
 801cea8:	4619      	mov	r1, r3
 801ceaa:	47a8      	blx	r5
 801ceac:	2800      	cmp	r0, #0
 801ceae:	bf08      	it	eq
 801ceb0:	4620      	moveq	r0, r4
 801ceb2:	bd38      	pop	{r3, r4, r5, pc}

0801ceb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ceb8:	468c      	mov	ip, r1
 801ceba:	4605      	mov	r5, r0
 801cebc:	4614      	mov	r4, r2
 801cebe:	b942      	cbnz	r2, 801ced2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801cec0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801cec4:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801cec8:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801cecc:	4620      	mov	r0, r4
 801cece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ced2:	7b50      	ldrb	r0, [r2, #13]
 801ced4:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801ced8:	8893      	ldrh	r3, [r2, #4]
 801ceda:	0106      	lsls	r6, r0, #4
 801cedc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801cee0:	79e6      	ldrb	r6, [r4, #7]
 801cee2:	4316      	orrs	r6, r2
 801cee4:	185a      	adds	r2, r3, r1
 801cee6:	b291      	uxth	r1, r2
 801cee8:	b2b7      	uxth	r7, r6
 801ceea:	291d      	cmp	r1, #29
 801ceec:	d87f      	bhi.n	801cfee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801ceee:	2201      	movs	r2, #1
 801cef0:	10f6      	asrs	r6, r6, #3
 801cef2:	408a      	lsls	r2, r1
 801cef4:	498b      	ldr	r1, [pc, #556]	@ (801d124 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801cef6:	420a      	tst	r2, r1
 801cef8:	d12e      	bne.n	801cf58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801cefa:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801cefe:	d076      	beq.n	801cfee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801cf00:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801cf04:	4623      	mov	r3, r4
 801cf06:	f104 0e08 	add.w	lr, r4, #8
 801cf0a:	4614      	mov	r4, r2
 801cf0c:	6818      	ldr	r0, [r3, #0]
 801cf0e:	3308      	adds	r3, #8
 801cf10:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cf14:	4694      	mov	ip, r2
 801cf16:	4573      	cmp	r3, lr
 801cf18:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cf1c:	4662      	mov	r2, ip
 801cf1e:	d1f5      	bne.n	801cf0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801cf20:	6818      	ldr	r0, [r3, #0]
 801cf22:	f8cc 0000 	str.w	r0, [ip]
 801cf26:	889b      	ldrh	r3, [r3, #4]
 801cf28:	f8ac 3004 	strh.w	r3, [ip, #4]
 801cf2c:	b2b3      	uxth	r3, r6
 801cf2e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801cf32:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801cf36:	1aca      	subs	r2, r1, r3
 801cf38:	1bcf      	subs	r7, r1, r7
 801cf3a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801cf3e:	b292      	uxth	r2, r2
 801cf40:	1afb      	subs	r3, r7, r3
 801cf42:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801cf46:	10d2      	asrs	r2, r2, #3
 801cf48:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801cf4c:	4302      	orrs	r2, r0
 801cf4e:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801cf52:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801cf56:	e7b9      	b.n	801cecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801cf58:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801cf5c:	4623      	mov	r3, r4
 801cf5e:	f104 0808 	add.w	r8, r4, #8
 801cf62:	4614      	mov	r4, r2
 801cf64:	6818      	ldr	r0, [r3, #0]
 801cf66:	3308      	adds	r3, #8
 801cf68:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cf6c:	4696      	mov	lr, r2
 801cf6e:	4543      	cmp	r3, r8
 801cf70:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cf74:	4672      	mov	r2, lr
 801cf76:	d1f5      	bne.n	801cf64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801cf78:	6818      	ldr	r0, [r3, #0]
 801cf7a:	f8ce 0000 	str.w	r0, [lr]
 801cf7e:	889b      	ldrh	r3, [r3, #4]
 801cf80:	f8ae 3004 	strh.w	r3, [lr, #4]
 801cf84:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801cf86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801cf8a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801cf8c:	f640 6333 	movw	r3, #3635	@ 0xe33
 801cf90:	4299      	cmp	r1, r3
 801cf92:	d111      	bne.n	801cfb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801cf94:	f8dc 3000 	ldr.w	r3, [ip]
 801cf98:	4660      	mov	r0, ip
 801cf9a:	68db      	ldr	r3, [r3, #12]
 801cf9c:	4798      	blx	r3
 801cf9e:	7b41      	ldrb	r1, [r0, #13]
 801cfa0:	00cb      	lsls	r3, r1, #3
 801cfa2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cfa6:	7a03      	ldrb	r3, [r0, #8]
 801cfa8:	4313      	orrs	r3, r2
 801cfaa:	064a      	lsls	r2, r1, #25
 801cfac:	bf44      	itt	mi
 801cfae:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cfb2:	b21b      	sxthmi	r3, r3
 801cfb4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cfb8:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801cfbc:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801cfc0:	443b      	add	r3, r7
 801cfc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801cfc6:	4433      	add	r3, r6
 801cfc8:	b29b      	uxth	r3, r3
 801cfca:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cfce:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801cfd2:	10db      	asrs	r3, r3, #3
 801cfd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801cfd8:	4313      	orrs	r3, r2
 801cfda:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801cfde:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801cfe2:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801cfe6:	1a9b      	subs	r3, r3, r2
 801cfe8:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801cfec:	e76e      	b.n	801cecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801cfee:	f023 0204 	bic.w	r2, r3, #4
 801cff2:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801cff6:	428a      	cmp	r2, r1
 801cff8:	d003      	beq.n	801d002 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801cffa:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801cffe:	4293      	cmp	r3, r2
 801d000:	d138      	bne.n	801d074 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801d002:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801d006:	4622      	mov	r2, r4
 801d008:	f104 0808 	add.w	r8, r4, #8
 801d00c:	4634      	mov	r4, r6
 801d00e:	6810      	ldr	r0, [r2, #0]
 801d010:	3208      	adds	r2, #8
 801d012:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d016:	46b6      	mov	lr, r6
 801d018:	4542      	cmp	r2, r8
 801d01a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d01e:	4676      	mov	r6, lr
 801d020:	d1f5      	bne.n	801d00e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801d022:	6810      	ldr	r0, [r2, #0]
 801d024:	3b01      	subs	r3, #1
 801d026:	4621      	mov	r1, r4
 801d028:	f8ce 0000 	str.w	r0, [lr]
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	8892      	ldrh	r2, [r2, #4]
 801d030:	4628      	mov	r0, r5
 801d032:	f8ae 2004 	strh.w	r2, [lr, #4]
 801d036:	4662      	mov	r2, ip
 801d038:	f7ff ff31 	bl	801ce9e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d03c:	7b41      	ldrb	r1, [r0, #13]
 801d03e:	00cb      	lsls	r3, r1, #3
 801d040:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d044:	7a03      	ldrb	r3, [r0, #8]
 801d046:	0648      	lsls	r0, r1, #25
 801d048:	ea43 0302 	orr.w	r3, r3, r2
 801d04c:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801d050:	bf44      	itt	mi
 801d052:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d056:	b21b      	sxthmi	r3, r3
 801d058:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801d05c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801d060:	005b      	lsls	r3, r3, #1
 801d062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d066:	4313      	orrs	r3, r2
 801d068:	115a      	asrs	r2, r3, #5
 801d06a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d06e:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801d072:	e047      	b.n	801d104 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 801d074:	00c2      	lsls	r2, r0, #3
 801d076:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d07a:	7a22      	ldrb	r2, [r4, #8]
 801d07c:	430a      	orrs	r2, r1
 801d07e:	0641      	lsls	r1, r0, #25
 801d080:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d084:	bf44      	itt	mi
 801d086:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801d08a:	b212      	sxthmi	r2, r2
 801d08c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801d090:	f023 0210 	bic.w	r2, r3, #16
 801d094:	428a      	cmp	r2, r1
 801d096:	d003      	beq.n	801d0a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 801d098:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d09c:	4293      	cmp	r3, r2
 801d09e:	d13e      	bne.n	801d11e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 801d0a0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801d0a4:	f104 0808 	add.w	r8, r4, #8
 801d0a8:	4696      	mov	lr, r2
 801d0aa:	6820      	ldr	r0, [r4, #0]
 801d0ac:	3408      	adds	r4, #8
 801d0ae:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801d0b2:	4616      	mov	r6, r2
 801d0b4:	4544      	cmp	r4, r8
 801d0b6:	c603      	stmia	r6!, {r0, r1}
 801d0b8:	4632      	mov	r2, r6
 801d0ba:	d1f6      	bne.n	801d0aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801d0bc:	6820      	ldr	r0, [r4, #0]
 801d0be:	6030      	str	r0, [r6, #0]
 801d0c0:	4628      	mov	r0, r5
 801d0c2:	88a1      	ldrh	r1, [r4, #4]
 801d0c4:	4674      	mov	r4, lr
 801d0c6:	80b1      	strh	r1, [r6, #4]
 801d0c8:	4671      	mov	r1, lr
 801d0ca:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801d0ce:	0076      	lsls	r6, r6, #1
 801d0d0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d0d4:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801d0d8:	4316      	orrs	r6, r2
 801d0da:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d0de:	4293      	cmp	r3, r2
 801d0e0:	4662      	mov	r2, ip
 801d0e2:	bf16      	itet	ne
 801d0e4:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d0e8:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d0ec:	b29b      	uxthne	r3, r3
 801d0ee:	f7ff fed6 	bl	801ce9e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d0f2:	7b43      	ldrb	r3, [r0, #13]
 801d0f4:	7a82      	ldrb	r2, [r0, #10]
 801d0f6:	005b      	lsls	r3, r3, #1
 801d0f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d0fc:	4313      	orrs	r3, r2
 801d0fe:	1af6      	subs	r6, r6, r3
 801d100:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801d104:	7b61      	ldrb	r1, [r4, #13]
 801d106:	00cb      	lsls	r3, r1, #3
 801d108:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d10c:	7a23      	ldrb	r3, [r4, #8]
 801d10e:	4313      	orrs	r3, r2
 801d110:	064a      	lsls	r2, r1, #25
 801d112:	bf44      	itt	mi
 801d114:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d118:	b21b      	sxthmi	r3, r3
 801d11a:	1bdb      	subs	r3, r3, r7
 801d11c:	e719      	b.n	801cf52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d11e:	2300      	movs	r3, #0
 801d120:	e7a5      	b.n	801d06e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d122:	bf00      	nop
 801d124:	3fc00079 	.word	0x3fc00079

0801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d12c:	4604      	mov	r4, r0
 801d12e:	b942      	cbnz	r2, 801d142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d134:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d138:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d13c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d140:	e047      	b.n	801d1d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d142:	7b51      	ldrb	r1, [r2, #13]
 801d144:	8893      	ldrh	r3, [r2, #4]
 801d146:	010d      	lsls	r5, r1, #4
 801d148:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801d14c:	79d5      	ldrb	r5, [r2, #7]
 801d14e:	4305      	orrs	r5, r0
 801d150:	2d04      	cmp	r5, #4
 801d152:	bfcc      	ite	gt
 801d154:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d158:	f04f 0e01 	movle.w	lr, #1
 801d15c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d160:	f200 80ab 	bhi.w	801d2ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d164:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d168:	4283      	cmp	r3, r0
 801d16a:	d216      	bcs.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d16c:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d170:	4283      	cmp	r3, r0
 801d172:	d859      	bhi.n	801d228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d174:	f240 6057 	movw	r0, #1623	@ 0x657
 801d178:	4283      	cmp	r3, r0
 801d17a:	d20e      	bcs.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d17c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d180:	d24a      	bcs.n	801d218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d182:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d186:	4283      	cmp	r3, r0
 801d188:	d207      	bcs.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d18a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d18e:	4283      	cmp	r3, r0
 801d190:	d02a      	beq.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d192:	d821      	bhi.n	801d1d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d194:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d198:	d35b      	bcc.n	801d252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d19a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d19e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d1a2:	f040 80d0 	bne.w	801d346 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d1a6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d1aa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d1ae:	f040 80ca 	bne.w	801d346 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d1b2:	00cb      	lsls	r3, r1, #3
 801d1b4:	0649      	lsls	r1, r1, #25
 801d1b6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d1ba:	7a13      	ldrb	r3, [r2, #8]
 801d1bc:	ea43 0300 	orr.w	r3, r3, r0
 801d1c0:	bf44      	itt	mi
 801d1c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d1c6:	b21b      	sxthmi	r3, r3
 801d1c8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d1cc:	1b5d      	subs	r5, r3, r5
 801d1ce:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d1d2:	4610      	mov	r0, r2
 801d1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1d8:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d1dc:	4283      	cmp	r3, r0
 801d1de:	d338      	bcc.n	801d252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d1e0:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d1e4:	4283      	cmp	r3, r0
 801d1e6:	d9d8      	bls.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1e8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d1ec:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d1f0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d1f4:	f040 80f3 	bne.w	801d3de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d1f8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d1fc:	f040 80ef 	bne.w	801d3de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d200:	00cb      	lsls	r3, r1, #3
 801d202:	064e      	lsls	r6, r1, #25
 801d204:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d208:	7a13      	ldrb	r3, [r2, #8]
 801d20a:	ea43 0300 	orr.w	r3, r3, r0
 801d20e:	bf44      	itt	mi
 801d210:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d214:	b21b      	sxthmi	r3, r3
 801d216:	e7d9      	b.n	801d1cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d218:	f240 6054 	movw	r0, #1620	@ 0x654
 801d21c:	4283      	cmp	r3, r0
 801d21e:	d8e3      	bhi.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d220:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d224:	d9e0      	bls.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d226:	e7b8      	b.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d228:	f240 6074 	movw	r0, #1652	@ 0x674
 801d22c:	4283      	cmp	r3, r0
 801d22e:	d0b4      	beq.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d230:	d82d      	bhi.n	801d28e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d232:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d236:	4283      	cmp	r3, r0
 801d238:	d804      	bhi.n	801d244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d23a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d23e:	4283      	cmp	r3, r0
 801d240:	d3d2      	bcc.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d242:	e7aa      	b.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d244:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d248:	4283      	cmp	r3, r0
 801d24a:	d0cd      	beq.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d24c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d250:	d0a3      	beq.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d252:	00cb      	lsls	r3, r1, #3
 801d254:	0649      	lsls	r1, r1, #25
 801d256:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d25a:	7a13      	ldrb	r3, [r2, #8]
 801d25c:	ea43 0300 	orr.w	r3, r3, r0
 801d260:	bf44      	itt	mi
 801d262:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d266:	b21b      	sxthmi	r3, r3
 801d268:	1b5d      	subs	r5, r3, r5
 801d26a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d26e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d272:	7b53      	ldrb	r3, [r2, #13]
 801d274:	015b      	lsls	r3, r3, #5
 801d276:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d27a:	7993      	ldrb	r3, [r2, #6]
 801d27c:	430b      	orrs	r3, r1
 801d27e:	2105      	movs	r1, #5
 801d280:	005b      	lsls	r3, r3, #1
 801d282:	fb93 f3f1 	sdiv	r3, r3, r1
 801d286:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d28a:	440b      	add	r3, r1
 801d28c:	e756      	b.n	801d13c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d28e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d292:	4283      	cmp	r3, r0
 801d294:	d809      	bhi.n	801d2aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d296:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d29a:	4283      	cmp	r3, r0
 801d29c:	f4bf af7d 	bcs.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2a0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d2a4:	2b05      	cmp	r3, #5
 801d2a6:	d8d4      	bhi.n	801d252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d2a8:	e777      	b.n	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2aa:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d2ae:	4283      	cmp	r3, r0
 801d2b0:	d09a      	beq.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2b2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d2b6:	4283      	cmp	r3, r0
 801d2b8:	e7ca      	b.n	801d250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d2ba:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d2be:	d22b      	bcs.n	801d318 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d2c0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d2c4:	4283      	cmp	r3, r0
 801d2c6:	d28f      	bcs.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2c8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d2cc:	4283      	cmp	r3, r0
 801d2ce:	d816      	bhi.n	801d2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d2d0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d2d4:	4283      	cmp	r3, r0
 801d2d6:	f4bf af60 	bcs.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2da:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d2de:	4283      	cmp	r3, r0
 801d2e0:	d80a      	bhi.n	801d2f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d2e2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d2e6:	4283      	cmp	r3, r0
 801d2e8:	f4bf af57 	bcs.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2ec:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d2f0:	4283      	cmp	r3, r0
 801d2f2:	f43f af79 	beq.w	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2f6:	e7ac      	b.n	801d252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d2f8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d2fc:	e7f8      	b.n	801d2f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d2fe:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d302:	4283      	cmp	r3, r0
 801d304:	d802      	bhi.n	801d30c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d306:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d30a:	e798      	b.n	801d23e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d30c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d310:	4283      	cmp	r3, r0
 801d312:	f47f af42 	bne.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d316:	e767      	b.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d318:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d31c:	4283      	cmp	r3, r0
 801d31e:	f43f af63 	beq.w	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d322:	d802      	bhi.n	801d32a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d324:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d328:	e7f2      	b.n	801d310 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d32a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d32e:	4283      	cmp	r3, r0
 801d330:	d805      	bhi.n	801d33e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d332:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d336:	4283      	cmp	r3, r0
 801d338:	f4ff af2f 	bcc.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d33c:	e754      	b.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d33e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d342:	4283      	cmp	r3, r0
 801d344:	e7af      	b.n	801d2a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d346:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d34a:	4617      	mov	r7, r2
 801d34c:	f102 0808 	add.w	r8, r2, #8
 801d350:	4666      	mov	r6, ip
 801d352:	6838      	ldr	r0, [r7, #0]
 801d354:	3708      	adds	r7, #8
 801d356:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d35a:	46e6      	mov	lr, ip
 801d35c:	4547      	cmp	r7, r8
 801d35e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d362:	46f4      	mov	ip, lr
 801d364:	d1f5      	bne.n	801d352 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d366:	6838      	ldr	r0, [r7, #0]
 801d368:	f8ce 0000 	str.w	r0, [lr]
 801d36c:	88b9      	ldrh	r1, [r7, #4]
 801d36e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d372:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d376:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d37a:	d009      	beq.n	801d390 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d37c:	7b51      	ldrb	r1, [r2, #13]
 801d37e:	7992      	ldrb	r2, [r2, #6]
 801d380:	0149      	lsls	r1, r1, #5
 801d382:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d386:	4311      	orrs	r1, r2
 801d388:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d38c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d390:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d394:	b2ad      	uxth	r5, r5
 801d396:	d00d      	beq.n	801d3b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d398:	442b      	add	r3, r5
 801d39a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d39e:	b29b      	uxth	r3, r3
 801d3a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d3a4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d3a8:	10db      	asrs	r3, r3, #3
 801d3aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d3ae:	4313      	orrs	r3, r2
 801d3b0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d3b4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d3b8:	00cb      	lsls	r3, r1, #3
 801d3ba:	064f      	lsls	r7, r1, #25
 801d3bc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d3c0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d3c4:	ea43 0302 	orr.w	r3, r3, r2
 801d3c8:	bf44      	itt	mi
 801d3ca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d3ce:	b21b      	sxthmi	r3, r3
 801d3d0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d3d4:	1b5b      	subs	r3, r3, r5
 801d3d6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d3da:	4632      	mov	r2, r6
 801d3dc:	e6f9      	b.n	801d1d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d3de:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d3e2:	4617      	mov	r7, r2
 801d3e4:	f102 0908 	add.w	r9, r2, #8
 801d3e8:	4666      	mov	r6, ip
 801d3ea:	6838      	ldr	r0, [r7, #0]
 801d3ec:	3708      	adds	r7, #8
 801d3ee:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d3f2:	46e0      	mov	r8, ip
 801d3f4:	454f      	cmp	r7, r9
 801d3f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d3fa:	46c4      	mov	ip, r8
 801d3fc:	d1f5      	bne.n	801d3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d3fe:	6838      	ldr	r0, [r7, #0]
 801d400:	f8c8 0000 	str.w	r0, [r8]
 801d404:	88b9      	ldrh	r1, [r7, #4]
 801d406:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d40a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d40e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d412:	d009      	beq.n	801d428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d414:	7b51      	ldrb	r1, [r2, #13]
 801d416:	7992      	ldrb	r2, [r2, #6]
 801d418:	0149      	lsls	r1, r1, #5
 801d41a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d41e:	4311      	orrs	r1, r2
 801d420:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d424:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d428:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d42c:	d00e      	beq.n	801d44c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d42e:	eba3 030e 	sub.w	r3, r3, lr
 801d432:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d436:	b29b      	uxth	r3, r3
 801d438:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d43c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d440:	10db      	asrs	r3, r3, #3
 801d442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d446:	4313      	orrs	r3, r2
 801d448:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d44c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d450:	00cb      	lsls	r3, r1, #3
 801d452:	0648      	lsls	r0, r1, #25
 801d454:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d458:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d45c:	ea43 0302 	orr.w	r3, r3, r2
 801d460:	bf44      	itt	mi
 801d462:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d466:	b21b      	sxthmi	r3, r3
 801d468:	1b5d      	subs	r5, r3, r5
 801d46a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d46e:	e7b4      	b.n	801d3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d470 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d474:	461e      	mov	r6, r3
 801d476:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d478:	4604      	mov	r4, r0
 801d47a:	4617      	mov	r7, r2
 801d47c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d480:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d484:	f7f4 f83a 	bl	80114fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d488:	4605      	mov	r5, r0
 801d48a:	b918      	cbnz	r0, 801d494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d48c:	6030      	str	r0, [r6, #0]
 801d48e:	4628      	mov	r0, r5
 801d490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d494:	683b      	ldr	r3, [r7, #0]
 801d496:	4601      	mov	r1, r0
 801d498:	4638      	mov	r0, r7
 801d49a:	68db      	ldr	r3, [r3, #12]
 801d49c:	4798      	blx	r3
 801d49e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d4a2:	4602      	mov	r2, r0
 801d4a4:	6030      	str	r0, [r6, #0]
 801d4a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d4aa:	d213      	bcs.n	801d4d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d4ac:	4643      	mov	r3, r8
 801d4ae:	4639      	mov	r1, r7
 801d4b0:	4620      	mov	r0, r4
 801d4b2:	f7ff fe39 	bl	801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d4b6:	6030      	str	r0, [r6, #0]
 801d4b8:	6833      	ldr	r3, [r6, #0]
 801d4ba:	b143      	cbz	r3, 801d4ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d4bc:	7b5a      	ldrb	r2, [r3, #13]
 801d4be:	7a9b      	ldrb	r3, [r3, #10]
 801d4c0:	0052      	lsls	r2, r2, #1
 801d4c2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d4c6:	4313      	orrs	r3, r2
 801d4c8:	bf0c      	ite	eq
 801d4ca:	2301      	moveq	r3, #1
 801d4cc:	2300      	movne	r3, #0
 801d4ce:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d4d2:	e7dc      	b.n	801d48e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d4d4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d4d8:	b29b      	uxth	r3, r3
 801d4da:	2b7f      	cmp	r3, #127	@ 0x7f
 801d4dc:	d804      	bhi.n	801d4e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d4de:	4639      	mov	r1, r7
 801d4e0:	4620      	mov	r0, r4
 801d4e2:	f7ff fce7 	bl	801ceb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d4e6:	e7e6      	b.n	801d4b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d4e8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d0e3      	beq.n	801d4b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d4f0:	f640 1302 	movw	r3, #2306	@ 0x902
 801d4f4:	429d      	cmp	r5, r3
 801d4f6:	d1df      	bne.n	801d4b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d4f8:	4601      	mov	r1, r0
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	f7ff fcab 	bl	801ce56 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d500:	e7d9      	b.n	801d4b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d502 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d502:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d506:	461e      	mov	r6, r3
 801d508:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d50a:	4604      	mov	r4, r0
 801d50c:	4617      	mov	r7, r2
 801d50e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d512:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d516:	f7f3 fff1 	bl	80114fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d51a:	4605      	mov	r5, r0
 801d51c:	b918      	cbnz	r0, 801d526 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d51e:	6030      	str	r0, [r6, #0]
 801d520:	4628      	mov	r0, r5
 801d522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d526:	683b      	ldr	r3, [r7, #0]
 801d528:	4601      	mov	r1, r0
 801d52a:	4638      	mov	r0, r7
 801d52c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d530:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d534:	47c8      	blx	r9
 801d536:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d53a:	4602      	mov	r2, r0
 801d53c:	6030      	str	r0, [r6, #0]
 801d53e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d542:	d213      	bcs.n	801d56c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d544:	4643      	mov	r3, r8
 801d546:	4639      	mov	r1, r7
 801d548:	4620      	mov	r0, r4
 801d54a:	f7ff fded 	bl	801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d54e:	6030      	str	r0, [r6, #0]
 801d550:	6833      	ldr	r3, [r6, #0]
 801d552:	b143      	cbz	r3, 801d566 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d554:	7b5a      	ldrb	r2, [r3, #13]
 801d556:	7a9b      	ldrb	r3, [r3, #10]
 801d558:	0052      	lsls	r2, r2, #1
 801d55a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d55e:	4313      	orrs	r3, r2
 801d560:	bf0c      	ite	eq
 801d562:	2301      	moveq	r3, #1
 801d564:	2300      	movne	r3, #0
 801d566:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d56a:	e7d9      	b.n	801d520 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d56c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d570:	b29b      	uxth	r3, r3
 801d572:	2b7f      	cmp	r3, #127	@ 0x7f
 801d574:	d804      	bhi.n	801d580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d576:	4639      	mov	r1, r7
 801d578:	4620      	mov	r0, r4
 801d57a:	f7ff fc9b 	bl	801ceb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d57e:	e7e6      	b.n	801d54e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d580:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d584:	2b00      	cmp	r3, #0
 801d586:	d0e3      	beq.n	801d550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d588:	f640 1302 	movw	r3, #2306	@ 0x902
 801d58c:	429d      	cmp	r5, r3
 801d58e:	d1df      	bne.n	801d550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d590:	4601      	mov	r1, r0
 801d592:	4620      	mov	r0, r4
 801d594:	f7ff fc5f 	bl	801ce56 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d598:	e7d9      	b.n	801d54e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d59a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d59a:	b510      	push	{r4, lr}
 801d59c:	4604      	mov	r4, r0
 801d59e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801d5a2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d5a4:	b1e1      	cbz	r1, 801d5e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d5a6:	2b0a      	cmp	r3, #10
 801d5a8:	d02d      	beq.n	801d606 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d5aa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801d5ac:	3901      	subs	r1, #1
 801d5ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d5b2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801d5b4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801d5b8:	1c51      	adds	r1, r2, #1
 801d5ba:	b289      	uxth	r1, r1
 801d5bc:	2901      	cmp	r1, #1
 801d5be:	bf8a      	itet	hi
 801d5c0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d5c4:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801d5c6:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801d5c8:	1c5a      	adds	r2, r3, #1
 801d5ca:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d5cc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d5ce:	4413      	add	r3, r2
 801d5d0:	b29b      	uxth	r3, r3
 801d5d2:	2b09      	cmp	r3, #9
 801d5d4:	bf88      	it	hi
 801d5d6:	3b0a      	subhi	r3, #10
 801d5d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d5dc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d5de:	e7de      	b.n	801d59e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d5e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d5e2:	2b0a      	cmp	r3, #10
 801d5e4:	d00f      	beq.n	801d606 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d5e6:	4620      	mov	r0, r4
 801d5e8:	f7ff fbe3 	bl	801cdb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d5ec:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d5ee:	1c5a      	adds	r2, r3, #1
 801d5f0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d5f2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d5f4:	4413      	add	r3, r2
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	2b09      	cmp	r3, #9
 801d5fa:	bf88      	it	hi
 801d5fc:	3b0a      	subhi	r3, #10
 801d5fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d602:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d604:	e7ec      	b.n	801d5e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d606:	bd10      	pop	{r4, pc}

0801d608 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d608:	b538      	push	{r3, r4, r5, lr}
 801d60a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d60c:	4604      	mov	r4, r0
 801d60e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d612:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801d614:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801d616:	3a01      	subs	r2, #1
 801d618:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d61a:	1c5a      	adds	r2, r3, #1
 801d61c:	b292      	uxth	r2, r2
 801d61e:	2a09      	cmp	r2, #9
 801d620:	bf8a      	itet	hi
 801d622:	3b09      	subhi	r3, #9
 801d624:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801d626:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801d628:	f7ff ffb7 	bl	801d59a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d62c:	8c23      	ldrh	r3, [r4, #32]
 801d62e:	2b01      	cmp	r3, #1
 801d630:	bf9c      	itt	ls
 801d632:	3301      	addls	r3, #1
 801d634:	8423      	strhls	r3, [r4, #32]
 801d636:	8be3      	ldrh	r3, [r4, #30]
 801d638:	b90b      	cbnz	r3, 801d63e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d63a:	2302      	movs	r3, #2
 801d63c:	83e3      	strh	r3, [r4, #30]
 801d63e:	8be3      	ldrh	r3, [r4, #30]
 801d640:	4628      	mov	r0, r5
 801d642:	3b01      	subs	r3, #1
 801d644:	b29b      	uxth	r3, r3
 801d646:	83e3      	strh	r3, [r4, #30]
 801d648:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d64c:	8365      	strh	r5, [r4, #26]
 801d64e:	bd38      	pop	{r3, r4, r5, pc}

0801d650 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d650:	428a      	cmp	r2, r1
 801d652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d656:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801d658:	d932      	bls.n	801d6c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d65a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801d65c:	1a54      	subs	r4, r2, r1
 801d65e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801d662:	19ee      	adds	r6, r5, r7
 801d664:	fa1f fe84 	uxth.w	lr, r4
 801d668:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801d66c:	3e01      	subs	r6, #1
 801d66e:	b2b4      	uxth	r4, r6
 801d670:	eba4 090e 	sub.w	r9, r4, lr
 801d674:	fa1f f989 	uxth.w	r9, r9
 801d678:	2c09      	cmp	r4, #9
 801d67a:	4626      	mov	r6, r4
 801d67c:	bf88      	it	hi
 801d67e:	f1a4 060a 	subhi.w	r6, r4, #10
 801d682:	f1bc 0f00 	cmp.w	ip, #0
 801d686:	f104 34ff 	add.w	r4, r4, #4294967295
 801d68a:	bf08      	it	eq
 801d68c:	f04f 0c02 	moveq.w	ip, #2
 801d690:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d694:	b2a4      	uxth	r4, r4
 801d696:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d69a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801d69e:	454c      	cmp	r4, r9
 801d6a0:	fa1f fc8c 	uxth.w	ip, ip
 801d6a4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d6a8:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801d6ac:	d1e4      	bne.n	801d678 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d6ae:	eba5 050e 	sub.w	r5, r5, lr
 801d6b2:	eb0e 0408 	add.w	r4, lr, r8
 801d6b6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801d6ba:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d6bc:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801d6c0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801d6c2:	250a      	movs	r5, #10
 801d6c4:	1a64      	subs	r4, r4, r1
 801d6c6:	4439      	add	r1, r7
 801d6c8:	b289      	uxth	r1, r1
 801d6ca:	8704      	strh	r4, [r0, #56]	@ 0x38
 801d6cc:	2909      	cmp	r1, #9
 801d6ce:	bf88      	it	hi
 801d6d0:	390a      	subhi	r1, #10
 801d6d2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d6d4:	b18a      	cbz	r2, 801d6fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d6d6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801d6d8:	3a01      	subs	r2, #1
 801d6da:	3101      	adds	r1, #1
 801d6dc:	b292      	uxth	r2, r2
 801d6de:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d6e2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d6e4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d6e6:	b901      	cbnz	r1, 801d6ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d6e8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d6ea:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d6ec:	3901      	subs	r1, #1
 801d6ee:	b289      	uxth	r1, r1
 801d6f0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d6f2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d6f6:	844c      	strh	r4, [r1, #34]	@ 0x22
 801d6f8:	e7ec      	b.n	801d6d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d6fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6fe:	f7ff bf4c 	b.w	801d59a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d702 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d702:	b570      	push	{r4, r5, r6, lr}
 801d704:	2500      	movs	r5, #0
 801d706:	4295      	cmp	r5, r2
 801d708:	d011      	beq.n	801d72e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d70a:	8bc4      	ldrh	r4, [r0, #30]
 801d70c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d710:	4414      	add	r4, r2
 801d712:	3c01      	subs	r4, #1
 801d714:	1b64      	subs	r4, r4, r5
 801d716:	b2a4      	uxth	r4, r4
 801d718:	2c01      	cmp	r4, #1
 801d71a:	bf88      	it	hi
 801d71c:	3c02      	subhi	r4, #2
 801d71e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d722:	8b64      	ldrh	r4, [r4, #26]
 801d724:	42b4      	cmp	r4, r6
 801d726:	d117      	bne.n	801d758 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d728:	3501      	adds	r5, #1
 801d72a:	b2ad      	uxth	r5, r5
 801d72c:	e7eb      	b.n	801d706 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d72e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d732:	2400      	movs	r4, #0
 801d734:	4413      	add	r3, r2
 801d736:	b2a2      	uxth	r2, r4
 801d738:	429a      	cmp	r2, r3
 801d73a:	da0f      	bge.n	801d75c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d73c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801d73e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d742:	3401      	adds	r4, #1
 801d744:	4432      	add	r2, r6
 801d746:	b292      	uxth	r2, r2
 801d748:	2a09      	cmp	r2, #9
 801d74a:	bf88      	it	hi
 801d74c:	3a0a      	subhi	r2, #10
 801d74e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d752:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801d754:	42aa      	cmp	r2, r5
 801d756:	d0ee      	beq.n	801d736 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d758:	2000      	movs	r0, #0
 801d75a:	bd70      	pop	{r4, r5, r6, pc}
 801d75c:	2001      	movs	r0, #1
 801d75e:	e7fc      	b.n	801d75a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d760 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d764:	4605      	mov	r5, r0
 801d766:	4616      	mov	r6, r2
 801d768:	1c8c      	adds	r4, r1, #2
 801d76a:	8809      	ldrh	r1, [r1, #0]
 801d76c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d770:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d774:	42b3      	cmp	r3, r6
 801d776:	d124      	bne.n	801d7c2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d778:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d77c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d780:	f001 070f 	and.w	r7, r1, #15
 801d784:	4652      	mov	r2, sl
 801d786:	f8cd 8000 	str.w	r8, [sp]
 801d78a:	464b      	mov	r3, r9
 801d78c:	4621      	mov	r1, r4
 801d78e:	4628      	mov	r0, r5
 801d790:	f7ff ffb7 	bl	801d702 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d794:	4683      	mov	fp, r0
 801d796:	b168      	cbz	r0, 801d7b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d798:	eb0a 0109 	add.w	r1, sl, r9
 801d79c:	463a      	mov	r2, r7
 801d79e:	4628      	mov	r0, r5
 801d7a0:	4441      	add	r1, r8
 801d7a2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d7a6:	4649      	mov	r1, r9
 801d7a8:	f7ff ff52 	bl	801d650 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d7ac:	4658      	mov	r0, fp
 801d7ae:	b003      	add	sp, #12
 801d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7b4:	eb07 010a 	add.w	r1, r7, sl
 801d7b8:	4449      	add	r1, r9
 801d7ba:	4441      	add	r1, r8
 801d7bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d7c0:	e7d2      	b.n	801d768 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d7c2:	f04f 0b00 	mov.w	fp, #0
 801d7c6:	e7f1      	b.n	801d7ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d7c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d7c8:	b570      	push	{r4, r5, r6, lr}
 801d7ca:	8810      	ldrh	r0, [r2, #0]
 801d7cc:	4298      	cmp	r0, r3
 801d7ce:	d817      	bhi.n	801d800 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d7d0:	1e48      	subs	r0, r1, #1
 801d7d2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d7d6:	4298      	cmp	r0, r3
 801d7d8:	d312      	bcc.n	801d800 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d7da:	2400      	movs	r4, #0
 801d7dc:	428c      	cmp	r4, r1
 801d7de:	d20f      	bcs.n	801d800 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d7e0:	1860      	adds	r0, r4, r1
 801d7e2:	1040      	asrs	r0, r0, #1
 801d7e4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d7e8:	0085      	lsls	r5, r0, #2
 801d7ea:	42b3      	cmp	r3, r6
 801d7ec:	d902      	bls.n	801d7f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d7ee:	3001      	adds	r0, #1
 801d7f0:	b284      	uxth	r4, r0
 801d7f2:	e7f3      	b.n	801d7dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d7f4:	d201      	bcs.n	801d7fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d7f6:	b281      	uxth	r1, r0
 801d7f8:	e7f0      	b.n	801d7dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d7fa:	442a      	add	r2, r5
 801d7fc:	8850      	ldrh	r0, [r2, #2]
 801d7fe:	bd70      	pop	{r4, r5, r6, pc}
 801d800:	2000      	movs	r0, #0
 801d802:	e7fc      	b.n	801d7fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d804 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d808:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801d80a:	4604      	mov	r4, r0
 801d80c:	260b      	movs	r6, #11
 801d80e:	886f      	ldrh	r7, [r5, #2]
 801d810:	087f      	lsrs	r7, r7, #1
 801d812:	3e01      	subs	r6, #1
 801d814:	d013      	beq.n	801d83e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d816:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d818:	462a      	mov	r2, r5
 801d81a:	4639      	mov	r1, r7
 801d81c:	4620      	mov	r0, r4
 801d81e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d822:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d826:	4643      	mov	r3, r8
 801d828:	f7ff ffce 	bl	801d7c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d82c:	b138      	cbz	r0, 801d83e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d82e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d832:	4642      	mov	r2, r8
 801d834:	4620      	mov	r0, r4
 801d836:	f7ff ff93 	bl	801d760 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d83a:	2800      	cmp	r0, #0
 801d83c:	d1e9      	bne.n	801d812 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d844 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d844:	b570      	push	{r4, r5, r6, lr}
 801d846:	694a      	ldr	r2, [r1, #20]
 801d848:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801d84a:	684b      	ldr	r3, [r1, #4]
 801d84c:	1b54      	subs	r4, r2, r5
 801d84e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801d850:	f000 8106 	beq.w	801da60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d854:	1b9b      	subs	r3, r3, r6
 801d856:	d003      	beq.n	801d860 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d858:	4363      	muls	r3, r4
 801d85a:	2210      	movs	r2, #16
 801d85c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d860:	680c      	ldr	r4, [r1, #0]
 801d862:	698a      	ldr	r2, [r1, #24]
 801d864:	1b65      	subs	r5, r4, r5
 801d866:	f000 80fd 	beq.w	801da64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d86a:	1b92      	subs	r2, r2, r6
 801d86c:	d003      	beq.n	801d876 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d86e:	436a      	muls	r2, r5
 801d870:	2410      	movs	r4, #16
 801d872:	fb92 f2f4 	sdiv	r2, r2, r4
 801d876:	1a9b      	subs	r3, r3, r2
 801d878:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801daa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d87c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d880:	460a      	mov	r2, r1
 801d882:	ee07 3a90 	vmov	s15, r3
 801d886:	f100 040c 	add.w	r4, r0, #12
 801d88a:	4603      	mov	r3, r0
 801d88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d890:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d894:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d898:	eeb1 6a43 	vneg.f32	s12, s6
 801d89c:	edd2 7a02 	vldr	s15, [r2, #8]
 801d8a0:	3214      	adds	r2, #20
 801d8a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d8a6:	ece3 6a01 	vstmia	r3!, {s13}
 801d8aa:	429c      	cmp	r4, r3
 801d8ac:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d8b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d8b4:	edc3 7a02 	vstr	s15, [r3, #8]
 801d8b8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d8bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d8c0:	edc3 7a05 	vstr	s15, [r3, #20]
 801d8c4:	d1ea      	bne.n	801d89c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d8c6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d8c8:	698b      	ldr	r3, [r1, #24]
 801d8ca:	edd0 4a02 	vldr	s9, [r0, #8]
 801d8ce:	1a9b      	subs	r3, r3, r2
 801d8d0:	edd0 3a00 	vldr	s7, [r0]
 801d8d4:	edd0 6a01 	vldr	s13, [r0, #4]
 801d8d8:	ee07 3a90 	vmov	s15, r3
 801d8dc:	684b      	ldr	r3, [r1, #4]
 801d8de:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d8e2:	ed90 5a05 	vldr	s10, [r0, #20]
 801d8e6:	1a9b      	subs	r3, r3, r2
 801d8e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8ec:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d8f0:	ed90 2a03 	vldr	s4, [r0, #12]
 801d8f4:	ee07 3a10 	vmov	s14, r3
 801d8f8:	edd0 5a04 	vldr	s11, [r0, #16]
 801d8fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d900:	ed90 1a07 	vldr	s2, [r0, #28]
 801d904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d908:	edd0 2a06 	vldr	s5, [r0, #24]
 801d90c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d910:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d914:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d918:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d91c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d920:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d924:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801d928:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d92a:	694a      	ldr	r2, [r1, #20]
 801d92c:	1b13      	subs	r3, r2, r4
 801d92e:	ee07 3a10 	vmov	s14, r3
 801d932:	680b      	ldr	r3, [r1, #0]
 801d934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d938:	1b1b      	subs	r3, r3, r4
 801d93a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d93e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d942:	ee07 3a10 	vmov	s14, r3
 801d946:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d94a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d94e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d952:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d956:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801d95a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d95c:	698b      	ldr	r3, [r1, #24]
 801d95e:	1a9b      	subs	r3, r3, r2
 801d960:	ee06 3a90 	vmov	s13, r3
 801d964:	684b      	ldr	r3, [r1, #4]
 801d966:	1a9b      	subs	r3, r3, r2
 801d968:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d96c:	ee07 3a10 	vmov	s14, r3
 801d970:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d978:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d97c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d980:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d984:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d988:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801d98c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d98e:	694a      	ldr	r2, [r1, #20]
 801d990:	1b13      	subs	r3, r2, r4
 801d992:	ee07 3a10 	vmov	s14, r3
 801d996:	680b      	ldr	r3, [r1, #0]
 801d998:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d99c:	1b1b      	subs	r3, r3, r4
 801d99e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d9a2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d9a6:	ee07 3a10 	vmov	s14, r3
 801d9aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d9ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d9b2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d9b6:	edd0 5a08 	vldr	s11, [r0, #32]
 801d9ba:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d9be:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d9c2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d9c6:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801d9ca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d9cc:	698b      	ldr	r3, [r1, #24]
 801d9ce:	1a9b      	subs	r3, r3, r2
 801d9d0:	ee07 3a10 	vmov	s14, r3
 801d9d4:	684b      	ldr	r3, [r1, #4]
 801d9d6:	1a9b      	subs	r3, r3, r2
 801d9d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d9dc:	ee01 3a90 	vmov	s3, r3
 801d9e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d9e4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d9e8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d9ec:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d9f0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d9f4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d9f8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d9fc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d9fe:	694a      	ldr	r2, [r1, #20]
 801da00:	1b13      	subs	r3, r2, r4
 801da02:	ee03 3a10 	vmov	s6, r3
 801da06:	680b      	ldr	r3, [r1, #0]
 801da08:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801da0c:	1b1b      	subs	r3, r3, r4
 801da0e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801da12:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801da16:	ee03 3a10 	vmov	s6, r3
 801da1a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801da1e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801da22:	eee1 5a04 	vfma.f32	s11, s2, s8
 801da26:	ee25 6a86 	vmul.f32	s12, s11, s12
 801da2a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801da2e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801da32:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801da36:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801da3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da3e:	dd13      	ble.n	801da68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801da40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801da44:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801da48:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801da4a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801da4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801da52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da56:	dd15      	ble.n	801da84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801da58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801da5c:	6403      	str	r3, [r0, #64]	@ 0x40
 801da5e:	bd70      	pop	{r4, r5, r6, pc}
 801da60:	4623      	mov	r3, r4
 801da62:	e6fd      	b.n	801d860 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801da64:	462a      	mov	r2, r5
 801da66:	e706      	b.n	801d876 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801da68:	d502      	bpl.n	801da70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801da6a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801da6e:	e7e9      	b.n	801da44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801da70:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801da74:	eea3 2a85 	vfma.f32	s4, s7, s10
 801da78:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da80:	dade      	bge.n	801da40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801da82:	e7f2      	b.n	801da6a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801da84:	d502      	bpl.n	801da8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801da86:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801da8a:	e7e7      	b.n	801da5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801da8c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801da90:	eee3 4a86 	vfma.f32	s9, s7, s12
 801da94:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801da98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da9c:	dadc      	bge.n	801da58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801da9e:	e7f2      	b.n	801da86 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801daa0:	3d800000 	.word	0x3d800000

0801daa4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801daa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801daa8:	2714      	movs	r7, #20
 801daaa:	435f      	muls	r7, r3
 801daac:	eb02 0c07 	add.w	ip, r2, r7
 801dab0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801dab4:	f115 0e0f 	adds.w	lr, r5, #15
 801dab8:	f100 80a2 	bmi.w	801dc00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801dabc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801dac0:	9c08      	ldr	r4, [sp, #32]
 801dac2:	2614      	movs	r6, #20
 801dac4:	f8c0 e014 	str.w	lr, [r0, #20]
 801dac8:	4366      	muls	r6, r4
 801daca:	eb02 0806 	add.w	r8, r2, r6
 801dace:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dad2:	f115 040f 	adds.w	r4, r5, #15
 801dad6:	f100 809f 	bmi.w	801dc18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801dada:	1124      	asrs	r4, r4, #4
 801dadc:	eba4 040e 	sub.w	r4, r4, lr
 801dae0:	6184      	str	r4, [r0, #24]
 801dae2:	2c00      	cmp	r4, #0
 801dae4:	f000 808a 	beq.w	801dbfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801dae8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801daec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801daf0:	5995      	ldr	r5, [r2, r6]
 801daf2:	eba4 0809 	sub.w	r8, r4, r9
 801daf6:	59d4      	ldr	r4, [r2, r7]
 801daf8:	eba5 0a04 	sub.w	sl, r5, r4
 801dafc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801db00:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801db04:	fb0e fe05 	mul.w	lr, lr, r5
 801db08:	fb0a ee19 	mls	lr, sl, r9, lr
 801db0c:	fb08 e404 	mla	r4, r8, r4, lr
 801db10:	3c01      	subs	r4, #1
 801db12:	19a4      	adds	r4, r4, r6
 801db14:	f100 808c 	bmi.w	801dc30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801db18:	fb94 fef6 	sdiv	lr, r4, r6
 801db1c:	fb06 441e 	mls	r4, r6, lr, r4
 801db20:	f8c0 e000 	str.w	lr, [r0]
 801db24:	6104      	str	r4, [r0, #16]
 801db26:	2d00      	cmp	r5, #0
 801db28:	f2c0 8095 	blt.w	801dc56 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801db2c:	fb95 f4f6 	sdiv	r4, r5, r6
 801db30:	fb06 5514 	mls	r5, r6, r4, r5
 801db34:	6044      	str	r4, [r0, #4]
 801db36:	6085      	str	r5, [r0, #8]
 801db38:	60c6      	str	r6, [r0, #12]
 801db3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801db3e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801db42:	6945      	ldr	r5, [r0, #20]
 801db44:	59d2      	ldr	r2, [r2, r7]
 801db46:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801db4a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801dc78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801db4e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801db52:	ee07 4a10 	vmov	s14, r4
 801db56:	6804      	ldr	r4, [r0, #0]
 801db58:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801db5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db60:	ee07 2a90 	vmov	s15, r2
 801db64:	ee27 7a26 	vmul.f32	s14, s14, s13
 801db68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801db70:	edd3 6a00 	vldr	s13, [r3]
 801db74:	eee6 6a07 	vfma.f32	s13, s12, s14
 801db78:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801db7c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801db80:	edc0 6a07 	vstr	s13, [r0, #28]
 801db84:	edd0 6a01 	vldr	s13, [r0, #4]
 801db88:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801db8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801db90:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801db94:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801db98:	ed80 6a08 	vstr	s12, [r0, #32]
 801db9c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801db9e:	6242      	str	r2, [r0, #36]	@ 0x24
 801dba0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801dba4:	ed93 6a03 	vldr	s12, [r3, #12]
 801dba8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dbac:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801dbb0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801dbb4:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801dbb8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801dbbc:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801dbc0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dbc4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801dbc8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dbca:	6302      	str	r2, [r0, #48]	@ 0x30
 801dbcc:	ed93 6a06 	vldr	s12, [r3, #24]
 801dbd0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801dbd4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dbd8:	eeb0 7a46 	vmov.f32	s14, s12
 801dbdc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801dbe0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801dbe4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801dbe8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801dbec:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801dbf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dbf4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801dbf8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801dbfa:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801dbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc00:	2410      	movs	r4, #16
 801dc02:	f1c5 0501 	rsb	r5, r5, #1
 801dc06:	fb9e fef4 	sdiv	lr, lr, r4
 801dc0a:	f015 050f 	ands.w	r5, r5, #15
 801dc0e:	bf18      	it	ne
 801dc10:	2501      	movne	r5, #1
 801dc12:	ebae 0e05 	sub.w	lr, lr, r5
 801dc16:	e753      	b.n	801dac0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801dc18:	f04f 0910 	mov.w	r9, #16
 801dc1c:	f1c5 0501 	rsb	r5, r5, #1
 801dc20:	fb94 f4f9 	sdiv	r4, r4, r9
 801dc24:	f015 050f 	ands.w	r5, r5, #15
 801dc28:	bf18      	it	ne
 801dc2a:	2501      	movne	r5, #1
 801dc2c:	1b64      	subs	r4, r4, r5
 801dc2e:	e755      	b.n	801dadc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801dc30:	4264      	negs	r4, r4
 801dc32:	fb94 fef6 	sdiv	lr, r4, r6
 801dc36:	f1ce 0800 	rsb	r8, lr, #0
 801dc3a:	fb06 441e 	mls	r4, r6, lr, r4
 801dc3e:	f8c0 8000 	str.w	r8, [r0]
 801dc42:	6104      	str	r4, [r0, #16]
 801dc44:	2c00      	cmp	r4, #0
 801dc46:	f43f af6e 	beq.w	801db26 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801dc4a:	ea6f 0e0e 	mvn.w	lr, lr
 801dc4e:	1b34      	subs	r4, r6, r4
 801dc50:	f8c0 e000 	str.w	lr, [r0]
 801dc54:	e766      	b.n	801db24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801dc56:	426d      	negs	r5, r5
 801dc58:	fb95 f4f6 	sdiv	r4, r5, r6
 801dc5c:	f1c4 0e00 	rsb	lr, r4, #0
 801dc60:	fb06 5514 	mls	r5, r6, r4, r5
 801dc64:	f8c0 e004 	str.w	lr, [r0, #4]
 801dc68:	6085      	str	r5, [r0, #8]
 801dc6a:	2d00      	cmp	r5, #0
 801dc6c:	f43f af64 	beq.w	801db38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801dc70:	43e4      	mvns	r4, r4
 801dc72:	1b75      	subs	r5, r6, r5
 801dc74:	6044      	str	r4, [r0, #4]
 801dc76:	e75e      	b.n	801db36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801dc78:	3d800000 	.word	0x3d800000

0801dc7c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801dc7c:	4602      	mov	r2, r0
 801dc7e:	b148      	cbz	r0, 801dc94 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801dc80:	2300      	movs	r3, #0
 801dc82:	b298      	uxth	r0, r3
 801dc84:	3301      	adds	r3, #1
 801dc86:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801dc8a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801dc8e:	2900      	cmp	r1, #0
 801dc90:	d1f7      	bne.n	801dc82 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801dc92:	4770      	bx	lr
 801dc94:	4770      	bx	lr

0801dc96 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801dc96:	b530      	push	{r4, r5, lr}
 801dc98:	4604      	mov	r4, r0
 801dc9a:	b159      	cbz	r1, 801dcb4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801dc9c:	b148      	cbz	r0, 801dcb2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dc9e:	2300      	movs	r3, #0
 801dca0:	b298      	uxth	r0, r3
 801dca2:	4282      	cmp	r2, r0
 801dca4:	d905      	bls.n	801dcb2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dca6:	5ccd      	ldrb	r5, [r1, r3]
 801dca8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801dcac:	3301      	adds	r3, #1
 801dcae:	2d00      	cmp	r5, #0
 801dcb0:	d1f6      	bne.n	801dca0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801dcb2:	bd30      	pop	{r4, r5, pc}
 801dcb4:	4608      	mov	r0, r1
 801dcb6:	e7fc      	b.n	801dcb2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801dcb8 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801dcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcba:	b08b      	sub	sp, #44	@ 0x2c
 801dcbc:	468c      	mov	ip, r1
 801dcbe:	4604      	mov	r4, r0
 801dcc0:	2100      	movs	r1, #0
 801dcc2:	261f      	movs	r6, #31
 801dcc4:	af01      	add	r7, sp, #4
 801dcc6:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801dcca:	1e71      	subs	r1, r6, #1
 801dccc:	fb94 fef3 	sdiv	lr, r4, r3
 801dcd0:	fb03 441e 	mls	r4, r3, lr, r4
 801dcd4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801dcd8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801dcdc:	b2ec      	uxtb	r4, r5
 801dcde:	2d09      	cmp	r5, #9
 801dce0:	bfd4      	ite	le
 801dce2:	3430      	addle	r4, #48	@ 0x30
 801dce4:	3457      	addgt	r4, #87	@ 0x57
 801dce6:	b2e4      	uxtb	r4, r4
 801dce8:	55bc      	strb	r4, [r7, r6]
 801dcea:	4674      	mov	r4, lr
 801dcec:	b974      	cbnz	r4, 801dd0c <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801dcee:	2800      	cmp	r0, #0
 801dcf0:	da05      	bge.n	801dcfe <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801dcf2:	ab0a      	add	r3, sp, #40	@ 0x28
 801dcf4:	4419      	add	r1, r3
 801dcf6:	232d      	movs	r3, #45	@ 0x2d
 801dcf8:	f801 3c24 	strb.w	r3, [r1, #-36]
 801dcfc:	1eb1      	subs	r1, r6, #2
 801dcfe:	3101      	adds	r1, #1
 801dd00:	4660      	mov	r0, ip
 801dd02:	4439      	add	r1, r7
 801dd04:	f7ff ffc7 	bl	801dc96 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dd08:	b00b      	add	sp, #44	@ 0x2c
 801dd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd0c:	460e      	mov	r6, r1
 801dd0e:	e7dc      	b.n	801dcca <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801dd10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801dd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd12:	468c      	mov	ip, r1
 801dd14:	b08b      	sub	sp, #44	@ 0x2c
 801dd16:	2100      	movs	r1, #0
 801dd18:	ae01      	add	r6, sp, #4
 801dd1a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801dd1e:	211f      	movs	r1, #31
 801dd20:	fbb0 f7f3 	udiv	r7, r0, r3
 801dd24:	fb03 0517 	mls	r5, r3, r7, r0
 801dd28:	4638      	mov	r0, r7
 801dd2a:	b2ec      	uxtb	r4, r5
 801dd2c:	2d09      	cmp	r5, #9
 801dd2e:	bfd4      	ite	le
 801dd30:	3430      	addle	r4, #48	@ 0x30
 801dd32:	3457      	addgt	r4, #87	@ 0x57
 801dd34:	b2e4      	uxtb	r4, r4
 801dd36:	558c      	strb	r4, [r1, r6]
 801dd38:	1e4c      	subs	r4, r1, #1
 801dd3a:	b92f      	cbnz	r7, 801dd48 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801dd3c:	4431      	add	r1, r6
 801dd3e:	4660      	mov	r0, ip
 801dd40:	f7ff ffa9 	bl	801dc96 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dd44:	b00b      	add	sp, #44	@ 0x2c
 801dd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd48:	4621      	mov	r1, r4
 801dd4a:	e7e9      	b.n	801dd20 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801dd4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd50:	b085      	sub	sp, #20
 801dd52:	4691      	mov	r9, r2
 801dd54:	6802      	ldr	r2, [r0, #0]
 801dd56:	4688      	mov	r8, r1
 801dd58:	461c      	mov	r4, r3
 801dd5a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801dd5e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801dd62:	4683      	mov	fp, r0
 801dd64:	4610      	mov	r0, r2
 801dd66:	9103      	str	r1, [sp, #12]
 801dd68:	9302      	str	r3, [sp, #8]
 801dd6a:	9201      	str	r2, [sp, #4]
 801dd6c:	f7ff ff86 	bl	801dc7c <_ZN8touchgfx7Unicode6strlenEPKt>
 801dd70:	f1b8 0f00 	cmp.w	r8, #0
 801dd74:	bf0c      	ite	eq
 801dd76:	4684      	moveq	ip, r0
 801dd78:	f100 0c01 	addne.w	ip, r0, #1
 801dd7c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801dd80:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801dd84:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801dd86:	fa1f fc8c 	uxth.w	ip, ip
 801dd8a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801dd8c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801dd90:	9903      	ldr	r1, [sp, #12]
 801dd92:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801dd96:	d041      	beq.n	801de1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801dd98:	d834      	bhi.n	801de04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801dd9a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801dd9e:	d059      	beq.n	801de54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801dda0:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801dda4:	d03a      	beq.n	801de1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801dda6:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801ddaa:	d034      	beq.n	801de16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ddac:	2400      	movs	r4, #0
 801ddae:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801ddb2:	3a01      	subs	r2, #1
 801ddb4:	b169      	cbz	r1, 801ddd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ddb6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ddb8:	458c      	cmp	ip, r1
 801ddba:	da09      	bge.n	801ddd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ddbc:	eba1 010c 	sub.w	r1, r1, ip
 801ddc0:	b289      	uxth	r1, r1
 801ddc2:	b933      	cbnz	r3, 801ddd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ddc4:	2e00      	cmp	r6, #0
 801ddc6:	d051      	beq.n	801de6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ddc8:	2800      	cmp	r0, #0
 801ddca:	d04f      	beq.n	801de6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ddcc:	440c      	add	r4, r1
 801ddce:	b2a4      	uxth	r4, r4
 801ddd0:	2100      	movs	r1, #0
 801ddd2:	682b      	ldr	r3, [r5, #0]
 801ddd4:	4293      	cmp	r3, r2
 801ddd6:	da07      	bge.n	801dde8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ddd8:	f1b8 0f00 	cmp.w	r8, #0
 801dddc:	d004      	beq.n	801dde8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ddde:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801dde2:	682b      	ldr	r3, [r5, #0]
 801dde4:	3301      	adds	r3, #1
 801dde6:	602b      	str	r3, [r5, #0]
 801dde8:	2730      	movs	r7, #48	@ 0x30
 801ddea:	2c00      	cmp	r4, #0
 801ddec:	d04e      	beq.n	801de8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ddee:	682e      	ldr	r6, [r5, #0]
 801ddf0:	3c01      	subs	r4, #1
 801ddf2:	42b2      	cmp	r2, r6
 801ddf4:	b2a4      	uxth	r4, r4
 801ddf6:	dd49      	ble.n	801de8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ddf8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ddfc:	682b      	ldr	r3, [r5, #0]
 801ddfe:	3301      	adds	r3, #1
 801de00:	602b      	str	r3, [r5, #0]
 801de02:	e7f2      	b.n	801ddea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801de04:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801de08:	d01d      	beq.n	801de46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801de0a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801de0e:	d002      	beq.n	801de16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801de10:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801de14:	e7c9      	b.n	801ddaa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801de16:	4684      	mov	ip, r0
 801de18:	f04f 0800 	mov.w	r8, #0
 801de1c:	2c00      	cmp	r4, #0
 801de1e:	d0c6      	beq.n	801ddae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801de20:	b947      	cbnz	r7, 801de34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801de22:	2801      	cmp	r0, #1
 801de24:	d106      	bne.n	801de34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801de26:	8814      	ldrh	r4, [r2, #0]
 801de28:	2c30      	cmp	r4, #48	@ 0x30
 801de2a:	bf02      	ittt	eq
 801de2c:	3202      	addeq	r2, #2
 801de2e:	4638      	moveq	r0, r7
 801de30:	f8cb 2000 	streq.w	r2, [fp]
 801de34:	45bc      	cmp	ip, r7
 801de36:	da14      	bge.n	801de62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801de38:	b2bf      	uxth	r7, r7
 801de3a:	eba7 040c 	sub.w	r4, r7, ip
 801de3e:	46bc      	mov	ip, r7
 801de40:	b2a4      	uxth	r4, r4
 801de42:	2600      	movs	r6, #0
 801de44:	e7b3      	b.n	801ddae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801de46:	4684      	mov	ip, r0
 801de48:	b16c      	cbz	r4, 801de66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801de4a:	42b8      	cmp	r0, r7
 801de4c:	dd00      	ble.n	801de50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801de4e:	b2b8      	uxth	r0, r7
 801de50:	2400      	movs	r4, #0
 801de52:	e003      	b.n	801de5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801de54:	f04f 0c01 	mov.w	ip, #1
 801de58:	2400      	movs	r4, #0
 801de5a:	4660      	mov	r0, ip
 801de5c:	4626      	mov	r6, r4
 801de5e:	46a0      	mov	r8, r4
 801de60:	e7a5      	b.n	801ddae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801de62:	2400      	movs	r4, #0
 801de64:	e7ed      	b.n	801de42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801de66:	4626      	mov	r6, r4
 801de68:	46a0      	mov	r8, r4
 801de6a:	e7a0      	b.n	801ddae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801de6c:	2900      	cmp	r1, #0
 801de6e:	d0b0      	beq.n	801ddd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801de70:	2720      	movs	r7, #32
 801de72:	682e      	ldr	r6, [r5, #0]
 801de74:	2900      	cmp	r1, #0
 801de76:	d0ac      	beq.n	801ddd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801de78:	3901      	subs	r1, #1
 801de7a:	4296      	cmp	r6, r2
 801de7c:	b289      	uxth	r1, r1
 801de7e:	daa7      	bge.n	801ddd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801de80:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801de84:	682b      	ldr	r3, [r5, #0]
 801de86:	3301      	adds	r3, #1
 801de88:	602b      	str	r3, [r5, #0]
 801de8a:	e7f2      	b.n	801de72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801de8c:	b188      	cbz	r0, 801deb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801de8e:	682b      	ldr	r3, [r5, #0]
 801de90:	3801      	subs	r0, #1
 801de92:	429a      	cmp	r2, r3
 801de94:	b280      	uxth	r0, r0
 801de96:	dd0c      	ble.n	801deb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801de98:	f8db 3000 	ldr.w	r3, [fp]
 801de9c:	1c9c      	adds	r4, r3, #2
 801de9e:	f8cb 4000 	str.w	r4, [fp]
 801dea2:	881c      	ldrh	r4, [r3, #0]
 801dea4:	682b      	ldr	r3, [r5, #0]
 801dea6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801deaa:	682b      	ldr	r3, [r5, #0]
 801deac:	3301      	adds	r3, #1
 801deae:	602b      	str	r3, [r5, #0]
 801deb0:	e7ec      	b.n	801de8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801deb2:	2620      	movs	r6, #32
 801deb4:	b151      	cbz	r1, 801decc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801deb6:	6828      	ldr	r0, [r5, #0]
 801deb8:	3901      	subs	r1, #1
 801deba:	4282      	cmp	r2, r0
 801debc:	b289      	uxth	r1, r1
 801debe:	dd05      	ble.n	801decc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801dec0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801dec4:	682b      	ldr	r3, [r5, #0]
 801dec6:	3301      	adds	r3, #1
 801dec8:	602b      	str	r3, [r5, #0]
 801deca:	e7f3      	b.n	801deb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801decc:	b005      	add	sp, #20
 801dece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ded2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ded2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ded6:	2400      	movs	r4, #0
 801ded8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801dedc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801dee0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801dee4:	8014      	strh	r4, [r2, #0]
 801dee6:	701c      	strb	r4, [r3, #0]
 801dee8:	f888 4000 	strb.w	r4, [r8]
 801deec:	f88c 4000 	strb.w	r4, [ip]
 801def0:	f88e 4000 	strb.w	r4, [lr]
 801def4:	703c      	strb	r4, [r7, #0]
 801def6:	6804      	ldr	r4, [r0, #0]
 801def8:	b1a4      	cbz	r4, 801df24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801defa:	8824      	ldrh	r4, [r4, #0]
 801defc:	f04f 0901 	mov.w	r9, #1
 801df00:	b314      	cbz	r4, 801df48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801df02:	2c2b      	cmp	r4, #43	@ 0x2b
 801df04:	d001      	beq.n	801df0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801df06:	2c20      	cmp	r4, #32
 801df08:	d110      	bne.n	801df2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801df0a:	8014      	strh	r4, [r2, #0]
 801df0c:	6804      	ldr	r4, [r0, #0]
 801df0e:	b10c      	cbz	r4, 801df14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801df10:	3402      	adds	r4, #2
 801df12:	6004      	str	r4, [r0, #0]
 801df14:	680c      	ldr	r4, [r1, #0]
 801df16:	b10c      	cbz	r4, 801df1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801df18:	3401      	adds	r4, #1
 801df1a:	600c      	str	r4, [r1, #0]
 801df1c:	6804      	ldr	r4, [r0, #0]
 801df1e:	b17c      	cbz	r4, 801df40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801df20:	8824      	ldrh	r4, [r4, #0]
 801df22:	e7ed      	b.n	801df00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801df24:	680c      	ldr	r4, [r1, #0]
 801df26:	b17c      	cbz	r4, 801df48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801df28:	7824      	ldrb	r4, [r4, #0]
 801df2a:	e7e7      	b.n	801defc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801df2c:	2c2d      	cmp	r4, #45	@ 0x2d
 801df2e:	d102      	bne.n	801df36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801df30:	f883 9000 	strb.w	r9, [r3]
 801df34:	e7ea      	b.n	801df0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801df36:	2c23      	cmp	r4, #35	@ 0x23
 801df38:	d107      	bne.n	801df4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801df3a:	f888 9000 	strb.w	r9, [r8]
 801df3e:	e7e5      	b.n	801df0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801df40:	680c      	ldr	r4, [r1, #0]
 801df42:	b10c      	cbz	r4, 801df48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801df44:	7824      	ldrb	r4, [r4, #0]
 801df46:	e7db      	b.n	801df00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801df48:	2400      	movs	r4, #0
 801df4a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801df4e:	2b09      	cmp	r3, #9
 801df50:	d901      	bls.n	801df56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801df52:	2c2a      	cmp	r4, #42	@ 0x2a
 801df54:	d122      	bne.n	801df9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801df56:	2301      	movs	r3, #1
 801df58:	2c30      	cmp	r4, #48	@ 0x30
 801df5a:	f88e 3000 	strb.w	r3, [lr]
 801df5e:	d10d      	bne.n	801df7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801df60:	f88c 3000 	strb.w	r3, [ip]
 801df64:	6803      	ldr	r3, [r0, #0]
 801df66:	b10b      	cbz	r3, 801df6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801df68:	3302      	adds	r3, #2
 801df6a:	6003      	str	r3, [r0, #0]
 801df6c:	680b      	ldr	r3, [r1, #0]
 801df6e:	b10b      	cbz	r3, 801df74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801df70:	3301      	adds	r3, #1
 801df72:	600b      	str	r3, [r1, #0]
 801df74:	6803      	ldr	r3, [r0, #0]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d02f      	beq.n	801dfda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801df7a:	881c      	ldrh	r4, [r3, #0]
 801df7c:	2c2a      	cmp	r4, #42	@ 0x2a
 801df7e:	d135      	bne.n	801dfec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801df80:	f04f 33ff 	mov.w	r3, #4294967295
 801df84:	6033      	str	r3, [r6, #0]
 801df86:	6803      	ldr	r3, [r0, #0]
 801df88:	b10b      	cbz	r3, 801df8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801df8a:	3302      	adds	r3, #2
 801df8c:	6003      	str	r3, [r0, #0]
 801df8e:	680b      	ldr	r3, [r1, #0]
 801df90:	b10b      	cbz	r3, 801df96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801df92:	3301      	adds	r3, #1
 801df94:	600b      	str	r3, [r1, #0]
 801df96:	6803      	ldr	r3, [r0, #0]
 801df98:	b31b      	cbz	r3, 801dfe2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801df9a:	881c      	ldrh	r4, [r3, #0]
 801df9c:	2c2e      	cmp	r4, #46	@ 0x2e
 801df9e:	d11a      	bne.n	801dfd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dfa0:	2301      	movs	r3, #1
 801dfa2:	703b      	strb	r3, [r7, #0]
 801dfa4:	6803      	ldr	r3, [r0, #0]
 801dfa6:	b10b      	cbz	r3, 801dfac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801dfa8:	3302      	adds	r3, #2
 801dfaa:	6003      	str	r3, [r0, #0]
 801dfac:	680b      	ldr	r3, [r1, #0]
 801dfae:	b10b      	cbz	r3, 801dfb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801dfb0:	3301      	adds	r3, #1
 801dfb2:	600b      	str	r3, [r1, #0]
 801dfb4:	6803      	ldr	r3, [r0, #0]
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d036      	beq.n	801e028 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801dfba:	881b      	ldrh	r3, [r3, #0]
 801dfbc:	2b2a      	cmp	r3, #42	@ 0x2a
 801dfbe:	d137      	bne.n	801e030 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801dfc0:	f04f 33ff 	mov.w	r3, #4294967295
 801dfc4:	602b      	str	r3, [r5, #0]
 801dfc6:	6803      	ldr	r3, [r0, #0]
 801dfc8:	b10b      	cbz	r3, 801dfce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801dfca:	3302      	adds	r3, #2
 801dfcc:	6003      	str	r3, [r0, #0]
 801dfce:	680b      	ldr	r3, [r1, #0]
 801dfd0:	b10b      	cbz	r3, 801dfd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dfd2:	3301      	adds	r3, #1
 801dfd4:	600b      	str	r3, [r1, #0]
 801dfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfda:	680c      	ldr	r4, [r1, #0]
 801dfdc:	b134      	cbz	r4, 801dfec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801dfde:	7824      	ldrb	r4, [r4, #0]
 801dfe0:	e7cc      	b.n	801df7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801dfe2:	680b      	ldr	r3, [r1, #0]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d0f6      	beq.n	801dfd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dfe8:	781c      	ldrb	r4, [r3, #0]
 801dfea:	e7d7      	b.n	801df9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dfec:	2300      	movs	r3, #0
 801dfee:	220a      	movs	r2, #10
 801dff0:	6033      	str	r3, [r6, #0]
 801dff2:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801dff6:	fa1f f38c 	uxth.w	r3, ip
 801dffa:	2b09      	cmp	r3, #9
 801dffc:	d8ce      	bhi.n	801df9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dffe:	6833      	ldr	r3, [r6, #0]
 801e000:	fb02 c303 	mla	r3, r2, r3, ip
 801e004:	6033      	str	r3, [r6, #0]
 801e006:	6803      	ldr	r3, [r0, #0]
 801e008:	b10b      	cbz	r3, 801e00e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e00a:	3302      	adds	r3, #2
 801e00c:	6003      	str	r3, [r0, #0]
 801e00e:	680b      	ldr	r3, [r1, #0]
 801e010:	b10b      	cbz	r3, 801e016 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e012:	3301      	adds	r3, #1
 801e014:	600b      	str	r3, [r1, #0]
 801e016:	6803      	ldr	r3, [r0, #0]
 801e018:	b10b      	cbz	r3, 801e01e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e01a:	881c      	ldrh	r4, [r3, #0]
 801e01c:	e7e9      	b.n	801dff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e01e:	680c      	ldr	r4, [r1, #0]
 801e020:	2c00      	cmp	r4, #0
 801e022:	d0e6      	beq.n	801dff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e024:	7824      	ldrb	r4, [r4, #0]
 801e026:	e7e4      	b.n	801dff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e028:	680b      	ldr	r3, [r1, #0]
 801e02a:	b10b      	cbz	r3, 801e030 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e02c:	781b      	ldrb	r3, [r3, #0]
 801e02e:	e7c5      	b.n	801dfbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e030:	2200      	movs	r2, #0
 801e032:	240a      	movs	r4, #10
 801e034:	602a      	str	r2, [r5, #0]
 801e036:	3b30      	subs	r3, #48	@ 0x30
 801e038:	682a      	ldr	r2, [r5, #0]
 801e03a:	b29e      	uxth	r6, r3
 801e03c:	2e09      	cmp	r6, #9
 801e03e:	d813      	bhi.n	801e068 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e040:	fb04 3302 	mla	r3, r4, r2, r3
 801e044:	602b      	str	r3, [r5, #0]
 801e046:	6803      	ldr	r3, [r0, #0]
 801e048:	b10b      	cbz	r3, 801e04e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e04a:	3302      	adds	r3, #2
 801e04c:	6003      	str	r3, [r0, #0]
 801e04e:	680b      	ldr	r3, [r1, #0]
 801e050:	b10b      	cbz	r3, 801e056 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e052:	3301      	adds	r3, #1
 801e054:	600b      	str	r3, [r1, #0]
 801e056:	6803      	ldr	r3, [r0, #0]
 801e058:	b10b      	cbz	r3, 801e05e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e05a:	881b      	ldrh	r3, [r3, #0]
 801e05c:	e7eb      	b.n	801e036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e05e:	680b      	ldr	r3, [r1, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d0e8      	beq.n	801e036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e064:	781b      	ldrb	r3, [r3, #0]
 801e066:	e7e6      	b.n	801e036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e068:	2a06      	cmp	r2, #6
 801e06a:	bfa8      	it	ge
 801e06c:	2206      	movge	r2, #6
 801e06e:	602a      	str	r2, [r5, #0]
 801e070:	e7b1      	b.n	801dfd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e076:	b0a3      	sub	sp, #140	@ 0x8c
 801e078:	2600      	movs	r6, #0
 801e07a:	4607      	mov	r7, r0
 801e07c:	4688      	mov	r8, r1
 801e07e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801e082:	4631      	mov	r1, r6
 801e084:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801e086:	4648      	mov	r0, r9
 801e088:	960d      	str	r6, [sp, #52]	@ 0x34
 801e08a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e08e:	2242      	movs	r2, #66	@ 0x42
 801e090:	f00f ffcc 	bl	802e02c <memset>
 801e094:	b15f      	cbz	r7, 801e0ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e096:	f108 3aff 	add.w	sl, r8, #4294967295
 801e09a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e09c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e09e:	b152      	cbz	r2, 801e0b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e0a0:	8812      	ldrh	r2, [r2, #0]
 801e0a2:	b10a      	cbz	r2, 801e0a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e0a4:	459a      	cmp	sl, r3
 801e0a6:	dc2e      	bgt.n	801e106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e0a8:	2200      	movs	r2, #0
 801e0aa:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e0ae:	4638      	mov	r0, r7
 801e0b0:	b023      	add	sp, #140	@ 0x8c
 801e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0b6:	9a08      	ldr	r2, [sp, #32]
 801e0b8:	2a00      	cmp	r2, #0
 801e0ba:	d0f5      	beq.n	801e0a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e0bc:	7812      	ldrb	r2, [r2, #0]
 801e0be:	e7f0      	b.n	801e0a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e0c0:	2d00      	cmp	r5, #0
 801e0c2:	d0ea      	beq.n	801e09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e0c4:	782a      	ldrb	r2, [r5, #0]
 801e0c6:	b142      	cbz	r2, 801e0da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e0c8:	2a25      	cmp	r2, #37	@ 0x25
 801e0ca:	d001      	beq.n	801e0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e0cc:	459a      	cmp	sl, r3
 801e0ce:	dc08      	bgt.n	801e0e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e0d0:	f1bb 0f00 	cmp.w	fp, #0
 801e0d4:	d121      	bne.n	801e11a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e0d6:	2d00      	cmp	r5, #0
 801e0d8:	d0df      	beq.n	801e09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e0da:	782a      	ldrb	r2, [r5, #0]
 801e0dc:	f04f 0b00 	mov.w	fp, #0
 801e0e0:	e01d      	b.n	801e11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e0e2:	f1bb 0f00 	cmp.w	fp, #0
 801e0e6:	d077      	beq.n	801e1d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e0e8:	f8bb 2000 	ldrh.w	r2, [fp]
 801e0ec:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e0f0:	f1bb 0f00 	cmp.w	fp, #0
 801e0f4:	d002      	beq.n	801e0fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e0f6:	f10b 0202 	add.w	r2, fp, #2
 801e0fa:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0fc:	b10d      	cbz	r5, 801e102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e0fe:	3501      	adds	r5, #1
 801e100:	9508      	str	r5, [sp, #32]
 801e102:	3301      	adds	r3, #1
 801e104:	930d      	str	r3, [sp, #52]	@ 0x34
 801e106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e108:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e10c:	f1bb 0f00 	cmp.w	fp, #0
 801e110:	d0d6      	beq.n	801e0c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e112:	f8bb 2000 	ldrh.w	r2, [fp]
 801e116:	2a00      	cmp	r2, #0
 801e118:	d1d6      	bne.n	801e0c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e11a:	f8bb 2000 	ldrh.w	r2, [fp]
 801e11e:	2a00      	cmp	r2, #0
 801e120:	d0bb      	beq.n	801e09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e122:	459a      	cmp	sl, r3
 801e124:	ddb9      	ble.n	801e09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e126:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801e12a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801e12e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801e132:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801e136:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801e13a:	960e      	str	r6, [sp, #56]	@ 0x38
 801e13c:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801e140:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e142:	f1bb 0f00 	cmp.w	fp, #0
 801e146:	d002      	beq.n	801e14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e148:	f10b 0302 	add.w	r3, fp, #2
 801e14c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e14e:	b10d      	cbz	r5, 801e154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e150:	1c6b      	adds	r3, r5, #1
 801e152:	9308      	str	r3, [sp, #32]
 801e154:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e156:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801e15a:	a908      	add	r1, sp, #32
 801e15c:	a809      	add	r0, sp, #36	@ 0x24
 801e15e:	9305      	str	r3, [sp, #20]
 801e160:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801e164:	9304      	str	r3, [sp, #16]
 801e166:	ab0e      	add	r3, sp, #56	@ 0x38
 801e168:	9303      	str	r3, [sp, #12]
 801e16a:	ab0c      	add	r3, sp, #48	@ 0x30
 801e16c:	9302      	str	r3, [sp, #8]
 801e16e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801e172:	9301      	str	r3, [sp, #4]
 801e174:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801e178:	9300      	str	r3, [sp, #0]
 801e17a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801e17e:	f7ff fea8 	bl	801ded2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e184:	2b00      	cmp	r3, #0
 801e186:	bfbf      	itttt	lt
 801e188:	6823      	ldrlt	r3, [r4, #0]
 801e18a:	3404      	addlt	r4, #4
 801e18c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e190:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801e192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e194:	2b00      	cmp	r3, #0
 801e196:	bfbe      	ittt	lt
 801e198:	6823      	ldrlt	r3, [r4, #0]
 801e19a:	3404      	addlt	r4, #4
 801e19c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e1a0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e1a4:	bfb8      	it	lt
 801e1a6:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801e1a8:	b1d9      	cbz	r1, 801e1e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e1aa:	880b      	ldrh	r3, [r1, #0]
 801e1ac:	2b69      	cmp	r3, #105	@ 0x69
 801e1ae:	d01f      	beq.n	801e1f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e1b0:	d82f      	bhi.n	801e212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e1b2:	2b58      	cmp	r3, #88	@ 0x58
 801e1b4:	d01c      	beq.n	801e1f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e1b6:	d818      	bhi.n	801e1ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e1b8:	2b25      	cmp	r3, #37	@ 0x25
 801e1ba:	d034      	beq.n	801e226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e1bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e1be:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e1c2:	f1bb 0f00 	cmp.w	fp, #0
 801e1c6:	f000 80b7 	beq.w	801e338 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e1ca:	f8bb 5000 	ldrh.w	r5, [fp]
 801e1ce:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e1d2:	3301      	adds	r3, #1
 801e1d4:	930d      	str	r3, [sp, #52]	@ 0x34
 801e1d6:	e029      	b.n	801e22c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e1d8:	b10d      	cbz	r5, 801e1de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e1da:	782a      	ldrb	r2, [r5, #0]
 801e1dc:	e786      	b.n	801e0ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e1de:	462a      	mov	r2, r5
 801e1e0:	e784      	b.n	801e0ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e1e2:	2a00      	cmp	r2, #0
 801e1e4:	d0ea      	beq.n	801e1bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e1e6:	7813      	ldrb	r3, [r2, #0]
 801e1e8:	e7e0      	b.n	801e1ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e1ea:	3b63      	subs	r3, #99	@ 0x63
 801e1ec:	2b01      	cmp	r3, #1
 801e1ee:	d8e5      	bhi.n	801e1bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e1f0:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801e1f4:	b329      	cbz	r1, 801e242 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e1f6:	880b      	ldrh	r3, [r1, #0]
 801e1f8:	2b69      	cmp	r3, #105	@ 0x69
 801e1fa:	d063      	beq.n	801e2c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e1fc:	d825      	bhi.n	801e24a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e1fe:	2b63      	cmp	r3, #99	@ 0x63
 801e200:	d038      	beq.n	801e274 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e202:	2b64      	cmp	r3, #100	@ 0x64
 801e204:	d05e      	beq.n	801e2c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e206:	2b58      	cmp	r3, #88	@ 0x58
 801e208:	d07a      	beq.n	801e300 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e20a:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801e20e:	4625      	mov	r5, r4
 801e210:	e036      	b.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e212:	2b73      	cmp	r3, #115	@ 0x73
 801e214:	d0ec      	beq.n	801e1f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e216:	d802      	bhi.n	801e21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e218:	2b6f      	cmp	r3, #111	@ 0x6f
 801e21a:	d1cf      	bne.n	801e1bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e21c:	e7e8      	b.n	801e1f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e21e:	2b75      	cmp	r3, #117	@ 0x75
 801e220:	d0e6      	beq.n	801e1f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e222:	2b78      	cmp	r3, #120	@ 0x78
 801e224:	e7f9      	b.n	801e21a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e226:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e228:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e22e:	b10b      	cbz	r3, 801e234 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e230:	3302      	adds	r3, #2
 801e232:	9309      	str	r3, [sp, #36]	@ 0x24
 801e234:	9b08      	ldr	r3, [sp, #32]
 801e236:	2b00      	cmp	r3, #0
 801e238:	f43f af2f 	beq.w	801e09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e23c:	3301      	adds	r3, #1
 801e23e:	9308      	str	r3, [sp, #32]
 801e240:	e72b      	b.n	801e09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e242:	2a00      	cmp	r2, #0
 801e244:	d0e1      	beq.n	801e20a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e246:	7813      	ldrb	r3, [r2, #0]
 801e248:	e7d6      	b.n	801e1f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e24a:	2b73      	cmp	r3, #115	@ 0x73
 801e24c:	d036      	beq.n	801e2bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e24e:	d807      	bhi.n	801e260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e250:	2b6f      	cmp	r3, #111	@ 0x6f
 801e252:	d1da      	bne.n	801e20a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e256:	1d25      	adds	r5, r4, #4
 801e258:	2308      	movs	r3, #8
 801e25a:	eba8 0202 	sub.w	r2, r8, r2
 801e25e:	e049      	b.n	801e2f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e260:	2b75      	cmp	r3, #117	@ 0x75
 801e262:	d042      	beq.n	801e2ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e264:	2b78      	cmp	r3, #120	@ 0x78
 801e266:	d1d0      	bne.n	801e20a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e26a:	1d25      	adds	r5, r4, #4
 801e26c:	2310      	movs	r3, #16
 801e26e:	eba8 0202 	sub.w	r2, r8, r2
 801e272:	e03f      	b.n	801e2f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e274:	6823      	ldr	r3, [r4, #0]
 801e276:	1d25      	adds	r5, r4, #4
 801e278:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e27c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801e280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e282:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801e286:	2b00      	cmp	r3, #0
 801e288:	d051      	beq.n	801e32e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e28a:	881a      	ldrh	r2, [r3, #0]
 801e28c:	a80d      	add	r0, sp, #52	@ 0x34
 801e28e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801e292:	462c      	mov	r4, r5
 801e294:	9005      	str	r0, [sp, #20]
 801e296:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801e29a:	9004      	str	r0, [sp, #16]
 801e29c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e29e:	9003      	str	r0, [sp, #12]
 801e2a0:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801e2a4:	9002      	str	r0, [sp, #8]
 801e2a6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e2a8:	9001      	str	r0, [sp, #4]
 801e2aa:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801e2ae:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e2b2:	9000      	str	r0, [sp, #0]
 801e2b4:	a810      	add	r0, sp, #64	@ 0x40
 801e2b6:	f7ff fd49 	bl	801dd4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e2ba:	e7b7      	b.n	801e22c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e2bc:	1d25      	adds	r5, r4, #4
 801e2be:	6823      	ldr	r3, [r4, #0]
 801e2c0:	9310      	str	r3, [sp, #64]	@ 0x40
 801e2c2:	e7dd      	b.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e2c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e2c6:	230a      	movs	r3, #10
 801e2c8:	4649      	mov	r1, r9
 801e2ca:	6820      	ldr	r0, [r4, #0]
 801e2cc:	eba8 0202 	sub.w	r2, r8, r2
 801e2d0:	1d25      	adds	r5, r4, #4
 801e2d2:	b292      	uxth	r2, r2
 801e2d4:	f7ff fcf0 	bl	801dcb8 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801e2d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801e2dc:	2b2d      	cmp	r3, #45	@ 0x2d
 801e2de:	d1cf      	bne.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e2e0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e2e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e2e6:	3302      	adds	r3, #2
 801e2e8:	e7ea      	b.n	801e2c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e2ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e2ec:	1d25      	adds	r5, r4, #4
 801e2ee:	230a      	movs	r3, #10
 801e2f0:	eba8 0202 	sub.w	r2, r8, r2
 801e2f4:	b292      	uxth	r2, r2
 801e2f6:	4649      	mov	r1, r9
 801e2f8:	6820      	ldr	r0, [r4, #0]
 801e2fa:	f7ff fd09 	bl	801dd10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e2fe:	e7bf      	b.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e302:	2310      	movs	r3, #16
 801e304:	4649      	mov	r1, r9
 801e306:	6820      	ldr	r0, [r4, #0]
 801e308:	eba8 0202 	sub.w	r2, r8, r2
 801e30c:	1d25      	adds	r5, r4, #4
 801e30e:	b292      	uxth	r2, r2
 801e310:	f7ff fcfe 	bl	801dd10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e314:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801e318:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d0af      	beq.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e320:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801e324:	2919      	cmp	r1, #25
 801e326:	d8f7      	bhi.n	801e318 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e328:	3b20      	subs	r3, #32
 801e32a:	8013      	strh	r3, [r2, #0]
 801e32c:	e7f4      	b.n	801e318 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e32e:	9a08      	ldr	r2, [sp, #32]
 801e330:	2a00      	cmp	r2, #0
 801e332:	d0ab      	beq.n	801e28c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e334:	7812      	ldrb	r2, [r2, #0]
 801e336:	e7a9      	b.n	801e28c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e338:	2d00      	cmp	r5, #0
 801e33a:	f43f af48 	beq.w	801e1ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e33e:	782d      	ldrb	r5, [r5, #0]
 801e340:	e745      	b.n	801e1ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e342:	b507      	push	{r0, r1, r2, lr}
 801e344:	9300      	str	r3, [sp, #0]
 801e346:	4613      	mov	r3, r2
 801e348:	2200      	movs	r2, #0
 801e34a:	f7ff fe92 	bl	801e072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e34e:	b003      	add	sp, #12
 801e350:	f85d fb04 	ldr.w	pc, [sp], #4

0801e354 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e354:	b40c      	push	{r2, r3}
 801e356:	b507      	push	{r0, r1, r2, lr}
 801e358:	ab04      	add	r3, sp, #16
 801e35a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e35e:	9301      	str	r3, [sp, #4]
 801e360:	f7ff ffef 	bl	801e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e364:	b003      	add	sp, #12
 801e366:	f85d eb04 	ldr.w	lr, [sp], #4
 801e36a:	b002      	add	sp, #8
 801e36c:	4770      	bx	lr
	...

0801e370 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e370:	4b01      	ldr	r3, [pc, #4]	@ (801e378 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e372:	6018      	str	r0, [r3, #0]
 801e374:	4770      	bx	lr
 801e376:	bf00      	nop
 801e378:	2001232c 	.word	0x2001232c

0801e37c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e37c:	4b06      	ldr	r3, [pc, #24]	@ (801e398 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e37e:	881a      	ldrh	r2, [r3, #0]
 801e380:	4282      	cmp	r2, r0
 801e382:	d807      	bhi.n	801e394 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e384:	4b05      	ldr	r3, [pc, #20]	@ (801e39c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e386:	881b      	ldrh	r3, [r3, #0]
 801e388:	4413      	add	r3, r2
 801e38a:	4298      	cmp	r0, r3
 801e38c:	bfac      	ite	ge
 801e38e:	2000      	movge	r0, #0
 801e390:	2001      	movlt	r0, #1
 801e392:	4770      	bx	lr
 801e394:	2000      	movs	r0, #0
 801e396:	4770      	bx	lr
 801e398:	2001234c 	.word	0x2001234c
 801e39c:	20012350 	.word	0x20012350

0801e3a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e3a0:	b508      	push	{r3, lr}
 801e3a2:	4601      	mov	r1, r0
 801e3a4:	f7ff ffea 	bl	801e37c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e3a8:	b118      	cbz	r0, 801e3b2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e3aa:	4b02      	ldr	r3, [pc, #8]	@ (801e3b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e3b2:	bd08      	pop	{r3, pc}
 801e3b4:	20012330 	.word	0x20012330

0801e3b8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801e3b8:	b538      	push	{r3, r4, r5, lr}
 801e3ba:	4604      	mov	r4, r0
 801e3bc:	f7ff ffde 	bl	801e37c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e3c0:	b1d8      	cbz	r0, 801e3fa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e3c2:	4b0f      	ldr	r3, [pc, #60]	@ (801e400 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801e3c4:	881b      	ldrh	r3, [r3, #0]
 801e3c6:	1ae4      	subs	r4, r4, r3
 801e3c8:	230e      	movs	r3, #14
 801e3ca:	4363      	muls	r3, r4
 801e3cc:	4c0d      	ldr	r4, [pc, #52]	@ (801e404 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801e3ce:	6825      	ldr	r5, [r4, #0]
 801e3d0:	18ea      	adds	r2, r5, r3
 801e3d2:	7b12      	ldrb	r2, [r2, #12]
 801e3d4:	f012 0220 	ands.w	r2, r2, #32
 801e3d8:	d010      	beq.n	801e3fc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801e3da:	f9b1 2000 	ldrsh.w	r2, [r1]
 801e3de:	52ea      	strh	r2, [r5, r3]
 801e3e0:	6822      	ldr	r2, [r4, #0]
 801e3e2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801e3e6:	441a      	add	r2, r3
 801e3e8:	8055      	strh	r5, [r2, #2]
 801e3ea:	6822      	ldr	r2, [r4, #0]
 801e3ec:	4413      	add	r3, r2
 801e3ee:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801e3f2:	809a      	strh	r2, [r3, #4]
 801e3f4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801e3f8:	80da      	strh	r2, [r3, #6]
 801e3fa:	bd38      	pop	{r3, r4, r5, pc}
 801e3fc:	4610      	mov	r0, r2
 801e3fe:	e7fc      	b.n	801e3fa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e400:	2001234c 	.word	0x2001234c
 801e404:	20012334 	.word	0x20012334

0801e408 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801e408:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e40c:	4606      	mov	r6, r0
 801e40e:	460c      	mov	r4, r1
 801e410:	f7ff ffb4 	bl	801e37c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e414:	b918      	cbnz	r0, 801e41e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801e416:	2000      	movs	r0, #0
 801e418:	b002      	add	sp, #8
 801e41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e41e:	4608      	mov	r0, r1
 801e420:	f7f6 fc19 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e424:	2800      	cmp	r0, #0
 801e426:	d1f6      	bne.n	801e416 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e428:	4b3f      	ldr	r3, [pc, #252]	@ (801e528 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801e42a:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801e52c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801e42e:	881d      	ldrh	r5, [r3, #0]
 801e430:	f8d9 a000 	ldr.w	sl, [r9]
 801e434:	46c8      	mov	r8, r9
 801e436:	1b73      	subs	r3, r6, r5
 801e438:	250e      	movs	r5, #14
 801e43a:	435d      	muls	r5, r3
 801e43c:	eb0a 0705 	add.w	r7, sl, r5
 801e440:	7b3b      	ldrb	r3, [r7, #12]
 801e442:	f013 0f20 	tst.w	r3, #32
 801e446:	d0e6      	beq.n	801e416 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e448:	4621      	mov	r1, r4
 801e44a:	4638      	mov	r0, r7
 801e44c:	f7fc fdf2 	bl	801b034 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e450:	2800      	cmp	r0, #0
 801e452:	d1e1      	bne.n	801e418 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e454:	4639      	mov	r1, r7
 801e456:	4620      	mov	r0, r4
 801e458:	f7fc fdec 	bl	801b034 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e45c:	b108      	cbz	r0, 801e462 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801e45e:	4621      	mov	r1, r4
 801e460:	e020      	b.n	801e4a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801e462:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e466:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801e46a:	429a      	cmp	r2, r3
 801e46c:	d11e      	bne.n	801e4ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e46e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e472:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801e476:	429a      	cmp	r2, r3
 801e478:	d118      	bne.n	801e4ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e47a:	6820      	ldr	r0, [r4, #0]
 801e47c:	466b      	mov	r3, sp
 801e47e:	6861      	ldr	r1, [r4, #4]
 801e480:	c303      	stmia	r3!, {r0, r1}
 801e482:	4639      	mov	r1, r7
 801e484:	4668      	mov	r0, sp
 801e486:	f7f8 fb86 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e48a:	f8d9 3000 	ldr.w	r3, [r9]
 801e48e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e492:	442b      	add	r3, r5
 801e494:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e498:	4413      	add	r3, r2
 801e49a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801e49e:	4293      	cmp	r3, r2
 801e4a0:	dc04      	bgt.n	801e4ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e4a2:	4669      	mov	r1, sp
 801e4a4:	4630      	mov	r0, r6
 801e4a6:	f7ff ff87 	bl	801e3b8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801e4aa:	e7b5      	b.n	801e418 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e4ac:	f8d8 3000 	ldr.w	r3, [r8]
 801e4b0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e4b4:	442b      	add	r3, r5
 801e4b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e4ba:	4291      	cmp	r1, r2
 801e4bc:	d119      	bne.n	801e4f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e4be:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e4c2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e4c6:	4291      	cmp	r1, r2
 801e4c8:	d113      	bne.n	801e4f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e4ca:	6820      	ldr	r0, [r4, #0]
 801e4cc:	466a      	mov	r2, sp
 801e4ce:	6861      	ldr	r1, [r4, #4]
 801e4d0:	c203      	stmia	r2!, {r0, r1}
 801e4d2:	4619      	mov	r1, r3
 801e4d4:	4668      	mov	r0, sp
 801e4d6:	f7f8 fb5e 	bl	8016b96 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e4da:	f8d8 3000 	ldr.w	r3, [r8]
 801e4de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e4e2:	442b      	add	r3, r5
 801e4e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4e8:	4413      	add	r3, r2
 801e4ea:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e4ee:	4293      	cmp	r3, r2
 801e4f0:	ddd7      	ble.n	801e4a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f7f6 fbaf 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e4f8:	b990      	cbnz	r0, 801e520 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801e4fa:	88a7      	ldrh	r7, [r4, #4]
 801e4fc:	88e3      	ldrh	r3, [r4, #6]
 801e4fe:	fb17 f703 	smulbb	r7, r7, r3
 801e502:	f8d8 3000 	ldr.w	r3, [r8]
 801e506:	441d      	add	r5, r3
 801e508:	4628      	mov	r0, r5
 801e50a:	f7f6 fba4 	bl	8014c56 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e50e:	b948      	cbnz	r0, 801e524 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801e510:	88ab      	ldrh	r3, [r5, #4]
 801e512:	88ea      	ldrh	r2, [r5, #6]
 801e514:	fb13 f302 	smulbb	r3, r3, r2
 801e518:	42bb      	cmp	r3, r7
 801e51a:	f6bf af7c 	bge.w	801e416 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e51e:	e79e      	b.n	801e45e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801e520:	2700      	movs	r7, #0
 801e522:	e7ee      	b.n	801e502 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801e524:	2300      	movs	r3, #0
 801e526:	e7f7      	b.n	801e518 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801e528:	2001234c 	.word	0x2001234c
 801e52c:	20012334 	.word	0x20012334

0801e530 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e532:	4c24      	ldr	r4, [pc, #144]	@ (801e5c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801e534:	6823      	ldr	r3, [r4, #0]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d042      	beq.n	801e5c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e53a:	4a23      	ldr	r2, [pc, #140]	@ (801e5c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801e53c:	4d23      	ldr	r5, [pc, #140]	@ (801e5cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801e53e:	8811      	ldrh	r1, [r2, #0]
 801e540:	f8b5 c000 	ldrh.w	ip, [r5]
 801e544:	4822      	ldr	r0, [pc, #136]	@ (801e5d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e546:	4461      	add	r1, ip
 801e548:	1c4a      	adds	r2, r1, #1
 801e54a:	008f      	lsls	r7, r1, #2
 801e54c:	f022 0201 	bic.w	r2, r2, #1
 801e550:	19de      	adds	r6, r3, r7
 801e552:	0412      	lsls	r2, r2, #16
 801e554:	6006      	str	r6, [r0, #0]
 801e556:	4e1f      	ldr	r6, [pc, #124]	@ (801e5d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e558:	0c12      	lsrs	r2, r2, #16
 801e55a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e55e:	19da      	adds	r2, r3, r7
 801e560:	6032      	str	r2, [r6, #0]
 801e562:	220e      	movs	r2, #14
 801e564:	fb02 f20c 	mul.w	r2, r2, ip
 801e568:	3203      	adds	r2, #3
 801e56a:	f022 0203 	bic.w	r2, r2, #3
 801e56e:	443a      	add	r2, r7
 801e570:	4f19      	ldr	r7, [pc, #100]	@ (801e5d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e572:	4413      	add	r3, r2
 801e574:	603b      	str	r3, [r7, #0]
 801e576:	2300      	movs	r3, #0
 801e578:	4f18      	ldr	r7, [pc, #96]	@ (801e5dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e57a:	469c      	mov	ip, r3
 801e57c:	803b      	strh	r3, [r7, #0]
 801e57e:	4f18      	ldr	r7, [pc, #96]	@ (801e5e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e580:	683f      	ldr	r7, [r7, #0]
 801e582:	1aba      	subs	r2, r7, r2
 801e584:	4f17      	ldr	r7, [pc, #92]	@ (801e5e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e586:	603a      	str	r2, [r7, #0]
 801e588:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801e58c:	4a16      	ldr	r2, [pc, #88]	@ (801e5e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e58e:	8013      	strh	r3, [r2, #0]
 801e590:	428b      	cmp	r3, r1
 801e592:	d10d      	bne.n	801e5b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e594:	882d      	ldrh	r5, [r5, #0]
 801e596:	2300      	movs	r3, #0
 801e598:	6830      	ldr	r0, [r6, #0]
 801e59a:	240e      	movs	r4, #14
 801e59c:	429d      	cmp	r5, r3
 801e59e:	d90f      	bls.n	801e5c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e5a0:	fb04 0203 	mla	r2, r4, r3, r0
 801e5a4:	3301      	adds	r3, #1
 801e5a6:	7b11      	ldrb	r1, [r2, #12]
 801e5a8:	f36f 1145 	bfc	r1, #5, #1
 801e5ac:	7311      	strb	r1, [r2, #12]
 801e5ae:	e7f5      	b.n	801e59c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e5b0:	6822      	ldr	r2, [r4, #0]
 801e5b2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e5b6:	6802      	ldr	r2, [r0, #0]
 801e5b8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e5bc:	3301      	adds	r3, #1
 801e5be:	e7e7      	b.n	801e590 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5c2:	bf00      	nop
 801e5c4:	20012330 	.word	0x20012330
 801e5c8:	2001234c 	.word	0x2001234c
 801e5cc:	20012350 	.word	0x20012350
 801e5d0:	20012344 	.word	0x20012344
 801e5d4:	20012334 	.word	0x20012334
 801e5d8:	2001233c 	.word	0x2001233c
 801e5dc:	2001234e 	.word	0x2001234e
 801e5e0:	20012338 	.word	0x20012338
 801e5e4:	20012348 	.word	0x20012348
 801e5e8:	20012340 	.word	0x20012340

0801e5ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e5ec:	4b06      	ldr	r3, [pc, #24]	@ (801e608 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	b943      	cbnz	r3, 801e604 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e5f2:	b139      	cbz	r1, 801e604 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e5f4:	4b05      	ldr	r3, [pc, #20]	@ (801e60c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e5f6:	801a      	strh	r2, [r3, #0]
 801e5f8:	4b05      	ldr	r3, [pc, #20]	@ (801e610 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e5fa:	6019      	str	r1, [r3, #0]
 801e5fc:	4b05      	ldr	r3, [pc, #20]	@ (801e614 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e5fe:	6018      	str	r0, [r3, #0]
 801e600:	f7ff bf96 	b.w	801e530 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e604:	4770      	bx	lr
 801e606:	bf00      	nop
 801e608:	2001233c 	.word	0x2001233c
 801e60c:	20012350 	.word	0x20012350
 801e610:	20012338 	.word	0x20012338
 801e614:	20012330 	.word	0x20012330

0801e618 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e618:	b470      	push	{r4, r5, r6}
 801e61a:	4c07      	ldr	r4, [pc, #28]	@ (801e638 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e61c:	4605      	mov	r5, r0
 801e61e:	4610      	mov	r0, r2
 801e620:	9a03      	ldr	r2, [sp, #12]
 801e622:	6826      	ldr	r6, [r4, #0]
 801e624:	b936      	cbnz	r6, 801e634 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e626:	6025      	str	r5, [r4, #0]
 801e628:	4c04      	ldr	r4, [pc, #16]	@ (801e63c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e62a:	8021      	strh	r1, [r4, #0]
 801e62c:	4619      	mov	r1, r3
 801e62e:	bc70      	pop	{r4, r5, r6}
 801e630:	f7ff bfdc 	b.w	801e5ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e634:	bc70      	pop	{r4, r5, r6}
 801e636:	4770      	bx	lr
 801e638:	20012354 	.word	0x20012354
 801e63c:	2001234c 	.word	0x2001234c

0801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e640:	4a12      	ldr	r2, [pc, #72]	@ (801e68c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e642:	8803      	ldrh	r3, [r0, #0]
 801e644:	8812      	ldrh	r2, [r2, #0]
 801e646:	4293      	cmp	r3, r2
 801e648:	d207      	bcs.n	801e65a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e64a:	4a11      	ldr	r2, [pc, #68]	@ (801e690 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e64c:	2114      	movs	r1, #20
 801e64e:	6812      	ldr	r2, [r2, #0]
 801e650:	fb01 2303 	mla	r3, r1, r3, r2
 801e654:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e658:	4770      	bx	lr
 801e65a:	490e      	ldr	r1, [pc, #56]	@ (801e694 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e65c:	8809      	ldrh	r1, [r1, #0]
 801e65e:	4411      	add	r1, r2
 801e660:	428b      	cmp	r3, r1
 801e662:	da04      	bge.n	801e66e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e664:	1a9b      	subs	r3, r3, r2
 801e666:	4a0c      	ldr	r2, [pc, #48]	@ (801e698 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e668:	210e      	movs	r1, #14
 801e66a:	6812      	ldr	r2, [r2, #0]
 801e66c:	e7f0      	b.n	801e650 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e66e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e672:	4293      	cmp	r3, r2
 801e674:	d108      	bne.n	801e688 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e676:	4b09      	ldr	r3, [pc, #36]	@ (801e69c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e678:	781b      	ldrb	r3, [r3, #0]
 801e67a:	b91b      	cbnz	r3, 801e684 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e67c:	4b08      	ldr	r3, [pc, #32]	@ (801e6a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e67e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e682:	4770      	bx	lr
 801e684:	4b07      	ldr	r3, [pc, #28]	@ (801e6a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e686:	e7fa      	b.n	801e67e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e688:	2000      	movs	r0, #0
 801e68a:	4770      	bx	lr
 801e68c:	2001234c 	.word	0x2001234c
 801e690:	20012354 	.word	0x20012354
 801e694:	20012350 	.word	0x20012350
 801e698:	20012334 	.word	0x20012334
 801e69c:	200122bc 	.word	0x200122bc
 801e6a0:	200122be 	.word	0x200122be
 801e6a4:	200122c0 	.word	0x200122c0

0801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e6a8:	4a12      	ldr	r2, [pc, #72]	@ (801e6f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e6aa:	8803      	ldrh	r3, [r0, #0]
 801e6ac:	8812      	ldrh	r2, [r2, #0]
 801e6ae:	4293      	cmp	r3, r2
 801e6b0:	d207      	bcs.n	801e6c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e6b2:	4a11      	ldr	r2, [pc, #68]	@ (801e6f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e6b4:	2114      	movs	r1, #20
 801e6b6:	6812      	ldr	r2, [r2, #0]
 801e6b8:	fb01 2303 	mla	r3, r1, r3, r2
 801e6bc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e6c0:	4770      	bx	lr
 801e6c2:	490e      	ldr	r1, [pc, #56]	@ (801e6fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e6c4:	8809      	ldrh	r1, [r1, #0]
 801e6c6:	4411      	add	r1, r2
 801e6c8:	428b      	cmp	r3, r1
 801e6ca:	da04      	bge.n	801e6d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e6cc:	1a9b      	subs	r3, r3, r2
 801e6ce:	4a0c      	ldr	r2, [pc, #48]	@ (801e700 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e6d0:	210e      	movs	r1, #14
 801e6d2:	6812      	ldr	r2, [r2, #0]
 801e6d4:	e7f0      	b.n	801e6b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e6d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e6da:	4293      	cmp	r3, r2
 801e6dc:	d108      	bne.n	801e6f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e6de:	4b09      	ldr	r3, [pc, #36]	@ (801e704 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e6e0:	781b      	ldrb	r3, [r3, #0]
 801e6e2:	b91b      	cbnz	r3, 801e6ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e6e4:	4b08      	ldr	r3, [pc, #32]	@ (801e708 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e6e6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e6ea:	4770      	bx	lr
 801e6ec:	4b07      	ldr	r3, [pc, #28]	@ (801e70c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e6ee:	e7fa      	b.n	801e6e6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e6f0:	2000      	movs	r0, #0
 801e6f2:	4770      	bx	lr
 801e6f4:	2001234c 	.word	0x2001234c
 801e6f8:	20012354 	.word	0x20012354
 801e6fc:	20012350 	.word	0x20012350
 801e700:	20012334 	.word	0x20012334
 801e704:	200122bc 	.word	0x200122bc
 801e708:	200122c0 	.word	0x200122c0
 801e70c:	200122be 	.word	0x200122be

0801e710 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e710:	4a22      	ldr	r2, [pc, #136]	@ (801e79c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801e712:	b530      	push	{r4, r5, lr}
 801e714:	880b      	ldrh	r3, [r1, #0]
 801e716:	8812      	ldrh	r2, [r2, #0]
 801e718:	4293      	cmp	r3, r2
 801e71a:	d213      	bcs.n	801e744 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801e71c:	4a20      	ldr	r2, [pc, #128]	@ (801e7a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e71e:	2114      	movs	r1, #20
 801e720:	6812      	ldr	r2, [r2, #0]
 801e722:	fb01 2303 	mla	r3, r1, r3, r2
 801e726:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e72a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e72e:	8a1a      	ldrh	r2, [r3, #16]
 801e730:	8a5b      	ldrh	r3, [r3, #18]
 801e732:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e736:	8004      	strh	r4, [r0, #0]
 801e738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e73c:	8041      	strh	r1, [r0, #2]
 801e73e:	8082      	strh	r2, [r0, #4]
 801e740:	80c3      	strh	r3, [r0, #6]
 801e742:	e024      	b.n	801e78e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801e744:	4917      	ldr	r1, [pc, #92]	@ (801e7a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e746:	8809      	ldrh	r1, [r1, #0]
 801e748:	4411      	add	r1, r2
 801e74a:	428b      	cmp	r3, r1
 801e74c:	da10      	bge.n	801e770 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801e74e:	1a9b      	subs	r3, r3, r2
 801e750:	220e      	movs	r2, #14
 801e752:	4353      	muls	r3, r2
 801e754:	4a14      	ldr	r2, [pc, #80]	@ (801e7a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e756:	6811      	ldr	r1, [r2, #0]
 801e758:	18ca      	adds	r2, r1, r3
 801e75a:	5ecd      	ldrsh	r5, [r1, r3]
 801e75c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801e760:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801e764:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801e768:	8005      	strh	r5, [r0, #0]
 801e76a:	8044      	strh	r4, [r0, #2]
 801e76c:	8081      	strh	r1, [r0, #4]
 801e76e:	e7e7      	b.n	801e740 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e770:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e774:	4293      	cmp	r3, r2
 801e776:	d10b      	bne.n	801e790 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801e778:	4b0c      	ldr	r3, [pc, #48]	@ (801e7ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e77a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e77e:	4b0c      	ldr	r3, [pc, #48]	@ (801e7b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e780:	8081      	strh	r1, [r0, #4]
 801e782:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e786:	2300      	movs	r3, #0
 801e788:	80c2      	strh	r2, [r0, #6]
 801e78a:	8003      	strh	r3, [r0, #0]
 801e78c:	8043      	strh	r3, [r0, #2]
 801e78e:	bd30      	pop	{r4, r5, pc}
 801e790:	2300      	movs	r3, #0
 801e792:	8003      	strh	r3, [r0, #0]
 801e794:	8043      	strh	r3, [r0, #2]
 801e796:	8083      	strh	r3, [r0, #4]
 801e798:	e7d2      	b.n	801e740 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e79a:	bf00      	nop
 801e79c:	2001234c 	.word	0x2001234c
 801e7a0:	20012354 	.word	0x20012354
 801e7a4:	20012350 	.word	0x20012350
 801e7a8:	20012334 	.word	0x20012334
 801e7ac:	200122b8 	.word	0x200122b8
 801e7b0:	200122ba 	.word	0x200122ba

0801e7b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e7b4:	4a17      	ldr	r2, [pc, #92]	@ (801e814 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e7b6:	8803      	ldrh	r3, [r0, #0]
 801e7b8:	8812      	ldrh	r2, [r2, #0]
 801e7ba:	4293      	cmp	r3, r2
 801e7bc:	d213      	bcs.n	801e7e6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e7be:	4a16      	ldr	r2, [pc, #88]	@ (801e818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e7c0:	2114      	movs	r1, #20
 801e7c2:	6812      	ldr	r2, [r2, #0]
 801e7c4:	fb01 2303 	mla	r3, r1, r3, r2
 801e7c8:	8a1a      	ldrh	r2, [r3, #16]
 801e7ca:	8919      	ldrh	r1, [r3, #8]
 801e7cc:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e7d0:	428a      	cmp	r2, r1
 801e7d2:	db1d      	blt.n	801e810 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e7d4:	8a58      	ldrh	r0, [r3, #18]
 801e7d6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e7da:	895b      	ldrh	r3, [r3, #10]
 801e7dc:	4298      	cmp	r0, r3
 801e7de:	bfac      	ite	ge
 801e7e0:	2000      	movge	r0, #0
 801e7e2:	2001      	movlt	r0, #1
 801e7e4:	4770      	bx	lr
 801e7e6:	490d      	ldr	r1, [pc, #52]	@ (801e81c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e7e8:	8809      	ldrh	r1, [r1, #0]
 801e7ea:	4411      	add	r1, r2
 801e7ec:	428b      	cmp	r3, r1
 801e7ee:	da0d      	bge.n	801e80c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e7f0:	1a9b      	subs	r3, r3, r2
 801e7f2:	4a0b      	ldr	r2, [pc, #44]	@ (801e820 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e7f4:	210e      	movs	r1, #14
 801e7f6:	6812      	ldr	r2, [r2, #0]
 801e7f8:	fb01 2303 	mla	r3, r1, r3, r2
 801e7fc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e800:	891a      	ldrh	r2, [r3, #8]
 801e802:	4291      	cmp	r1, r2
 801e804:	db04      	blt.n	801e810 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e806:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e80a:	e7e6      	b.n	801e7da <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e80c:	2000      	movs	r0, #0
 801e80e:	4770      	bx	lr
 801e810:	2001      	movs	r0, #1
 801e812:	4770      	bx	lr
 801e814:	2001234c 	.word	0x2001234c
 801e818:	20012354 	.word	0x20012354
 801e81c:	20012350 	.word	0x20012350
 801e820:	20012334 	.word	0x20012334

0801e824 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e824:	4a12      	ldr	r2, [pc, #72]	@ (801e870 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e826:	8803      	ldrh	r3, [r0, #0]
 801e828:	8811      	ldrh	r1, [r2, #0]
 801e82a:	428b      	cmp	r3, r1
 801e82c:	d20b      	bcs.n	801e846 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e82e:	4a11      	ldr	r2, [pc, #68]	@ (801e874 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e830:	6812      	ldr	r2, [r2, #0]
 801e832:	b112      	cbz	r2, 801e83a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e834:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e838:	b9c0      	cbnz	r0, 801e86c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e83a:	4a0f      	ldr	r2, [pc, #60]	@ (801e878 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e83c:	6811      	ldr	r1, [r2, #0]
 801e83e:	2214      	movs	r2, #20
 801e840:	4353      	muls	r3, r2
 801e842:	58c8      	ldr	r0, [r1, r3]
 801e844:	4770      	bx	lr
 801e846:	4a0d      	ldr	r2, [pc, #52]	@ (801e87c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e848:	8812      	ldrh	r2, [r2, #0]
 801e84a:	440a      	add	r2, r1
 801e84c:	4293      	cmp	r3, r2
 801e84e:	da04      	bge.n	801e85a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e850:	4a08      	ldr	r2, [pc, #32]	@ (801e874 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e852:	6812      	ldr	r2, [r2, #0]
 801e854:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e858:	4770      	bx	lr
 801e85a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e85e:	4293      	cmp	r3, r2
 801e860:	d103      	bne.n	801e86a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e862:	4b07      	ldr	r3, [pc, #28]	@ (801e880 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801e868:	4770      	bx	lr
 801e86a:	2000      	movs	r0, #0
 801e86c:	4770      	bx	lr
 801e86e:	bf00      	nop
 801e870:	2001234c 	.word	0x2001234c
 801e874:	20012330 	.word	0x20012330
 801e878:	20012354 	.word	0x20012354
 801e87c:	20012350 	.word	0x20012350
 801e880:	200122c4 	.word	0x200122c4

0801e884 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e884:	4b24      	ldr	r3, [pc, #144]	@ (801e918 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e886:	8802      	ldrh	r2, [r0, #0]
 801e888:	8818      	ldrh	r0, [r3, #0]
 801e88a:	4282      	cmp	r2, r0
 801e88c:	d221      	bcs.n	801e8d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e88e:	4b23      	ldr	r3, [pc, #140]	@ (801e91c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e890:	6819      	ldr	r1, [r3, #0]
 801e892:	2314      	movs	r3, #20
 801e894:	fb03 1302 	mla	r3, r3, r2, r1
 801e898:	6858      	ldr	r0, [r3, #4]
 801e89a:	2800      	cmp	r0, #0
 801e89c:	d03a      	beq.n	801e914 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e89e:	4920      	ldr	r1, [pc, #128]	@ (801e920 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e8a0:	6809      	ldr	r1, [r1, #0]
 801e8a2:	2900      	cmp	r1, #0
 801e8a4:	d036      	beq.n	801e914 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e8a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e8aa:	2900      	cmp	r1, #0
 801e8ac:	d032      	beq.n	801e914 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e8ae:	891a      	ldrh	r2, [r3, #8]
 801e8b0:	8958      	ldrh	r0, [r3, #10]
 801e8b2:	4350      	muls	r0, r2
 801e8b4:	7c5a      	ldrb	r2, [r3, #17]
 801e8b6:	7cdb      	ldrb	r3, [r3, #19]
 801e8b8:	0952      	lsrs	r2, r2, #5
 801e8ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e8be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e8c2:	2b0b      	cmp	r3, #11
 801e8c4:	bf18      	it	ne
 801e8c6:	0040      	lslne	r0, r0, #1
 801e8c8:	3003      	adds	r0, #3
 801e8ca:	f020 0003 	bic.w	r0, r0, #3
 801e8ce:	4408      	add	r0, r1
 801e8d0:	4770      	bx	lr
 801e8d2:	4b14      	ldr	r3, [pc, #80]	@ (801e924 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e8d4:	881b      	ldrh	r3, [r3, #0]
 801e8d6:	4403      	add	r3, r0
 801e8d8:	429a      	cmp	r2, r3
 801e8da:	da1a      	bge.n	801e912 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e8dc:	4b12      	ldr	r3, [pc, #72]	@ (801e928 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e8de:	1a10      	subs	r0, r2, r0
 801e8e0:	210e      	movs	r1, #14
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	fb01 3000 	mla	r0, r1, r0, r3
 801e8e8:	7b03      	ldrb	r3, [r0, #12]
 801e8ea:	f003 031f 	and.w	r3, r3, #31
 801e8ee:	2b0b      	cmp	r3, #11
 801e8f0:	d10b      	bne.n	801e90a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e8f2:	8903      	ldrh	r3, [r0, #8]
 801e8f4:	8940      	ldrh	r0, [r0, #10]
 801e8f6:	4358      	muls	r0, r3
 801e8f8:	4b09      	ldr	r3, [pc, #36]	@ (801e920 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e8fa:	3003      	adds	r0, #3
 801e8fc:	6819      	ldr	r1, [r3, #0]
 801e8fe:	f020 0303 	bic.w	r3, r0, #3
 801e902:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e906:	4418      	add	r0, r3
 801e908:	4770      	bx	lr
 801e90a:	2b0d      	cmp	r3, #13
 801e90c:	d101      	bne.n	801e912 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e90e:	300d      	adds	r0, #13
 801e910:	4770      	bx	lr
 801e912:	2000      	movs	r0, #0
 801e914:	4770      	bx	lr
 801e916:	bf00      	nop
 801e918:	2001234c 	.word	0x2001234c
 801e91c:	20012354 	.word	0x20012354
 801e920:	20012330 	.word	0x20012330
 801e924:	20012350 	.word	0x20012350
 801e928:	20012334 	.word	0x20012334

0801e92c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e92c:	4b1f      	ldr	r3, [pc, #124]	@ (801e9ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801e92e:	b510      	push	{r4, lr}
 801e930:	8802      	ldrh	r2, [r0, #0]
 801e932:	881b      	ldrh	r3, [r3, #0]
 801e934:	429a      	cmp	r2, r3
 801e936:	d21a      	bcs.n	801e96e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801e938:	4b1d      	ldr	r3, [pc, #116]	@ (801e9b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801e93a:	2114      	movs	r1, #20
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	fb01 3102 	mla	r1, r1, r2, r3
 801e942:	7c4b      	ldrb	r3, [r1, #17]
 801e944:	0958      	lsrs	r0, r3, #5
 801e946:	7ccb      	ldrb	r3, [r1, #19]
 801e948:	491a      	ldr	r1, [pc, #104]	@ (801e9b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801e94a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e94e:	6809      	ldr	r1, [r1, #0]
 801e950:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801e954:	b2d8      	uxtb	r0, r3
 801e956:	b149      	cbz	r1, 801e96c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e958:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e95c:	b132      	cbz	r2, 801e96c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e95e:	2b0e      	cmp	r3, #14
 801e960:	d021      	beq.n	801e9a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e962:	280f      	cmp	r0, #15
 801e964:	d01d      	beq.n	801e9a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801e966:	2810      	cmp	r0, #16
 801e968:	bf08      	it	eq
 801e96a:	2002      	moveq	r0, #2
 801e96c:	bd10      	pop	{r4, pc}
 801e96e:	4912      	ldr	r1, [pc, #72]	@ (801e9b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801e970:	8809      	ldrh	r1, [r1, #0]
 801e972:	4419      	add	r1, r3
 801e974:	428a      	cmp	r2, r1
 801e976:	da09      	bge.n	801e98c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801e978:	1ad3      	subs	r3, r2, r3
 801e97a:	4a10      	ldr	r2, [pc, #64]	@ (801e9bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801e97c:	210e      	movs	r1, #14
 801e97e:	6812      	ldr	r2, [r2, #0]
 801e980:	fb01 2303 	mla	r3, r1, r3, r2
 801e984:	7b18      	ldrb	r0, [r3, #12]
 801e986:	f000 001f 	and.w	r0, r0, #31
 801e98a:	e7ef      	b.n	801e96c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e98c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801e990:	429a      	cmp	r2, r3
 801e992:	d108      	bne.n	801e9a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e994:	f7ec f8d4 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 801e998:	6803      	ldr	r3, [r0, #0]
 801e99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e9a0:	4718      	bx	r3
 801e9a2:	2001      	movs	r0, #1
 801e9a4:	e7e2      	b.n	801e96c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e9a6:	2000      	movs	r0, #0
 801e9a8:	e7e0      	b.n	801e96c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e9aa:	bf00      	nop
 801e9ac:	2001234c 	.word	0x2001234c
 801e9b0:	20012354 	.word	0x20012354
 801e9b4:	20012330 	.word	0x20012330
 801e9b8:	20012350 	.word	0x20012350
 801e9bc:	20012334 	.word	0x20012334

0801e9c0 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801e9c0:	2020      	movs	r0, #32
 801e9c2:	4770      	bx	lr

0801e9c4 <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801e9c4:	2002      	movs	r0, #2
 801e9c6:	4770      	bx	lr

0801e9c8 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801e9c8:	4b02      	ldr	r3, [pc, #8]	@ (801e9d4 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801e9ca:	8818      	ldrh	r0, [r3, #0]
 801e9cc:	0080      	lsls	r0, r0, #2
 801e9ce:	b280      	uxth	r0, r0
 801e9d0:	4770      	bx	lr
 801e9d2:	bf00      	nop
 801e9d4:	200122be 	.word	0x200122be

0801e9d8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e9d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9dc:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 801e9e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e9e2:	f1bc 0f00 	cmp.w	ip, #0
 801e9e6:	d073      	beq.n	801ead0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e9e8:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801e9ec:	2c00      	cmp	r4, #0
 801e9ee:	dd6f      	ble.n	801ead0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e9f0:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801e9f4:	2e00      	cmp	r6, #0
 801e9f6:	dd6b      	ble.n	801ead0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e9f8:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801e9fc:	4356      	muls	r6, r2
 801e9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ea02:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801ea06:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801ea0a:	fb02 3305 	mla	r3, r2, r5, r3
 801ea0e:	eba2 0204 	sub.w	r2, r2, r4
 801ea12:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ea16:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801ea1a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801ea1e:	d10a      	bne.n	801ea36 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801ea20:	42b1      	cmp	r1, r6
 801ea22:	d255      	bcs.n	801ead0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801ea24:	eb01 030a 	add.w	r3, r1, sl
 801ea28:	4299      	cmp	r1, r3
 801ea2a:	d202      	bcs.n	801ea32 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801ea2c:	f841 0b04 	str.w	r0, [r1], #4
 801ea30:	e7fa      	b.n	801ea28 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801ea32:	4411      	add	r1, r2
 801ea34:	e7f4      	b.n	801ea20 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801ea36:	fa1f fe8c 	uxth.w	lr, ip
 801ea3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801ea3e:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801ea42:	fa5f f980 	uxtb.w	r9, r0
 801ea46:	fb03 f30e 	mul.w	r3, r3, lr
 801ea4a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 801ea4e:	fb08 f80e 	mul.w	r8, r8, lr
 801ea52:	9301      	str	r3, [sp, #4]
 801ea54:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801ea58:	fb09 f90e 	mul.w	r9, r9, lr
 801ea5c:	9300      	str	r3, [sp, #0]
 801ea5e:	42b1      	cmp	r1, r6
 801ea60:	d236      	bcs.n	801ead0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801ea62:	eb01 0b0a 	add.w	fp, r1, sl
 801ea66:	4559      	cmp	r1, fp
 801ea68:	d230      	bcs.n	801eacc <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801ea6a:	680b      	ldr	r3, [r1, #0]
 801ea6c:	0e1c      	lsrs	r4, r3, #24
 801ea6e:	d102      	bne.n	801ea76 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801ea70:	9b00      	ldr	r3, [sp, #0]
 801ea72:	600b      	str	r3, [r1, #0]
 801ea74:	e7f7      	b.n	801ea66 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801ea76:	fb04 f00e 	mul.w	r0, r4, lr
 801ea7a:	eb0c 0504 	add.w	r5, ip, r4
 801ea7e:	3104      	adds	r1, #4
 801ea80:	1c47      	adds	r7, r0, #1
 801ea82:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801ea86:	1238      	asrs	r0, r7, #8
 801ea88:	1a27      	subs	r7, r4, r0
 801ea8a:	1a2d      	subs	r5, r5, r0
 801ea8c:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801ea90:	9801      	ldr	r0, [sp, #4]
 801ea92:	b2ed      	uxtb	r5, r5
 801ea94:	fb07 0404 	mla	r4, r7, r4, r0
 801ea98:	b2d8      	uxtb	r0, r3
 801ea9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea9e:	fb07 9000 	mla	r0, r7, r0, r9
 801eaa2:	fbb4 f4f5 	udiv	r4, r4, r5
 801eaa6:	fbb0 f0f5 	udiv	r0, r0, r5
 801eaaa:	0424      	lsls	r4, r4, #16
 801eaac:	b2c0      	uxtb	r0, r0
 801eaae:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 801eab2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801eab6:	4320      	orrs	r0, r4
 801eab8:	fb07 8403 	mla	r4, r7, r3, r8
 801eabc:	fbb4 f4f5 	udiv	r4, r4, r5
 801eac0:	0224      	lsls	r4, r4, #8
 801eac2:	b2a4      	uxth	r4, r4
 801eac4:	4320      	orrs	r0, r4
 801eac6:	f841 0c04 	str.w	r0, [r1, #-4]
 801eaca:	e7cc      	b.n	801ea66 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801eacc:	4411      	add	r1, r2
 801eace:	e7c6      	b.n	801ea5e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801ead0:	b003      	add	sp, #12
 801ead2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ead8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ead8:	2bff      	cmp	r3, #255	@ 0xff
 801eada:	d073      	beq.n	801ebc4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801eadc:	2a33      	cmp	r2, #51	@ 0x33
 801eade:	f200 811a 	bhi.w	801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801eae2:	e8df f012 	tbh	[pc, r2, lsl #1]
 801eae6:	0065      	.short	0x0065
 801eae8:	00630061 	.word	0x00630061
 801eaec:	0069005f 	.word	0x0069005f
 801eaf0:	01180067 	.word	0x01180067
 801eaf4:	01100118 	.word	0x01100118
 801eaf8:	01100112 	.word	0x01100112
 801eafc:	01180112 	.word	0x01180112
 801eb00:	01180118 	.word	0x01180118
 801eb04:	01180118 	.word	0x01180118
 801eb08:	01180118 	.word	0x01180118
 801eb0c:	01180118 	.word	0x01180118
 801eb10:	01180118 	.word	0x01180118
 801eb14:	01180118 	.word	0x01180118
 801eb18:	01180118 	.word	0x01180118
 801eb1c:	01180118 	.word	0x01180118
 801eb20:	01180118 	.word	0x01180118
 801eb24:	01180118 	.word	0x01180118
 801eb28:	01180118 	.word	0x01180118
 801eb2c:	01180118 	.word	0x01180118
 801eb30:	01180118 	.word	0x01180118
 801eb34:	01180118 	.word	0x01180118
 801eb38:	01180118 	.word	0x01180118
 801eb3c:	00460118 	.word	0x00460118
 801eb40:	00550034 	.word	0x00550034
 801eb44:	006d00fb 	.word	0x006d00fb
 801eb48:	006d006b 	.word	0x006d006b
 801eb4c:	006b      	.short	0x006b
 801eb4e:	684b      	ldr	r3, [r1, #4]
 801eb50:	781a      	ldrb	r2, [r3, #0]
 801eb52:	785b      	ldrb	r3, [r3, #1]
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	f040 80de 	bne.w	801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801eb5a:	2a01      	cmp	r2, #1
 801eb5c:	d005      	beq.n	801eb6a <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801eb5e:	f0c0 80c4 	bcc.w	801ecea <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x212>
 801eb62:	2a02      	cmp	r2, #2
 801eb64:	d003      	beq.n	801eb6e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801eb66:	4618      	mov	r0, r3
 801eb68:	4770      	bx	lr
 801eb6a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801eb6c:	e7fb      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eb6e:	6943      	ldr	r3, [r0, #20]
 801eb70:	e7f9      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eb72:	684b      	ldr	r3, [r1, #4]
 801eb74:	781a      	ldrb	r2, [r3, #0]
 801eb76:	785b      	ldrb	r3, [r3, #1]
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	f040 80cc 	bne.w	801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801eb7e:	2a01      	cmp	r2, #1
 801eb80:	d004      	beq.n	801eb8c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801eb82:	d30d      	bcc.n	801eba0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801eb84:	2a02      	cmp	r2, #2
 801eb86:	d1ee      	bne.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eb88:	68c3      	ldr	r3, [r0, #12]
 801eb8a:	e7ec      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eb8c:	69c3      	ldr	r3, [r0, #28]
 801eb8e:	e7ea      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eb90:	684b      	ldr	r3, [r1, #4]
 801eb92:	781a      	ldrb	r2, [r3, #0]
 801eb94:	785b      	ldrb	r3, [r3, #1]
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	f040 80bd 	bne.w	801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801eb9c:	2a00      	cmp	r2, #0
 801eb9e:	d1e2      	bne.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eba0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801eba2:	e7e0      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eba4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801eba6:	e7de      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eba8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801ebaa:	e7dc      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801ebae:	e7da      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebb0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801ebb2:	e7d8      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebb4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801ebb6:	e7d6      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebb8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ebba:	e7d4      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebbc:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801ebbe:	e7d2      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebc0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ebc2:	e7d0      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ebc4:	2a33      	cmp	r2, #51	@ 0x33
 801ebc6:	f200 80a6 	bhi.w	801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ebca:	a301      	add	r3, pc, #4	@ (adr r3, 801ebd0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>)
 801ebcc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801ebd0:	0801ecfb 	.word	0x0801ecfb
 801ebd4:	0801ecf3 	.word	0x0801ecf3
 801ebd8:	0801ecf7 	.word	0x0801ecf7
 801ebdc:	0801ecef 	.word	0x0801ecef
 801ebe0:	0801ed03 	.word	0x0801ed03
 801ebe4:	0801ecff 	.word	0x0801ecff
 801ebe8:	0801ed17 	.word	0x0801ed17
 801ebec:	0801ed17 	.word	0x0801ed17
 801ebf0:	0801ed07 	.word	0x0801ed07
 801ebf4:	0801ed0b 	.word	0x0801ed0b
 801ebf8:	0801ed07 	.word	0x0801ed07
 801ebfc:	0801ed0b 	.word	0x0801ed0b
 801ec00:	0801ed17 	.word	0x0801ed17
 801ec04:	0801ed17 	.word	0x0801ed17
 801ec08:	0801ed17 	.word	0x0801ed17
 801ec0c:	0801ed17 	.word	0x0801ed17
 801ec10:	0801ed17 	.word	0x0801ed17
 801ec14:	0801ed17 	.word	0x0801ed17
 801ec18:	0801ed17 	.word	0x0801ed17
 801ec1c:	0801ed17 	.word	0x0801ed17
 801ec20:	0801ed17 	.word	0x0801ed17
 801ec24:	0801ed17 	.word	0x0801ed17
 801ec28:	0801ed17 	.word	0x0801ed17
 801ec2c:	0801ed17 	.word	0x0801ed17
 801ec30:	0801ed17 	.word	0x0801ed17
 801ec34:	0801ed17 	.word	0x0801ed17
 801ec38:	0801ed17 	.word	0x0801ed17
 801ec3c:	0801ed17 	.word	0x0801ed17
 801ec40:	0801ed17 	.word	0x0801ed17
 801ec44:	0801ed17 	.word	0x0801ed17
 801ec48:	0801ed17 	.word	0x0801ed17
 801ec4c:	0801ed17 	.word	0x0801ed17
 801ec50:	0801ed17 	.word	0x0801ed17
 801ec54:	0801ed17 	.word	0x0801ed17
 801ec58:	0801ed17 	.word	0x0801ed17
 801ec5c:	0801ed17 	.word	0x0801ed17
 801ec60:	0801ed17 	.word	0x0801ed17
 801ec64:	0801ed17 	.word	0x0801ed17
 801ec68:	0801ed17 	.word	0x0801ed17
 801ec6c:	0801ed17 	.word	0x0801ed17
 801ec70:	0801ed17 	.word	0x0801ed17
 801ec74:	0801ed17 	.word	0x0801ed17
 801ec78:	0801ed17 	.word	0x0801ed17
 801ec7c:	0801ed17 	.word	0x0801ed17
 801ec80:	0801ecbf 	.word	0x0801ecbf
 801ec84:	0801eca1 	.word	0x0801eca1
 801ec88:	0801eb91 	.word	0x0801eb91
 801ec8c:	0801ecdd 	.word	0x0801ecdd
 801ec90:	0801ed13 	.word	0x0801ed13
 801ec94:	0801ed0f 	.word	0x0801ed0f
 801ec98:	0801ed13 	.word	0x0801ed13
 801ec9c:	0801ed0f 	.word	0x0801ed0f
 801eca0:	684b      	ldr	r3, [r1, #4]
 801eca2:	781a      	ldrb	r2, [r3, #0]
 801eca4:	785b      	ldrb	r3, [r3, #1]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d135      	bne.n	801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ecaa:	2a01      	cmp	r2, #1
 801ecac:	d005      	beq.n	801ecba <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e2>
 801ecae:	d31c      	bcc.n	801ecea <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x212>
 801ecb0:	2a02      	cmp	r2, #2
 801ecb2:	f47f af58 	bne.w	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecb6:	6983      	ldr	r3, [r0, #24]
 801ecb8:	e755      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ecbc:	e753      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecbe:	684b      	ldr	r3, [r1, #4]
 801ecc0:	781a      	ldrb	r2, [r3, #0]
 801ecc2:	785b      	ldrb	r3, [r3, #1]
 801ecc4:	bb3b      	cbnz	r3, 801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ecc6:	2a01      	cmp	r2, #1
 801ecc8:	d006      	beq.n	801ecd8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x200>
 801ecca:	f4ff af69 	bcc.w	801eba0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ecce:	2a02      	cmp	r2, #2
 801ecd0:	f47f af49 	bne.w	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecd4:	6903      	ldr	r3, [r0, #16]
 801ecd6:	e746      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecd8:	6a03      	ldr	r3, [r0, #32]
 801ecda:	e744      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecdc:	684b      	ldr	r3, [r1, #4]
 801ecde:	781a      	ldrb	r2, [r3, #0]
 801ece0:	785b      	ldrb	r3, [r3, #1]
 801ece2:	b9c3      	cbnz	r3, 801ed16 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x23e>
 801ece4:	2a00      	cmp	r2, #0
 801ece6:	f47f af3e 	bne.w	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ecec:	e73b      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecee:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801ecf0:	e739      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecf2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801ecf4:	e737      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecf6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801ecf8:	e735      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecfa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801ecfc:	e733      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ecfe:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801ed00:	e731      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed02:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801ed04:	e72f      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed06:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801ed08:	e72d      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed0a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ed0c:	e72b      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed0e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801ed10:	e729      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed12:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801ed14:	e727      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed16:	2300      	movs	r3, #0
 801ed18:	e725      	b.n	801eb66 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ed1a:	bf00      	nop

0801ed1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed20:	b087      	sub	sp, #28
 801ed22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed26:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801ed28:	9100      	str	r1, [sp, #0]
 801ed2a:	6868      	ldr	r0, [r5, #4]
 801ed2c:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801ed30:	9204      	str	r2, [sp, #16]
 801ed32:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ed36:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	@ 0x58
 801ed3a:	fb00 1404 	mla	r4, r0, r4, r1
 801ed3e:	6829      	ldr	r1, [r5, #0]
 801ed40:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ed44:	f8db 1000 	ldr.w	r1, [fp]
 801ed48:	9101      	str	r1, [sp, #4]
 801ed4a:	f8db 1004 	ldr.w	r1, [fp, #4]
 801ed4e:	3104      	adds	r1, #4
 801ed50:	9102      	str	r1, [sp, #8]
 801ed52:	9900      	ldr	r1, [sp, #0]
 801ed54:	2900      	cmp	r1, #0
 801ed56:	dc03      	bgt.n	801ed60 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ed58:	9904      	ldr	r1, [sp, #16]
 801ed5a:	2900      	cmp	r1, #0
 801ed5c:	f340 815a 	ble.w	801f014 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ed60:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ed62:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801ed66:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801ed6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ed6c:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801ed70:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	dd0e      	ble.n	801ed96 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ed78:	1405      	asrs	r5, r0, #16
 801ed7a:	d405      	bmi.n	801ed88 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ed7c:	4565      	cmp	r5, ip
 801ed7e:	da03      	bge.n	801ed88 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ed80:	140d      	asrs	r5, r1, #16
 801ed82:	d401      	bmi.n	801ed88 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ed84:	42bd      	cmp	r5, r7
 801ed86:	db07      	blt.n	801ed98 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ed88:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ed8a:	3b01      	subs	r3, #1
 801ed8c:	3404      	adds	r4, #4
 801ed8e:	4428      	add	r0, r5
 801ed90:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ed92:	4429      	add	r1, r5
 801ed94:	e7ee      	b.n	801ed74 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ed96:	d04d      	beq.n	801ee34 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ed98:	1e5d      	subs	r5, r3, #1
 801ed9a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ed9c:	fb06 0605 	mla	r6, r6, r5, r0
 801eda0:	1436      	asrs	r6, r6, #16
 801eda2:	d43d      	bmi.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801eda4:	4566      	cmp	r6, ip
 801eda6:	da3b      	bge.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801eda8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801edaa:	fb06 1505 	mla	r5, r6, r5, r1
 801edae:	142d      	asrs	r5, r5, #16
 801edb0:	d436      	bmi.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801edb2:	42bd      	cmp	r5, r7
 801edb4:	da34      	bge.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801edb6:	1d25      	adds	r5, r4, #4
 801edb8:	4699      	mov	r9, r3
 801edba:	f1b9 0f00 	cmp.w	r9, #0
 801edbe:	dd35      	ble.n	801ee2c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801edc0:	140e      	asrs	r6, r1, #16
 801edc2:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801edc6:	1407      	asrs	r7, r0, #16
 801edc8:	2aff      	cmp	r2, #255	@ 0xff
 801edca:	46b6      	mov	lr, r6
 801edcc:	9e01      	ldr	r6, [sp, #4]
 801edce:	fb0c 660e 	mla	r6, ip, lr, r6
 801edd2:	5df6      	ldrb	r6, [r6, r7]
 801edd4:	9f02      	ldr	r7, [sp, #8]
 801edd6:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801edda:	ea4f 2726 	mov.w	r7, r6, asr #8
 801edde:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801ede2:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801ede6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801edea:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801edee:	b2f6      	uxtb	r6, r6
 801edf0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801edf4:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801edf8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801edfc:	f040 80d4 	bne.w	801efa8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ee00:	f805 6c04 	strb.w	r6, [r5, #-4]
 801ee04:	f805 cc03 	strb.w	ip, [r5, #-3]
 801ee08:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ee0c:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ee10:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ee12:	3504      	adds	r5, #4
 801ee14:	f109 39ff 	add.w	r9, r9, #4294967295
 801ee18:	4430      	add	r0, r6
 801ee1a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ee1c:	4431      	add	r1, r6
 801ee1e:	e7cc      	b.n	801edba <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ee20:	f04f 0c00 	mov.w	ip, #0
 801ee24:	eb03 050c 	add.w	r5, r3, ip
 801ee28:	2d00      	cmp	r5, #0
 801ee2a:	dc3f      	bgt.n	801eeac <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ee2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee30:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ee34:	9b00      	ldr	r3, [sp, #0]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	f340 80ec 	ble.w	801f014 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ee3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee46:	eeb0 6a62 	vmov.f32	s12, s5
 801ee4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee56:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ee5a:	eeb0 6a43 	vmov.f32	s12, s6
 801ee5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee62:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ee66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee7e:	ee12 1a90 	vmov	r1, s5
 801ee82:	eef0 2a47 	vmov.f32	s5, s14
 801ee86:	fb91 f3f3 	sdiv	r3, r1, r3
 801ee8a:	ee13 1a10 	vmov	r1, s6
 801ee8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ee90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee92:	eeb0 3a67 	vmov.f32	s6, s15
 801ee96:	fb91 f3f3 	sdiv	r3, r1, r3
 801ee9a:	9314      	str	r3, [sp, #80]	@ 0x50
 801ee9c:	9b00      	ldr	r3, [sp, #0]
 801ee9e:	9904      	ldr	r1, [sp, #16]
 801eea0:	3b01      	subs	r3, #1
 801eea2:	9300      	str	r3, [sp, #0]
 801eea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eea6:	bf08      	it	eq
 801eea8:	460b      	moveq	r3, r1
 801eeaa:	e752      	b.n	801ed52 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801eeac:	1407      	asrs	r7, r0, #16
 801eeae:	d435      	bmi.n	801ef1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eeb0:	f8db 6008 	ldr.w	r6, [fp, #8]
 801eeb4:	42be      	cmp	r6, r7
 801eeb6:	dd31      	ble.n	801ef1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eeb8:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801eebc:	d42e      	bmi.n	801ef1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eebe:	f8db 500c 	ldr.w	r5, [fp, #12]
 801eec2:	4575      	cmp	r5, lr
 801eec4:	dd2a      	ble.n	801ef1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801eec6:	9d01      	ldr	r5, [sp, #4]
 801eec8:	b236      	sxth	r6, r6
 801eeca:	2aff      	cmp	r2, #255	@ 0xff
 801eecc:	fb0e 5606 	mla	r6, lr, r6, r5
 801eed0:	5df5      	ldrb	r5, [r6, r7]
 801eed2:	9e02      	ldr	r6, [sp, #8]
 801eed4:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801eed8:	ea4f 2625 	mov.w	r6, r5, asr #8
 801eedc:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801eee0:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801eee4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801eee8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801eeec:	b2ed      	uxtb	r5, r5
 801eeee:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eef2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801eef6:	9603      	str	r6, [sp, #12]
 801eef8:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801eefc:	462e      	mov	r6, r5
 801eefe:	d114      	bne.n	801ef2a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ef00:	f06f 0503 	mvn.w	r5, #3
 801ef04:	fb05 fe0c 	mul.w	lr, r5, ip
 801ef08:	9d03      	ldr	r5, [sp, #12]
 801ef0a:	f804 600e 	strb.w	r6, [r4, lr]
 801ef0e:	44a6      	add	lr, r4
 801ef10:	f88e 7001 	strb.w	r7, [lr, #1]
 801ef14:	f88e 5002 	strb.w	r5, [lr, #2]
 801ef18:	f88e 2003 	strb.w	r2, [lr, #3]
 801ef1c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ef1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ef22:	4428      	add	r0, r5
 801ef24:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ef26:	4429      	add	r1, r5
 801ef28:	e77c      	b.n	801ee24 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ef2a:	2a00      	cmp	r2, #0
 801ef2c:	d0f6      	beq.n	801ef1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef2e:	fb12 f707 	smulbb	r7, r2, r7
 801ef32:	f06f 0503 	mvn.w	r5, #3
 801ef36:	fb05 fa0c 	mul.w	sl, r5, ip
 801ef3a:	eb04 090a 	add.w	r9, r4, sl
 801ef3e:	f899 5003 	ldrb.w	r5, [r9, #3]
 801ef42:	fb02 fe05 	mul.w	lr, r2, r5
 801ef46:	f10e 0801 	add.w	r8, lr, #1
 801ef4a:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801ef4e:	eb02 0e05 	add.w	lr, r2, r5
 801ef52:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef56:	ebae 0e08 	sub.w	lr, lr, r8
 801ef5a:	eba5 0808 	sub.w	r8, r5, r8
 801ef5e:	f814 500a 	ldrb.w	r5, [r4, sl]
 801ef62:	fa5f fe8e 	uxtb.w	lr, lr
 801ef66:	9505      	str	r5, [sp, #20]
 801ef68:	fb16 f502 	smulbb	r5, r6, r2
 801ef6c:	462e      	mov	r6, r5
 801ef6e:	9d05      	ldr	r5, [sp, #20]
 801ef70:	fb08 6505 	mla	r5, r8, r5, r6
 801ef74:	9e03      	ldr	r6, [sp, #12]
 801ef76:	fb95 f5fe 	sdiv	r5, r5, lr
 801ef7a:	f804 500a 	strb.w	r5, [r4, sl]
 801ef7e:	fb12 f606 	smulbb	r6, r2, r6
 801ef82:	f899 5001 	ldrb.w	r5, [r9, #1]
 801ef86:	f889 e003 	strb.w	lr, [r9, #3]
 801ef8a:	fb08 7705 	mla	r7, r8, r5, r7
 801ef8e:	f899 5002 	ldrb.w	r5, [r9, #2]
 801ef92:	fb08 6605 	mla	r6, r8, r5, r6
 801ef96:	fb97 f7fe 	sdiv	r7, r7, lr
 801ef9a:	fb96 f6fe 	sdiv	r6, r6, lr
 801ef9e:	f889 7001 	strb.w	r7, [r9, #1]
 801efa2:	f889 6002 	strb.w	r6, [r9, #2]
 801efa6:	e7b9      	b.n	801ef1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801efa8:	2a00      	cmp	r2, #0
 801efaa:	f43f af31 	beq.w	801ee10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801efae:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801efb2:	fb16 f602 	smulbb	r6, r6, r2
 801efb6:	fb12 fc0c 	smulbb	ip, r2, ip
 801efba:	fb12 f707 	smulbb	r7, r2, r7
 801efbe:	fb02 fe0a 	mul.w	lr, r2, sl
 801efc2:	f10e 0801 	add.w	r8, lr, #1
 801efc6:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801efca:	eb02 0e0a 	add.w	lr, r2, sl
 801efce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801efd2:	ebae 0e08 	sub.w	lr, lr, r8
 801efd6:	ebaa 0808 	sub.w	r8, sl, r8
 801efda:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801efde:	fa5f fe8e 	uxtb.w	lr, lr
 801efe2:	fb08 660a 	mla	r6, r8, sl, r6
 801efe6:	f805 ec01 	strb.w	lr, [r5, #-1]
 801efea:	fb96 f6fe 	sdiv	r6, r6, lr
 801efee:	f805 6c04 	strb.w	r6, [r5, #-4]
 801eff2:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801eff6:	fb08 cc06 	mla	ip, r8, r6, ip
 801effa:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801effe:	fb08 7706 	mla	r7, r8, r6, r7
 801f002:	fb9c fcfe 	sdiv	ip, ip, lr
 801f006:	fb97 f7fe 	sdiv	r7, r7, lr
 801f00a:	f805 cc03 	strb.w	ip, [r5, #-3]
 801f00e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f012:	e6fd      	b.n	801ee10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f014:	b007      	add	sp, #28
 801f016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f01a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f01a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f01e:	b085      	sub	sp, #20
 801f020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f024:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f026:	9203      	str	r2, [sp, #12]
 801f028:	6860      	ldr	r0, [r4, #4]
 801f02a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801f02c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801f030:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	@ 0x44
 801f034:	fb00 2505 	mla	r5, r0, r5, r2
 801f038:	6822      	ldr	r2, [r4, #0]
 801f03a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801f03e:	683a      	ldr	r2, [r7, #0]
 801f040:	9201      	str	r2, [sp, #4]
 801f042:	687a      	ldr	r2, [r7, #4]
 801f044:	3204      	adds	r2, #4
 801f046:	9202      	str	r2, [sp, #8]
 801f048:	2900      	cmp	r1, #0
 801f04a:	dc03      	bgt.n	801f054 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f04c:	9a03      	ldr	r2, [sp, #12]
 801f04e:	2a00      	cmp	r2, #0
 801f050:	f340 80c4 	ble.w	801f1dc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f054:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f056:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801f05a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f05e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f060:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801f064:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f068:	2b00      	cmp	r3, #0
 801f06a:	dd0c      	ble.n	801f086 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f06c:	1404      	asrs	r4, r0, #16
 801f06e:	d405      	bmi.n	801f07c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f070:	454c      	cmp	r4, r9
 801f072:	da03      	bge.n	801f07c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f074:	1414      	asrs	r4, r2, #16
 801f076:	d401      	bmi.n	801f07c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f078:	4564      	cmp	r4, ip
 801f07a:	db05      	blt.n	801f088 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f07c:	4440      	add	r0, r8
 801f07e:	4472      	add	r2, lr
 801f080:	3b01      	subs	r3, #1
 801f082:	3504      	adds	r5, #4
 801f084:	e7f0      	b.n	801f068 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f086:	d00e      	beq.n	801f0a6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f088:	1e5c      	subs	r4, r3, #1
 801f08a:	fb08 0604 	mla	r6, r8, r4, r0
 801f08e:	1436      	asrs	r6, r6, #16
 801f090:	d53e      	bpl.n	801f110 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f092:	4699      	mov	r9, r3
 801f094:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801f098:	f1b9 0f00 	cmp.w	r9, #0
 801f09c:	dc6b      	bgt.n	801f176 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801f0a6:	2900      	cmp	r1, #0
 801f0a8:	f340 8098 	ble.w	801f1dc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f0ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0b6:	3901      	subs	r1, #1
 801f0b8:	eeb0 6a62 	vmov.f32	s12, s5
 801f0bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0c8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f0cc:	eeb0 6a43 	vmov.f32	s12, s6
 801f0d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0d4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f0d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0f0:	ee12 2a90 	vmov	r2, s5
 801f0f4:	eef0 2a47 	vmov.f32	s5, s14
 801f0f8:	fb92 f8f3 	sdiv	r8, r2, r3
 801f0fc:	ee13 2a10 	vmov	r2, s6
 801f100:	eeb0 3a67 	vmov.f32	s6, s15
 801f104:	fb92 fef3 	sdiv	lr, r2, r3
 801f108:	9a03      	ldr	r2, [sp, #12]
 801f10a:	bf08      	it	eq
 801f10c:	4613      	moveq	r3, r2
 801f10e:	e79b      	b.n	801f048 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f110:	454e      	cmp	r6, r9
 801f112:	dabe      	bge.n	801f092 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f114:	fb0e 2404 	mla	r4, lr, r4, r2
 801f118:	1424      	asrs	r4, r4, #16
 801f11a:	d4ba      	bmi.n	801f092 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f11c:	4564      	cmp	r4, ip
 801f11e:	dab8      	bge.n	801f092 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f120:	4699      	mov	r9, r3
 801f122:	46aa      	mov	sl, r5
 801f124:	f1b9 0f00 	cmp.w	r9, #0
 801f128:	ddb9      	ble.n	801f09e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f12a:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f12e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801f132:	9c01      	ldr	r4, [sp, #4]
 801f134:	1406      	asrs	r6, r0, #16
 801f136:	4472      	add	r2, lr
 801f138:	4440      	add	r0, r8
 801f13a:	fb0c 440b 	mla	r4, ip, fp, r4
 801f13e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f142:	5da4      	ldrb	r4, [r4, r6]
 801f144:	9e02      	ldr	r6, [sp, #8]
 801f146:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801f14a:	10f4      	asrs	r4, r6, #3
 801f14c:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801f150:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801f154:	00f6      	lsls	r6, r6, #3
 801f156:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f15a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f15e:	b2f6      	uxtb	r6, r6
 801f160:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f164:	0224      	lsls	r4, r4, #8
 801f166:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f16a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f16e:	4334      	orrs	r4, r6
 801f170:	f84a 4b04 	str.w	r4, [sl], #4
 801f174:	e7d6      	b.n	801f124 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f176:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801f17a:	d42a      	bmi.n	801f1d2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f17c:	68be      	ldr	r6, [r7, #8]
 801f17e:	4566      	cmp	r6, ip
 801f180:	dd27      	ble.n	801f1d2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f182:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f186:	d424      	bmi.n	801f1d2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f188:	68fc      	ldr	r4, [r7, #12]
 801f18a:	455c      	cmp	r4, fp
 801f18c:	dd21      	ble.n	801f1d2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801f18e:	9c01      	ldr	r4, [sp, #4]
 801f190:	b236      	sxth	r6, r6
 801f192:	fb0b 4606 	mla	r6, fp, r6, r4
 801f196:	f06f 0b03 	mvn.w	fp, #3
 801f19a:	f816 400c 	ldrb.w	r4, [r6, ip]
 801f19e:	fb0b fb09 	mul.w	fp, fp, r9
 801f1a2:	9e02      	ldr	r6, [sp, #8]
 801f1a4:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801f1a8:	10f4      	asrs	r4, r6, #3
 801f1aa:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801f1ae:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801f1b2:	00f6      	lsls	r6, r6, #3
 801f1b4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f1b8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f1bc:	b2f6      	uxtb	r6, r6
 801f1be:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f1c2:	0224      	lsls	r4, r4, #8
 801f1c4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f1c8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f1cc:	4334      	orrs	r4, r6
 801f1ce:	f84a 400b 	str.w	r4, [sl, fp]
 801f1d2:	4440      	add	r0, r8
 801f1d4:	4472      	add	r2, lr
 801f1d6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f1da:	e75d      	b.n	801f098 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f1dc:	b005      	add	sp, #20
 801f1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1e2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1e6:	b085      	sub	sp, #20
 801f1e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f1ec:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f1ee:	9101      	str	r1, [sp, #4]
 801f1f0:	6868      	ldr	r0, [r5, #4]
 801f1f2:	9203      	str	r2, [sp, #12]
 801f1f4:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f1f8:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801f1fc:	fb00 1404 	mla	r4, r0, r4, r1
 801f200:	6829      	ldr	r1, [r5, #0]
 801f202:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f206:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f208:	6809      	ldr	r1, [r1, #0]
 801f20a:	9102      	str	r1, [sp, #8]
 801f20c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f20e:	6849      	ldr	r1, [r1, #4]
 801f210:	3104      	adds	r1, #4
 801f212:	9100      	str	r1, [sp, #0]
 801f214:	9901      	ldr	r1, [sp, #4]
 801f216:	2900      	cmp	r1, #0
 801f218:	dc03      	bgt.n	801f222 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f21a:	9903      	ldr	r1, [sp, #12]
 801f21c:	2900      	cmp	r1, #0
 801f21e:	f340 813d 	ble.w	801f49c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f222:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f224:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f228:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801f22c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f22e:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801f232:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f234:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801f238:	2b00      	cmp	r3, #0
 801f23a:	dd0e      	ble.n	801f25a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f23c:	1405      	asrs	r5, r0, #16
 801f23e:	d405      	bmi.n	801f24c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f240:	4565      	cmp	r5, ip
 801f242:	da03      	bge.n	801f24c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f244:	140d      	asrs	r5, r1, #16
 801f246:	d401      	bmi.n	801f24c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f248:	42bd      	cmp	r5, r7
 801f24a:	db07      	blt.n	801f25c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f24c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f24e:	3b01      	subs	r3, #1
 801f250:	3404      	adds	r4, #4
 801f252:	4428      	add	r0, r5
 801f254:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f256:	4429      	add	r1, r5
 801f258:	e7ee      	b.n	801f238 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f25a:	d044      	beq.n	801f2e6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f25c:	1e5d      	subs	r5, r3, #1
 801f25e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f260:	fb06 0605 	mla	r6, r6, r5, r0
 801f264:	1436      	asrs	r6, r6, #16
 801f266:	d436      	bmi.n	801f2d6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f268:	4566      	cmp	r6, ip
 801f26a:	da34      	bge.n	801f2d6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f26c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f26e:	fb06 1505 	mla	r5, r6, r5, r1
 801f272:	142d      	asrs	r5, r5, #16
 801f274:	d42f      	bmi.n	801f2d6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f276:	42bd      	cmp	r5, r7
 801f278:	da2d      	bge.n	801f2d6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f27a:	1d25      	adds	r5, r4, #4
 801f27c:	469a      	mov	sl, r3
 801f27e:	f1ba 0f00 	cmp.w	sl, #0
 801f282:	dd2c      	ble.n	801f2de <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f284:	140e      	asrs	r6, r1, #16
 801f286:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801f288:	2aff      	cmp	r2, #255	@ 0xff
 801f28a:	46b6      	mov	lr, r6
 801f28c:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f290:	9e02      	ldr	r6, [sp, #8]
 801f292:	ea4f 4720 	mov.w	r7, r0, asr #16
 801f296:	fb0c 660e 	mla	r6, ip, lr, r6
 801f29a:	5df6      	ldrb	r6, [r6, r7]
 801f29c:	9f00      	ldr	r7, [sp, #0]
 801f29e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f2a2:	4437      	add	r7, r6
 801f2a4:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f2a8:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f2ac:	9f00      	ldr	r7, [sp, #0]
 801f2ae:	f817 9006 	ldrb.w	r9, [r7, r6]
 801f2b2:	f040 80be 	bne.w	801f432 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801f2b6:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f2ba:	f805 8c03 	strb.w	r8, [r5, #-3]
 801f2be:	f805 ec02 	strb.w	lr, [r5, #-2]
 801f2c2:	f805 2c01 	strb.w	r2, [r5, #-1]
 801f2c6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f2c8:	3504      	adds	r5, #4
 801f2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f2ce:	4430      	add	r0, r6
 801f2d0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f2d2:	4431      	add	r1, r6
 801f2d4:	e7d3      	b.n	801f27e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f2d6:	2500      	movs	r5, #0
 801f2d8:	195e      	adds	r6, r3, r5
 801f2da:	2e00      	cmp	r6, #0
 801f2dc:	dc3f      	bgt.n	801f35e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f2de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2e2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f2e6:	9b01      	ldr	r3, [sp, #4]
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	f340 80d7 	ble.w	801f49c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f2ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2f8:	eeb0 6a62 	vmov.f32	s12, s5
 801f2fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f300:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f304:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f308:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f30c:	eeb0 6a43 	vmov.f32	s12, s6
 801f310:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f314:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f318:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f31c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f320:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f324:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f328:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f32c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f330:	ee12 1a90 	vmov	r1, s5
 801f334:	eef0 2a47 	vmov.f32	s5, s14
 801f338:	fb91 f3f3 	sdiv	r3, r1, r3
 801f33c:	ee13 1a10 	vmov	r1, s6
 801f340:	9311      	str	r3, [sp, #68]	@ 0x44
 801f342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f344:	eeb0 3a67 	vmov.f32	s6, s15
 801f348:	fb91 f3f3 	sdiv	r3, r1, r3
 801f34c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f34e:	9b01      	ldr	r3, [sp, #4]
 801f350:	9903      	ldr	r1, [sp, #12]
 801f352:	3b01      	subs	r3, #1
 801f354:	9301      	str	r3, [sp, #4]
 801f356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f358:	bf08      	it	eq
 801f35a:	460b      	moveq	r3, r1
 801f35c:	e75a      	b.n	801f214 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f35e:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801f362:	d427      	bmi.n	801f3b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f364:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801f366:	68b7      	ldr	r7, [r6, #8]
 801f368:	4567      	cmp	r7, ip
 801f36a:	dd23      	ble.n	801f3b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f36c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f370:	d420      	bmi.n	801f3b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f372:	68f6      	ldr	r6, [r6, #12]
 801f374:	4576      	cmp	r6, lr
 801f376:	dd1d      	ble.n	801f3b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f378:	9e02      	ldr	r6, [sp, #8]
 801f37a:	b23f      	sxth	r7, r7
 801f37c:	2aff      	cmp	r2, #255	@ 0xff
 801f37e:	fb0e 6707 	mla	r7, lr, r7, r6
 801f382:	f817 600c 	ldrb.w	r6, [r7, ip]
 801f386:	9f00      	ldr	r7, [sp, #0]
 801f388:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f38c:	4437      	add	r7, r6
 801f38e:	f897 8002 	ldrb.w	r8, [r7, #2]
 801f392:	f897 9001 	ldrb.w	r9, [r7, #1]
 801f396:	9f00      	ldr	r7, [sp, #0]
 801f398:	f817 a006 	ldrb.w	sl, [r7, r6]
 801f39c:	d110      	bne.n	801f3c0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f39e:	f06f 0603 	mvn.w	r6, #3
 801f3a2:	436e      	muls	r6, r5
 801f3a4:	f804 a006 	strb.w	sl, [r4, r6]
 801f3a8:	4426      	add	r6, r4
 801f3aa:	f886 9001 	strb.w	r9, [r6, #1]
 801f3ae:	f886 8002 	strb.w	r8, [r6, #2]
 801f3b2:	70f2      	strb	r2, [r6, #3]
 801f3b4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f3b6:	3d01      	subs	r5, #1
 801f3b8:	4430      	add	r0, r6
 801f3ba:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f3bc:	4431      	add	r1, r6
 801f3be:	e78b      	b.n	801f2d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f3c0:	2a00      	cmp	r2, #0
 801f3c2:	d0f7      	beq.n	801f3b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f3c4:	fb1a fa02 	smulbb	sl, sl, r2
 801f3c8:	f06f 0603 	mvn.w	r6, #3
 801f3cc:	fb12 f909 	smulbb	r9, r2, r9
 801f3d0:	fb12 f808 	smulbb	r8, r2, r8
 801f3d4:	fb06 fb05 	mul.w	fp, r6, r5
 801f3d8:	eb04 0c0b 	add.w	ip, r4, fp
 801f3dc:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801f3e0:	fb02 f607 	mul.w	r6, r2, r7
 801f3e4:	f106 0e01 	add.w	lr, r6, #1
 801f3e8:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801f3ec:	19d6      	adds	r6, r2, r7
 801f3ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f3f2:	eba7 070e 	sub.w	r7, r7, lr
 801f3f6:	eba6 060e 	sub.w	r6, r6, lr
 801f3fa:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801f3fe:	b2f6      	uxtb	r6, r6
 801f400:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f404:	fb9a faf6 	sdiv	sl, sl, r6
 801f408:	f804 a00b 	strb.w	sl, [r4, fp]
 801f40c:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f410:	f88c 6003 	strb.w	r6, [ip, #3]
 801f414:	fb07 990e 	mla	r9, r7, lr, r9
 801f418:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f41c:	fb07 880e 	mla	r8, r7, lr, r8
 801f420:	fb99 f9f6 	sdiv	r9, r9, r6
 801f424:	fb98 f8f6 	sdiv	r8, r8, r6
 801f428:	f88c 9001 	strb.w	r9, [ip, #1]
 801f42c:	f88c 8002 	strb.w	r8, [ip, #2]
 801f430:	e7c0      	b.n	801f3b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f432:	2a00      	cmp	r2, #0
 801f434:	f43f af47 	beq.w	801f2c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f438:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801f43c:	fb19 f902 	smulbb	r9, r9, r2
 801f440:	fb12 f808 	smulbb	r8, r2, r8
 801f444:	fb02 fc0b 	mul.w	ip, r2, fp
 801f448:	eb02 060b 	add.w	r6, r2, fp
 801f44c:	fb12 fe0e 	smulbb	lr, r2, lr
 801f450:	f10c 0701 	add.w	r7, ip, #1
 801f454:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f458:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801f45c:	ebab 070c 	sub.w	r7, fp, ip
 801f460:	eba6 060c 	sub.w	r6, r6, ip
 801f464:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801f468:	b2f6      	uxtb	r6, r6
 801f46a:	fb07 990c 	mla	r9, r7, ip, r9
 801f46e:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801f472:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f476:	fb07 880c 	mla	r8, r7, ip, r8
 801f47a:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801f47e:	fb07 ee0c 	mla	lr, r7, ip, lr
 801f482:	fb99 f9f6 	sdiv	r9, r9, r6
 801f486:	fb98 f8f6 	sdiv	r8, r8, r6
 801f48a:	fb9e fef6 	sdiv	lr, lr, r6
 801f48e:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f492:	f805 8c03 	strb.w	r8, [r5, #-3]
 801f496:	f805 ec02 	strb.w	lr, [r5, #-2]
 801f49a:	e714      	b.n	801f2c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f49c:	b005      	add	sp, #20
 801f49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4a6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f4a8:	4693      	mov	fp, r2
 801f4aa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f4ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4b0:	6870      	ldr	r0, [r6, #4]
 801f4b2:	686f      	ldr	r7, [r5, #4]
 801f4b4:	9100      	str	r1, [sp, #0]
 801f4b6:	3704      	adds	r7, #4
 801f4b8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f4bc:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801f4c0:	fb00 2404 	mla	r4, r0, r4, r2
 801f4c4:	6832      	ldr	r2, [r6, #0]
 801f4c6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801f4ca:	682a      	ldr	r2, [r5, #0]
 801f4cc:	9201      	str	r2, [sp, #4]
 801f4ce:	9a00      	ldr	r2, [sp, #0]
 801f4d0:	2a00      	cmp	r2, #0
 801f4d2:	dc03      	bgt.n	801f4dc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f4d4:	f1bb 0f00 	cmp.w	fp, #0
 801f4d8:	f340 80bd 	ble.w	801f656 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f4dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f4de:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f4e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f4e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f4e8:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801f4ec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	dd0c      	ble.n	801f50e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f4f4:	1406      	asrs	r6, r0, #16
 801f4f6:	d405      	bmi.n	801f504 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f4f8:	4556      	cmp	r6, sl
 801f4fa:	da03      	bge.n	801f504 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f4fc:	1416      	asrs	r6, r2, #16
 801f4fe:	d401      	bmi.n	801f504 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f500:	454e      	cmp	r6, r9
 801f502:	db05      	blt.n	801f510 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f504:	4440      	add	r0, r8
 801f506:	4472      	add	r2, lr
 801f508:	3b01      	subs	r3, #1
 801f50a:	3404      	adds	r4, #4
 801f50c:	e7f0      	b.n	801f4f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f50e:	d03e      	beq.n	801f58e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801f510:	1e5e      	subs	r6, r3, #1
 801f512:	fb08 0c06 	mla	ip, r8, r6, r0
 801f516:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801f51a:	d42e      	bmi.n	801f57a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f51c:	45d4      	cmp	ip, sl
 801f51e:	da2c      	bge.n	801f57a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f520:	fb0e 2606 	mla	r6, lr, r6, r2
 801f524:	1436      	asrs	r6, r6, #16
 801f526:	d428      	bmi.n	801f57a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f528:	454e      	cmp	r6, r9
 801f52a:	da26      	bge.n	801f57a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801f52c:	1d26      	adds	r6, r4, #4
 801f52e:	469c      	mov	ip, r3
 801f530:	f1bc 0f00 	cmp.w	ip, #0
 801f534:	f106 0604 	add.w	r6, r6, #4
 801f538:	dd25      	ble.n	801f586 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f53a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801f53e:	ea4f 4922 	mov.w	r9, r2, asr #16
 801f542:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f546:	4472      	add	r2, lr
 801f548:	468a      	mov	sl, r1
 801f54a:	9901      	ldr	r1, [sp, #4]
 801f54c:	fb0a 1909 	mla	r9, sl, r9, r1
 801f550:	1401      	asrs	r1, r0, #16
 801f552:	4440      	add	r0, r8
 801f554:	f819 9001 	ldrb.w	r9, [r9, r1]
 801f558:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f55c:	eb07 0a09 	add.w	sl, r7, r9
 801f560:	f817 9009 	ldrb.w	r9, [r7, r9]
 801f564:	f806 9c08 	strb.w	r9, [r6, #-8]
 801f568:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f56c:	f806 9c07 	strb.w	r9, [r6, #-7]
 801f570:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f574:	f806 9c06 	strb.w	r9, [r6, #-6]
 801f578:	e7da      	b.n	801f530 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f57a:	2600      	movs	r6, #0
 801f57c:	eb03 0c06 	add.w	ip, r3, r6
 801f580:	f1bc 0f00 	cmp.w	ip, #0
 801f584:	dc3a      	bgt.n	801f5fc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801f586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f58a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f58e:	9b00      	ldr	r3, [sp, #0]
 801f590:	2b00      	cmp	r3, #0
 801f592:	dd60      	ble.n	801f656 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f594:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f59a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f59e:	eeb0 6a62 	vmov.f32	s12, s5
 801f5a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f5a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5ae:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f5b2:	eeb0 6a43 	vmov.f32	s12, s6
 801f5b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5ba:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f5be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5d6:	ee12 2a90 	vmov	r2, s5
 801f5da:	eef0 2a47 	vmov.f32	s5, s14
 801f5de:	fb92 f8f3 	sdiv	r8, r2, r3
 801f5e2:	ee13 2a10 	vmov	r2, s6
 801f5e6:	eeb0 3a67 	vmov.f32	s6, s15
 801f5ea:	fb92 fef3 	sdiv	lr, r2, r3
 801f5ee:	9b00      	ldr	r3, [sp, #0]
 801f5f0:	3b01      	subs	r3, #1
 801f5f2:	9300      	str	r3, [sp, #0]
 801f5f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5f6:	bf08      	it	eq
 801f5f8:	465b      	moveq	r3, fp
 801f5fa:	e768      	b.n	801f4ce <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801f5fc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f600:	d425      	bmi.n	801f64e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f602:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801f606:	45cc      	cmp	ip, r9
 801f608:	dd21      	ble.n	801f64e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f60a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f60e:	d41e      	bmi.n	801f64e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f610:	68e9      	ldr	r1, [r5, #12]
 801f612:	4551      	cmp	r1, sl
 801f614:	dd1b      	ble.n	801f64e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f616:	9901      	ldr	r1, [sp, #4]
 801f618:	fa0f fc8c 	sxth.w	ip, ip
 801f61c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801f620:	f06f 0103 	mvn.w	r1, #3
 801f624:	f81c c009 	ldrb.w	ip, [ip, r9]
 801f628:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f62c:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801f630:	eb07 090c 	add.w	r9, r7, ip
 801f634:	fb01 fc06 	mul.w	ip, r1, r6
 801f638:	f804 a00c 	strb.w	sl, [r4, ip]
 801f63c:	44a4      	add	ip, r4
 801f63e:	f899 a001 	ldrb.w	sl, [r9, #1]
 801f642:	f88c a001 	strb.w	sl, [ip, #1]
 801f646:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f64a:	f88c 9002 	strb.w	r9, [ip, #2]
 801f64e:	4440      	add	r0, r8
 801f650:	4472      	add	r2, lr
 801f652:	3e01      	subs	r6, #1
 801f654:	e792      	b.n	801f57c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f656:	b003      	add	sp, #12
 801f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f65c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f660:	b089      	sub	sp, #36	@ 0x24
 801f662:	469b      	mov	fp, r3
 801f664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f668:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801f66a:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 801f66e:	9101      	str	r1, [sp, #4]
 801f670:	9205      	str	r2, [sp, #20]
 801f672:	9306      	str	r3, [sp, #24]
 801f674:	6842      	ldr	r2, [r0, #4]
 801f676:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801f67a:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	@ 0x60
 801f67e:	fb02 3101 	mla	r1, r2, r1, r3
 801f682:	6803      	ldr	r3, [r0, #0]
 801f684:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f688:	f8da 3000 	ldr.w	r3, [sl]
 801f68c:	9302      	str	r3, [sp, #8]
 801f68e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f692:	3304      	adds	r3, #4
 801f694:	9303      	str	r3, [sp, #12]
 801f696:	9b01      	ldr	r3, [sp, #4]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	dc03      	bgt.n	801f6a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f69c:	9b05      	ldr	r3, [sp, #20]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	f340 814e 	ble.w	801f940 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f6a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6a6:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801f6aa:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801f6ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f6b0:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801f6b4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801f6b8:	f1bb 0f00 	cmp.w	fp, #0
 801f6bc:	dd0f      	ble.n	801f6de <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f6be:	1410      	asrs	r0, r2, #16
 801f6c0:	d405      	bmi.n	801f6ce <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6c2:	42b0      	cmp	r0, r6
 801f6c4:	da03      	bge.n	801f6ce <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6c6:	1418      	asrs	r0, r3, #16
 801f6c8:	d401      	bmi.n	801f6ce <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6ca:	42a8      	cmp	r0, r5
 801f6cc:	db08      	blt.n	801f6e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f6ce:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f6d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f6d4:	3104      	adds	r1, #4
 801f6d6:	4402      	add	r2, r0
 801f6d8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f6da:	4403      	add	r3, r0
 801f6dc:	e7ec      	b.n	801f6b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f6de:	d04a      	beq.n	801f776 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f6e0:	f10b 30ff 	add.w	r0, fp, #4294967295
 801f6e4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f6e6:	fb04 2400 	mla	r4, r4, r0, r2
 801f6ea:	1424      	asrs	r4, r4, #16
 801f6ec:	d43a      	bmi.n	801f764 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f6ee:	42b4      	cmp	r4, r6
 801f6f0:	da38      	bge.n	801f764 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f6f2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f6f4:	fb04 3000 	mla	r0, r4, r0, r3
 801f6f8:	1400      	asrs	r0, r0, #16
 801f6fa:	d433      	bmi.n	801f764 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f6fc:	42a8      	cmp	r0, r5
 801f6fe:	da31      	bge.n	801f764 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f700:	1d08      	adds	r0, r1, #4
 801f702:	46dc      	mov	ip, fp
 801f704:	f1bc 0f00 	cmp.w	ip, #0
 801f708:	dd31      	ble.n	801f76e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f70a:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801f70e:	141c      	asrs	r4, r3, #16
 801f710:	9f02      	ldr	r7, [sp, #8]
 801f712:	1415      	asrs	r5, r2, #16
 801f714:	fb06 7404 	mla	r4, r6, r4, r7
 801f718:	5d64      	ldrb	r4, [r4, r5]
 801f71a:	9d03      	ldr	r5, [sp, #12]
 801f71c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801f720:	9d06      	ldr	r5, [sp, #24]
 801f722:	0e34      	lsrs	r4, r6, #24
 801f724:	436c      	muls	r4, r5
 801f726:	1c65      	adds	r5, r4, #1
 801f728:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801f72c:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801f730:	1224      	asrs	r4, r4, #8
 801f732:	b2ef      	uxtb	r7, r5
 801f734:	2cff      	cmp	r4, #255	@ 0xff
 801f736:	9704      	str	r7, [sp, #16]
 801f738:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801f73c:	fa5f fe87 	uxtb.w	lr, r7
 801f740:	f040 80ca 	bne.w	801f8d8 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f744:	f800 6c04 	strb.w	r6, [r0, #-4]
 801f748:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f74c:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f750:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f754:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f756:	3004      	adds	r0, #4
 801f758:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f75c:	4422      	add	r2, r4
 801f75e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f760:	4423      	add	r3, r4
 801f762:	e7cf      	b.n	801f704 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f764:	2700      	movs	r7, #0
 801f766:	eb0b 0007 	add.w	r0, fp, r7
 801f76a:	2800      	cmp	r0, #0
 801f76c:	dc41      	bgt.n	801f7f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f76e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801f772:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f776:	9b01      	ldr	r3, [sp, #4]
 801f778:	2b00      	cmp	r3, #0
 801f77a:	f340 80e1 	ble.w	801f940 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f77e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f782:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f784:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f788:	eeb0 6a62 	vmov.f32	s12, s5
 801f78c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f790:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f794:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f798:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801f79c:	eeb0 6a43 	vmov.f32	s12, s6
 801f7a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7a4:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 801f7a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7c0:	ee12 2a90 	vmov	r2, s5
 801f7c4:	eef0 2a47 	vmov.f32	s5, s14
 801f7c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7cc:	ee13 2a10 	vmov	r2, s6
 801f7d0:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f7d4:	eeb0 3a67 	vmov.f32	s6, s15
 801f7d8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7dc:	9316      	str	r3, [sp, #88]	@ 0x58
 801f7de:	9b01      	ldr	r3, [sp, #4]
 801f7e0:	9a05      	ldr	r2, [sp, #20]
 801f7e2:	3b01      	subs	r3, #1
 801f7e4:	9301      	str	r3, [sp, #4]
 801f7e6:	bf08      	it	eq
 801f7e8:	4693      	moveq	fp, r2
 801f7ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f7ec:	bf18      	it	ne
 801f7ee:	469b      	movne	fp, r3
 801f7f0:	e751      	b.n	801f696 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f7f2:	1415      	asrs	r5, r2, #16
 801f7f4:	d42f      	bmi.n	801f856 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f7f6:	f8da 4008 	ldr.w	r4, [sl, #8]
 801f7fa:	42ac      	cmp	r4, r5
 801f7fc:	dd2b      	ble.n	801f856 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f7fe:	141e      	asrs	r6, r3, #16
 801f800:	d429      	bmi.n	801f856 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f802:	f8da 000c 	ldr.w	r0, [sl, #12]
 801f806:	42b0      	cmp	r0, r6
 801f808:	dd25      	ble.n	801f856 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f80a:	9802      	ldr	r0, [sp, #8]
 801f80c:	b224      	sxth	r4, r4
 801f80e:	fb06 0404 	mla	r4, r6, r4, r0
 801f812:	5d60      	ldrb	r0, [r4, r5]
 801f814:	9c03      	ldr	r4, [sp, #12]
 801f816:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801f81a:	9c06      	ldr	r4, [sp, #24]
 801f81c:	0e28      	lsrs	r0, r5, #24
 801f81e:	4360      	muls	r0, r4
 801f820:	1c44      	adds	r4, r0, #1
 801f822:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801f826:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801f82a:	1200      	asrs	r0, r0, #8
 801f82c:	b2e6      	uxtb	r6, r4
 801f82e:	28ff      	cmp	r0, #255	@ 0xff
 801f830:	9607      	str	r6, [sp, #28]
 801f832:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801f836:	fa5f fe86 	uxtb.w	lr, r6
 801f83a:	d112      	bne.n	801f862 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f83c:	f06f 0c03 	mvn.w	ip, #3
 801f840:	fb0c fc07 	mul.w	ip, ip, r7
 801f844:	f801 500c 	strb.w	r5, [r1, ip]
 801f848:	448c      	add	ip, r1
 801f84a:	f88c 6001 	strb.w	r6, [ip, #1]
 801f84e:	f88c 4002 	strb.w	r4, [ip, #2]
 801f852:	f88c 0003 	strb.w	r0, [ip, #3]
 801f856:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f858:	3f01      	subs	r7, #1
 801f85a:	4402      	add	r2, r0
 801f85c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f85e:	4403      	add	r3, r0
 801f860:	e781      	b.n	801f766 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f862:	b2c4      	uxtb	r4, r0
 801f864:	9404      	str	r4, [sp, #16]
 801f866:	2800      	cmp	r0, #0
 801f868:	d0f5      	beq.n	801f856 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f86a:	f06f 0403 	mvn.w	r4, #3
 801f86e:	b2ed      	uxtb	r5, r5
 801f870:	fb00 fe0e 	mul.w	lr, r0, lr
 801f874:	fb04 f807 	mul.w	r8, r4, r7
 801f878:	9c04      	ldr	r4, [sp, #16]
 801f87a:	eb01 0c08 	add.w	ip, r1, r8
 801f87e:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801f882:	fb04 f609 	mul.w	r6, r4, r9
 801f886:	1c74      	adds	r4, r6, #1
 801f888:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f88c:	9c04      	ldr	r4, [sp, #16]
 801f88e:	1236      	asrs	r6, r6, #8
 801f890:	444c      	add	r4, r9
 801f892:	1ba4      	subs	r4, r4, r6
 801f894:	eba9 0606 	sub.w	r6, r9, r6
 801f898:	f811 9008 	ldrb.w	r9, [r1, r8]
 801f89c:	b2e4      	uxtb	r4, r4
 801f89e:	fb06 f909 	mul.w	r9, r6, r9
 801f8a2:	fb00 9505 	mla	r5, r0, r5, r9
 801f8a6:	fb95 f5f4 	sdiv	r5, r5, r4
 801f8aa:	f801 5008 	strb.w	r5, [r1, r8]
 801f8ae:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f8b2:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801f8b6:	fb06 ee05 	mla	lr, r6, r5, lr
 801f8ba:	9d07      	ldr	r5, [sp, #28]
 801f8bc:	f88c 4003 	strb.w	r4, [ip, #3]
 801f8c0:	4368      	muls	r0, r5
 801f8c2:	fb06 0609 	mla	r6, r6, r9, r0
 801f8c6:	fb9e fef4 	sdiv	lr, lr, r4
 801f8ca:	fb96 f6f4 	sdiv	r6, r6, r4
 801f8ce:	f88c e001 	strb.w	lr, [ip, #1]
 801f8d2:	f88c 6002 	strb.w	r6, [ip, #2]
 801f8d6:	e7be      	b.n	801f856 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f8d8:	b2e5      	uxtb	r5, r4
 801f8da:	2c00      	cmp	r4, #0
 801f8dc:	f43f af3a 	beq.w	801f754 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f8e0:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f8e4:	b2f6      	uxtb	r6, r6
 801f8e6:	fb04 fe0e 	mul.w	lr, r4, lr
 801f8ea:	fb05 f908 	mul.w	r9, r5, r8
 801f8ee:	4445      	add	r5, r8
 801f8f0:	f109 0701 	add.w	r7, r9, #1
 801f8f4:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801f8f8:	123f      	asrs	r7, r7, #8
 801f8fa:	1bed      	subs	r5, r5, r7
 801f8fc:	eba8 0707 	sub.w	r7, r8, r7
 801f900:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801f904:	b2ed      	uxtb	r5, r5
 801f906:	fb07 f808 	mul.w	r8, r7, r8
 801f90a:	f800 5c01 	strb.w	r5, [r0, #-1]
 801f90e:	fb04 8606 	mla	r6, r4, r6, r8
 801f912:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801f916:	fb96 f6f5 	sdiv	r6, r6, r5
 801f91a:	f800 6c04 	strb.w	r6, [r0, #-4]
 801f91e:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801f922:	fb07 ee06 	mla	lr, r7, r6, lr
 801f926:	9e04      	ldr	r6, [sp, #16]
 801f928:	4374      	muls	r4, r6
 801f92a:	fb07 4708 	mla	r7, r7, r8, r4
 801f92e:	fb9e fef5 	sdiv	lr, lr, r5
 801f932:	fb97 f7f5 	sdiv	r7, r7, r5
 801f936:	f800 ec03 	strb.w	lr, [r0, #-3]
 801f93a:	f800 7c02 	strb.w	r7, [r0, #-2]
 801f93e:	e709      	b.n	801f754 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f940:	b009      	add	sp, #36	@ 0x24
 801f942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f946 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f94a:	b087      	sub	sp, #28
 801f94c:	469b      	mov	fp, r3
 801f94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f952:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f954:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801f958:	9100      	str	r1, [sp, #0]
 801f95a:	9204      	str	r2, [sp, #16]
 801f95c:	9305      	str	r3, [sp, #20]
 801f95e:	6842      	ldr	r2, [r0, #4]
 801f960:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	@ 0x58
 801f964:	fb02 3101 	mla	r1, r2, r1, r3
 801f968:	6803      	ldr	r3, [r0, #0]
 801f96a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f96e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	9301      	str	r3, [sp, #4]
 801f974:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f976:	685b      	ldr	r3, [r3, #4]
 801f978:	9302      	str	r3, [sp, #8]
 801f97a:	9b00      	ldr	r3, [sp, #0]
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	dc03      	bgt.n	801f988 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f980:	9b04      	ldr	r3, [sp, #16]
 801f982:	2b00      	cmp	r3, #0
 801f984:	f340 8156 	ble.w	801fc34 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f988:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f98a:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801f98e:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801f992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f994:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801f998:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f99a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801f99e:	f1bb 0f00 	cmp.w	fp, #0
 801f9a2:	dd0f      	ble.n	801f9c4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f9a4:	1410      	asrs	r0, r2, #16
 801f9a6:	d405      	bmi.n	801f9b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f9a8:	42b0      	cmp	r0, r6
 801f9aa:	da03      	bge.n	801f9b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f9ac:	1418      	asrs	r0, r3, #16
 801f9ae:	d401      	bmi.n	801f9b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f9b0:	42a8      	cmp	r0, r5
 801f9b2:	db08      	blt.n	801f9c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f9b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f9b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f9ba:	3104      	adds	r1, #4
 801f9bc:	4402      	add	r2, r0
 801f9be:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f9c0:	4403      	add	r3, r0
 801f9c2:	e7ec      	b.n	801f99e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f9c4:	d053      	beq.n	801fa6e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f9c6:	f10b 30ff 	add.w	r0, fp, #4294967295
 801f9ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f9cc:	fb04 2400 	mla	r4, r4, r0, r2
 801f9d0:	1424      	asrs	r4, r4, #16
 801f9d2:	d442      	bmi.n	801fa5a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f9d4:	42b4      	cmp	r4, r6
 801f9d6:	da40      	bge.n	801fa5a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f9d8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f9da:	fb04 3000 	mla	r0, r4, r0, r3
 801f9de:	1400      	asrs	r0, r0, #16
 801f9e0:	d43b      	bmi.n	801fa5a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f9e2:	42a8      	cmp	r0, r5
 801f9e4:	da39      	bge.n	801fa5a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f9e6:	1d08      	adds	r0, r1, #4
 801f9e8:	46d8      	mov	r8, fp
 801f9ea:	f1b8 0f00 	cmp.w	r8, #0
 801f9ee:	dd3a      	ble.n	801fa66 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f9f0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801f9f2:	141c      	asrs	r4, r3, #16
 801f9f4:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801f9f8:	1415      	asrs	r5, r2, #16
 801f9fa:	fb06 5404 	mla	r4, r6, r4, r5
 801f9fe:	9e02      	ldr	r6, [sp, #8]
 801fa00:	9d01      	ldr	r5, [sp, #4]
 801fa02:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801fa06:	5d34      	ldrb	r4, [r6, r4]
 801fa08:	9e05      	ldr	r6, [sp, #20]
 801fa0a:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801fa0e:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801fa12:	4374      	muls	r4, r6
 801fa14:	00ed      	lsls	r5, r5, #3
 801fa16:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801fa1a:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801fa1e:	1c66      	adds	r6, r4, #1
 801fa20:	b2ed      	uxtb	r5, r5
 801fa22:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801fa26:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801fa2a:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801fa2e:	1224      	asrs	r4, r4, #8
 801fa30:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801fa34:	2cff      	cmp	r4, #255	@ 0xff
 801fa36:	f040 80cb 	bne.w	801fbd0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801fa3a:	f800 5c04 	strb.w	r5, [r0, #-4]
 801fa3e:	f800 cc03 	strb.w	ip, [r0, #-3]
 801fa42:	f800 ec02 	strb.w	lr, [r0, #-2]
 801fa46:	f800 4c01 	strb.w	r4, [r0, #-1]
 801fa4a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa4c:	3004      	adds	r0, #4
 801fa4e:	f108 38ff 	add.w	r8, r8, #4294967295
 801fa52:	4422      	add	r2, r4
 801fa54:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fa56:	4423      	add	r3, r4
 801fa58:	e7c7      	b.n	801f9ea <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801fa5a:	f04f 0c00 	mov.w	ip, #0
 801fa5e:	eb0b 000c 	add.w	r0, fp, ip
 801fa62:	2800      	cmp	r0, #0
 801fa64:	dc41      	bgt.n	801faea <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fa66:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801fa6a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fa6e:	9b00      	ldr	r3, [sp, #0]
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	f340 80df 	ble.w	801fc34 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801fa76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa80:	eeb0 6a62 	vmov.f32	s12, s5
 801fa84:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa88:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa90:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fa94:	eeb0 6a43 	vmov.f32	s12, s6
 801fa98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa9c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801faa0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801faa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801faa8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801faac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fab0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fab4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fab8:	ee12 2a90 	vmov	r2, s5
 801fabc:	eef0 2a47 	vmov.f32	s5, s14
 801fac0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fac4:	ee13 2a10 	vmov	r2, s6
 801fac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801faca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801facc:	eeb0 3a67 	vmov.f32	s6, s15
 801fad0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fad4:	9314      	str	r3, [sp, #80]	@ 0x50
 801fad6:	9b00      	ldr	r3, [sp, #0]
 801fad8:	9a04      	ldr	r2, [sp, #16]
 801fada:	3b01      	subs	r3, #1
 801fadc:	9300      	str	r3, [sp, #0]
 801fade:	bf08      	it	eq
 801fae0:	4693      	moveq	fp, r2
 801fae2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fae4:	bf18      	it	ne
 801fae6:	469b      	movne	fp, r3
 801fae8:	e747      	b.n	801f97a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801faea:	1415      	asrs	r5, r2, #16
 801faec:	d433      	bmi.n	801fb56 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801faee:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801faf0:	6884      	ldr	r4, [r0, #8]
 801faf2:	42ac      	cmp	r4, r5
 801faf4:	dd2f      	ble.n	801fb56 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801faf6:	141e      	asrs	r6, r3, #16
 801faf8:	d42d      	bmi.n	801fb56 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fafa:	68c0      	ldr	r0, [r0, #12]
 801fafc:	42b0      	cmp	r0, r6
 801fafe:	dd2a      	ble.n	801fb56 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fb00:	b224      	sxth	r4, r4
 801fb02:	9801      	ldr	r0, [sp, #4]
 801fb04:	fb06 5504 	mla	r5, r6, r4, r5
 801fb08:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801fb0c:	9802      	ldr	r0, [sp, #8]
 801fb0e:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801fb12:	5d40      	ldrb	r0, [r0, r5]
 801fb14:	10e7      	asrs	r7, r4, #3
 801fb16:	9d05      	ldr	r5, [sp, #20]
 801fb18:	00e4      	lsls	r4, r4, #3
 801fb1a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801fb1e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fb22:	4368      	muls	r0, r5
 801fb24:	b2e4      	uxtb	r4, r4
 801fb26:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801fb2a:	1c45      	adds	r5, r0, #1
 801fb2c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fb30:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fb34:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fb38:	9403      	str	r4, [sp, #12]
 801fb3a:	1200      	asrs	r0, r0, #8
 801fb3c:	28ff      	cmp	r0, #255	@ 0xff
 801fb3e:	d111      	bne.n	801fb64 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801fb40:	f06f 0403 	mvn.w	r4, #3
 801fb44:	fb04 f50c 	mul.w	r5, r4, ip
 801fb48:	9c03      	ldr	r4, [sp, #12]
 801fb4a:	554c      	strb	r4, [r1, r5]
 801fb4c:	440d      	add	r5, r1
 801fb4e:	706f      	strb	r7, [r5, #1]
 801fb50:	f885 e002 	strb.w	lr, [r5, #2]
 801fb54:	70e8      	strb	r0, [r5, #3]
 801fb56:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fb58:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb5c:	4402      	add	r2, r0
 801fb5e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801fb60:	4403      	add	r3, r0
 801fb62:	e77c      	b.n	801fa5e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fb64:	b2c5      	uxtb	r5, r0
 801fb66:	2800      	cmp	r0, #0
 801fb68:	d0f5      	beq.n	801fb56 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fb6a:	f06f 0403 	mvn.w	r4, #3
 801fb6e:	4347      	muls	r7, r0
 801fb70:	fb04 f90c 	mul.w	r9, r4, ip
 801fb74:	eb01 0809 	add.w	r8, r1, r9
 801fb78:	f898 a003 	ldrb.w	sl, [r8, #3]
 801fb7c:	fb05 f60a 	mul.w	r6, r5, sl
 801fb80:	4455      	add	r5, sl
 801fb82:	1c74      	adds	r4, r6, #1
 801fb84:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801fb88:	9c03      	ldr	r4, [sp, #12]
 801fb8a:	1236      	asrs	r6, r6, #8
 801fb8c:	4344      	muls	r4, r0
 801fb8e:	fb00 f00e 	mul.w	r0, r0, lr
 801fb92:	1bad      	subs	r5, r5, r6
 801fb94:	ebaa 0606 	sub.w	r6, sl, r6
 801fb98:	f811 a009 	ldrb.w	sl, [r1, r9]
 801fb9c:	b2ed      	uxtb	r5, r5
 801fb9e:	fb06 440a 	mla	r4, r6, sl, r4
 801fba2:	fb94 f4f5 	sdiv	r4, r4, r5
 801fba6:	f801 4009 	strb.w	r4, [r1, r9]
 801fbaa:	f898 4001 	ldrb.w	r4, [r8, #1]
 801fbae:	f898 a002 	ldrb.w	sl, [r8, #2]
 801fbb2:	fb06 7704 	mla	r7, r6, r4, r7
 801fbb6:	fb06 060a 	mla	r6, r6, sl, r0
 801fbba:	f888 5003 	strb.w	r5, [r8, #3]
 801fbbe:	fb97 f7f5 	sdiv	r7, r7, r5
 801fbc2:	fb96 f6f5 	sdiv	r6, r6, r5
 801fbc6:	f888 7001 	strb.w	r7, [r8, #1]
 801fbca:	f888 6002 	strb.w	r6, [r8, #2]
 801fbce:	e7c2      	b.n	801fb56 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fbd0:	b2e6      	uxtb	r6, r4
 801fbd2:	2c00      	cmp	r4, #0
 801fbd4:	f43f af39 	beq.w	801fa4a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fbd8:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801fbdc:	4365      	muls	r5, r4
 801fbde:	fb04 fc0c 	mul.w	ip, r4, ip
 801fbe2:	fb06 fa09 	mul.w	sl, r6, r9
 801fbe6:	444e      	add	r6, r9
 801fbe8:	fb04 f40e 	mul.w	r4, r4, lr
 801fbec:	f10a 0701 	add.w	r7, sl, #1
 801fbf0:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801fbf4:	123f      	asrs	r7, r7, #8
 801fbf6:	1bf6      	subs	r6, r6, r7
 801fbf8:	eba9 0707 	sub.w	r7, r9, r7
 801fbfc:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801fc00:	b2f6      	uxtb	r6, r6
 801fc02:	fb07 5509 	mla	r5, r7, r9, r5
 801fc06:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801fc0a:	f800 6c01 	strb.w	r6, [r0, #-1]
 801fc0e:	fb95 f5f6 	sdiv	r5, r5, r6
 801fc12:	f800 5c04 	strb.w	r5, [r0, #-4]
 801fc16:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801fc1a:	fb07 cc05 	mla	ip, r7, r5, ip
 801fc1e:	fb07 4709 	mla	r7, r7, r9, r4
 801fc22:	fb9c fcf6 	sdiv	ip, ip, r6
 801fc26:	fb97 f7f6 	sdiv	r7, r7, r6
 801fc2a:	f800 cc03 	strb.w	ip, [r0, #-3]
 801fc2e:	f800 7c02 	strb.w	r7, [r0, #-2]
 801fc32:	e70a      	b.n	801fa4a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fc34:	b007      	add	sp, #28
 801fc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc3a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc3e:	b087      	sub	sp, #28
 801fc40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fc44:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fc46:	9101      	str	r1, [sp, #4]
 801fc48:	9205      	str	r2, [sp, #20]
 801fc4a:	6861      	ldr	r1, [r4, #4]
 801fc4c:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801fc50:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801fc54:	fb01 2000 	mla	r0, r1, r0, r2
 801fc58:	6822      	ldr	r2, [r4, #0]
 801fc5a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fc5e:	f8db 2000 	ldr.w	r2, [fp]
 801fc62:	9202      	str	r2, [sp, #8]
 801fc64:	f8db 2004 	ldr.w	r2, [fp, #4]
 801fc68:	9203      	str	r2, [sp, #12]
 801fc6a:	9a01      	ldr	r2, [sp, #4]
 801fc6c:	2a00      	cmp	r2, #0
 801fc6e:	dc03      	bgt.n	801fc78 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fc70:	9a05      	ldr	r2, [sp, #20]
 801fc72:	2a00      	cmp	r2, #0
 801fc74:	f340 8151 	ble.w	801ff1a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fc78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fc7a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801fc7e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fc82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fc84:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801fc88:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	dd0e      	ble.n	801fcae <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fc90:	140c      	asrs	r4, r1, #16
 801fc92:	d405      	bmi.n	801fca0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fc94:	42bc      	cmp	r4, r7
 801fc96:	da03      	bge.n	801fca0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fc98:	1414      	asrs	r4, r2, #16
 801fc9a:	d401      	bmi.n	801fca0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fc9c:	42b4      	cmp	r4, r6
 801fc9e:	db07      	blt.n	801fcb0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fca0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fca2:	3b01      	subs	r3, #1
 801fca4:	3004      	adds	r0, #4
 801fca6:	4421      	add	r1, r4
 801fca8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fcaa:	4422      	add	r2, r4
 801fcac:	e7ee      	b.n	801fc8c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fcae:	d049      	beq.n	801fd44 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801fcb0:	1e5c      	subs	r4, r3, #1
 801fcb2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fcb4:	fb05 1504 	mla	r5, r5, r4, r1
 801fcb8:	142d      	asrs	r5, r5, #16
 801fcba:	d43b      	bmi.n	801fd34 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fcbc:	42bd      	cmp	r5, r7
 801fcbe:	da39      	bge.n	801fd34 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fcc0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fcc2:	fb05 2404 	mla	r4, r5, r4, r2
 801fcc6:	1424      	asrs	r4, r4, #16
 801fcc8:	d434      	bmi.n	801fd34 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fcca:	42b4      	cmp	r4, r6
 801fccc:	da32      	bge.n	801fd34 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fcce:	1d04      	adds	r4, r0, #4
 801fcd0:	4699      	mov	r9, r3
 801fcd2:	f1b9 0f00 	cmp.w	r9, #0
 801fcd6:	dd31      	ble.n	801fd3c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801fcd8:	1415      	asrs	r5, r2, #16
 801fcda:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801fcde:	140e      	asrs	r6, r1, #16
 801fce0:	fb07 6605 	mla	r6, r7, r5, r6
 801fce4:	9d02      	ldr	r5, [sp, #8]
 801fce6:	9f03      	ldr	r7, [sp, #12]
 801fce8:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801fcec:	5dbe      	ldrb	r6, [r7, r6]
 801fcee:	ea4f 2825 	mov.w	r8, r5, asr #8
 801fcf2:	10ef      	asrs	r7, r5, #3
 801fcf4:	2eff      	cmp	r6, #255	@ 0xff
 801fcf6:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801fcfa:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fcfe:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fd02:	b2ed      	uxtb	r5, r5
 801fd04:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fd08:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fd0c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801fd10:	f040 80cd 	bne.w	801feae <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fd14:	f804 5c04 	strb.w	r5, [r4, #-4]
 801fd18:	f804 7c03 	strb.w	r7, [r4, #-3]
 801fd1c:	f804 8c02 	strb.w	r8, [r4, #-2]
 801fd20:	f804 6c01 	strb.w	r6, [r4, #-1]
 801fd24:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fd26:	3404      	adds	r4, #4
 801fd28:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd2c:	4429      	add	r1, r5
 801fd2e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fd30:	442a      	add	r2, r5
 801fd32:	e7ce      	b.n	801fcd2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fd34:	2700      	movs	r7, #0
 801fd36:	19dc      	adds	r4, r3, r7
 801fd38:	2c00      	cmp	r4, #0
 801fd3a:	dc3f      	bgt.n	801fdbc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801fd3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd40:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fd44:	9b01      	ldr	r3, [sp, #4]
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	f340 80e7 	ble.w	801ff1a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fd4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd56:	eeb0 6a62 	vmov.f32	s12, s5
 801fd5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd66:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fd6a:	eeb0 6a43 	vmov.f32	s12, s6
 801fd6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd72:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801fd76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd8e:	ee12 2a90 	vmov	r2, s5
 801fd92:	eef0 2a47 	vmov.f32	s5, s14
 801fd96:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd9a:	ee13 2a10 	vmov	r2, s6
 801fd9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fda0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fda2:	eeb0 3a67 	vmov.f32	s6, s15
 801fda6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdaa:	9314      	str	r3, [sp, #80]	@ 0x50
 801fdac:	9b01      	ldr	r3, [sp, #4]
 801fdae:	9a05      	ldr	r2, [sp, #20]
 801fdb0:	3b01      	subs	r3, #1
 801fdb2:	9301      	str	r3, [sp, #4]
 801fdb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fdb6:	bf08      	it	eq
 801fdb8:	4613      	moveq	r3, r2
 801fdba:	e756      	b.n	801fc6a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fdbc:	140e      	asrs	r6, r1, #16
 801fdbe:	d434      	bmi.n	801fe2a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fdc0:	f8db 5008 	ldr.w	r5, [fp, #8]
 801fdc4:	42b5      	cmp	r5, r6
 801fdc6:	dd30      	ble.n	801fe2a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fdc8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fdcc:	d42d      	bmi.n	801fe2a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fdce:	f8db 400c 	ldr.w	r4, [fp, #12]
 801fdd2:	4564      	cmp	r4, ip
 801fdd4:	dd29      	ble.n	801fe2a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fdd6:	b22d      	sxth	r5, r5
 801fdd8:	9c02      	ldr	r4, [sp, #8]
 801fdda:	fb0c 6505 	mla	r5, ip, r5, r6
 801fdde:	9e03      	ldr	r6, [sp, #12]
 801fde0:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801fde4:	5d75      	ldrb	r5, [r6, r5]
 801fde6:	ea4f 2824 	mov.w	r8, r4, asr #8
 801fdea:	2dff      	cmp	r5, #255	@ 0xff
 801fdec:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fdf0:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801fdf4:	9604      	str	r6, [sp, #16]
 801fdf6:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801fdfa:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801fdfe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fe02:	b2e4      	uxtb	r4, r4
 801fe04:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801fe08:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fe0c:	d113      	bne.n	801fe36 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fe0e:	f06f 0c03 	mvn.w	ip, #3
 801fe12:	fb0c fc07 	mul.w	ip, ip, r7
 801fe16:	f800 400c 	strb.w	r4, [r0, ip]
 801fe1a:	4484      	add	ip, r0
 801fe1c:	9c04      	ldr	r4, [sp, #16]
 801fe1e:	f88c 6001 	strb.w	r6, [ip, #1]
 801fe22:	f88c 4002 	strb.w	r4, [ip, #2]
 801fe26:	f88c 5003 	strb.w	r5, [ip, #3]
 801fe2a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fe2c:	3f01      	subs	r7, #1
 801fe2e:	4421      	add	r1, r4
 801fe30:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fe32:	4422      	add	r2, r4
 801fe34:	e77f      	b.n	801fd36 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801fe36:	2d00      	cmp	r5, #0
 801fe38:	d0f7      	beq.n	801fe2a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fe3a:	fb14 f405 	smulbb	r4, r4, r5
 801fe3e:	f06f 0c03 	mvn.w	ip, #3
 801fe42:	fb15 f606 	smulbb	r6, r5, r6
 801fe46:	fb0c fa07 	mul.w	sl, ip, r7
 801fe4a:	eb00 090a 	add.w	r9, r0, sl
 801fe4e:	f899 8003 	ldrb.w	r8, [r9, #3]
 801fe52:	fb05 fc08 	mul.w	ip, r5, r8
 801fe56:	f10c 0e01 	add.w	lr, ip, #1
 801fe5a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fe5e:	eb05 0c08 	add.w	ip, r5, r8
 801fe62:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fe66:	ebac 0c0e 	sub.w	ip, ip, lr
 801fe6a:	eba8 0e0e 	sub.w	lr, r8, lr
 801fe6e:	f810 800a 	ldrb.w	r8, [r0, sl]
 801fe72:	fa5f fc8c 	uxtb.w	ip, ip
 801fe76:	fb0e 4408 	mla	r4, lr, r8, r4
 801fe7a:	fb94 f4fc 	sdiv	r4, r4, ip
 801fe7e:	f800 400a 	strb.w	r4, [r0, sl]
 801fe82:	f899 4001 	ldrb.w	r4, [r9, #1]
 801fe86:	f889 c003 	strb.w	ip, [r9, #3]
 801fe8a:	fb0e 6604 	mla	r6, lr, r4, r6
 801fe8e:	f899 4002 	ldrb.w	r4, [r9, #2]
 801fe92:	fb96 f6fc 	sdiv	r6, r6, ip
 801fe96:	f889 6001 	strb.w	r6, [r9, #1]
 801fe9a:	9e04      	ldr	r6, [sp, #16]
 801fe9c:	fb15 f506 	smulbb	r5, r5, r6
 801fea0:	fb0e 5504 	mla	r5, lr, r4, r5
 801fea4:	fb95 f5fc 	sdiv	r5, r5, ip
 801fea8:	f889 5002 	strb.w	r5, [r9, #2]
 801feac:	e7bd      	b.n	801fe2a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801feae:	2e00      	cmp	r6, #0
 801feb0:	f43f af38 	beq.w	801fd24 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801feb4:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801feb8:	fb15 f506 	smulbb	r5, r5, r6
 801febc:	fb16 f707 	smulbb	r7, r6, r7
 801fec0:	fb06 fc0a 	mul.w	ip, r6, sl
 801fec4:	f10c 0e01 	add.w	lr, ip, #1
 801fec8:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fecc:	eb06 0c0a 	add.w	ip, r6, sl
 801fed0:	fb16 f608 	smulbb	r6, r6, r8
 801fed4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fed8:	ebac 0c0e 	sub.w	ip, ip, lr
 801fedc:	ebaa 0e0e 	sub.w	lr, sl, lr
 801fee0:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801fee4:	fa5f fc8c 	uxtb.w	ip, ip
 801fee8:	fb0e 550a 	mla	r5, lr, sl, r5
 801feec:	f804 cc01 	strb.w	ip, [r4, #-1]
 801fef0:	fb95 f5fc 	sdiv	r5, r5, ip
 801fef4:	f804 5c04 	strb.w	r5, [r4, #-4]
 801fef8:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801fefc:	fb0e 7705 	mla	r7, lr, r5, r7
 801ff00:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801ff04:	fb0e 6605 	mla	r6, lr, r5, r6
 801ff08:	fb97 f7fc 	sdiv	r7, r7, ip
 801ff0c:	fb96 f6fc 	sdiv	r6, r6, ip
 801ff10:	f804 7c03 	strb.w	r7, [r4, #-3]
 801ff14:	f804 6c02 	strb.w	r6, [r4, #-2]
 801ff18:	e704      	b.n	801fd24 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801ff1a:	b007      	add	sp, #28
 801ff1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff20 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff24:	b085      	sub	sp, #20
 801ff26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ff2a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ff2c:	9101      	str	r1, [sp, #4]
 801ff2e:	6868      	ldr	r0, [r5, #4]
 801ff30:	9203      	str	r2, [sp, #12]
 801ff32:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ff36:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801ff3a:	fb00 1404 	mla	r4, r0, r4, r1
 801ff3e:	6829      	ldr	r1, [r5, #0]
 801ff40:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ff44:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ff46:	6809      	ldr	r1, [r1, #0]
 801ff48:	9102      	str	r1, [sp, #8]
 801ff4a:	9901      	ldr	r1, [sp, #4]
 801ff4c:	2900      	cmp	r1, #0
 801ff4e:	dc03      	bgt.n	801ff58 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff50:	9903      	ldr	r1, [sp, #12]
 801ff52:	2900      	cmp	r1, #0
 801ff54:	f340 8150 	ble.w	80201f8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ff58:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ff5a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ff5e:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801ff62:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ff64:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801ff68:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ff6a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	dd0e      	ble.n	801ff90 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ff72:	1405      	asrs	r5, r0, #16
 801ff74:	d405      	bmi.n	801ff82 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ff76:	4565      	cmp	r5, ip
 801ff78:	da03      	bge.n	801ff82 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ff7a:	140d      	asrs	r5, r1, #16
 801ff7c:	d401      	bmi.n	801ff82 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ff7e:	42bd      	cmp	r5, r7
 801ff80:	db07      	blt.n	801ff92 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff82:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ff84:	3b01      	subs	r3, #1
 801ff86:	3404      	adds	r4, #4
 801ff88:	4428      	add	r0, r5
 801ff8a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ff8c:	4429      	add	r1, r5
 801ff8e:	e7ee      	b.n	801ff6e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ff90:	d04c      	beq.n	802002c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ff92:	1e5d      	subs	r5, r3, #1
 801ff94:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ff96:	fb06 0605 	mla	r6, r6, r5, r0
 801ff9a:	1436      	asrs	r6, r6, #16
 801ff9c:	d43c      	bmi.n	8020018 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ff9e:	4566      	cmp	r6, ip
 801ffa0:	da3a      	bge.n	8020018 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ffa2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ffa4:	fb06 1505 	mla	r5, r6, r5, r1
 801ffa8:	142d      	asrs	r5, r5, #16
 801ffaa:	d435      	bmi.n	8020018 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ffac:	42bd      	cmp	r5, r7
 801ffae:	da33      	bge.n	8020018 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ffb0:	1d25      	adds	r5, r4, #4
 801ffb2:	4699      	mov	r9, r3
 801ffb4:	f1b9 0f00 	cmp.w	r9, #0
 801ffb8:	dd34      	ble.n	8020024 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ffba:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801ffbc:	140e      	asrs	r6, r1, #16
 801ffbe:	2aff      	cmp	r2, #255	@ 0xff
 801ffc0:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801ffc4:	ea4f 4720 	mov.w	r7, r0, asr #16
 801ffc8:	fb0c 7606 	mla	r6, ip, r6, r7
 801ffcc:	9f02      	ldr	r7, [sp, #8]
 801ffce:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801ffd2:	ea4f 2726 	mov.w	r7, r6, asr #8
 801ffd6:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801ffda:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801ffde:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ffe2:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801ffe6:	b2f6      	uxtb	r6, r6
 801ffe8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ffec:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801fff0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fff4:	f040 80ca 	bne.w	802018c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801fff8:	f805 6c04 	strb.w	r6, [r5, #-4]
 801fffc:	f805 cc03 	strb.w	ip, [r5, #-3]
 8020000:	f805 7c02 	strb.w	r7, [r5, #-2]
 8020004:	f805 2c01 	strb.w	r2, [r5, #-1]
 8020008:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802000a:	3504      	adds	r5, #4
 802000c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020010:	4430      	add	r0, r6
 8020012:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020014:	4431      	add	r1, r6
 8020016:	e7cd      	b.n	801ffb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020018:	f04f 0c00 	mov.w	ip, #0
 802001c:	eb03 050c 	add.w	r5, r3, ip
 8020020:	2d00      	cmp	r5, #0
 8020022:	dc3f      	bgt.n	80200a4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8020024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020028:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802002c:	9b01      	ldr	r3, [sp, #4]
 802002e:	2b00      	cmp	r3, #0
 8020030:	f340 80e2 	ble.w	80201f8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020034:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802003a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802003e:	eeb0 6a62 	vmov.f32	s12, s5
 8020042:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020046:	ee31 1a05 	vadd.f32	s2, s2, s10
 802004a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802004e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020052:	eeb0 6a43 	vmov.f32	s12, s6
 8020056:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802005a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802005e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020062:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020066:	ee77 2a62 	vsub.f32	s5, s14, s5
 802006a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802006e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020072:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020076:	ee12 1a90 	vmov	r1, s5
 802007a:	eef0 2a47 	vmov.f32	s5, s14
 802007e:	fb91 f3f3 	sdiv	r3, r1, r3
 8020082:	ee13 1a10 	vmov	r1, s6
 8020086:	9311      	str	r3, [sp, #68]	@ 0x44
 8020088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802008a:	eeb0 3a67 	vmov.f32	s6, s15
 802008e:	fb91 f3f3 	sdiv	r3, r1, r3
 8020092:	9312      	str	r3, [sp, #72]	@ 0x48
 8020094:	9b01      	ldr	r3, [sp, #4]
 8020096:	9903      	ldr	r1, [sp, #12]
 8020098:	3b01      	subs	r3, #1
 802009a:	9301      	str	r3, [sp, #4]
 802009c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802009e:	bf08      	it	eq
 80200a0:	460b      	moveq	r3, r1
 80200a2:	e752      	b.n	801ff4a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80200a4:	1407      	asrs	r7, r0, #16
 80200a6:	d42f      	bmi.n	8020108 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80200a8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80200aa:	68ae      	ldr	r6, [r5, #8]
 80200ac:	42be      	cmp	r6, r7
 80200ae:	dd2b      	ble.n	8020108 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80200b0:	ea5f 4e21 	movs.w	lr, r1, asr #16
 80200b4:	d428      	bmi.n	8020108 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80200b6:	68ed      	ldr	r5, [r5, #12]
 80200b8:	4575      	cmp	r5, lr
 80200ba:	dd25      	ble.n	8020108 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80200bc:	b236      	sxth	r6, r6
 80200be:	9d02      	ldr	r5, [sp, #8]
 80200c0:	2aff      	cmp	r2, #255	@ 0xff
 80200c2:	fb0e 7606 	mla	r6, lr, r6, r7
 80200c6:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 80200ca:	ea4f 2625 	mov.w	r6, r5, asr #8
 80200ce:	ea4f 07e5 	mov.w	r7, r5, asr #3
 80200d2:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80200d6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80200da:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80200de:	b2ed      	uxtb	r5, r5
 80200e0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80200e4:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80200e8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80200ec:	d113      	bne.n	8020116 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80200ee:	f06f 0e03 	mvn.w	lr, #3
 80200f2:	fb0e fe0c 	mul.w	lr, lr, ip
 80200f6:	f804 500e 	strb.w	r5, [r4, lr]
 80200fa:	44a6      	add	lr, r4
 80200fc:	f88e 7001 	strb.w	r7, [lr, #1]
 8020100:	f88e 6002 	strb.w	r6, [lr, #2]
 8020104:	f88e 2003 	strb.w	r2, [lr, #3]
 8020108:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802010a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802010e:	4428      	add	r0, r5
 8020110:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020112:	4429      	add	r1, r5
 8020114:	e782      	b.n	802001c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8020116:	2a00      	cmp	r2, #0
 8020118:	d0f6      	beq.n	8020108 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802011a:	fb15 f502 	smulbb	r5, r5, r2
 802011e:	f06f 0e03 	mvn.w	lr, #3
 8020122:	fb12 f707 	smulbb	r7, r2, r7
 8020126:	fb12 f606 	smulbb	r6, r2, r6
 802012a:	fb0e fa0c 	mul.w	sl, lr, ip
 802012e:	eb04 090a 	add.w	r9, r4, sl
 8020132:	f899 b003 	ldrb.w	fp, [r9, #3]
 8020136:	fb02 fe0b 	mul.w	lr, r2, fp
 802013a:	f10e 0801 	add.w	r8, lr, #1
 802013e:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 8020142:	eb02 0e0b 	add.w	lr, r2, fp
 8020146:	ea4f 2828 	mov.w	r8, r8, asr #8
 802014a:	ebae 0e08 	sub.w	lr, lr, r8
 802014e:	ebab 0808 	sub.w	r8, fp, r8
 8020152:	f814 b00a 	ldrb.w	fp, [r4, sl]
 8020156:	fa5f fe8e 	uxtb.w	lr, lr
 802015a:	fb08 550b 	mla	r5, r8, fp, r5
 802015e:	fb95 f5fe 	sdiv	r5, r5, lr
 8020162:	f804 500a 	strb.w	r5, [r4, sl]
 8020166:	f899 5001 	ldrb.w	r5, [r9, #1]
 802016a:	f889 e003 	strb.w	lr, [r9, #3]
 802016e:	fb08 7705 	mla	r7, r8, r5, r7
 8020172:	f899 5002 	ldrb.w	r5, [r9, #2]
 8020176:	fb08 6605 	mla	r6, r8, r5, r6
 802017a:	fb97 f7fe 	sdiv	r7, r7, lr
 802017e:	fb96 f6fe 	sdiv	r6, r6, lr
 8020182:	f889 7001 	strb.w	r7, [r9, #1]
 8020186:	f889 6002 	strb.w	r6, [r9, #2]
 802018a:	e7bd      	b.n	8020108 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802018c:	2a00      	cmp	r2, #0
 802018e:	f43f af3b 	beq.w	8020008 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 8020192:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 8020196:	fb16 f602 	smulbb	r6, r6, r2
 802019a:	fb12 fc0c 	smulbb	ip, r2, ip
 802019e:	fb12 f707 	smulbb	r7, r2, r7
 80201a2:	fb02 fe0a 	mul.w	lr, r2, sl
 80201a6:	f10e 0801 	add.w	r8, lr, #1
 80201aa:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 80201ae:	eb02 0e0a 	add.w	lr, r2, sl
 80201b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80201b6:	ebae 0e08 	sub.w	lr, lr, r8
 80201ba:	ebaa 0808 	sub.w	r8, sl, r8
 80201be:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 80201c2:	fa5f fe8e 	uxtb.w	lr, lr
 80201c6:	fb08 660a 	mla	r6, r8, sl, r6
 80201ca:	f805 ec01 	strb.w	lr, [r5, #-1]
 80201ce:	fb96 f6fe 	sdiv	r6, r6, lr
 80201d2:	f805 6c04 	strb.w	r6, [r5, #-4]
 80201d6:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 80201da:	fb08 cc06 	mla	ip, r8, r6, ip
 80201de:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 80201e2:	fb08 7706 	mla	r7, r8, r6, r7
 80201e6:	fb9c fcfe 	sdiv	ip, ip, lr
 80201ea:	fb97 f7fe 	sdiv	r7, r7, lr
 80201ee:	f805 cc03 	strb.w	ip, [r5, #-3]
 80201f2:	f805 7c02 	strb.w	r7, [r5, #-2]
 80201f6:	e707      	b.n	8020008 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 80201f8:	b005      	add	sp, #20
 80201fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201fe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020202:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020204:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020208:	9201      	str	r2, [sp, #4]
 802020a:	6860      	ldr	r0, [r4, #4]
 802020c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 802020e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8020212:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8020216:	fb00 2505 	mla	r5, r0, r5, r2
 802021a:	6822      	ldr	r2, [r4, #0]
 802021c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8020220:	683a      	ldr	r2, [r7, #0]
 8020222:	9200      	str	r2, [sp, #0]
 8020224:	2900      	cmp	r1, #0
 8020226:	dc03      	bgt.n	8020230 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020228:	9a01      	ldr	r2, [sp, #4]
 802022a:	2a00      	cmp	r2, #0
 802022c:	f340 80be 	ble.w	80203ac <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020230:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020232:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 8020236:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802023a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802023c:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 8020240:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020244:	2b00      	cmp	r3, #0
 8020246:	dd0c      	ble.n	8020262 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020248:	1404      	asrs	r4, r0, #16
 802024a:	d405      	bmi.n	8020258 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802024c:	454c      	cmp	r4, r9
 802024e:	da03      	bge.n	8020258 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020250:	1414      	asrs	r4, r2, #16
 8020252:	d401      	bmi.n	8020258 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020254:	4564      	cmp	r4, ip
 8020256:	db05      	blt.n	8020264 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020258:	4440      	add	r0, r8
 802025a:	4472      	add	r2, lr
 802025c:	3b01      	subs	r3, #1
 802025e:	3504      	adds	r5, #4
 8020260:	e7f0      	b.n	8020244 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020262:	d00e      	beq.n	8020282 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020264:	1e5c      	subs	r4, r3, #1
 8020266:	fb08 0604 	mla	r6, r8, r4, r0
 802026a:	1436      	asrs	r6, r6, #16
 802026c:	d53e      	bpl.n	80202ec <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 802026e:	4699      	mov	r9, r3
 8020270:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 8020274:	f1b9 0f00 	cmp.w	r9, #0
 8020278:	dc68      	bgt.n	802034c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802027a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802027e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8020282:	2900      	cmp	r1, #0
 8020284:	f340 8092 	ble.w	80203ac <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020288:	ee30 0a04 	vadd.f32	s0, s0, s8
 802028c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802028e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020292:	3901      	subs	r1, #1
 8020294:	eeb0 6a62 	vmov.f32	s12, s5
 8020298:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802029c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202a4:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80202a8:	eeb0 6a43 	vmov.f32	s12, s6
 80202ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202b0:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80202b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202cc:	ee12 2a90 	vmov	r2, s5
 80202d0:	eef0 2a47 	vmov.f32	s5, s14
 80202d4:	fb92 f8f3 	sdiv	r8, r2, r3
 80202d8:	ee13 2a10 	vmov	r2, s6
 80202dc:	eeb0 3a67 	vmov.f32	s6, s15
 80202e0:	fb92 fef3 	sdiv	lr, r2, r3
 80202e4:	9a01      	ldr	r2, [sp, #4]
 80202e6:	bf08      	it	eq
 80202e8:	4613      	moveq	r3, r2
 80202ea:	e79b      	b.n	8020224 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 80202ec:	454e      	cmp	r6, r9
 80202ee:	dabe      	bge.n	802026e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202f0:	fb0e 2404 	mla	r4, lr, r4, r2
 80202f4:	1424      	asrs	r4, r4, #16
 80202f6:	d4ba      	bmi.n	802026e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202f8:	4564      	cmp	r4, ip
 80202fa:	dab8      	bge.n	802026e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202fc:	4699      	mov	r9, r3
 80202fe:	46aa      	mov	sl, r5
 8020300:	f1b9 0f00 	cmp.w	r9, #0
 8020304:	ddb9      	ble.n	802027a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020306:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 802030a:	1406      	asrs	r6, r0, #16
 802030c:	1414      	asrs	r4, r2, #16
 802030e:	4440      	add	r0, r8
 8020310:	4472      	add	r2, lr
 8020312:	f109 39ff 	add.w	r9, r9, #4294967295
 8020316:	fb0c 6404 	mla	r4, ip, r4, r6
 802031a:	9e00      	ldr	r6, [sp, #0]
 802031c:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 8020320:	10f4      	asrs	r4, r6, #3
 8020322:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8020326:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802032a:	00f6      	lsls	r6, r6, #3
 802032c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020330:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8020334:	b2f6      	uxtb	r6, r6
 8020336:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802033a:	0224      	lsls	r4, r4, #8
 802033c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020340:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8020344:	4334      	orrs	r4, r6
 8020346:	f84a 4b04 	str.w	r4, [sl], #4
 802034a:	e7d9      	b.n	8020300 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 802034c:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8020350:	d427      	bmi.n	80203a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020352:	68be      	ldr	r6, [r7, #8]
 8020354:	4566      	cmp	r6, ip
 8020356:	dd24      	ble.n	80203a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020358:	ea5f 4b22 	movs.w	fp, r2, asr #16
 802035c:	d421      	bmi.n	80203a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802035e:	68fc      	ldr	r4, [r7, #12]
 8020360:	455c      	cmp	r4, fp
 8020362:	dd1e      	ble.n	80203a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020364:	b236      	sxth	r6, r6
 8020366:	9c00      	ldr	r4, [sp, #0]
 8020368:	fb0b c606 	mla	r6, fp, r6, ip
 802036c:	f06f 0b03 	mvn.w	fp, #3
 8020370:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 8020374:	fb0b fb09 	mul.w	fp, fp, r9
 8020378:	10f4      	asrs	r4, r6, #3
 802037a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 802037e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020382:	00f6      	lsls	r6, r6, #3
 8020384:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020388:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802038c:	b2f6      	uxtb	r6, r6
 802038e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8020392:	0224      	lsls	r4, r4, #8
 8020394:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020398:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 802039c:	4334      	orrs	r4, r6
 802039e:	f84a 400b 	str.w	r4, [sl, fp]
 80203a2:	4440      	add	r0, r8
 80203a4:	4472      	add	r2, lr
 80203a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80203aa:	e763      	b.n	8020274 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80203ac:	b003      	add	sp, #12
 80203ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080203b2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80203b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b6:	b085      	sub	sp, #20
 80203b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80203bc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80203be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80203c2:	6868      	ldr	r0, [r5, #4]
 80203c4:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80203c8:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 80203cc:	fb00 1404 	mla	r4, r0, r4, r1
 80203d0:	6829      	ldr	r1, [r5, #0]
 80203d2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80203d6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80203d8:	6809      	ldr	r1, [r1, #0]
 80203da:	9101      	str	r1, [sp, #4]
 80203dc:	9902      	ldr	r1, [sp, #8]
 80203de:	2900      	cmp	r1, #0
 80203e0:	dc03      	bgt.n	80203ea <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80203e2:	9903      	ldr	r1, [sp, #12]
 80203e4:	2900      	cmp	r1, #0
 80203e6:	f340 8137 	ble.w	8020658 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80203ea:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80203ec:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80203f0:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 80203f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80203f6:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 80203fa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80203fc:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8020400:	2b00      	cmp	r3, #0
 8020402:	dd0e      	ble.n	8020422 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020404:	1405      	asrs	r5, r0, #16
 8020406:	d405      	bmi.n	8020414 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020408:	4565      	cmp	r5, ip
 802040a:	da03      	bge.n	8020414 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802040c:	140d      	asrs	r5, r1, #16
 802040e:	d401      	bmi.n	8020414 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020410:	42bd      	cmp	r5, r7
 8020412:	db07      	blt.n	8020424 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020414:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020416:	3b01      	subs	r3, #1
 8020418:	3404      	adds	r4, #4
 802041a:	4428      	add	r0, r5
 802041c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802041e:	4429      	add	r1, r5
 8020420:	e7ee      	b.n	8020400 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020422:	d041      	beq.n	80204a8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 8020424:	1e5d      	subs	r5, r3, #1
 8020426:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020428:	fb06 0605 	mla	r6, r6, r5, r0
 802042c:	1436      	asrs	r6, r6, #16
 802042e:	d433      	bmi.n	8020498 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020430:	4566      	cmp	r6, ip
 8020432:	da31      	bge.n	8020498 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020434:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020436:	fb06 1505 	mla	r5, r6, r5, r1
 802043a:	142d      	asrs	r5, r5, #16
 802043c:	d42c      	bmi.n	8020498 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 802043e:	42bd      	cmp	r5, r7
 8020440:	da2a      	bge.n	8020498 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8020442:	1d25      	adds	r5, r4, #4
 8020444:	469a      	mov	sl, r3
 8020446:	f1ba 0f00 	cmp.w	sl, #0
 802044a:	dd29      	ble.n	80204a0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 802044c:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 802044e:	140e      	asrs	r6, r1, #16
 8020450:	2aff      	cmp	r2, #255	@ 0xff
 8020452:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 8020456:	ea4f 4720 	mov.w	r7, r0, asr #16
 802045a:	fb0c 7606 	mla	r6, ip, r6, r7
 802045e:	9f01      	ldr	r7, [sp, #4]
 8020460:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020464:	4437      	add	r7, r6
 8020466:	f897 e002 	ldrb.w	lr, [r7, #2]
 802046a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802046e:	9f01      	ldr	r7, [sp, #4]
 8020470:	f817 9006 	ldrb.w	r9, [r7, r6]
 8020474:	f040 80bb 	bne.w	80205ee <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8020478:	f805 9c04 	strb.w	r9, [r5, #-4]
 802047c:	f805 8c03 	strb.w	r8, [r5, #-3]
 8020480:	f805 ec02 	strb.w	lr, [r5, #-2]
 8020484:	f805 2c01 	strb.w	r2, [r5, #-1]
 8020488:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802048a:	3504      	adds	r5, #4
 802048c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020490:	4430      	add	r0, r6
 8020492:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020494:	4431      	add	r1, r6
 8020496:	e7d6      	b.n	8020446 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020498:	2500      	movs	r5, #0
 802049a:	195e      	adds	r6, r3, r5
 802049c:	2e00      	cmp	r6, #0
 802049e:	dc3f      	bgt.n	8020520 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80204a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204a4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80204a8:	9b02      	ldr	r3, [sp, #8]
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	f340 80d4 	ble.w	8020658 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80204b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204ba:	eeb0 6a62 	vmov.f32	s12, s5
 80204be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80204c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204ca:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80204ce:	eeb0 6a43 	vmov.f32	s12, s6
 80204d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204d6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80204da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80204e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80204ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204f2:	ee12 1a90 	vmov	r1, s5
 80204f6:	eef0 2a47 	vmov.f32	s5, s14
 80204fa:	fb91 f3f3 	sdiv	r3, r1, r3
 80204fe:	ee13 1a10 	vmov	r1, s6
 8020502:	9311      	str	r3, [sp, #68]	@ 0x44
 8020504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020506:	eeb0 3a67 	vmov.f32	s6, s15
 802050a:	fb91 f3f3 	sdiv	r3, r1, r3
 802050e:	9312      	str	r3, [sp, #72]	@ 0x48
 8020510:	9b02      	ldr	r3, [sp, #8]
 8020512:	9903      	ldr	r1, [sp, #12]
 8020514:	3b01      	subs	r3, #1
 8020516:	9302      	str	r3, [sp, #8]
 8020518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802051a:	bf08      	it	eq
 802051c:	460b      	moveq	r3, r1
 802051e:	e75d      	b.n	80203dc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020520:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8020524:	d424      	bmi.n	8020570 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020526:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8020528:	68b7      	ldr	r7, [r6, #8]
 802052a:	4567      	cmp	r7, ip
 802052c:	dd20      	ble.n	8020570 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802052e:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8020532:	d41d      	bmi.n	8020570 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020534:	68f6      	ldr	r6, [r6, #12]
 8020536:	4576      	cmp	r6, lr
 8020538:	dd1a      	ble.n	8020570 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802053a:	b23f      	sxth	r7, r7
 802053c:	9e01      	ldr	r6, [sp, #4]
 802053e:	2aff      	cmp	r2, #255	@ 0xff
 8020540:	fb0e cc07 	mla	ip, lr, r7, ip
 8020544:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020548:	4466      	add	r6, ip
 802054a:	f896 8002 	ldrb.w	r8, [r6, #2]
 802054e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020552:	9e01      	ldr	r6, [sp, #4]
 8020554:	f816 a00c 	ldrb.w	sl, [r6, ip]
 8020558:	d110      	bne.n	802057c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802055a:	f06f 0603 	mvn.w	r6, #3
 802055e:	436e      	muls	r6, r5
 8020560:	f804 a006 	strb.w	sl, [r4, r6]
 8020564:	4426      	add	r6, r4
 8020566:	f886 9001 	strb.w	r9, [r6, #1]
 802056a:	f886 8002 	strb.w	r8, [r6, #2]
 802056e:	70f2      	strb	r2, [r6, #3]
 8020570:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020572:	3d01      	subs	r5, #1
 8020574:	4430      	add	r0, r6
 8020576:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020578:	4431      	add	r1, r6
 802057a:	e78e      	b.n	802049a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 802057c:	2a00      	cmp	r2, #0
 802057e:	d0f7      	beq.n	8020570 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020580:	fb1a fa02 	smulbb	sl, sl, r2
 8020584:	f06f 0603 	mvn.w	r6, #3
 8020588:	fb12 f909 	smulbb	r9, r2, r9
 802058c:	fb12 f808 	smulbb	r8, r2, r8
 8020590:	fb06 fb05 	mul.w	fp, r6, r5
 8020594:	eb04 0c0b 	add.w	ip, r4, fp
 8020598:	f89c 7003 	ldrb.w	r7, [ip, #3]
 802059c:	fb02 f607 	mul.w	r6, r2, r7
 80205a0:	f106 0e01 	add.w	lr, r6, #1
 80205a4:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 80205a8:	19d6      	adds	r6, r2, r7
 80205aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80205ae:	eba7 070e 	sub.w	r7, r7, lr
 80205b2:	eba6 060e 	sub.w	r6, r6, lr
 80205b6:	f814 e00b 	ldrb.w	lr, [r4, fp]
 80205ba:	b2f6      	uxtb	r6, r6
 80205bc:	fb07 aa0e 	mla	sl, r7, lr, sl
 80205c0:	fb9a faf6 	sdiv	sl, sl, r6
 80205c4:	f804 a00b 	strb.w	sl, [r4, fp]
 80205c8:	f89c e001 	ldrb.w	lr, [ip, #1]
 80205cc:	f88c 6003 	strb.w	r6, [ip, #3]
 80205d0:	fb07 990e 	mla	r9, r7, lr, r9
 80205d4:	f89c e002 	ldrb.w	lr, [ip, #2]
 80205d8:	fb07 880e 	mla	r8, r7, lr, r8
 80205dc:	fb99 f9f6 	sdiv	r9, r9, r6
 80205e0:	fb98 f8f6 	sdiv	r8, r8, r6
 80205e4:	f88c 9001 	strb.w	r9, [ip, #1]
 80205e8:	f88c 8002 	strb.w	r8, [ip, #2]
 80205ec:	e7c0      	b.n	8020570 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80205ee:	2a00      	cmp	r2, #0
 80205f0:	f43f af4a 	beq.w	8020488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 80205f4:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 80205f8:	fb19 f902 	smulbb	r9, r9, r2
 80205fc:	fb12 f808 	smulbb	r8, r2, r8
 8020600:	fb02 fc0b 	mul.w	ip, r2, fp
 8020604:	eb02 060b 	add.w	r6, r2, fp
 8020608:	fb12 fe0e 	smulbb	lr, r2, lr
 802060c:	f10c 0701 	add.w	r7, ip, #1
 8020610:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020614:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8020618:	ebab 070c 	sub.w	r7, fp, ip
 802061c:	eba6 060c 	sub.w	r6, r6, ip
 8020620:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8020624:	b2f6      	uxtb	r6, r6
 8020626:	fb07 990c 	mla	r9, r7, ip, r9
 802062a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 802062e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020632:	fb07 880c 	mla	r8, r7, ip, r8
 8020636:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 802063a:	fb07 ee0c 	mla	lr, r7, ip, lr
 802063e:	fb99 f9f6 	sdiv	r9, r9, r6
 8020642:	fb98 f8f6 	sdiv	r8, r8, r6
 8020646:	fb9e fef6 	sdiv	lr, lr, r6
 802064a:	f805 9c04 	strb.w	r9, [r5, #-4]
 802064e:	f805 8c03 	strb.w	r8, [r5, #-3]
 8020652:	f805 ec02 	strb.w	lr, [r5, #-2]
 8020656:	e717      	b.n	8020488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8020658:	b005      	add	sp, #20
 802065a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802065e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802065e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020662:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020668:	9201      	str	r2, [sp, #4]
 802066a:	6868      	ldr	r0, [r5, #4]
 802066c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 802066e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8020672:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8020676:	fb00 2404 	mla	r4, r0, r4, r2
 802067a:	682a      	ldr	r2, [r5, #0]
 802067c:	f8d7 8000 	ldr.w	r8, [r7]
 8020680:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8020684:	2900      	cmp	r1, #0
 8020686:	dc03      	bgt.n	8020690 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020688:	9a01      	ldr	r2, [sp, #4]
 802068a:	2a00      	cmp	r2, #0
 802068c:	f340 80af 	ble.w	80207ee <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8020690:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020692:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8020696:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802069a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802069c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80206a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	dd0c      	ble.n	80206c2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80206a8:	1405      	asrs	r5, r0, #16
 80206aa:	d405      	bmi.n	80206b8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80206ac:	4555      	cmp	r5, sl
 80206ae:	da03      	bge.n	80206b8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80206b0:	1415      	asrs	r5, r2, #16
 80206b2:	d401      	bmi.n	80206b8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80206b4:	454d      	cmp	r5, r9
 80206b6:	db05      	blt.n	80206c4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80206b8:	4470      	add	r0, lr
 80206ba:	4462      	add	r2, ip
 80206bc:	3b01      	subs	r3, #1
 80206be:	3404      	adds	r4, #4
 80206c0:	e7f0      	b.n	80206a4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80206c2:	d037      	beq.n	8020734 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 80206c4:	1e5d      	subs	r5, r3, #1
 80206c6:	fb0e 0605 	mla	r6, lr, r5, r0
 80206ca:	1436      	asrs	r6, r6, #16
 80206cc:	d42a      	bmi.n	8020724 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80206ce:	4556      	cmp	r6, sl
 80206d0:	da28      	bge.n	8020724 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80206d2:	fb0c 2505 	mla	r5, ip, r5, r2
 80206d6:	142d      	asrs	r5, r5, #16
 80206d8:	d424      	bmi.n	8020724 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80206da:	454d      	cmp	r5, r9
 80206dc:	da22      	bge.n	8020724 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80206de:	1d26      	adds	r6, r4, #4
 80206e0:	4699      	mov	r9, r3
 80206e2:	f1b9 0f00 	cmp.w	r9, #0
 80206e6:	f106 0604 	add.w	r6, r6, #4
 80206ea:	dd1f      	ble.n	802072c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 80206ec:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80206f0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80206f4:	1415      	asrs	r5, r2, #16
 80206f6:	4470      	add	r0, lr
 80206f8:	4462      	add	r2, ip
 80206fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80206fe:	fb0b a505 	mla	r5, fp, r5, sl
 8020702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020706:	eb08 0a05 	add.w	sl, r8, r5
 802070a:	f818 5005 	ldrb.w	r5, [r8, r5]
 802070e:	f806 5c08 	strb.w	r5, [r6, #-8]
 8020712:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020716:	f806 5c07 	strb.w	r5, [r6, #-7]
 802071a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 802071e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020722:	e7de      	b.n	80206e2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020724:	2600      	movs	r6, #0
 8020726:	199d      	adds	r5, r3, r6
 8020728:	2d00      	cmp	r5, #0
 802072a:	dc37      	bgt.n	802079c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802072c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020730:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020734:	2900      	cmp	r1, #0
 8020736:	dd5a      	ble.n	80207ee <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8020738:	ee30 0a04 	vadd.f32	s0, s0, s8
 802073c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802073e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020742:	3901      	subs	r1, #1
 8020744:	eeb0 6a62 	vmov.f32	s12, s5
 8020748:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802074c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020750:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020754:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020758:	eeb0 6a43 	vmov.f32	s12, s6
 802075c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020760:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020764:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020768:	ee61 7a27 	vmul.f32	s15, s2, s15
 802076c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020770:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020774:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020778:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802077c:	ee12 2a90 	vmov	r2, s5
 8020780:	eef0 2a47 	vmov.f32	s5, s14
 8020784:	fb92 fef3 	sdiv	lr, r2, r3
 8020788:	ee13 2a10 	vmov	r2, s6
 802078c:	eeb0 3a67 	vmov.f32	s6, s15
 8020790:	fb92 fcf3 	sdiv	ip, r2, r3
 8020794:	9a01      	ldr	r2, [sp, #4]
 8020796:	bf08      	it	eq
 8020798:	4613      	moveq	r3, r2
 802079a:	e773      	b.n	8020684 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 802079c:	ea5f 4920 	movs.w	r9, r0, asr #16
 80207a0:	d421      	bmi.n	80207e6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80207a2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80207a6:	45cb      	cmp	fp, r9
 80207a8:	dd1d      	ble.n	80207e6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80207aa:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80207ae:	d41a      	bmi.n	80207e6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80207b0:	68fd      	ldr	r5, [r7, #12]
 80207b2:	4555      	cmp	r5, sl
 80207b4:	dd17      	ble.n	80207e6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80207b6:	fa0f f58b 	sxth.w	r5, fp
 80207ba:	fb0a 9505 	mla	r5, sl, r5, r9
 80207be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80207c2:	f818 9005 	ldrb.w	r9, [r8, r5]
 80207c6:	eb08 0b05 	add.w	fp, r8, r5
 80207ca:	f06f 0503 	mvn.w	r5, #3
 80207ce:	4375      	muls	r5, r6
 80207d0:	f804 9005 	strb.w	r9, [r4, r5]
 80207d4:	4425      	add	r5, r4
 80207d6:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80207da:	f885 9001 	strb.w	r9, [r5, #1]
 80207de:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80207e2:	f885 9002 	strb.w	r9, [r5, #2]
 80207e6:	4470      	add	r0, lr
 80207e8:	4462      	add	r2, ip
 80207ea:	3e01      	subs	r6, #1
 80207ec:	e79b      	b.n	8020726 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80207ee:	b003      	add	sp, #12
 80207f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207f4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207f8:	b087      	sub	sp, #28
 80207fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80207fe:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020800:	9203      	str	r2, [sp, #12]
 8020802:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020806:	9100      	str	r1, [sp, #0]
 8020808:	9204      	str	r2, [sp, #16]
 802080a:	6861      	ldr	r1, [r4, #4]
 802080c:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8020810:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8020814:	fb01 2000 	mla	r0, r1, r0, r2
 8020818:	6822      	ldr	r2, [r4, #0]
 802081a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 802081e:	f8db 2000 	ldr.w	r2, [fp]
 8020822:	9201      	str	r2, [sp, #4]
 8020824:	9a00      	ldr	r2, [sp, #0]
 8020826:	2a00      	cmp	r2, #0
 8020828:	dc03      	bgt.n	8020832 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802082a:	9a03      	ldr	r2, [sp, #12]
 802082c:	2a00      	cmp	r2, #0
 802082e:	f340 8147 	ble.w	8020ac0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020832:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020834:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020838:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802083c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802083e:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020842:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020846:	2b00      	cmp	r3, #0
 8020848:	dd0e      	ble.n	8020868 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802084a:	140c      	asrs	r4, r1, #16
 802084c:	d405      	bmi.n	802085a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802084e:	42bc      	cmp	r4, r7
 8020850:	da03      	bge.n	802085a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020852:	1414      	asrs	r4, r2, #16
 8020854:	d401      	bmi.n	802085a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020856:	42b4      	cmp	r4, r6
 8020858:	db07      	blt.n	802086a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802085a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802085c:	3b01      	subs	r3, #1
 802085e:	3004      	adds	r0, #4
 8020860:	4421      	add	r1, r4
 8020862:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020864:	4422      	add	r2, r4
 8020866:	e7ee      	b.n	8020846 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020868:	d048      	beq.n	80208fc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 802086a:	1e5c      	subs	r4, r3, #1
 802086c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802086e:	fb05 1504 	mla	r5, r5, r4, r1
 8020872:	142d      	asrs	r5, r5, #16
 8020874:	d438      	bmi.n	80208e8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020876:	42bd      	cmp	r5, r7
 8020878:	da36      	bge.n	80208e8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 802087a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802087c:	fb05 2404 	mla	r4, r5, r4, r2
 8020880:	1424      	asrs	r4, r4, #16
 8020882:	d431      	bmi.n	80208e8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020884:	42b4      	cmp	r4, r6
 8020886:	da2f      	bge.n	80208e8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020888:	469e      	mov	lr, r3
 802088a:	4604      	mov	r4, r0
 802088c:	f1be 0f00 	cmp.w	lr, #0
 8020890:	dd30      	ble.n	80208f4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8020892:	140e      	asrs	r6, r1, #16
 8020894:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020898:	1415      	asrs	r5, r2, #16
 802089a:	fb07 6505 	mla	r5, r7, r5, r6
 802089e:	9e01      	ldr	r6, [sp, #4]
 80208a0:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 80208a4:	0e35      	lsrs	r5, r6, #24
 80208a6:	d017      	beq.n	80208d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 80208a8:	9f04      	ldr	r7, [sp, #16]
 80208aa:	f3c6 4907 	ubfx	r9, r6, #16, #8
 80208ae:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80208b2:	437d      	muls	r5, r7
 80208b4:	fa5f f88c 	uxtb.w	r8, ip
 80208b8:	1c6f      	adds	r7, r5, #1
 80208ba:	eb07 2525 	add.w	r5, r7, r5, asr #8
 80208be:	fa5f f789 	uxtb.w	r7, r9
 80208c2:	122d      	asrs	r5, r5, #8
 80208c4:	9702      	str	r7, [sp, #8]
 80208c6:	2dff      	cmp	r5, #255	@ 0xff
 80208c8:	f040 80c7 	bne.w	8020a5a <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80208cc:	7026      	strb	r6, [r4, #0]
 80208ce:	f884 c001 	strb.w	ip, [r4, #1]
 80208d2:	f884 9002 	strb.w	r9, [r4, #2]
 80208d6:	70e5      	strb	r5, [r4, #3]
 80208d8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80208da:	3404      	adds	r4, #4
 80208dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80208e0:	4429      	add	r1, r5
 80208e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80208e4:	442a      	add	r2, r5
 80208e6:	e7d1      	b.n	802088c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80208e8:	f04f 0c00 	mov.w	ip, #0
 80208ec:	eb03 040c 	add.w	r4, r3, ip
 80208f0:	2c00      	cmp	r4, #0
 80208f2:	dc3f      	bgt.n	8020974 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 80208f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80208fc:	9b00      	ldr	r3, [sp, #0]
 80208fe:	2b00      	cmp	r3, #0
 8020900:	f340 80de 	ble.w	8020ac0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020904:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020908:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802090a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802090e:	eeb0 6a62 	vmov.f32	s12, s5
 8020912:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020916:	ee31 1a05 	vadd.f32	s2, s2, s10
 802091a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802091e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020922:	eeb0 6a43 	vmov.f32	s12, s6
 8020926:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802092a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802092e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020932:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020936:	ee77 2a62 	vsub.f32	s5, s14, s5
 802093a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802093e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020946:	ee12 2a90 	vmov	r2, s5
 802094a:	eef0 2a47 	vmov.f32	s5, s14
 802094e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020952:	ee13 2a10 	vmov	r2, s6
 8020956:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802095a:	eeb0 3a67 	vmov.f32	s6, s15
 802095e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020962:	9314      	str	r3, [sp, #80]	@ 0x50
 8020964:	9b00      	ldr	r3, [sp, #0]
 8020966:	9a03      	ldr	r2, [sp, #12]
 8020968:	3b01      	subs	r3, #1
 802096a:	9300      	str	r3, [sp, #0]
 802096c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802096e:	bf08      	it	eq
 8020970:	4613      	moveq	r3, r2
 8020972:	e757      	b.n	8020824 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020974:	140e      	asrs	r6, r1, #16
 8020976:	d42e      	bmi.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020978:	f8db 5008 	ldr.w	r5, [fp, #8]
 802097c:	42b5      	cmp	r5, r6
 802097e:	dd2a      	ble.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020980:	1417      	asrs	r7, r2, #16
 8020982:	d428      	bmi.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020984:	f8db 400c 	ldr.w	r4, [fp, #12]
 8020988:	42bc      	cmp	r4, r7
 802098a:	dd24      	ble.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802098c:	b22d      	sxth	r5, r5
 802098e:	9c01      	ldr	r4, [sp, #4]
 8020990:	fb07 6505 	mla	r5, r7, r5, r6
 8020994:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8020998:	0e2c      	lsrs	r4, r5, #24
 802099a:	d01c      	beq.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802099c:	9e04      	ldr	r6, [sp, #16]
 802099e:	4374      	muls	r4, r6
 80209a0:	1c66      	adds	r6, r4, #1
 80209a2:	eb06 2424 	add.w	r4, r6, r4, asr #8
 80209a6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80209aa:	1224      	asrs	r4, r4, #8
 80209ac:	b2f7      	uxtb	r7, r6
 80209ae:	2cff      	cmp	r4, #255	@ 0xff
 80209b0:	9705      	str	r7, [sp, #20]
 80209b2:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80209b6:	fa5f f887 	uxtb.w	r8, r7
 80209ba:	d113      	bne.n	80209e4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80209bc:	f06f 0e03 	mvn.w	lr, #3
 80209c0:	fb0e fe0c 	mul.w	lr, lr, ip
 80209c4:	f800 500e 	strb.w	r5, [r0, lr]
 80209c8:	4486      	add	lr, r0
 80209ca:	f88e 7001 	strb.w	r7, [lr, #1]
 80209ce:	f88e 6002 	strb.w	r6, [lr, #2]
 80209d2:	f88e 4003 	strb.w	r4, [lr, #3]
 80209d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80209d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80209dc:	4421      	add	r1, r4
 80209de:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80209e0:	4422      	add	r2, r4
 80209e2:	e783      	b.n	80208ec <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 80209e4:	b2e6      	uxtb	r6, r4
 80209e6:	9602      	str	r6, [sp, #8]
 80209e8:	2c00      	cmp	r4, #0
 80209ea:	d0f4      	beq.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80209ec:	f06f 0603 	mvn.w	r6, #3
 80209f0:	b2ed      	uxtb	r5, r5
 80209f2:	fb04 f808 	mul.w	r8, r4, r8
 80209f6:	fb06 f90c 	mul.w	r9, r6, ip
 80209fa:	9e02      	ldr	r6, [sp, #8]
 80209fc:	eb00 0e09 	add.w	lr, r0, r9
 8020a00:	f89e a003 	ldrb.w	sl, [lr, #3]
 8020a04:	fb06 f70a 	mul.w	r7, r6, sl
 8020a08:	1c7e      	adds	r6, r7, #1
 8020a0a:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 8020a0e:	9e02      	ldr	r6, [sp, #8]
 8020a10:	123f      	asrs	r7, r7, #8
 8020a12:	4456      	add	r6, sl
 8020a14:	1bf6      	subs	r6, r6, r7
 8020a16:	ebaa 0707 	sub.w	r7, sl, r7
 8020a1a:	f810 a009 	ldrb.w	sl, [r0, r9]
 8020a1e:	b2f6      	uxtb	r6, r6
 8020a20:	fb07 fa0a 	mul.w	sl, r7, sl
 8020a24:	fb04 a505 	mla	r5, r4, r5, sl
 8020a28:	fb95 f5f6 	sdiv	r5, r5, r6
 8020a2c:	f800 5009 	strb.w	r5, [r0, r9]
 8020a30:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020a34:	f89e a002 	ldrb.w	sl, [lr, #2]
 8020a38:	fb07 8805 	mla	r8, r7, r5, r8
 8020a3c:	9d05      	ldr	r5, [sp, #20]
 8020a3e:	f88e 6003 	strb.w	r6, [lr, #3]
 8020a42:	436c      	muls	r4, r5
 8020a44:	fb07 470a 	mla	r7, r7, sl, r4
 8020a48:	fb98 f8f6 	sdiv	r8, r8, r6
 8020a4c:	fb97 f7f6 	sdiv	r7, r7, r6
 8020a50:	f88e 8001 	strb.w	r8, [lr, #1]
 8020a54:	f88e 7002 	strb.w	r7, [lr, #2]
 8020a58:	e7bd      	b.n	80209d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a5a:	b2ef      	uxtb	r7, r5
 8020a5c:	2d00      	cmp	r5, #0
 8020a5e:	f43f af3b 	beq.w	80208d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8020a62:	f894 9003 	ldrb.w	r9, [r4, #3]
 8020a66:	b2f6      	uxtb	r6, r6
 8020a68:	fb05 f808 	mul.w	r8, r5, r8
 8020a6c:	fb07 fa09 	mul.w	sl, r7, r9
 8020a70:	444f      	add	r7, r9
 8020a72:	f10a 0c01 	add.w	ip, sl, #1
 8020a76:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8020a7a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020a7e:	eba7 070c 	sub.w	r7, r7, ip
 8020a82:	eba9 0c0c 	sub.w	ip, r9, ip
 8020a86:	f894 9000 	ldrb.w	r9, [r4]
 8020a8a:	b2ff      	uxtb	r7, r7
 8020a8c:	fb0c f909 	mul.w	r9, ip, r9
 8020a90:	70e7      	strb	r7, [r4, #3]
 8020a92:	fb05 9606 	mla	r6, r5, r6, r9
 8020a96:	f894 9002 	ldrb.w	r9, [r4, #2]
 8020a9a:	fb96 f6f7 	sdiv	r6, r6, r7
 8020a9e:	7026      	strb	r6, [r4, #0]
 8020aa0:	7866      	ldrb	r6, [r4, #1]
 8020aa2:	fb0c 8806 	mla	r8, ip, r6, r8
 8020aa6:	9e02      	ldr	r6, [sp, #8]
 8020aa8:	4375      	muls	r5, r6
 8020aaa:	fb0c 5c09 	mla	ip, ip, r9, r5
 8020aae:	fb98 f8f7 	sdiv	r8, r8, r7
 8020ab2:	fb9c fcf7 	sdiv	ip, ip, r7
 8020ab6:	f884 8001 	strb.w	r8, [r4, #1]
 8020aba:	f884 c002 	strb.w	ip, [r4, #2]
 8020abe:	e70b      	b.n	80208d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8020ac0:	b007      	add	sp, #28
 8020ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020ac8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020acc:	b089      	sub	sp, #36	@ 0x24
 8020ace:	469a      	mov	sl, r3
 8020ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020ad4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8020ad6:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8020ada:	9102      	str	r1, [sp, #8]
 8020adc:	9206      	str	r2, [sp, #24]
 8020ade:	9307      	str	r3, [sp, #28]
 8020ae0:	6842      	ldr	r2, [r0, #4]
 8020ae2:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 8020ae6:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	@ 0x60
 8020aea:	fb02 3101 	mla	r1, r2, r1, r3
 8020aee:	6803      	ldr	r3, [r0, #0]
 8020af0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020af4:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020af8:	3301      	adds	r3, #1
 8020afa:	f023 0301 	bic.w	r3, r3, #1
 8020afe:	9303      	str	r3, [sp, #12]
 8020b00:	f8db 3000 	ldr.w	r3, [fp]
 8020b04:	9304      	str	r3, [sp, #16]
 8020b06:	9b02      	ldr	r3, [sp, #8]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	dc03      	bgt.n	8020b14 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b0c:	9b06      	ldr	r3, [sp, #24]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	f340 8154 	ble.w	8020dbc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020b14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020b16:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8020b1a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8020b1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020b20:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 8020b24:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8020b28:	9301      	str	r3, [sp, #4]
 8020b2a:	f1ba 0f00 	cmp.w	sl, #0
 8020b2e:	dd12      	ble.n	8020b56 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020b30:	1410      	asrs	r0, r2, #16
 8020b32:	d406      	bmi.n	8020b42 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020b34:	42b0      	cmp	r0, r6
 8020b36:	da04      	bge.n	8020b42 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020b38:	9b01      	ldr	r3, [sp, #4]
 8020b3a:	1418      	asrs	r0, r3, #16
 8020b3c:	d401      	bmi.n	8020b42 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020b3e:	42a8      	cmp	r0, r5
 8020b40:	db0a      	blt.n	8020b58 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020b42:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020b44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020b48:	9b01      	ldr	r3, [sp, #4]
 8020b4a:	3104      	adds	r1, #4
 8020b4c:	4402      	add	r2, r0
 8020b4e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020b50:	4403      	add	r3, r0
 8020b52:	9301      	str	r3, [sp, #4]
 8020b54:	e7e9      	b.n	8020b2a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020b56:	d050      	beq.n	8020bfa <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020b58:	f10a 30ff 	add.w	r0, sl, #4294967295
 8020b5c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020b5e:	fb04 2400 	mla	r4, r4, r0, r2
 8020b62:	1424      	asrs	r4, r4, #16
 8020b64:	d440      	bmi.n	8020be8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020b66:	42b4      	cmp	r4, r6
 8020b68:	da3e      	bge.n	8020be8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020b6a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020b6c:	9b01      	ldr	r3, [sp, #4]
 8020b6e:	fb04 3000 	mla	r0, r4, r0, r3
 8020b72:	1400      	asrs	r0, r0, #16
 8020b74:	d438      	bmi.n	8020be8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020b76:	42a8      	cmp	r0, r5
 8020b78:	da36      	bge.n	8020be8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020b7a:	1d08      	adds	r0, r1, #4
 8020b7c:	46d6      	mov	lr, sl
 8020b7e:	f1be 0f00 	cmp.w	lr, #0
 8020b82:	dd36      	ble.n	8020bf2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8020b84:	9b01      	ldr	r3, [sp, #4]
 8020b86:	1414      	asrs	r4, r2, #16
 8020b88:	141d      	asrs	r5, r3, #16
 8020b8a:	9b03      	ldr	r3, [sp, #12]
 8020b8c:	fb03 4505 	mla	r5, r3, r5, r4
 8020b90:	9b04      	ldr	r3, [sp, #16]
 8020b92:	086c      	lsrs	r4, r5, #1
 8020b94:	5d1c      	ldrb	r4, [r3, r4]
 8020b96:	07eb      	lsls	r3, r5, #31
 8020b98:	9b07      	ldr	r3, [sp, #28]
 8020b9a:	bf54      	ite	pl
 8020b9c:	f004 040f 	andpl.w	r4, r4, #15
 8020ba0:	1124      	asrmi	r4, r4, #4
 8020ba2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020ba6:	b2e4      	uxtb	r4, r4
 8020ba8:	435c      	muls	r4, r3
 8020baa:	1c65      	adds	r5, r4, #1
 8020bac:	eb05 2424 	add.w	r4, r5, r4, asr #8
 8020bb0:	4d84      	ldr	r5, [pc, #528]	@ (8020dc4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020bb2:	1224      	asrs	r4, r4, #8
 8020bb4:	f895 9002 	ldrb.w	r9, [r5, #2]
 8020bb8:	786f      	ldrb	r7, [r5, #1]
 8020bba:	2cff      	cmp	r4, #255	@ 0xff
 8020bbc:	f895 c000 	ldrb.w	ip, [r5]
 8020bc0:	f040 80cb 	bne.w	8020d5a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020bc4:	f800 cc04 	strb.w	ip, [r0, #-4]
 8020bc8:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020bcc:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020bd0:	f800 4c01 	strb.w	r4, [r0, #-1]
 8020bd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020bd6:	3004      	adds	r0, #4
 8020bd8:	9c01      	ldr	r4, [sp, #4]
 8020bda:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020bde:	441a      	add	r2, r3
 8020be0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020be2:	441c      	add	r4, r3
 8020be4:	9401      	str	r4, [sp, #4]
 8020be6:	e7ca      	b.n	8020b7e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020be8:	2600      	movs	r6, #0
 8020bea:	eb0a 0006 	add.w	r0, sl, r6
 8020bee:	2800      	cmp	r0, #0
 8020bf0:	dc41      	bgt.n	8020c76 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020bf2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8020bf6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020bfa:	9b02      	ldr	r3, [sp, #8]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	f340 80dd 	ble.w	8020dbc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020c02:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020c08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c0c:	eeb0 6a62 	vmov.f32	s12, s5
 8020c10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c1c:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8020c20:	eeb0 6a43 	vmov.f32	s12, s6
 8020c24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c28:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 8020c2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c44:	ee12 2a90 	vmov	r2, s5
 8020c48:	eef0 2a47 	vmov.f32	s5, s14
 8020c4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c50:	ee13 2a10 	vmov	r2, s6
 8020c54:	9315      	str	r3, [sp, #84]	@ 0x54
 8020c56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020c58:	eeb0 3a67 	vmov.f32	s6, s15
 8020c5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c60:	9316      	str	r3, [sp, #88]	@ 0x58
 8020c62:	9b02      	ldr	r3, [sp, #8]
 8020c64:	9a06      	ldr	r2, [sp, #24]
 8020c66:	3b01      	subs	r3, #1
 8020c68:	9302      	str	r3, [sp, #8]
 8020c6a:	bf08      	it	eq
 8020c6c:	4692      	moveq	sl, r2
 8020c6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020c70:	bf18      	it	ne
 8020c72:	469a      	movne	sl, r3
 8020c74:	e747      	b.n	8020b06 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020c76:	1414      	asrs	r4, r2, #16
 8020c78:	d432      	bmi.n	8020ce0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c7a:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020c7e:	42a0      	cmp	r0, r4
 8020c80:	dd2e      	ble.n	8020ce0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c82:	9b01      	ldr	r3, [sp, #4]
 8020c84:	141d      	asrs	r5, r3, #16
 8020c86:	d42b      	bmi.n	8020ce0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c88:	f8db 000c 	ldr.w	r0, [fp, #12]
 8020c8c:	42a8      	cmp	r0, r5
 8020c8e:	dd27      	ble.n	8020ce0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c90:	9803      	ldr	r0, [sp, #12]
 8020c92:	fb05 4400 	mla	r4, r5, r0, r4
 8020c96:	9d04      	ldr	r5, [sp, #16]
 8020c98:	0860      	lsrs	r0, r4, #1
 8020c9a:	07e4      	lsls	r4, r4, #31
 8020c9c:	9c07      	ldr	r4, [sp, #28]
 8020c9e:	5c28      	ldrb	r0, [r5, r0]
 8020ca0:	bf54      	ite	pl
 8020ca2:	f000 000f 	andpl.w	r0, r0, #15
 8020ca6:	1100      	asrmi	r0, r0, #4
 8020ca8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020cac:	b2c0      	uxtb	r0, r0
 8020cae:	4360      	muls	r0, r4
 8020cb0:	1c44      	adds	r4, r0, #1
 8020cb2:	eb04 2020 	add.w	r0, r4, r0, asr #8
 8020cb6:	4c43      	ldr	r4, [pc, #268]	@ (8020dc4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020cb8:	1200      	asrs	r0, r0, #8
 8020cba:	78a5      	ldrb	r5, [r4, #2]
 8020cbc:	f894 c001 	ldrb.w	ip, [r4, #1]
 8020cc0:	28ff      	cmp	r0, #255	@ 0xff
 8020cc2:	9505      	str	r5, [sp, #20]
 8020cc4:	f894 e000 	ldrb.w	lr, [r4]
 8020cc8:	d112      	bne.n	8020cf0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020cca:	f06f 0303 	mvn.w	r3, #3
 8020cce:	fb03 f406 	mul.w	r4, r3, r6
 8020cd2:	f801 e004 	strb.w	lr, [r1, r4]
 8020cd6:	440c      	add	r4, r1
 8020cd8:	f884 c001 	strb.w	ip, [r4, #1]
 8020cdc:	70a5      	strb	r5, [r4, #2]
 8020cde:	70e0      	strb	r0, [r4, #3]
 8020ce0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020ce2:	3e01      	subs	r6, #1
 8020ce4:	9801      	ldr	r0, [sp, #4]
 8020ce6:	441a      	add	r2, r3
 8020ce8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020cea:	4418      	add	r0, r3
 8020cec:	9001      	str	r0, [sp, #4]
 8020cee:	e77c      	b.n	8020bea <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020cf0:	b2c4      	uxtb	r4, r0
 8020cf2:	2800      	cmp	r0, #0
 8020cf4:	d0f4      	beq.n	8020ce0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020cf6:	f06f 0303 	mvn.w	r3, #3
 8020cfa:	fb00 fe0e 	mul.w	lr, r0, lr
 8020cfe:	fb00 fc0c 	mul.w	ip, r0, ip
 8020d02:	fb03 f806 	mul.w	r8, r3, r6
 8020d06:	eb01 0708 	add.w	r7, r1, r8
 8020d0a:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020d0e:	fb04 f509 	mul.w	r5, r4, r9
 8020d12:	444c      	add	r4, r9
 8020d14:	1c6b      	adds	r3, r5, #1
 8020d16:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020d1a:	9b05      	ldr	r3, [sp, #20]
 8020d1c:	122d      	asrs	r5, r5, #8
 8020d1e:	4358      	muls	r0, r3
 8020d20:	1b64      	subs	r4, r4, r5
 8020d22:	eba9 0505 	sub.w	r5, r9, r5
 8020d26:	f811 9008 	ldrb.w	r9, [r1, r8]
 8020d2a:	b2e4      	uxtb	r4, r4
 8020d2c:	fb05 ee09 	mla	lr, r5, r9, lr
 8020d30:	fb9e fef4 	sdiv	lr, lr, r4
 8020d34:	f801 e008 	strb.w	lr, [r1, r8]
 8020d38:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020d3c:	f897 9002 	ldrb.w	r9, [r7, #2]
 8020d40:	fb05 cc0e 	mla	ip, r5, lr, ip
 8020d44:	fb05 0509 	mla	r5, r5, r9, r0
 8020d48:	70fc      	strb	r4, [r7, #3]
 8020d4a:	fb9c fcf4 	sdiv	ip, ip, r4
 8020d4e:	fb95 f5f4 	sdiv	r5, r5, r4
 8020d52:	f887 c001 	strb.w	ip, [r7, #1]
 8020d56:	70bd      	strb	r5, [r7, #2]
 8020d58:	e7c2      	b.n	8020ce0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020d5a:	b2e5      	uxtb	r5, r4
 8020d5c:	2c00      	cmp	r4, #0
 8020d5e:	f43f af39 	beq.w	8020bd4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020d62:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 8020d66:	fb04 fc0c 	mul.w	ip, r4, ip
 8020d6a:	4367      	muls	r7, r4
 8020d6c:	fb05 f608 	mul.w	r6, r5, r8
 8020d70:	4445      	add	r5, r8
 8020d72:	fb04 f409 	mul.w	r4, r4, r9
 8020d76:	1c73      	adds	r3, r6, #1
 8020d78:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020d7c:	1236      	asrs	r6, r6, #8
 8020d7e:	1bad      	subs	r5, r5, r6
 8020d80:	eba8 0606 	sub.w	r6, r8, r6
 8020d84:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 8020d88:	b2ed      	uxtb	r5, r5
 8020d8a:	fb06 cc08 	mla	ip, r6, r8, ip
 8020d8e:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 8020d92:	f800 5c01 	strb.w	r5, [r0, #-1]
 8020d96:	fb9c fcf5 	sdiv	ip, ip, r5
 8020d9a:	f800 cc04 	strb.w	ip, [r0, #-4]
 8020d9e:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8020da2:	fb06 770c 	mla	r7, r6, ip, r7
 8020da6:	fb06 4608 	mla	r6, r6, r8, r4
 8020daa:	fb97 f7f5 	sdiv	r7, r7, r5
 8020dae:	fb96 f6f5 	sdiv	r6, r6, r5
 8020db2:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020db6:	f800 6c02 	strb.w	r6, [r0, #-2]
 8020dba:	e70b      	b.n	8020bd4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020dbc:	b009      	add	sp, #36	@ 0x24
 8020dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc2:	bf00      	nop
 8020dc4:	200122d4 	.word	0x200122d4

08020dc8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dcc:	b089      	sub	sp, #36	@ 0x24
 8020dce:	469a      	mov	sl, r3
 8020dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020dd4:	4cb8      	ldr	r4, [pc, #736]	@ (80210b8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 8020dd6:	9102      	str	r1, [sp, #8]
 8020dd8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020dda:	9205      	str	r2, [sp, #20]
 8020ddc:	684a      	ldr	r2, [r1, #4]
 8020dde:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 8020de2:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	@ 0x60
 8020de6:	fb02 3000 	mla	r0, r2, r0, r3
 8020dea:	680b      	ldr	r3, [r1, #0]
 8020dec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020df0:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020df4:	3301      	adds	r3, #1
 8020df6:	f023 0301 	bic.w	r3, r3, #1
 8020dfa:	9303      	str	r3, [sp, #12]
 8020dfc:	f8db 3000 	ldr.w	r3, [fp]
 8020e00:	9304      	str	r3, [sp, #16]
 8020e02:	9b02      	ldr	r3, [sp, #8]
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	dc03      	bgt.n	8020e10 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020e08:	9b05      	ldr	r3, [sp, #20]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	f340 8150 	ble.w	80210b0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020e10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020e12:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020e16:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8020e1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020e1c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020e20:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8020e24:	9301      	str	r3, [sp, #4]
 8020e26:	f1ba 0f00 	cmp.w	sl, #0
 8020e2a:	dd12      	ble.n	8020e52 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020e2c:	140b      	asrs	r3, r1, #16
 8020e2e:	d406      	bmi.n	8020e3e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e30:	42bb      	cmp	r3, r7
 8020e32:	da04      	bge.n	8020e3e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e34:	9b01      	ldr	r3, [sp, #4]
 8020e36:	141b      	asrs	r3, r3, #16
 8020e38:	d401      	bmi.n	8020e3e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e3a:	42b3      	cmp	r3, r6
 8020e3c:	db0a      	blt.n	8020e54 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020e3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020e40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020e44:	9a01      	ldr	r2, [sp, #4]
 8020e46:	3004      	adds	r0, #4
 8020e48:	4419      	add	r1, r3
 8020e4a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020e4c:	441a      	add	r2, r3
 8020e4e:	9201      	str	r2, [sp, #4]
 8020e50:	e7e9      	b.n	8020e26 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020e52:	d046      	beq.n	8020ee2 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8020e54:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020e58:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8020e5a:	fb05 1503 	mla	r5, r5, r3, r1
 8020e5e:	142d      	asrs	r5, r5, #16
 8020e60:	d436      	bmi.n	8020ed0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020e62:	42bd      	cmp	r5, r7
 8020e64:	da34      	bge.n	8020ed0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020e66:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020e68:	9a01      	ldr	r2, [sp, #4]
 8020e6a:	fb05 2303 	mla	r3, r5, r3, r2
 8020e6e:	141b      	asrs	r3, r3, #16
 8020e70:	d42e      	bmi.n	8020ed0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020e72:	42b3      	cmp	r3, r6
 8020e74:	da2c      	bge.n	8020ed0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020e76:	1d05      	adds	r5, r0, #4
 8020e78:	46d0      	mov	r8, sl
 8020e7a:	f1b8 0f00 	cmp.w	r8, #0
 8020e7e:	dd2c      	ble.n	8020eda <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020e80:	9b01      	ldr	r3, [sp, #4]
 8020e82:	9a03      	ldr	r2, [sp, #12]
 8020e84:	141e      	asrs	r6, r3, #16
 8020e86:	f894 e000 	ldrb.w	lr, [r4]
 8020e8a:	140b      	asrs	r3, r1, #16
 8020e8c:	fb02 3606 	mla	r6, r2, r6, r3
 8020e90:	9a04      	ldr	r2, [sp, #16]
 8020e92:	0873      	lsrs	r3, r6, #1
 8020e94:	5cd3      	ldrb	r3, [r2, r3]
 8020e96:	07f2      	lsls	r2, r6, #31
 8020e98:	bf54      	ite	pl
 8020e9a:	f003 030f 	andpl.w	r3, r3, #15
 8020e9e:	111b      	asrmi	r3, r3, #4
 8020ea0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020ea4:	b2db      	uxtb	r3, r3
 8020ea6:	2bff      	cmp	r3, #255	@ 0xff
 8020ea8:	f040 80c9 	bne.w	802103e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020eac:	f805 ec04 	strb.w	lr, [r5, #-4]
 8020eb0:	7863      	ldrb	r3, [r4, #1]
 8020eb2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8020eb6:	78a3      	ldrb	r3, [r4, #2]
 8020eb8:	f805 3c02 	strb.w	r3, [r5, #-2]
 8020ebc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020ebe:	3504      	adds	r5, #4
 8020ec0:	9a01      	ldr	r2, [sp, #4]
 8020ec2:	f108 38ff 	add.w	r8, r8, #4294967295
 8020ec6:	4419      	add	r1, r3
 8020ec8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020eca:	441a      	add	r2, r3
 8020ecc:	9201      	str	r2, [sp, #4]
 8020ece:	e7d4      	b.n	8020e7a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020ed0:	2500      	movs	r5, #0
 8020ed2:	eb0a 0305 	add.w	r3, sl, r5
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	dc41      	bgt.n	8020f5e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020eda:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8020ede:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020ee2:	9b02      	ldr	r3, [sp, #8]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	f340 80e3 	ble.w	80210b0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020eea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020eee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020ef0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ef4:	eeb0 6a62 	vmov.f32	s12, s5
 8020ef8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020efc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f04:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8020f08:	eeb0 6a43 	vmov.f32	s12, s6
 8020f0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f10:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 8020f14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f2c:	ee12 2a90 	vmov	r2, s5
 8020f30:	eef0 2a47 	vmov.f32	s5, s14
 8020f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f38:	ee13 2a10 	vmov	r2, s6
 8020f3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8020f3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020f40:	eeb0 3a67 	vmov.f32	s6, s15
 8020f44:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f48:	9316      	str	r3, [sp, #88]	@ 0x58
 8020f4a:	9b02      	ldr	r3, [sp, #8]
 8020f4c:	9a05      	ldr	r2, [sp, #20]
 8020f4e:	3b01      	subs	r3, #1
 8020f50:	9302      	str	r3, [sp, #8]
 8020f52:	bf08      	it	eq
 8020f54:	4692      	moveq	sl, r2
 8020f56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020f58:	bf18      	it	ne
 8020f5a:	469a      	movne	sl, r3
 8020f5c:	e751      	b.n	8020e02 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020f5e:	140e      	asrs	r6, r1, #16
 8020f60:	d426      	bmi.n	8020fb0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020f62:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020f66:	42b3      	cmp	r3, r6
 8020f68:	dd22      	ble.n	8020fb0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020f6a:	9b01      	ldr	r3, [sp, #4]
 8020f6c:	141f      	asrs	r7, r3, #16
 8020f6e:	d41f      	bmi.n	8020fb0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020f70:	f8db 300c 	ldr.w	r3, [fp, #12]
 8020f74:	42bb      	cmp	r3, r7
 8020f76:	dd1b      	ble.n	8020fb0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020f78:	9b03      	ldr	r3, [sp, #12]
 8020f7a:	f894 8000 	ldrb.w	r8, [r4]
 8020f7e:	fb07 6603 	mla	r6, r7, r3, r6
 8020f82:	9f04      	ldr	r7, [sp, #16]
 8020f84:	0873      	lsrs	r3, r6, #1
 8020f86:	07f6      	lsls	r6, r6, #31
 8020f88:	5cfb      	ldrb	r3, [r7, r3]
 8020f8a:	bf54      	ite	pl
 8020f8c:	f003 030f 	andpl.w	r3, r3, #15
 8020f90:	111b      	asrmi	r3, r3, #4
 8020f92:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020f96:	b2db      	uxtb	r3, r3
 8020f98:	2bff      	cmp	r3, #255	@ 0xff
 8020f9a:	d111      	bne.n	8020fc0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8020f9c:	f06f 0303 	mvn.w	r3, #3
 8020fa0:	436b      	muls	r3, r5
 8020fa2:	f800 8003 	strb.w	r8, [r0, r3]
 8020fa6:	4403      	add	r3, r0
 8020fa8:	7866      	ldrb	r6, [r4, #1]
 8020faa:	705e      	strb	r6, [r3, #1]
 8020fac:	78a6      	ldrb	r6, [r4, #2]
 8020fae:	709e      	strb	r6, [r3, #2]
 8020fb0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020fb2:	3d01      	subs	r5, #1
 8020fb4:	9a01      	ldr	r2, [sp, #4]
 8020fb6:	4419      	add	r1, r3
 8020fb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020fba:	441a      	add	r2, r3
 8020fbc:	9201      	str	r2, [sp, #4]
 8020fbe:	e788      	b.n	8020ed2 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d0f5      	beq.n	8020fb0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020fc4:	f06f 0203 	mvn.w	r2, #3
 8020fc8:	78a6      	ldrb	r6, [r4, #2]
 8020fca:	fb18 f803 	smulbb	r8, r8, r3
 8020fce:	fb02 f905 	mul.w	r9, r2, r5
 8020fd2:	9606      	str	r6, [sp, #24]
 8020fd4:	eb00 0c09 	add.w	ip, r0, r9
 8020fd8:	7866      	ldrb	r6, [r4, #1]
 8020fda:	f89c 7003 	ldrb.w	r7, [ip, #3]
 8020fde:	9607      	str	r6, [sp, #28]
 8020fe0:	fb03 f607 	mul.w	r6, r3, r7
 8020fe4:	9a07      	ldr	r2, [sp, #28]
 8020fe6:	f106 0e01 	add.w	lr, r6, #1
 8020fea:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 8020fee:	18fe      	adds	r6, r7, r3
 8020ff0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020ff4:	eba7 070e 	sub.w	r7, r7, lr
 8020ff8:	eba6 060e 	sub.w	r6, r6, lr
 8020ffc:	f810 e009 	ldrb.w	lr, [r0, r9]
 8021000:	b2f6      	uxtb	r6, r6
 8021002:	fb07 880e 	mla	r8, r7, lr, r8
 8021006:	fb98 f8f6 	sdiv	r8, r8, r6
 802100a:	f800 8009 	strb.w	r8, [r0, r9]
 802100e:	fb13 f902 	smulbb	r9, r3, r2
 8021012:	f89c e001 	ldrb.w	lr, [ip, #1]
 8021016:	9a06      	ldr	r2, [sp, #24]
 8021018:	fb07 990e 	mla	r9, r7, lr, r9
 802101c:	f89c e002 	ldrb.w	lr, [ip, #2]
 8021020:	fb13 f302 	smulbb	r3, r3, r2
 8021024:	f88c 6003 	strb.w	r6, [ip, #3]
 8021028:	fb07 330e 	mla	r3, r7, lr, r3
 802102c:	fb99 f9f6 	sdiv	r9, r9, r6
 8021030:	fb93 f3f6 	sdiv	r3, r3, r6
 8021034:	f88c 9001 	strb.w	r9, [ip, #1]
 8021038:	f88c 3002 	strb.w	r3, [ip, #2]
 802103c:	e7b8      	b.n	8020fb0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802103e:	2b00      	cmp	r3, #0
 8021040:	f43f af3c 	beq.w	8020ebc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8021044:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8021048:	fb1e fe03 	smulbb	lr, lr, r3
 802104c:	78a2      	ldrb	r2, [r4, #2]
 802104e:	fb03 fc09 	mul.w	ip, r3, r9
 8021052:	eb09 0603 	add.w	r6, r9, r3
 8021056:	9206      	str	r2, [sp, #24]
 8021058:	f10c 0701 	add.w	r7, ip, #1
 802105c:	7862      	ldrb	r2, [r4, #1]
 802105e:	eb07 272c 	add.w	r7, r7, ip, asr #8
 8021062:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8021066:	eba9 070c 	sub.w	r7, r9, ip
 802106a:	eba6 060c 	sub.w	r6, r6, ip
 802106e:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8021072:	fb13 f902 	smulbb	r9, r3, r2
 8021076:	9a06      	ldr	r2, [sp, #24]
 8021078:	b2f6      	uxtb	r6, r6
 802107a:	fb07 ee0c 	mla	lr, r7, ip, lr
 802107e:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8021082:	fb13 f302 	smulbb	r3, r3, r2
 8021086:	f805 6c01 	strb.w	r6, [r5, #-1]
 802108a:	fb07 990c 	mla	r9, r7, ip, r9
 802108e:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8021092:	fb07 330c 	mla	r3, r7, ip, r3
 8021096:	fb9e fef6 	sdiv	lr, lr, r6
 802109a:	fb99 f9f6 	sdiv	r9, r9, r6
 802109e:	fb93 f3f6 	sdiv	r3, r3, r6
 80210a2:	f805 ec04 	strb.w	lr, [r5, #-4]
 80210a6:	f805 9c03 	strb.w	r9, [r5, #-3]
 80210aa:	f805 3c02 	strb.w	r3, [r5, #-2]
 80210ae:	e705      	b.n	8020ebc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80210b0:	b009      	add	sp, #36	@ 0x24
 80210b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210b6:	bf00      	nop
 80210b8:	200122d4 	.word	0x200122d4

080210bc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOID1Ev>:
 80210bc:	4770      	bx	lr

080210be <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW9D1Ev>:
 80210be:	4770      	bx	lr

080210c0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLED1Ev>:
 80210c0:	4770      	bx	lr

080210c2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L4D1Ev>:
 80210c2:	4770      	bx	lr

080210c4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80210c4:	4770      	bx	lr

080210c6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80210c6:	4770      	bx	lr

080210c8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80210c8:	4770      	bx	lr

080210ca <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80210ca:	4770      	bx	lr

080210cc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80210cc:	4770      	bx	lr

080210ce <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210ce:	4770      	bx	lr

080210d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210d0:	4770      	bx	lr

080210d2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80210d2:	4770      	bx	lr

080210d4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210d4:	4770      	bx	lr

080210d6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80210d6:	4770      	bx	lr

080210d8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210d8:	4770      	bx	lr

080210da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80210da:	4770      	bx	lr

080210dc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210dc:	4770      	bx	lr

080210de <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80210de:	4770      	bx	lr

080210e0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80210e0:	4770      	bx	lr

080210e2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80210e2:	4770      	bx	lr

080210e4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80210e4:	4770      	bx	lr

080210e6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210e6:	4770      	bx	lr

080210e8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80210e8:	4770      	bx	lr

080210ea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210ea:	4770      	bx	lr

080210ec <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210ec:	4770      	bx	lr

080210ee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80210ee:	4770      	bx	lr

080210f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210f0:	4770      	bx	lr

080210f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80210f2:	4770      	bx	lr

080210f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210f4:	4770      	bx	lr

080210f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80210f6:	4770      	bx	lr

080210f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210f8:	4770      	bx	lr

080210fa <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80210fa:	4770      	bx	lr

080210fc <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80210fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021100:	b091      	sub	sp, #68	@ 0x44
 8021102:	460f      	mov	r7, r1
 8021104:	4614      	mov	r4, r2
 8021106:	f89d 8068 	ldrb.w	r8, [sp, #104]	@ 0x68
 802110a:	f89d 506c 	ldrb.w	r5, [sp, #108]	@ 0x6c
 802110e:	f1b8 0f00 	cmp.w	r8, #0
 8021112:	d054      	beq.n	80211be <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8021114:	6810      	ldr	r0, [r2, #0]
 8021116:	ae0c      	add	r6, sp, #48	@ 0x30
 8021118:	6851      	ldr	r1, [r2, #4]
 802111a:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 80212f0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 802111e:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 80212f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 8021122:	c603      	stmia	r6!, {r0, r1}
 8021124:	6818      	ldr	r0, [r3, #0]
 8021126:	ae0e      	add	r6, sp, #56	@ 0x38
 8021128:	6859      	ldr	r1, [r3, #4]
 802112a:	c603      	stmia	r6!, {r0, r1}
 802112c:	a80c      	add	r0, sp, #48	@ 0x30
 802112e:	f7f9 fe5f 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021132:	4621      	mov	r1, r4
 8021134:	a80e      	add	r0, sp, #56	@ 0x38
 8021136:	f7f9 fe83 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802113a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802113e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021142:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8021146:	f8d9 0000 	ldr.w	r0, [r9]
 802114a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802114e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8021152:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 8021156:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802115a:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	@ 0x3c
 802115e:	440a      	add	r2, r1
 8021160:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021164:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8021168:	4413      	add	r3, r2
 802116a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802116e:	6803      	ldr	r3, [r0, #0]
 8021170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021172:	4798      	blx	r3
 8021174:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021178:	d024      	beq.n	80211c4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 802117a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802117e:	f8d9 0000 	ldr.w	r0, [r9]
 8021182:	d022      	beq.n	80211ca <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8021184:	2102      	movs	r1, #2
 8021186:	f04f 0e00 	mov.w	lr, #0
 802118a:	f8d0 c000 	ldr.w	ip, [r0]
 802118e:	b2b6      	uxth	r6, r6
 8021190:	9106      	str	r1, [sp, #24]
 8021192:	b2bf      	uxth	r7, r7
 8021194:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8021198:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 802119c:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 80211a0:	f8ba 1000 	ldrh.w	r1, [sl]
 80211a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80211a8:	9601      	str	r6, [sp, #4]
 80211aa:	9700      	str	r7, [sp, #0]
 80211ac:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80211b0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80211b4:	9102      	str	r1, [sp, #8]
 80211b6:	4621      	mov	r1, r4
 80211b8:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 80211bc:	47a8      	blx	r5
 80211be:	b011      	add	sp, #68	@ 0x44
 80211c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211c4:	f010 0f20 	tst.w	r0, #32
 80211c8:	e7d9      	b.n	802117e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 80211ca:	6803      	ldr	r3, [r0, #0]
 80211cc:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80211d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80211d2:	4798      	blx	r3
 80211d4:	f8ba c000 	ldrh.w	ip, [sl]
 80211d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80211dc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80211e0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80211e4:	fb0c f606 	mul.w	r6, ip, r6
 80211e8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80211ec:	fb0c 2303 	mla	r3, ip, r3, r2
 80211f0:	ebac 0c07 	sub.w	ip, ip, r7
 80211f4:	eba9 0907 	sub.w	r9, r9, r7
 80211f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80211fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021200:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8021204:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8021208:	d148      	bne.n	802129c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802120a:	2d00      	cmp	r5, #0
 802120c:	d146      	bne.n	802129c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802120e:	42b0      	cmp	r0, r6
 8021210:	d268      	bcs.n	80212e4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8021212:	eb00 020b 	add.w	r2, r0, fp
 8021216:	4290      	cmp	r0, r2
 8021218:	d204      	bcs.n	8021224 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 802121a:	f854 3b04 	ldr.w	r3, [r4], #4
 802121e:	f840 3b04 	str.w	r3, [r0], #4
 8021222:	e7f8      	b.n	8021216 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 8021224:	4460      	add	r0, ip
 8021226:	444c      	add	r4, r9
 8021228:	e7f1      	b.n	802120e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 802122a:	fb04 f70a 	mul.w	r7, r4, sl
 802122e:	4454      	add	r4, sl
 8021230:	1c7a      	adds	r2, r7, #1
 8021232:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8021236:	1212      	asrs	r2, r2, #8
 8021238:	ebaa 0702 	sub.w	r7, sl, r2
 802123c:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 8021240:	1aa4      	subs	r4, r4, r2
 8021242:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8021246:	fb07 fa0a 	mul.w	sl, r7, sl
 802124a:	b2e4      	uxtb	r4, r4
 802124c:	fb05 a202 	mla	r2, r5, r2, sl
 8021250:	fa5f fa8e 	uxtb.w	sl, lr
 8021254:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021258:	fb07 fa0a 	mul.w	sl, r7, sl
 802125c:	fb07 fe0e 	mul.w	lr, r7, lr
 8021260:	fbb2 f2f4 	udiv	r2, r2, r4
 8021264:	0412      	lsls	r2, r2, #16
 8021266:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 802126a:	4611      	mov	r1, r2
 802126c:	b2da      	uxtb	r2, r3
 802126e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021272:	fb05 a202 	mla	r2, r5, r2, sl
 8021276:	fb05 e503 	mla	r5, r5, r3, lr
 802127a:	fbb2 f2f4 	udiv	r2, r2, r4
 802127e:	b2d2      	uxtb	r2, r2
 8021280:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8021284:	fbb5 f4f4 	udiv	r4, r5, r4
 8021288:	0224      	lsls	r4, r4, #8
 802128a:	430a      	orrs	r2, r1
 802128c:	b2a4      	uxth	r4, r4
 802128e:	4322      	orrs	r2, r4
 8021290:	6002      	str	r2, [r0, #0]
 8021292:	e025      	b.n	80212e0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8021294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021296:	4460      	add	r0, ip
 8021298:	444b      	add	r3, r9
 802129a:	461c      	mov	r4, r3
 802129c:	42b0      	cmp	r0, r6
 802129e:	d221      	bcs.n	80212e4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 80212a0:	eb00 030b 	add.w	r3, r0, fp
 80212a4:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
 80212a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80212aa:	4298      	cmp	r0, r3
 80212ac:	d2f2      	bcs.n	8021294 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 80212ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80212b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80212b4:	0e1d      	lsrs	r5, r3, #24
 80212b6:	920a      	str	r2, [sp, #40]	@ 0x28
 80212b8:	fb05 f408 	mul.w	r4, r5, r8
 80212bc:	1c65      	adds	r5, r4, #1
 80212be:	eb05 2524 	add.w	r5, r5, r4, asr #8
 80212c2:	122d      	asrs	r5, r5, #8
 80212c4:	d00c      	beq.n	80212e0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80212c6:	2dff      	cmp	r5, #255	@ 0xff
 80212c8:	b2ec      	uxtb	r4, r5
 80212ca:	d004      	beq.n	80212d6 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 80212cc:	f8d0 e000 	ldr.w	lr, [r0]
 80212d0:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 80212d4:	d1a9      	bne.n	802122a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 80212d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80212da:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 80212de:	6005      	str	r5, [r0, #0]
 80212e0:	3004      	adds	r0, #4
 80212e2:	e7e1      	b.n	80212a8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 80212e4:	4b02      	ldr	r3, [pc, #8]	@ (80212f0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 80212e6:	6818      	ldr	r0, [r3, #0]
 80212e8:	6803      	ldr	r3, [r0, #0]
 80212ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80212ec:	4798      	blx	r3
 80212ee:	e766      	b.n	80211be <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 80212f0:	200122c4 	.word	0x200122c4
 80212f4:	200122be 	.word	0x200122be

080212f8 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80212f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80212fc:	2300      	movs	r3, #0
 80212fe:	9300      	str	r3, [sp, #0]
 8021300:	4b3e      	ldr	r3, [pc, #248]	@ (80213fc <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021302:	781b      	ldrb	r3, [r3, #0]
 8021304:	2b00      	cmp	r3, #0
 8021306:	d137      	bne.n	8021378 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8021308:	4a3d      	ldr	r2, [pc, #244]	@ (8021400 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802130a:	f9b2 2000 	ldrsh.w	r2, [r2]
 802130e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8021312:	2b00      	cmp	r3, #0
 8021314:	d132      	bne.n	802137c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8021316:	4b3b      	ldr	r3, [pc, #236]	@ (8021404 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8021318:	f9b3 3000 	ldrsh.w	r3, [r3]
 802131c:	ac02      	add	r4, sp, #8
 802131e:	6808      	ldr	r0, [r1, #0]
 8021320:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021324:	ab02      	add	r3, sp, #8
 8021326:	6849      	ldr	r1, [r1, #4]
 8021328:	4d37      	ldr	r5, [pc, #220]	@ (8021408 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 802132a:	c303      	stmia	r3!, {r0, r1}
 802132c:	4669      	mov	r1, sp
 802132e:	4620      	mov	r0, r4
 8021330:	f7f9 fd86 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021334:	4668      	mov	r0, sp
 8021336:	f7f9 fd5b 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802133a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802133e:	f8bd 2000 	ldrh.w	r2, [sp]
 8021342:	462f      	mov	r7, r5
 8021344:	6828      	ldr	r0, [r5, #0]
 8021346:	4413      	add	r3, r2
 8021348:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802134c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021350:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021354:	4413      	add	r3, r2
 8021356:	f8ad 300a 	strh.w	r3, [sp, #10]
 802135a:	6803      	ldr	r3, [r0, #0]
 802135c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802135e:	4798      	blx	r3
 8021360:	f010 0f01 	tst.w	r0, #1
 8021364:	d00c      	beq.n	8021380 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8021366:	6828      	ldr	r0, [r5, #0]
 8021368:	6803      	ldr	r3, [r0, #0]
 802136a:	e894 0006 	ldmia.w	r4, {r1, r2}
 802136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021370:	4798      	blx	r3
 8021372:	b004      	add	sp, #16
 8021374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021378:	4a22      	ldr	r2, [pc, #136]	@ (8021404 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802137a:	e7c6      	b.n	802130a <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802137c:	4b20      	ldr	r3, [pc, #128]	@ (8021400 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802137e:	e7cb      	b.n	8021318 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021380:	6828      	ldr	r0, [r5, #0]
 8021382:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8021386:	6803      	ldr	r3, [r0, #0]
 8021388:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 802138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802138e:	4798      	blx	r3
 8021390:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8021394:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8021398:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 802139c:	fb15 3404 	smlabb	r4, r5, r4, r3
 80213a0:	eba5 0508 	sub.w	r5, r5, r8
 80213a4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80213a8:	6838      	ldr	r0, [r7, #0]
 80213aa:	00ad      	lsls	r5, r5, #2
 80213ac:	6803      	ldr	r3, [r0, #0]
 80213ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213b0:	4798      	blx	r3
 80213b2:	4b13      	ldr	r3, [pc, #76]	@ (8021400 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80213b4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80213b8:	881a      	ldrh	r2, [r3, #0]
 80213ba:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80213be:	4356      	muls	r6, r2
 80213c0:	fb02 1303 	mla	r3, r2, r3, r1
 80213c4:	eba2 0208 	sub.w	r2, r2, r8
 80213c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80213cc:	0092      	lsls	r2, r2, #2
 80213ce:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80213d2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80213d6:	42b0      	cmp	r0, r6
 80213d8:	d20b      	bcs.n	80213f2 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80213da:	eb00 0c03 	add.w	ip, r0, r3
 80213de:	4560      	cmp	r0, ip
 80213e0:	d204      	bcs.n	80213ec <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 80213e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80213e6:	f840 1b04 	str.w	r1, [r0], #4
 80213ea:	e7f8      	b.n	80213de <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 80213ec:	4410      	add	r0, r2
 80213ee:	442c      	add	r4, r5
 80213f0:	e7f1      	b.n	80213d6 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80213f2:	6838      	ldr	r0, [r7, #0]
 80213f4:	6803      	ldr	r3, [r0, #0]
 80213f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80213f8:	4798      	blx	r3
 80213fa:	e7ba      	b.n	8021372 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80213fc:	200122bc 	.word	0x200122bc
 8021400:	200122be 	.word	0x200122be
 8021404:	200122c0 	.word	0x200122c0
 8021408:	200122c4 	.word	0x200122c4

0802140c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021410:	461c      	mov	r4, r3
 8021412:	b093      	sub	sp, #76	@ 0x4c
 8021414:	460f      	mov	r7, r1
 8021416:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021418:	6820      	ldr	r0, [r4, #0]
 802141a:	6861      	ldr	r1, [r4, #4]
 802141c:	9205      	str	r2, [sp, #20]
 802141e:	aa0e      	add	r2, sp, #56	@ 0x38
 8021420:	f89d 8074 	ldrb.w	r8, [sp, #116]	@ 0x74
 8021424:	c203      	stmia	r2!, {r0, r1}
 8021426:	6818      	ldr	r0, [r3, #0]
 8021428:	aa10      	add	r2, sp, #64	@ 0x40
 802142a:	6859      	ldr	r1, [r3, #4]
 802142c:	c203      	stmia	r2!, {r0, r1}
 802142e:	a80e      	add	r0, sp, #56	@ 0x38
 8021430:	f7f9 fcde 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021434:	4621      	mov	r1, r4
 8021436:	a810      	add	r0, sp, #64	@ 0x40
 8021438:	f7f9 fd02 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802143c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8021440:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8021444:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021448:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 802144c:	bfdb      	ittet	le
 802144e:	b2b3      	uxthle	r3, r6
 8021450:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021454:	2301      	movgt	r3, #1
 8021456:	fb92 f3f3 	sdivle	r3, r2, r3
 802145a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 802145e:	441d      	add	r5, r3
 8021460:	fb92 f1f3 	sdiv	r1, r2, r3
 8021464:	fa1f fc81 	uxth.w	ip, r1
 8021468:	3d01      	subs	r5, #1
 802146a:	fb0c 2413 	mls	r4, ip, r3, r2
 802146e:	4661      	mov	r1, ip
 8021470:	fb14 f406 	smulbb	r4, r4, r6
 8021474:	4404      	add	r4, r0
 8021476:	fb95 f5f3 	sdiv	r5, r5, r3
 802147a:	b2a4      	uxth	r4, r4
 802147c:	b121      	cbz	r1, 8021488 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x7c>
 802147e:	9b05      	ldr	r3, [sp, #20]
 8021480:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021484:	ba1b      	rev	r3, r3
 8021486:	441f      	add	r7, r3
 8021488:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802148c:	b2ad      	uxth	r5, r5
 802148e:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8021492:	4418      	add	r0, r3
 8021494:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8021498:	00ad      	lsls	r5, r5, #2
 802149a:	441a      	add	r2, r3
 802149c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80214a0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80214a4:	9301      	str	r3, [sp, #4]
 80214a6:	4b7c      	ldr	r3, [pc, #496]	@ (8021698 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>)
 80214a8:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80214ac:	6818      	ldr	r0, [r3, #0]
 80214ae:	6803      	ldr	r3, [r0, #0]
 80214b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80214b2:	4798      	blx	r3
 80214b4:	4a79      	ldr	r2, [pc, #484]	@ (802169c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x290>)
 80214b6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80214ba:	2c00      	cmp	r4, #0
 80214bc:	8811      	ldrh	r1, [r2, #0]
 80214be:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 80214c2:	fb06 f601 	mul.w	r6, r6, r1
 80214c6:	fb01 c303 	mla	r3, r1, r3, ip
 80214ca:	920d      	str	r2, [sp, #52]	@ 0x34
 80214cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80214d0:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 80214d4:	bf18      	it	ne
 80214d6:	2600      	movne	r6, #0
 80214d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80214da:	f105 0304 	add.w	r3, r5, #4
 80214de:	9307      	str	r3, [sp, #28]
 80214e0:	9b01      	ldr	r3, [sp, #4]
 80214e2:	bf08      	it	eq
 80214e4:	461e      	moveq	r6, r3
 80214e6:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80214ea:	b2b6      	uxth	r6, r6
 80214ec:	9308      	str	r3, [sp, #32]
 80214ee:	2300      	movs	r3, #0
 80214f0:	9304      	str	r3, [sp, #16]
 80214f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80214f4:	4290      	cmp	r0, r2
 80214f6:	f080 80c7 	bcs.w	8021688 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80214fa:	b95b      	cbnz	r3, 8021514 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x108>
 80214fc:	783a      	ldrb	r2, [r7, #0]
 80214fe:	0993      	lsrs	r3, r2, #6
 8021500:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021504:	9204      	str	r2, [sp, #16]
 8021506:	1e5a      	subs	r2, r3, #1
 8021508:	2a02      	cmp	r2, #2
 802150a:	bf8d      	iteet	hi
 802150c:	787b      	ldrbhi	r3, [r7, #1]
 802150e:	3701      	addls	r7, #1
 8021510:	b29b      	uxthls	r3, r3
 8021512:	3702      	addhi	r7, #2
 8021514:	b184      	cbz	r4, 8021538 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x12c>
 8021516:	429c      	cmp	r4, r3
 8021518:	d907      	bls.n	802152a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11e>
 802151a:	1ae4      	subs	r4, r4, r3
 802151c:	4635      	mov	r5, r6
 802151e:	2300      	movs	r3, #0
 8021520:	b2a4      	uxth	r4, r4
 8021522:	9300      	str	r3, [sp, #0]
 8021524:	9b00      	ldr	r3, [sp, #0]
 8021526:	462e      	mov	r6, r5
 8021528:	e7e3      	b.n	80214f2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xe6>
 802152a:	1b1c      	subs	r4, r3, r4
 802152c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8021530:	b2a3      	uxth	r3, r4
 8021532:	2400      	movs	r4, #0
 8021534:	9300      	str	r3, [sp, #0]
 8021536:	e7f5      	b.n	8021524 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 8021538:	2202      	movs	r2, #2
 802153a:	9907      	ldr	r1, [sp, #28]
 802153c:	429e      	cmp	r6, r3
 802153e:	4615      	mov	r5, r2
 8021540:	9a04      	ldr	r2, [sp, #16]
 8021542:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021546:	9905      	ldr	r1, [sp, #20]
 8021548:	5a8a      	ldrh	r2, [r1, r2]
 802154a:	d845      	bhi.n	80215d8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 802154c:	1b99      	subs	r1, r3, r6
 802154e:	4625      	mov	r5, r4
 8021550:	9603      	str	r6, [sp, #12]
 8021552:	b289      	uxth	r1, r1
 8021554:	9100      	str	r1, [sp, #0]
 8021556:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802155a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802155e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8021562:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021566:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802156a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802156e:	ea4e 1e9e 	orr.w	lr, lr, lr, lsr #6
 8021572:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021576:	b2d2      	uxtb	r2, r2
 8021578:	ea4f 210e 	mov.w	r1, lr, lsl #8
 802157c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021580:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8021584:	ea41 0102 	orr.w	r1, r1, r2
 8021588:	d02b      	beq.n	80215e2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d6>
 802158a:	fb12 f208 	smulbb	r2, r2, r8
 802158e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8021592:	4683      	mov	fp, r0
 8021594:	920a      	str	r2, [sp, #40]	@ 0x28
 8021596:	fb1e f208 	smulbb	r2, lr, r8
 802159a:	9206      	str	r2, [sp, #24]
 802159c:	fb18 f20c 	smulbb	r2, r8, ip
 80215a0:	920c      	str	r2, [sp, #48]	@ 0x30
 80215a2:	9a08      	ldr	r2, [sp, #32]
 80215a4:	430a      	orrs	r2, r1
 80215a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80215a8:	f1ba 0f00 	cmp.w	sl, #0
 80215ac:	d123      	bne.n	80215f6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 80215ae:	9a03      	ldr	r2, [sp, #12]
 80215b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80215b4:	429e      	cmp	r6, r3
 80215b6:	d8b5      	bhi.n	8021524 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 80215b8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80215bc:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 80215c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80215c2:	1b64      	subs	r4, r4, r5
 80215c4:	9a01      	ldr	r2, [sp, #4]
 80215c6:	881b      	ldrh	r3, [r3, #0]
 80215c8:	b2a4      	uxth	r4, r4
 80215ca:	1a9b      	subs	r3, r3, r2
 80215cc:	2c00      	cmp	r4, #0
 80215ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80215d2:	bf18      	it	ne
 80215d4:	2500      	movne	r5, #0
 80215d6:	e7a5      	b.n	8021524 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 80215d8:	1af5      	subs	r5, r6, r3
 80215da:	9303      	str	r3, [sp, #12]
 80215dc:	9400      	str	r4, [sp, #0]
 80215de:	b2ad      	uxth	r5, r5
 80215e0:	e7b9      	b.n	8021556 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 80215e2:	9a03      	ldr	r2, [sp, #12]
 80215e4:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80215e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80215ec:	4282      	cmp	r2, r0
 80215ee:	d0e1      	beq.n	80215b4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a8>
 80215f0:	f840 1b04 	str.w	r1, [r0], #4
 80215f4:	e7fa      	b.n	80215ec <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 80215f6:	f8db 2000 	ldr.w	r2, [fp]
 80215fa:	ea5f 6c12 	movs.w	ip, r2, lsr #24
 80215fe:	9202      	str	r2, [sp, #8]
 8021600:	d109      	bne.n	8021616 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20a>
 8021602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021604:	f8cb 2000 	str.w	r2, [fp]
 8021608:	f10a 3aff 	add.w	sl, sl, #4294967295
 802160c:	f10b 0b04 	add.w	fp, fp, #4
 8021610:	fa1f fa8a 	uxth.w	sl, sl
 8021614:	e7c8      	b.n	80215a8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x19c>
 8021616:	fb08 f10c 	mul.w	r1, r8, ip
 802161a:	eb08 0e0c 	add.w	lr, r8, ip
 802161e:	9a02      	ldr	r2, [sp, #8]
 8021620:	f101 0901 	add.w	r9, r1, #1
 8021624:	eb09 2921 	add.w	r9, r9, r1, asr #8
 8021628:	ea4f 2129 	mov.w	r1, r9, asr #8
 802162c:	ebac 0901 	sub.w	r9, ip, r1
 8021630:	ebae 0e01 	sub.w	lr, lr, r1
 8021634:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021638:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802163a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 802163e:	fa5f fe8e 	uxtb.w	lr, lr
 8021642:	fb09 1c0c 	mla	ip, r9, ip, r1
 8021646:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021648:	fb09 1102 	mla	r1, r9, r2, r1
 802164c:	9a02      	ldr	r2, [sp, #8]
 802164e:	fbbc fcfe 	udiv	ip, ip, lr
 8021652:	fbb1 f1fe 	udiv	r1, r1, lr
 8021656:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 802165a:	b2c9      	uxtb	r1, r1
 802165c:	f40c 0c7f 	and.w	ip, ip, #16711680	@ 0xff0000
 8021660:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 8021664:	ea4c 0101 	orr.w	r1, ip, r1
 8021668:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 802166c:	9a06      	ldr	r2, [sp, #24]
 802166e:	fb09 220c 	mla	r2, r9, ip, r2
 8021672:	fbb2 f2fe 	udiv	r2, r2, lr
 8021676:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 802167a:	fa1f fc8c 	uxth.w	ip, ip
 802167e:	ea41 010c 	orr.w	r1, r1, ip
 8021682:	f8cb 1000 	str.w	r1, [fp]
 8021686:	e7bf      	b.n	8021608 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8021688:	4b03      	ldr	r3, [pc, #12]	@ (8021698 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>)
 802168a:	6818      	ldr	r0, [r3, #0]
 802168c:	6803      	ldr	r3, [r0, #0]
 802168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021690:	4798      	blx	r3
 8021692:	b013      	add	sp, #76	@ 0x4c
 8021694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021698:	200122c4 	.word	0x200122c4
 802169c:	200122be 	.word	0x200122be

080216a0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80216a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216a4:	b095      	sub	sp, #84	@ 0x54
 80216a6:	461c      	mov	r4, r3
 80216a8:	9204      	str	r2, [sp, #16]
 80216aa:	f89d 207c 	ldrb.w	r2, [sp, #124]	@ 0x7c
 80216ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80216b0:	6820      	ldr	r0, [r4, #0]
 80216b2:	9100      	str	r1, [sp, #0]
 80216b4:	920e      	str	r2, [sp, #56]	@ 0x38
 80216b6:	aa10      	add	r2, sp, #64	@ 0x40
 80216b8:	6861      	ldr	r1, [r4, #4]
 80216ba:	c203      	stmia	r2!, {r0, r1}
 80216bc:	6818      	ldr	r0, [r3, #0]
 80216be:	aa12      	add	r2, sp, #72	@ 0x48
 80216c0:	6859      	ldr	r1, [r3, #4]
 80216c2:	c203      	stmia	r2!, {r0, r1}
 80216c4:	a810      	add	r0, sp, #64	@ 0x40
 80216c6:	f7f9 fb93 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216ca:	4621      	mov	r1, r4
 80216cc:	a812      	add	r0, sp, #72	@ 0x48
 80216ce:	f7f9 fbb7 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216d2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	@ 0x44
 80216d6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80216da:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80216de:	f8bd 0048 	ldrh.w	r0, [sp, #72]	@ 0x48
 80216e2:	bfdb      	ittet	le
 80216e4:	b2b3      	uxthle	r3, r6
 80216e6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80216ea:	2301      	movgt	r3, #1
 80216ec:	fb92 f3f3 	sdivle	r3, r2, r3
 80216f0:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	@ 0x4a
 80216f4:	441d      	add	r5, r3
 80216f6:	fb92 f1f3 	sdiv	r1, r2, r3
 80216fa:	fa1f fc81 	uxth.w	ip, r1
 80216fe:	3d01      	subs	r5, #1
 8021700:	fb0c 2413 	mls	r4, ip, r3, r2
 8021704:	4661      	mov	r1, ip
 8021706:	fb14 f406 	smulbb	r4, r4, r6
 802170a:	4404      	add	r4, r0
 802170c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021710:	b2a4      	uxth	r4, r4
 8021712:	b131      	cbz	r1, 8021722 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8021714:	9b04      	ldr	r3, [sp, #16]
 8021716:	9900      	ldr	r1, [sp, #0]
 8021718:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802171c:	ba1b      	rev	r3, r3
 802171e:	4419      	add	r1, r3
 8021720:	9100      	str	r1, [sp, #0]
 8021722:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8021726:	b2ad      	uxth	r5, r5
 8021728:	f9bd 604e 	ldrsh.w	r6, [sp, #78]	@ 0x4e
 802172c:	4418      	add	r0, r3
 802172e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8021732:	00ad      	lsls	r5, r5, #2
 8021734:	441a      	add	r2, r3
 8021736:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 802173a:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 802173e:	9301      	str	r3, [sp, #4]
 8021740:	4b7b      	ldr	r3, [pc, #492]	@ (8021930 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x290>)
 8021742:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 8021746:	6818      	ldr	r0, [r3, #0]
 8021748:	6803      	ldr	r3, [r0, #0]
 802174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802174c:	4798      	blx	r3
 802174e:	4a79      	ldr	r2, [pc, #484]	@ (8021934 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x294>)
 8021750:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8021754:	2c00      	cmp	r4, #0
 8021756:	8811      	ldrh	r1, [r2, #0]
 8021758:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 802175c:	fb06 f601 	mul.w	r6, r6, r1
 8021760:	fb01 c303 	mla	r3, r1, r3, ip
 8021764:	bf18      	it	ne
 8021766:	f04f 0c00 	movne.w	ip, #0
 802176a:	920f      	str	r2, [sp, #60]	@ 0x3c
 802176c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021770:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 8021774:	9309      	str	r3, [sp, #36]	@ 0x24
 8021776:	f105 0304 	add.w	r3, r5, #4
 802177a:	9305      	str	r3, [sp, #20]
 802177c:	9b01      	ldr	r3, [sp, #4]
 802177e:	bf08      	it	eq
 8021780:	469c      	moveq	ip, r3
 8021782:	2300      	movs	r3, #0
 8021784:	fa1f fc8c 	uxth.w	ip, ip
 8021788:	9302      	str	r3, [sp, #8]
 802178a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802178c:	4290      	cmp	r0, r2
 802178e:	f080 80c7 	bcs.w	8021920 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 8021792:	b963      	cbnz	r3, 80217ae <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8021794:	9b00      	ldr	r3, [sp, #0]
 8021796:	781a      	ldrb	r2, [r3, #0]
 8021798:	0993      	lsrs	r3, r2, #6
 802179a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802179e:	9202      	str	r2, [sp, #8]
 80217a0:	1e5a      	subs	r2, r3, #1
 80217a2:	2a02      	cmp	r2, #2
 80217a4:	d815      	bhi.n	80217d2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 80217a6:	9a00      	ldr	r2, [sp, #0]
 80217a8:	b29b      	uxth	r3, r3
 80217aa:	3201      	adds	r2, #1
 80217ac:	9200      	str	r2, [sp, #0]
 80217ae:	b1b4      	cbz	r4, 80217de <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80217b0:	429c      	cmp	r4, r3
 80217b2:	bf91      	iteee	ls
 80217b4:	1b1c      	subls	r4, r3, r4
 80217b6:	1ae4      	subhi	r4, r4, r3
 80217b8:	4666      	movhi	r6, ip
 80217ba:	f04f 0b00 	movhi.w	fp, #0
 80217be:	bf9b      	ittet	ls
 80217c0:	fa1f fb84 	uxthls.w	fp, r4
 80217c4:	f8bd 6004 	ldrhls.w	r6, [sp, #4]
 80217c8:	b2a4      	uxthhi	r4, r4
 80217ca:	2400      	movls	r4, #0
 80217cc:	465b      	mov	r3, fp
 80217ce:	46b4      	mov	ip, r6
 80217d0:	e7db      	b.n	802178a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 80217d2:	9a00      	ldr	r2, [sp, #0]
 80217d4:	9b00      	ldr	r3, [sp, #0]
 80217d6:	3202      	adds	r2, #2
 80217d8:	785b      	ldrb	r3, [r3, #1]
 80217da:	9200      	str	r2, [sp, #0]
 80217dc:	e7e7      	b.n	80217ae <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80217de:	2204      	movs	r2, #4
 80217e0:	9905      	ldr	r1, [sp, #20]
 80217e2:	459c      	cmp	ip, r3
 80217e4:	f04f 0900 	mov.w	r9, #0
 80217e8:	4615      	mov	r5, r2
 80217ea:	9a02      	ldr	r2, [sp, #8]
 80217ec:	bf94      	ite	ls
 80217ee:	eba3 0b0c 	subls.w	fp, r3, ip
 80217f2:	ebac 0603 	subhi.w	r6, ip, r3
 80217f6:	fb15 1202 	smlabb	r2, r5, r2, r1
 80217fa:	9904      	ldr	r1, [sp, #16]
 80217fc:	bf9c      	itt	ls
 80217fe:	fa1f fb8b 	uxthls.w	fp, fp
 8021802:	4626      	movls	r6, r4
 8021804:	5889      	ldr	r1, [r1, r2]
 8021806:	bf86      	itte	hi
 8021808:	b2b6      	uxthhi	r6, r6
 802180a:	46a3      	movhi	fp, r4
 802180c:	f8cd c00c 	strls.w	ip, [sp, #12]
 8021810:	ea4f 6211 	mov.w	r2, r1, lsr #24
 8021814:	bf88      	it	hi
 8021816:	9303      	strhi	r3, [sp, #12]
 8021818:	0e0d      	lsrs	r5, r1, #24
 802181a:	9206      	str	r2, [sp, #24]
 802181c:	fa5f fe81 	uxtb.w	lr, r1
 8021820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021822:	436a      	muls	r2, r5
 8021824:	1c55      	adds	r5, r2, #1
 8021826:	eb05 2522 	add.w	r5, r5, r2, asr #8
 802182a:	122d      	asrs	r5, r5, #8
 802182c:	b2ea      	uxtb	r2, r5
 802182e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021830:	b2aa      	uxth	r2, r5
 8021832:	9208      	str	r2, [sp, #32]
 8021834:	fb0e f205 	mul.w	r2, lr, r5
 8021838:	920a      	str	r2, [sp, #40]	@ 0x28
 802183a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802183e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8021842:	fb05 f702 	mul.w	r7, r5, r2
 8021846:	0212      	lsls	r2, r2, #8
 8021848:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802184c:	970c      	str	r7, [sp, #48]	@ 0x30
 802184e:	fb05 f701 	mul.w	r7, r5, r1
 8021852:	ea42 020e 	orr.w	r2, r2, lr
 8021856:	970d      	str	r7, [sp, #52]	@ 0x34
 8021858:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 802185c:	9207      	str	r2, [sp, #28]
 802185e:	9a03      	ldr	r2, [sp, #12]
 8021860:	4591      	cmp	r9, r2
 8021862:	d048      	beq.n	80218f6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x256>
 8021864:	9a06      	ldr	r2, [sp, #24]
 8021866:	b14a      	cbz	r2, 802187c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 8021868:	2dff      	cmp	r5, #255	@ 0xff
 802186a:	d004      	beq.n	8021876 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802186c:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 8021870:	ea5f 6e12 	movs.w	lr, r2, lsr #24
 8021874:	d105      	bne.n	8021882 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1e2>
 8021876:	9a07      	ldr	r2, [sp, #28]
 8021878:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
 802187c:	f109 0901 	add.w	r9, r9, #1
 8021880:	e7ed      	b.n	802185e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1be>
 8021882:	2d00      	cmp	r5, #0
 8021884:	d0fa      	beq.n	802187c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 8021886:	9908      	ldr	r1, [sp, #32]
 8021888:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802188a:	fb1e f101 	smulbb	r1, lr, r1
 802188e:	eb07 080e 	add.w	r8, r7, lr
 8021892:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021894:	b289      	uxth	r1, r1
 8021896:	f101 0a01 	add.w	sl, r1, #1
 802189a:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 802189e:	1209      	asrs	r1, r1, #8
 80218a0:	ebae 0a01 	sub.w	sl, lr, r1
 80218a4:	eba8 0801 	sub.w	r8, r8, r1
 80218a8:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80218ac:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80218ae:	fa5f f888 	uxtb.w	r8, r8
 80218b2:	fb0a 1e0e 	mla	lr, sl, lr, r1
 80218b6:	b2d1      	uxtb	r1, r2
 80218b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80218bc:	fb0a 7101 	mla	r1, sl, r1, r7
 80218c0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80218c2:	fbbe fef8 	udiv	lr, lr, r8
 80218c6:	fbb1 f1f8 	udiv	r1, r1, r8
 80218ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80218ce:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80218d2:	b2c9      	uxtb	r1, r1
 80218d4:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
 80218d8:	ea41 6108 	orr.w	r1, r1, r8, lsl #24
 80218dc:	fbb2 f2f8 	udiv	r2, r2, r8
 80218e0:	ea4e 0101 	orr.w	r1, lr, r1
 80218e4:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 80218e8:	fa1f fe8e 	uxth.w	lr, lr
 80218ec:	ea41 010e 	orr.w	r1, r1, lr
 80218f0:	f840 1029 	str.w	r1, [r0, r9, lsl #2]
 80218f4:	e7c2      	b.n	802187c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 80218f6:	459c      	cmp	ip, r3
 80218f8:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80218fc:	f63f af66 	bhi.w	80217cc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021900:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8021904:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 8021908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802190a:	1ba4      	subs	r4, r4, r6
 802190c:	9a01      	ldr	r2, [sp, #4]
 802190e:	881b      	ldrh	r3, [r3, #0]
 8021910:	b2a4      	uxth	r4, r4
 8021912:	1a9b      	subs	r3, r3, r2
 8021914:	2c00      	cmp	r4, #0
 8021916:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802191a:	bf18      	it	ne
 802191c:	2600      	movne	r6, #0
 802191e:	e755      	b.n	80217cc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021920:	4b03      	ldr	r3, [pc, #12]	@ (8021930 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x290>)
 8021922:	6818      	ldr	r0, [r3, #0]
 8021924:	6803      	ldr	r3, [r0, #0]
 8021926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021928:	4798      	blx	r3
 802192a:	b015      	add	sp, #84	@ 0x54
 802192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021930:	200122c4 	.word	0x200122c4
 8021934:	200122be 	.word	0x200122be

08021938 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802193c:	461c      	mov	r4, r3
 802193e:	b091      	sub	sp, #68	@ 0x44
 8021940:	460f      	mov	r7, r1
 8021942:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021944:	6820      	ldr	r0, [r4, #0]
 8021946:	6861      	ldr	r1, [r4, #4]
 8021948:	9207      	str	r2, [sp, #28]
 802194a:	aa0c      	add	r2, sp, #48	@ 0x30
 802194c:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8021950:	c203      	stmia	r2!, {r0, r1}
 8021952:	6818      	ldr	r0, [r3, #0]
 8021954:	aa0e      	add	r2, sp, #56	@ 0x38
 8021956:	6859      	ldr	r1, [r3, #4]
 8021958:	c203      	stmia	r2!, {r0, r1}
 802195a:	a80c      	add	r0, sp, #48	@ 0x30
 802195c:	f7f9 fa48 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021960:	4621      	mov	r1, r4
 8021962:	a80e      	add	r0, sp, #56	@ 0x38
 8021964:	f7f9 fa6c 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021968:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 802196c:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8021970:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021974:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8021978:	bfdb      	ittet	le
 802197a:	b2b3      	uxthle	r3, r6
 802197c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021980:	2301      	movgt	r3, #1
 8021982:	fb92 f3f3 	sdivle	r3, r2, r3
 8021986:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 802198a:	441d      	add	r5, r3
 802198c:	fb92 f1f3 	sdiv	r1, r2, r3
 8021990:	fa1f fc81 	uxth.w	ip, r1
 8021994:	3d01      	subs	r5, #1
 8021996:	fb0c 2413 	mls	r4, ip, r3, r2
 802199a:	4661      	mov	r1, ip
 802199c:	fb14 f406 	smulbb	r4, r4, r6
 80219a0:	4404      	add	r4, r0
 80219a2:	fb95 f5f3 	sdiv	r5, r5, r3
 80219a6:	b2a4      	uxth	r4, r4
 80219a8:	b121      	cbz	r1, 80219b4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x7c>
 80219aa:	9b07      	ldr	r3, [sp, #28]
 80219ac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80219b0:	ba1b      	rev	r3, r3
 80219b2:	441f      	add	r7, r3
 80219b4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80219b8:	b2ad      	uxth	r5, r5
 80219ba:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 80219be:	4418      	add	r0, r3
 80219c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80219c4:	00ad      	lsls	r5, r5, #2
 80219c6:	441a      	add	r2, r3
 80219c8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80219cc:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80219d0:	9303      	str	r3, [sp, #12]
 80219d2:	4b77      	ldr	r3, [pc, #476]	@ (8021bb0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 80219d4:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80219d8:	6818      	ldr	r0, [r3, #0]
 80219da:	6803      	ldr	r3, [r0, #0]
 80219dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219de:	4798      	blx	r3
 80219e0:	4a74      	ldr	r2, [pc, #464]	@ (8021bb4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80219e2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 80219e6:	2c00      	cmp	r4, #0
 80219e8:	8811      	ldrh	r1, [r2, #0]
 80219ea:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80219ee:	fb06 f601 	mul.w	r6, r6, r1
 80219f2:	fb01 c303 	mla	r3, r1, r3, ip
 80219f6:	bf18      	it	ne
 80219f8:	f04f 0c00 	movne.w	ip, #0
 80219fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80219fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021a02:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 8021a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8021a08:	f105 0304 	add.w	r3, r5, #4
 8021a0c:	9308      	str	r3, [sp, #32]
 8021a0e:	9b03      	ldr	r3, [sp, #12]
 8021a10:	bf08      	it	eq
 8021a12:	469c      	moveq	ip, r3
 8021a14:	ea4f 630b 	mov.w	r3, fp, lsl #24
 8021a18:	fa1f fc8c 	uxth.w	ip, ip
 8021a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a1e:	2300      	movs	r3, #0
 8021a20:	9304      	str	r3, [sp, #16]
 8021a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021a24:	4290      	cmp	r0, r2
 8021a26:	f080 80bb 	bcs.w	8021ba0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8021a2a:	b95b      	cbnz	r3, 8021a44 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 8021a2c:	783a      	ldrb	r2, [r7, #0]
 8021a2e:	0993      	lsrs	r3, r2, #6
 8021a30:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021a34:	9204      	str	r2, [sp, #16]
 8021a36:	1e5a      	subs	r2, r3, #1
 8021a38:	2a02      	cmp	r2, #2
 8021a3a:	bf8d      	iteet	hi
 8021a3c:	787b      	ldrbhi	r3, [r7, #1]
 8021a3e:	3701      	addls	r7, #1
 8021a40:	b29b      	uxthls	r3, r3
 8021a42:	3702      	addhi	r7, #2
 8021a44:	b184      	cbz	r4, 8021a68 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x130>
 8021a46:	429c      	cmp	r4, r3
 8021a48:	d907      	bls.n	8021a5a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x122>
 8021a4a:	1ae4      	subs	r4, r4, r3
 8021a4c:	4665      	mov	r5, ip
 8021a4e:	2300      	movs	r3, #0
 8021a50:	b2a4      	uxth	r4, r4
 8021a52:	9302      	str	r3, [sp, #8]
 8021a54:	9b02      	ldr	r3, [sp, #8]
 8021a56:	46ac      	mov	ip, r5
 8021a58:	e7e3      	b.n	8021a22 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xea>
 8021a5a:	1b1c      	subs	r4, r3, r4
 8021a5c:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8021a60:	b2a3      	uxth	r3, r4
 8021a62:	2400      	movs	r4, #0
 8021a64:	9302      	str	r3, [sp, #8]
 8021a66:	e7f5      	b.n	8021a54 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021a68:	2203      	movs	r2, #3
 8021a6a:	9908      	ldr	r1, [sp, #32]
 8021a6c:	459c      	cmp	ip, r3
 8021a6e:	4615      	mov	r5, r2
 8021a70:	9a04      	ldr	r2, [sp, #16]
 8021a72:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021a76:	9907      	ldr	r1, [sp, #28]
 8021a78:	bf8c      	ite	hi
 8021a7a:	ebac 0503 	subhi.w	r5, ip, r3
 8021a7e:	4625      	movls	r5, r4
 8021a80:	eb01 0a02 	add.w	sl, r1, r2
 8021a84:	bf95      	itete	ls
 8021a86:	eba3 020c 	subls.w	r2, r3, ip
 8021a8a:	b2ad      	uxthhi	r5, r5
 8021a8c:	b292      	uxthls	r2, r2
 8021a8e:	e9cd 3401 	strdhi	r3, r4, [sp, #4]
 8021a92:	bf98      	it	ls
 8021a94:	e9cd c201 	strdls	ip, r2, [sp, #4]
 8021a98:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021a9c:	d113      	bne.n	8021ac6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8021a9e:	9901      	ldr	r1, [sp, #4]
 8021aa0:	4606      	mov	r6, r0
 8021aa2:	b1a9      	cbz	r1, 8021ad0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8021aa4:	f89a 2000 	ldrb.w	r2, [sl]
 8021aa8:	3901      	subs	r1, #1
 8021aaa:	f89a e002 	ldrb.w	lr, [sl, #2]
 8021aae:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8021ab2:	b289      	uxth	r1, r1
 8021ab4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8021ab8:	f89a e001 	ldrb.w	lr, [sl, #1]
 8021abc:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8021ac0:	f846 2b04 	str.w	r2, [r6], #4
 8021ac4:	e7ed      	b.n	8021aa2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x16a>
 8021ac6:	9a01      	ldr	r2, [sp, #4]
 8021ac8:	9000      	str	r0, [sp, #0]
 8021aca:	9205      	str	r2, [sp, #20]
 8021acc:	9a05      	ldr	r2, [sp, #20]
 8021ace:	b9a2      	cbnz	r2, 8021afa <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c2>
 8021ad0:	9a01      	ldr	r2, [sp, #4]
 8021ad2:	459c      	cmp	ip, r3
 8021ad4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8021ad8:	d8bc      	bhi.n	8021a54 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021ada:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8021ade:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
 8021ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021ae4:	1b64      	subs	r4, r4, r5
 8021ae6:	9a03      	ldr	r2, [sp, #12]
 8021ae8:	881b      	ldrh	r3, [r3, #0]
 8021aea:	b2a4      	uxth	r4, r4
 8021aec:	1a9b      	subs	r3, r3, r2
 8021aee:	2c00      	cmp	r4, #0
 8021af0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021af4:	bf18      	it	ne
 8021af6:	2500      	movne	r5, #0
 8021af8:	e7ac      	b.n	8021a54 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021afa:	9a00      	ldr	r2, [sp, #0]
 8021afc:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8021b00:	6812      	ldr	r2, [r2, #0]
 8021b02:	9106      	str	r1, [sp, #24]
 8021b04:	ea5f 6912 	movs.w	r9, r2, lsr #24
 8021b08:	f89a 6000 	ldrb.w	r6, [sl]
 8021b0c:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8021b10:	d110      	bne.n	8021b34 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fc>
 8021b12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b14:	4316      	orrs	r6, r2
 8021b16:	9a06      	ldr	r2, [sp, #24]
 8021b18:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 8021b1c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8021b20:	9a00      	ldr	r2, [sp, #0]
 8021b22:	6016      	str	r6, [r2, #0]
 8021b24:	9a00      	ldr	r2, [sp, #0]
 8021b26:	3204      	adds	r2, #4
 8021b28:	9200      	str	r2, [sp, #0]
 8021b2a:	9a05      	ldr	r2, [sp, #20]
 8021b2c:	3a01      	subs	r2, #1
 8021b2e:	b292      	uxth	r2, r2
 8021b30:	9205      	str	r2, [sp, #20]
 8021b32:	e7cb      	b.n	8021acc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8021b34:	fb1b f101 	smulbb	r1, fp, r1
 8021b38:	fb0b f809 	mul.w	r8, fp, r9
 8021b3c:	fb16 f60b 	smulbb	r6, r6, fp
 8021b40:	f108 0e01 	add.w	lr, r8, #1
 8021b44:	eb0e 2e28 	add.w	lr, lr, r8, asr #8
 8021b48:	eb0b 0809 	add.w	r8, fp, r9
 8021b4c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021b50:	eba9 090e 	sub.w	r9, r9, lr
 8021b54:	eba8 080e 	sub.w	r8, r8, lr
 8021b58:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8021b5c:	fa5f f888 	uxtb.w	r8, r8
 8021b60:	fb09 1e0e 	mla	lr, r9, lr, r1
 8021b64:	b2d1      	uxtb	r1, r2
 8021b66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021b6a:	fb09 6601 	mla	r6, r9, r1, r6
 8021b6e:	9906      	ldr	r1, [sp, #24]
 8021b70:	fbbe fef8 	udiv	lr, lr, r8
 8021b74:	fbb6 f6f8 	udiv	r6, r6, r8
 8021b78:	fb1b f101 	smulbb	r1, fp, r1
 8021b7c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8021b80:	b2f6      	uxtb	r6, r6
 8021b82:	fb09 1202 	mla	r2, r9, r2, r1
 8021b86:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
 8021b8a:	ea46 6608 	orr.w	r6, r6, r8, lsl #24
 8021b8e:	fbb2 f2f8 	udiv	r2, r2, r8
 8021b92:	ea4e 0e06 	orr.w	lr, lr, r6
 8021b96:	0216      	lsls	r6, r2, #8
 8021b98:	b2b6      	uxth	r6, r6
 8021b9a:	ea4e 0606 	orr.w	r6, lr, r6
 8021b9e:	e7bf      	b.n	8021b20 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e8>
 8021ba0:	4b03      	ldr	r3, [pc, #12]	@ (8021bb0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 8021ba2:	6818      	ldr	r0, [r3, #0]
 8021ba4:	6803      	ldr	r3, [r0, #0]
 8021ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ba8:	4798      	blx	r3
 8021baa:	b011      	add	sp, #68	@ 0x44
 8021bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bb0:	200122c4 	.word	0x200122c4
 8021bb4:	200122be 	.word	0x200122be

08021bb8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bbc:	b09d      	sub	sp, #116	@ 0x74
 8021bbe:	461c      	mov	r4, r3
 8021bc0:	4681      	mov	r9, r0
 8021bc2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021bc4:	6820      	ldr	r0, [r4, #0]
 8021bc6:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 8021bca:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8021bce:	6861      	ldr	r1, [r4, #4]
 8021bd0:	9202      	str	r2, [sp, #8]
 8021bd2:	aa18      	add	r2, sp, #96	@ 0x60
 8021bd4:	c203      	stmia	r2!, {r0, r1}
 8021bd6:	6818      	ldr	r0, [r3, #0]
 8021bd8:	aa1a      	add	r2, sp, #104	@ 0x68
 8021bda:	6859      	ldr	r1, [r3, #4]
 8021bdc:	c203      	stmia	r2!, {r0, r1}
 8021bde:	a818      	add	r0, sp, #96	@ 0x60
 8021be0:	f7f9 f906 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021be4:	4621      	mov	r1, r4
 8021be6:	a81a      	add	r0, sp, #104	@ 0x68
 8021be8:	f7f9 f92a 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021bec:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8021bf0:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8021bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021bf8:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8021bfc:	bfdb      	ittet	le
 8021bfe:	b29a      	uxthle	r2, r3
 8021c00:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021c04:	2201      	movgt	r2, #1
 8021c06:	fb91 f2f2 	sdivle	r2, r1, r2
 8021c0a:	9205      	str	r2, [sp, #20]
 8021c0c:	9805      	ldr	r0, [sp, #20]
 8021c0e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021c12:	9905      	ldr	r1, [sp, #20]
 8021c14:	fb92 f0f0 	sdiv	r0, r2, r0
 8021c18:	b280      	uxth	r0, r0
 8021c1a:	440d      	add	r5, r1
 8021c1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021c1e:	3d01      	subs	r5, #1
 8021c20:	9805      	ldr	r0, [sp, #20]
 8021c22:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021c24:	fb04 2410 	mls	r4, r4, r0, r2
 8021c28:	fb95 f5f1 	sdiv	r5, r5, r1
 8021c2c:	fb14 f403 	smulbb	r4, r4, r3
 8021c30:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8021c34:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8021c38:	3501      	adds	r5, #1
 8021c3a:	440c      	add	r4, r1
 8021c3c:	4419      	add	r1, r3
 8021c3e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8021c42:	b2ad      	uxth	r5, r5
 8021c44:	441a      	add	r2, r3
 8021c46:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021c4a:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021c4e:	b2a4      	uxth	r4, r4
 8021c50:	9306      	str	r3, [sp, #24]
 8021c52:	4ba3      	ldr	r3, [pc, #652]	@ (8021ee0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x328>)
 8021c54:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021c58:	6818      	ldr	r0, [r3, #0]
 8021c5a:	6803      	ldr	r3, [r0, #0]
 8021c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021c5e:	4798      	blx	r3
 8021c60:	4ba0      	ldr	r3, [pc, #640]	@ (8021ee4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x32c>)
 8021c62:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021c66:	2c00      	cmp	r4, #0
 8021c68:	8819      	ldrh	r1, [r3, #0]
 8021c6a:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8021c6e:	fb06 f601 	mul.w	r6, r6, r1
 8021c72:	fb01 7202 	mla	r2, r1, r2, r7
 8021c76:	9316      	str	r3, [sp, #88]	@ 0x58
 8021c78:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8021c7c:	4b9a      	ldr	r3, [pc, #616]	@ (8021ee8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x330>)
 8021c7e:	bf18      	it	ne
 8021c80:	2000      	movne	r0, #0
 8021c82:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 8021c86:	eba3 0309 	sub.w	r3, r3, r9
 8021c8a:	920c      	str	r2, [sp, #48]	@ 0x30
 8021c8c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021c8e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021c90:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8021c94:	f105 0204 	add.w	r2, r5, #4
 8021c98:	9210      	str	r2, [sp, #64]	@ 0x40
 8021c9a:	9a06      	ldr	r2, [sp, #24]
 8021c9c:	bf08      	it	eq
 8021c9e:	4610      	moveq	r0, r2
 8021ca0:	9a02      	ldr	r2, [sp, #8]
 8021ca2:	0612      	lsls	r2, r2, #24
 8021ca4:	b280      	uxth	r0, r0
 8021ca6:	9214      	str	r2, [sp, #80]	@ 0x50
 8021ca8:	2200      	movs	r2, #0
 8021caa:	920d      	str	r2, [sp, #52]	@ 0x34
 8021cac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021cb0:	fa12 f383 	uxtah	r3, r2, r3
 8021cb4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021cb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021cba:	3304      	adds	r3, #4
 8021cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8021cbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021cc0:	459b      	cmp	fp, r3
 8021cc2:	f080 8187 	bcs.w	8021fd4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x41c>
 8021cc6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021cca:	2700      	movs	r7, #0
 8021ccc:	9a05      	ldr	r2, [sp, #20]
 8021cce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021cd0:	fbb4 f3f3 	udiv	r3, r4, r3
 8021cd4:	1ad3      	subs	r3, r2, r3
 8021cd6:	7809      	ldrb	r1, [r1, #0]
 8021cd8:	b29b      	uxth	r3, r3
 8021cda:	910e      	str	r1, [sp, #56]	@ 0x38
 8021cdc:	3101      	adds	r1, #1
 8021cde:	9315      	str	r3, [sp, #84]	@ 0x54
 8021ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021ce2:	9107      	str	r1, [sp, #28]
 8021ce4:	785a      	ldrb	r2, [r3, #1]
 8021ce6:	789b      	ldrb	r3, [r3, #2]
 8021ce8:	021b      	lsls	r3, r3, #8
 8021cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021cf0:	78d2      	ldrb	r2, [r2, #3]
 8021cf2:	4313      	orrs	r3, r2
 8021cf4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021cf6:	441a      	add	r2, r3
 8021cf8:	1c51      	adds	r1, r2, #1
 8021cfa:	7852      	ldrb	r2, [r2, #1]
 8021cfc:	9104      	str	r1, [sp, #16]
 8021cfe:	0212      	lsls	r2, r2, #8
 8021d00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021d02:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021d06:	5ccb      	ldrb	r3, [r1, r3]
 8021d08:	431a      	orrs	r2, r3
 8021d0a:	b293      	uxth	r3, r2
 8021d0c:	f889 2804 	strb.w	r2, [r9, #2052]	@ 0x804
 8021d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d12:	2300      	movs	r3, #0
 8021d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d16:	2301      	movs	r3, #1
 8021d18:	9300      	str	r3, [sp, #0]
 8021d1a:	9303      	str	r3, [sp, #12]
 8021d1c:	469c      	mov	ip, r3
 8021d1e:	2c00      	cmp	r4, #0
 8021d20:	d078      	beq.n	8021e14 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25c>
 8021d22:	42a3      	cmp	r3, r4
 8021d24:	d26a      	bcs.n	8021dfc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 8021d26:	1ae4      	subs	r4, r4, r3
 8021d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d2a:	4606      	mov	r6, r0
 8021d2c:	455b      	cmp	r3, fp
 8021d2e:	b2a4      	uxth	r4, r4
 8021d30:	d802      	bhi.n	8021d38 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8021d32:	e06d      	b.n	8021e10 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	d15c      	bne.n	8021df2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 8021d38:	9b04      	ldr	r3, [sp, #16]
 8021d3a:	9a03      	ldr	r2, [sp, #12]
 8021d3c:	785b      	ldrb	r3, [r3, #1]
 8021d3e:	f1c2 0207 	rsb	r2, r2, #7
 8021d42:	9903      	ldr	r1, [sp, #12]
 8021d44:	4093      	lsls	r3, r2
 8021d46:	005b      	lsls	r3, r3, #1
 8021d48:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021d4c:	9b04      	ldr	r3, [sp, #16]
 8021d4e:	781b      	ldrb	r3, [r3, #0]
 8021d50:	410b      	asrs	r3, r1
 8021d52:	b2db      	uxtb	r3, r3
 8021d54:	4313      	orrs	r3, r2
 8021d56:	9a03      	ldr	r2, [sp, #12]
 8021d58:	3201      	adds	r2, #1
 8021d5a:	b299      	uxth	r1, r3
 8021d5c:	b2d2      	uxtb	r2, r2
 8021d5e:	2a08      	cmp	r2, #8
 8021d60:	9203      	str	r2, [sp, #12]
 8021d62:	9a04      	ldr	r2, [sp, #16]
 8021d64:	bf09      	itett	eq
 8021d66:	3202      	addeq	r2, #2
 8021d68:	3201      	addne	r2, #1
 8021d6a:	9204      	streq	r2, [sp, #16]
 8021d6c:	2200      	moveq	r2, #0
 8021d6e:	bf14      	ite	ne
 8021d70:	9204      	strne	r2, [sp, #16]
 8021d72:	9203      	streq	r2, [sp, #12]
 8021d74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d76:	428a      	cmp	r2, r1
 8021d78:	d309      	bcc.n	8021d8e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d6>
 8021d7a:	f889 3804 	strb.w	r3, [r9, #2052]	@ 0x804
 8021d7e:	2301      	movs	r3, #1
 8021d80:	9a07      	ldr	r2, [sp, #28]
 8021d82:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8021d86:	d30e      	bcc.n	8021da6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8021d88:	9300      	str	r3, [sp, #0]
 8021d8a:	2200      	movs	r2, #0
 8021d8c:	e032      	b.n	8021df4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 8021d8e:	9b07      	ldr	r3, [sp, #28]
 8021d90:	428b      	cmp	r3, r1
 8021d92:	d818      	bhi.n	8021dc6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20e>
 8021d94:	9b00      	ldr	r3, [sp, #0]
 8021d96:	f899 2804 	ldrb.w	r2, [r9, #2052]	@ 0x804
 8021d9a:	444b      	add	r3, r9
 8021d9c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8021da0:	9b00      	ldr	r3, [sp, #0]
 8021da2:	3301      	adds	r3, #1
 8021da4:	b29b      	uxth	r3, r3
 8021da6:	9a07      	ldr	r2, [sp, #28]
 8021da8:	f899 0804 	ldrb.w	r0, [r9, #2052]	@ 0x804
 8021dac:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021db0:	7110      	strb	r0, [r2, #4]
 8021db2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021db4:	80d0      	strh	r0, [r2, #6]
 8021db6:	9800      	ldr	r0, [sp, #0]
 8021db8:	3001      	adds	r0, #1
 8021dba:	7150      	strb	r0, [r2, #5]
 8021dbc:	9a07      	ldr	r2, [sp, #28]
 8021dbe:	3201      	adds	r2, #1
 8021dc0:	b292      	uxth	r2, r2
 8021dc2:	9207      	str	r2, [sp, #28]
 8021dc4:	e7e0      	b.n	8021d88 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 8021dc6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8021dca:	460a      	mov	r2, r1
 8021dcc:	795b      	ldrb	r3, [r3, #5]
 8021dce:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 8021dd2:	4448      	add	r0, r9
 8021dd4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8021dd6:	4405      	add	r5, r0
 8021dd8:	2d00      	cmp	r5, #0
 8021dda:	dd06      	ble.n	8021dea <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x232>
 8021ddc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021de0:	7915      	ldrb	r5, [r2, #4]
 8021de2:	f800 5d01 	strb.w	r5, [r0, #-1]!
 8021de6:	88d2      	ldrh	r2, [r2, #6]
 8021de8:	e7f4      	b.n	8021dd4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x21c>
 8021dea:	f889 2804 	strb.w	r2, [r9, #2052]	@ 0x804
 8021dee:	b29b      	uxth	r3, r3
 8021df0:	e7c6      	b.n	8021d80 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021df2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021df4:	4630      	mov	r0, r6
 8021df6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021df8:	4617      	mov	r7, r2
 8021dfa:	e78f      	b.n	8021d1c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8021dfc:	1b1b      	subs	r3, r3, r4
 8021dfe:	4427      	add	r7, r4
 8021e00:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8021e04:	b29b      	uxth	r3, r3
 8021e06:	b2ba      	uxth	r2, r7
 8021e08:	2400      	movs	r4, #0
 8021e0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021e0c:	458b      	cmp	fp, r1
 8021e0e:	d391      	bcc.n	8021d34 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17c>
 8021e10:	4630      	mov	r0, r6
 8021e12:	e754      	b.n	8021cbe <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 8021e14:	4283      	cmp	r3, r0
 8021e16:	9a02      	ldr	r2, [sp, #8]
 8021e18:	bf29      	itett	cs
 8021e1a:	1a1b      	subcs	r3, r3, r0
 8021e1c:	eba0 060c 	subcc.w	r6, r0, ip
 8021e20:	9008      	strcs	r0, [sp, #32]
 8021e22:	4626      	movcs	r6, r4
 8021e24:	bf2f      	iteee	cs
 8021e26:	b29b      	uxthcs	r3, r3
 8021e28:	f8cd c020 	strcc.w	ip, [sp, #32]
 8021e2c:	b2b6      	uxthcc	r6, r6
 8021e2e:	4623      	movcc	r3, r4
 8021e30:	2aff      	cmp	r2, #255	@ 0xff
 8021e32:	d02c      	beq.n	8021e8e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021e34:	2200      	movs	r2, #0
 8021e36:	9201      	str	r2, [sp, #4]
 8021e38:	9a01      	ldr	r2, [sp, #4]
 8021e3a:	9908      	ldr	r1, [sp, #32]
 8021e3c:	9c01      	ldr	r4, [sp, #4]
 8021e3e:	18ba      	adds	r2, r7, r2
 8021e40:	42a1      	cmp	r1, r4
 8021e42:	b292      	uxth	r2, r2
 8021e44:	d152      	bne.n	8021eec <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x334>
 8021e46:	4584      	cmp	ip, r0
 8021e48:	eb0b 0b81 	add.w	fp, fp, r1, lsl #2
 8021e4c:	d3dc      	bcc.n	8021e08 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 8021e4e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021e50:	9806      	ldr	r0, [sp, #24]
 8021e52:	8809      	ldrh	r1, [r1, #0]
 8021e54:	1a09      	subs	r1, r1, r0
 8021e56:	eb0b 0b81 	add.w	fp, fp, r1, lsl #2
 8021e5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021e5c:	3101      	adds	r1, #1
 8021e5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8021e60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021e62:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021e64:	4281      	cmp	r1, r0
 8021e66:	f040 80ab 	bne.w	8021fc0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x408>
 8021e6a:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 8021e6e:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8021e72:	9b06      	ldr	r3, [sp, #24]
 8021e74:	eba4 040c 	sub.w	r4, r4, ip
 8021e78:	b2a4      	uxth	r4, r4
 8021e7a:	2c00      	cmp	r4, #0
 8021e7c:	bf08      	it	eq
 8021e7e:	4618      	moveq	r0, r3
 8021e80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021e82:	bf18      	it	ne
 8021e84:	2000      	movne	r0, #0
 8021e86:	3301      	adds	r3, #1
 8021e88:	b280      	uxth	r0, r0
 8021e8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8021e8c:	e70e      	b.n	8021cac <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf4>
 8021e8e:	9a08      	ldr	r2, [sp, #32]
 8021e90:	465d      	mov	r5, fp
 8021e92:	18ba      	adds	r2, r7, r2
 8021e94:	b292      	uxth	r2, r2
 8021e96:	4297      	cmp	r7, r2
 8021e98:	f000 8090 	beq.w	8021fbc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x404>
 8021e9c:	f107 0e01 	add.w	lr, r7, #1
 8021ea0:	444f      	add	r7, r9
 8021ea2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021ea4:	f897 1804 	ldrb.w	r1, [r7, #2052]	@ 0x804
 8021ea8:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8021eac:	10e1      	asrs	r1, r4, #3
 8021eae:	1227      	asrs	r7, r4, #8
 8021eb0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021eb4:	00e4      	lsls	r4, r4, #3
 8021eb6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021eba:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8021ebe:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021ec2:	b2e4      	uxtb	r4, r4
 8021ec4:	0209      	lsls	r1, r1, #8
 8021ec6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021eca:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8021ece:	fa1f f78e 	uxth.w	r7, lr
 8021ed2:	4321      	orrs	r1, r4
 8021ed4:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8021ed8:	f845 1b04 	str.w	r1, [r5], #4
 8021edc:	e7db      	b.n	8021e96 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2de>
 8021ede:	bf00      	nop
 8021ee0:	200122c4 	.word	0x200122c4
 8021ee4:	200122be 	.word	0x200122be
 8021ee8:	fffff7fb 	.word	0xfffff7fb
 8021eec:	444a      	add	r2, r9
 8021eee:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021ef0:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021ef4:	f831 8012 	ldrh.w	r8, [r1, r2, lsl #1]
 8021ef8:	9a01      	ldr	r2, [sp, #4]
 8021efa:	ea4f 0ec8 	mov.w	lr, r8, lsl #3
 8021efe:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
 8021f02:	ea4f 02e8 	mov.w	r2, r8, asr #3
 8021f06:	ea4f 2528 	mov.w	r5, r8, asr #8
 8021f0a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021f0e:	fa5f fe8e 	uxtb.w	lr, lr
 8021f12:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021f16:	ea5f 6a11 	movs.w	sl, r1, lsr #24
 8021f1a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021f1e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8021f22:	9211      	str	r2, [sp, #68]	@ 0x44
 8021f24:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021f28:	d10c      	bne.n	8021f44 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x38c>
 8021f2a:	0212      	lsls	r2, r2, #8
 8021f2c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8021f2e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8021f32:	ea42 020e 	orr.w	r2, r2, lr
 8021f36:	430a      	orrs	r2, r1
 8021f38:	9901      	ldr	r1, [sp, #4]
 8021f3a:	f84b 2021 	str.w	r2, [fp, r1, lsl #2]
 8021f3e:	9a01      	ldr	r2, [sp, #4]
 8021f40:	3201      	adds	r2, #1
 8021f42:	e778      	b.n	8021e36 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27e>
 8021f44:	9c02      	ldr	r4, [sp, #8]
 8021f46:	9a02      	ldr	r2, [sp, #8]
 8021f48:	fb04 f80a 	mul.w	r8, r4, sl
 8021f4c:	fb12 f505 	smulbb	r5, r2, r5
 8021f50:	fb12 fe0e 	smulbb	lr, r2, lr
 8021f54:	f108 0401 	add.w	r4, r8, #1
 8021f58:	eb04 2428 	add.w	r4, r4, r8, asr #8
 8021f5c:	eb02 080a 	add.w	r8, r2, sl
 8021f60:	1224      	asrs	r4, r4, #8
 8021f62:	ebaa 0a04 	sub.w	sl, sl, r4
 8021f66:	eba8 0804 	sub.w	r8, r8, r4
 8021f6a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8021f6e:	fa5f f888 	uxtb.w	r8, r8
 8021f72:	fb0a 5504 	mla	r5, sl, r4, r5
 8021f76:	b2cc      	uxtb	r4, r1
 8021f78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021f7c:	fb0a ee04 	mla	lr, sl, r4, lr
 8021f80:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021f82:	fbb5 f5f8 	udiv	r5, r5, r8
 8021f86:	fb12 f204 	smulbb	r2, r2, r4
 8021f8a:	042d      	lsls	r5, r5, #16
 8021f8c:	fbbe fef8 	udiv	lr, lr, r8
 8021f90:	fb0a 2101 	mla	r1, sl, r1, r2
 8021f94:	fa5f fe8e 	uxtb.w	lr, lr
 8021f98:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 8021f9c:	9a01      	ldr	r2, [sp, #4]
 8021f9e:	ea4e 6e08 	orr.w	lr, lr, r8, lsl #24
 8021fa2:	fbb1 f1f8 	udiv	r1, r1, r8
 8021fa6:	ea45 050e 	orr.w	r5, r5, lr
 8021faa:	ea4f 2e01 	mov.w	lr, r1, lsl #8
 8021fae:	fa1f fe8e 	uxth.w	lr, lr
 8021fb2:	ea45 050e 	orr.w	r5, r5, lr
 8021fb6:	f84b 5022 	str.w	r5, [fp, r2, lsl #2]
 8021fba:	e7c0      	b.n	8021f3e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x386>
 8021fbc:	9908      	ldr	r1, [sp, #32]
 8021fbe:	e742      	b.n	8021e46 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28e>
 8021fc0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8021fc4:	f8bd 4064 	ldrh.w	r4, [sp, #100]	@ 0x64
 8021fc8:	1ba4      	subs	r4, r4, r6
 8021fca:	b2a4      	uxth	r4, r4
 8021fcc:	2c00      	cmp	r4, #0
 8021fce:	bf18      	it	ne
 8021fd0:	2600      	movne	r6, #0
 8021fd2:	e71a      	b.n	8021e0a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x252>
 8021fd4:	4b03      	ldr	r3, [pc, #12]	@ (8021fe4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x42c>)
 8021fd6:	6818      	ldr	r0, [r3, #0]
 8021fd8:	6803      	ldr	r3, [r0, #0]
 8021fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021fdc:	4798      	blx	r3
 8021fde:	b01d      	add	sp, #116	@ 0x74
 8021fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fe4:	200122c4 	.word	0x200122c4

08021fe8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fec:	b09f      	sub	sp, #124	@ 0x7c
 8021fee:	461c      	mov	r4, r3
 8021ff0:	4680      	mov	r8, r0
 8021ff2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021ff4:	6820      	ldr	r0, [r4, #0]
 8021ff6:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 8021ffa:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8021ffe:	6861      	ldr	r1, [r4, #4]
 8022000:	9215      	str	r2, [sp, #84]	@ 0x54
 8022002:	aa1a      	add	r2, sp, #104	@ 0x68
 8022004:	c203      	stmia	r2!, {r0, r1}
 8022006:	6818      	ldr	r0, [r3, #0]
 8022008:	aa1c      	add	r2, sp, #112	@ 0x70
 802200a:	6859      	ldr	r1, [r3, #4]
 802200c:	c203      	stmia	r2!, {r0, r1}
 802200e:	a81a      	add	r0, sp, #104	@ 0x68
 8022010:	f7f8 feee 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022014:	4621      	mov	r1, r4
 8022016:	a81c      	add	r0, sp, #112	@ 0x70
 8022018:	f7f8 ff12 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802201c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8022020:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 8022024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022028:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 802202c:	bfdb      	ittet	le
 802202e:	b29a      	uxthle	r2, r3
 8022030:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022034:	2201      	movgt	r2, #1
 8022036:	fb91 f2f2 	sdivle	r2, r1, r2
 802203a:	9204      	str	r2, [sp, #16]
 802203c:	9804      	ldr	r0, [sp, #16]
 802203e:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8022042:	9904      	ldr	r1, [sp, #16]
 8022044:	fb92 f0f0 	sdiv	r0, r2, r0
 8022048:	b280      	uxth	r0, r0
 802204a:	440d      	add	r5, r1
 802204c:	9010      	str	r0, [sp, #64]	@ 0x40
 802204e:	3d01      	subs	r5, #1
 8022050:	9804      	ldr	r0, [sp, #16]
 8022052:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022054:	fb04 2410 	mls	r4, r4, r0, r2
 8022058:	fb95 f5f1 	sdiv	r5, r5, r1
 802205c:	fb14 f403 	smulbb	r4, r4, r3
 8022060:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8022064:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8022068:	3501      	adds	r5, #1
 802206a:	440c      	add	r4, r1
 802206c:	4419      	add	r1, r3
 802206e:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8022072:	b2ad      	uxth	r5, r5
 8022074:	441a      	add	r2, r3
 8022076:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 802207a:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 802207e:	00ad      	lsls	r5, r5, #2
 8022080:	9305      	str	r3, [sp, #20]
 8022082:	b2a4      	uxth	r4, r4
 8022084:	4bad      	ldr	r3, [pc, #692]	@ (802233c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x354>)
 8022086:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 802208a:	6818      	ldr	r0, [r3, #0]
 802208c:	6803      	ldr	r3, [r0, #0]
 802208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022090:	4798      	blx	r3
 8022092:	4bab      	ldr	r3, [pc, #684]	@ (8022340 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x358>)
 8022094:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8022098:	2c00      	cmp	r4, #0
 802209a:	8819      	ldrh	r1, [r3, #0]
 802209c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80220a0:	fb06 f601 	mul.w	r6, r6, r1
 80220a4:	fb01 7202 	mla	r2, r1, r2, r7
 80220a8:	bf18      	it	ne
 80220aa:	2100      	movne	r1, #0
 80220ac:	9318      	str	r3, [sp, #96]	@ 0x60
 80220ae:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 80220b2:	4ba4      	ldr	r3, [pc, #656]	@ (8022344 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x35c>)
 80220b4:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 80220b8:	eba3 0308 	sub.w	r3, r3, r8
 80220bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80220be:	f105 0204 	add.w	r2, r5, #4
 80220c2:	9319      	str	r3, [sp, #100]	@ 0x64
 80220c4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80220c6:	9a05      	ldr	r2, [sp, #20]
 80220c8:	bf08      	it	eq
 80220ca:	4611      	moveq	r1, r2
 80220cc:	2200      	movs	r2, #0
 80220ce:	b289      	uxth	r1, r1
 80220d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80220d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80220d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80220d6:	fa12 f383 	uxtah	r3, r2, r3
 80220da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80220dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80220e0:	3304      	adds	r3, #4
 80220e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80220e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80220e6:	459b      	cmp	fp, r3
 80220e8:	f080 815e 	bcs.w	80223a8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 80220ec:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80220f0:	f04f 0901 	mov.w	r9, #1
 80220f4:	9a04      	ldr	r2, [sp, #16]
 80220f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220f8:	46cc      	mov	ip, r9
 80220fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80220fe:	1ad3      	subs	r3, r2, r3
 8022100:	7800      	ldrb	r0, [r0, #0]
 8022102:	b29b      	uxth	r3, r3
 8022104:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022106:	3001      	adds	r0, #1
 8022108:	9314      	str	r3, [sp, #80]	@ 0x50
 802210a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802210c:	9006      	str	r0, [sp, #24]
 802210e:	785a      	ldrb	r2, [r3, #1]
 8022110:	789b      	ldrb	r3, [r3, #2]
 8022112:	021b      	lsls	r3, r3, #8
 8022114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802211a:	78d2      	ldrb	r2, [r2, #3]
 802211c:	4313      	orrs	r3, r2
 802211e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022120:	441a      	add	r2, r3
 8022122:	1c50      	adds	r0, r2, #1
 8022124:	7852      	ldrb	r2, [r2, #1]
 8022126:	9003      	str	r0, [sp, #12]
 8022128:	0212      	lsls	r2, r2, #8
 802212a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802212c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022130:	5cc3      	ldrb	r3, [r0, r3]
 8022132:	431a      	orrs	r2, r3
 8022134:	b293      	uxth	r3, r2
 8022136:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 802213a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802213c:	2300      	movs	r3, #0
 802213e:	9307      	str	r3, [sp, #28]
 8022140:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8022144:	2c00      	cmp	r4, #0
 8022146:	d07d      	beq.n	8022244 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 8022148:	45a4      	cmp	ip, r4
 802214a:	d26c      	bcs.n	8022226 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 802214c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802214e:	eba4 040c 	sub.w	r4, r4, ip
 8022152:	460d      	mov	r5, r1
 8022154:	455b      	cmp	r3, fp
 8022156:	b2a4      	uxth	r4, r4
 8022158:	d802      	bhi.n	8022160 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 802215a:	e071      	b.n	8022240 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x258>
 802215c:	2b00      	cmp	r3, #0
 802215e:	d15d      	bne.n	802221c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 8022160:	9b03      	ldr	r3, [sp, #12]
 8022162:	9a02      	ldr	r2, [sp, #8]
 8022164:	785b      	ldrb	r3, [r3, #1]
 8022166:	f1c2 0207 	rsb	r2, r2, #7
 802216a:	9902      	ldr	r1, [sp, #8]
 802216c:	4093      	lsls	r3, r2
 802216e:	005b      	lsls	r3, r3, #1
 8022170:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022174:	9b03      	ldr	r3, [sp, #12]
 8022176:	781b      	ldrb	r3, [r3, #0]
 8022178:	410b      	asrs	r3, r1
 802217a:	3101      	adds	r1, #1
 802217c:	b2c9      	uxtb	r1, r1
 802217e:	b2db      	uxtb	r3, r3
 8022180:	2908      	cmp	r1, #8
 8022182:	9102      	str	r1, [sp, #8]
 8022184:	9903      	ldr	r1, [sp, #12]
 8022186:	ea43 0302 	orr.w	r3, r3, r2
 802218a:	bf0c      	ite	eq
 802218c:	3102      	addeq	r1, #2
 802218e:	3101      	addne	r1, #1
 8022190:	b29a      	uxth	r2, r3
 8022192:	bf05      	ittet	eq
 8022194:	9103      	streq	r1, [sp, #12]
 8022196:	2100      	moveq	r1, #0
 8022198:	9103      	strne	r1, [sp, #12]
 802219a:	9102      	streq	r1, [sp, #8]
 802219c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802219e:	4291      	cmp	r1, r2
 80221a0:	d30a      	bcc.n	80221b8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 80221a2:	f888 3804 	strb.w	r3, [r8, #2052]	@ 0x804
 80221a6:	2301      	movs	r3, #1
 80221a8:	9906      	ldr	r1, [sp, #24]
 80221aa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80221ae:	d30f      	bcc.n	80221d0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1e8>
 80221b0:	2100      	movs	r1, #0
 80221b2:	4699      	mov	r9, r3
 80221b4:	9101      	str	r1, [sp, #4]
 80221b6:	e032      	b.n	802221e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80221b8:	9b06      	ldr	r3, [sp, #24]
 80221ba:	4293      	cmp	r3, r2
 80221bc:	d818      	bhi.n	80221f0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x208>
 80221be:	eb08 0309 	add.w	r3, r8, r9
 80221c2:	f898 1804 	ldrb.w	r1, [r8, #2052]	@ 0x804
 80221c6:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80221ca:	f109 0301 	add.w	r3, r9, #1
 80221ce:	b29b      	uxth	r3, r3
 80221d0:	9906      	ldr	r1, [sp, #24]
 80221d2:	f898 0804 	ldrb.w	r0, [r8, #2052]	@ 0x804
 80221d6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80221da:	7108      	strb	r0, [r1, #4]
 80221dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80221de:	80c8      	strh	r0, [r1, #6]
 80221e0:	f109 0001 	add.w	r0, r9, #1
 80221e4:	7148      	strb	r0, [r1, #5]
 80221e6:	9906      	ldr	r1, [sp, #24]
 80221e8:	3101      	adds	r1, #1
 80221ea:	b289      	uxth	r1, r1
 80221ec:	9106      	str	r1, [sp, #24]
 80221ee:	e7df      	b.n	80221b0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80221f0:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80221f4:	4611      	mov	r1, r2
 80221f6:	795b      	ldrb	r3, [r3, #5]
 80221f8:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80221fc:	4440      	add	r0, r8
 80221fe:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8022200:	4406      	add	r6, r0
 8022202:	2e00      	cmp	r6, #0
 8022204:	dd06      	ble.n	8022214 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22c>
 8022206:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 802220a:	790e      	ldrb	r6, [r1, #4]
 802220c:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8022210:	88c9      	ldrh	r1, [r1, #6]
 8022212:	e7f4      	b.n	80221fe <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8022214:	f888 1804 	strb.w	r1, [r8, #2052]	@ 0x804
 8022218:	b29b      	uxth	r3, r3
 802221a:	e7c5      	b.n	80221a8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 802221c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802221e:	4629      	mov	r1, r5
 8022220:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022222:	469c      	mov	ip, r3
 8022224:	e78e      	b.n	8022144 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15c>
 8022226:	9a01      	ldr	r2, [sp, #4]
 8022228:	ebac 0304 	sub.w	r3, ip, r4
 802222c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8022230:	4422      	add	r2, r4
 8022232:	b29b      	uxth	r3, r3
 8022234:	b292      	uxth	r2, r2
 8022236:	9201      	str	r2, [sp, #4]
 8022238:	2400      	movs	r4, #0
 802223a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802223c:	4593      	cmp	fp, r2
 802223e:	d38d      	bcc.n	802215c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>
 8022240:	4629      	mov	r1, r5
 8022242:	e74f      	b.n	80220e4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8022244:	458c      	cmp	ip, r1
 8022246:	f04f 0a00 	mov.w	sl, #0
 802224a:	bf2b      	itete	cs
 802224c:	ebac 0301 	subcs.w	r3, ip, r1
 8022250:	eba1 050c 	subcc.w	r5, r1, ip
 8022254:	4625      	movcs	r5, r4
 8022256:	4623      	movcc	r3, r4
 8022258:	bf27      	ittee	cs
 802225a:	b29b      	uxthcs	r3, r3
 802225c:	910d      	strcs	r1, [sp, #52]	@ 0x34
 802225e:	b2ad      	uxthcc	r5, r5
 8022260:	f8cd c034 	strcc.w	ip, [sp, #52]	@ 0x34
 8022264:	9a01      	ldr	r2, [sp, #4]
 8022266:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022268:	4452      	add	r2, sl
 802226a:	4550      	cmp	r0, sl
 802226c:	b292      	uxth	r2, r2
 802226e:	d06b      	beq.n	8022348 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x360>
 8022270:	2004      	movs	r0, #4
 8022272:	4442      	add	r2, r8
 8022274:	4604      	mov	r4, r0
 8022276:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802227a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802227c:	fb14 0202 	smlabb	r2, r4, r2, r0
 8022280:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022282:	5886      	ldr	r6, [r0, r2]
 8022284:	0e32      	lsrs	r2, r6, #24
 8022286:	d013      	beq.n	80222b0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 8022288:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802228a:	4342      	muls	r2, r0
 802228c:	1c54      	adds	r4, r2, #1
 802228e:	eb04 2422 	add.w	r4, r4, r2, asr #8
 8022292:	1224      	asrs	r4, r4, #8
 8022294:	2cff      	cmp	r4, #255	@ 0xff
 8022296:	d005      	beq.n	80222a4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2bc>
 8022298:	f85b 202a 	ldr.w	r2, [fp, sl, lsl #2]
 802229c:	ea5f 6e12 	movs.w	lr, r2, lsr #24
 80222a0:	9208      	str	r2, [sp, #32]
 80222a2:	d108      	bne.n	80222b6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 80222a4:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
 80222a8:	ea46 6604 	orr.w	r6, r6, r4, lsl #24
 80222ac:	f84b 602a 	str.w	r6, [fp, sl, lsl #2]
 80222b0:	f10a 0a01 	add.w	sl, sl, #1
 80222b4:	e7d6      	b.n	8022264 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27c>
 80222b6:	b2e7      	uxtb	r7, r4
 80222b8:	2c00      	cmp	r4, #0
 80222ba:	d0f9      	beq.n	80222b0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 80222bc:	fb07 f00e 	mul.w	r0, r7, lr
 80222c0:	4477      	add	r7, lr
 80222c2:	1c42      	adds	r2, r0, #1
 80222c4:	eb02 2020 	add.w	r0, r2, r0, asr #8
 80222c8:	1200      	asrs	r0, r0, #8
 80222ca:	ebae 0200 	sub.w	r2, lr, r0
 80222ce:	1a3f      	subs	r7, r7, r0
 80222d0:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80222d4:	fa5f fe86 	uxtb.w	lr, r6
 80222d8:	b2ff      	uxtb	r7, r7
 80222da:	920a      	str	r2, [sp, #40]	@ 0x28
 80222dc:	4350      	muls	r0, r2
 80222de:	fb04 0e0e 	mla	lr, r4, lr, r0
 80222e2:	fbbe fef7 	udiv	lr, lr, r7
 80222e6:	fa5f fe8e 	uxtb.w	lr, lr
 80222ea:	ea4e 6207 	orr.w	r2, lr, r7, lsl #24
 80222ee:	9216      	str	r2, [sp, #88]	@ 0x58
 80222f0:	9a08      	ldr	r2, [sp, #32]
 80222f2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80222f6:	f3c6 4207 	ubfx	r2, r6, #16, #8
 80222fa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80222fe:	4362      	muls	r2, r4
 8022300:	4366      	muls	r6, r4
 8022302:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022304:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022306:	4696      	mov	lr, r2
 8022308:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802230a:	fb0e 2000 	mla	r0, lr, r0, r2
 802230e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022310:	fbb0 f0f7 	udiv	r0, r0, r7
 8022314:	0400      	lsls	r0, r0, #16
 8022316:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 802231a:	ea42 0e00 	orr.w	lr, r2, r0
 802231e:	9a08      	ldr	r2, [sp, #32]
 8022320:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022322:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022326:	fb00 6202 	mla	r2, r0, r2, r6
 802232a:	fbb2 f2f7 	udiv	r2, r2, r7
 802232e:	0210      	lsls	r0, r2, #8
 8022330:	b280      	uxth	r0, r0
 8022332:	ea4e 0000 	orr.w	r0, lr, r0
 8022336:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
 802233a:	e7b9      	b.n	80222b0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 802233c:	200122c4 	.word	0x200122c4
 8022340:	200122be 	.word	0x200122be
 8022344:	fffff7fb 	.word	0xfffff7fb
 8022348:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802234a:	458c      	cmp	ip, r1
 802234c:	9201      	str	r2, [sp, #4]
 802234e:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8022352:	f4ff af71 	bcc.w	8022238 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x250>
 8022356:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022358:	9905      	ldr	r1, [sp, #20]
 802235a:	8812      	ldrh	r2, [r2, #0]
 802235c:	1a52      	subs	r2, r2, r1
 802235e:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 8022362:	9a07      	ldr	r2, [sp, #28]
 8022364:	3201      	adds	r2, #1
 8022366:	9207      	str	r2, [sp, #28]
 8022368:	9907      	ldr	r1, [sp, #28]
 802236a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802236c:	428a      	cmp	r2, r1
 802236e:	d111      	bne.n	8022394 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8022370:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8022374:	f8bd a068 	ldrh.w	sl, [sp, #104]	@ 0x68
 8022378:	9b05      	ldr	r3, [sp, #20]
 802237a:	eba4 040a 	sub.w	r4, r4, sl
 802237e:	b2a4      	uxth	r4, r4
 8022380:	2c00      	cmp	r4, #0
 8022382:	bf08      	it	eq
 8022384:	4619      	moveq	r1, r3
 8022386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022388:	bf18      	it	ne
 802238a:	2100      	movne	r1, #0
 802238c:	3301      	adds	r3, #1
 802238e:	b289      	uxth	r1, r1
 8022390:	930e      	str	r3, [sp, #56]	@ 0x38
 8022392:	e69e      	b.n	80220d2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8022394:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8022398:	f8bd 406c 	ldrh.w	r4, [sp, #108]	@ 0x6c
 802239c:	1b64      	subs	r4, r4, r5
 802239e:	b2a4      	uxth	r4, r4
 80223a0:	2c00      	cmp	r4, #0
 80223a2:	bf18      	it	ne
 80223a4:	2500      	movne	r5, #0
 80223a6:	e748      	b.n	802223a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 80223a8:	4b03      	ldr	r3, [pc, #12]	@ (80223b8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d0>)
 80223aa:	6818      	ldr	r0, [r3, #0]
 80223ac:	6803      	ldr	r3, [r0, #0]
 80223ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223b0:	4798      	blx	r3
 80223b2:	b01f      	add	sp, #124	@ 0x7c
 80223b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223b8:	200122c4 	.word	0x200122c4

080223bc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80223bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223c0:	b09d      	sub	sp, #116	@ 0x74
 80223c2:	461c      	mov	r4, r3
 80223c4:	4680      	mov	r8, r0
 80223c6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80223c8:	6820      	ldr	r0, [r4, #0]
 80223ca:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 80223ce:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80223d2:	6861      	ldr	r1, [r4, #4]
 80223d4:	9202      	str	r2, [sp, #8]
 80223d6:	aa18      	add	r2, sp, #96	@ 0x60
 80223d8:	c203      	stmia	r2!, {r0, r1}
 80223da:	6818      	ldr	r0, [r3, #0]
 80223dc:	aa1a      	add	r2, sp, #104	@ 0x68
 80223de:	6859      	ldr	r1, [r3, #4]
 80223e0:	c203      	stmia	r2!, {r0, r1}
 80223e2:	a818      	add	r0, sp, #96	@ 0x60
 80223e4:	f7f8 fd04 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223e8:	4621      	mov	r1, r4
 80223ea:	a81a      	add	r0, sp, #104	@ 0x68
 80223ec:	f7f8 fd28 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223f0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80223f4:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80223f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80223fc:	bfdb      	ittet	le
 80223fe:	b29a      	uxthle	r2, r3
 8022400:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022404:	2201      	movgt	r2, #1
 8022406:	fb91 f2f2 	sdivle	r2, r1, r2
 802240a:	9205      	str	r2, [sp, #20]
 802240c:	9805      	ldr	r0, [sp, #20]
 802240e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8022412:	9905      	ldr	r1, [sp, #20]
 8022414:	fb92 f0f0 	sdiv	r0, r2, r0
 8022418:	b280      	uxth	r0, r0
 802241a:	440c      	add	r4, r1
 802241c:	9010      	str	r0, [sp, #64]	@ 0x40
 802241e:	3c01      	subs	r4, #1
 8022420:	9805      	ldr	r0, [sp, #20]
 8022422:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022424:	fb05 2610 	mls	r6, r5, r0, r2
 8022428:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 802242c:	fb94 f4f1 	sdiv	r4, r4, r1
 8022430:	fb16 f603 	smulbb	r6, r6, r3
 8022434:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8022438:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802243c:	3401      	adds	r4, #1
 802243e:	440e      	add	r6, r1
 8022440:	4419      	add	r1, r3
 8022442:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8022446:	b2a4      	uxth	r4, r4
 8022448:	441a      	add	r2, r3
 802244a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802244e:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8022452:	b2b6      	uxth	r6, r6
 8022454:	9306      	str	r3, [sp, #24]
 8022456:	4ba1      	ldr	r3, [pc, #644]	@ (80226dc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x320>)
 8022458:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 802245c:	6818      	ldr	r0, [r3, #0]
 802245e:	6803      	ldr	r3, [r0, #0]
 8022460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022462:	4798      	blx	r3
 8022464:	4b9e      	ldr	r3, [pc, #632]	@ (80226e0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x324>)
 8022466:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 802246a:	2e00      	cmp	r6, #0
 802246c:	8819      	ldrh	r1, [r3, #0]
 802246e:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8022472:	fb05 f501 	mul.w	r5, r5, r1
 8022476:	fb01 7202 	mla	r2, r1, r2, r7
 802247a:	bf18      	it	ne
 802247c:	2100      	movne	r1, #0
 802247e:	9316      	str	r3, [sp, #88]	@ 0x58
 8022480:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 8022484:	4b97      	ldr	r3, [pc, #604]	@ (80226e4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x328>)
 8022486:	eb0a 0285 	add.w	r2, sl, r5, lsl #2
 802248a:	eba3 0308 	sub.w	r3, r3, r8
 802248e:	920d      	str	r2, [sp, #52]	@ 0x34
 8022490:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022492:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022494:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8022498:	f104 0204 	add.w	r2, r4, #4
 802249c:	920a      	str	r2, [sp, #40]	@ 0x28
 802249e:	9a06      	ldr	r2, [sp, #24]
 80224a0:	bf08      	it	eq
 80224a2:	4611      	moveq	r1, r2
 80224a4:	9a02      	ldr	r2, [sp, #8]
 80224a6:	0612      	lsls	r2, r2, #24
 80224a8:	b289      	uxth	r1, r1
 80224aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80224ac:	2200      	movs	r2, #0
 80224ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80224b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80224b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80224b4:	fa12 f383 	uxtah	r3, r2, r3
 80224b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80224ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80224be:	3304      	adds	r3, #4
 80224c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80224c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80224c4:	459a      	cmp	sl, r3
 80224c6:	f080 8171 	bcs.w	80227ac <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f0>
 80224ca:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80224ce:	f04f 0b01 	mov.w	fp, #1
 80224d2:	9a05      	ldr	r2, [sp, #20]
 80224d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80224d6:	465f      	mov	r7, fp
 80224d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80224dc:	7800      	ldrb	r0, [r0, #0]
 80224de:	fbb6 f3f3 	udiv	r3, r6, r3
 80224e2:	1ad3      	subs	r3, r2, r3
 80224e4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80224e6:	3001      	adds	r0, #1
 80224e8:	b29b      	uxth	r3, r3
 80224ea:	9007      	str	r0, [sp, #28]
 80224ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80224ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80224f0:	785a      	ldrb	r2, [r3, #1]
 80224f2:	789b      	ldrb	r3, [r3, #2]
 80224f4:	021b      	lsls	r3, r3, #8
 80224f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80224fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80224fc:	78d2      	ldrb	r2, [r2, #3]
 80224fe:	4313      	orrs	r3, r2
 8022500:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022502:	441a      	add	r2, r3
 8022504:	1c50      	adds	r0, r2, #1
 8022506:	7852      	ldrb	r2, [r2, #1]
 8022508:	9004      	str	r0, [sp, #16]
 802250a:	0212      	lsls	r2, r2, #8
 802250c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802250e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022512:	5cc3      	ldrb	r3, [r0, r3]
 8022514:	431a      	orrs	r2, r3
 8022516:	b293      	uxth	r3, r2
 8022518:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 802251c:	930c      	str	r3, [sp, #48]	@ 0x30
 802251e:	2300      	movs	r3, #0
 8022520:	461d      	mov	r5, r3
 8022522:	9309      	str	r3, [sp, #36]	@ 0x24
 8022524:	2e00      	cmp	r6, #0
 8022526:	d07e      	beq.n	8022626 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8022528:	42b7      	cmp	r7, r6
 802252a:	d26f      	bcs.n	802260c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802252c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802252e:	1bf6      	subs	r6, r6, r7
 8022530:	460c      	mov	r4, r1
 8022532:	4553      	cmp	r3, sl
 8022534:	b2b6      	uxth	r6, r6
 8022536:	d803      	bhi.n	8022540 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x184>
 8022538:	e073      	b.n	8022622 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 802253a:	9b00      	ldr	r3, [sp, #0]
 802253c:	2b00      	cmp	r3, #0
 802253e:	d15f      	bne.n	8022600 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8022540:	9b04      	ldr	r3, [sp, #16]
 8022542:	9a03      	ldr	r2, [sp, #12]
 8022544:	785b      	ldrb	r3, [r3, #1]
 8022546:	f1c2 0207 	rsb	r2, r2, #7
 802254a:	9903      	ldr	r1, [sp, #12]
 802254c:	4093      	lsls	r3, r2
 802254e:	005b      	lsls	r3, r3, #1
 8022550:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022554:	9b04      	ldr	r3, [sp, #16]
 8022556:	781b      	ldrb	r3, [r3, #0]
 8022558:	410b      	asrs	r3, r1
 802255a:	b2db      	uxtb	r3, r3
 802255c:	4313      	orrs	r3, r2
 802255e:	460a      	mov	r2, r1
 8022560:	3201      	adds	r2, #1
 8022562:	b298      	uxth	r0, r3
 8022564:	b2d2      	uxtb	r2, r2
 8022566:	2a08      	cmp	r2, #8
 8022568:	9203      	str	r2, [sp, #12]
 802256a:	9a04      	ldr	r2, [sp, #16]
 802256c:	bf09      	itett	eq
 802256e:	3202      	addeq	r2, #2
 8022570:	3201      	addne	r2, #1
 8022572:	9204      	streq	r2, [sp, #16]
 8022574:	2200      	moveq	r2, #0
 8022576:	bf14      	ite	ne
 8022578:	9204      	strne	r2, [sp, #16]
 802257a:	9203      	streq	r2, [sp, #12]
 802257c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802257e:	4282      	cmp	r2, r0
 8022580:	d30b      	bcc.n	802259a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 8022582:	f888 3804 	strb.w	r3, [r8, #2052]	@ 0x804
 8022586:	2301      	movs	r3, #1
 8022588:	9a07      	ldr	r2, [sp, #28]
 802258a:	9300      	str	r3, [sp, #0]
 802258c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8022590:	d310      	bcc.n	80225b4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f8>
 8022592:	f8dd b000 	ldr.w	fp, [sp]
 8022596:	2200      	movs	r2, #0
 8022598:	e033      	b.n	8022602 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 802259a:	9b07      	ldr	r3, [sp, #28]
 802259c:	4283      	cmp	r3, r0
 802259e:	d819      	bhi.n	80225d4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80225a0:	eb08 030b 	add.w	r3, r8, fp
 80225a4:	f898 2804 	ldrb.w	r2, [r8, #2052]	@ 0x804
 80225a8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80225ac:	f10b 0301 	add.w	r3, fp, #1
 80225b0:	b29b      	uxth	r3, r3
 80225b2:	9300      	str	r3, [sp, #0]
 80225b4:	9a07      	ldr	r2, [sp, #28]
 80225b6:	f898 1804 	ldrb.w	r1, [r8, #2052]	@ 0x804
 80225ba:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80225be:	7111      	strb	r1, [r2, #4]
 80225c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80225c2:	80d1      	strh	r1, [r2, #6]
 80225c4:	f10b 0101 	add.w	r1, fp, #1
 80225c8:	7151      	strb	r1, [r2, #5]
 80225ca:	9a07      	ldr	r2, [sp, #28]
 80225cc:	3201      	adds	r2, #1
 80225ce:	b292      	uxth	r2, r2
 80225d0:	9207      	str	r2, [sp, #28]
 80225d2:	e7de      	b.n	8022592 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80225d4:	eb08 0380 	add.w	r3, r8, r0, lsl #2
 80225d8:	4602      	mov	r2, r0
 80225da:	795b      	ldrb	r3, [r3, #5]
 80225dc:	f603 0104 	addw	r1, r3, #2052	@ 0x804
 80225e0:	4441      	add	r1, r8
 80225e2:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80225e4:	440d      	add	r5, r1
 80225e6:	2d00      	cmp	r5, #0
 80225e8:	dd06      	ble.n	80225f8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23c>
 80225ea:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80225ee:	7915      	ldrb	r5, [r2, #4]
 80225f0:	f801 5d01 	strb.w	r5, [r1, #-1]!
 80225f4:	88d2      	ldrh	r2, [r2, #6]
 80225f6:	e7f4      	b.n	80225e2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 80225f8:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 80225fc:	b29b      	uxth	r3, r3
 80225fe:	e7c3      	b.n	8022588 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1cc>
 8022600:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022602:	4621      	mov	r1, r4
 8022604:	900c      	str	r0, [sp, #48]	@ 0x30
 8022606:	4615      	mov	r5, r2
 8022608:	9f00      	ldr	r7, [sp, #0]
 802260a:	e78b      	b.n	8022524 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x168>
 802260c:	1bbb      	subs	r3, r7, r6
 802260e:	4435      	add	r5, r6
 8022610:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022614:	b29b      	uxth	r3, r3
 8022616:	b2aa      	uxth	r2, r5
 8022618:	9300      	str	r3, [sp, #0]
 802261a:	2600      	movs	r6, #0
 802261c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802261e:	458a      	cmp	sl, r1
 8022620:	d38b      	bcc.n	802253a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8022622:	4621      	mov	r1, r4
 8022624:	e74d      	b.n	80224c2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 8022626:	428f      	cmp	r7, r1
 8022628:	d332      	bcc.n	8022690 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2d4>
 802262a:	1a7b      	subs	r3, r7, r1
 802262c:	4634      	mov	r4, r6
 802262e:	9108      	str	r1, [sp, #32]
 8022630:	b29b      	uxth	r3, r3
 8022632:	9300      	str	r3, [sp, #0]
 8022634:	9a02      	ldr	r2, [sp, #8]
 8022636:	2aff      	cmp	r2, #255	@ 0xff
 8022638:	d02f      	beq.n	802269a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2de>
 802263a:	2200      	movs	r2, #0
 802263c:	9201      	str	r2, [sp, #4]
 802263e:	9b01      	ldr	r3, [sp, #4]
 8022640:	9801      	ldr	r0, [sp, #4]
 8022642:	18ea      	adds	r2, r5, r3
 8022644:	9b08      	ldr	r3, [sp, #32]
 8022646:	4283      	cmp	r3, r0
 8022648:	b292      	uxth	r2, r2
 802264a:	d14d      	bne.n	80226e8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x32c>
 802264c:	428f      	cmp	r7, r1
 802264e:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8022652:	d3e2      	bcc.n	802261a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8022654:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022656:	8819      	ldrh	r1, [r3, #0]
 8022658:	9b06      	ldr	r3, [sp, #24]
 802265a:	1ac9      	subs	r1, r1, r3
 802265c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802265e:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8022662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022664:	3101      	adds	r1, #1
 8022666:	428b      	cmp	r3, r1
 8022668:	9109      	str	r1, [sp, #36]	@ 0x24
 802266a:	f040 8095 	bne.w	8022798 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3dc>
 802266e:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 8022672:	f8bd 7060 	ldrh.w	r7, [sp, #96]	@ 0x60
 8022676:	9b06      	ldr	r3, [sp, #24]
 8022678:	1bf6      	subs	r6, r6, r7
 802267a:	b2b6      	uxth	r6, r6
 802267c:	2e00      	cmp	r6, #0
 802267e:	bf08      	it	eq
 8022680:	4619      	moveq	r1, r3
 8022682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022684:	bf18      	it	ne
 8022686:	2100      	movne	r1, #0
 8022688:	3301      	adds	r3, #1
 802268a:	b289      	uxth	r1, r1
 802268c:	930e      	str	r3, [sp, #56]	@ 0x38
 802268e:	e70f      	b.n	80224b0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8022690:	1bcc      	subs	r4, r1, r7
 8022692:	9708      	str	r7, [sp, #32]
 8022694:	9600      	str	r6, [sp, #0]
 8022696:	b2a4      	uxth	r4, r4
 8022698:	e7cc      	b.n	8022634 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 802269a:	9a08      	ldr	r2, [sp, #32]
 802269c:	4656      	mov	r6, sl
 802269e:	18aa      	adds	r2, r5, r2
 80226a0:	b292      	uxth	r2, r2
 80226a2:	4295      	cmp	r5, r2
 80226a4:	d076      	beq.n	8022794 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3d8>
 80226a6:	f105 0c01 	add.w	ip, r5, #1
 80226aa:	4445      	add	r5, r8
 80226ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226ae:	f895 0804 	ldrb.w	r0, [r5, #2052]	@ 0x804
 80226b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80226b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80226b8:	4405      	add	r5, r0
 80226ba:	5c18      	ldrb	r0, [r3, r0]
 80226bc:	f895 e002 	ldrb.w	lr, [r5, #2]
 80226c0:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80226c4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80226c8:	f895 e001 	ldrb.w	lr, [r5, #1]
 80226cc:	fa1f f58c 	uxth.w	r5, ip
 80226d0:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 80226d4:	f846 0b04 	str.w	r0, [r6], #4
 80226d8:	e7e3      	b.n	80226a2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2e6>
 80226da:	bf00      	nop
 80226dc:	200122c4 	.word	0x200122c4
 80226e0:	200122be 	.word	0x200122be
 80226e4:	fffff7fb 	.word	0xfffff7fb
 80226e8:	4442      	add	r2, r8
 80226ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226ec:	f892 6804 	ldrb.w	r6, [r2, #2052]	@ 0x804
 80226f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80226f4:	1998      	adds	r0, r3, r6
 80226f6:	9b01      	ldr	r3, [sp, #4]
 80226f8:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 80226fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226fe:	ea5f 6912 	movs.w	r9, r2, lsr #24
 8022702:	5d9e      	ldrb	r6, [r3, r6]
 8022704:	7843      	ldrb	r3, [r0, #1]
 8022706:	7880      	ldrb	r0, [r0, #2]
 8022708:	9311      	str	r3, [sp, #68]	@ 0x44
 802270a:	d10c      	bne.n	8022726 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x36a>
 802270c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802270e:	431e      	orrs	r6, r3
 8022710:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022712:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8022716:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 802271a:	9b01      	ldr	r3, [sp, #4]
 802271c:	9a01      	ldr	r2, [sp, #4]
 802271e:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
 8022722:	3201      	adds	r2, #1
 8022724:	e78a      	b.n	802263c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>
 8022726:	9b02      	ldr	r3, [sp, #8]
 8022728:	fb13 f000 	smulbb	r0, r3, r0
 802272c:	fb03 fe09 	mul.w	lr, r3, r9
 8022730:	fb13 f606 	smulbb	r6, r3, r6
 8022734:	f10e 0c01 	add.w	ip, lr, #1
 8022738:	eb0c 2c2e 	add.w	ip, ip, lr, asr #8
 802273c:	eb03 0e09 	add.w	lr, r3, r9
 8022740:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022744:	eba9 090c 	sub.w	r9, r9, ip
 8022748:	ebae 0e0c 	sub.w	lr, lr, ip
 802274c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022750:	fa5f fe8e 	uxtb.w	lr, lr
 8022754:	fb09 0c0c 	mla	ip, r9, ip, r0
 8022758:	b2d0      	uxtb	r0, r2
 802275a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802275e:	fb09 6600 	mla	r6, r9, r0, r6
 8022762:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022764:	fbbc fcfe 	udiv	ip, ip, lr
 8022768:	fbb6 f6fe 	udiv	r6, r6, lr
 802276c:	fb13 f000 	smulbb	r0, r3, r0
 8022770:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8022774:	b2f6      	uxtb	r6, r6
 8022776:	fb09 0202 	mla	r2, r9, r2, r0
 802277a:	f40c 0c7f 	and.w	ip, ip, #16711680	@ 0xff0000
 802277e:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8022782:	fbb2 f2fe 	udiv	r2, r2, lr
 8022786:	ea4c 0c06 	orr.w	ip, ip, r6
 802278a:	0216      	lsls	r6, r2, #8
 802278c:	b2b6      	uxth	r6, r6
 802278e:	ea4c 0606 	orr.w	r6, ip, r6
 8022792:	e7c2      	b.n	802271a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x35e>
 8022794:	9b08      	ldr	r3, [sp, #32]
 8022796:	e759      	b.n	802264c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x290>
 8022798:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 802279c:	f8bd 6064 	ldrh.w	r6, [sp, #100]	@ 0x64
 80227a0:	1b36      	subs	r6, r6, r4
 80227a2:	b2b6      	uxth	r6, r6
 80227a4:	2e00      	cmp	r6, #0
 80227a6:	bf18      	it	ne
 80227a8:	2400      	movne	r4, #0
 80227aa:	e737      	b.n	802261c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80227ac:	4b03      	ldr	r3, [pc, #12]	@ (80227bc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x400>)
 80227ae:	6818      	ldr	r0, [r3, #0]
 80227b0:	6803      	ldr	r3, [r0, #0]
 80227b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227b4:	4798      	blx	r3
 80227b6:	b01d      	add	sp, #116	@ 0x74
 80227b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227bc:	200122c4 	.word	0x200122c4

080227c0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80227c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c4:	b089      	sub	sp, #36	@ 0x24
 80227c6:	4607      	mov	r7, r0
 80227c8:	4689      	mov	r9, r1
 80227ca:	4692      	mov	sl, r2
 80227cc:	ac08      	add	r4, sp, #32
 80227ce:	461e      	mov	r6, r3
 80227d0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80227d4:	4620      	mov	r0, r4
 80227d6:	f7fc f825 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 80227da:	683b      	ldr	r3, [r7, #0]
 80227dc:	4605      	mov	r5, r0
 80227de:	4620      	mov	r0, r4
 80227e0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80227e4:	f7fb ff2c 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80227e8:	4683      	mov	fp, r0
 80227ea:	4620      	mov	r0, r4
 80227ec:	f7fb ff5c 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80227f0:	4653      	mov	r3, sl
 80227f2:	464a      	mov	r2, r9
 80227f4:	4639      	mov	r1, r7
 80227f6:	9500      	str	r5, [sp, #0]
 80227f8:	e9cd b001 	strd	fp, r0, [sp, #4]
 80227fc:	a806      	add	r0, sp, #24
 80227fe:	47c0      	blx	r8
 8022800:	a906      	add	r1, sp, #24
 8022802:	4630      	mov	r0, r6
 8022804:	f7fb fe00 	bl	801e408 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8022808:	4628      	mov	r0, r5
 802280a:	b009      	add	sp, #36	@ 0x24
 802280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022810 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L4D0Ev>:
 8022810:	b510      	push	{r4, lr}
 8022812:	4604      	mov	r4, r0
 8022814:	2104      	movs	r1, #4
 8022816:	f00a fb9c 	bl	802cf52 <_ZdlPvj>
 802281a:	4620      	mov	r0, r4
 802281c:	bd10      	pop	{r4, pc}

0802281e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLED0Ev>:
 802281e:	b510      	push	{r4, lr}
 8022820:	4604      	mov	r4, r0
 8022822:	2104      	movs	r1, #4
 8022824:	f00a fb95 	bl	802cf52 <_ZdlPvj>
 8022828:	4620      	mov	r0, r4
 802282a:	bd10      	pop	{r4, pc}

0802282c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW9D0Ev>:
 802282c:	b510      	push	{r4, lr}
 802282e:	4604      	mov	r4, r0
 8022830:	f640 0144 	movw	r1, #2116	@ 0x844
 8022834:	f00a fb8d 	bl	802cf52 <_ZdlPvj>
 8022838:	4620      	mov	r0, r4
 802283a:	bd10      	pop	{r4, pc}

0802283c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOID0Ev>:
 802283c:	b510      	push	{r4, lr}
 802283e:	4604      	mov	r4, r0
 8022840:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8022844:	f00a fb85 	bl	802cf52 <_ZdlPvj>
 8022848:	4620      	mov	r0, r4
 802284a:	bd10      	pop	{r4, pc}

0802284c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802284c:	b510      	push	{r4, lr}
 802284e:	4604      	mov	r4, r0
 8022850:	2104      	movs	r1, #4
 8022852:	f00a fb7e 	bl	802cf52 <_ZdlPvj>
 8022856:	4620      	mov	r0, r4
 8022858:	bd10      	pop	{r4, pc}

0802285a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802285a:	b510      	push	{r4, lr}
 802285c:	4604      	mov	r4, r0
 802285e:	2104      	movs	r1, #4
 8022860:	f00a fb77 	bl	802cf52 <_ZdlPvj>
 8022864:	4620      	mov	r0, r4
 8022866:	bd10      	pop	{r4, pc}

08022868 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022868:	b510      	push	{r4, lr}
 802286a:	4604      	mov	r4, r0
 802286c:	2104      	movs	r1, #4
 802286e:	f00a fb70 	bl	802cf52 <_ZdlPvj>
 8022872:	4620      	mov	r0, r4
 8022874:	bd10      	pop	{r4, pc}

08022876 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8022876:	b510      	push	{r4, lr}
 8022878:	4604      	mov	r4, r0
 802287a:	2104      	movs	r1, #4
 802287c:	f00a fb69 	bl	802cf52 <_ZdlPvj>
 8022880:	4620      	mov	r0, r4
 8022882:	bd10      	pop	{r4, pc}

08022884 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022884:	b510      	push	{r4, lr}
 8022886:	4604      	mov	r4, r0
 8022888:	2104      	movs	r1, #4
 802288a:	f00a fb62 	bl	802cf52 <_ZdlPvj>
 802288e:	4620      	mov	r0, r4
 8022890:	bd10      	pop	{r4, pc}

08022892 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022892:	b510      	push	{r4, lr}
 8022894:	4604      	mov	r4, r0
 8022896:	2104      	movs	r1, #4
 8022898:	f00a fb5b 	bl	802cf52 <_ZdlPvj>
 802289c:	4620      	mov	r0, r4
 802289e:	bd10      	pop	{r4, pc}

080228a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80228a0:	b510      	push	{r4, lr}
 80228a2:	4604      	mov	r4, r0
 80228a4:	2104      	movs	r1, #4
 80228a6:	f00a fb54 	bl	802cf52 <_ZdlPvj>
 80228aa:	4620      	mov	r0, r4
 80228ac:	bd10      	pop	{r4, pc}

080228ae <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80228ae:	b510      	push	{r4, lr}
 80228b0:	4604      	mov	r4, r0
 80228b2:	2104      	movs	r1, #4
 80228b4:	f00a fb4d 	bl	802cf52 <_ZdlPvj>
 80228b8:	4620      	mov	r0, r4
 80228ba:	bd10      	pop	{r4, pc}

080228bc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80228bc:	b510      	push	{r4, lr}
 80228be:	4604      	mov	r4, r0
 80228c0:	2104      	movs	r1, #4
 80228c2:	f00a fb46 	bl	802cf52 <_ZdlPvj>
 80228c6:	4620      	mov	r0, r4
 80228c8:	bd10      	pop	{r4, pc}

080228ca <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80228ca:	b510      	push	{r4, lr}
 80228cc:	4604      	mov	r4, r0
 80228ce:	2104      	movs	r1, #4
 80228d0:	f00a fb3f 	bl	802cf52 <_ZdlPvj>
 80228d4:	4620      	mov	r0, r4
 80228d6:	bd10      	pop	{r4, pc}

080228d8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80228d8:	b510      	push	{r4, lr}
 80228da:	4604      	mov	r4, r0
 80228dc:	2104      	movs	r1, #4
 80228de:	f00a fb38 	bl	802cf52 <_ZdlPvj>
 80228e2:	4620      	mov	r0, r4
 80228e4:	bd10      	pop	{r4, pc}

080228e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80228e6:	b510      	push	{r4, lr}
 80228e8:	4604      	mov	r4, r0
 80228ea:	2104      	movs	r1, #4
 80228ec:	f00a fb31 	bl	802cf52 <_ZdlPvj>
 80228f0:	4620      	mov	r0, r4
 80228f2:	bd10      	pop	{r4, pc}

080228f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80228f4:	b510      	push	{r4, lr}
 80228f6:	4604      	mov	r4, r0
 80228f8:	2104      	movs	r1, #4
 80228fa:	f00a fb2a 	bl	802cf52 <_ZdlPvj>
 80228fe:	4620      	mov	r0, r4
 8022900:	bd10      	pop	{r4, pc}

08022902 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022902:	b510      	push	{r4, lr}
 8022904:	4604      	mov	r4, r0
 8022906:	2104      	movs	r1, #4
 8022908:	f00a fb23 	bl	802cf52 <_ZdlPvj>
 802290c:	4620      	mov	r0, r4
 802290e:	bd10      	pop	{r4, pc}

08022910 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022910:	b510      	push	{r4, lr}
 8022912:	4604      	mov	r4, r0
 8022914:	2104      	movs	r1, #4
 8022916:	f00a fb1c 	bl	802cf52 <_ZdlPvj>
 802291a:	4620      	mov	r0, r4
 802291c:	bd10      	pop	{r4, pc}

0802291e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802291e:	b510      	push	{r4, lr}
 8022920:	4604      	mov	r4, r0
 8022922:	2104      	movs	r1, #4
 8022924:	f00a fb15 	bl	802cf52 <_ZdlPvj>
 8022928:	4620      	mov	r0, r4
 802292a:	bd10      	pop	{r4, pc}

0802292c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802292c:	b510      	push	{r4, lr}
 802292e:	4604      	mov	r4, r0
 8022930:	2104      	movs	r1, #4
 8022932:	f00a fb0e 	bl	802cf52 <_ZdlPvj>
 8022936:	4620      	mov	r0, r4
 8022938:	bd10      	pop	{r4, pc}

0802293a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802293a:	b510      	push	{r4, lr}
 802293c:	4604      	mov	r4, r0
 802293e:	2104      	movs	r1, #4
 8022940:	f00a fb07 	bl	802cf52 <_ZdlPvj>
 8022944:	4620      	mov	r0, r4
 8022946:	bd10      	pop	{r4, pc}

08022948 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022948:	b510      	push	{r4, lr}
 802294a:	4604      	mov	r4, r0
 802294c:	2104      	movs	r1, #4
 802294e:	f00a fb00 	bl	802cf52 <_ZdlPvj>
 8022952:	4620      	mov	r0, r4
 8022954:	bd10      	pop	{r4, pc}

08022956 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022956:	b510      	push	{r4, lr}
 8022958:	4604      	mov	r4, r0
 802295a:	2104      	movs	r1, #4
 802295c:	f00a faf9 	bl	802cf52 <_ZdlPvj>
 8022960:	4620      	mov	r0, r4
 8022962:	bd10      	pop	{r4, pc}

08022964 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022964:	b510      	push	{r4, lr}
 8022966:	4604      	mov	r4, r0
 8022968:	2104      	movs	r1, #4
 802296a:	f00a faf2 	bl	802cf52 <_ZdlPvj>
 802296e:	4620      	mov	r0, r4
 8022970:	bd10      	pop	{r4, pc}

08022972 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022972:	b510      	push	{r4, lr}
 8022974:	4604      	mov	r4, r0
 8022976:	2104      	movs	r1, #4
 8022978:	f00a faeb 	bl	802cf52 <_ZdlPvj>
 802297c:	4620      	mov	r0, r4
 802297e:	bd10      	pop	{r4, pc}

08022980 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022980:	b510      	push	{r4, lr}
 8022982:	4604      	mov	r4, r0
 8022984:	2104      	movs	r1, #4
 8022986:	f00a fae4 	bl	802cf52 <_ZdlPvj>
 802298a:	4620      	mov	r0, r4
 802298c:	bd10      	pop	{r4, pc}

0802298e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802298e:	b510      	push	{r4, lr}
 8022990:	4604      	mov	r4, r0
 8022992:	2104      	movs	r1, #4
 8022994:	f00a fadd 	bl	802cf52 <_ZdlPvj>
 8022998:	4620      	mov	r0, r4
 802299a:	bd10      	pop	{r4, pc}

0802299c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802299c:	b510      	push	{r4, lr}
 802299e:	4604      	mov	r4, r0
 80229a0:	2104      	movs	r1, #4
 80229a2:	f00a fad6 	bl	802cf52 <_ZdlPvj>
 80229a6:	4620      	mov	r0, r4
 80229a8:	bd10      	pop	{r4, pc}

080229aa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80229aa:	b510      	push	{r4, lr}
 80229ac:	4604      	mov	r4, r0
 80229ae:	2104      	movs	r1, #4
 80229b0:	f00a facf 	bl	802cf52 <_ZdlPvj>
 80229b4:	4620      	mov	r0, r4
 80229b6:	bd10      	pop	{r4, pc}

080229b8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80229b8:	b510      	push	{r4, lr}
 80229ba:	4604      	mov	r4, r0
 80229bc:	2104      	movs	r1, #4
 80229be:	f00a fac8 	bl	802cf52 <_ZdlPvj>
 80229c2:	4620      	mov	r0, r4
 80229c4:	bd10      	pop	{r4, pc}

080229c6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80229c6:	b510      	push	{r4, lr}
 80229c8:	4604      	mov	r4, r0
 80229ca:	2104      	movs	r1, #4
 80229cc:	f00a fac1 	bl	802cf52 <_ZdlPvj>
 80229d0:	4620      	mov	r0, r4
 80229d2:	bd10      	pop	{r4, pc}

080229d4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 80229d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d8:	b091      	sub	sp, #68	@ 0x44
 80229da:	4616      	mov	r6, r2
 80229dc:	460d      	mov	r5, r1
 80229de:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 80229e2:	9001      	str	r0, [sp, #4]
 80229e4:	9206      	str	r2, [sp, #24]
 80229e6:	2a00      	cmp	r2, #0
 80229e8:	f000 8264 	beq.w	8022eb4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4e0>
 80229ec:	6830      	ldr	r0, [r6, #0]
 80229ee:	ac0c      	add	r4, sp, #48	@ 0x30
 80229f0:	6871      	ldr	r1, [r6, #4]
 80229f2:	c403      	stmia	r4!, {r0, r1}
 80229f4:	6818      	ldr	r0, [r3, #0]
 80229f6:	ac0e      	add	r4, sp, #56	@ 0x38
 80229f8:	6859      	ldr	r1, [r3, #4]
 80229fa:	c403      	stmia	r4!, {r0, r1}
 80229fc:	a80c      	add	r0, sp, #48	@ 0x30
 80229fe:	f7f8 f9f7 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a02:	4631      	mov	r1, r6
 8022a04:	a80e      	add	r0, sp, #56	@ 0x38
 8022a06:	f7f8 fa1b 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022a0a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8022a0e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022a12:	bfdb      	ittet	le
 8022a14:	b293      	uxthle	r3, r2
 8022a16:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022a1a:	2301      	movgt	r3, #1
 8022a1c:	fb91 f3f3 	sdivle	r3, r1, r3
 8022a20:	9302      	str	r3, [sp, #8]
 8022a22:	f105 0308 	add.w	r3, r5, #8
 8022a26:	9902      	ldr	r1, [sp, #8]
 8022a28:	9307      	str	r3, [sp, #28]
 8022a2a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8022a2e:	440b      	add	r3, r1
 8022a30:	3b01      	subs	r3, #1
 8022a32:	fb93 f3f1 	sdiv	r3, r3, r1
 8022a36:	3b01      	subs	r3, #1
 8022a38:	9907      	ldr	r1, [sp, #28]
 8022a3a:	b29b      	uxth	r3, r3
 8022a3c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022a40:	9902      	ldr	r1, [sp, #8]
 8022a42:	9308      	str	r3, [sp, #32]
 8022a44:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022a48:	fb93 f0f1 	sdiv	r0, r3, r1
 8022a4c:	b284      	uxth	r4, r0
 8022a4e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8022a52:	9403      	str	r4, [sp, #12]
 8022a54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022a58:	fb05 3414 	mls	r4, r5, r4, r3
 8022a5c:	fb14 f402 	smulbb	r4, r4, r2
 8022a60:	440c      	add	r4, r1
 8022a62:	b2a4      	uxth	r4, r4
 8022a64:	2d00      	cmp	r5, #0
 8022a66:	d056      	beq.n	8022b16 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x142>
 8022a68:	1e6a      	subs	r2, r5, #1
 8022a6a:	9807      	ldr	r0, [sp, #28]
 8022a6c:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 8022a70:	9a08      	ldr	r2, [sp, #32]
 8022a72:	fa9a fa8a 	rev.w	sl, sl
 8022a76:	4492      	add	sl, r2
 8022a78:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022a7c:	f04f 0600 	mov.w	r6, #0
 8022a80:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8022a84:	4411      	add	r1, r2
 8022a86:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022a8a:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 8022d7c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a8>
 8022a8e:	4413      	add	r3, r2
 8022a90:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8022a94:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022a98:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022a9c:	9300      	str	r3, [sp, #0]
 8022a9e:	4bb5      	ldr	r3, [pc, #724]	@ (8022d74 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a0>)
 8022aa0:	6818      	ldr	r0, [r3, #0]
 8022aa2:	6803      	ldr	r3, [r0, #0]
 8022aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022aa6:	4798      	blx	r3
 8022aa8:	4bb3      	ldr	r3, [pc, #716]	@ (8022d78 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a4>)
 8022aaa:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022aae:	881b      	ldrh	r3, [r3, #0]
 8022ab0:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 8022ab4:	fb03 1202 	mla	r2, r3, r2, r1
 8022ab8:	2100      	movs	r1, #0
 8022aba:	436b      	muls	r3, r5
 8022abc:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8022ac0:	2280      	movs	r2, #128	@ 0x80
 8022ac2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8022ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ac8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022acc:	fb94 f3f3 	sdiv	r3, r4, r3
 8022ad0:	9305      	str	r3, [sp, #20]
 8022ad2:	9b01      	ldr	r3, [sp, #4]
 8022ad4:	3304      	adds	r3, #4
 8022ad6:	4618      	mov	r0, r3
 8022ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ada:	f00b faa7 	bl	802e02c <memset>
 8022ade:	2300      	movs	r3, #0
 8022ae0:	9304      	str	r3, [sp, #16]
 8022ae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022ae4:	455b      	cmp	r3, fp
 8022ae6:	f240 81e0 	bls.w	8022eaa <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4d6>
 8022aea:	f04f 0e07 	mov.w	lr, #7
 8022aee:	2c00      	cmp	r4, #0
 8022af0:	f000 8104 	beq.w	8022cfc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x328>
 8022af4:	f89a 5000 	ldrb.w	r5, [sl]
 8022af8:	f10a 0701 	add.w	r7, sl, #1
 8022afc:	b2ed      	uxtb	r5, r5
 8022afe:	11aa      	asrs	r2, r5, #6
 8022b00:	d10c      	bne.n	8022b1c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x148>
 8022b02:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8022b06:	9b01      	ldr	r3, [sp, #4]
 8022b08:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8022b0c:	88ae      	ldrh	r6, [r5, #4]
 8022b0e:	3c01      	subs	r4, #1
 8022b10:	b2a4      	uxth	r4, r4
 8022b12:	46ba      	mov	sl, r7
 8022b14:	e7eb      	b.n	8022aee <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x11a>
 8022b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8022b1a:	e7ad      	b.n	8022a78 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa4>
 8022b1c:	2a01      	cmp	r2, #1
 8022b1e:	d129      	bne.n	8022b74 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1a0>
 8022b20:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8022b24:	f005 0203 	and.w	r2, r5, #3
 8022b28:	2103      	movs	r1, #3
 8022b2a:	3b02      	subs	r3, #2
 8022b2c:	4413      	add	r3, r2
 8022b2e:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8022b32:	f3c5 1501 	ubfx	r5, r5, #4, #2
 8022b36:	f003 031f 	and.w	r3, r3, #31
 8022b3a:	3a02      	subs	r2, #2
 8022b3c:	3d02      	subs	r5, #2
 8022b3e:	f363 0604 	bfi	r6, r3, #0, #5
 8022b42:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8022b46:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022b4a:	f362 164a 	bfi	r6, r2, #5, #6
 8022b4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022b52:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8022b56:	f005 051f 	and.w	r5, r5, #31
 8022b5a:	fb11 2205 	smlabb	r2, r1, r5, r2
 8022b5e:	f365 26cf 	bfi	r6, r5, #11, #5
 8022b62:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8022b66:	9a01      	ldr	r2, [sp, #4]
 8022b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022b6c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022b70:	809e      	strh	r6, [r3, #4]
 8022b72:	e7cc      	b.n	8022b0e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x13a>
 8022b74:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8022b78:	2a02      	cmp	r2, #2
 8022b7a:	b2ab      	uxth	r3, r5
 8022b7c:	d136      	bne.n	8022bec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x218>
 8022b7e:	2101      	movs	r1, #1
 8022b80:	fb12 1205 	smlabb	r2, r2, r5, r1
 8022b84:	4492      	add	sl, r2
 8022b86:	463a      	mov	r2, r7
 8022b88:	4552      	cmp	r2, sl
 8022b8a:	d01d      	beq.n	8022bc8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1f4>
 8022b8c:	4694      	mov	ip, r2
 8022b8e:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8022b92:	7852      	ldrb	r2, [r2, #1]
 8022b94:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8022b98:	f001 021f 	and.w	r2, r1, #31
 8022b9c:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8022ba0:	ea4f 29d1 	mov.w	r9, r1, lsr #11
 8022ba4:	460e      	mov	r6, r1
 8022ba6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022ba8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022bac:	2203      	movs	r2, #3
 8022bae:	fb12 0009 	smlabb	r0, r2, r9, r0
 8022bb2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022bb4:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8022bb8:	9a01      	ldr	r2, [sp, #4]
 8022bba:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8022bbe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8022bc2:	4662      	mov	r2, ip
 8022bc4:	8081      	strh	r1, [r0, #4]
 8022bc6:	e7df      	b.n	8022b88 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b4>
 8022bc8:	429c      	cmp	r4, r3
 8022bca:	d20b      	bcs.n	8022be4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x210>
 8022bcc:	1b2d      	subs	r5, r5, r4
 8022bce:	eb07 0744 	add.w	r7, r7, r4, lsl #1
 8022bd2:	2d00      	cmp	r5, #0
 8022bd4:	f300 8171 	bgt.w	8022eba <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4e6>
 8022bd8:	f8dd 9000 	ldr.w	r9, [sp]
 8022bdc:	2400      	movs	r4, #0
 8022bde:	2301      	movs	r3, #1
 8022be0:	9304      	str	r3, [sp, #16]
 8022be2:	e00b      	b.n	8022bfc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022be4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8022be8:	1ae4      	subs	r4, r4, r3
 8022bea:	e791      	b.n	8022b10 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x13c>
 8022bec:	429c      	cmp	r4, r3
 8022bee:	d2fb      	bcs.n	8022be8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x214>
 8022bf0:	1b2d      	subs	r5, r5, r4
 8022bf2:	2d00      	cmp	r5, #0
 8022bf4:	dc3b      	bgt.n	8022c6e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x29a>
 8022bf6:	f8dd 9000 	ldr.w	r9, [sp]
 8022bfa:	2400      	movs	r4, #0
 8022bfc:	f1b9 0f00 	cmp.w	r9, #0
 8022c00:	f340 8113 	ble.w	8022e2a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x456>
 8022c04:	783b      	ldrb	r3, [r7, #0]
 8022c06:	f107 0a01 	add.w	sl, r7, #1
 8022c0a:	b2db      	uxtb	r3, r3
 8022c0c:	119a      	asrs	r2, r3, #6
 8022c0e:	d17d      	bne.n	8022d0c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x338>
 8022c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022c14:	9a01      	ldr	r2, [sp, #4]
 8022c16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022c1a:	889e      	ldrh	r6, [r3, #4]
 8022c1c:	2c3f      	cmp	r4, #63	@ 0x3f
 8022c1e:	f340 80a2 	ble.w	8022d66 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x392>
 8022c22:	2301      	movs	r3, #1
 8022c24:	461f      	mov	r7, r3
 8022c26:	1bdd      	subs	r5, r3, r7
 8022c28:	19e3      	adds	r3, r4, r7
 8022c2a:	eba9 0907 	sub.w	r9, r9, r7
 8022c2e:	2b40      	cmp	r3, #64	@ 0x40
 8022c30:	dd13      	ble.n	8022c5a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8022c32:	4640      	mov	r0, r8
 8022c34:	0061      	lsls	r1, r4, #1
 8022c36:	f7f0 fa07 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 8022c3a:	4641      	mov	r1, r8
 8022c3c:	9b06      	ldr	r3, [sp, #24]
 8022c3e:	b222      	sxth	r2, r4
 8022c40:	4658      	mov	r0, fp
 8022c42:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8022c46:	f7f0 fa71 	bl	801312c <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>
 8022c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8022d7c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a8>)
 8022c4c:	2400      	movs	r4, #0
 8022c4e:	4598      	cmp	r8, r3
 8022c50:	bf0c      	ite	eq
 8022c52:	f8df 812c 	ldreq.w	r8, [pc, #300]	@ 8022d80 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ac>
 8022c56:	f8df 8124 	ldrne.w	r8, [pc, #292]	@ 8022d7c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3a8>
 8022c5a:	b2b1      	uxth	r1, r6
 8022c5c:	463b      	mov	r3, r7
 8022c5e:	eb08 0244 	add.w	r2, r8, r4, lsl #1
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	d04f      	beq.n	8022d06 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x332>
 8022c66:	f822 1b02 	strh.w	r1, [r2], #2
 8022c6a:	3b01      	subs	r3, #1
 8022c6c:	e7f9      	b.n	8022c62 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x28e>
 8022c6e:	9b00      	ldr	r3, [sp, #0]
 8022c70:	9a00      	ldr	r2, [sp, #0]
 8022c72:	42ab      	cmp	r3, r5
 8022c74:	bfa8      	it	ge
 8022c76:	462b      	movge	r3, r5
 8022c78:	eba2 0903 	sub.w	r9, r2, r3
 8022c7c:	9a04      	ldr	r2, [sp, #16]
 8022c7e:	1ae8      	subs	r0, r5, r3
 8022c80:	b94a      	cbnz	r2, 8022c96 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2c2>
 8022c82:	b2b4      	uxth	r4, r6
 8022c84:	f1a8 0102 	sub.w	r1, r8, #2
 8022c88:	461a      	mov	r2, r3
 8022c8a:	2a00      	cmp	r2, #0
 8022c8c:	dc32      	bgt.n	8022cf4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x320>
 8022c8e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022c92:	4605      	mov	r5, r0
 8022c94:	e7b2      	b.n	8022bfc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022c96:	46aa      	mov	sl, r5
 8022c98:	4605      	mov	r5, r0
 8022c9a:	2400      	movs	r4, #0
 8022c9c:	4639      	mov	r1, r7
 8022c9e:	9404      	str	r4, [sp, #16]
 8022ca0:	f817 2b02 	ldrb.w	r2, [r7], #2
 8022ca4:	7849      	ldrb	r1, [r1, #1]
 8022ca6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022caa:	f002 011f 	and.w	r1, r2, #31
 8022cae:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 8022cb2:	ea4f 2ed2 	mov.w	lr, r2, lsr #11
 8022cb6:	4616      	mov	r6, r2
 8022cb8:	4608      	mov	r0, r1
 8022cba:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8022cbe:	2103      	movs	r1, #3
 8022cc0:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8022cc4:	2107      	movs	r1, #7
 8022cc6:	fb11 cc00 	smlabb	ip, r1, r0, ip
 8022cca:	9901      	ldr	r1, [sp, #4]
 8022ccc:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8022cd0:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 8022cd4:	9904      	ldr	r1, [sp, #16]
 8022cd6:	428b      	cmp	r3, r1
 8022cd8:	f8ac 2004 	strh.w	r2, [ip, #4]
 8022cdc:	4639      	mov	r1, r7
 8022cde:	bfc4      	itt	gt
 8022ce0:	f828 2014 	strhgt.w	r2, [r8, r4, lsl #1]
 8022ce4:	3401      	addgt	r4, #1
 8022ce6:	9a04      	ldr	r2, [sp, #16]
 8022ce8:	3201      	adds	r2, #1
 8022cea:	4552      	cmp	r2, sl
 8022cec:	9204      	str	r2, [sp, #16]
 8022cee:	dbd7      	blt.n	8022ca0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2cc>
 8022cf0:	2300      	movs	r3, #0
 8022cf2:	e775      	b.n	8022be0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x20c>
 8022cf4:	f821 4f02 	strh.w	r4, [r1, #2]!
 8022cf8:	3a01      	subs	r2, #1
 8022cfa:	e7c6      	b.n	8022c8a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2b6>
 8022cfc:	f8dd 9000 	ldr.w	r9, [sp]
 8022d00:	4657      	mov	r7, sl
 8022d02:	4625      	mov	r5, r4
 8022d04:	e77a      	b.n	8022bfc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022d06:	443c      	add	r4, r7
 8022d08:	4657      	mov	r7, sl
 8022d0a:	e777      	b.n	8022bfc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8022d0c:	2a01      	cmp	r2, #1
 8022d0e:	d139      	bne.n	8022d84 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3b0>
 8022d10:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8022d14:	f003 0203 	and.w	r2, r3, #3
 8022d18:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8022d1c:	3902      	subs	r1, #2
 8022d1e:	3802      	subs	r0, #2
 8022d20:	4411      	add	r1, r2
 8022d22:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8022d26:	f001 011f 	and.w	r1, r1, #31
 8022d2a:	3a02      	subs	r2, #2
 8022d2c:	f361 0604 	bfi	r6, r1, #0, #5
 8022d30:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8022d34:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8022d38:	f360 164a 	bfi	r6, r0, #5, #6
 8022d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022d40:	eb02 22d6 	add.w	r2, r2, r6, lsr #11
 8022d44:	f002 031f 	and.w	r3, r2, #31
 8022d48:	2203      	movs	r2, #3
 8022d4a:	f363 26cf 	bfi	r6, r3, #11, #5
 8022d4e:	fb12 0303 	smlabb	r3, r2, r3, r0
 8022d52:	2207      	movs	r2, #7
 8022d54:	fb12 3301 	smlabb	r3, r2, r1, r3
 8022d58:	9a01      	ldr	r2, [sp, #4]
 8022d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022d5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022d62:	809e      	strh	r6, [r3, #4]
 8022d64:	e75a      	b.n	8022c1c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x248>
 8022d66:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
 8022d6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8022d6e:	3401      	adds	r4, #1
 8022d70:	e7ca      	b.n	8022d08 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x334>
 8022d72:	bf00      	nop
 8022d74:	200122c4 	.word	0x200122c4
 8022d78:	200122be 	.word	0x200122be
 8022d7c:	20000100 	.word	0x20000100
 8022d80:	20000200 	.word	0x20000200
 8022d84:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8022d88:	464f      	mov	r7, r9
 8022d8a:	45a9      	cmp	r9, r5
 8022d8c:	462b      	mov	r3, r5
 8022d8e:	bfa8      	it	ge
 8022d90:	462f      	movge	r7, r5
 8022d92:	2a02      	cmp	r2, #2
 8022d94:	f47f af47 	bne.w	8022c26 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x252>
 8022d98:	19e3      	adds	r3, r4, r7
 8022d9a:	2b40      	cmp	r3, #64	@ 0x40
 8022d9c:	dd13      	ble.n	8022dc6 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f2>
 8022d9e:	4640      	mov	r0, r8
 8022da0:	0061      	lsls	r1, r4, #1
 8022da2:	f7f0 f951 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 8022da6:	4641      	mov	r1, r8
 8022da8:	9b06      	ldr	r3, [sp, #24]
 8022daa:	b222      	sxth	r2, r4
 8022dac:	4658      	mov	r0, fp
 8022dae:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8022db2:	f7f0 f9bb 	bl	801312c <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>
 8022db6:	4b46      	ldr	r3, [pc, #280]	@ (8022ed0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4fc>)
 8022db8:	2400      	movs	r4, #0
 8022dba:	4598      	cmp	r8, r3
 8022dbc:	bf0c      	ite	eq
 8022dbe:	f8df 811c 	ldreq.w	r8, [pc, #284]	@ 8022edc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8022dc2:	f8df 810c 	ldrne.w	r8, [pc, #268]	@ 8022ed0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4fc>
 8022dc6:	4652      	mov	r2, sl
 8022dc8:	2100      	movs	r1, #0
 8022dca:	42a9      	cmp	r1, r5
 8022dcc:	da27      	bge.n	8022e1e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x44a>
 8022dce:	4694      	mov	ip, r2
 8022dd0:	42b9      	cmp	r1, r7
 8022dd2:	f101 0101 	add.w	r1, r1, #1
 8022dd6:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8022dda:	7852      	ldrb	r2, [r2, #1]
 8022ddc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022de0:	f003 021f 	and.w	r2, r3, #31
 8022de4:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8022de8:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8022dec:	461e      	mov	r6, r3
 8022dee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022df0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022df4:	f04f 0203 	mov.w	r2, #3
 8022df8:	fb12 0e0e 	smlabb	lr, r2, lr, r0
 8022dfc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022dfe:	f04f 0207 	mov.w	r2, #7
 8022e02:	fb12 e200 	smlabb	r2, r2, r0, lr
 8022e06:	9801      	ldr	r0, [sp, #4]
 8022e08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022e0c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022e10:	8093      	strh	r3, [r2, #4]
 8022e12:	4662      	mov	r2, ip
 8022e14:	bfbc      	itt	lt
 8022e16:	f828 3014 	strhlt.w	r3, [r8, r4, lsl #1]
 8022e1a:	3401      	addlt	r4, #1
 8022e1c:	e7d5      	b.n	8022dca <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f6>
 8022e1e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8022e22:	eba9 0907 	sub.w	r9, r9, r7
 8022e26:	1bed      	subs	r5, r5, r7
 8022e28:	e76e      	b.n	8022d08 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x334>
 8022e2a:	b15c      	cbz	r4, 8022e44 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x470>
 8022e2c:	0061      	lsls	r1, r4, #1
 8022e2e:	4640      	mov	r0, r8
 8022e30:	f7f0 f90a 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 8022e34:	4658      	mov	r0, fp
 8022e36:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8022e3a:	9b06      	ldr	r3, [sp, #24]
 8022e3c:	b222      	sxth	r2, r4
 8022e3e:	4641      	mov	r1, r8
 8022e40:	f7f0 f974 	bl	801312c <_ZN8touchgfx5paint8argb888814lineFromRGB565EPhPKtsh>
 8022e44:	4b23      	ldr	r3, [pc, #140]	@ (8022ed4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x500>)
 8022e46:	9a00      	ldr	r2, [sp, #0]
 8022e48:	881b      	ldrh	r3, [r3, #0]
 8022e4a:	1a9b      	subs	r3, r3, r2
 8022e4c:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 8022e50:	9b05      	ldr	r3, [sp, #20]
 8022e52:	3301      	adds	r3, #1
 8022e54:	9305      	str	r3, [sp, #20]
 8022e56:	9a05      	ldr	r2, [sp, #20]
 8022e58:	9b02      	ldr	r3, [sp, #8]
 8022e5a:	4293      	cmp	r3, r2
 8022e5c:	d11e      	bne.n	8022e9c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4c8>
 8022e5e:	9b03      	ldr	r3, [sp, #12]
 8022e60:	2100      	movs	r1, #0
 8022e62:	9a03      	ldr	r2, [sp, #12]
 8022e64:	f04f 0600 	mov.w	r6, #0
 8022e68:	f103 0901 	add.w	r9, r3, #1
 8022e6c:	9b07      	ldr	r3, [sp, #28]
 8022e6e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8022e72:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8022e76:	2280      	movs	r2, #128	@ 0x80
 8022e78:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8022e7c:	9b08      	ldr	r3, [sp, #32]
 8022e7e:	ba3f      	rev	r7, r7
 8022e80:	1b64      	subs	r4, r4, r5
 8022e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022e84:	441f      	add	r7, r3
 8022e86:	f00b f8d1 	bl	802e02c <memset>
 8022e8a:	b2a4      	uxth	r4, r4
 8022e8c:	2300      	movs	r3, #0
 8022e8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8022e92:	9305      	str	r3, [sp, #20]
 8022e94:	f7f0 f8c0 	bl	8013018 <_ZN8touchgfx5paint8tearDownEv>
 8022e98:	46ba      	mov	sl, r7
 8022e9a:	e622      	b.n	8022ae2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x10e>
 8022e9c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
 8022ea0:	9b00      	ldr	r3, [sp, #0]
 8022ea2:	1ae4      	subs	r4, r4, r3
 8022ea4:	1b64      	subs	r4, r4, r5
 8022ea6:	b2a4      	uxth	r4, r4
 8022ea8:	e7f4      	b.n	8022e94 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4c0>
 8022eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8022ed8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x504>)
 8022eac:	6818      	ldr	r0, [r3, #0]
 8022eae:	6803      	ldr	r3, [r0, #0]
 8022eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022eb2:	4798      	blx	r3
 8022eb4:	b011      	add	sp, #68	@ 0x44
 8022eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eba:	9b00      	ldr	r3, [sp, #0]
 8022ebc:	46aa      	mov	sl, r5
 8022ebe:	9a00      	ldr	r2, [sp, #0]
 8022ec0:	42ab      	cmp	r3, r5
 8022ec2:	bfa8      	it	ge
 8022ec4:	462b      	movge	r3, r5
 8022ec6:	eba2 0903 	sub.w	r9, r2, r3
 8022eca:	1aed      	subs	r5, r5, r3
 8022ecc:	e6e5      	b.n	8022c9a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x2c6>
 8022ece:	bf00      	nop
 8022ed0:	20000100 	.word	0x20000100
 8022ed4:	200122be 	.word	0x200122be
 8022ed8:	200122c4 	.word	0x200122c4
 8022edc:	20000200 	.word	0x20000200

08022ee0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8022ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ee4:	b093      	sub	sp, #76	@ 0x4c
 8022ee6:	4616      	mov	r6, r2
 8022ee8:	4682      	mov	sl, r0
 8022eea:	460c      	mov	r4, r1
 8022eec:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8022ef0:	9208      	str	r2, [sp, #32]
 8022ef2:	2a00      	cmp	r2, #0
 8022ef4:	f000 82e9 	beq.w	80234ca <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5ea>
 8022ef8:	6830      	ldr	r0, [r6, #0]
 8022efa:	ad0e      	add	r5, sp, #56	@ 0x38
 8022efc:	6871      	ldr	r1, [r6, #4]
 8022efe:	c503      	stmia	r5!, {r0, r1}
 8022f00:	6818      	ldr	r0, [r3, #0]
 8022f02:	ad10      	add	r5, sp, #64	@ 0x40
 8022f04:	6859      	ldr	r1, [r3, #4]
 8022f06:	c503      	stmia	r5!, {r0, r1}
 8022f08:	a80e      	add	r0, sp, #56	@ 0x38
 8022f0a:	f7f7 ff71 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f0e:	4631      	mov	r1, r6
 8022f10:	a810      	add	r0, sp, #64	@ 0x40
 8022f12:	f7f7 ff95 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f16:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022f1a:	7825      	ldrb	r5, [r4, #0]
 8022f1c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022f20:	7860      	ldrb	r0, [r4, #1]
 8022f22:	bfdb      	ittet	le
 8022f24:	b293      	uxthle	r3, r2
 8022f26:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022f2a:	2301      	movgt	r3, #1
 8022f2c:	fb91 f3f3 	sdivle	r3, r1, r3
 8022f30:	9303      	str	r3, [sp, #12]
 8022f32:	2d05      	cmp	r5, #5
 8022f34:	9903      	ldr	r1, [sp, #12]
 8022f36:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8022f3a:	440b      	add	r3, r1
 8022f3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8022f40:	fb93 f3f1 	sdiv	r3, r3, r1
 8022f44:	f103 33ff 	add.w	r3, r3, #4294967295
 8022f48:	78a1      	ldrb	r1, [r4, #2]
 8022f4a:	b29b      	uxth	r3, r3
 8022f4c:	f040 8094 	bne.w	8023078 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x198>
 8022f50:	2806      	cmp	r0, #6
 8022f52:	f040 8091 	bne.w	8023078 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x198>
 8022f56:	2905      	cmp	r1, #5
 8022f58:	f040 808e 	bne.w	8023078 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x198>
 8022f5c:	2102      	movs	r1, #2
 8022f5e:	9102      	str	r1, [sp, #8]
 8022f60:	2103      	movs	r1, #3
 8022f62:	9101      	str	r1, [sp, #4]
 8022f64:	f104 0108 	add.w	r1, r4, #8
 8022f68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022f6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8022f6e:	9903      	ldr	r1, [sp, #12]
 8022f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f72:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022f76:	fb93 f0f1 	sdiv	r0, r3, r1
 8022f7a:	b284      	uxth	r4, r0
 8022f7c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8022f80:	b280      	uxth	r0, r0
 8022f82:	9405      	str	r4, [sp, #20]
 8022f84:	9d05      	ldr	r5, [sp, #20]
 8022f86:	9c03      	ldr	r4, [sp, #12]
 8022f88:	fb05 3514 	mls	r5, r5, r4, r3
 8022f8c:	fb15 f502 	smulbb	r5, r5, r2
 8022f90:	440d      	add	r5, r1
 8022f92:	b2ad      	uxth	r5, r5
 8022f94:	2800      	cmp	r0, #0
 8022f96:	d072      	beq.n	802307e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x19e>
 8022f98:	1e42      	subs	r2, r0, #1
 8022f9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f9c:	f850 b022 	ldr.w	fp, [r0, r2, lsl #2]
 8022fa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022fa2:	fa9b fb8b 	rev.w	fp, fp
 8022fa6:	4493      	add	fp, r2
 8022fa8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8022fac:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	@ 0x46
 8022fb0:	4411      	add	r1, r2
 8022fb2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022fb6:	f8df 9338 	ldr.w	r9, [pc, #824]	@ 80232f0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x410>
 8022fba:	4413      	add	r3, r2
 8022fbc:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8022fc0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022fc4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8022fc8:	9304      	str	r3, [sp, #16]
 8022fca:	4bc7      	ldr	r3, [pc, #796]	@ (80232e8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>)
 8022fcc:	6818      	ldr	r0, [r3, #0]
 8022fce:	6803      	ldr	r3, [r0, #0]
 8022fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022fd2:	4798      	blx	r3
 8022fd4:	4bc5      	ldr	r3, [pc, #788]	@ (80232ec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x40c>)
 8022fd6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8022fda:	881b      	ldrh	r3, [r3, #0]
 8022fdc:	f9bd 7042 	ldrsh.w	r7, [sp, #66]	@ 0x42
 8022fe0:	fb03 2707 	mla	r7, r3, r7, r2
 8022fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022fe8:	4363      	muls	r3, r4
 8022fea:	2400      	movs	r4, #0
 8022fec:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8022ff0:	4621      	mov	r1, r4
 8022ff2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8022ff6:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ff8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022ffc:	fb95 f3f3 	sdiv	r3, r5, r3
 8023000:	9307      	str	r3, [sp, #28]
 8023002:	f10a 0304 	add.w	r3, sl, #4
 8023006:	4618      	mov	r0, r3
 8023008:	930b      	str	r3, [sp, #44]	@ 0x2c
 802300a:	f00b f80f 	bl	802e02c <memset>
 802300e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023010:	42bb      	cmp	r3, r7
 8023012:	f240 8255 	bls.w	80234c0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5e0>
 8023016:	2107      	movs	r1, #7
 8023018:	200b      	movs	r0, #11
 802301a:	2d00      	cmp	r5, #0
 802301c:	f000 8132 	beq.w	8023284 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a4>
 8023020:	f89b 3000 	ldrb.w	r3, [fp]
 8023024:	b2db      	uxtb	r3, r3
 8023026:	2bfe      	cmp	r3, #254	@ 0xfe
 8023028:	d12c      	bne.n	8023084 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1a4>
 802302a:	f89b e001 	ldrb.w	lr, [fp, #1]
 802302e:	2203      	movs	r2, #3
 8023030:	f89b c002 	ldrb.w	ip, [fp, #2]
 8023034:	3d01      	subs	r5, #1
 8023036:	fa5f fe8e 	uxtb.w	lr, lr
 802303a:	f89b 8003 	ldrb.w	r8, [fp, #3]
 802303e:	fa5f fc8c 	uxtb.w	ip, ip
 8023042:	f10b 0604 	add.w	r6, fp, #4
 8023046:	f36e 0407 	bfi	r4, lr, #0, #8
 802304a:	fa5f f888 	uxtb.w	r8, r8
 802304e:	b2ad      	uxth	r5, r5
 8023050:	f36c 240f 	bfi	r4, ip, #8, #8
 8023054:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8023058:	fb12 cc08 	smlabb	ip, r2, r8, ip
 802305c:	f368 4417 	bfi	r4, r8, #16, #8
 8023060:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8023064:	0e23      	lsrs	r3, r4, #24
 8023066:	fb10 c303 	smlabb	r3, r0, r3, ip
 802306a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802306e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023072:	605c      	str	r4, [r3, #4]
 8023074:	46b3      	mov	fp, r6
 8023076:	e7d0      	b.n	802301a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x13a>
 8023078:	2100      	movs	r1, #0
 802307a:	9102      	str	r1, [sp, #8]
 802307c:	e771      	b.n	8022f62 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x82>
 802307e:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8023082:	e791      	b.n	8022fa8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xc8>
 8023084:	2bff      	cmp	r3, #255	@ 0xff
 8023086:	d12a      	bne.n	80230de <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1fe>
 8023088:	f89b c001 	ldrb.w	ip, [fp, #1]
 802308c:	2203      	movs	r2, #3
 802308e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023092:	3d01      	subs	r5, #1
 8023094:	fa5f fc8c 	uxtb.w	ip, ip
 8023098:	f89b e003 	ldrb.w	lr, [fp, #3]
 802309c:	b2db      	uxtb	r3, r3
 802309e:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80230a2:	f36c 0407 	bfi	r4, ip, #0, #8
 80230a6:	fa5f fe8e 	uxtb.w	lr, lr
 80230aa:	fa5f f888 	uxtb.w	r8, r8
 80230ae:	f10b 0605 	add.w	r6, fp, #5
 80230b2:	f363 240f 	bfi	r4, r3, #8, #8
 80230b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80230ba:	b2ad      	uxth	r5, r5
 80230bc:	fb12 330e 	smlabb	r3, r2, lr, r3
 80230c0:	f36e 4417 	bfi	r4, lr, #16, #8
 80230c4:	fb11 330c 	smlabb	r3, r1, ip, r3
 80230c8:	f368 641f 	bfi	r4, r8, #24, #8
 80230cc:	fb10 3808 	smlabb	r8, r0, r8, r3
 80230d0:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80230d4:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
 80230d8:	f8c8 4004 	str.w	r4, [r8, #4]
 80230dc:	e7ca      	b.n	8023074 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x194>
 80230de:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 80230e2:	f10b 0601 	add.w	r6, fp, #1
 80230e6:	d107      	bne.n	80230f8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x218>
 80230e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80230ec:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80230f0:	685c      	ldr	r4, [r3, #4]
 80230f2:	3d01      	subs	r5, #1
 80230f4:	b2ad      	uxth	r5, r5
 80230f6:	e7bd      	b.n	8023074 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x194>
 80230f8:	f1bc 0f01 	cmp.w	ip, #1
 80230fc:	d135      	bne.n	802316a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x28a>
 80230fe:	f003 0e03 	and.w	lr, r3, #3
 8023102:	9a01      	ldr	r2, [sp, #4]
 8023104:	f3c3 0c81 	ubfx	ip, r3, #2, #2
 8023108:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802310c:	f1ae 0e02 	sub.w	lr, lr, #2
 8023110:	f1ac 0c02 	sub.w	ip, ip, #2
 8023114:	3b02      	subs	r3, #2
 8023116:	fa0e fe02 	lsl.w	lr, lr, r2
 802311a:	9a02      	ldr	r2, [sp, #8]
 802311c:	44a6      	add	lr, r4
 802311e:	fa0c fc02 	lsl.w	ip, ip, r2
 8023122:	9a01      	ldr	r2, [sp, #4]
 8023124:	fa5f fe8e 	uxtb.w	lr, lr
 8023128:	4093      	lsls	r3, r2
 802312a:	2203      	movs	r2, #3
 802312c:	f36e 0407 	bfi	r4, lr, #0, #8
 8023130:	eb0c 2c14 	add.w	ip, ip, r4, lsr #8
 8023134:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8023138:	f36c 240f 	bfi	r4, ip, #8, #8
 802313c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8023140:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8023144:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8023148:	fb12 cc03 	smlabb	ip, r2, r3, ip
 802314c:	f363 4417 	bfi	r4, r3, #16, #8
 8023150:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8023154:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8023158:	fb10 c808 	smlabb	r8, r0, r8, ip
 802315c:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8023160:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
 8023164:	f8c8 4004 	str.w	r4, [r8, #4]
 8023168:	e7c3      	b.n	80230f2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x212>
 802316a:	f1bc 0f02 	cmp.w	ip, #2
 802316e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023172:	d135      	bne.n	80231e0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x300>
 8023174:	f89b 8001 	ldrb.w	r8, [fp, #1]
 8023178:	3b20      	subs	r3, #32
 802317a:	9a01      	ldr	r2, [sp, #4]
 802317c:	f10b 0602 	add.w	r6, fp, #2
 8023180:	fa5f f888 	uxtb.w	r8, r8
 8023184:	f008 0c0f 	and.w	ip, r8, #15
 8023188:	ea4f 1828 	mov.w	r8, r8, asr #4
 802318c:	f1ac 0c08 	sub.w	ip, ip, #8
 8023190:	f1a8 0808 	sub.w	r8, r8, #8
 8023194:	449c      	add	ip, r3
 8023196:	fa0c fc02 	lsl.w	ip, ip, r2
 802319a:	9a02      	ldr	r2, [sp, #8]
 802319c:	44a4      	add	ip, r4
 802319e:	fa03 fe02 	lsl.w	lr, r3, r2
 80231a2:	4443      	add	r3, r8
 80231a4:	9a01      	ldr	r2, [sp, #4]
 80231a6:	fa5f fc8c 	uxtb.w	ip, ip
 80231aa:	4093      	lsls	r3, r2
 80231ac:	2203      	movs	r2, #3
 80231ae:	f36c 0407 	bfi	r4, ip, #0, #8
 80231b2:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80231b6:	f00e 0eff 	and.w	lr, lr, #255	@ 0xff
 80231ba:	f36e 240f 	bfi	r4, lr, #8, #8
 80231be:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80231c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80231c6:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80231ca:	fb12 ee03 	smlabb	lr, r2, r3, lr
 80231ce:	f363 4417 	bfi	r4, r3, #16, #8
 80231d2:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 80231d6:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80231da:	fb10 e808 	smlabb	r8, r0, r8, lr
 80231de:	e7bd      	b.n	802315c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x27c>
 80231e0:	3301      	adds	r3, #1
 80231e2:	42ab      	cmp	r3, r5
 80231e4:	dd30      	ble.n	8023248 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 80231e6:	1b5d      	subs	r5, r3, r5
 80231e8:	2d00      	cmp	r5, #0
 80231ea:	dc2f      	bgt.n	802324c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x36c>
 80231ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80231f0:	2200      	movs	r2, #0
 80231f2:	f1b8 0f00 	cmp.w	r8, #0
 80231f6:	f340 8121 	ble.w	802343c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55c>
 80231fa:	7833      	ldrb	r3, [r6, #0]
 80231fc:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8023200:	b2db      	uxtb	r3, r3
 8023202:	2bfe      	cmp	r3, #254	@ 0xfe
 8023204:	d142      	bne.n	802328c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3ac>
 8023206:	7870      	ldrb	r0, [r6, #1]
 8023208:	1d33      	adds	r3, r6, #4
 802320a:	78b1      	ldrb	r1, [r6, #2]
 802320c:	f04f 0c03 	mov.w	ip, #3
 8023210:	b2c0      	uxtb	r0, r0
 8023212:	9306      	str	r3, [sp, #24]
 8023214:	b2c9      	uxtb	r1, r1
 8023216:	78f3      	ldrb	r3, [r6, #3]
 8023218:	f360 0407 	bfi	r4, r0, #0, #8
 802321c:	b2db      	uxtb	r3, r3
 802321e:	f361 240f 	bfi	r4, r1, #8, #8
 8023222:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8023226:	fb1c 1103 	smlabb	r1, ip, r3, r1
 802322a:	f363 4417 	bfi	r4, r3, #16, #8
 802322e:	2307      	movs	r3, #7
 8023230:	0e26      	lsrs	r6, r4, #24
 8023232:	fb13 1100 	smlabb	r1, r3, r0, r1
 8023236:	230b      	movs	r3, #11
 8023238:	fb13 1306 	smlabb	r3, r3, r6, r1
 802323c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023240:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023244:	605c      	str	r4, [r3, #4]
 8023246:	e049      	b.n	80232dc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>
 8023248:	1aed      	subs	r5, r5, r3
 802324a:	e753      	b.n	80230f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x214>
 802324c:	9b04      	ldr	r3, [sp, #16]
 802324e:	42ab      	cmp	r3, r5
 8023250:	bfa8      	it	ge
 8023252:	462b      	movge	r3, r5
 8023254:	469b      	mov	fp, r3
 8023256:	9b04      	ldr	r3, [sp, #16]
 8023258:	eba3 080b 	sub.w	r8, r3, fp
 802325c:	0e23      	lsrs	r3, r4, #24
 802325e:	eba5 050b 	sub.w	r5, r5, fp
 8023262:	d00c      	beq.n	802327e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x39e>
 8023264:	9a08      	ldr	r2, [sp, #32]
 8023266:	fa0f f18b 	sxth.w	r1, fp
 802326a:	4638      	mov	r0, r7
 802326c:	4353      	muls	r3, r2
 802326e:	1c5a      	adds	r2, r3, #1
 8023270:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8023274:	4622      	mov	r2, r4
 8023276:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802327a:	f7ef feff 	bl	801307c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>
 802327e:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 8023282:	e7b5      	b.n	80231f0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8023284:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023288:	465e      	mov	r6, fp
 802328a:	e7b1      	b.n	80231f0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 802328c:	2bff      	cmp	r3, #255	@ 0xff
 802328e:	d11c      	bne.n	80232ca <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3ea>
 8023290:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023294:	1d73      	adds	r3, r6, #5
 8023296:	78b1      	ldrb	r1, [r6, #2]
 8023298:	fa5f fc8c 	uxtb.w	ip, ip
 802329c:	78f0      	ldrb	r0, [r6, #3]
 802329e:	b2c9      	uxtb	r1, r1
 80232a0:	9306      	str	r3, [sp, #24]
 80232a2:	f36c 0407 	bfi	r4, ip, #0, #8
 80232a6:	7933      	ldrb	r3, [r6, #4]
 80232a8:	b2c0      	uxtb	r0, r0
 80232aa:	f361 240f 	bfi	r4, r1, #8, #8
 80232ae:	b2de      	uxtb	r6, r3
 80232b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80232b4:	2303      	movs	r3, #3
 80232b6:	f360 4417 	bfi	r4, r0, #16, #8
 80232ba:	fb13 1100 	smlabb	r1, r3, r0, r1
 80232be:	2307      	movs	r3, #7
 80232c0:	f366 641f 	bfi	r4, r6, #24, #8
 80232c4:	fb13 110c 	smlabb	r1, r3, ip, r1
 80232c8:	e7b5      	b.n	8023236 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 80232ca:	1c71      	adds	r1, r6, #1
 80232cc:	9106      	str	r1, [sp, #24]
 80232ce:	1199      	asrs	r1, r3, #6
 80232d0:	d110      	bne.n	80232f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x414>
 80232d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80232d6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80232da:	685c      	ldr	r4, [r3, #4]
 80232dc:	2a3f      	cmp	r2, #63	@ 0x3f
 80232de:	dd48      	ble.n	8023372 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x492>
 80232e0:	2101      	movs	r1, #1
 80232e2:	460e      	mov	r6, r1
 80232e4:	e085      	b.n	80233f2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x512>
 80232e6:	bf00      	nop
 80232e8:	200122c4 	.word	0x200122c4
 80232ec:	200122be 	.word	0x200122be
 80232f0:	20000100 	.word	0x20000100
 80232f4:	2901      	cmp	r1, #1
 80232f6:	d142      	bne.n	802337e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x49e>
 80232f8:	f003 0603 	and.w	r6, r3, #3
 80232fc:	9801      	ldr	r0, [sp, #4]
 80232fe:	2a3f      	cmp	r2, #63	@ 0x3f
 8023300:	f1a6 0602 	sub.w	r6, r6, #2
 8023304:	fa06 f600 	lsl.w	r6, r6, r0
 8023308:	f3c3 0081 	ubfx	r0, r3, #2, #2
 802330c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023310:	4426      	add	r6, r4
 8023312:	f1a0 0002 	sub.w	r0, r0, #2
 8023316:	f1a3 0302 	sub.w	r3, r3, #2
 802331a:	fa5f fe86 	uxtb.w	lr, r6
 802331e:	9e02      	ldr	r6, [sp, #8]
 8023320:	f36e 0407 	bfi	r4, lr, #0, #8
 8023324:	fa00 f006 	lsl.w	r0, r0, r6
 8023328:	9e01      	ldr	r6, [sp, #4]
 802332a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802332e:	fa03 f306 	lsl.w	r3, r3, r6
 8023332:	f04f 0603 	mov.w	r6, #3
 8023336:	f000 00ff 	and.w	r0, r0, #255	@ 0xff
 802333a:	f360 240f 	bfi	r4, r0, #8, #8
 802333e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8023342:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8023346:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802334a:	fb16 0003 	smlabb	r0, r6, r3, r0
 802334e:	f363 4417 	bfi	r4, r3, #16, #8
 8023352:	f04f 0307 	mov.w	r3, #7
 8023356:	f04f 060b 	mov.w	r6, #11
 802335a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 802335e:	fb13 000e 	smlabb	r0, r3, lr, r0
 8023362:	fb16 060c 	smlabb	r6, r6, ip, r0
 8023366:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 802336a:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 802336e:	6074      	str	r4, [r6, #4]
 8023370:	dcb7      	bgt.n	80232e2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x402>
 8023372:	3201      	adds	r2, #1
 8023374:	f849 400b 	str.w	r4, [r9, fp]
 8023378:	f108 38ff 	add.w	r8, r8, #4294967295
 802337c:	e05c      	b.n	8023438 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x558>
 802337e:	2902      	cmp	r1, #2
 8023380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023384:	d130      	bne.n	80233e8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x508>
 8023386:	1cb1      	adds	r1, r6, #2
 8023388:	3b20      	subs	r3, #32
 802338a:	f04f 0c03 	mov.w	ip, #3
 802338e:	9106      	str	r1, [sp, #24]
 8023390:	7871      	ldrb	r1, [r6, #1]
 8023392:	9e01      	ldr	r6, [sp, #4]
 8023394:	b2c9      	uxtb	r1, r1
 8023396:	f001 000f 	and.w	r0, r1, #15
 802339a:	1109      	asrs	r1, r1, #4
 802339c:	3808      	subs	r0, #8
 802339e:	3908      	subs	r1, #8
 80233a0:	4418      	add	r0, r3
 80233a2:	40b0      	lsls	r0, r6
 80233a4:	9e02      	ldr	r6, [sp, #8]
 80233a6:	4420      	add	r0, r4
 80233a8:	fa03 f606 	lsl.w	r6, r3, r6
 80233ac:	440b      	add	r3, r1
 80233ae:	9901      	ldr	r1, [sp, #4]
 80233b0:	b2c0      	uxtb	r0, r0
 80233b2:	408b      	lsls	r3, r1
 80233b4:	f360 0407 	bfi	r4, r0, #0, #8
 80233b8:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80233bc:	f006 06ff 	and.w	r6, r6, #255	@ 0xff
 80233c0:	f366 240f 	bfi	r4, r6, #8, #8
 80233c4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80233c8:	eb03 4114 	add.w	r1, r3, r4, lsr #16
 80233cc:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 80233d0:	f363 4417 	bfi	r4, r3, #16, #8
 80233d4:	fb1c 6303 	smlabb	r3, ip, r3, r6
 80233d8:	2607      	movs	r6, #7
 80233da:	0e21      	lsrs	r1, r4, #24
 80233dc:	fb16 3000 	smlabb	r0, r6, r0, r3
 80233e0:	230b      	movs	r3, #11
 80233e2:	fb13 0301 	smlabb	r3, r3, r1, r0
 80233e6:	e729      	b.n	802323c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x35c>
 80233e8:	1c59      	adds	r1, r3, #1
 80233ea:	4646      	mov	r6, r8
 80233ec:	4588      	cmp	r8, r1
 80233ee:	bfa8      	it	ge
 80233f0:	460e      	movge	r6, r1
 80233f2:	1993      	adds	r3, r2, r6
 80233f4:	eba8 0806 	sub.w	r8, r8, r6
 80233f8:	1b8d      	subs	r5, r1, r6
 80233fa:	2b40      	cmp	r3, #64	@ 0x40
 80233fc:	dd14      	ble.n	8023428 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 80233fe:	4648      	mov	r0, r9
 8023400:	0091      	lsls	r1, r2, #2
 8023402:	920d      	str	r2, [sp, #52]	@ 0x34
 8023404:	f7ef fe20 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 8023408:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802340a:	4649      	mov	r1, r9
 802340c:	9b08      	ldr	r3, [sp, #32]
 802340e:	4638      	mov	r0, r7
 8023410:	b212      	sxth	r2, r2
 8023412:	445f      	add	r7, fp
 8023414:	f7ef fed8 	bl	80131c8 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 8023418:	4b2d      	ldr	r3, [pc, #180]	@ (80234d0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f0>)
 802341a:	2200      	movs	r2, #0
 802341c:	4599      	cmp	r9, r3
 802341e:	bf0c      	ite	eq
 8023420:	f8df 90b8 	ldreq.w	r9, [pc, #184]	@ 80234dc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5fc>
 8023424:	f8df 90a8 	ldrne.w	r9, [pc, #168]	@ 80234d0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f0>
 8023428:	eb09 0182 	add.w	r1, r9, r2, lsl #2
 802342c:	4633      	mov	r3, r6
 802342e:	3b01      	subs	r3, #1
 8023430:	f841 4b04 	str.w	r4, [r1], #4
 8023434:	d1fb      	bne.n	802342e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x54e>
 8023436:	4432      	add	r2, r6
 8023438:	9e06      	ldr	r6, [sp, #24]
 802343a:	e6da      	b.n	80231f2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 802343c:	b172      	cbz	r2, 802345c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 802343e:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8023442:	4648      	mov	r0, r9
 8023444:	9206      	str	r2, [sp, #24]
 8023446:	4641      	mov	r1, r8
 8023448:	f7ef fdfe 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 802344c:	9a06      	ldr	r2, [sp, #24]
 802344e:	4638      	mov	r0, r7
 8023450:	4447      	add	r7, r8
 8023452:	9b08      	ldr	r3, [sp, #32]
 8023454:	b212      	sxth	r2, r2
 8023456:	4649      	mov	r1, r9
 8023458:	f7ef feb6 	bl	80131c8 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 802345c:	4b1d      	ldr	r3, [pc, #116]	@ (80234d4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f4>)
 802345e:	9a04      	ldr	r2, [sp, #16]
 8023460:	881b      	ldrh	r3, [r3, #0]
 8023462:	1a9b      	subs	r3, r3, r2
 8023464:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8023468:	9b07      	ldr	r3, [sp, #28]
 802346a:	3301      	adds	r3, #1
 802346c:	9307      	str	r3, [sp, #28]
 802346e:	9a07      	ldr	r2, [sp, #28]
 8023470:	9b03      	ldr	r3, [sp, #12]
 8023472:	4293      	cmp	r3, r2
 8023474:	d11d      	bne.n	80234b2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5d2>
 8023476:	9b05      	ldr	r3, [sp, #20]
 8023478:	2400      	movs	r4, #0
 802347a:	9a05      	ldr	r2, [sp, #20]
 802347c:	f103 0801 	add.w	r8, r3, #1
 8023480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023482:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8023486:	4621      	mov	r1, r4
 8023488:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802348c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023492:	ba36      	rev	r6, r6
 8023494:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023496:	441e      	add	r6, r3
 8023498:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802349c:	1aed      	subs	r5, r5, r3
 802349e:	f00a fdc5 	bl	802e02c <memset>
 80234a2:	f8cd 8014 	str.w	r8, [sp, #20]
 80234a6:	b2ad      	uxth	r5, r5
 80234a8:	9407      	str	r4, [sp, #28]
 80234aa:	f7ef fdb5 	bl	8013018 <_ZN8touchgfx5paint8tearDownEv>
 80234ae:	46b3      	mov	fp, r6
 80234b0:	e5ad      	b.n	802300e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x12e>
 80234b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80234b6:	9a04      	ldr	r2, [sp, #16]
 80234b8:	1a9b      	subs	r3, r3, r2
 80234ba:	1b5d      	subs	r5, r3, r5
 80234bc:	b2ad      	uxth	r5, r5
 80234be:	e7f4      	b.n	80234aa <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5ca>
 80234c0:	4b05      	ldr	r3, [pc, #20]	@ (80234d8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x5f8>)
 80234c2:	6818      	ldr	r0, [r3, #0]
 80234c4:	6803      	ldr	r3, [r0, #0]
 80234c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80234c8:	4798      	blx	r3
 80234ca:	b013      	add	sp, #76	@ 0x4c
 80234cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234d0:	20000100 	.word	0x20000100
 80234d4:	200122be 	.word	0x200122be
 80234d8:	200122c4 	.word	0x200122c4
 80234dc:	20000200 	.word	0x20000200

080234e0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80234e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234e4:	b091      	sub	sp, #68	@ 0x44
 80234e6:	4616      	mov	r6, r2
 80234e8:	4682      	mov	sl, r0
 80234ea:	460d      	mov	r5, r1
 80234ec:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 80234f0:	9205      	str	r2, [sp, #20]
 80234f2:	2a00      	cmp	r2, #0
 80234f4:	f000 824e 	beq.w	8023994 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 80234f8:	6830      	ldr	r0, [r6, #0]
 80234fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80234fc:	6871      	ldr	r1, [r6, #4]
 80234fe:	c403      	stmia	r4!, {r0, r1}
 8023500:	6818      	ldr	r0, [r3, #0]
 8023502:	ac0e      	add	r4, sp, #56	@ 0x38
 8023504:	6859      	ldr	r1, [r3, #4]
 8023506:	c403      	stmia	r4!, {r0, r1}
 8023508:	a80c      	add	r0, sp, #48	@ 0x30
 802350a:	f7f7 fc71 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802350e:	4631      	mov	r1, r6
 8023510:	a80e      	add	r0, sp, #56	@ 0x38
 8023512:	f7f7 fc95 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023516:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 802351a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802351e:	bfdb      	ittet	le
 8023520:	b293      	uxthle	r3, r2
 8023522:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8023526:	2301      	movgt	r3, #1
 8023528:	fb91 f3f3 	sdivle	r3, r1, r3
 802352c:	9301      	str	r3, [sp, #4]
 802352e:	f105 0308 	add.w	r3, r5, #8
 8023532:	9901      	ldr	r1, [sp, #4]
 8023534:	9306      	str	r3, [sp, #24]
 8023536:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 802353a:	440b      	add	r3, r1
 802353c:	3b01      	subs	r3, #1
 802353e:	fb93 f3f1 	sdiv	r3, r3, r1
 8023542:	3b01      	subs	r3, #1
 8023544:	9906      	ldr	r1, [sp, #24]
 8023546:	b29b      	uxth	r3, r3
 8023548:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802354c:	9901      	ldr	r1, [sp, #4]
 802354e:	9307      	str	r3, [sp, #28]
 8023550:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023554:	fb93 f0f1 	sdiv	r0, r3, r1
 8023558:	b284      	uxth	r4, r0
 802355a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 802355e:	b280      	uxth	r0, r0
 8023560:	9403      	str	r4, [sp, #12]
 8023562:	9d03      	ldr	r5, [sp, #12]
 8023564:	9c01      	ldr	r4, [sp, #4]
 8023566:	fb05 3514 	mls	r5, r5, r4, r3
 802356a:	fb15 f502 	smulbb	r5, r5, r2
 802356e:	440d      	add	r5, r1
 8023570:	b2ad      	uxth	r5, r5
 8023572:	2800      	cmp	r0, #0
 8023574:	d06d      	beq.n	8023652 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8023576:	1e42      	subs	r2, r0, #1
 8023578:	9806      	ldr	r0, [sp, #24]
 802357a:	f850 b022 	ldr.w	fp, [r0, r2, lsl #2]
 802357e:	9a07      	ldr	r2, [sp, #28]
 8023580:	fa9b fb8b 	rev.w	fp, fp
 8023584:	4493      	add	fp, r2
 8023586:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 802358a:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	@ 0x3e
 802358e:	4411      	add	r1, r2
 8023590:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8023594:	f8df 835c 	ldr.w	r8, [pc, #860]	@ 80238f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8023598:	4413      	add	r3, r2
 802359a:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 802359e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80235a2:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80235a6:	9302      	str	r3, [sp, #8]
 80235a8:	4bd0      	ldr	r3, [pc, #832]	@ (80238ec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80235aa:	6818      	ldr	r0, [r3, #0]
 80235ac:	6803      	ldr	r3, [r0, #0]
 80235ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80235b0:	4798      	blx	r3
 80235b2:	4bcf      	ldr	r3, [pc, #828]	@ (80238f0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>)
 80235b4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80235b8:	2100      	movs	r1, #0
 80235ba:	881b      	ldrh	r3, [r3, #0]
 80235bc:	f9bd 703a 	ldrsh.w	r7, [sp, #58]	@ 0x3a
 80235c0:	fb03 2707 	mla	r7, r3, r7, r2
 80235c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80235c8:	4363      	muls	r3, r4
 80235ca:	f04f 447f 	mov.w	r4, #4278190080	@ 0xff000000
 80235ce:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80235d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80235d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80235d8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80235dc:	fb95 f3f3 	sdiv	r3, r5, r3
 80235e0:	9304      	str	r3, [sp, #16]
 80235e2:	f10a 0304 	add.w	r3, sl, #4
 80235e6:	4618      	mov	r0, r3
 80235e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80235ea:	f00a fd1f 	bl	802e02c <memset>
 80235ee:	23ff      	movs	r3, #255	@ 0xff
 80235f0:	f88a 3007 	strb.w	r3, [sl, #7]
 80235f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80235f6:	42bb      	cmp	r3, r7
 80235f8:	f240 81c7 	bls.w	802398a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4aa>
 80235fc:	2003      	movs	r0, #3
 80235fe:	f04f 0c07 	mov.w	ip, #7
 8023602:	2d00      	cmp	r5, #0
 8023604:	f000 80c0 	beq.w	8023788 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2a8>
 8023608:	f89b 3000 	ldrb.w	r3, [fp]
 802360c:	b2db      	uxtb	r3, r3
 802360e:	2bfe      	cmp	r3, #254	@ 0xfe
 8023610:	d122      	bne.n	8023658 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x178>
 8023612:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8023616:	3d01      	subs	r5, #1
 8023618:	f89b 2002 	ldrb.w	r2, [fp, #2]
 802361c:	f10b 0604 	add.w	r6, fp, #4
 8023620:	b2db      	uxtb	r3, r3
 8023622:	f89b 1003 	ldrb.w	r1, [fp, #3]
 8023626:	b2d2      	uxtb	r2, r2
 8023628:	f363 0407 	bfi	r4, r3, #0, #8
 802362c:	b2c9      	uxtb	r1, r1
 802362e:	b2ad      	uxth	r5, r5
 8023630:	f362 240f 	bfi	r4, r2, #8, #8
 8023634:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8023638:	fb10 2201 	smlabb	r2, r0, r1, r2
 802363c:	f361 4417 	bfi	r4, r1, #16, #8
 8023640:	fb1c 2303 	smlabb	r3, ip, r3, r2
 8023644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023648:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 802364c:	605c      	str	r4, [r3, #4]
 802364e:	46b3      	mov	fp, r6
 8023650:	e7d7      	b.n	8023602 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x122>
 8023652:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023656:	e796      	b.n	8023586 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa6>
 8023658:	119a      	asrs	r2, r3, #6
 802365a:	f10b 0601 	add.w	r6, fp, #1
 802365e:	d107      	bne.n	8023670 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x190>
 8023660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023664:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023668:	685c      	ldr	r4, [r3, #4]
 802366a:	3d01      	subs	r5, #1
 802366c:	b2ad      	uxth	r5, r5
 802366e:	e7ee      	b.n	802364e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16e>
 8023670:	2a01      	cmp	r2, #1
 8023672:	d124      	bne.n	80236be <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1de>
 8023674:	f003 0103 	and.w	r1, r3, #3
 8023678:	1ea2      	subs	r2, r4, #2
 802367a:	440a      	add	r2, r1
 802367c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8023680:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023684:	b2d2      	uxtb	r2, r2
 8023686:	3902      	subs	r1, #2
 8023688:	3b02      	subs	r3, #2
 802368a:	f362 0407 	bfi	r4, r2, #0, #8
 802368e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8023692:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8023696:	f361 240f 	bfi	r4, r1, #8, #8
 802369a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802369e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80236a2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80236a6:	fb10 1103 	smlabb	r1, r0, r3, r1
 80236aa:	f363 4417 	bfi	r4, r3, #16, #8
 80236ae:	fb1c 1202 	smlabb	r2, ip, r2, r1
 80236b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80236b6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80236ba:	6054      	str	r4, [r2, #4]
 80236bc:	e7d5      	b.n	802366a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18a>
 80236be:	2a02      	cmp	r2, #2
 80236c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80236c4:	d12b      	bne.n	802371e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 80236c6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80236ca:	f1a3 0e20 	sub.w	lr, r3, #32
 80236ce:	f10b 0602 	add.w	r6, fp, #2
 80236d2:	b2d2      	uxtb	r2, r2
 80236d4:	f002 010f 	and.w	r1, r2, #15
 80236d8:	1112      	asrs	r2, r2, #4
 80236da:	3908      	subs	r1, #8
 80236dc:	3a08      	subs	r2, #8
 80236de:	4471      	add	r1, lr
 80236e0:	4496      	add	lr, r2
 80236e2:	4421      	add	r1, r4
 80236e4:	b2c9      	uxtb	r1, r1
 80236e6:	f361 0407 	bfi	r4, r1, #0, #8
 80236ea:	f3c4 2907 	ubfx	r9, r4, #8, #8
 80236ee:	f1a9 0920 	sub.w	r9, r9, #32
 80236f2:	444b      	add	r3, r9
 80236f4:	b2db      	uxtb	r3, r3
 80236f6:	f363 240f 	bfi	r4, r3, #8, #8
 80236fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80236fe:	eb0e 4e14 	add.w	lr, lr, r4, lsr #16
 8023702:	f00e 0eff 	and.w	lr, lr, #255	@ 0xff
 8023706:	fb10 330e 	smlabb	r3, r0, lr, r3
 802370a:	f36e 4417 	bfi	r4, lr, #16, #8
 802370e:	fb1c 3101 	smlabb	r1, ip, r1, r3
 8023712:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8023716:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 802371a:	604c      	str	r4, [r1, #4]
 802371c:	e7a5      	b.n	802366a <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18a>
 802371e:	3301      	adds	r3, #1
 8023720:	42ab      	cmp	r3, r5
 8023722:	dd1b      	ble.n	802375c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x27c>
 8023724:	1b5d      	subs	r5, r3, r5
 8023726:	2d00      	cmp	r5, #0
 8023728:	dc1a      	bgt.n	8023760 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x280>
 802372a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 802372e:	2200      	movs	r2, #0
 8023730:	f1b9 0f00 	cmp.w	r9, #0
 8023734:	f340 80e2 	ble.w	80238fc <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x41c>
 8023738:	1c73      	adds	r3, r6, #1
 802373a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 802373e:	9308      	str	r3, [sp, #32]
 8023740:	7833      	ldrb	r3, [r6, #0]
 8023742:	b2db      	uxtb	r3, r3
 8023744:	1198      	asrs	r0, r3, #6
 8023746:	d123      	bne.n	8023790 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b0>
 8023748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802374c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023750:	685c      	ldr	r4, [r3, #4]
 8023752:	2a3f      	cmp	r2, #63	@ 0x3f
 8023754:	dd4a      	ble.n	80237ec <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x30c>
 8023756:	2001      	movs	r0, #1
 8023758:	4606      	mov	r6, r0
 802375a:	e0a2      	b.n	80238a2 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3c2>
 802375c:	1aed      	subs	r5, r5, r3
 802375e:	e785      	b.n	802366c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8023760:	9b02      	ldr	r3, [sp, #8]
 8023762:	4638      	mov	r0, r7
 8023764:	4622      	mov	r2, r4
 8023766:	42ab      	cmp	r3, r5
 8023768:	bfa8      	it	ge
 802376a:	462b      	movge	r3, r5
 802376c:	469b      	mov	fp, r3
 802376e:	9b02      	ldr	r3, [sp, #8]
 8023770:	fa0f f18b 	sxth.w	r1, fp
 8023774:	eba3 090b 	sub.w	r9, r3, fp
 8023778:	9b05      	ldr	r3, [sp, #20]
 802377a:	eba5 050b 	sub.w	r5, r5, fp
 802377e:	f7ef fc7d 	bl	801307c <_ZN8touchgfx5paint8argb888813lineFromColorEPmsmh>
 8023782:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 8023786:	e7d2      	b.n	802372e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x24e>
 8023788:	f8dd 9008 	ldr.w	r9, [sp, #8]
 802378c:	465e      	mov	r6, fp
 802378e:	e7ce      	b.n	802372e <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x24e>
 8023790:	2801      	cmp	r0, #1
 8023792:	d131      	bne.n	80237f8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x318>
 8023794:	f003 0103 	and.w	r1, r3, #3
 8023798:	1ea6      	subs	r6, r4, #2
 802379a:	f3c3 0c81 	ubfx	ip, r3, #2, #2
 802379e:	2a3f      	cmp	r2, #63	@ 0x3f
 80237a0:	440e      	add	r6, r1
 80237a2:	f3c3 1101 	ubfx	r1, r3, #4, #2
 80237a6:	f1ac 0c02 	sub.w	ip, ip, #2
 80237aa:	f04f 0303 	mov.w	r3, #3
 80237ae:	b2f6      	uxtb	r6, r6
 80237b0:	f1a1 0102 	sub.w	r1, r1, #2
 80237b4:	f366 0407 	bfi	r4, r6, #0, #8
 80237b8:	eb0c 2c14 	add.w	ip, ip, r4, lsr #8
 80237bc:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80237c0:	f36c 240f 	bfi	r4, ip, #8, #8
 80237c4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80237c8:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 80237cc:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80237d0:	f361 4417 	bfi	r4, r1, #16, #8
 80237d4:	fb13 c101 	smlabb	r1, r3, r1, ip
 80237d8:	f04f 0307 	mov.w	r3, #7
 80237dc:	fb13 1106 	smlabb	r1, r3, r6, r1
 80237e0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80237e4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80237e8:	604c      	str	r4, [r1, #4]
 80237ea:	dcb5      	bgt.n	8023758 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x278>
 80237ec:	3201      	adds	r2, #1
 80237ee:	f848 400b 	str.w	r4, [r8, fp]
 80237f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80237f6:	e077      	b.n	80238e8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>
 80237f8:	2802      	cmp	r0, #2
 80237fa:	d12d      	bne.n	8023858 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x378>
 80237fc:	1cb1      	adds	r1, r6, #2
 80237fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023802:	9108      	str	r1, [sp, #32]
 8023804:	f1a3 0c20 	sub.w	ip, r3, #32
 8023808:	7871      	ldrb	r1, [r6, #1]
 802380a:	b2c9      	uxtb	r1, r1
 802380c:	f001 000f 	and.w	r0, r1, #15
 8023810:	1109      	asrs	r1, r1, #4
 8023812:	3808      	subs	r0, #8
 8023814:	3908      	subs	r1, #8
 8023816:	4460      	add	r0, ip
 8023818:	4461      	add	r1, ip
 802381a:	4420      	add	r0, r4
 802381c:	b2c0      	uxtb	r0, r0
 802381e:	f360 0407 	bfi	r4, r0, #0, #8
 8023822:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8023826:	3e20      	subs	r6, #32
 8023828:	4433      	add	r3, r6
 802382a:	2603      	movs	r6, #3
 802382c:	b2db      	uxtb	r3, r3
 802382e:	f363 240f 	bfi	r4, r3, #8, #8
 8023832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8023836:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 802383a:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802383e:	f361 4417 	bfi	r4, r1, #16, #8
 8023842:	fb16 3101 	smlabb	r1, r6, r1, r3
 8023846:	2307      	movs	r3, #7
 8023848:	fb13 1100 	smlabb	r1, r3, r0, r1
 802384c:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8023850:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8023854:	604c      	str	r4, [r1, #4]
 8023856:	e77c      	b.n	8023752 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x272>
 8023858:	2bfe      	cmp	r3, #254	@ 0xfe
 802385a:	d11b      	bne.n	8023894 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b4>
 802385c:	7873      	ldrb	r3, [r6, #1]
 802385e:	78b1      	ldrb	r1, [r6, #2]
 8023860:	b2d8      	uxtb	r0, r3
 8023862:	1d33      	adds	r3, r6, #4
 8023864:	b2c9      	uxtb	r1, r1
 8023866:	f360 0407 	bfi	r4, r0, #0, #8
 802386a:	9308      	str	r3, [sp, #32]
 802386c:	78f3      	ldrb	r3, [r6, #3]
 802386e:	2603      	movs	r6, #3
 8023870:	f361 240f 	bfi	r4, r1, #8, #8
 8023874:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8023878:	b2db      	uxtb	r3, r3
 802387a:	fb16 1103 	smlabb	r1, r6, r3, r1
 802387e:	f363 4417 	bfi	r4, r3, #16, #8
 8023882:	2307      	movs	r3, #7
 8023884:	fb13 1300 	smlabb	r3, r3, r0, r1
 8023888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802388c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023890:	605c      	str	r4, [r3, #4]
 8023892:	e75e      	b.n	8023752 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x272>
 8023894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023898:	464e      	mov	r6, r9
 802389a:	1c58      	adds	r0, r3, #1
 802389c:	4581      	cmp	r9, r0
 802389e:	bfa8      	it	ge
 80238a0:	4606      	movge	r6, r0
 80238a2:	1993      	adds	r3, r2, r6
 80238a4:	eba9 0906 	sub.w	r9, r9, r6
 80238a8:	1b85      	subs	r5, r0, r6
 80238aa:	2b40      	cmp	r3, #64	@ 0x40
 80238ac:	dd14      	ble.n	80238d8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3f8>
 80238ae:	4640      	mov	r0, r8
 80238b0:	0091      	lsls	r1, r2, #2
 80238b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80238b4:	f7ef fbc8 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 80238b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80238ba:	4641      	mov	r1, r8
 80238bc:	9b05      	ldr	r3, [sp, #20]
 80238be:	4638      	mov	r0, r7
 80238c0:	b212      	sxth	r2, r2
 80238c2:	445f      	add	r7, fp
 80238c4:	f7ef fc80 	bl	80131c8 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 80238c8:	4b0a      	ldr	r3, [pc, #40]	@ (80238f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>)
 80238ca:	2200      	movs	r2, #0
 80238cc:	4598      	cmp	r8, r3
 80238ce:	bf0c      	ite	eq
 80238d0:	f8df 8024 	ldreq.w	r8, [pc, #36]	@ 80238f8 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x418>
 80238d4:	f8df 801c 	ldrne.w	r8, [pc, #28]	@ 80238f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 80238d8:	eb08 0182 	add.w	r1, r8, r2, lsl #2
 80238dc:	4633      	mov	r3, r6
 80238de:	3b01      	subs	r3, #1
 80238e0:	f841 4b04 	str.w	r4, [r1], #4
 80238e4:	d1fb      	bne.n	80238de <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3fe>
 80238e6:	4432      	add	r2, r6
 80238e8:	9e08      	ldr	r6, [sp, #32]
 80238ea:	e721      	b.n	8023730 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80238ec:	200122c4 	.word	0x200122c4
 80238f0:	200122be 	.word	0x200122be
 80238f4:	20000100 	.word	0x20000100
 80238f8:	20000200 	.word	0x20000200
 80238fc:	b172      	cbz	r2, 802391c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x43c>
 80238fe:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8023902:	4640      	mov	r0, r8
 8023904:	9208      	str	r2, [sp, #32]
 8023906:	4649      	mov	r1, r9
 8023908:	f7ef fb9e 	bl	8013048 <_ZN8touchgfx5paint9flushLineEPmi>
 802390c:	9a08      	ldr	r2, [sp, #32]
 802390e:	4638      	mov	r0, r7
 8023910:	444f      	add	r7, r9
 8023912:	9b05      	ldr	r3, [sp, #20]
 8023914:	b212      	sxth	r2, r2
 8023916:	4641      	mov	r1, r8
 8023918:	f7ef fc56 	bl	80131c8 <_ZN8touchgfx5paint8argb888816lineFromARGB8888EPhPKmsh>
 802391c:	4b1f      	ldr	r3, [pc, #124]	@ (802399c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>)
 802391e:	9a02      	ldr	r2, [sp, #8]
 8023920:	881b      	ldrh	r3, [r3, #0]
 8023922:	1a9b      	subs	r3, r3, r2
 8023924:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8023928:	9b04      	ldr	r3, [sp, #16]
 802392a:	3301      	adds	r3, #1
 802392c:	9304      	str	r3, [sp, #16]
 802392e:	9a04      	ldr	r2, [sp, #16]
 8023930:	9b01      	ldr	r3, [sp, #4]
 8023932:	4293      	cmp	r3, r2
 8023934:	d122      	bne.n	802397c <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x49c>
 8023936:	9b03      	ldr	r3, [sp, #12]
 8023938:	2100      	movs	r1, #0
 802393a:	9a03      	ldr	r2, [sp, #12]
 802393c:	f04f 447f 	mov.w	r4, #4278190080	@ 0xff000000
 8023940:	f103 0901 	add.w	r9, r3, #1
 8023944:	9b06      	ldr	r3, [sp, #24]
 8023946:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 802394a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802394e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023952:	9b07      	ldr	r3, [sp, #28]
 8023954:	ba36      	rev	r6, r6
 8023956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023958:	441e      	add	r6, r3
 802395a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 802395e:	1aed      	subs	r5, r5, r3
 8023960:	f00a fb64 	bl	802e02c <memset>
 8023964:	23ff      	movs	r3, #255	@ 0xff
 8023966:	f8cd 900c 	str.w	r9, [sp, #12]
 802396a:	b2ad      	uxth	r5, r5
 802396c:	f88a 3007 	strb.w	r3, [sl, #7]
 8023970:	2300      	movs	r3, #0
 8023972:	9304      	str	r3, [sp, #16]
 8023974:	f7ef fb50 	bl	8013018 <_ZN8touchgfx5paint8tearDownEv>
 8023978:	46b3      	mov	fp, r6
 802397a:	e63b      	b.n	80235f4 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x114>
 802397c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023980:	9a02      	ldr	r2, [sp, #8]
 8023982:	1a9b      	subs	r3, r3, r2
 8023984:	1b5d      	subs	r5, r3, r5
 8023986:	b2ad      	uxth	r5, r5
 8023988:	e7f4      	b.n	8023974 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 802398a:	4b05      	ldr	r3, [pc, #20]	@ (80239a0 <_ZN8touchgfx8LCD32bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>)
 802398c:	6818      	ldr	r0, [r3, #0]
 802398e:	6803      	ldr	r3, [r0, #0]
 8023990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023992:	4798      	blx	r3
 8023994:	b011      	add	sp, #68	@ 0x44
 8023996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802399a:	bf00      	nop
 802399c:	200122be 	.word	0x200122be
 80239a0:	200122c4 	.word	0x200122c4

080239a4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80239a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239a6:	4606      	mov	r6, r0
 80239a8:	b087      	sub	sp, #28
 80239aa:	4615      	mov	r5, r2
 80239ac:	461f      	mov	r7, r3
 80239ae:	b353      	cbz	r3, 8023a06 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80239b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	dd26      	ble.n	8023a06 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80239b8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80239bc:	2b00      	cmp	r3, #0
 80239be:	dd22      	ble.n	8023a06 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80239c0:	6808      	ldr	r0, [r1, #0]
 80239c2:	aa04      	add	r2, sp, #16
 80239c4:	6849      	ldr	r1, [r1, #4]
 80239c6:	4c1b      	ldr	r4, [pc, #108]	@ (8023a34 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80239c8:	c203      	stmia	r2!, {r0, r1}
 80239ca:	a804      	add	r0, sp, #16
 80239cc:	f7f7 fa10 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239d0:	6820      	ldr	r0, [r4, #0]
 80239d2:	6803      	ldr	r3, [r0, #0]
 80239d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80239d6:	4798      	blx	r3
 80239d8:	2fff      	cmp	r7, #255	@ 0xff
 80239da:	d016      	beq.n	8023a0a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80239dc:	f010 0f08 	tst.w	r0, #8
 80239e0:	6820      	ldr	r0, [r4, #0]
 80239e2:	d015      	beq.n	8023a10 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80239e4:	2400      	movs	r4, #0
 80239e6:	6801      	ldr	r1, [r0, #0]
 80239e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80239ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80239f0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80239f4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80239f8:	9401      	str	r4, [sp, #4]
 80239fa:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80239fe:	9400      	str	r4, [sp, #0]
 8023a00:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8023a02:	4629      	mov	r1, r5
 8023a04:	47a0      	blx	r4
 8023a06:	b007      	add	sp, #28
 8023a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a0a:	f010 0f02 	tst.w	r0, #2
 8023a0e:	e7e7      	b.n	80239e0 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8023a10:	6803      	ldr	r3, [r0, #0]
 8023a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a14:	4798      	blx	r3
 8023a16:	4b08      	ldr	r3, [pc, #32]	@ (8023a38 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8023a18:	4601      	mov	r1, r0
 8023a1a:	4630      	mov	r0, r6
 8023a1c:	881a      	ldrh	r2, [r3, #0]
 8023a1e:	6833      	ldr	r3, [r6, #0]
 8023a20:	e9cd 5700 	strd	r5, r7, [sp]
 8023a24:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8023a26:	ab04      	add	r3, sp, #16
 8023a28:	47a8      	blx	r5
 8023a2a:	6820      	ldr	r0, [r4, #0]
 8023a2c:	6803      	ldr	r3, [r0, #0]
 8023a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023a30:	4798      	blx	r3
 8023a32:	e7e8      	b.n	8023a06 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023a34:	200122c4 	.word	0x200122c4
 8023a38:	200122be 	.word	0x200122be

08023a3c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8023a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a40:	b08d      	sub	sp, #52	@ 0x34
 8023a42:	469b      	mov	fp, r3
 8023a44:	4617      	mov	r7, r2
 8023a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8023a4a:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	@ 0x5c
 8023a4e:	4604      	mov	r4, r0
 8023a50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023a54:	a806      	add	r0, sp, #24
 8023a56:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	@ 0x60
 8023a5a:	460d      	mov	r5, r1
 8023a5c:	4659      	mov	r1, fp
 8023a5e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023a62:	f8ad 301a 	strh.w	r3, [sp, #26]
 8023a66:	f8ad a01c 	strh.w	sl, [sp, #28]
 8023a6a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8023a6e:	f7f1 f8af 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8023a72:	4639      	mov	r1, r7
 8023a74:	a806      	add	r0, sp, #24
 8023a76:	f7f1 f8ab 	bl	8014bd0 <_ZN8touchgfx4RectaNERKS0_>
 8023a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8023c28 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ec>)
 8023a7c:	f8b3 9000 	ldrh.w	r9, [r3]
 8023a80:	4b6a      	ldr	r3, [pc, #424]	@ (8023c2c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>)
 8023a82:	fa0f f289 	sxth.w	r2, r9
 8023a86:	8819      	ldrh	r1, [r3, #0]
 8023a88:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023a8c:	b208      	sxth	r0, r1
 8023a8e:	2b00      	cmp	r3, #0
 8023a90:	da07      	bge.n	8023aa2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8023a92:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8023a96:	443b      	add	r3, r7
 8023a98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023a9c:	2300      	movs	r3, #0
 8023a9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8023aa2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023aa6:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8023aaa:	1ad2      	subs	r2, r2, r3
 8023aac:	4297      	cmp	r7, r2
 8023aae:	bfc4      	itt	gt
 8023ab0:	eba9 0203 	subgt.w	r2, r9, r3
 8023ab4:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 8023ab8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8023abc:	2a00      	cmp	r2, #0
 8023abe:	da07      	bge.n	8023ad0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8023ac0:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 8023ac4:	443a      	add	r2, r7
 8023ac6:	f8ad 201e 	strh.w	r2, [sp, #30]
 8023aca:	2200      	movs	r2, #0
 8023acc:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023ad0:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8023ad4:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8023ad8:	1a80      	subs	r0, r0, r2
 8023ada:	4287      	cmp	r7, r0
 8023adc:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8023ae0:	bfc4      	itt	gt
 8023ae2:	1a88      	subgt	r0, r1, r2
 8023ae4:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 8023ae8:	4851      	ldr	r0, [pc, #324]	@ (8023c30 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f4>)
 8023aea:	7800      	ldrb	r0, [r0, #0]
 8023aec:	2800      	cmp	r0, #0
 8023aee:	d178      	bne.n	8023be2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a6>
 8023af0:	454f      	cmp	r7, r9
 8023af2:	bf14      	ite	ne
 8023af4:	f04f 0900 	movne.w	r9, #0
 8023af8:	f04f 0901 	moveq.w	r9, #1
 8023afc:	2f00      	cmp	r7, #0
 8023afe:	dd74      	ble.n	8023bea <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ae>
 8023b00:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 8023b04:	f1b8 0f00 	cmp.w	r8, #0
 8023b08:	dd6f      	ble.n	8023bea <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ae>
 8023b0a:	f8bb 1000 	ldrh.w	r1, [fp]
 8023b0e:	a808      	add	r0, sp, #32
 8023b10:	f8ad a02c 	strh.w	sl, [sp, #44]	@ 0x2c
 8023b14:	1a5b      	subs	r3, r3, r1
 8023b16:	a90a      	add	r1, sp, #40	@ 0x28
 8023b18:	f8ad 602e 	strh.w	r6, [sp, #46]	@ 0x2e
 8023b1c:	b21b      	sxth	r3, r3
 8023b1e:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8023b22:	f8ad 8026 	strh.w	r8, [sp, #38]	@ 0x26
 8023b26:	9302      	str	r3, [sp, #8]
 8023b28:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023b2c:	1ad2      	subs	r2, r2, r3
 8023b2e:	b213      	sxth	r3, r2
 8023b30:	9303      	str	r3, [sp, #12]
 8023b32:	9b02      	ldr	r3, [sp, #8]
 8023b34:	f8ad 3020 	strh.w	r3, [sp, #32]
 8023b38:	9b03      	ldr	r3, [sp, #12]
 8023b3a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8023b3e:	2300      	movs	r3, #0
 8023b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b42:	f7f7 f97d 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023b46:	a806      	add	r0, sp, #24
 8023b48:	f7f7 f952 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023b4c:	a80a      	add	r0, sp, #40	@ 0x28
 8023b4e:	f7f7 f94f 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023b52:	4b38      	ldr	r3, [pc, #224]	@ (8023c34 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f8>)
 8023b54:	4628      	mov	r0, r5
 8023b56:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	@ 0x2c
 8023b5a:	881a      	ldrh	r2, [r3, #0]
 8023b5c:	682b      	ldr	r3, [r5, #0]
 8023b5e:	9205      	str	r2, [sp, #20]
 8023b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023b62:	4798      	blx	r3
 8023b64:	f8bd 6022 	ldrh.w	r6, [sp, #34]	@ 0x22
 8023b68:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8023b6c:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 8023b70:	fb1a 3306 	smlabb	r3, sl, r6, r3
 8023b74:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8023b76:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8023b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8023c38 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fc>)
 8023b7c:	6818      	ldr	r0, [r3, #0]
 8023b7e:	9304      	str	r3, [sp, #16]
 8023b80:	6801      	ldr	r1, [r0, #0]
 8023b82:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8023b84:	4788      	blx	r1
 8023b86:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8023b8a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8023b8e:	fb0b 1505 	mla	r5, fp, r5, r1
 8023b92:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8023b96:	9301      	str	r3, [sp, #4]
 8023b98:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8023b9c:	f1b9 0f00 	cmp.w	r9, #0
 8023ba0:	d12c      	bne.n	8023bfc <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c0>
 8023ba2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023ba6:	f04f 0900 	mov.w	r9, #0
 8023baa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8023bae:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8023c38 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fc>
 8023bb2:	9304      	str	r3, [sp, #16]
 8023bb4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8023bb8:	454b      	cmp	r3, r9
 8023bba:	dd2d      	ble.n	8023c18 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1dc>
 8023bbc:	f8db 0000 	ldr.w	r0, [fp]
 8023bc0:	4631      	mov	r1, r6
 8023bc2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8023bc6:	4456      	add	r6, sl
 8023bc8:	6802      	ldr	r2, [r0, #0]
 8023bca:	f109 0901 	add.w	r9, r9, #1
 8023bce:	009b      	lsls	r3, r3, #2
 8023bd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8023bd2:	4615      	mov	r5, r2
 8023bd4:	9a01      	ldr	r2, [sp, #4]
 8023bd6:	47a8      	blx	r5
 8023bd8:	9a01      	ldr	r2, [sp, #4]
 8023bda:	9b04      	ldr	r3, [sp, #16]
 8023bdc:	441a      	add	r2, r3
 8023bde:	9201      	str	r2, [sp, #4]
 8023be0:	e7e8      	b.n	8023bb4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8023be2:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8023be6:	4589      	cmp	r9, r1
 8023be8:	e783      	b.n	8023af2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8023bea:	2300      	movs	r3, #0
 8023bec:	8023      	strh	r3, [r4, #0]
 8023bee:	8063      	strh	r3, [r4, #2]
 8023bf0:	80a3      	strh	r3, [r4, #4]
 8023bf2:	80e3      	strh	r3, [r4, #6]
 8023bf4:	4620      	mov	r0, r4
 8023bf6:	b00d      	add	sp, #52	@ 0x34
 8023bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bfc:	4592      	cmp	sl, r2
 8023bfe:	d1d0      	bne.n	8023ba2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x166>
 8023c00:	6818      	ldr	r0, [r3, #0]
 8023c02:	4631      	mov	r1, r6
 8023c04:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8023c08:	6802      	ldr	r2, [r0, #0]
 8023c0a:	fb0b f303 	mul.w	r3, fp, r3
 8023c0e:	f8d2 9034 	ldr.w	r9, [r2, #52]	@ 0x34
 8023c12:	009b      	lsls	r3, r3, #2
 8023c14:	9a01      	ldr	r2, [sp, #4]
 8023c16:	47c8      	blx	r9
 8023c18:	9b02      	ldr	r3, [sp, #8]
 8023c1a:	80a7      	strh	r7, [r4, #4]
 8023c1c:	8023      	strh	r3, [r4, #0]
 8023c1e:	9b03      	ldr	r3, [sp, #12]
 8023c20:	f8a4 8006 	strh.w	r8, [r4, #6]
 8023c24:	8063      	strh	r3, [r4, #2]
 8023c26:	e7e5      	b.n	8023bf4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8023c28:	200122b8 	.word	0x200122b8
 8023c2c:	200122ba 	.word	0x200122ba
 8023c30:	200122bc 	.word	0x200122bc
 8023c34:	200122be 	.word	0x200122be
 8023c38:	200122c4 	.word	0x200122c4

08023c3c <_ZN8touchgfx8LCD32bppC1Ev>:
 8023c3c:	2200      	movs	r2, #0
 8023c3e:	4912      	ldr	r1, [pc, #72]	@ (8023c88 <_ZN8touchgfx8LCD32bppC1Ev+0x4c>)
 8023c40:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8023c44:	6001      	str	r1, [r0, #0]
 8023c46:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8023c4a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8023c4e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8023c52:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8023c56:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8023c5a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8023c5e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8023c62:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8023c66:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8023c6a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8023c6e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8023c72:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8023c76:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8023c7a:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8023c7e:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8023c82:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8023c86:	4770      	bx	lr
 8023c88:	08032718 	.word	0x08032718

08023c8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 8023c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c90:	4604      	mov	r4, r0
 8023c92:	b08f      	sub	sp, #60	@ 0x3c
 8023c94:	460d      	mov	r5, r1
 8023c96:	461e      	mov	r6, r3
 8023c98:	2b00      	cmp	r3, #0
 8023c9a:	d052      	beq.n	8023d42 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8023c9c:	6808      	ldr	r0, [r1, #0]
 8023c9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8023ca0:	6849      	ldr	r1, [r1, #4]
 8023ca2:	4f70      	ldr	r7, [pc, #448]	@ (8023e64 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8023ca4:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 8023e68 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8023ca8:	c303      	stmia	r3!, {r0, r1}
 8023caa:	6810      	ldr	r0, [r2, #0]
 8023cac:	ab0c      	add	r3, sp, #48	@ 0x30
 8023cae:	6851      	ldr	r1, [r2, #4]
 8023cb0:	c303      	stmia	r3!, {r0, r1}
 8023cb2:	a80a      	add	r0, sp, #40	@ 0x28
 8023cb4:	f7f7 f89c 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023cb8:	4629      	mov	r1, r5
 8023cba:	a80c      	add	r0, sp, #48	@ 0x30
 8023cbc:	f7f7 f8c0 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023cc0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023cc4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8023cc8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023ccc:	6838      	ldr	r0, [r7, #0]
 8023cce:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023cd2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8023cd6:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8023cda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023cde:	440c      	add	r4, r1
 8023ce0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8023ce4:	440a      	add	r2, r1
 8023ce6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023cea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8023cee:	4413      	add	r3, r2
 8023cf0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023cf4:	6803      	ldr	r3, [r0, #0]
 8023cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023cf8:	4798      	blx	r3
 8023cfa:	2eff      	cmp	r6, #255	@ 0xff
 8023cfc:	d024      	beq.n	8023d48 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 8023cfe:	f010 0f04 	tst.w	r0, #4
 8023d02:	6838      	ldr	r0, [r7, #0]
 8023d04:	d023      	beq.n	8023d4e <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 8023d06:	2100      	movs	r1, #0
 8023d08:	f04f 0c02 	mov.w	ip, #2
 8023d0c:	6807      	ldr	r7, [r0, #0]
 8023d0e:	b2ad      	uxth	r5, r5
 8023d10:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8023d14:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8023d18:	e9cd c107 	strd	ip, r1, [sp, #28]
 8023d1c:	f04f 0c01 	mov.w	ip, #1
 8023d20:	f8cd c018 	str.w	ip, [sp, #24]
 8023d24:	f8b9 c000 	ldrh.w	ip, [r9]
 8023d28:	9603      	str	r6, [sp, #12]
 8023d2a:	9501      	str	r5, [sp, #4]
 8023d2c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8023d30:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023d34:	9102      	str	r1, [sp, #8]
 8023d36:	fa1f f188 	uxth.w	r1, r8
 8023d3a:	9100      	str	r1, [sp, #0]
 8023d3c:	4621      	mov	r1, r4
 8023d3e:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8023d40:	47a8      	blx	r5
 8023d42:	b00f      	add	sp, #60	@ 0x3c
 8023d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d48:	f010 0f01 	tst.w	r0, #1
 8023d4c:	e7d9      	b.n	8023d02 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 8023d4e:	6803      	ldr	r3, [r0, #0]
 8023d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d52:	4798      	blx	r3
 8023d54:	f8b9 3000 	ldrh.w	r3, [r9]
 8023d58:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8023d5c:	2eff      	cmp	r6, #255	@ 0xff
 8023d5e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8023d62:	fb03 f505 	mul.w	r5, r3, r5
 8023d66:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8023d6a:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8023d6e:	fb03 1202 	mla	r2, r3, r2, r1
 8023d72:	eba3 0308 	sub.w	r3, r3, r8
 8023d76:	eba7 0708 	sub.w	r7, r7, r8
 8023d7a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8023d7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023d82:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8023d86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8023d8a:	d04c      	beq.n	8023e26 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 8023d8c:	42a8      	cmp	r0, r5
 8023d8e:	d263      	bcs.n	8023e58 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8023d90:	eb00 0e0c 	add.w	lr, r0, ip
 8023d94:	4621      	mov	r1, r4
 8023d96:	4570      	cmp	r0, lr
 8023d98:	460c      	mov	r4, r1
 8023d9a:	f101 0103 	add.w	r1, r1, #3
 8023d9e:	d23d      	bcs.n	8023e1c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8023da0:	6802      	ldr	r2, [r0, #0]
 8023da2:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8023da6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023daa:	fb1b fb06 	smulbb	fp, fp, r6
 8023dae:	fa5f fa82 	uxtb.w	sl, r2
 8023db2:	fb06 f809 	mul.w	r8, r6, r9
 8023db6:	f108 0401 	add.w	r4, r8, #1
 8023dba:	eb04 2428 	add.w	r4, r4, r8, asr #8
 8023dbe:	eb06 0809 	add.w	r8, r6, r9
 8023dc2:	1224      	asrs	r4, r4, #8
 8023dc4:	eba9 0904 	sub.w	r9, r9, r4
 8023dc8:	eba8 0804 	sub.w	r8, r8, r4
 8023dcc:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8023dd0:	fb09 fa0a 	mul.w	sl, r9, sl
 8023dd4:	fa5f f888 	uxtb.w	r8, r8
 8023dd8:	fb04 a406 	mla	r4, r4, r6, sl
 8023ddc:	fbb4 f4f8 	udiv	r4, r4, r8
 8023de0:	b2e4      	uxtb	r4, r4
 8023de2:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8023de6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8023dea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023dee:	fb09 b404 	mla	r4, r9, r4, fp
 8023df2:	fbb4 f4f8 	udiv	r4, r4, r8
 8023df6:	0424      	lsls	r4, r4, #16
 8023df8:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8023dfc:	ea4a 0404 	orr.w	r4, sl, r4
 8023e00:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 8023e04:	fb1a fa06 	smulbb	sl, sl, r6
 8023e08:	fb09 a202 	mla	r2, r9, r2, sl
 8023e0c:	fbb2 f2f8 	udiv	r2, r2, r8
 8023e10:	0212      	lsls	r2, r2, #8
 8023e12:	b292      	uxth	r2, r2
 8023e14:	4322      	orrs	r2, r4
 8023e16:	f840 2b04 	str.w	r2, [r0], #4
 8023e1a:	e7bc      	b.n	8023d96 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 8023e1c:	4418      	add	r0, r3
 8023e1e:	443c      	add	r4, r7
 8023e20:	e7b4      	b.n	8023d8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 8023e22:	4418      	add	r0, r3
 8023e24:	443c      	add	r4, r7
 8023e26:	42a8      	cmp	r0, r5
 8023e28:	d216      	bcs.n	8023e58 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8023e2a:	eb00 060c 	add.w	r6, r0, ip
 8023e2e:	4621      	mov	r1, r4
 8023e30:	42b0      	cmp	r0, r6
 8023e32:	460c      	mov	r4, r1
 8023e34:	f101 0103 	add.w	r1, r1, #3
 8023e38:	d2f3      	bcs.n	8023e22 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 8023e3a:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8023e3e:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8023e42:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8023e46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8023e4a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 8023e4e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8023e52:	f840 2b04 	str.w	r2, [r0], #4
 8023e56:	e7eb      	b.n	8023e30 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8023e58:	4b02      	ldr	r3, [pc, #8]	@ (8023e64 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8023e5a:	6818      	ldr	r0, [r3, #0]
 8023e5c:	6803      	ldr	r3, [r0, #0]
 8023e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023e60:	4798      	blx	r3
 8023e62:	e76e      	b.n	8023d42 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8023e64:	200122c4 	.word	0x200122c4
 8023e68:	200122be 	.word	0x200122be

08023e6c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8023e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e70:	4607      	mov	r7, r0
 8023e72:	b091      	sub	sp, #68	@ 0x44
 8023e74:	460c      	mov	r4, r1
 8023e76:	4698      	mov	r8, r3
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d04f      	beq.n	8023f1c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 8023e7c:	6808      	ldr	r0, [r1, #0]
 8023e7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8023e80:	6849      	ldr	r1, [r1, #4]
 8023e82:	4e7e      	ldr	r6, [pc, #504]	@ (802407c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8023e84:	f8df 91f8 	ldr.w	r9, [pc, #504]	@ 8024080 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8023e88:	c303      	stmia	r3!, {r0, r1}
 8023e8a:	6810      	ldr	r0, [r2, #0]
 8023e8c:	ab0e      	add	r3, sp, #56	@ 0x38
 8023e8e:	6851      	ldr	r1, [r2, #4]
 8023e90:	c303      	stmia	r3!, {r0, r1}
 8023e92:	a80c      	add	r0, sp, #48	@ 0x30
 8023e94:	f7f6 ffac 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023e98:	4621      	mov	r1, r4
 8023e9a:	a80e      	add	r0, sp, #56	@ 0x38
 8023e9c:	f7f6 ffd0 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023ea0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8023ea4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023ea8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8023eac:	6830      	ldr	r0, [r6, #0]
 8023eae:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023eb2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8023eb6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8023eba:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8023ebe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8023ec2:	440a      	add	r2, r1
 8023ec4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8023ec8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8023ecc:	4413      	add	r3, r2
 8023ece:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8023ed2:	6803      	ldr	r3, [r0, #0]
 8023ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023ed6:	4798      	blx	r3
 8023ed8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8023edc:	d021      	beq.n	8023f22 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023ede:	f010 0f04 	tst.w	r0, #4
 8023ee2:	6830      	ldr	r0, [r6, #0]
 8023ee4:	d020      	beq.n	8023f28 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8023ee6:	2100      	movs	r1, #0
 8023ee8:	f04f 0c02 	mov.w	ip, #2
 8023eec:	6806      	ldr	r6, [r0, #0]
 8023eee:	b2a4      	uxth	r4, r4
 8023ef0:	9106      	str	r1, [sp, #24]
 8023ef2:	b2ad      	uxth	r5, r5
 8023ef4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8023ef8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8023efc:	e9cd c107 	strd	ip, r1, [sp, #28]
 8023f00:	f8b9 c000 	ldrh.w	ip, [r9]
 8023f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8023f08:	9501      	str	r5, [sp, #4]
 8023f0a:	9400      	str	r4, [sp, #0]
 8023f0c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8023f10:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8023f14:	9102      	str	r1, [sp, #8]
 8023f16:	4639      	mov	r1, r7
 8023f18:	6c34      	ldr	r4, [r6, #64]	@ 0x40
 8023f1a:	47a0      	blx	r4
 8023f1c:	b011      	add	sp, #68	@ 0x44
 8023f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f22:	f010 0f01 	tst.w	r0, #1
 8023f26:	e7dc      	b.n	8023ee2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 8023f28:	6803      	ldr	r3, [r0, #0]
 8023f2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023f30:	4798      	blx	r3
 8023f32:	f8b9 c000 	ldrh.w	ip, [r9]
 8023f36:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023f3a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8023f3e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8023f42:	f9bd a034 	ldrsh.w	sl, [sp, #52]	@ 0x34
 8023f46:	fb0c 2303 	mla	r3, ip, r3, r2
 8023f4a:	ebaa 0a04 	sub.w	sl, sl, r4
 8023f4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023f52:	fb0c f305 	mul.w	r3, ip, r5
 8023f56:	ebac 0c04 	sub.w	ip, ip, r4
 8023f5a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8023f5e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023f62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023f66:	d02d      	beq.n	8023fc4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8023f68:	ea4f 6208 	mov.w	r2, r8, lsl #24
 8023f6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8023f6e:	4298      	cmp	r0, r3
 8023f70:	d27d      	bcs.n	802406e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8023f72:	eb00 020b 	add.w	r2, r0, fp
 8023f76:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023f78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023f7a:	4290      	cmp	r0, r2
 8023f7c:	d274      	bcs.n	8024068 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 8023f7e:	f837 eb02 	ldrh.w	lr, [r7], #2
 8023f82:	f850 4b04 	ldr.w	r4, [r0], #4
 8023f86:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 8023f8a:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8023f8e:	ea4f 262e 	mov.w	r6, lr, asr #8
 8023f92:	b2ed      	uxtb	r5, r5
 8023f94:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023f98:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023f9c:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8023fa0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023fa4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023fa8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023fac:	d129      	bne.n	8024002 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 8023fae:	0212      	lsls	r2, r2, #8
 8023fb0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8023fb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023fb6:	4335      	orrs	r5, r6
 8023fb8:	4315      	orrs	r5, r2
 8023fba:	f840 5c04 	str.w	r5, [r0, #-4]
 8023fbe:	e7db      	b.n	8023f78 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8023fc0:	4460      	add	r0, ip
 8023fc2:	4457      	add	r7, sl
 8023fc4:	4298      	cmp	r0, r3
 8023fc6:	d252      	bcs.n	802406e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8023fc8:	eb00 040b 	add.w	r4, r0, fp
 8023fcc:	42a0      	cmp	r0, r4
 8023fce:	d2f7      	bcs.n	8023fc0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8023fd0:	f837 5b02 	ldrh.w	r5, [r7], #2
 8023fd4:	10e9      	asrs	r1, r5, #3
 8023fd6:	122e      	asrs	r6, r5, #8
 8023fd8:	f001 02fc 	and.w	r2, r1, #252	@ 0xfc
 8023fdc:	00ed      	lsls	r5, r5, #3
 8023fde:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023fe2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023fe6:	b2ed      	uxtb	r5, r5
 8023fe8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023fec:	0212      	lsls	r2, r2, #8
 8023fee:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023ff2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8023ff6:	432a      	orrs	r2, r5
 8023ff8:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8023ffc:	f840 2b04 	str.w	r2, [r0], #4
 8024000:	e7e4      	b.n	8023fcc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 8024002:	fb18 f505 	smulbb	r5, r8, r5
 8024006:	fb08 fe09 	mul.w	lr, r8, r9
 802400a:	fb18 f606 	smulbb	r6, r8, r6
 802400e:	fb18 f202 	smulbb	r2, r8, r2
 8024012:	f10e 0101 	add.w	r1, lr, #1
 8024016:	eb01 212e 	add.w	r1, r1, lr, asr #8
 802401a:	eb08 0e09 	add.w	lr, r8, r9
 802401e:	1209      	asrs	r1, r1, #8
 8024020:	eba9 0901 	sub.w	r9, r9, r1
 8024024:	ebae 0e01 	sub.w	lr, lr, r1
 8024028:	b2e1      	uxtb	r1, r4
 802402a:	fa5f fe8e 	uxtb.w	lr, lr
 802402e:	fb09 5101 	mla	r1, r9, r1, r5
 8024032:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8024036:	fb09 6605 	mla	r6, r9, r5, r6
 802403a:	fbb1 f1fe 	udiv	r1, r1, lr
 802403e:	fbb6 f6fe 	udiv	r6, r6, lr
 8024042:	b2c9      	uxtb	r1, r1
 8024044:	0436      	lsls	r6, r6, #16
 8024046:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 802404a:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 802404e:	4331      	orrs	r1, r6
 8024050:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8024054:	fb09 2606 	mla	r6, r9, r6, r2
 8024058:	fbb6 f6fe 	udiv	r6, r6, lr
 802405c:	0236      	lsls	r6, r6, #8
 802405e:	b2b6      	uxth	r6, r6
 8024060:	4331      	orrs	r1, r6
 8024062:	f840 1c04 	str.w	r1, [r0, #-4]
 8024066:	e787      	b.n	8023f78 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8024068:	4460      	add	r0, ip
 802406a:	4457      	add	r7, sl
 802406c:	e77f      	b.n	8023f6e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 802406e:	4b03      	ldr	r3, [pc, #12]	@ (802407c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8024070:	6818      	ldr	r0, [r3, #0]
 8024072:	6803      	ldr	r3, [r0, #0]
 8024074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024076:	4798      	blx	r3
 8024078:	e750      	b.n	8023f1c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802407a:	bf00      	nop
 802407c:	200122c4 	.word	0x200122c4
 8024080:	200122be 	.word	0x200122be

08024084 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024084:	b4f0      	push	{r4, r5, r6, r7}
 8024086:	4616      	mov	r6, r2
 8024088:	461c      	mov	r4, r3
 802408a:	460d      	mov	r5, r1
 802408c:	9a04      	ldr	r2, [sp, #16]
 802408e:	2e01      	cmp	r6, #1
 8024090:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8024094:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8024098:	d012      	beq.n	80240c0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802409a:	d303      	bcc.n	80240a4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802409c:	2e02      	cmp	r6, #2
 802409e:	d006      	beq.n	80240ae <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 80240a0:	bcf0      	pop	{r4, r5, r6, r7}
 80240a2:	4770      	bx	lr
 80240a4:	4621      	mov	r1, r4
 80240a6:	4628      	mov	r0, r5
 80240a8:	bcf0      	pop	{r4, r5, r6, r7}
 80240aa:	f7ff bedf 	b.w	8023e6c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80240ae:	6805      	ldr	r5, [r0, #0]
 80240b0:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80240b4:	68ed      	ldr	r5, [r5, #12]
 80240b6:	4613      	mov	r3, r2
 80240b8:	4622      	mov	r2, r4
 80240ba:	46ac      	mov	ip, r5
 80240bc:	bcf0      	pop	{r4, r5, r6, r7}
 80240be:	4760      	bx	ip
 80240c0:	4621      	mov	r1, r4
 80240c2:	4628      	mov	r0, r5
 80240c4:	bcf0      	pop	{r4, r5, r6, r7}
 80240c6:	f7ff bde1 	b.w	8023c8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

080240cc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80240cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240d0:	b093      	sub	sp, #76	@ 0x4c
 80240d2:	4681      	mov	r9, r0
 80240d4:	460f      	mov	r7, r1
 80240d6:	6810      	ldr	r0, [r2, #0]
 80240d8:	6851      	ldr	r1, [r2, #4]
 80240da:	ac0e      	add	r4, sp, #56	@ 0x38
 80240dc:	4616      	mov	r6, r2
 80240de:	f89d 8070 	ldrb.w	r8, [sp, #112]	@ 0x70
 80240e2:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 8024290 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 80240e6:	c403      	stmia	r4!, {r0, r1}
 80240e8:	6818      	ldr	r0, [r3, #0]
 80240ea:	ac10      	add	r4, sp, #64	@ 0x40
 80240ec:	6859      	ldr	r1, [r3, #4]
 80240ee:	c403      	stmia	r4!, {r0, r1}
 80240f0:	a80e      	add	r0, sp, #56	@ 0x38
 80240f2:	f7f6 fe7d 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80240f6:	4631      	mov	r1, r6
 80240f8:	a810      	add	r0, sp, #64	@ 0x40
 80240fa:	4e64      	ldr	r6, [pc, #400]	@ (802428c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80240fc:	f7f6 fea0 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024100:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8024104:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8024108:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802410c:	6830      	ldr	r0, [r6, #0]
 802410e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024112:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8024116:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802411a:	4489      	add	r9, r1
 802411c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8024120:	440a      	add	r2, r1
 8024122:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8024126:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802412a:	4413      	add	r3, r2
 802412c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8024130:	6803      	ldr	r3, [r0, #0]
 8024132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024134:	4798      	blx	r3
 8024136:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802413a:	6830      	ldr	r0, [r6, #0]
 802413c:	d01f      	beq.n	802417e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 802413e:	2102      	movs	r1, #2
 8024140:	2600      	movs	r6, #0
 8024142:	6802      	ldr	r2, [r0, #0]
 8024144:	b2a4      	uxth	r4, r4
 8024146:	b2ad      	uxth	r5, r5
 8024148:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802414c:	e9cd 1608 	strd	r1, r6, [sp, #32]
 8024150:	210b      	movs	r1, #11
 8024152:	9107      	str	r1, [sp, #28]
 8024154:	f8ba 1000 	ldrh.w	r1, [sl]
 8024158:	9502      	str	r5, [sp, #8]
 802415a:	9106      	str	r1, [sp, #24]
 802415c:	2101      	movs	r1, #1
 802415e:	9401      	str	r4, [sp, #4]
 8024160:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8024164:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8024168:	9103      	str	r1, [sp, #12]
 802416a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 802416e:	9100      	str	r1, [sp, #0]
 8024170:	4649      	mov	r1, r9
 8024172:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8024174:	463a      	mov	r2, r7
 8024176:	47a0      	blx	r4
 8024178:	b013      	add	sp, #76	@ 0x4c
 802417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802417e:	6803      	ldr	r3, [r0, #0]
 8024180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024182:	4798      	blx	r3
 8024184:	f8ba 3000 	ldrh.w	r3, [sl]
 8024188:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 802418c:	f04f 0e04 	mov.w	lr, #4
 8024190:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8024194:	435d      	muls	r5, r3
 8024196:	fb03 1202 	mla	r2, r3, r2, r1
 802419a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802419e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80241a2:	920c      	str	r2, [sp, #48]	@ 0x30
 80241a4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80241a8:	1b12      	subs	r2, r2, r4
 80241aa:	920d      	str	r2, [sp, #52]	@ 0x34
 80241ac:	00a2      	lsls	r2, r4, #2
 80241ae:	1b1c      	subs	r4, r3, r4
 80241b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80241b2:	00a3      	lsls	r3, r4, #2
 80241b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80241b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241b8:	4298      	cmp	r0, r3
 80241ba:	d261      	bcs.n	8024280 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80241bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241be:	eb00 0a03 	add.w	sl, r0, r3
 80241c2:	4550      	cmp	r0, sl
 80241c4:	d257      	bcs.n	8024276 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80241c6:	f819 2b01 	ldrb.w	r2, [r9], #1
 80241ca:	fb1e e202 	smlabb	r2, lr, r2, lr
 80241ce:	eb07 0c02 	add.w	ip, r7, r2
 80241d2:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80241d6:	fb03 f308 	mul.w	r3, r3, r8
 80241da:	1c5c      	adds	r4, r3, #1
 80241dc:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80241e0:	1224      	asrs	r4, r4, #8
 80241e2:	2cff      	cmp	r4, #255	@ 0xff
 80241e4:	d003      	beq.n	80241ee <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 80241e6:	6803      	ldr	r3, [r0, #0]
 80241e8:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 80241ec:	d10d      	bne.n	802420a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80241ee:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80241f2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80241f6:	021b      	lsls	r3, r3, #8
 80241f8:	5cba      	ldrb	r2, [r7, r2]
 80241fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80241fe:	4313      	orrs	r3, r2
 8024200:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 8024204:	6004      	str	r4, [r0, #0]
 8024206:	3004      	adds	r0, #4
 8024208:	e7db      	b.n	80241c2 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 802420a:	b2e5      	uxtb	r5, r4
 802420c:	2c00      	cmp	r4, #0
 802420e:	d0fa      	beq.n	8024206 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8024210:	fb05 f10b 	mul.w	r1, r5, fp
 8024214:	445d      	add	r5, fp
 8024216:	5cba      	ldrb	r2, [r7, r2]
 8024218:	1c4e      	adds	r6, r1, #1
 802421a:	eb06 2121 	add.w	r1, r6, r1, asr #8
 802421e:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8024222:	1209      	asrs	r1, r1, #8
 8024224:	1a6d      	subs	r5, r5, r1
 8024226:	ebab 0101 	sub.w	r1, fp, r1
 802422a:	f89c b002 	ldrb.w	fp, [ip, #2]
 802422e:	b2ed      	uxtb	r5, r5
 8024230:	fb04 fb0b 	mul.w	fp, r4, fp
 8024234:	fb01 b606 	mla	r6, r1, r6, fp
 8024238:	fa5f fb83 	uxtb.w	fp, r3
 802423c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024240:	fb01 fb0b 	mul.w	fp, r1, fp
 8024244:	fb04 b202 	mla	r2, r4, r2, fp
 8024248:	fbb6 f6f5 	udiv	r6, r6, r5
 802424c:	fbb2 f2f5 	udiv	r2, r2, r5
 8024250:	0436      	lsls	r6, r6, #16
 8024252:	b2d2      	uxtb	r2, r2
 8024254:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 8024258:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 802425c:	4316      	orrs	r6, r2
 802425e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024262:	4354      	muls	r4, r2
 8024264:	fb01 4203 	mla	r2, r1, r3, r4
 8024268:	fbb2 f2f5 	udiv	r2, r2, r5
 802426c:	0212      	lsls	r2, r2, #8
 802426e:	b292      	uxth	r2, r2
 8024270:	4316      	orrs	r6, r2
 8024272:	6006      	str	r6, [r0, #0]
 8024274:	e7c7      	b.n	8024206 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8024276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024278:	4418      	add	r0, r3
 802427a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802427c:	4499      	add	r9, r3
 802427e:	e79a      	b.n	80241b6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8024280:	4b02      	ldr	r3, [pc, #8]	@ (802428c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024282:	6818      	ldr	r0, [r3, #0]
 8024284:	6803      	ldr	r3, [r0, #0]
 8024286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024288:	4798      	blx	r3
 802428a:	e775      	b.n	8024178 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802428c:	200122c4 	.word	0x200122c4
 8024290:	200122be 	.word	0x200122be

08024294 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8024294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024298:	b093      	sub	sp, #76	@ 0x4c
 802429a:	4606      	mov	r6, r0
 802429c:	4689      	mov	r9, r1
 802429e:	6810      	ldr	r0, [r2, #0]
 80242a0:	6851      	ldr	r1, [r2, #4]
 80242a2:	ac0e      	add	r4, sp, #56	@ 0x38
 80242a4:	4615      	mov	r5, r2
 80242a6:	f89d 8070 	ldrb.w	r8, [sp, #112]	@ 0x70
 80242aa:	f8df a1e4 	ldr.w	sl, [pc, #484]	@ 8024490 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 80242ae:	c403      	stmia	r4!, {r0, r1}
 80242b0:	6818      	ldr	r0, [r3, #0]
 80242b2:	ac10      	add	r4, sp, #64	@ 0x40
 80242b4:	6859      	ldr	r1, [r3, #4]
 80242b6:	c403      	stmia	r4!, {r0, r1}
 80242b8:	a80e      	add	r0, sp, #56	@ 0x38
 80242ba:	f7f6 fd99 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80242be:	4629      	mov	r1, r5
 80242c0:	a810      	add	r0, sp, #64	@ 0x40
 80242c2:	f7f6 fdbd 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80242c6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80242ca:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80242ce:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80242d2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 80242d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80242da:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	@ 0x46
 80242de:	1875      	adds	r5, r6, r1
 80242e0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 80242e4:	4e69      	ldr	r6, [pc, #420]	@ (802448c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80242e6:	440a      	add	r2, r1
 80242e8:	6830      	ldr	r0, [r6, #0]
 80242ea:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80242ee:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80242f2:	4413      	add	r3, r2
 80242f4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80242f8:	6803      	ldr	r3, [r0, #0]
 80242fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80242fc:	4798      	blx	r3
 80242fe:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8024302:	d020      	beq.n	8024346 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 8024304:	6830      	ldr	r0, [r6, #0]
 8024306:	2200      	movs	r2, #0
 8024308:	2602      	movs	r6, #2
 802430a:	b2a4      	uxth	r4, r4
 802430c:	6801      	ldr	r1, [r0, #0]
 802430e:	b2bf      	uxth	r7, r7
 8024310:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8024314:	e9cd 6208 	strd	r6, r2, [sp, #32]
 8024318:	260b      	movs	r6, #11
 802431a:	9607      	str	r6, [sp, #28]
 802431c:	f8ba 6000 	ldrh.w	r6, [sl]
 8024320:	f8cd 8010 	str.w	r8, [sp, #16]
 8024324:	9702      	str	r7, [sp, #8]
 8024326:	9401      	str	r4, [sp, #4]
 8024328:	e9cd 2605 	strd	r2, r6, [sp, #20]
 802432c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8024330:	9203      	str	r2, [sp, #12]
 8024332:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8024336:	9200      	str	r2, [sp, #0]
 8024338:	464a      	mov	r2, r9
 802433a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 802433c:	4629      	mov	r1, r5
 802433e:	47a0      	blx	r4
 8024340:	b013      	add	sp, #76	@ 0x4c
 8024342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024346:	6830      	ldr	r0, [r6, #0]
 8024348:	f109 0904 	add.w	r9, r9, #4
 802434c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024350:	6803      	ldr	r3, [r0, #0]
 8024352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024354:	4798      	blx	r3
 8024356:	f8ba c000 	ldrh.w	ip, [sl]
 802435a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802435e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024362:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8024366:	fb0c f707 	mul.w	r7, ip, r7
 802436a:	fb0c 2303 	mla	r3, ip, r3, r2
 802436e:	ebac 0c04 	sub.w	ip, ip, r4
 8024372:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024376:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802437a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802437e:	eba3 0304 	sub.w	r3, r3, r4
 8024382:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8024386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024388:	d025      	beq.n	80243d6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 802438a:	ea4f 6308 	mov.w	r3, r8, lsl #24
 802438e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024390:	42b8      	cmp	r0, r7
 8024392:	d274      	bcs.n	802447e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8024394:	eb00 030b 	add.w	r3, r0, fp
 8024398:	930d      	str	r3, [sp, #52]	@ 0x34
 802439a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802439c:	4298      	cmp	r0, r3
 802439e:	d26a      	bcs.n	8024476 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 80243a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80243a4:	f850 3b04 	ldr.w	r3, [r0], #4
 80243a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80243ac:	0e1c      	lsrs	r4, r3, #24
 80243ae:	eb09 0201 	add.w	r2, r9, r1
 80243b2:	f819 6001 	ldrb.w	r6, [r9, r1]
 80243b6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80243ba:	7851      	ldrb	r1, [r2, #1]
 80243bc:	d124      	bne.n	8024408 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 80243be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243c0:	431e      	orrs	r6, r3
 80243c2:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 80243c6:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 80243ca:	f840 1c04 	str.w	r1, [r0, #-4]
 80243ce:	e7e4      	b.n	802439a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80243d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243d2:	4460      	add	r0, ip
 80243d4:	441d      	add	r5, r3
 80243d6:	42b8      	cmp	r0, r7
 80243d8:	d251      	bcs.n	802447e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 80243da:	eb00 010b 	add.w	r1, r0, fp
 80243de:	4288      	cmp	r0, r1
 80243e0:	d2f6      	bcs.n	80243d0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 80243e2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80243e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80243ea:	f819 3002 	ldrb.w	r3, [r9, r2]
 80243ee:	eb09 0402 	add.w	r4, r9, r2
 80243f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80243f6:	78a6      	ldrb	r6, [r4, #2]
 80243f8:	7862      	ldrb	r2, [r4, #1]
 80243fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80243fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024402:	f840 3b04 	str.w	r3, [r0], #4
 8024406:	e7ea      	b.n	80243de <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 8024408:	fb18 f606 	smulbb	r6, r8, r6
 802440c:	fb08 fe04 	mul.w	lr, r8, r4
 8024410:	fb18 fa0a 	smulbb	sl, r8, sl
 8024414:	fb18 f101 	smulbb	r1, r8, r1
 8024418:	f10e 0201 	add.w	r2, lr, #1
 802441c:	eb02 222e 	add.w	r2, r2, lr, asr #8
 8024420:	eb08 0e04 	add.w	lr, r8, r4
 8024424:	1212      	asrs	r2, r2, #8
 8024426:	ebae 0e02 	sub.w	lr, lr, r2
 802442a:	1aa2      	subs	r2, r4, r2
 802442c:	b2dc      	uxtb	r4, r3
 802442e:	fa5f fe8e 	uxtb.w	lr, lr
 8024432:	fb02 6604 	mla	r6, r2, r4, r6
 8024436:	f3c3 4407 	ubfx	r4, r3, #16, #8
 802443a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802443e:	fb02 aa04 	mla	sl, r2, r4, sl
 8024442:	fb02 1303 	mla	r3, r2, r3, r1
 8024446:	fbb6 f6fe 	udiv	r6, r6, lr
 802444a:	fbba fafe 	udiv	sl, sl, lr
 802444e:	b2f6      	uxtb	r6, r6
 8024450:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8024454:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8024458:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 802445c:	ea46 060a 	orr.w	r6, r6, sl
 8024460:	fbb3 fafe 	udiv	sl, r3, lr
 8024464:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8024468:	fa1f fa8a 	uxth.w	sl, sl
 802446c:	ea46 060a 	orr.w	r6, r6, sl
 8024470:	f840 6c04 	str.w	r6, [r0, #-4]
 8024474:	e791      	b.n	802439a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8024476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024478:	4460      	add	r0, ip
 802447a:	441d      	add	r5, r3
 802447c:	e788      	b.n	8024390 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 802447e:	4b03      	ldr	r3, [pc, #12]	@ (802448c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8024480:	6818      	ldr	r0, [r3, #0]
 8024482:	6803      	ldr	r3, [r0, #0]
 8024484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024486:	4798      	blx	r3
 8024488:	e75a      	b.n	8024340 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 802448a:	bf00      	nop
 802448c:	200122c4 	.word	0x200122c4
 8024490:	200122be 	.word	0x200122be

08024494 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8024494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024498:	b089      	sub	sp, #36	@ 0x24
 802449a:	4605      	mov	r5, r0
 802449c:	4689      	mov	r9, r1
 802449e:	6810      	ldr	r0, [r2, #0]
 80244a0:	6851      	ldr	r1, [r2, #4]
 80244a2:	ac04      	add	r4, sp, #16
 80244a4:	4616      	mov	r6, r2
 80244a6:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80244aa:	f109 0904 	add.w	r9, r9, #4
 80244ae:	c403      	stmia	r4!, {r0, r1}
 80244b0:	6818      	ldr	r0, [r3, #0]
 80244b2:	ac06      	add	r4, sp, #24
 80244b4:	6859      	ldr	r1, [r3, #4]
 80244b6:	c403      	stmia	r4!, {r0, r1}
 80244b8:	a804      	add	r0, sp, #16
 80244ba:	f7f6 fc99 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80244be:	4631      	mov	r1, r6
 80244c0:	a806      	add	r0, sp, #24
 80244c2:	f7f6 fcbd 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80244c6:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80244ca:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80244ce:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80244d2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80244d6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80244da:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 80244de:	186e      	adds	r6, r5, r1
 80244e0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80244e4:	440a      	add	r2, r1
 80244e6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80244ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80244ee:	4413      	add	r3, r2
 80244f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80244f4:	4b57      	ldr	r3, [pc, #348]	@ (8024654 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80244f6:	6818      	ldr	r0, [r3, #0]
 80244f8:	6803      	ldr	r3, [r0, #0]
 80244fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80244fc:	4798      	blx	r3
 80244fe:	4b56      	ldr	r3, [pc, #344]	@ (8024658 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8024500:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8024504:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024508:	f8b3 c000 	ldrh.w	ip, [r3]
 802450c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8024510:	fb0a fa0c 	mul.w	sl, sl, ip
 8024514:	fb0c 2303 	mla	r3, ip, r3, r2
 8024518:	ebac 0c0b 	sub.w	ip, ip, fp
 802451c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024520:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024524:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8024528:	eba3 030b 	sub.w	r3, r3, fp
 802452c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8024530:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8024534:	9301      	str	r3, [sp, #4]
 8024536:	d02e      	beq.n	8024596 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8024538:	ea4f 6308 	mov.w	r3, r8, lsl #24
 802453c:	9302      	str	r3, [sp, #8]
 802453e:	4550      	cmp	r0, sl
 8024540:	d27f      	bcs.n	8024642 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8024542:	eb00 030b 	add.w	r3, r0, fp
 8024546:	9303      	str	r3, [sp, #12]
 8024548:	9b03      	ldr	r3, [sp, #12]
 802454a:	4298      	cmp	r0, r3
 802454c:	d275      	bcs.n	802463a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 802454e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8024552:	6802      	ldr	r2, [r0, #0]
 8024554:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8024558:	0e17      	lsrs	r7, r2, #24
 802455a:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 802455e:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8024562:	ea4f 2521 	mov.w	r5, r1, asr #8
 8024566:	b2e4      	uxtb	r4, r4
 8024568:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802456c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024570:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024574:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8024578:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802457c:	d12c      	bne.n	80245d8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 802457e:	021b      	lsls	r3, r3, #8
 8024580:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8024584:	9b02      	ldr	r3, [sp, #8]
 8024586:	432c      	orrs	r4, r5
 8024588:	431c      	orrs	r4, r3
 802458a:	6004      	str	r4, [r0, #0]
 802458c:	3004      	adds	r0, #4
 802458e:	e7db      	b.n	8024548 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8024590:	9b01      	ldr	r3, [sp, #4]
 8024592:	4460      	add	r0, ip
 8024594:	441e      	add	r6, r3
 8024596:	4550      	cmp	r0, sl
 8024598:	d253      	bcs.n	8024642 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 802459a:	eb00 020b 	add.w	r2, r0, fp
 802459e:	4290      	cmp	r0, r2
 80245a0:	d2f6      	bcs.n	8024590 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 80245a2:	f816 3b01 	ldrb.w	r3, [r6], #1
 80245a6:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 80245aa:	10e9      	asrs	r1, r5, #3
 80245ac:	122c      	asrs	r4, r5, #8
 80245ae:	f001 03fc 	and.w	r3, r1, #252	@ 0xfc
 80245b2:	00e9      	lsls	r1, r5, #3
 80245b4:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80245b8:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80245bc:	b2c9      	uxtb	r1, r1
 80245be:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80245c2:	021b      	lsls	r3, r3, #8
 80245c4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80245c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80245cc:	430b      	orrs	r3, r1
 80245ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80245d2:	f840 3b04 	str.w	r3, [r0], #4
 80245d6:	e7e2      	b.n	802459e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 80245d8:	fb18 f404 	smulbb	r4, r8, r4
 80245dc:	fb08 fe07 	mul.w	lr, r8, r7
 80245e0:	fb18 f505 	smulbb	r5, r8, r5
 80245e4:	fb18 f303 	smulbb	r3, r8, r3
 80245e8:	f10e 0101 	add.w	r1, lr, #1
 80245ec:	eb01 212e 	add.w	r1, r1, lr, asr #8
 80245f0:	eb08 0e07 	add.w	lr, r8, r7
 80245f4:	1209      	asrs	r1, r1, #8
 80245f6:	ebae 0e01 	sub.w	lr, lr, r1
 80245fa:	1a79      	subs	r1, r7, r1
 80245fc:	b2d7      	uxtb	r7, r2
 80245fe:	fa5f fe8e 	uxtb.w	lr, lr
 8024602:	fb01 4707 	mla	r7, r1, r7, r4
 8024606:	f3c2 4407 	ubfx	r4, r2, #16, #8
 802460a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802460e:	fb01 5504 	mla	r5, r1, r4, r5
 8024612:	fb01 3202 	mla	r2, r1, r2, r3
 8024616:	fbb7 f7fe 	udiv	r7, r7, lr
 802461a:	fbb5 f5fe 	udiv	r5, r5, lr
 802461e:	b2ff      	uxtb	r7, r7
 8024620:	042d      	lsls	r5, r5, #16
 8024622:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 8024626:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 802462a:	432f      	orrs	r7, r5
 802462c:	fbb2 f5fe 	udiv	r5, r2, lr
 8024630:	022d      	lsls	r5, r5, #8
 8024632:	b2ad      	uxth	r5, r5
 8024634:	432f      	orrs	r7, r5
 8024636:	6007      	str	r7, [r0, #0]
 8024638:	e7a8      	b.n	802458c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 802463a:	9b01      	ldr	r3, [sp, #4]
 802463c:	4460      	add	r0, ip
 802463e:	441e      	add	r6, r3
 8024640:	e77d      	b.n	802453e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 8024642:	4b04      	ldr	r3, [pc, #16]	@ (8024654 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024644:	6818      	ldr	r0, [r3, #0]
 8024646:	6803      	ldr	r3, [r0, #0]
 8024648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802464a:	4798      	blx	r3
 802464c:	b009      	add	sp, #36	@ 0x24
 802464e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024652:	bf00      	nop
 8024654:	200122c4 	.word	0x200122c4
 8024658:	200122be 	.word	0x200122be

0802465c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802465c:	b4f0      	push	{r4, r5, r6, r7}
 802465e:	460c      	mov	r4, r1
 8024660:	4611      	mov	r1, r2
 8024662:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8024666:	461a      	mov	r2, r3
 8024668:	780f      	ldrb	r7, [r1, #0]
 802466a:	9b04      	ldr	r3, [sp, #16]
 802466c:	2f01      	cmp	r7, #1
 802466e:	784e      	ldrb	r6, [r1, #1]
 8024670:	d038      	beq.n	80246e4 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8024672:	d31f      	bcc.n	80246b4 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8024674:	2f02      	cmp	r7, #2
 8024676:	d14d      	bne.n	8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8024678:	2e03      	cmp	r6, #3
 802467a:	d84b      	bhi.n	8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802467c:	e8df f006 	tbb	[pc, r6]
 8024680:	17140702 	.word	0x17140702
 8024684:	9504      	str	r5, [sp, #16]
 8024686:	4620      	mov	r0, r4
 8024688:	bcf0      	pop	{r4, r5, r6, r7}
 802468a:	f7ff bf03 	b.w	8024494 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802468e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8024690:	2800      	cmp	r0, #0
 8024692:	d03f      	beq.n	8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8024694:	6806      	ldr	r6, [r0, #0]
 8024696:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802469a:	68b5      	ldr	r5, [r6, #8]
 802469c:	4613      	mov	r3, r2
 802469e:	46ac      	mov	ip, r5
 80246a0:	460a      	mov	r2, r1
 80246a2:	4621      	mov	r1, r4
 80246a4:	bcf0      	pop	{r4, r5, r6, r7}
 80246a6:	4760      	bx	ip
 80246a8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80246ac:	e7f0      	b.n	8024690 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80246ae:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80246b2:	e7ed      	b.n	8024690 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80246b4:	2e03      	cmp	r6, #3
 80246b6:	d82d      	bhi.n	8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80246b8:	e8df f006 	tbb	[pc, r6]
 80246bc:	110e0702 	.word	0x110e0702
 80246c0:	9504      	str	r5, [sp, #16]
 80246c2:	4620      	mov	r0, r4
 80246c4:	bcf0      	pop	{r4, r5, r6, r7}
 80246c6:	f7ff bd01 	b.w	80240cc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80246ca:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80246cc:	b310      	cbz	r0, 8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80246ce:	6806      	ldr	r6, [r0, #0]
 80246d0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80246d4:	6935      	ldr	r5, [r6, #16]
 80246d6:	e7e1      	b.n	802469c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80246d8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80246dc:	e7f6      	b.n	80246cc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80246de:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80246e2:	e7f3      	b.n	80246cc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80246e4:	2e03      	cmp	r6, #3
 80246e6:	d815      	bhi.n	8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80246e8:	e8df f006 	tbb	[pc, r6]
 80246ec:	110e0702 	.word	0x110e0702
 80246f0:	9504      	str	r5, [sp, #16]
 80246f2:	4620      	mov	r0, r4
 80246f4:	bcf0      	pop	{r4, r5, r6, r7}
 80246f6:	f7ff bdcd 	b.w	8024294 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80246fa:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80246fc:	b150      	cbz	r0, 8024714 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80246fe:	6806      	ldr	r6, [r0, #0]
 8024700:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8024704:	68f5      	ldr	r5, [r6, #12]
 8024706:	e7c9      	b.n	802469c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8024708:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 802470c:	e7f6      	b.n	80246fc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 802470e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8024712:	e7f3      	b.n	80246fc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8024714:	bcf0      	pop	{r4, r5, r6, r7}
 8024716:	4770      	bx	lr

08024718 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8024718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802471c:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8024720:	4607      	mov	r7, r0
 8024722:	460c      	mov	r4, r1
 8024724:	4692      	mov	sl, r2
 8024726:	4699      	mov	r9, r3
 8024728:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802472a:	b1d5      	cbz	r5, 8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 802472c:	4608      	mov	r0, r1
 802472e:	f7f9 ff87 	bl	801e640 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024732:	4680      	mov	r8, r0
 8024734:	4620      	mov	r0, r4
 8024736:	f7f9 ffb7 	bl	801e6a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802473a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802473e:	4620      	mov	r0, r4
 8024740:	f8ad a008 	strh.w	sl, [sp, #8]
 8024744:	f8ad 900a 	strh.w	r9, [sp, #10]
 8024748:	f8ad 800c 	strh.w	r8, [sp, #12]
 802474c:	f7fa f8ee 	bl	801e92c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024750:	b950      	cbnz	r0, 8024768 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8024752:	4620      	mov	r0, r4
 8024754:	f7fa f866 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024758:	462b      	mov	r3, r5
 802475a:	4632      	mov	r2, r6
 802475c:	a902      	add	r1, sp, #8
 802475e:	f7ff fb85 	bl	8023e6c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024762:	b004      	add	sp, #16
 8024764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024768:	2801      	cmp	r0, #1
 802476a:	d108      	bne.n	802477e <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 802476c:	4620      	mov	r0, r4
 802476e:	f7fa f859 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024772:	462b      	mov	r3, r5
 8024774:	4632      	mov	r2, r6
 8024776:	a902      	add	r1, sp, #8
 8024778:	f7ff fa88 	bl	8023c8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 802477c:	e7f1      	b.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 802477e:	2802      	cmp	r0, #2
 8024780:	d111      	bne.n	80247a6 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8e>
 8024782:	683b      	ldr	r3, [r7, #0]
 8024784:	4620      	mov	r0, r4
 8024786:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802478a:	f7fa f84b 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 802478e:	4681      	mov	r9, r0
 8024790:	4620      	mov	r0, r4
 8024792:	f7fa f80f 	bl	801e7b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8024796:	4633      	mov	r3, r6
 8024798:	aa02      	add	r2, sp, #8
 802479a:	4649      	mov	r1, r9
 802479c:	e9cd 5000 	strd	r5, r0, [sp]
 80247a0:	4638      	mov	r0, r7
 80247a2:	47c0      	blx	r8
 80247a4:	e7dd      	b.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80247a6:	280b      	cmp	r0, #11
 80247a8:	d10f      	bne.n	80247ca <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80247aa:	4620      	mov	r0, r4
 80247ac:	f7fa f83a 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 80247b0:	4680      	mov	r8, r0
 80247b2:	4620      	mov	r0, r4
 80247b4:	f7fa f866 	bl	801e884 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80247b8:	ab02      	add	r3, sp, #8
 80247ba:	4602      	mov	r2, r0
 80247bc:	4641      	mov	r1, r8
 80247be:	4638      	mov	r0, r7
 80247c0:	e9cd 6500 	strd	r6, r5, [sp]
 80247c4:	f7ff ff4a 	bl	802465c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80247c8:	e7cb      	b.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80247ca:	280e      	cmp	r0, #14
 80247cc:	d110      	bne.n	80247f0 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xd8>
 80247ce:	f8d7 7088 	ldr.w	r7, [r7, #136]	@ 0x88
 80247d2:	2f00      	cmp	r7, #0
 80247d4:	d0c5      	beq.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80247d6:	683b      	ldr	r3, [r7, #0]
 80247d8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80247dc:	4620      	mov	r0, r4
 80247de:	f7fa f821 	bl	801e824 <_ZNK8touchgfx6Bitmap7getDataEv>
 80247e2:	9500      	str	r5, [sp, #0]
 80247e4:	4601      	mov	r1, r0
 80247e6:	4633      	mov	r3, r6
 80247e8:	aa02      	add	r2, sp, #8
 80247ea:	4638      	mov	r0, r7
 80247ec:	47c0      	blx	r8
 80247ee:	e7b8      	b.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80247f0:	280f      	cmp	r0, #15
 80247f2:	d107      	bne.n	8024804 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xec>
 80247f4:	f8d7 7088 	ldr.w	r7, [r7, #136]	@ 0x88
 80247f8:	2f00      	cmp	r7, #0
 80247fa:	d0b2      	beq.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80247fc:	683b      	ldr	r3, [r7, #0]
 80247fe:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8024802:	e7eb      	b.n	80247dc <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8024804:	2810      	cmp	r0, #16
 8024806:	d1ac      	bne.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024808:	f8d7 7088 	ldr.w	r7, [r7, #136]	@ 0x88
 802480c:	2f00      	cmp	r7, #0
 802480e:	d0a8      	beq.n	8024762 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024810:	683b      	ldr	r3, [r7, #0]
 8024812:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8024816:	e7e1      	b.n	80247dc <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08024818 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 8024818:	b160      	cbz	r0, 8024834 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 802481a:	2903      	cmp	r1, #3
 802481c:	d818      	bhi.n	8024850 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 802481e:	e8df f001 	tbb	[pc, r1]
 8024822:	1902      	.short	0x1902
 8024824:	1b06      	.short	0x1b06
 8024826:	4b0e      	ldr	r3, [pc, #56]	@ (8024860 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024828:	8818      	ldrh	r0, [r3, #0]
 802482a:	4240      	negs	r0, r0
 802482c:	4770      	bx	lr
 802482e:	4b0c      	ldr	r3, [pc, #48]	@ (8024860 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024830:	8818      	ldrh	r0, [r3, #0]
 8024832:	4770      	bx	lr
 8024834:	2903      	cmp	r1, #3
 8024836:	d80b      	bhi.n	8024850 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8024838:	a301      	add	r3, pc, #4	@ (adr r3, 8024840 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 802483a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802483e:	bf00      	nop
 8024840:	08024855 	.word	0x08024855
 8024844:	0802482f 	.word	0x0802482f
 8024848:	08024859 	.word	0x08024859
 802484c:	08024827 	.word	0x08024827
 8024850:	2000      	movs	r0, #0
 8024852:	4770      	bx	lr
 8024854:	2001      	movs	r0, #1
 8024856:	4770      	bx	lr
 8024858:	f04f 30ff 	mov.w	r0, #4294967295
 802485c:	4770      	bx	lr
 802485e:	bf00      	nop
 8024860:	200122be 	.word	0x200122be

08024864 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8024864:	b160      	cbz	r0, 8024880 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 8024866:	2903      	cmp	r1, #3
 8024868:	d818      	bhi.n	802489c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 802486a:	e8df f001 	tbb	[pc, r1]
 802486e:	0219      	.short	0x0219
 8024870:	051b      	.short	0x051b
 8024872:	4b0e      	ldr	r3, [pc, #56]	@ (80248ac <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8024874:	8818      	ldrh	r0, [r3, #0]
 8024876:	4770      	bx	lr
 8024878:	4b0c      	ldr	r3, [pc, #48]	@ (80248ac <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 802487a:	8818      	ldrh	r0, [r3, #0]
 802487c:	4240      	negs	r0, r0
 802487e:	4770      	bx	lr
 8024880:	2903      	cmp	r1, #3
 8024882:	d80b      	bhi.n	802489c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8024884:	a301      	add	r3, pc, #4	@ (adr r3, 802488c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8024886:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802488a:	bf00      	nop
 802488c:	08024873 	.word	0x08024873
 8024890:	080248a5 	.word	0x080248a5
 8024894:	08024879 	.word	0x08024879
 8024898:	080248a1 	.word	0x080248a1
 802489c:	2000      	movs	r0, #0
 802489e:	4770      	bx	lr
 80248a0:	2001      	movs	r0, #1
 80248a2:	4770      	bx	lr
 80248a4:	f04f 30ff 	mov.w	r0, #4294967295
 80248a8:	4770      	bx	lr
 80248aa:	bf00      	nop
 80248ac:	200122be 	.word	0x200122be

080248b0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80248b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248b4:	b099      	sub	sp, #100	@ 0x64
 80248b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80248b8:	a914      	add	r1, sp, #80	@ 0x50
 80248ba:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	@ 0x88
 80248be:	f8bd 7090 	ldrh.w	r7, [sp, #144]	@ 0x90
 80248c2:	f8bd 4094 	ldrh.w	r4, [sp, #148]	@ 0x94
 80248c6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80248ca:	f89d 90b4 	ldrb.w	r9, [sp, #180]	@ 0xb4
 80248ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80248d2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80248d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80248d8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80248dc:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80248e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80248e2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80248e6:	798d      	ldrb	r5, [r1, #6]
 80248e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80248ea:	7b4b      	ldrb	r3, [r1, #13]
 80248ec:	0158      	lsls	r0, r3, #5
 80248ee:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80248f2:	4328      	orrs	r0, r5
 80248f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80248f6:	f000 815d 	beq.w	8024bb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 80248fa:	011b      	lsls	r3, r3, #4
 80248fc:	79c8      	ldrb	r0, [r1, #7]
 80248fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024902:	4303      	orrs	r3, r0
 8024904:	930d      	str	r3, [sp, #52]	@ 0x34
 8024906:	f000 8155 	beq.w	8024bb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802490a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802490e:	b29b      	uxth	r3, r3
 8024910:	2f00      	cmp	r7, #0
 8024912:	f000 80f5 	beq.w	8024b00 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 8024916:	1aff      	subs	r7, r7, r3
 8024918:	b2bf      	uxth	r7, r7
 802491a:	043b      	lsls	r3, r7, #16
 802491c:	d502      	bpl.n	8024924 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802491e:	1bf6      	subs	r6, r6, r7
 8024920:	2700      	movs	r7, #0
 8024922:	b236      	sxth	r6, r6
 8024924:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024928:	a814      	add	r0, sp, #80	@ 0x50
 802492a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802492e:	428e      	cmp	r6, r1
 8024930:	b28b      	uxth	r3, r1
 8024932:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8024936:	bfbf      	itttt	lt
 8024938:	18ff      	addlt	r7, r7, r3
 802493a:	1bbe      	sublt	r6, r7, r6
 802493c:	b2b7      	uxthlt	r7, r6
 802493e:	460e      	movlt	r6, r1
 8024940:	8891      	ldrh	r1, [r2, #4]
 8024942:	440b      	add	r3, r1
 8024944:	4631      	mov	r1, r6
 8024946:	b21b      	sxth	r3, r3
 8024948:	930f      	str	r3, [sp, #60]	@ 0x3c
 802494a:	88d3      	ldrh	r3, [r2, #6]
 802494c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802494e:	449a      	add	sl, r3
 8024950:	fa0f f38a 	sxth.w	r3, sl
 8024954:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8024958:	930e      	str	r3, [sp, #56]	@ 0x38
 802495a:	4bb2      	ldr	r3, [pc, #712]	@ (8024c24 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 802495c:	f893 b000 	ldrb.w	fp, [r3]
 8024960:	f10b 3cff 	add.w	ip, fp, #4294967295
 8024964:	f1dc 0300 	rsbs	r3, ip, #0
 8024968:	eb43 030c 	adc.w	r3, r3, ip
 802496c:	930c      	str	r3, [sp, #48]	@ 0x30
 802496e:	464b      	mov	r3, r9
 8024970:	f7f6 f8b3 	bl	801aada <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024974:	4631      	mov	r1, r6
 8024976:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 802497a:	464b      	mov	r3, r9
 802497c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802497e:	a814      	add	r0, sp, #80	@ 0x50
 8024980:	f7f6 f8c8 	bl	801ab14 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024984:	a918      	add	r1, sp, #96	@ 0x60
 8024986:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802498a:	a817      	add	r0, sp, #92	@ 0x5c
 802498c:	f7f6 f9ee 	bl	801ad6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024990:	f1b9 0f00 	cmp.w	r9, #0
 8024994:	f040 80b7 	bne.w	8024b06 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x256>
 8024998:	f1bb 0f01 	cmp.w	fp, #1
 802499c:	f040 80bb 	bne.w	8024b16 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80249a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249a2:	b153      	cbz	r3, 80249ba <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80249a4:	2508      	movs	r5, #8
 80249a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80249a8:	fb95 f3f8 	sdiv	r3, r5, r8
 80249ac:	1e5d      	subs	r5, r3, #1
 80249ae:	4415      	add	r5, r2
 80249b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80249b4:	fb15 f503 	smulbb	r5, r5, r3
 80249b8:	b2ad      	uxth	r5, r5
 80249ba:	b907      	cbnz	r7, 80249be <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80249bc:	b16c      	cbz	r4, 80249da <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80249be:	fb04 7305 	mla	r3, r4, r5, r7
 80249c2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80249c4:	ebaa 0a04 	sub.w	sl, sl, r4
 80249c8:	fb08 f303 	mul.w	r3, r8, r3
 80249cc:	fa1f fa8a 	uxth.w	sl, sl
 80249d0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80249d4:	f003 0407 	and.w	r4, r3, #7
 80249d8:	9228      	str	r2, [sp, #160]	@ 0xa0
 80249da:	4649      	mov	r1, r9
 80249dc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80249de:	f7ff ff1b 	bl	8024818 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 80249e2:	4683      	mov	fp, r0
 80249e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80249e6:	f7ff ff3d 	bl	8024864 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 80249ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80249ee:	4681      	mov	r9, r0
 80249f0:	1a9b      	subs	r3, r3, r2
 80249f2:	459a      	cmp	sl, r3
 80249f4:	bfa8      	it	ge
 80249f6:	469a      	movge	sl, r3
 80249f8:	f1ba 0f00 	cmp.w	sl, #0
 80249fc:	f340 80da 	ble.w	8024bb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024a00:	1bf6      	subs	r6, r6, r7
 8024a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024a04:	1b9e      	subs	r6, r3, r6
 8024a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a08:	429e      	cmp	r6, r3
 8024a0a:	bfd4      	ite	le
 8024a0c:	ebc7 0706 	rsble	r7, r7, r6
 8024a10:	ebc7 0703 	rsbgt	r7, r7, r3
 8024a14:	2f00      	cmp	r7, #0
 8024a16:	f340 80cd 	ble.w	8024bb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024a1a:	1bed      	subs	r5, r5, r7
 8024a1c:	fb08 f305 	mul.w	r3, r8, r5
 8024a20:	930d      	str	r3, [sp, #52]	@ 0x34
 8024a22:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024a24:	0c1d      	lsrs	r5, r3, #16
 8024a26:	0a1e      	lsrs	r6, r3, #8
 8024a28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8024a2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8024a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024a30:	2b00      	cmp	r3, #0
 8024a32:	f040 80c4 	bne.w	8024bbe <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 8024a36:	4b7c      	ldr	r3, [pc, #496]	@ (8024c28 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8024a38:	6818      	ldr	r0, [r3, #0]
 8024a3a:	6803      	ldr	r3, [r0, #0]
 8024a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024a3e:	4798      	blx	r3
 8024a40:	2301      	movs	r3, #1
 8024a42:	4a7a      	ldr	r2, [pc, #488]	@ (8024c2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8024a44:	fa03 f308 	lsl.w	r3, r3, r8
 8024a48:	8811      	ldrh	r1, [r2, #0]
 8024a4a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8024a4e:	3b01      	subs	r3, #1
 8024a50:	b2db      	uxtb	r3, r3
 8024a52:	930c      	str	r3, [sp, #48]	@ 0x30
 8024a54:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8024a58:	fb01 2303 	mla	r3, r1, r3, r2
 8024a5c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024a5e:	22ff      	movs	r2, #255	@ 0xff
 8024a60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024a64:	fb92 f2f1 	sdiv	r2, r2, r1
 8024a68:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a6c:	4351      	muls	r1, r2
 8024a6e:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8024a72:	fb07 9b1b 	mls	fp, r7, fp, r9
 8024a76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024a78:	fb02 f907 	mul.w	r9, r2, r7
 8024a7c:	920a      	str	r2, [sp, #40]	@ 0x28
 8024a7e:	eb09 028b 	add.w	r2, r9, fp, lsl #2
 8024a82:	781b      	ldrb	r3, [r3, #0]
 8024a84:	9110      	str	r1, [sp, #64]	@ 0x40
 8024a86:	920f      	str	r2, [sp, #60]	@ 0x3c
 8024a88:	b2f2      	uxtb	r2, r6
 8024a8a:	4123      	asrs	r3, r4
 8024a8c:	9211      	str	r2, [sp, #68]	@ 0x44
 8024a8e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024a90:	b2db      	uxtb	r3, r3
 8024a92:	b2d2      	uxtb	r2, r2
 8024a94:	9212      	str	r2, [sp, #72]	@ 0x48
 8024a96:	b2ea      	uxtb	r2, r5
 8024a98:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024a9a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8024a9e:	f0c0 80d9 	bcc.w	8024c54 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8024aa2:	46b9      	mov	r9, r7
 8024aa4:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8024aa8:	f119 39ff 	adds.w	r9, r9, #4294967295
 8024aac:	f0c0 80c0 	bcc.w	8024c30 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8024ab0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ab2:	401a      	ands	r2, r3
 8024ab4:	d013      	beq.n	8024ade <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 8024ab6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024ab8:	fb12 f201 	smulbb	r2, r2, r1
 8024abc:	b292      	uxth	r2, r2
 8024abe:	1c51      	adds	r1, r2, #1
 8024ac0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024ac4:	1209      	asrs	r1, r1, #8
 8024ac6:	b2ce      	uxtb	r6, r1
 8024ac8:	2eff      	cmp	r6, #255	@ 0xff
 8024aca:	d003      	beq.n	8024ad4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x224>
 8024acc:	f8dc 5000 	ldr.w	r5, [ip]
 8024ad0:	0e2a      	lsrs	r2, r5, #24
 8024ad2:	d176      	bne.n	8024bc2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x312>
 8024ad4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024ad6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8024ada:	f8cc 1000 	str.w	r1, [ip]
 8024ade:	4444      	add	r4, r8
 8024ae0:	b2a4      	uxth	r4, r4
 8024ae2:	2c07      	cmp	r4, #7
 8024ae4:	bf89      	itett	hi
 8024ae6:	9a28      	ldrhi	r2, [sp, #160]	@ 0xa0
 8024ae8:	fa43 f308 	asrls.w	r3, r3, r8
 8024aec:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8024aee:	2400      	movhi	r4, #0
 8024af0:	bf89      	itett	hi
 8024af2:	3201      	addhi	r2, #1
 8024af4:	b2db      	uxtbls	r3, r3
 8024af6:	785b      	ldrbhi	r3, [r3, #1]
 8024af8:	9228      	strhi	r2, [sp, #160]	@ 0xa0
 8024afa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024afc:	4494      	add	ip, r2
 8024afe:	e7d3      	b.n	8024aa8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8024b00:	441e      	add	r6, r3
 8024b02:	b236      	sxth	r6, r6
 8024b04:	e70e      	b.n	8024924 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024b06:	f1b9 0f01 	cmp.w	r9, #1
 8024b0a:	f47f af49 	bne.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b0e:	f1bb 0f01 	cmp.w	fp, #1
 8024b12:	f47f af45 	bne.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b16:	f8df b110 	ldr.w	fp, [pc, #272]	@ 8024c28 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8024b1a:	f8db 0000 	ldr.w	r0, [fp]
 8024b1e:	6803      	ldr	r3, [r0, #0]
 8024b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024b22:	4798      	blx	r3
 8024b24:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8024b28:	465a      	mov	r2, fp
 8024b2a:	d006      	beq.n	8024b3a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8024b2c:	f1b8 0f04 	cmp.w	r8, #4
 8024b30:	d143      	bne.n	8024bba <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8024b32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b34:	3300      	adds	r3, #0
 8024b36:	bf18      	it	ne
 8024b38:	2301      	movne	r3, #1
 8024b3a:	0580      	lsls	r0, r0, #22
 8024b3c:	f140 8093 	bpl.w	8024c66 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8024b40:	f1b8 0f08 	cmp.w	r8, #8
 8024b44:	f040 808f 	bne.w	8024c66 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8024b48:	2b00      	cmp	r3, #0
 8024b4a:	bf0c      	ite	eq
 8024b4c:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8024b50:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8024b54:	2f00      	cmp	r7, #0
 8024b56:	f47f af23 	bne.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b5a:	2c00      	cmp	r4, #0
 8024b5c:	f47f af20 	bne.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b62:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024b64:	18f3      	adds	r3, r6, r3
 8024b66:	4283      	cmp	r3, r0
 8024b68:	f73f af1a 	bgt.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024b70:	4403      	add	r3, r0
 8024b72:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024b74:	4283      	cmp	r3, r0
 8024b76:	f73f af13 	bgt.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024b7a:	f1b8 0f08 	cmp.w	r8, #8
 8024b7e:	6810      	ldr	r0, [r2, #0]
 8024b80:	f04f 0600 	mov.w	r6, #0
 8024b84:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8024b88:	bf18      	it	ne
 8024b8a:	3501      	addne	r5, #1
 8024b8c:	6804      	ldr	r4, [r0, #0]
 8024b8e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8024b92:	bf18      	it	ne
 8024b94:	f025 0501 	bicne.w	r5, r5, #1
 8024b98:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8024b9c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024b9e:	bf18      	it	ne
 8024ba0:	b2ad      	uxthne	r5, r5
 8024ba2:	9104      	str	r1, [sp, #16]
 8024ba4:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024ba6:	e9cd 5a00 	strd	r5, sl, [sp]
 8024baa:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8024bae:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024bb0:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8024bb2:	47a0      	blx	r4
 8024bb4:	b019      	add	sp, #100	@ 0x64
 8024bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bba:	2300      	movs	r3, #0
 8024bbc:	e7bd      	b.n	8024b3a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8024bbe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024bc0:	e73e      	b.n	8024a40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x190>
 8024bc2:	2e00      	cmp	r6, #0
 8024bc4:	d08b      	beq.n	8024ade <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 8024bc6:	fb06 f102 	mul.w	r1, r6, r2
 8024bca:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024bcc:	f101 0e01 	add.w	lr, r1, #1
 8024bd0:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8024bd4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024bd8:	eba2 0b0e 	sub.w	fp, r2, lr
 8024bdc:	4432      	add	r2, r6
 8024bde:	eba2 020e 	sub.w	r2, r2, lr
 8024be2:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8024be6:	b2d1      	uxtb	r1, r2
 8024be8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024bea:	4372      	muls	r2, r6
 8024bec:	fb0b 2e0e 	mla	lr, fp, lr, r2
 8024bf0:	b2ea      	uxtb	r2, r5
 8024bf2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8024bf6:	fb0b f202 	mul.w	r2, fp, r2
 8024bfa:	fb06 2200 	mla	r2, r6, r0, r2
 8024bfe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024c00:	fb92 f2f1 	sdiv	r2, r2, r1
 8024c04:	4346      	muls	r6, r0
 8024c06:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8024c0a:	fb9e fef1 	sdiv	lr, lr, r1
 8024c0e:	fb0b 6505 	mla	r5, fp, r5, r6
 8024c12:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8024c16:	fb95 f5f1 	sdiv	r5, r5, r1
 8024c1a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8024c1e:	f8cc 5000 	str.w	r5, [ip]
 8024c22:	e75c      	b.n	8024ade <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 8024c24:	200122bc 	.word	0x200122bc
 8024c28:	200122c4 	.word	0x200122c4
 8024c2c:	200122be 	.word	0x200122be
 8024c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c32:	b152      	cbz	r2, 8024c4a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8024c34:	4414      	add	r4, r2
 8024c36:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024c38:	b2a4      	uxth	r4, r4
 8024c3a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8024c3e:	f004 0407 	and.w	r4, r4, #7
 8024c42:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024c44:	781b      	ldrb	r3, [r3, #0]
 8024c46:	4123      	asrs	r3, r4
 8024c48:	b2db      	uxtb	r3, r3
 8024c4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024c4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024c4e:	4411      	add	r1, r2
 8024c50:	9109      	str	r1, [sp, #36]	@ 0x24
 8024c52:	e722      	b.n	8024a9a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8024c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	d1ac      	bne.n	8024bb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024c5a:	4b06      	ldr	r3, [pc, #24]	@ (8024c74 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 8024c5c:	6818      	ldr	r0, [r3, #0]
 8024c5e:	6803      	ldr	r3, [r0, #0]
 8024c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024c62:	4798      	blx	r3
 8024c64:	e7a6      	b.n	8024bb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	f43f ae9a 	beq.w	80249a0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024c70:	e770      	b.n	8024b54 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8024c72:	bf00      	nop
 8024c74:	200122c4 	.word	0x200122c4

08024c78 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024c78:	b538      	push	{r3, r4, r5, lr}
 8024c7a:	4c15      	ldr	r4, [pc, #84]	@ (8024cd0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024c7c:	4605      	mov	r5, r0
 8024c7e:	7823      	ldrb	r3, [r4, #0]
 8024c80:	f3bf 8f5b 	dmb	ish
 8024c84:	07da      	lsls	r2, r3, #31
 8024c86:	d40b      	bmi.n	8024ca0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024c88:	4620      	mov	r0, r4
 8024c8a:	f008 f964 	bl	802cf56 <__cxa_guard_acquire>
 8024c8e:	b138      	cbz	r0, 8024ca0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024c90:	4620      	mov	r0, r4
 8024c92:	f008 f96c 	bl	802cf6e <__cxa_guard_release>
 8024c96:	4a0f      	ldr	r2, [pc, #60]	@ (8024cd4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024c98:	490f      	ldr	r1, [pc, #60]	@ (8024cd8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8024c9a:	4810      	ldr	r0, [pc, #64]	@ (8024cdc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024c9c:	f008 f954 	bl	802cf48 <__aeabi_atexit>
 8024ca0:	4c0f      	ldr	r4, [pc, #60]	@ (8024ce0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8024ca2:	7823      	ldrb	r3, [r4, #0]
 8024ca4:	f3bf 8f5b 	dmb	ish
 8024ca8:	07db      	lsls	r3, r3, #31
 8024caa:	d40b      	bmi.n	8024cc4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024cac:	4620      	mov	r0, r4
 8024cae:	f008 f952 	bl	802cf56 <__cxa_guard_acquire>
 8024cb2:	b138      	cbz	r0, 8024cc4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	f008 f95a 	bl	802cf6e <__cxa_guard_release>
 8024cba:	4a06      	ldr	r2, [pc, #24]	@ (8024cd4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024cbc:	4909      	ldr	r1, [pc, #36]	@ (8024ce4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024cbe:	480a      	ldr	r0, [pc, #40]	@ (8024ce8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024cc0:	f008 f942 	bl	802cf48 <__aeabi_atexit>
 8024cc4:	4b05      	ldr	r3, [pc, #20]	@ (8024cdc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024cc6:	616b      	str	r3, [r5, #20]
 8024cc8:	4b07      	ldr	r3, [pc, #28]	@ (8024ce8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024cca:	61ab      	str	r3, [r5, #24]
 8024ccc:	bd38      	pop	{r3, r4, r5, pc}
 8024cce:	bf00      	nop
 8024cd0:	200123ac 	.word	0x200123ac
 8024cd4:	20000000 	.word	0x20000000
 8024cd8:	080210f7 	.word	0x080210f7
 8024cdc:	20000068 	.word	0x20000068
 8024ce0:	200123b0 	.word	0x200123b0
 8024ce4:	080210f5 	.word	0x080210f5
 8024ce8:	2000006c 	.word	0x2000006c

08024cec <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024cec:	b538      	push	{r3, r4, r5, lr}
 8024cee:	4c15      	ldr	r4, [pc, #84]	@ (8024d44 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024cf0:	4605      	mov	r5, r0
 8024cf2:	7823      	ldrb	r3, [r4, #0]
 8024cf4:	f3bf 8f5b 	dmb	ish
 8024cf8:	07da      	lsls	r2, r3, #31
 8024cfa:	d40b      	bmi.n	8024d14 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024cfc:	4620      	mov	r0, r4
 8024cfe:	f008 f92a 	bl	802cf56 <__cxa_guard_acquire>
 8024d02:	b138      	cbz	r0, 8024d14 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024d04:	4620      	mov	r0, r4
 8024d06:	f008 f932 	bl	802cf6e <__cxa_guard_release>
 8024d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8024d48 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024d0c:	490f      	ldr	r1, [pc, #60]	@ (8024d4c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8024d0e:	4810      	ldr	r0, [pc, #64]	@ (8024d50 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024d10:	f008 f91a 	bl	802cf48 <__aeabi_atexit>
 8024d14:	4c0f      	ldr	r4, [pc, #60]	@ (8024d54 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8024d16:	7823      	ldrb	r3, [r4, #0]
 8024d18:	f3bf 8f5b 	dmb	ish
 8024d1c:	07db      	lsls	r3, r3, #31
 8024d1e:	d40b      	bmi.n	8024d38 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024d20:	4620      	mov	r0, r4
 8024d22:	f008 f918 	bl	802cf56 <__cxa_guard_acquire>
 8024d26:	b138      	cbz	r0, 8024d38 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024d28:	4620      	mov	r0, r4
 8024d2a:	f008 f920 	bl	802cf6e <__cxa_guard_release>
 8024d2e:	4a06      	ldr	r2, [pc, #24]	@ (8024d48 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024d30:	4909      	ldr	r1, [pc, #36]	@ (8024d58 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8024d32:	480a      	ldr	r0, [pc, #40]	@ (8024d5c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024d34:	f008 f908 	bl	802cf48 <__aeabi_atexit>
 8024d38:	4b05      	ldr	r3, [pc, #20]	@ (8024d50 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024d3a:	60eb      	str	r3, [r5, #12]
 8024d3c:	4b07      	ldr	r3, [pc, #28]	@ (8024d5c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024d3e:	612b      	str	r3, [r5, #16]
 8024d40:	bd38      	pop	{r3, r4, r5, pc}
 8024d42:	bf00      	nop
 8024d44:	20012384 	.word	0x20012384
 8024d48:	20000000 	.word	0x20000000
 8024d4c:	080210fb 	.word	0x080210fb
 8024d50:	20000040 	.word	0x20000040
 8024d54:	20012388 	.word	0x20012388
 8024d58:	080210f9 	.word	0x080210f9
 8024d5c:	20000044 	.word	0x20000044

08024d60 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 8024d60:	b510      	push	{r4, lr}
 8024d62:	4604      	mov	r4, r0
 8024d64:	f7ff ff88 	bl	8024c78 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024d68:	4620      	mov	r0, r4
 8024d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d6e:	f7ff bfbd 	b.w	8024cec <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08024d74 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8024d74:	b538      	push	{r3, r4, r5, lr}
 8024d76:	4c15      	ldr	r4, [pc, #84]	@ (8024dcc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024d78:	4605      	mov	r5, r0
 8024d7a:	7823      	ldrb	r3, [r4, #0]
 8024d7c:	f3bf 8f5b 	dmb	ish
 8024d80:	07da      	lsls	r2, r3, #31
 8024d82:	d40b      	bmi.n	8024d9c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024d84:	4620      	mov	r0, r4
 8024d86:	f008 f8e6 	bl	802cf56 <__cxa_guard_acquire>
 8024d8a:	b138      	cbz	r0, 8024d9c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024d8c:	4620      	mov	r0, r4
 8024d8e:	f008 f8ee 	bl	802cf6e <__cxa_guard_release>
 8024d92:	4a0f      	ldr	r2, [pc, #60]	@ (8024dd0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024d94:	490f      	ldr	r1, [pc, #60]	@ (8024dd4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024d96:	4810      	ldr	r0, [pc, #64]	@ (8024dd8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024d98:	f008 f8d6 	bl	802cf48 <__aeabi_atexit>
 8024d9c:	4c0f      	ldr	r4, [pc, #60]	@ (8024ddc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8024d9e:	7823      	ldrb	r3, [r4, #0]
 8024da0:	f3bf 8f5b 	dmb	ish
 8024da4:	07db      	lsls	r3, r3, #31
 8024da6:	d40b      	bmi.n	8024dc0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024da8:	4620      	mov	r0, r4
 8024daa:	f008 f8d4 	bl	802cf56 <__cxa_guard_acquire>
 8024dae:	b138      	cbz	r0, 8024dc0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024db0:	4620      	mov	r0, r4
 8024db2:	f008 f8dc 	bl	802cf6e <__cxa_guard_release>
 8024db6:	4a06      	ldr	r2, [pc, #24]	@ (8024dd0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024db8:	4909      	ldr	r1, [pc, #36]	@ (8024de0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024dba:	480a      	ldr	r0, [pc, #40]	@ (8024de4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024dbc:	f008 f8c4 	bl	802cf48 <__aeabi_atexit>
 8024dc0:	4b05      	ldr	r3, [pc, #20]	@ (8024dd8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024dc2:	626b      	str	r3, [r5, #36]	@ 0x24
 8024dc4:	4b07      	ldr	r3, [pc, #28]	@ (8024de4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024dc6:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024dc8:	bd38      	pop	{r3, r4, r5, pc}
 8024dca:	bf00      	nop
 8024dcc:	200123b4 	.word	0x200123b4
 8024dd0:	20000000 	.word	0x20000000
 8024dd4:	080210ef 	.word	0x080210ef
 8024dd8:	20000070 	.word	0x20000070
 8024ddc:	200123b8 	.word	0x200123b8
 8024de0:	080210ed 	.word	0x080210ed
 8024de4:	20000074 	.word	0x20000074

08024de8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024de8:	b538      	push	{r3, r4, r5, lr}
 8024dea:	4c15      	ldr	r4, [pc, #84]	@ (8024e40 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024dec:	4605      	mov	r5, r0
 8024dee:	7823      	ldrb	r3, [r4, #0]
 8024df0:	f3bf 8f5b 	dmb	ish
 8024df4:	07da      	lsls	r2, r3, #31
 8024df6:	d40b      	bmi.n	8024e10 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024df8:	4620      	mov	r0, r4
 8024dfa:	f008 f8ac 	bl	802cf56 <__cxa_guard_acquire>
 8024dfe:	b138      	cbz	r0, 8024e10 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024e00:	4620      	mov	r0, r4
 8024e02:	f008 f8b4 	bl	802cf6e <__cxa_guard_release>
 8024e06:	4a0f      	ldr	r2, [pc, #60]	@ (8024e44 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024e08:	490f      	ldr	r1, [pc, #60]	@ (8024e48 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024e0a:	4810      	ldr	r0, [pc, #64]	@ (8024e4c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024e0c:	f008 f89c 	bl	802cf48 <__aeabi_atexit>
 8024e10:	4c0f      	ldr	r4, [pc, #60]	@ (8024e50 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8024e12:	7823      	ldrb	r3, [r4, #0]
 8024e14:	f3bf 8f5b 	dmb	ish
 8024e18:	07db      	lsls	r3, r3, #31
 8024e1a:	d40b      	bmi.n	8024e34 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024e1c:	4620      	mov	r0, r4
 8024e1e:	f008 f89a 	bl	802cf56 <__cxa_guard_acquire>
 8024e22:	b138      	cbz	r0, 8024e34 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024e24:	4620      	mov	r0, r4
 8024e26:	f008 f8a2 	bl	802cf6e <__cxa_guard_release>
 8024e2a:	4a06      	ldr	r2, [pc, #24]	@ (8024e44 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024e2c:	4909      	ldr	r1, [pc, #36]	@ (8024e54 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8024e2e:	480a      	ldr	r0, [pc, #40]	@ (8024e58 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024e30:	f008 f88a 	bl	802cf48 <__aeabi_atexit>
 8024e34:	4b05      	ldr	r3, [pc, #20]	@ (8024e4c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024e36:	61eb      	str	r3, [r5, #28]
 8024e38:	4b07      	ldr	r3, [pc, #28]	@ (8024e58 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024e3a:	622b      	str	r3, [r5, #32]
 8024e3c:	bd38      	pop	{r3, r4, r5, pc}
 8024e3e:	bf00      	nop
 8024e40:	2001238c 	.word	0x2001238c
 8024e44:	20000000 	.word	0x20000000
 8024e48:	080210f3 	.word	0x080210f3
 8024e4c:	20000048 	.word	0x20000048
 8024e50:	20012390 	.word	0x20012390
 8024e54:	080210f1 	.word	0x080210f1
 8024e58:	2000004c 	.word	0x2000004c

08024e5c <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 8024e5c:	b510      	push	{r4, lr}
 8024e5e:	4604      	mov	r4, r0
 8024e60:	f7ff ff88 	bl	8024d74 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8024e64:	4620      	mov	r0, r4
 8024e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024e6a:	f7ff bfbd 	b.w	8024de8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024e70 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024e70:	b538      	push	{r3, r4, r5, lr}
 8024e72:	4c0b      	ldr	r4, [pc, #44]	@ (8024ea0 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 8024e74:	4605      	mov	r5, r0
 8024e76:	7823      	ldrb	r3, [r4, #0]
 8024e78:	f3bf 8f5b 	dmb	ish
 8024e7c:	07db      	lsls	r3, r3, #31
 8024e7e:	d40b      	bmi.n	8024e98 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024e80:	4620      	mov	r0, r4
 8024e82:	f008 f868 	bl	802cf56 <__cxa_guard_acquire>
 8024e86:	b138      	cbz	r0, 8024e98 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024e88:	4620      	mov	r0, r4
 8024e8a:	f008 f870 	bl	802cf6e <__cxa_guard_release>
 8024e8e:	4a05      	ldr	r2, [pc, #20]	@ (8024ea4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 8024e90:	4905      	ldr	r1, [pc, #20]	@ (8024ea8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 8024e92:	4806      	ldr	r0, [pc, #24]	@ (8024eac <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8024e94:	f008 f858 	bl	802cf48 <__aeabi_atexit>
 8024e98:	4b04      	ldr	r3, [pc, #16]	@ (8024eac <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8024e9a:	632b      	str	r3, [r5, #48]	@ 0x30
 8024e9c:	bd38      	pop	{r3, r4, r5, pc}
 8024e9e:	bf00      	nop
 8024ea0:	200123c4 	.word	0x200123c4
 8024ea4:	20000000 	.word	0x20000000
 8024ea8:	080210e9 	.word	0x080210e9
 8024eac:	20000080 	.word	0x20000080

08024eb0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024eb0:	b538      	push	{r3, r4, r5, lr}
 8024eb2:	4c0b      	ldr	r4, [pc, #44]	@ (8024ee0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 8024eb4:	4605      	mov	r5, r0
 8024eb6:	7823      	ldrb	r3, [r4, #0]
 8024eb8:	f3bf 8f5b 	dmb	ish
 8024ebc:	07db      	lsls	r3, r3, #31
 8024ebe:	d40b      	bmi.n	8024ed8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024ec0:	4620      	mov	r0, r4
 8024ec2:	f008 f848 	bl	802cf56 <__cxa_guard_acquire>
 8024ec6:	b138      	cbz	r0, 8024ed8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024ec8:	4620      	mov	r0, r4
 8024eca:	f008 f850 	bl	802cf6e <__cxa_guard_release>
 8024ece:	4a05      	ldr	r2, [pc, #20]	@ (8024ee4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 8024ed0:	4905      	ldr	r1, [pc, #20]	@ (8024ee8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 8024ed2:	4806      	ldr	r0, [pc, #24]	@ (8024eec <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8024ed4:	f008 f838 	bl	802cf48 <__aeabi_atexit>
 8024ed8:	4b04      	ldr	r3, [pc, #16]	@ (8024eec <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8024eda:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8024edc:	bd38      	pop	{r3, r4, r5, pc}
 8024ede:	bf00      	nop
 8024ee0:	20012394 	.word	0x20012394
 8024ee4:	20000000 	.word	0x20000000
 8024ee8:	080210eb 	.word	0x080210eb
 8024eec:	20000050 	.word	0x20000050

08024ef0 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024ef0:	b510      	push	{r4, lr}
 8024ef2:	4604      	mov	r4, r0
 8024ef4:	f7ff ffbc 	bl	8024e70 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024ef8:	4620      	mov	r0, r4
 8024efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024efe:	f7ff bfd7 	b.w	8024eb0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024f04 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8024f04:	b538      	push	{r3, r4, r5, lr}
 8024f06:	4c15      	ldr	r4, [pc, #84]	@ (8024f5c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8024f08:	4605      	mov	r5, r0
 8024f0a:	7823      	ldrb	r3, [r4, #0]
 8024f0c:	f3bf 8f5b 	dmb	ish
 8024f10:	07da      	lsls	r2, r3, #31
 8024f12:	d40b      	bmi.n	8024f2c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024f14:	4620      	mov	r0, r4
 8024f16:	f008 f81e 	bl	802cf56 <__cxa_guard_acquire>
 8024f1a:	b138      	cbz	r0, 8024f2c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024f1c:	4620      	mov	r0, r4
 8024f1e:	f008 f826 	bl	802cf6e <__cxa_guard_release>
 8024f22:	4a0f      	ldr	r2, [pc, #60]	@ (8024f60 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024f24:	490f      	ldr	r1, [pc, #60]	@ (8024f64 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024f26:	4810      	ldr	r0, [pc, #64]	@ (8024f68 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024f28:	f008 f80e 	bl	802cf48 <__aeabi_atexit>
 8024f2c:	4c0f      	ldr	r4, [pc, #60]	@ (8024f6c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8024f2e:	7823      	ldrb	r3, [r4, #0]
 8024f30:	f3bf 8f5b 	dmb	ish
 8024f34:	07db      	lsls	r3, r3, #31
 8024f36:	d40b      	bmi.n	8024f50 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024f38:	4620      	mov	r0, r4
 8024f3a:	f008 f80c 	bl	802cf56 <__cxa_guard_acquire>
 8024f3e:	b138      	cbz	r0, 8024f50 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024f40:	4620      	mov	r0, r4
 8024f42:	f008 f814 	bl	802cf6e <__cxa_guard_release>
 8024f46:	4a06      	ldr	r2, [pc, #24]	@ (8024f60 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024f48:	4909      	ldr	r1, [pc, #36]	@ (8024f70 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8024f4a:	480a      	ldr	r0, [pc, #40]	@ (8024f74 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024f4c:	f007 fffc 	bl	802cf48 <__aeabi_atexit>
 8024f50:	4b05      	ldr	r3, [pc, #20]	@ (8024f68 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024f52:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8024f54:	4b07      	ldr	r3, [pc, #28]	@ (8024f74 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024f56:	652b      	str	r3, [r5, #80]	@ 0x50
 8024f58:	bd38      	pop	{r3, r4, r5, pc}
 8024f5a:	bf00      	nop
 8024f5c:	200123c8 	.word	0x200123c8
 8024f60:	20000000 	.word	0x20000000
 8024f64:	080210db 	.word	0x080210db
 8024f68:	20000084 	.word	0x20000084
 8024f6c:	200123cc 	.word	0x200123cc
 8024f70:	080210d9 	.word	0x080210d9
 8024f74:	20000088 	.word	0x20000088

08024f78 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024f78:	b538      	push	{r3, r4, r5, lr}
 8024f7a:	4c15      	ldr	r4, [pc, #84]	@ (8024fd0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8024f7c:	4605      	mov	r5, r0
 8024f7e:	7823      	ldrb	r3, [r4, #0]
 8024f80:	f3bf 8f5b 	dmb	ish
 8024f84:	07da      	lsls	r2, r3, #31
 8024f86:	d40b      	bmi.n	8024fa0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024f88:	4620      	mov	r0, r4
 8024f8a:	f007 ffe4 	bl	802cf56 <__cxa_guard_acquire>
 8024f8e:	b138      	cbz	r0, 8024fa0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024f90:	4620      	mov	r0, r4
 8024f92:	f007 ffec 	bl	802cf6e <__cxa_guard_release>
 8024f96:	4a0f      	ldr	r2, [pc, #60]	@ (8024fd4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024f98:	490f      	ldr	r1, [pc, #60]	@ (8024fd8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8024f9a:	4810      	ldr	r0, [pc, #64]	@ (8024fdc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024f9c:	f007 ffd4 	bl	802cf48 <__aeabi_atexit>
 8024fa0:	4c0f      	ldr	r4, [pc, #60]	@ (8024fe0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024fa2:	7823      	ldrb	r3, [r4, #0]
 8024fa4:	f3bf 8f5b 	dmb	ish
 8024fa8:	07db      	lsls	r3, r3, #31
 8024faa:	d40b      	bmi.n	8024fc4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024fac:	4620      	mov	r0, r4
 8024fae:	f007 ffd2 	bl	802cf56 <__cxa_guard_acquire>
 8024fb2:	b138      	cbz	r0, 8024fc4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024fb4:	4620      	mov	r0, r4
 8024fb6:	f007 ffda 	bl	802cf6e <__cxa_guard_release>
 8024fba:	4a06      	ldr	r2, [pc, #24]	@ (8024fd4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024fbc:	4909      	ldr	r1, [pc, #36]	@ (8024fe4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8024fbe:	480a      	ldr	r0, [pc, #40]	@ (8024fe8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024fc0:	f007 ffc2 	bl	802cf48 <__aeabi_atexit>
 8024fc4:	4b05      	ldr	r3, [pc, #20]	@ (8024fdc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024fc6:	646b      	str	r3, [r5, #68]	@ 0x44
 8024fc8:	4b07      	ldr	r3, [pc, #28]	@ (8024fe8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024fca:	64ab      	str	r3, [r5, #72]	@ 0x48
 8024fcc:	bd38      	pop	{r3, r4, r5, pc}
 8024fce:	bf00      	nop
 8024fd0:	200123d0 	.word	0x200123d0
 8024fd4:	20000000 	.word	0x20000000
 8024fd8:	080210e3 	.word	0x080210e3
 8024fdc:	2000008c 	.word	0x2000008c
 8024fe0:	200123d4 	.word	0x200123d4
 8024fe4:	080210e1 	.word	0x080210e1
 8024fe8:	20000090 	.word	0x20000090

08024fec <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8024fec:	b538      	push	{r3, r4, r5, lr}
 8024fee:	4c15      	ldr	r4, [pc, #84]	@ (8025044 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8024ff0:	4605      	mov	r5, r0
 8024ff2:	7823      	ldrb	r3, [r4, #0]
 8024ff4:	f3bf 8f5b 	dmb	ish
 8024ff8:	07da      	lsls	r2, r3, #31
 8024ffa:	d40b      	bmi.n	8025014 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024ffc:	4620      	mov	r0, r4
 8024ffe:	f007 ffaa 	bl	802cf56 <__cxa_guard_acquire>
 8025002:	b138      	cbz	r0, 8025014 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8025004:	4620      	mov	r0, r4
 8025006:	f007 ffb2 	bl	802cf6e <__cxa_guard_release>
 802500a:	4a0f      	ldr	r2, [pc, #60]	@ (8025048 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802500c:	490f      	ldr	r1, [pc, #60]	@ (802504c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802500e:	4810      	ldr	r0, [pc, #64]	@ (8025050 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025010:	f007 ff9a 	bl	802cf48 <__aeabi_atexit>
 8025014:	4c0f      	ldr	r4, [pc, #60]	@ (8025054 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8025016:	7823      	ldrb	r3, [r4, #0]
 8025018:	f3bf 8f5b 	dmb	ish
 802501c:	07db      	lsls	r3, r3, #31
 802501e:	d40b      	bmi.n	8025038 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025020:	4620      	mov	r0, r4
 8025022:	f007 ff98 	bl	802cf56 <__cxa_guard_acquire>
 8025026:	b138      	cbz	r0, 8025038 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025028:	4620      	mov	r0, r4
 802502a:	f007 ffa0 	bl	802cf6e <__cxa_guard_release>
 802502e:	4a06      	ldr	r2, [pc, #24]	@ (8025048 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025030:	4909      	ldr	r1, [pc, #36]	@ (8025058 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8025032:	480a      	ldr	r0, [pc, #40]	@ (802505c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8025034:	f007 ff88 	bl	802cf48 <__aeabi_atexit>
 8025038:	4b05      	ldr	r3, [pc, #20]	@ (8025050 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802503a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 802503c:	4b07      	ldr	r3, [pc, #28]	@ (802505c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802503e:	642b      	str	r3, [r5, #64]	@ 0x40
 8025040:	bd38      	pop	{r3, r4, r5, pc}
 8025042:	bf00      	nop
 8025044:	200123a0 	.word	0x200123a0
 8025048:	20000000 	.word	0x20000000
 802504c:	080210df 	.word	0x080210df
 8025050:	2000005c 	.word	0x2000005c
 8025054:	200123a4 	.word	0x200123a4
 8025058:	080210dd 	.word	0x080210dd
 802505c:	20000060 	.word	0x20000060

08025060 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8025060:	b538      	push	{r3, r4, r5, lr}
 8025062:	4c15      	ldr	r4, [pc, #84]	@ (80250b8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8025064:	4605      	mov	r5, r0
 8025066:	7823      	ldrb	r3, [r4, #0]
 8025068:	f3bf 8f5b 	dmb	ish
 802506c:	07da      	lsls	r2, r3, #31
 802506e:	d40b      	bmi.n	8025088 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025070:	4620      	mov	r0, r4
 8025072:	f007 ff70 	bl	802cf56 <__cxa_guard_acquire>
 8025076:	b138      	cbz	r0, 8025088 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025078:	4620      	mov	r0, r4
 802507a:	f007 ff78 	bl	802cf6e <__cxa_guard_release>
 802507e:	4a0f      	ldr	r2, [pc, #60]	@ (80250bc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8025080:	490f      	ldr	r1, [pc, #60]	@ (80250c0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8025082:	4810      	ldr	r0, [pc, #64]	@ (80250c4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8025084:	f007 ff60 	bl	802cf48 <__aeabi_atexit>
 8025088:	4c0f      	ldr	r4, [pc, #60]	@ (80250c8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802508a:	7823      	ldrb	r3, [r4, #0]
 802508c:	f3bf 8f5b 	dmb	ish
 8025090:	07db      	lsls	r3, r3, #31
 8025092:	d40b      	bmi.n	80250ac <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8025094:	4620      	mov	r0, r4
 8025096:	f007 ff5e 	bl	802cf56 <__cxa_guard_acquire>
 802509a:	b138      	cbz	r0, 80250ac <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802509c:	4620      	mov	r0, r4
 802509e:	f007 ff66 	bl	802cf6e <__cxa_guard_release>
 80250a2:	4a06      	ldr	r2, [pc, #24]	@ (80250bc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80250a4:	4909      	ldr	r1, [pc, #36]	@ (80250cc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80250a6:	480a      	ldr	r0, [pc, #40]	@ (80250d0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80250a8:	f007 ff4e 	bl	802cf48 <__aeabi_atexit>
 80250ac:	4b05      	ldr	r3, [pc, #20]	@ (80250c4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80250ae:	636b      	str	r3, [r5, #52]	@ 0x34
 80250b0:	4b07      	ldr	r3, [pc, #28]	@ (80250d0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80250b2:	63ab      	str	r3, [r5, #56]	@ 0x38
 80250b4:	bd38      	pop	{r3, r4, r5, pc}
 80250b6:	bf00      	nop
 80250b8:	200123bc 	.word	0x200123bc
 80250bc:	20000000 	.word	0x20000000
 80250c0:	080210e7 	.word	0x080210e7
 80250c4:	20000078 	.word	0x20000078
 80250c8:	200123c0 	.word	0x200123c0
 80250cc:	080210e5 	.word	0x080210e5
 80250d0:	2000007c 	.word	0x2000007c

080250d4 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 80250d4:	b510      	push	{r4, lr}
 80250d6:	4604      	mov	r4, r0
 80250d8:	f7ff ff14 	bl	8024f04 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80250dc:	4620      	mov	r0, r4
 80250de:	f7ff ff85 	bl	8024fec <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80250e2:	4620      	mov	r0, r4
 80250e4:	f7ff ff48 	bl	8024f78 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80250e8:	4620      	mov	r0, r4
 80250ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80250ee:	f7ff bfb7 	b.w	8025060 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080250f4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80250f4:	b538      	push	{r3, r4, r5, lr}
 80250f6:	4c15      	ldr	r4, [pc, #84]	@ (802514c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80250f8:	4605      	mov	r5, r0
 80250fa:	7823      	ldrb	r3, [r4, #0]
 80250fc:	f3bf 8f5b 	dmb	ish
 8025100:	07da      	lsls	r2, r3, #31
 8025102:	d40b      	bmi.n	802511c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025104:	4620      	mov	r0, r4
 8025106:	f007 ff26 	bl	802cf56 <__cxa_guard_acquire>
 802510a:	b138      	cbz	r0, 802511c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802510c:	4620      	mov	r0, r4
 802510e:	f007 ff2e 	bl	802cf6e <__cxa_guard_release>
 8025112:	4a0f      	ldr	r2, [pc, #60]	@ (8025150 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025114:	490f      	ldr	r1, [pc, #60]	@ (8025154 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8025116:	4810      	ldr	r0, [pc, #64]	@ (8025158 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025118:	f007 ff16 	bl	802cf48 <__aeabi_atexit>
 802511c:	4c0f      	ldr	r4, [pc, #60]	@ (802515c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802511e:	7823      	ldrb	r3, [r4, #0]
 8025120:	f3bf 8f5b 	dmb	ish
 8025124:	07db      	lsls	r3, r3, #31
 8025126:	d40b      	bmi.n	8025140 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025128:	4620      	mov	r0, r4
 802512a:	f007 ff14 	bl	802cf56 <__cxa_guard_acquire>
 802512e:	b138      	cbz	r0, 8025140 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025130:	4620      	mov	r0, r4
 8025132:	f007 ff1c 	bl	802cf6e <__cxa_guard_release>
 8025136:	4a06      	ldr	r2, [pc, #24]	@ (8025150 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025138:	4909      	ldr	r1, [pc, #36]	@ (8025160 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802513a:	480a      	ldr	r0, [pc, #40]	@ (8025164 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802513c:	f007 ff04 	bl	802cf48 <__aeabi_atexit>
 8025140:	4b05      	ldr	r3, [pc, #20]	@ (8025158 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025142:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8025144:	4b07      	ldr	r3, [pc, #28]	@ (8025164 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8025146:	662b      	str	r3, [r5, #96]	@ 0x60
 8025148:	bd38      	pop	{r3, r4, r5, pc}
 802514a:	bf00      	nop
 802514c:	20012398 	.word	0x20012398
 8025150:	20000000 	.word	0x20000000
 8025154:	080210d3 	.word	0x080210d3
 8025158:	20000054 	.word	0x20000054
 802515c:	2001239c 	.word	0x2001239c
 8025160:	080210d1 	.word	0x080210d1
 8025164:	20000058 	.word	0x20000058

08025168 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8025168:	b538      	push	{r3, r4, r5, lr}
 802516a:	4c15      	ldr	r4, [pc, #84]	@ (80251c0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 802516c:	4605      	mov	r5, r0
 802516e:	7823      	ldrb	r3, [r4, #0]
 8025170:	f3bf 8f5b 	dmb	ish
 8025174:	07da      	lsls	r2, r3, #31
 8025176:	d40b      	bmi.n	8025190 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8025178:	4620      	mov	r0, r4
 802517a:	f007 feec 	bl	802cf56 <__cxa_guard_acquire>
 802517e:	b138      	cbz	r0, 8025190 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8025180:	4620      	mov	r0, r4
 8025182:	f007 fef4 	bl	802cf6e <__cxa_guard_release>
 8025186:	4a0f      	ldr	r2, [pc, #60]	@ (80251c4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8025188:	490f      	ldr	r1, [pc, #60]	@ (80251c8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802518a:	4810      	ldr	r0, [pc, #64]	@ (80251cc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802518c:	f007 fedc 	bl	802cf48 <__aeabi_atexit>
 8025190:	4c0f      	ldr	r4, [pc, #60]	@ (80251d0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8025192:	7823      	ldrb	r3, [r4, #0]
 8025194:	f3bf 8f5b 	dmb	ish
 8025198:	07db      	lsls	r3, r3, #31
 802519a:	d40b      	bmi.n	80251b4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802519c:	4620      	mov	r0, r4
 802519e:	f007 feda 	bl	802cf56 <__cxa_guard_acquire>
 80251a2:	b138      	cbz	r0, 80251b4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80251a4:	4620      	mov	r0, r4
 80251a6:	f007 fee2 	bl	802cf6e <__cxa_guard_release>
 80251aa:	4a06      	ldr	r2, [pc, #24]	@ (80251c4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80251ac:	4909      	ldr	r1, [pc, #36]	@ (80251d4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80251ae:	480a      	ldr	r0, [pc, #40]	@ (80251d8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80251b0:	f007 feca 	bl	802cf48 <__aeabi_atexit>
 80251b4:	4b05      	ldr	r3, [pc, #20]	@ (80251cc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80251b6:	656b      	str	r3, [r5, #84]	@ 0x54
 80251b8:	4b07      	ldr	r3, [pc, #28]	@ (80251d8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80251ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 80251bc:	bd38      	pop	{r3, r4, r5, pc}
 80251be:	bf00      	nop
 80251c0:	20012370 	.word	0x20012370
 80251c4:	20000000 	.word	0x20000000
 80251c8:	080210d7 	.word	0x080210d7
 80251cc:	2000002c 	.word	0x2000002c
 80251d0:	20012374 	.word	0x20012374
 80251d4:	080210d5 	.word	0x080210d5
 80251d8:	20000030 	.word	0x20000030

080251dc <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 80251dc:	b510      	push	{r4, lr}
 80251de:	4604      	mov	r4, r0
 80251e0:	f7ff ff88 	bl	80250f4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80251e4:	4620      	mov	r0, r4
 80251e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251ea:	f7ff bfbd 	b.w	8025168 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080251f0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80251f0:	b538      	push	{r3, r4, r5, lr}
 80251f2:	4c0b      	ldr	r4, [pc, #44]	@ (8025220 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 80251f4:	4605      	mov	r5, r0
 80251f6:	7823      	ldrb	r3, [r4, #0]
 80251f8:	f3bf 8f5b 	dmb	ish
 80251fc:	07db      	lsls	r3, r3, #31
 80251fe:	d40b      	bmi.n	8025218 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025200:	4620      	mov	r0, r4
 8025202:	f007 fea8 	bl	802cf56 <__cxa_guard_acquire>
 8025206:	b138      	cbz	r0, 8025218 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025208:	4620      	mov	r0, r4
 802520a:	f007 feb0 	bl	802cf6e <__cxa_guard_release>
 802520e:	4a05      	ldr	r2, [pc, #20]	@ (8025224 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8025210:	4905      	ldr	r1, [pc, #20]	@ (8025228 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 8025212:	4806      	ldr	r0, [pc, #24]	@ (802522c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 8025214:	f007 fe98 	bl	802cf48 <__aeabi_atexit>
 8025218:	4b04      	ldr	r3, [pc, #16]	@ (802522c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 802521a:	66ab      	str	r3, [r5, #104]	@ 0x68
 802521c:	bd38      	pop	{r3, r4, r5, pc}
 802521e:	bf00      	nop
 8025220:	200123a8 	.word	0x200123a8
 8025224:	20000000 	.word	0x20000000
 8025228:	080210cd 	.word	0x080210cd
 802522c:	20000064 	.word	0x20000064

08025230 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025230:	b538      	push	{r3, r4, r5, lr}
 8025232:	4c0b      	ldr	r4, [pc, #44]	@ (8025260 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 8025234:	4605      	mov	r5, r0
 8025236:	7823      	ldrb	r3, [r4, #0]
 8025238:	f3bf 8f5b 	dmb	ish
 802523c:	07db      	lsls	r3, r3, #31
 802523e:	d40b      	bmi.n	8025258 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025240:	4620      	mov	r0, r4
 8025242:	f007 fe88 	bl	802cf56 <__cxa_guard_acquire>
 8025246:	b138      	cbz	r0, 8025258 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025248:	4620      	mov	r0, r4
 802524a:	f007 fe90 	bl	802cf6e <__cxa_guard_release>
 802524e:	4a05      	ldr	r2, [pc, #20]	@ (8025264 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 8025250:	4905      	ldr	r1, [pc, #20]	@ (8025268 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 8025252:	4806      	ldr	r0, [pc, #24]	@ (802526c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8025254:	f007 fe78 	bl	802cf48 <__aeabi_atexit>
 8025258:	4b04      	ldr	r3, [pc, #16]	@ (802526c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 802525a:	666b      	str	r3, [r5, #100]	@ 0x64
 802525c:	bd38      	pop	{r3, r4, r5, pc}
 802525e:	bf00      	nop
 8025260:	20012380 	.word	0x20012380
 8025264:	20000000 	.word	0x20000000
 8025268:	080210cf 	.word	0x080210cf
 802526c:	2000003c 	.word	0x2000003c

08025270 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 8025270:	b510      	push	{r4, lr}
 8025272:	4604      	mov	r4, r0
 8025274:	f7ff ffbc 	bl	80251f0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8025278:	4620      	mov	r0, r4
 802527a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802527e:	f7ff bfd7 	b.w	8025230 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08025284 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8025284:	b538      	push	{r3, r4, r5, lr}
 8025286:	4c15      	ldr	r4, [pc, #84]	@ (80252dc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8025288:	4605      	mov	r5, r0
 802528a:	7823      	ldrb	r3, [r4, #0]
 802528c:	f3bf 8f5b 	dmb	ish
 8025290:	07da      	lsls	r2, r3, #31
 8025292:	d40b      	bmi.n	80252ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025294:	4620      	mov	r0, r4
 8025296:	f007 fe5e 	bl	802cf56 <__cxa_guard_acquire>
 802529a:	b138      	cbz	r0, 80252ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802529c:	4620      	mov	r0, r4
 802529e:	f007 fe66 	bl	802cf6e <__cxa_guard_release>
 80252a2:	4a0f      	ldr	r2, [pc, #60]	@ (80252e0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80252a4:	490f      	ldr	r1, [pc, #60]	@ (80252e4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80252a6:	4810      	ldr	r0, [pc, #64]	@ (80252e8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80252a8:	f007 fe4e 	bl	802cf48 <__aeabi_atexit>
 80252ac:	4c0f      	ldr	r4, [pc, #60]	@ (80252ec <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80252ae:	7823      	ldrb	r3, [r4, #0]
 80252b0:	f3bf 8f5b 	dmb	ish
 80252b4:	07db      	lsls	r3, r3, #31
 80252b6:	d40b      	bmi.n	80252d0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80252b8:	4620      	mov	r0, r4
 80252ba:	f007 fe4c 	bl	802cf56 <__cxa_guard_acquire>
 80252be:	b138      	cbz	r0, 80252d0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80252c0:	4620      	mov	r0, r4
 80252c2:	f007 fe54 	bl	802cf6e <__cxa_guard_release>
 80252c6:	4a06      	ldr	r2, [pc, #24]	@ (80252e0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80252c8:	4909      	ldr	r1, [pc, #36]	@ (80252f0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80252ca:	480a      	ldr	r0, [pc, #40]	@ (80252f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80252cc:	f007 fe3c 	bl	802cf48 <__aeabi_atexit>
 80252d0:	4b05      	ldr	r3, [pc, #20]	@ (80252e8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80252d2:	676b      	str	r3, [r5, #116]	@ 0x74
 80252d4:	4b07      	ldr	r3, [pc, #28]	@ (80252f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80252d6:	67ab      	str	r3, [r5, #120]	@ 0x78
 80252d8:	bd38      	pop	{r3, r4, r5, pc}
 80252da:	bf00      	nop
 80252dc:	20012378 	.word	0x20012378
 80252e0:	20000000 	.word	0x20000000
 80252e4:	080210c7 	.word	0x080210c7
 80252e8:	20000034 	.word	0x20000034
 80252ec:	2001237c 	.word	0x2001237c
 80252f0:	080210c5 	.word	0x080210c5
 80252f4:	20000038 	.word	0x20000038

080252f8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 80252f8:	b538      	push	{r3, r4, r5, lr}
 80252fa:	4c15      	ldr	r4, [pc, #84]	@ (8025350 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80252fc:	4605      	mov	r5, r0
 80252fe:	7823      	ldrb	r3, [r4, #0]
 8025300:	f3bf 8f5b 	dmb	ish
 8025304:	07da      	lsls	r2, r3, #31
 8025306:	d40b      	bmi.n	8025320 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025308:	4620      	mov	r0, r4
 802530a:	f007 fe24 	bl	802cf56 <__cxa_guard_acquire>
 802530e:	b138      	cbz	r0, 8025320 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025310:	4620      	mov	r0, r4
 8025312:	f007 fe2c 	bl	802cf6e <__cxa_guard_release>
 8025316:	4a0f      	ldr	r2, [pc, #60]	@ (8025354 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025318:	490f      	ldr	r1, [pc, #60]	@ (8025358 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802531a:	4810      	ldr	r0, [pc, #64]	@ (802535c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802531c:	f007 fe14 	bl	802cf48 <__aeabi_atexit>
 8025320:	4c0f      	ldr	r4, [pc, #60]	@ (8025360 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8025322:	7823      	ldrb	r3, [r4, #0]
 8025324:	f3bf 8f5b 	dmb	ish
 8025328:	07db      	lsls	r3, r3, #31
 802532a:	d40b      	bmi.n	8025344 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802532c:	4620      	mov	r0, r4
 802532e:	f007 fe12 	bl	802cf56 <__cxa_guard_acquire>
 8025332:	b138      	cbz	r0, 8025344 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025334:	4620      	mov	r0, r4
 8025336:	f007 fe1a 	bl	802cf6e <__cxa_guard_release>
 802533a:	4a06      	ldr	r2, [pc, #24]	@ (8025354 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802533c:	4909      	ldr	r1, [pc, #36]	@ (8025364 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802533e:	480a      	ldr	r0, [pc, #40]	@ (8025368 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025340:	f007 fe02 	bl	802cf48 <__aeabi_atexit>
 8025344:	4b05      	ldr	r3, [pc, #20]	@ (802535c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025346:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8025348:	4b07      	ldr	r3, [pc, #28]	@ (8025368 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802534a:	672b      	str	r3, [r5, #112]	@ 0x70
 802534c:	bd38      	pop	{r3, r4, r5, pc}
 802534e:	bf00      	nop
 8025350:	20012368 	.word	0x20012368
 8025354:	20000000 	.word	0x20000000
 8025358:	080210cb 	.word	0x080210cb
 802535c:	20000024 	.word	0x20000024
 8025360:	2001236c 	.word	0x2001236c
 8025364:	080210c9 	.word	0x080210c9
 8025368:	20000028 	.word	0x20000028

0802536c <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 802536c:	b510      	push	{r4, lr}
 802536e:	4604      	mov	r4, r0
 8025370:	f7ff ff88 	bl	8025284 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8025374:	4620      	mov	r0, r4
 8025376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802537a:	f7ff bfbd 	b.w	80252f8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

0802537e <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 802537e:	b510      	push	{r4, lr}
 8025380:	4604      	mov	r4, r0
 8025382:	f7ff fff3 	bl	802536c <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 8025386:	4620      	mov	r0, r4
 8025388:	f7ff ff72 	bl	8025270 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 802538c:	4620      	mov	r0, r4
 802538e:	f7ff fdaf 	bl	8024ef0 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 8025392:	4620      	mov	r0, r4
 8025394:	f7ff fce4 	bl	8024d60 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 8025398:	4620      	mov	r0, r4
 802539a:	f7ff fd5f 	bl	8024e5c <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 802539e:	4620      	mov	r0, r4
 80253a0:	f7ff fe98 	bl	80250d4 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 80253a4:	4620      	mov	r0, r4
 80253a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253aa:	f7ff bf17 	b.w	80251dc <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>
	...

080253b0 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev>:
 80253b0:	b538      	push	{r3, r4, r5, lr}
 80253b2:	4c0b      	ldr	r4, [pc, #44]	@ (80253e0 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x30>)
 80253b4:	4605      	mov	r5, r0
 80253b6:	7823      	ldrb	r3, [r4, #0]
 80253b8:	f3bf 8f5b 	dmb	ish
 80253bc:	07db      	lsls	r3, r3, #31
 80253be:	d40b      	bmi.n	80253d8 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x28>
 80253c0:	4620      	mov	r0, r4
 80253c2:	f007 fdc8 	bl	802cf56 <__cxa_guard_acquire>
 80253c6:	b138      	cbz	r0, 80253d8 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x28>
 80253c8:	4620      	mov	r0, r4
 80253ca:	f007 fdd0 	bl	802cf6e <__cxa_guard_release>
 80253ce:	4a05      	ldr	r2, [pc, #20]	@ (80253e4 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x34>)
 80253d0:	4905      	ldr	r1, [pc, #20]	@ (80253e8 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x38>)
 80253d2:	4806      	ldr	r0, [pc, #24]	@ (80253ec <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x3c>)
 80253d4:	f007 fdb8 	bl	802cf48 <__aeabi_atexit>
 80253d8:	4b04      	ldr	r3, [pc, #16]	@ (80253ec <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x3c>)
 80253da:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80253dc:	bd38      	pop	{r3, r4, r5, pc}
 80253de:	bf00      	nop
 80253e0:	2001235c 	.word	0x2001235c
 80253e4:	20000000 	.word	0x20000000
 80253e8:	080210c3 	.word	0x080210c3
 80253ec:	2000001c 	.word	0x2000001c

080253f0 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv>:
 80253f0:	b538      	push	{r3, r4, r5, lr}
 80253f2:	4c0b      	ldr	r4, [pc, #44]	@ (8025420 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x30>)
 80253f4:	4605      	mov	r5, r0
 80253f6:	7823      	ldrb	r3, [r4, #0]
 80253f8:	f3bf 8f5b 	dmb	ish
 80253fc:	07db      	lsls	r3, r3, #31
 80253fe:	d40b      	bmi.n	8025418 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x28>
 8025400:	4620      	mov	r0, r4
 8025402:	f007 fda8 	bl	802cf56 <__cxa_guard_acquire>
 8025406:	b138      	cbz	r0, 8025418 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x28>
 8025408:	4620      	mov	r0, r4
 802540a:	f007 fdb0 	bl	802cf6e <__cxa_guard_release>
 802540e:	4a05      	ldr	r2, [pc, #20]	@ (8025424 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x34>)
 8025410:	4905      	ldr	r1, [pc, #20]	@ (8025428 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x38>)
 8025412:	4806      	ldr	r0, [pc, #24]	@ (802542c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x3c>)
 8025414:	f007 fd98 	bl	802cf48 <__aeabi_atexit>
 8025418:	4b04      	ldr	r3, [pc, #16]	@ (802542c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x3c>)
 802541a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 802541e:	bd38      	pop	{r3, r4, r5, pc}
 8025420:	20012360 	.word	0x20012360
 8025424:	20000000 	.word	0x20000000
 8025428:	080210c1 	.word	0x080210c1
 802542c:	20000020 	.word	0x20000020

08025430 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev>:
 8025430:	b570      	push	{r4, r5, r6, lr}
 8025432:	4d0d      	ldr	r5, [pc, #52]	@ (8025468 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8025434:	4606      	mov	r6, r0
 8025436:	4c0d      	ldr	r4, [pc, #52]	@ (802546c <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8025438:	782b      	ldrb	r3, [r5, #0]
 802543a:	f3bf 8f5b 	dmb	ish
 802543e:	f013 0f01 	tst.w	r3, #1
 8025442:	d10d      	bne.n	8025460 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025444:	4628      	mov	r0, r5
 8025446:	f007 fd86 	bl	802cf56 <__cxa_guard_acquire>
 802544a:	b148      	cbz	r0, 8025460 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x30>
 802544c:	4b08      	ldr	r3, [pc, #32]	@ (8025470 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x40>)
 802544e:	4628      	mov	r0, r5
 8025450:	6023      	str	r3, [r4, #0]
 8025452:	f007 fd8c 	bl	802cf6e <__cxa_guard_release>
 8025456:	4a07      	ldr	r2, [pc, #28]	@ (8025474 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8025458:	4620      	mov	r0, r4
 802545a:	4907      	ldr	r1, [pc, #28]	@ (8025478 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x48>)
 802545c:	f007 fd74 	bl	802cf48 <__aeabi_atexit>
 8025460:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8025464:	bd70      	pop	{r4, r5, r6, pc}
 8025466:	bf00      	nop
 8025468:	20012364 	.word	0x20012364
 802546c:	200124dc 	.word	0x200124dc
 8025470:	080324b0 	.word	0x080324b0
 8025474:	20000000 	.word	0x20000000
 8025478:	080210bf 	.word	0x080210bf

0802547c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_AllEv>:
 802547c:	b510      	push	{r4, lr}
 802547e:	4604      	mov	r4, r0
 8025480:	f7ff ff96 	bl	80253b0 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev>
 8025484:	4620      	mov	r0, r4
 8025486:	f7ff ffb3 	bl	80253f0 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv>
 802548a:	4620      	mov	r0, r4
 802548c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025490:	f7ff bfce 	b.w	8025430 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev>

08025494 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv>:
 8025494:	b570      	push	{r4, r5, r6, lr}
 8025496:	4d0d      	ldr	r5, [pc, #52]	@ (80254cc <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x38>)
 8025498:	4606      	mov	r6, r0
 802549a:	4c0d      	ldr	r4, [pc, #52]	@ (80254d0 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x3c>)
 802549c:	782b      	ldrb	r3, [r5, #0]
 802549e:	f3bf 8f5b 	dmb	ish
 80254a2:	f013 0f01 	tst.w	r3, #1
 80254a6:	d10d      	bne.n	80254c4 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x30>
 80254a8:	4628      	mov	r0, r5
 80254aa:	f007 fd54 	bl	802cf56 <__cxa_guard_acquire>
 80254ae:	b148      	cbz	r0, 80254c4 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x30>
 80254b0:	4b08      	ldr	r3, [pc, #32]	@ (80254d4 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x40>)
 80254b2:	4628      	mov	r0, r5
 80254b4:	6023      	str	r3, [r4, #0]
 80254b6:	f007 fd5a 	bl	802cf6e <__cxa_guard_release>
 80254ba:	4a07      	ldr	r2, [pc, #28]	@ (80254d8 <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x44>)
 80254bc:	4620      	mov	r0, r4
 80254be:	4907      	ldr	r1, [pc, #28]	@ (80254dc <_ZN8touchgfx8LCD32bpp21enableDecompressorRGBEv+0x48>)
 80254c0:	f007 fd42 	bl	802cf48 <__aeabi_atexit>
 80254c4:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 80254c8:	bd70      	pop	{r4, r5, r6, pc}
 80254ca:	bf00      	nop
 80254cc:	20012358 	.word	0x20012358
 80254d0:	200123d8 	.word	0x200123d8
 80254d4:	080324cc 	.word	0x080324cc
 80254d8:	20000000 	.word	0x20000000
 80254dc:	080210bd 	.word	0x080210bd

080254e0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 80254e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254e4:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	@ 0x38
 80254e8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80254ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80254f0:	f1b8 0f00 	cmp.w	r8, #0
 80254f4:	fb08 640e 	mla	r4, r8, lr, r6
 80254f8:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 80254fc:	9001      	str	r0, [sp, #4]
 80254fe:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8025502:	eb02 0a04 	add.w	sl, r2, r4
 8025506:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
 802550a:	6808      	ldr	r0, [r1, #0]
 802550c:	f2c0 80dc 	blt.w	80256c8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8025510:	45c3      	cmp	fp, r8
 8025512:	f340 80d9 	ble.w	80256c8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8025516:	2e00      	cmp	r6, #0
 8025518:	f2c0 80d4 	blt.w	80256c4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 802551c:	45b6      	cmp	lr, r6
 802551e:	f340 80d1 	ble.w	80256c4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8025522:	5d12      	ldrb	r2, [r2, r4]
 8025524:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8025528:	ea4f 222c 	mov.w	r2, ip, asr #8
 802552c:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8025530:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025534:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025538:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802553c:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 8025540:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 8025544:	fa5f fc8c 	uxtb.w	ip, ip
 8025548:	0212      	lsls	r2, r2, #8
 802554a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802554e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8025552:	ea42 020c 	orr.w	r2, r2, ip
 8025556:	1c74      	adds	r4, r6, #1
 8025558:	f100 80b7 	bmi.w	80256ca <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 802555c:	45a6      	cmp	lr, r4
 802555e:	f340 80b4 	ble.w	80256ca <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8025562:	2d00      	cmp	r5, #0
 8025564:	f000 80b1 	beq.w	80256ca <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8025568:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802556c:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8025570:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8025574:	ea4f 292c 	mov.w	r9, ip, asr #8
 8025578:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802557c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025580:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8025584:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8025588:	fa5f fc8c 	uxtb.w	ip, ip
 802558c:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 8025590:	0224      	lsls	r4, r4, #8
 8025592:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025596:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 802559a:	ea49 090c 	orr.w	r9, r9, ip
 802559e:	f118 0801 	adds.w	r8, r8, #1
 80255a2:	f100 8096 	bmi.w	80256d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80255a6:	45c3      	cmp	fp, r8
 80255a8:	f340 8093 	ble.w	80256d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80255ac:	9c01      	ldr	r4, [sp, #4]
 80255ae:	2c00      	cmp	r4, #0
 80255b0:	f000 808f 	beq.w	80256d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80255b4:	2e00      	cmp	r6, #0
 80255b6:	f2c0 808a 	blt.w	80256ce <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80255ba:	45b6      	cmp	lr, r6
 80255bc:	f340 8087 	ble.w	80256ce <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80255c0:	f81a 400e 	ldrb.w	r4, [sl, lr]
 80255c4:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 80255c8:	ea4f 2824 	mov.w	r8, r4, asr #8
 80255cc:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80255d0:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80255d4:	00e4      	lsls	r4, r4, #3
 80255d6:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80255da:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 80255de:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 80255e2:	b2e4      	uxtb	r4, r4
 80255e4:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80255e8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80255ec:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 80255f0:	ea48 0804 	orr.w	r8, r8, r4
 80255f4:	3601      	adds	r6, #1
 80255f6:	d419      	bmi.n	802562c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80255f8:	45b6      	cmp	lr, r6
 80255fa:	dd17      	ble.n	802562c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80255fc:	b1b5      	cbz	r5, 802562c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80255fe:	44d6      	add	lr, sl
 8025600:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025604:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8025608:	10dc      	asrs	r4, r3, #3
 802560a:	1218      	asrs	r0, r3, #8
 802560c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8025610:	00db      	lsls	r3, r3, #3
 8025612:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025616:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802561a:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 802561e:	b2db      	uxtb	r3, r3
 8025620:	0220      	lsls	r0, r4, #8
 8025622:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025626:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802562a:	4318      	orrs	r0, r3
 802562c:	b2ad      	uxth	r5, r5
 802562e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8025632:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8025636:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802563a:	fb05 fa03 	mul.w	sl, r5, r3
 802563e:	012d      	lsls	r5, r5, #4
 8025640:	2fff      	cmp	r7, #255	@ 0xff
 8025642:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 8025646:	f5c5 7b80 	rsb	fp, r5, #256	@ 0x100
 802564a:	eba5 050a 	sub.w	r5, r5, sl
 802564e:	fa1f fe83 	uxth.w	lr, r3
 8025652:	f009 13ff 	and.w	r3, r9, #16711935	@ 0xff00ff
 8025656:	b2ad      	uxth	r5, r5
 8025658:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802565c:	ebab 0b0e 	sub.w	fp, fp, lr
 8025660:	fb05 f303 	mul.w	r3, r5, r3
 8025664:	fa1f fb8b 	uxth.w	fp, fp
 8025668:	fb05 f509 	mul.w	r5, r5, r9
 802566c:	fb0b 3606 	mla	r6, fp, r6, r3
 8025670:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8025674:	fb0b 5502 	mla	r5, fp, r2, r5
 8025678:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802567c:	fb0a 6603 	mla	r6, sl, r3, r6
 8025680:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
 8025684:	fb0a 5000 	mla	r0, sl, r0, r5
 8025688:	fb0e 6303 	mla	r3, lr, r3, r6
 802568c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8025690:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 8025694:	f408 437f 	and.w	r3, r8, #65280	@ 0xff00
 8025698:	fb0e 0303 	mla	r3, lr, r3, r0
 802569c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80256a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80256a4:	ea43 0306 	orr.w	r3, r3, r6
 80256a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80256ac:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80256b0:	b2d4      	uxtb	r4, r2
 80256b2:	b2c5      	uxtb	r5, r0
 80256b4:	d10f      	bne.n	80256d6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 80256b6:	700b      	strb	r3, [r1, #0]
 80256b8:	7048      	strb	r0, [r1, #1]
 80256ba:	708a      	strb	r2, [r1, #2]
 80256bc:	70cf      	strb	r7, [r1, #3]
 80256be:	b003      	add	sp, #12
 80256c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256c4:	4602      	mov	r2, r0
 80256c6:	e746      	b.n	8025556 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 80256c8:	4602      	mov	r2, r0
 80256ca:	4681      	mov	r9, r0
 80256cc:	e767      	b.n	802559e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 80256ce:	4680      	mov	r8, r0
 80256d0:	e790      	b.n	80255f4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 80256d2:	4680      	mov	r8, r0
 80256d4:	e7aa      	b.n	802562c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80256d6:	2f00      	cmp	r7, #0
 80256d8:	d0f1      	beq.n	80256be <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 80256da:	78ce      	ldrb	r6, [r1, #3]
 80256dc:	b2db      	uxtb	r3, r3
 80256de:	fb17 f505 	smulbb	r5, r7, r5
 80256e2:	fb07 f206 	mul.w	r2, r7, r6
 80256e6:	1c50      	adds	r0, r2, #1
 80256e8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80256ec:	19ba      	adds	r2, r7, r6
 80256ee:	1200      	asrs	r0, r0, #8
 80256f0:	1a12      	subs	r2, r2, r0
 80256f2:	1a30      	subs	r0, r6, r0
 80256f4:	780e      	ldrb	r6, [r1, #0]
 80256f6:	b2d2      	uxtb	r2, r2
 80256f8:	4346      	muls	r6, r0
 80256fa:	70ca      	strb	r2, [r1, #3]
 80256fc:	fb07 6303 	mla	r3, r7, r3, r6
 8025700:	fb17 f704 	smulbb	r7, r7, r4
 8025704:	fb93 f3f2 	sdiv	r3, r3, r2
 8025708:	700b      	strb	r3, [r1, #0]
 802570a:	784b      	ldrb	r3, [r1, #1]
 802570c:	fb00 5303 	mla	r3, r0, r3, r5
 8025710:	fb93 f3f2 	sdiv	r3, r3, r2
 8025714:	704b      	strb	r3, [r1, #1]
 8025716:	788b      	ldrb	r3, [r1, #2]
 8025718:	fb00 7703 	mla	r7, r0, r3, r7
 802571c:	fb97 f7f2 	sdiv	r7, r7, r2
 8025720:	708f      	strb	r7, [r1, #2]
 8025722:	e7cc      	b.n	80256be <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

08025724 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025728:	b097      	sub	sp, #92	@ 0x5c
 802572a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802572e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8025730:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8025732:	9014      	str	r0, [sp, #80]	@ 0x50
 8025734:	910c      	str	r1, [sp, #48]	@ 0x30
 8025736:	6850      	ldr	r0, [r2, #4]
 8025738:	9309      	str	r3, [sp, #36]	@ 0x24
 802573a:	6812      	ldr	r2, [r2, #0]
 802573c:	f89d 40a4 	ldrb.w	r4, [sp, #164]	@ 0xa4
 8025740:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8025744:	e9dd a621 	ldrd	sl, r6, [sp, #132]	@ 0x84
 8025748:	fb00 1303 	mla	r3, r0, r3, r1
 802574c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025750:	930a      	str	r3, [sp, #40]	@ 0x28
 8025752:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025754:	681b      	ldr	r3, [r3, #0]
 8025756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025758:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802575a:	685f      	ldr	r7, [r3, #4]
 802575c:	3704      	adds	r7, #4
 802575e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025760:	2b00      	cmp	r3, #0
 8025762:	dc03      	bgt.n	802576c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025766:	2b00      	cmp	r3, #0
 8025768:	f340 826a 	ble.w	8025c40 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 802576c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802576e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025772:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025776:	1e48      	subs	r0, r1, #1
 8025778:	f102 3cff 	add.w	ip, r2, #4294967295
 802577c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802577e:	2b00      	cmp	r3, #0
 8025780:	f340 80ce 	ble.w	8025920 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025784:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 8025788:	ea4f 4326 	mov.w	r3, r6, asr #16
 802578c:	d406      	bmi.n	802579c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802578e:	4586      	cmp	lr, r0
 8025790:	da04      	bge.n	802579c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025792:	2b00      	cmp	r3, #0
 8025794:	db02      	blt.n	802579c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025796:	4563      	cmp	r3, ip
 8025798:	f2c0 80c3 	blt.w	8025922 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802579c:	f11e 0e01 	adds.w	lr, lr, #1
 80257a0:	f100 80b3 	bmi.w	802590a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80257a4:	4571      	cmp	r1, lr
 80257a6:	f2c0 80b0 	blt.w	802590a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80257aa:	3301      	adds	r3, #1
 80257ac:	f100 80ad 	bmi.w	802590a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80257b0:	429a      	cmp	r2, r3
 80257b2:	f2c0 80aa 	blt.w	802590a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80257b6:	e9dd b809 	ldrd	fp, r8, [sp, #36]	@ 0x24
 80257ba:	f1bb 0f00 	cmp.w	fp, #0
 80257be:	f340 80ce 	ble.w	802595e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257c2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80257c4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80257c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80257ca:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80257ce:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80257d2:	ea5f 422a 	movs.w	r2, sl, asr #16
 80257d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80257da:	689b      	ldr	r3, [r3, #8]
 80257dc:	f100 8141 	bmi.w	8025a62 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80257e0:	f103 39ff 	add.w	r9, r3, #4294967295
 80257e4:	454a      	cmp	r2, r9
 80257e6:	f280 813c 	bge.w	8025a62 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80257ea:	f1bc 0f00 	cmp.w	ip, #0
 80257ee:	f2c0 8138 	blt.w	8025a62 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80257f2:	f10e 39ff 	add.w	r9, lr, #4294967295
 80257f6:	45cc      	cmp	ip, r9
 80257f8:	f280 8133 	bge.w	8025a62 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80257fc:	b21b      	sxth	r3, r3
 80257fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025800:	fb0c 2203 	mla	r2, ip, r3, r2
 8025804:	eb05 0902 	add.w	r9, r5, r2
 8025808:	5caa      	ldrb	r2, [r5, r2]
 802580a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802580e:	2800      	cmp	r0, #0
 8025810:	f000 80e9 	beq.w	80259e6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8025814:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025818:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802581c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802581e:	b151      	cbz	r1, 8025836 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025820:	eb09 0203 	add.w	r2, r9, r3
 8025824:	f819 3003 	ldrb.w	r3, [r9, r3]
 8025828:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802582c:	930d      	str	r3, [sp, #52]	@ 0x34
 802582e:	7853      	ldrb	r3, [r2, #1]
 8025830:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025834:	9310      	str	r3, [sp, #64]	@ 0x40
 8025836:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025838:	fb10 f201 	smulbb	r2, r0, r1
 802583c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802583e:	2cff      	cmp	r4, #255	@ 0xff
 8025840:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025844:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025848:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802584c:	ea4f 02e2 	mov.w	r2, r2, asr #3
 8025850:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025854:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8025858:	ea4c 0c03 	orr.w	ip, ip, r3
 802585c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802585e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8025862:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025866:	ea43 0305 	orr.w	r3, r3, r5
 802586a:	fb02 f303 	mul.w	r3, r2, r3
 802586e:	fb09 330c 	mla	r3, r9, ip, r3
 8025872:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025876:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802587a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802587e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025882:	f1c1 0c10 	rsb	ip, r1, #16
 8025886:	ebac 0c00 	sub.w	ip, ip, r0
 802588a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802588e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025892:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025898:	ea4f 4003 	mov.w	r0, r3, lsl #16
 802589c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80258a0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80258a4:	ea40 0003 	orr.w	r0, r0, r3
 80258a8:	fb02 c200 	mla	r2, r2, r0, ip
 80258ac:	ea4f 5352 	mov.w	r3, r2, lsr #21
 80258b0:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80258b4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80258b8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80258bc:	ea42 0203 	orr.w	r2, r2, r3
 80258c0:	b293      	uxth	r3, r2
 80258c2:	ea4f 2223 	mov.w	r2, r3, asr #8
 80258c6:	ea4f 01e3 	mov.w	r1, r3, asr #3
 80258ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80258ce:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80258d2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80258d6:	b2db      	uxtb	r3, r3
 80258d8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80258dc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80258e0:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80258e4:	f040 8088 	bne.w	80259f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80258e8:	f888 3000 	strb.w	r3, [r8]
 80258ec:	f888 1001 	strb.w	r1, [r8, #1]
 80258f0:	f888 2002 	strb.w	r2, [r8, #2]
 80258f4:	f888 4003 	strb.w	r4, [r8, #3]
 80258f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80258fa:	f108 0804 	add.w	r8, r8, #4
 80258fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025902:	449a      	add	sl, r3
 8025904:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025906:	441e      	add	r6, r3
 8025908:	e757      	b.n	80257ba <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802590a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802590c:	449a      	add	sl, r3
 802590e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025910:	441e      	add	r6, r3
 8025912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025914:	3b01      	subs	r3, #1
 8025916:	9309      	str	r3, [sp, #36]	@ 0x24
 8025918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802591a:	3304      	adds	r3, #4
 802591c:	930a      	str	r3, [sp, #40]	@ 0x28
 802591e:	e72d      	b.n	802577c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025920:	d024      	beq.n	802596c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025924:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8025926:	3b01      	subs	r3, #1
 8025928:	fb00 a003 	mla	r0, r0, r3, sl
 802592c:	1400      	asrs	r0, r0, #16
 802592e:	f53f af42 	bmi.w	80257b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025932:	3901      	subs	r1, #1
 8025934:	4288      	cmp	r0, r1
 8025936:	f6bf af3e 	bge.w	80257b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802593a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802593c:	fb01 6303 	mla	r3, r1, r3, r6
 8025940:	141b      	asrs	r3, r3, #16
 8025942:	f53f af38 	bmi.w	80257b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025946:	3a01      	subs	r2, #1
 8025948:	4293      	cmp	r3, r2
 802594a:	f6bf af34 	bge.w	80257b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802594e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025950:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8025954:	3304      	adds	r3, #4
 8025956:	f1b9 0f00 	cmp.w	r9, #0
 802595a:	f300 80a1 	bgt.w	8025aa0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802595e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025960:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025966:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802596a:	930a      	str	r3, [sp, #40]	@ 0x28
 802596c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802596e:	2b00      	cmp	r3, #0
 8025970:	f340 8166 	ble.w	8025c40 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8025974:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025978:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802597a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802597e:	eeb0 6a62 	vmov.f32	s12, s5
 8025982:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025986:	ee31 1a05 	vadd.f32	s2, s2, s10
 802598a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802598e:	ee16 aa10 	vmov	sl, s12
 8025992:	eeb0 6a43 	vmov.f32	s12, s6
 8025996:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802599a:	ee16 6a10 	vmov	r6, s12
 802599e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80259a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80259a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80259aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80259ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80259b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80259b6:	ee12 2a90 	vmov	r2, s5
 80259ba:	eef0 2a47 	vmov.f32	s5, s14
 80259be:	fb92 f3f3 	sdiv	r3, r2, r3
 80259c2:	ee13 2a10 	vmov	r2, s6
 80259c6:	9323      	str	r3, [sp, #140]	@ 0x8c
 80259c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80259ca:	eeb0 3a67 	vmov.f32	s6, s15
 80259ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80259d2:	9324      	str	r3, [sp, #144]	@ 0x90
 80259d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80259d8:	3b01      	subs	r3, #1
 80259da:	930c      	str	r3, [sp, #48]	@ 0x30
 80259dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80259de:	bf08      	it	eq
 80259e0:	4613      	moveq	r3, r2
 80259e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80259e4:	e6bb      	b.n	802575e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80259e6:	2900      	cmp	r1, #0
 80259e8:	f43f af25 	beq.w	8025836 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80259ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80259f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80259f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80259f6:	e71e      	b.n	8025836 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80259f8:	2c00      	cmp	r4, #0
 80259fa:	f43f af7d 	beq.w	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80259fe:	f898 e003 	ldrb.w	lr, [r8, #3]
 8025a02:	fb13 f304 	smulbb	r3, r3, r4
 8025a06:	fb14 f101 	smulbb	r1, r4, r1
 8025a0a:	fb14 f202 	smulbb	r2, r4, r2
 8025a0e:	fb04 fc0e 	mul.w	ip, r4, lr
 8025a12:	f10c 0001 	add.w	r0, ip, #1
 8025a16:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025a1a:	eb04 0c0e 	add.w	ip, r4, lr
 8025a1e:	1200      	asrs	r0, r0, #8
 8025a20:	ebac 0c00 	sub.w	ip, ip, r0
 8025a24:	ebae 0000 	sub.w	r0, lr, r0
 8025a28:	f898 e000 	ldrb.w	lr, [r8]
 8025a2c:	fa5f fc8c 	uxtb.w	ip, ip
 8025a30:	fb00 330e 	mla	r3, r0, lr, r3
 8025a34:	f888 c003 	strb.w	ip, [r8, #3]
 8025a38:	fb93 f3fc 	sdiv	r3, r3, ip
 8025a3c:	f888 3000 	strb.w	r3, [r8]
 8025a40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025a44:	fb00 1103 	mla	r1, r0, r3, r1
 8025a48:	f898 3002 	ldrb.w	r3, [r8, #2]
 8025a4c:	fb00 2003 	mla	r0, r0, r3, r2
 8025a50:	fb91 f1fc 	sdiv	r1, r1, ip
 8025a54:	fb90 f0fc 	sdiv	r0, r0, ip
 8025a58:	f888 1001 	strb.w	r1, [r8, #1]
 8025a5c:	f888 0002 	strb.w	r0, [r8, #2]
 8025a60:	e74a      	b.n	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025a62:	f112 0901 	adds.w	r9, r2, #1
 8025a66:	f53f af47 	bmi.w	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025a6a:	454b      	cmp	r3, r9
 8025a6c:	f6ff af44 	blt.w	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025a70:	f11c 0901 	adds.w	r9, ip, #1
 8025a74:	f53f af40 	bmi.w	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025a78:	45ce      	cmp	lr, r9
 8025a7a:	f6ff af3d 	blt.w	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025a7e:	9202      	str	r2, [sp, #8]
 8025a80:	b21b      	sxth	r3, r3
 8025a82:	fa0f f28e 	sxth.w	r2, lr
 8025a86:	9300      	str	r3, [sp, #0]
 8025a88:	463b      	mov	r3, r7
 8025a8a:	9201      	str	r2, [sp, #4]
 8025a8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025a8e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025a92:	e9cd c003 	strd	ip, r0, [sp, #12]
 8025a96:	4641      	mov	r1, r8
 8025a98:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8025a9a:	f7ff fd21 	bl	80254e0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 8025a9e:	e72b      	b.n	80258f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025aa0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8025aa2:	ea4f 412a 	mov.w	r1, sl, asr #16
 8025aa6:	1430      	asrs	r0, r6, #16
 8025aa8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025aaa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025aae:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8025ab2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025ab6:	fb02 1000 	mla	r0, r2, r0, r1
 8025aba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025abc:	4401      	add	r1, r0
 8025abe:	5c28      	ldrb	r0, [r5, r0]
 8025ac0:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 8025ac4:	f1b8 0f00 	cmp.w	r8, #0
 8025ac8:	d07d      	beq.n	8025bc6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8025aca:	f891 e001 	ldrb.w	lr, [r1, #1]
 8025ace:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8025ad2:	9511      	str	r5, [sp, #68]	@ 0x44
 8025ad4:	f1bc 0f00 	cmp.w	ip, #0
 8025ad8:	d00a      	beq.n	8025af0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025ada:	eb01 0e02 	add.w	lr, r1, r2
 8025ade:	5c8a      	ldrb	r2, [r1, r2]
 8025ae0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025ae4:	920e      	str	r2, [sp, #56]	@ 0x38
 8025ae6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025aea:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025aee:	9212      	str	r2, [sp, #72]	@ 0x48
 8025af0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025af2:	fb18 f10c 	smulbb	r1, r8, ip
 8025af6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8025af8:	2cff      	cmp	r4, #255	@ 0xff
 8025afa:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8025afe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025b02:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8025b06:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8025b0a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025b0e:	ea4e 0e02 	orr.w	lr, lr, r2
 8025b12:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8025b16:	9215      	str	r2, [sp, #84]	@ 0x54
 8025b18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025b1a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8025b1c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025b20:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025b24:	ea42 020b 	orr.w	r2, r2, fp
 8025b28:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025b2c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025b30:	fb01 f202 	mul.w	r2, r1, r2
 8025b34:	fb05 2e0e 	mla	lr, r5, lr, r2
 8025b38:	f00b 62fc 	and.w	r2, fp, #132120576	@ 0x7e00000
 8025b3c:	ea42 0b00 	orr.w	fp, r2, r0
 8025b40:	f1cc 0010 	rsb	r0, ip, #16
 8025b44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025b46:	eba0 0808 	sub.w	r8, r0, r8
 8025b4a:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8025b4e:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8025b52:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025b56:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025b5a:	f422 68fc 	bic.w	r8, r2, #2016	@ 0x7e0
 8025b5e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025b62:	ea4b 0808 	orr.w	r8, fp, r8
 8025b66:	fb01 ee08 	mla	lr, r1, r8, lr
 8025b6a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025b6e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025b72:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025b76:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025b7a:	ea42 0e0e 	orr.w	lr, r2, lr
 8025b7e:	fa1f f28e 	uxth.w	r2, lr
 8025b82:	ea4f 2122 	mov.w	r1, r2, asr #8
 8025b86:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8025b8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025b8e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025b92:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025b96:	b2d2      	uxtb	r2, r2
 8025b98:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025b9c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025ba0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025ba4:	d117      	bne.n	8025bd6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8025ba6:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025baa:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025bae:	f803 1c02 	strb.w	r1, [r3, #-2]
 8025bb2:	f803 4c01 	strb.w	r4, [r3, #-1]
 8025bb6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025bb8:	3304      	adds	r3, #4
 8025bba:	f109 39ff 	add.w	r9, r9, #4294967295
 8025bbe:	4492      	add	sl, r2
 8025bc0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025bc2:	4416      	add	r6, r2
 8025bc4:	e6c7      	b.n	8025956 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025bc6:	f1bc 0f00 	cmp.w	ip, #0
 8025bca:	d091      	beq.n	8025af0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025bcc:	5c8a      	ldrb	r2, [r1, r2]
 8025bce:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025bd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8025bd4:	e78c      	b.n	8025af0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025bd6:	2c00      	cmp	r4, #0
 8025bd8:	d0ed      	beq.n	8025bb6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8025bda:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8025bde:	fb12 f204 	smulbb	r2, r2, r4
 8025be2:	fb14 f000 	smulbb	r0, r4, r0
 8025be6:	fb14 f101 	smulbb	r1, r4, r1
 8025bea:	fb04 fc08 	mul.w	ip, r4, r8
 8025bee:	f10c 0e01 	add.w	lr, ip, #1
 8025bf2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8025bf6:	eb04 0c08 	add.w	ip, r4, r8
 8025bfa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025bfe:	ebac 0c0e 	sub.w	ip, ip, lr
 8025c02:	eba8 0e0e 	sub.w	lr, r8, lr
 8025c06:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8025c0a:	fa5f fc8c 	uxtb.w	ip, ip
 8025c0e:	fb0e 2208 	mla	r2, lr, r8, r2
 8025c12:	f803 cc01 	strb.w	ip, [r3, #-1]
 8025c16:	fb92 f2fc 	sdiv	r2, r2, ip
 8025c1a:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025c1e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8025c22:	fb0e 0002 	mla	r0, lr, r2, r0
 8025c26:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8025c2a:	fb0e 1e02 	mla	lr, lr, r2, r1
 8025c2e:	fb90 f0fc 	sdiv	r0, r0, ip
 8025c32:	fb9e fefc 	sdiv	lr, lr, ip
 8025c36:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025c3a:	f803 ec02 	strb.w	lr, [r3, #-2]
 8025c3e:	e7ba      	b.n	8025bb6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8025c40:	b017      	add	sp, #92	@ 0x5c
 8025c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c46 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 8025c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c4a:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	@ 0x2c
 8025c4e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8025c52:	f1be 0f00 	cmp.w	lr, #0
 8025c56:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8025c5a:	fb0e 7409 	mla	r4, lr, r9, r7
 8025c5e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8025c62:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8025c66:	eb02 0a04 	add.w	sl, r2, r4
 8025c6a:	6808      	ldr	r0, [r1, #0]
 8025c6c:	f2c0 80c5 	blt.w	8025dfa <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8025c70:	45f0      	cmp	r8, lr
 8025c72:	f340 80c2 	ble.w	8025dfa <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8025c76:	2f00      	cmp	r7, #0
 8025c78:	f2c0 80bd 	blt.w	8025df6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8025c7c:	45b9      	cmp	r9, r7
 8025c7e:	f340 80ba 	ble.w	8025df6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8025c82:	5d12      	ldrb	r2, [r2, r4]
 8025c84:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8025c88:	122c      	asrs	r4, r5, #8
 8025c8a:	10ea      	asrs	r2, r5, #3
 8025c8c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8025c90:	00ed      	lsls	r5, r5, #3
 8025c92:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025c96:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8025c9a:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8025c9e:	b2ed      	uxtb	r5, r5
 8025ca0:	0224      	lsls	r4, r4, #8
 8025ca2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8025ca6:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8025caa:	432c      	orrs	r4, r5
 8025cac:	1c7a      	adds	r2, r7, #1
 8025cae:	f100 80a7 	bmi.w	8025e00 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025cb2:	4591      	cmp	r9, r2
 8025cb4:	f340 80a4 	ble.w	8025e00 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025cb8:	2e00      	cmp	r6, #0
 8025cba:	f000 80a1 	beq.w	8025e00 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025cbe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025cc2:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 8025cc6:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8025cca:	ea4f 252b 	mov.w	r5, fp, asr #8
 8025cce:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025cd2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8025cd6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025cda:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025cde:	fa5f fb8b 	uxtb.w	fp, fp
 8025ce2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8025ce6:	0212      	lsls	r2, r2, #8
 8025ce8:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8025cec:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8025cf0:	ea45 050b 	orr.w	r5, r5, fp
 8025cf4:	f11e 0e01 	adds.w	lr, lr, #1
 8025cf8:	f100 8086 	bmi.w	8025e08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025cfc:	45f0      	cmp	r8, lr
 8025cfe:	f340 8083 	ble.w	8025e08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025d02:	f1bc 0f00 	cmp.w	ip, #0
 8025d06:	d07f      	beq.n	8025e08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025d08:	2f00      	cmp	r7, #0
 8025d0a:	db7b      	blt.n	8025e04 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8025d0c:	45b9      	cmp	r9, r7
 8025d0e:	dd79      	ble.n	8025e04 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8025d10:	f81a 2009 	ldrb.w	r2, [sl, r9]
 8025d14:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8025d18:	ea4f 222e 	mov.w	r2, lr, asr #8
 8025d1c:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8025d20:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025d24:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025d28:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8025d2c:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8025d30:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 8025d34:	fa5f fe8e 	uxtb.w	lr, lr
 8025d38:	0212      	lsls	r2, r2, #8
 8025d3a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8025d3e:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8025d42:	ea42 020e 	orr.w	r2, r2, lr
 8025d46:	3701      	adds	r7, #1
 8025d48:	d419      	bmi.n	8025d7e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8025d4a:	45b9      	cmp	r9, r7
 8025d4c:	dd17      	ble.n	8025d7e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8025d4e:	b1b6      	cbz	r6, 8025d7e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8025d50:	44d1      	add	r9, sl
 8025d52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8025d56:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8025d5a:	10df      	asrs	r7, r3, #3
 8025d5c:	1218      	asrs	r0, r3, #8
 8025d5e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025d62:	00db      	lsls	r3, r3, #3
 8025d64:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025d68:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8025d6c:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8025d70:	b2db      	uxtb	r3, r3
 8025d72:	0238      	lsls	r0, r7, #8
 8025d74:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025d78:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8025d7c:	4318      	orrs	r0, r3
 8025d7e:	b2b6      	uxth	r6, r6
 8025d80:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 8025d84:	fa1f f78c 	uxth.w	r7, ip
 8025d88:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025d8c:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8025d90:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025d94:	fb06 fc07 	mul.w	ip, r6, r7
 8025d98:	0136      	lsls	r6, r6, #4
 8025d9a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8025d9e:	f5c6 7e80 	rsb	lr, r6, #256	@ 0x100
 8025da2:	eba6 060c 	sub.w	r6, r6, ip
 8025da6:	b2bf      	uxth	r7, r7
 8025da8:	b2b6      	uxth	r6, r6
 8025daa:	ebae 0e07 	sub.w	lr, lr, r7
 8025dae:	4373      	muls	r3, r6
 8025db0:	fa1f fe8e 	uxth.w	lr, lr
 8025db4:	4375      	muls	r5, r6
 8025db6:	fb0e 3808 	mla	r8, lr, r8, r3
 8025dba:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8025dbe:	fb0e 5404 	mla	r4, lr, r4, r5
 8025dc2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025dc6:	fb0c 8803 	mla	r8, ip, r3, r8
 8025dca:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8025dce:	fb0c 4000 	mla	r0, ip, r0, r4
 8025dd2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025dd6:	fb07 8303 	mla	r3, r7, r3, r8
 8025dda:	fb07 0002 	mla	r0, r7, r2, r0
 8025dde:	0a1b      	lsrs	r3, r3, #8
 8025de0:	0a00      	lsrs	r0, r0, #8
 8025de2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025de6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025dea:	4318      	orrs	r0, r3
 8025dec:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8025df0:	6008      	str	r0, [r1, #0]
 8025df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025df6:	4604      	mov	r4, r0
 8025df8:	e758      	b.n	8025cac <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 8025dfa:	4605      	mov	r5, r0
 8025dfc:	4604      	mov	r4, r0
 8025dfe:	e779      	b.n	8025cf4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8025e00:	4605      	mov	r5, r0
 8025e02:	e777      	b.n	8025cf4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8025e04:	4602      	mov	r2, r0
 8025e06:	e79e      	b.n	8025d46 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 8025e08:	4602      	mov	r2, r0
 8025e0a:	e7b8      	b.n	8025d7e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08025e0c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e10:	b093      	sub	sp, #76	@ 0x4c
 8025e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025e16:	920f      	str	r2, [sp, #60]	@ 0x3c
 8025e18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025e1a:	9010      	str	r0, [sp, #64]	@ 0x40
 8025e1c:	9108      	str	r1, [sp, #32]
 8025e1e:	6850      	ldr	r0, [r2, #4]
 8025e20:	9306      	str	r3, [sp, #24]
 8025e22:	6812      	ldr	r2, [r2, #0]
 8025e24:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8025e28:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8025e2c:	fb00 1303 	mla	r3, r0, r3, r1
 8025e30:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8025e34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025e36:	681b      	ldr	r3, [r3, #0]
 8025e38:	9307      	str	r3, [sp, #28]
 8025e3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025e3c:	685f      	ldr	r7, [r3, #4]
 8025e3e:	3704      	adds	r7, #4
 8025e40:	9b08      	ldr	r3, [sp, #32]
 8025e42:	2b00      	cmp	r3, #0
 8025e44:	dc03      	bgt.n	8025e4e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8025e46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	f340 81d9 	ble.w	8026200 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025e4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025e50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e58:	1e48      	subs	r0, r1, #1
 8025e5a:	f102 3cff 	add.w	ip, r2, #4294967295
 8025e5e:	9b06      	ldr	r3, [sp, #24]
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	f340 80bc 	ble.w	8025fde <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025e66:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025e6a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025e6e:	d406      	bmi.n	8025e7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025e70:	4586      	cmp	lr, r0
 8025e72:	da04      	bge.n	8025e7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025e74:	2b00      	cmp	r3, #0
 8025e76:	db02      	blt.n	8025e7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025e78:	4563      	cmp	r3, ip
 8025e7a:	f2c0 80b1 	blt.w	8025fe0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025e7e:	f11e 0e01 	adds.w	lr, lr, #1
 8025e82:	f100 80a2 	bmi.w	8025fca <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025e86:	4571      	cmp	r1, lr
 8025e88:	f2c0 809f 	blt.w	8025fca <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025e8c:	3301      	adds	r3, #1
 8025e8e:	f100 809c 	bmi.w	8025fca <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025e92:	429a      	cmp	r2, r3
 8025e94:	f2c0 8099 	blt.w	8025fca <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025e98:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025e9c:	46c8      	mov	r8, r9
 8025e9e:	f1bb 0f00 	cmp.w	fp, #0
 8025ea2:	f340 80b9 	ble.w	8026018 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025ea6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025ea8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025eac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025eae:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025eb2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025eb6:	1422      	asrs	r2, r4, #16
 8025eb8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025ebc:	689b      	ldr	r3, [r3, #8]
 8025ebe:	f100 80f6 	bmi.w	80260ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025ec2:	f103 3aff 	add.w	sl, r3, #4294967295
 8025ec6:	4552      	cmp	r2, sl
 8025ec8:	f280 80f1 	bge.w	80260ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025ecc:	f1bc 0f00 	cmp.w	ip, #0
 8025ed0:	f2c0 80ed 	blt.w	80260ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025ed4:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025ed8:	45d4      	cmp	ip, sl
 8025eda:	f280 80e8 	bge.w	80260ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025ede:	b21b      	sxth	r3, r3
 8025ee0:	9d07      	ldr	r5, [sp, #28]
 8025ee2:	fb0c 2203 	mla	r2, ip, r3, r2
 8025ee6:	eb05 0a02 	add.w	sl, r5, r2
 8025eea:	5caa      	ldrb	r2, [r5, r2]
 8025eec:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8025ef0:	2800      	cmp	r0, #0
 8025ef2:	f000 80d3 	beq.w	802609c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025ef6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025efa:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025efe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025f00:	b151      	cbz	r1, 8025f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025f02:	eb0a 0203 	add.w	r2, sl, r3
 8025f06:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025f0a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025f10:	7853      	ldrb	r3, [r2, #1]
 8025f12:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025f16:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f1a:	fb10 f201 	smulbb	r2, r0, r1
 8025f1e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025f20:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025f24:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025f28:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025f2c:	10d2      	asrs	r2, r2, #3
 8025f2e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025f32:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8025f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8025f3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f3c:	041b      	lsls	r3, r3, #16
 8025f3e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025f42:	432b      	orrs	r3, r5
 8025f44:	4353      	muls	r3, r2
 8025f46:	fb0a 330c 	mla	r3, sl, ip, r3
 8025f4a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025f4e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025f52:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025f56:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025f5a:	f1c1 0c10 	rsb	ip, r1, #16
 8025f5e:	ebac 0c00 	sub.w	ip, ip, r0
 8025f62:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025f66:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025f6a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f70:	0418      	lsls	r0, r3, #16
 8025f72:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025f76:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025f7a:	4318      	orrs	r0, r3
 8025f7c:	fb02 c200 	mla	r2, r2, r0, ip
 8025f80:	0d51      	lsrs	r1, r2, #21
 8025f82:	0952      	lsrs	r2, r2, #5
 8025f84:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025f88:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025f8c:	430a      	orrs	r2, r1
 8025f8e:	b291      	uxth	r1, r2
 8025f90:	10ca      	asrs	r2, r1, #3
 8025f92:	1208      	asrs	r0, r1, #8
 8025f94:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 8025f98:	00c9      	lsls	r1, r1, #3
 8025f9a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025f9e:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8025fa2:	b2c9      	uxtb	r1, r1
 8025fa4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025fa8:	021b      	lsls	r3, r3, #8
 8025faa:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025fae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8025fb2:	430b      	orrs	r3, r1
 8025fb4:	f8c8 3000 	str.w	r3, [r8]
 8025fb8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025fba:	f108 0804 	add.w	r8, r8, #4
 8025fbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025fc2:	441c      	add	r4, r3
 8025fc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025fc6:	441e      	add	r6, r3
 8025fc8:	e769      	b.n	8025e9e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025fca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025fcc:	f109 0904 	add.w	r9, r9, #4
 8025fd0:	441c      	add	r4, r3
 8025fd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025fd4:	441e      	add	r6, r3
 8025fd6:	9b06      	ldr	r3, [sp, #24]
 8025fd8:	3b01      	subs	r3, #1
 8025fda:	9306      	str	r3, [sp, #24]
 8025fdc:	e73f      	b.n	8025e5e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025fde:	d020      	beq.n	8026022 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025fe0:	9b06      	ldr	r3, [sp, #24]
 8025fe2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025fe4:	3b01      	subs	r3, #1
 8025fe6:	fb00 4003 	mla	r0, r0, r3, r4
 8025fea:	1400      	asrs	r0, r0, #16
 8025fec:	f53f af54 	bmi.w	8025e98 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025ff0:	3901      	subs	r1, #1
 8025ff2:	4288      	cmp	r0, r1
 8025ff4:	f6bf af50 	bge.w	8025e98 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025ff8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025ffa:	fb01 6303 	mla	r3, r1, r3, r6
 8025ffe:	141b      	asrs	r3, r3, #16
 8026000:	f53f af4a 	bmi.w	8025e98 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026004:	3a01      	subs	r2, #1
 8026006:	4293      	cmp	r3, r2
 8026008:	f6bf af46 	bge.w	8025e98 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802600c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026010:	46ca      	mov	sl, r9
 8026012:	f1b8 0f00 	cmp.w	r8, #0
 8026016:	dc67      	bgt.n	80260e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8026018:	9b06      	ldr	r3, [sp, #24]
 802601a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802601e:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8026022:	9b08      	ldr	r3, [sp, #32]
 8026024:	2b00      	cmp	r3, #0
 8026026:	f340 80eb 	ble.w	8026200 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802602a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802602e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026030:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026034:	eeb0 6a62 	vmov.f32	s12, s5
 8026038:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802603c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026044:	ee16 4a10 	vmov	r4, s12
 8026048:	eeb0 6a43 	vmov.f32	s12, s6
 802604c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026050:	ee16 6a10 	vmov	r6, s12
 8026054:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026058:	ee61 7a27 	vmul.f32	s15, s2, s15
 802605c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026060:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026064:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026068:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802606c:	ee12 2a90 	vmov	r2, s5
 8026070:	eef0 2a47 	vmov.f32	s5, s14
 8026074:	fb92 f3f3 	sdiv	r3, r2, r3
 8026078:	ee13 2a10 	vmov	r2, s6
 802607c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802607e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026080:	eeb0 3a67 	vmov.f32	s6, s15
 8026084:	fb92 f3f3 	sdiv	r3, r2, r3
 8026088:	9320      	str	r3, [sp, #128]	@ 0x80
 802608a:	9b08      	ldr	r3, [sp, #32]
 802608c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802608e:	3b01      	subs	r3, #1
 8026090:	9308      	str	r3, [sp, #32]
 8026092:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026094:	bf08      	it	eq
 8026096:	4613      	moveq	r3, r2
 8026098:	9306      	str	r3, [sp, #24]
 802609a:	e6d1      	b.n	8025e40 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802609c:	2900      	cmp	r1, #0
 802609e:	f43f af3b 	beq.w	8025f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80260a2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80260a6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80260aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80260ac:	e734      	b.n	8025f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80260ae:	f112 0a01 	adds.w	sl, r2, #1
 80260b2:	d481      	bmi.n	8025fb8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80260b4:	4553      	cmp	r3, sl
 80260b6:	f6ff af7f 	blt.w	8025fb8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80260ba:	f11c 0a01 	adds.w	sl, ip, #1
 80260be:	f53f af7b 	bmi.w	8025fb8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80260c2:	45d6      	cmp	lr, sl
 80260c4:	f6ff af78 	blt.w	8025fb8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80260c8:	b21b      	sxth	r3, r3
 80260ca:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80260ce:	fa0f f28e 	sxth.w	r2, lr
 80260d2:	9300      	str	r3, [sp, #0]
 80260d4:	463b      	mov	r3, r7
 80260d6:	9201      	str	r2, [sp, #4]
 80260d8:	9a07      	ldr	r2, [sp, #28]
 80260da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80260de:	4641      	mov	r1, r8
 80260e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80260e2:	f7ff fdb0 	bl	8025c46 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 80260e6:	e767      	b.n	8025fb8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80260e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80260ea:	1422      	asrs	r2, r4, #16
 80260ec:	1431      	asrs	r1, r6, #16
 80260ee:	9d07      	ldr	r5, [sp, #28]
 80260f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80260f4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80260f8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80260fc:	fb03 2101 	mla	r1, r3, r1, r2
 8026100:	9a07      	ldr	r2, [sp, #28]
 8026102:	440a      	add	r2, r1
 8026104:	5c69      	ldrb	r1, [r5, r1]
 8026106:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802610a:	f1be 0f00 	cmp.w	lr, #0
 802610e:	d070      	beq.n	80261f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026110:	f892 c001 	ldrb.w	ip, [r2, #1]
 8026114:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8026118:	950d      	str	r5, [sp, #52]	@ 0x34
 802611a:	b150      	cbz	r0, 8026132 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802611c:	eb02 0c03 	add.w	ip, r2, r3
 8026120:	5cd3      	ldrb	r3, [r2, r3]
 8026122:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026126:	930a      	str	r3, [sp, #40]	@ 0x28
 8026128:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802612c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026130:	930e      	str	r3, [sp, #56]	@ 0x38
 8026132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026134:	fb1e f200 	smulbb	r2, lr, r0
 8026138:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802613a:	f108 38ff 	add.w	r8, r8, #4294967295
 802613e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026142:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026146:	10d2      	asrs	r2, r2, #3
 8026148:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 802614c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026150:	ea4c 0c03 	orr.w	ip, ip, r3
 8026154:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8026158:	9311      	str	r3, [sp, #68]	@ 0x44
 802615a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802615c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802615e:	041b      	lsls	r3, r3, #16
 8026160:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026164:	ea43 030b 	orr.w	r3, r3, fp
 8026168:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802616c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026170:	4353      	muls	r3, r2
 8026172:	fb05 3c0c 	mla	ip, r5, ip, r3
 8026176:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802617a:	ea43 0b01 	orr.w	fp, r3, r1
 802617e:	f1c0 0110 	rsb	r1, r0, #16
 8026182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026184:	eba1 0e0e 	sub.w	lr, r1, lr
 8026188:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802618c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8026190:	fb0e cc0b 	mla	ip, lr, fp, ip
 8026194:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8026198:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 802619c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80261a0:	ea4b 0e0e 	orr.w	lr, fp, lr
 80261a4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80261a8:	ea4f 525c 	mov.w	r2, ip, lsr #21
 80261ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80261b0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80261b4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80261b8:	ea42 0c0c 	orr.w	ip, r2, ip
 80261bc:	fa1f f28c 	uxth.w	r2, ip
 80261c0:	10d3      	asrs	r3, r2, #3
 80261c2:	1211      	asrs	r1, r2, #8
 80261c4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80261c8:	00d2      	lsls	r2, r2, #3
 80261ca:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80261ce:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80261d2:	b2d2      	uxtb	r2, r2
 80261d4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80261d8:	021b      	lsls	r3, r3, #8
 80261da:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80261de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80261e2:	431a      	orrs	r2, r3
 80261e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80261e6:	441c      	add	r4, r3
 80261e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80261ea:	f84a 2b04 	str.w	r2, [sl], #4
 80261ee:	441e      	add	r6, r3
 80261f0:	e70f      	b.n	8026012 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80261f2:	2800      	cmp	r0, #0
 80261f4:	d09d      	beq.n	8026132 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80261f6:	5cd3      	ldrb	r3, [r2, r3]
 80261f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80261fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80261fe:	e798      	b.n	8026132 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8026200:	b013      	add	sp, #76	@ 0x4c
 8026202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026206 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 8026206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802620a:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	@ 0x38
 802620e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8026212:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8026216:	f1b8 0f00 	cmp.w	r8, #0
 802621a:	fb08 750e 	mla	r5, r8, lr, r7
 802621e:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8026222:	9001      	str	r0, [sp, #4]
 8026224:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8026228:	eb02 0a05 	add.w	sl, r2, r5
 802622c:	f89d c048 	ldrb.w	ip, [sp, #72]	@ 0x48
 8026230:	6808      	ldr	r0, [r1, #0]
 8026232:	f2c0 80b2 	blt.w	802639a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 8026236:	45c3      	cmp	fp, r8
 8026238:	f340 80af 	ble.w	802639a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 802623c:	2f00      	cmp	r7, #0
 802623e:	f2c0 80aa 	blt.w	8026396 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8026242:	45be      	cmp	lr, r7
 8026244:	f340 80a7 	ble.w	8026396 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8026248:	5d55      	ldrb	r5, [r2, r5]
 802624a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802624e:	195a      	adds	r2, r3, r5
 8026250:	5d5d      	ldrb	r5, [r3, r5]
 8026252:	f892 9001 	ldrb.w	r9, [r2, #1]
 8026256:	7892      	ldrb	r2, [r2, #2]
 8026258:	0412      	lsls	r2, r2, #16
 802625a:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 802625e:	432a      	orrs	r2, r5
 8026260:	1c7d      	adds	r5, r7, #1
 8026262:	f100 809b 	bmi.w	802639c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8026266:	45ae      	cmp	lr, r5
 8026268:	f340 8098 	ble.w	802639c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 802626c:	2c00      	cmp	r4, #0
 802626e:	f000 8095 	beq.w	802639c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8026272:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8026276:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802627a:	eb03 0509 	add.w	r5, r3, r9
 802627e:	f813 9009 	ldrb.w	r9, [r3, r9]
 8026282:	786e      	ldrb	r6, [r5, #1]
 8026284:	78ad      	ldrb	r5, [r5, #2]
 8026286:	042d      	lsls	r5, r5, #16
 8026288:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 802628c:	ea45 0509 	orr.w	r5, r5, r9
 8026290:	f118 0801 	adds.w	r8, r8, #1
 8026294:	f100 8086 	bmi.w	80263a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 8026298:	45c3      	cmp	fp, r8
 802629a:	f340 8083 	ble.w	80263a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802629e:	9e01      	ldr	r6, [sp, #4]
 80262a0:	2e00      	cmp	r6, #0
 80262a2:	d07f      	beq.n	80263a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80262a4:	2f00      	cmp	r7, #0
 80262a6:	eb0a 090e 	add.w	r9, sl, lr
 80262aa:	db79      	blt.n	80263a0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80262ac:	45be      	cmp	lr, r7
 80262ae:	dd77      	ble.n	80263a0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80262b0:	f81a a00e 	ldrb.w	sl, [sl, lr]
 80262b4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80262b8:	eb03 080a 	add.w	r8, r3, sl
 80262bc:	f813 a00a 	ldrb.w	sl, [r3, sl]
 80262c0:	f898 b001 	ldrb.w	fp, [r8, #1]
 80262c4:	f898 8002 	ldrb.w	r8, [r8, #2]
 80262c8:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80262cc:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 80262d0:	ea48 080a 	orr.w	r8, r8, sl
 80262d4:	3701      	adds	r7, #1
 80262d6:	d411      	bmi.n	80262fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80262d8:	45be      	cmp	lr, r7
 80262da:	dd0f      	ble.n	80262fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80262dc:	b174      	cbz	r4, 80262fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80262de:	f899 7001 	ldrb.w	r7, [r9, #1]
 80262e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80262e6:	eb03 0e07 	add.w	lr, r3, r7
 80262ea:	5ddb      	ldrb	r3, [r3, r7]
 80262ec:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80262f0:	f89e 9001 	ldrb.w	r9, [lr, #1]
 80262f4:	0400      	lsls	r0, r0, #16
 80262f6:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 80262fa:	4318      	orrs	r0, r3
 80262fc:	b2a4      	uxth	r4, r4
 80262fe:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8026302:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 8026306:	f002 17ff 	and.w	r7, r2, #16711935	@ 0xff00ff
 802630a:	fb04 fe06 	mul.w	lr, r4, r6
 802630e:	0124      	lsls	r4, r4, #4
 8026310:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026314:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026318:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 802631c:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8026320:	eba4 040e 	sub.w	r4, r4, lr
 8026324:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026328:	b2b6      	uxth	r6, r6
 802632a:	b2a4      	uxth	r4, r4
 802632c:	eba9 0906 	sub.w	r9, r9, r6
 8026330:	fb04 f303 	mul.w	r3, r4, r3
 8026334:	fa1f f989 	uxth.w	r9, r9
 8026338:	fb04 f405 	mul.w	r4, r4, r5
 802633c:	fb09 3707 	mla	r7, r9, r7, r3
 8026340:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8026344:	fb09 4402 	mla	r4, r9, r2, r4
 8026348:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802634c:	fb0e 7703 	mla	r7, lr, r3, r7
 8026350:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
 8026354:	fb0e 4000 	mla	r0, lr, r0, r4
 8026358:	fb06 7303 	mla	r3, r6, r3, r7
 802635c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026360:	f003 17ff 	and.w	r7, r3, #16711935	@ 0xff00ff
 8026364:	f408 437f 	and.w	r3, r8, #65280	@ 0xff00
 8026368:	fb06 0303 	mla	r3, r6, r3, r0
 802636c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026370:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026374:	ea43 0307 	orr.w	r3, r3, r7
 8026378:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802637c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026380:	b2d4      	uxtb	r4, r2
 8026382:	b2c5      	uxtb	r5, r0
 8026384:	d110      	bne.n	80263a8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 8026386:	700b      	strb	r3, [r1, #0]
 8026388:	7048      	strb	r0, [r1, #1]
 802638a:	708a      	strb	r2, [r1, #2]
 802638c:	f881 c003 	strb.w	ip, [r1, #3]
 8026390:	b003      	add	sp, #12
 8026392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026396:	4602      	mov	r2, r0
 8026398:	e762      	b.n	8026260 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 802639a:	4602      	mov	r2, r0
 802639c:	4605      	mov	r5, r0
 802639e:	e777      	b.n	8026290 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 80263a0:	4680      	mov	r8, r0
 80263a2:	e797      	b.n	80262d4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 80263a4:	4680      	mov	r8, r0
 80263a6:	e7a9      	b.n	80262fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80263a8:	f1bc 0f00 	cmp.w	ip, #0
 80263ac:	d0f0      	beq.n	8026390 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 80263ae:	78ce      	ldrb	r6, [r1, #3]
 80263b0:	b2db      	uxtb	r3, r3
 80263b2:	fb1c f505 	smulbb	r5, ip, r5
 80263b6:	fb0c f206 	mul.w	r2, ip, r6
 80263ba:	1c50      	adds	r0, r2, #1
 80263bc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80263c0:	eb0c 0206 	add.w	r2, ip, r6
 80263c4:	1200      	asrs	r0, r0, #8
 80263c6:	1a12      	subs	r2, r2, r0
 80263c8:	1a30      	subs	r0, r6, r0
 80263ca:	780e      	ldrb	r6, [r1, #0]
 80263cc:	b2d2      	uxtb	r2, r2
 80263ce:	4346      	muls	r6, r0
 80263d0:	70ca      	strb	r2, [r1, #3]
 80263d2:	fb0c 6303 	mla	r3, ip, r3, r6
 80263d6:	fb1c fc04 	smulbb	ip, ip, r4
 80263da:	fb93 f3f2 	sdiv	r3, r3, r2
 80263de:	700b      	strb	r3, [r1, #0]
 80263e0:	784b      	ldrb	r3, [r1, #1]
 80263e2:	fb00 5303 	mla	r3, r0, r3, r5
 80263e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80263ea:	704b      	strb	r3, [r1, #1]
 80263ec:	788b      	ldrb	r3, [r1, #2]
 80263ee:	fb00 cc03 	mla	ip, r0, r3, ip
 80263f2:	fb9c fcf2 	sdiv	ip, ip, r2
 80263f6:	f881 c002 	strb.w	ip, [r1, #2]
 80263fa:	e7c9      	b.n	8026390 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

080263fc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80263fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026400:	b091      	sub	sp, #68	@ 0x44
 8026402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026406:	920e      	str	r2, [sp, #56]	@ 0x38
 8026408:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802640a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802640c:	910c      	str	r1, [sp, #48]	@ 0x30
 802640e:	6850      	ldr	r0, [r2, #4]
 8026410:	9309      	str	r3, [sp, #36]	@ 0x24
 8026412:	6812      	ldr	r2, [r2, #0]
 8026414:	f89d 408c 	ldrb.w	r4, [sp, #140]	@ 0x8c
 8026418:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	@ 0x80
 802641c:	fb00 1303 	mla	r3, r0, r3, r1
 8026420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026424:	930a      	str	r3, [sp, #40]	@ 0x28
 8026426:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026428:	681b      	ldr	r3, [r3, #0]
 802642a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802642c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802642e:	685d      	ldr	r5, [r3, #4]
 8026430:	3504      	adds	r5, #4
 8026432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026434:	2b00      	cmp	r3, #0
 8026436:	dc03      	bgt.n	8026440 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8026438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802643a:	2b00      	cmp	r3, #0
 802643c:	f340 825d 	ble.w	80268fa <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8026440:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026442:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026446:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802644a:	1e48      	subs	r0, r1, #1
 802644c:	1e56      	subs	r6, r2, #1
 802644e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026450:	2b00      	cmp	r3, #0
 8026452:	f340 80c9 	ble.w	80265e8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8026456:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8026458:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802645a:	143f      	asrs	r7, r7, #16
 802645c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026460:	d406      	bmi.n	8026470 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026462:	4287      	cmp	r7, r0
 8026464:	da04      	bge.n	8026470 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026466:	2b00      	cmp	r3, #0
 8026468:	db02      	blt.n	8026470 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802646a:	42b3      	cmp	r3, r6
 802646c:	f2c0 80bd 	blt.w	80265ea <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026470:	3701      	adds	r7, #1
 8026472:	f100 80aa 	bmi.w	80265ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026476:	42b9      	cmp	r1, r7
 8026478:	f2c0 80a7 	blt.w	80265ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802647c:	3301      	adds	r3, #1
 802647e:	f100 80a4 	bmi.w	80265ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026482:	429a      	cmp	r2, r3
 8026484:	f2c0 80a1 	blt.w	80265ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802648a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802648c:	930d      	str	r3, [sp, #52]	@ 0x34
 802648e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026490:	2b00      	cmp	r3, #0
 8026492:	f340 80ca 	ble.w	802662a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026496:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8026498:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802649a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802649c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80264a0:	141f      	asrs	r7, r3, #16
 80264a2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80264a4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80264a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80264aa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80264ac:	1400      	asrs	r0, r0, #16
 80264ae:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80264b2:	6892      	ldr	r2, [r2, #8]
 80264b4:	f100 8138 	bmi.w	8026728 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80264b8:	f102 3eff 	add.w	lr, r2, #4294967295
 80264bc:	4570      	cmp	r0, lr
 80264be:	f280 8133 	bge.w	8026728 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80264c2:	2f00      	cmp	r7, #0
 80264c4:	f2c0 8130 	blt.w	8026728 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80264c8:	f10c 3eff 	add.w	lr, ip, #4294967295
 80264cc:	4577      	cmp	r7, lr
 80264ce:	f280 812b 	bge.w	8026728 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80264d2:	b212      	sxth	r2, r2
 80264d4:	fb07 0002 	mla	r0, r7, r2, r0
 80264d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80264da:	eb07 0c00 	add.w	ip, r7, r0
 80264de:	5c38      	ldrb	r0, [r7, r0]
 80264e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80264e4:	eb05 0800 	add.w	r8, r5, r0
 80264e8:	2b00      	cmp	r3, #0
 80264ea:	f000 80e2 	beq.w	80266b2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80264ee:	f89c e001 	ldrb.w	lr, [ip, #1]
 80264f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80264f6:	44ae      	add	lr, r5
 80264f8:	2900      	cmp	r1, #0
 80264fa:	f000 80e3 	beq.w	80266c4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80264fe:	eb0c 0702 	add.w	r7, ip, r2
 8026502:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026506:	f897 c001 	ldrb.w	ip, [r7, #1]
 802650a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802650e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026512:	442a      	add	r2, r5
 8026514:	44ac      	add	ip, r5
 8026516:	b29b      	uxth	r3, r3
 8026518:	5c2f      	ldrb	r7, [r5, r0]
 802651a:	b289      	uxth	r1, r1
 802651c:	f89e 0000 	ldrb.w	r0, [lr]
 8026520:	f89e a001 	ldrb.w	sl, [lr, #1]
 8026524:	2cff      	cmp	r4, #255	@ 0xff
 8026526:	fb03 fb01 	mul.w	fp, r3, r1
 802652a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802652e:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026532:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8026536:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 802653a:	eba3 030b 	sub.w	r3, r3, fp
 802653e:	b289      	uxth	r1, r1
 8026540:	b29b      	uxth	r3, r3
 8026542:	eba9 0901 	sub.w	r9, r9, r1
 8026546:	fb03 f000 	mul.w	r0, r3, r0
 802654a:	fa1f f989 	uxth.w	r9, r9
 802654e:	fb03 fa0a 	mul.w	sl, r3, sl
 8026552:	fb03 f30e 	mul.w	r3, r3, lr
 8026556:	f892 e002 	ldrb.w	lr, [r2, #2]
 802655a:	fb09 0007 	mla	r0, r9, r7, r0
 802655e:	7817      	ldrb	r7, [r2, #0]
 8026560:	fb01 0007 	mla	r0, r1, r7, r0
 8026564:	f89c 7000 	ldrb.w	r7, [ip]
 8026568:	fb0b 0707 	mla	r7, fp, r7, r0
 802656c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8026570:	f898 8002 	ldrb.w	r8, [r8, #2]
 8026574:	fb09 aa00 	mla	sl, r9, r0, sl
 8026578:	7850      	ldrb	r0, [r2, #1]
 802657a:	fb09 3308 	mla	r3, r9, r8, r3
 802657e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8026582:	fb01 aa00 	mla	sl, r1, r0, sl
 8026586:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802658a:	fb01 330e 	mla	r3, r1, lr, r3
 802658e:	ea4f 2727 	mov.w	r7, r7, asr #8
 8026592:	fb0b a000 	mla	r0, fp, r0, sl
 8026596:	fb0b 3b02 	mla	fp, fp, r2, r3
 802659a:	ea4f 2020 	mov.w	r0, r0, asr #8
 802659e:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80265a2:	f040 8095 	bne.w	80266d0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80265a6:	7037      	strb	r7, [r6, #0]
 80265a8:	7070      	strb	r0, [r6, #1]
 80265aa:	f886 b002 	strb.w	fp, [r6, #2]
 80265ae:	70f4      	strb	r4, [r6, #3]
 80265b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80265b2:	3604      	adds	r6, #4
 80265b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80265b6:	4413      	add	r3, r2
 80265b8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80265ba:	931b      	str	r3, [sp, #108]	@ 0x6c
 80265bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80265be:	4413      	add	r3, r2
 80265c0:	931c      	str	r3, [sp, #112]	@ 0x70
 80265c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80265c4:	3b01      	subs	r3, #1
 80265c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80265c8:	e761      	b.n	802648e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80265ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80265cc:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80265ce:	443b      	add	r3, r7
 80265d0:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 80265d2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80265d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80265d6:	443b      	add	r3, r7
 80265d8:	931c      	str	r3, [sp, #112]	@ 0x70
 80265da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265dc:	3b01      	subs	r3, #1
 80265de:	9309      	str	r3, [sp, #36]	@ 0x24
 80265e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80265e2:	3304      	adds	r3, #4
 80265e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80265e6:	e732      	b.n	802644e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80265e8:	d026      	beq.n	8026638 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 80265ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265ec:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80265ee:	3b01      	subs	r3, #1
 80265f0:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80265f2:	fb00 6003 	mla	r0, r0, r3, r6
 80265f6:	1400      	asrs	r0, r0, #16
 80265f8:	f53f af46 	bmi.w	8026488 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80265fc:	3901      	subs	r1, #1
 80265fe:	4288      	cmp	r0, r1
 8026600:	f6bf af42 	bge.w	8026488 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026604:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8026606:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8026608:	fb01 0303 	mla	r3, r1, r3, r0
 802660c:	141b      	asrs	r3, r3, #16
 802660e:	f53f af3b 	bmi.w	8026488 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026612:	3a01      	subs	r2, #1
 8026614:	4293      	cmp	r3, r2
 8026616:	f6bf af37 	bge.w	8026488 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802661a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802661c:	1d19      	adds	r1, r3, #4
 802661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026620:	930d      	str	r3, [sp, #52]	@ 0x34
 8026622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026624:	2b00      	cmp	r3, #0
 8026626:	f300 809e 	bgt.w	8026766 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802662a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802662c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802662e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026636:	930a      	str	r3, [sp, #40]	@ 0x28
 8026638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802663a:	2b00      	cmp	r3, #0
 802663c:	f340 815d 	ble.w	80268fa <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8026640:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026644:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026646:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802664a:	eeb0 6a62 	vmov.f32	s12, s5
 802664e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026652:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026656:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802665a:	ed8d 6a1b 	vstr	s12, [sp, #108]	@ 0x6c
 802665e:	eeb0 6a43 	vmov.f32	s12, s6
 8026662:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026666:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 802666a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802666e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026672:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026676:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802667a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802667e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026682:	ee12 2a90 	vmov	r2, s5
 8026686:	eef0 2a47 	vmov.f32	s5, s14
 802668a:	fb92 f3f3 	sdiv	r3, r2, r3
 802668e:	ee13 2a10 	vmov	r2, s6
 8026692:	931d      	str	r3, [sp, #116]	@ 0x74
 8026694:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026696:	eeb0 3a67 	vmov.f32	s6, s15
 802669a:	fb92 f3f3 	sdiv	r3, r2, r3
 802669e:	931e      	str	r3, [sp, #120]	@ 0x78
 80266a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80266a4:	3b01      	subs	r3, #1
 80266a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80266a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80266aa:	bf08      	it	eq
 80266ac:	4613      	moveq	r3, r2
 80266ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80266b0:	e6bf      	b.n	8026432 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80266b2:	b151      	cbz	r1, 80266ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80266b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80266b8:	46c4      	mov	ip, r8
 80266ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80266be:	442a      	add	r2, r5
 80266c0:	46c6      	mov	lr, r8
 80266c2:	e728      	b.n	8026516 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80266c4:	46c4      	mov	ip, r8
 80266c6:	4642      	mov	r2, r8
 80266c8:	e725      	b.n	8026516 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80266ca:	46c4      	mov	ip, r8
 80266cc:	4642      	mov	r2, r8
 80266ce:	e7f7      	b.n	80266c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80266d0:	2c00      	cmp	r4, #0
 80266d2:	f43f af6d 	beq.w	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80266d6:	78f1      	ldrb	r1, [r6, #3]
 80266d8:	b2ff      	uxtb	r7, r7
 80266da:	f896 a001 	ldrb.w	sl, [r6, #1]
 80266de:	b2c0      	uxtb	r0, r0
 80266e0:	fb04 f201 	mul.w	r2, r4, r1
 80266e4:	fa5f fb8b 	uxtb.w	fp, fp
 80266e8:	1c53      	adds	r3, r2, #1
 80266ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80266ee:	1862      	adds	r2, r4, r1
 80266f0:	121b      	asrs	r3, r3, #8
 80266f2:	1ad2      	subs	r2, r2, r3
 80266f4:	1acb      	subs	r3, r1, r3
 80266f6:	7831      	ldrb	r1, [r6, #0]
 80266f8:	fb03 fa0a 	mul.w	sl, r3, sl
 80266fc:	b2d2      	uxtb	r2, r2
 80266fe:	4359      	muls	r1, r3
 8026700:	fb04 a000 	mla	r0, r4, r0, sl
 8026704:	fb04 1707 	mla	r7, r4, r7, r1
 8026708:	78b1      	ldrb	r1, [r6, #2]
 802670a:	70f2      	strb	r2, [r6, #3]
 802670c:	434b      	muls	r3, r1
 802670e:	fb04 3b0b 	mla	fp, r4, fp, r3
 8026712:	fb97 f7f2 	sdiv	r7, r7, r2
 8026716:	fb90 f0f2 	sdiv	r0, r0, r2
 802671a:	fb9b fbf2 	sdiv	fp, fp, r2
 802671e:	7037      	strb	r7, [r6, #0]
 8026720:	7070      	strb	r0, [r6, #1]
 8026722:	f886 b002 	strb.w	fp, [r6, #2]
 8026726:	e743      	b.n	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026728:	f110 0e01 	adds.w	lr, r0, #1
 802672c:	f53f af40 	bmi.w	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026730:	4572      	cmp	r2, lr
 8026732:	f6ff af3d 	blt.w	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026736:	f117 0e01 	adds.w	lr, r7, #1
 802673a:	f53f af39 	bmi.w	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802673e:	45f4      	cmp	ip, lr
 8026740:	f6ff af36 	blt.w	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026744:	b212      	sxth	r2, r2
 8026746:	9002      	str	r0, [sp, #8]
 8026748:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802674a:	9200      	str	r2, [sp, #0]
 802674c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802674e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8026752:	fa0f f38c 	sxth.w	r3, ip
 8026756:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802675a:	9301      	str	r3, [sp, #4]
 802675c:	4631      	mov	r1, r6
 802675e:	462b      	mov	r3, r5
 8026760:	f7ff fd51 	bl	8026206 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8026764:	e724      	b.n	80265b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026766:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8026768:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802676a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802676e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8026770:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026772:	1436      	asrs	r6, r6, #16
 8026774:	143f      	asrs	r7, r7, #16
 8026776:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026778:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802677c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8026780:	fb02 7606 	mla	r6, r2, r6, r7
 8026784:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026786:	eb07 0c06 	add.w	ip, r7, r6
 802678a:	5dbe      	ldrb	r6, [r7, r6]
 802678c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026790:	eb05 0806 	add.w	r8, r5, r6
 8026794:	2b00      	cmp	r3, #0
 8026796:	d06d      	beq.n	8026874 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026798:	f89c e001 	ldrb.w	lr, [ip, #1]
 802679c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80267a0:	44ae      	add	lr, r5
 80267a2:	2800      	cmp	r0, #0
 80267a4:	d06f      	beq.n	8026886 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80267a6:	eb0c 0702 	add.w	r7, ip, r2
 80267aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80267ae:	f897 c001 	ldrb.w	ip, [r7, #1]
 80267b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80267b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80267ba:	442a      	add	r2, r5
 80267bc:	44ac      	add	ip, r5
 80267be:	b29b      	uxth	r3, r3
 80267c0:	5daf      	ldrb	r7, [r5, r6]
 80267c2:	b280      	uxth	r0, r0
 80267c4:	f89e 6000 	ldrb.w	r6, [lr]
 80267c8:	f89e a001 	ldrb.w	sl, [lr, #1]
 80267cc:	2cff      	cmp	r4, #255	@ 0xff
 80267ce:	fb03 fb00 	mul.w	fp, r3, r0
 80267d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80267d6:	f89e e002 	ldrb.w	lr, [lr, #2]
 80267da:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80267de:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 80267e2:	eba3 030b 	sub.w	r3, r3, fp
 80267e6:	b280      	uxth	r0, r0
 80267e8:	b29b      	uxth	r3, r3
 80267ea:	eba9 0900 	sub.w	r9, r9, r0
 80267ee:	fb03 f606 	mul.w	r6, r3, r6
 80267f2:	fa1f f989 	uxth.w	r9, r9
 80267f6:	fb03 fa0a 	mul.w	sl, r3, sl
 80267fa:	fb03 f30e 	mul.w	r3, r3, lr
 80267fe:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026802:	fb09 6607 	mla	r6, r9, r7, r6
 8026806:	7817      	ldrb	r7, [r2, #0]
 8026808:	fb00 6607 	mla	r6, r0, r7, r6
 802680c:	f89c 7000 	ldrb.w	r7, [ip]
 8026810:	fb0b 6707 	mla	r7, fp, r7, r6
 8026814:	f898 6001 	ldrb.w	r6, [r8, #1]
 8026818:	f898 8002 	ldrb.w	r8, [r8, #2]
 802681c:	fb09 aa06 	mla	sl, r9, r6, sl
 8026820:	7856      	ldrb	r6, [r2, #1]
 8026822:	fb09 3308 	mla	r3, r9, r8, r3
 8026826:	ea4f 2727 	mov.w	r7, r7, asr #8
 802682a:	fb00 aa06 	mla	sl, r0, r6, sl
 802682e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8026832:	fb00 330e 	mla	r3, r0, lr, r3
 8026836:	f89c e002 	ldrb.w	lr, [ip, #2]
 802683a:	fb0b a606 	mla	r6, fp, r6, sl
 802683e:	fb0b 330e 	mla	r3, fp, lr, r3
 8026842:	ea4f 2626 	mov.w	r6, r6, asr #8
 8026846:	ea4f 2b23 	mov.w	fp, r3, asr #8
 802684a:	d122      	bne.n	8026892 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802684c:	f801 7c04 	strb.w	r7, [r1, #-4]
 8026850:	f801 6c03 	strb.w	r6, [r1, #-3]
 8026854:	f801 bc02 	strb.w	fp, [r1, #-2]
 8026858:	f801 4c01 	strb.w	r4, [r1, #-1]
 802685c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802685e:	3104      	adds	r1, #4
 8026860:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026862:	4413      	add	r3, r2
 8026864:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8026866:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026868:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802686a:	4413      	add	r3, r2
 802686c:	931c      	str	r3, [sp, #112]	@ 0x70
 802686e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026870:	3b01      	subs	r3, #1
 8026872:	e6d5      	b.n	8026620 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026874:	b150      	cbz	r0, 802688c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026876:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802687a:	46c4      	mov	ip, r8
 802687c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026880:	442a      	add	r2, r5
 8026882:	46c6      	mov	lr, r8
 8026884:	e79b      	b.n	80267be <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026886:	46c4      	mov	ip, r8
 8026888:	4642      	mov	r2, r8
 802688a:	e798      	b.n	80267be <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802688c:	46c4      	mov	ip, r8
 802688e:	4642      	mov	r2, r8
 8026890:	e7f7      	b.n	8026882 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8026892:	2c00      	cmp	r4, #0
 8026894:	d0e2      	beq.n	802685c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8026896:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 802689a:	b2ff      	uxtb	r7, r7
 802689c:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 80268a0:	b2f6      	uxtb	r6, r6
 80268a2:	fb04 f300 	mul.w	r3, r4, r0
 80268a6:	eb04 0c00 	add.w	ip, r4, r0
 80268aa:	fa5f fb8b 	uxtb.w	fp, fp
 80268ae:	1c5a      	adds	r2, r3, #1
 80268b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80268b4:	1213      	asrs	r3, r2, #8
 80268b6:	1ac2      	subs	r2, r0, r3
 80268b8:	ebac 0c03 	sub.w	ip, ip, r3
 80268bc:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80268c0:	fb02 fa0a 	mul.w	sl, r2, sl
 80268c4:	fa5f fc8c 	uxtb.w	ip, ip
 80268c8:	4353      	muls	r3, r2
 80268ca:	fb04 a606 	mla	r6, r4, r6, sl
 80268ce:	fb04 3707 	mla	r7, r4, r7, r3
 80268d2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80268d6:	f801 cc01 	strb.w	ip, [r1, #-1]
 80268da:	435a      	muls	r2, r3
 80268dc:	fb04 2b0b 	mla	fp, r4, fp, r2
 80268e0:	fb97 f7fc 	sdiv	r7, r7, ip
 80268e4:	fb96 f6fc 	sdiv	r6, r6, ip
 80268e8:	fb9b fbfc 	sdiv	fp, fp, ip
 80268ec:	f801 7c04 	strb.w	r7, [r1, #-4]
 80268f0:	f801 6c03 	strb.w	r6, [r1, #-3]
 80268f4:	f801 bc02 	strb.w	fp, [r1, #-2]
 80268f8:	e7b0      	b.n	802685c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 80268fa:	b011      	add	sp, #68	@ 0x44
 80268fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026900 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8026900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026904:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	@ 0x2c
 8026908:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 802690c:	f1b8 0f00 	cmp.w	r8, #0
 8026910:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8026914:	fb08 740e 	mla	r4, r8, lr, r7
 8026918:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 802691c:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8026920:	eb02 0904 	add.w	r9, r2, r4
 8026924:	6808      	ldr	r0, [r1, #0]
 8026926:	f2c0 8099 	blt.w	8026a5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 802692a:	45c2      	cmp	sl, r8
 802692c:	f340 8096 	ble.w	8026a5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8026930:	2f00      	cmp	r7, #0
 8026932:	f2c0 8091 	blt.w	8026a58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8026936:	45be      	cmp	lr, r7
 8026938:	f340 808e 	ble.w	8026a58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 802693c:	5d12      	ldrb	r2, [r2, r4]
 802693e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026942:	189c      	adds	r4, r3, r2
 8026944:	5c9a      	ldrb	r2, [r3, r2]
 8026946:	7866      	ldrb	r6, [r4, #1]
 8026948:	78a4      	ldrb	r4, [r4, #2]
 802694a:	0424      	lsls	r4, r4, #16
 802694c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8026950:	4314      	orrs	r4, r2
 8026952:	1c7a      	adds	r2, r7, #1
 8026954:	f100 8085 	bmi.w	8026a62 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026958:	4596      	cmp	lr, r2
 802695a:	f340 8082 	ble.w	8026a62 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 802695e:	2d00      	cmp	r5, #0
 8026960:	d07f      	beq.n	8026a62 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026962:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026966:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802696a:	189e      	adds	r6, r3, r2
 802696c:	5c9a      	ldrb	r2, [r3, r2]
 802696e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8026972:	78b6      	ldrb	r6, [r6, #2]
 8026974:	0436      	lsls	r6, r6, #16
 8026976:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 802697a:	4316      	orrs	r6, r2
 802697c:	f118 0801 	adds.w	r8, r8, #1
 8026980:	d473      	bmi.n	8026a6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8026982:	45c2      	cmp	sl, r8
 8026984:	dd71      	ble.n	8026a6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8026986:	f1bc 0f00 	cmp.w	ip, #0
 802698a:	d06e      	beq.n	8026a6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 802698c:	2f00      	cmp	r7, #0
 802698e:	eb09 080e 	add.w	r8, r9, lr
 8026992:	db68      	blt.n	8026a66 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8026994:	45be      	cmp	lr, r7
 8026996:	dd66      	ble.n	8026a66 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8026998:	f819 900e 	ldrb.w	r9, [r9, lr]
 802699c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80269a0:	eb03 0209 	add.w	r2, r3, r9
 80269a4:	f813 9009 	ldrb.w	r9, [r3, r9]
 80269a8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80269ac:	7892      	ldrb	r2, [r2, #2]
 80269ae:	0412      	lsls	r2, r2, #16
 80269b0:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 80269b4:	ea42 0209 	orr.w	r2, r2, r9
 80269b8:	3701      	adds	r7, #1
 80269ba:	d411      	bmi.n	80269e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 80269bc:	45be      	cmp	lr, r7
 80269be:	dd0f      	ble.n	80269e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 80269c0:	b175      	cbz	r5, 80269e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 80269c2:	f898 7001 	ldrb.w	r7, [r8, #1]
 80269c6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80269ca:	eb03 0e07 	add.w	lr, r3, r7
 80269ce:	5ddb      	ldrb	r3, [r3, r7]
 80269d0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80269d4:	f89e 8001 	ldrb.w	r8, [lr, #1]
 80269d8:	0400      	lsls	r0, r0, #16
 80269da:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 80269de:	4318      	orrs	r0, r3
 80269e0:	b2ad      	uxth	r5, r5
 80269e2:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 80269e6:	fa1f f78c 	uxth.w	r7, ip
 80269ea:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80269ee:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 80269f2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80269f6:	fb05 fc07 	mul.w	ip, r5, r7
 80269fa:	012d      	lsls	r5, r5, #4
 80269fc:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026a00:	f5c5 7e80 	rsb	lr, r5, #256	@ 0x100
 8026a04:	eba5 050c 	sub.w	r5, r5, ip
 8026a08:	b2bf      	uxth	r7, r7
 8026a0a:	b2ad      	uxth	r5, r5
 8026a0c:	ebae 0e07 	sub.w	lr, lr, r7
 8026a10:	436b      	muls	r3, r5
 8026a12:	fa1f fe8e 	uxth.w	lr, lr
 8026a16:	436e      	muls	r6, r5
 8026a18:	fb0e 3808 	mla	r8, lr, r8, r3
 8026a1c:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8026a20:	fb0e 6404 	mla	r4, lr, r4, r6
 8026a24:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026a28:	fb0c 8803 	mla	r8, ip, r3, r8
 8026a2c:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8026a30:	fb0c 4000 	mla	r0, ip, r0, r4
 8026a34:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026a38:	fb07 8303 	mla	r3, r7, r3, r8
 8026a3c:	fb07 0002 	mla	r0, r7, r2, r0
 8026a40:	0a1b      	lsrs	r3, r3, #8
 8026a42:	0a00      	lsrs	r0, r0, #8
 8026a44:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026a48:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026a4c:	4318      	orrs	r0, r3
 8026a4e:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8026a52:	6008      	str	r0, [r1, #0]
 8026a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a58:	4604      	mov	r4, r0
 8026a5a:	e77a      	b.n	8026952 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8026a5c:	4606      	mov	r6, r0
 8026a5e:	4604      	mov	r4, r0
 8026a60:	e78c      	b.n	802697c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8026a62:	4606      	mov	r6, r0
 8026a64:	e78a      	b.n	802697c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8026a66:	4602      	mov	r2, r0
 8026a68:	e7a6      	b.n	80269b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 8026a6a:	4602      	mov	r2, r0
 8026a6c:	e7b8      	b.n	80269e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08026a6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a72:	b08f      	sub	sp, #60	@ 0x3c
 8026a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026a78:	920c      	str	r2, [sp, #48]	@ 0x30
 8026a7a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026a7c:	900d      	str	r0, [sp, #52]	@ 0x34
 8026a7e:	910a      	str	r1, [sp, #40]	@ 0x28
 8026a80:	6850      	ldr	r0, [r2, #4]
 8026a82:	9306      	str	r3, [sp, #24]
 8026a84:	6812      	ldr	r2, [r2, #0]
 8026a86:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8026a8a:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8026a8e:	fb00 1303 	mla	r3, r0, r3, r1
 8026a92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026a96:	9307      	str	r3, [sp, #28]
 8026a98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026a9a:	681b      	ldr	r3, [r3, #0]
 8026a9c:	9308      	str	r3, [sp, #32]
 8026a9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026aa0:	685c      	ldr	r4, [r3, #4]
 8026aa2:	3404      	adds	r4, #4
 8026aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	dc03      	bgt.n	8026ab2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8026aaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026aac:	2b00      	cmp	r3, #0
 8026aae:	f340 81dc 	ble.w	8026e6a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026ab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026ab4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ab8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026abc:	1e48      	subs	r0, r1, #1
 8026abe:	1e56      	subs	r6, r2, #1
 8026ac0:	9b06      	ldr	r3, [sp, #24]
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	f340 80ba 	ble.w	8026c3c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026ac8:	ea5f 472b 	movs.w	r7, fp, asr #16
 8026acc:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026ad0:	d406      	bmi.n	8026ae0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026ad2:	4287      	cmp	r7, r0
 8026ad4:	da04      	bge.n	8026ae0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026ad6:	2b00      	cmp	r3, #0
 8026ad8:	db02      	blt.n	8026ae0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026ada:	42b3      	cmp	r3, r6
 8026adc:	f2c0 80af 	blt.w	8026c3e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8026ae0:	3701      	adds	r7, #1
 8026ae2:	f100 80a0 	bmi.w	8026c26 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026ae6:	42b9      	cmp	r1, r7
 8026ae8:	f2c0 809d 	blt.w	8026c26 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026aec:	3301      	adds	r3, #1
 8026aee:	f100 809a 	bmi.w	8026c26 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026af2:	429a      	cmp	r2, r3
 8026af4:	f2c0 8097 	blt.w	8026c26 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026af8:	9b06      	ldr	r3, [sp, #24]
 8026afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026afc:	9b07      	ldr	r3, [sp, #28]
 8026afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b02:	2b00      	cmp	r3, #0
 8026b04:	f340 80b8 	ble.w	8026c78 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8026b08:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8026b0a:	142e      	asrs	r6, r5, #16
 8026b0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026b0e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026b12:	68c7      	ldr	r7, [r0, #12]
 8026b14:	ea5f 402b 	movs.w	r0, fp, asr #16
 8026b18:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026b1c:	6892      	ldr	r2, [r2, #8]
 8026b1e:	f100 80fe 	bmi.w	8026d1e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026b22:	f102 3cff 	add.w	ip, r2, #4294967295
 8026b26:	4560      	cmp	r0, ip
 8026b28:	f280 80f9 	bge.w	8026d1e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026b2c:	2e00      	cmp	r6, #0
 8026b2e:	f2c0 80f6 	blt.w	8026d1e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026b32:	f107 3cff 	add.w	ip, r7, #4294967295
 8026b36:	4566      	cmp	r6, ip
 8026b38:	f280 80f1 	bge.w	8026d1e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026b3c:	b212      	sxth	r2, r2
 8026b3e:	fb06 0002 	mla	r0, r6, r2, r0
 8026b42:	9e08      	ldr	r6, [sp, #32]
 8026b44:	5c37      	ldrb	r7, [r6, r0]
 8026b46:	eb06 0e00 	add.w	lr, r6, r0
 8026b4a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026b4e:	eb04 0c07 	add.w	ip, r4, r7
 8026b52:	2b00      	cmp	r3, #0
 8026b54:	f000 80d4 	beq.w	8026d00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8026b58:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026b5c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026b60:	4426      	add	r6, r4
 8026b62:	2900      	cmp	r1, #0
 8026b64:	f000 80d5 	beq.w	8026d12 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026b68:	eb0e 0002 	add.w	r0, lr, r2
 8026b6c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026b70:	7840      	ldrb	r0, [r0, #1]
 8026b72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026b76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026b7a:	4422      	add	r2, r4
 8026b7c:	4420      	add	r0, r4
 8026b7e:	b29b      	uxth	r3, r3
 8026b80:	f814 a007 	ldrb.w	sl, [r4, r7]
 8026b84:	b289      	uxth	r1, r1
 8026b86:	7837      	ldrb	r7, [r6, #0]
 8026b88:	f896 8001 	ldrb.w	r8, [r6, #1]
 8026b8c:	fb03 f901 	mul.w	r9, r3, r1
 8026b90:	011b      	lsls	r3, r3, #4
 8026b92:	78b6      	ldrb	r6, [r6, #2]
 8026b94:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026b98:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026b9c:	eba3 0309 	sub.w	r3, r3, r9
 8026ba0:	b289      	uxth	r1, r1
 8026ba2:	b29b      	uxth	r3, r3
 8026ba4:	ebae 0e01 	sub.w	lr, lr, r1
 8026ba8:	435f      	muls	r7, r3
 8026baa:	fa1f fe8e 	uxth.w	lr, lr
 8026bae:	fb03 f808 	mul.w	r8, r3, r8
 8026bb2:	4373      	muls	r3, r6
 8026bb4:	fb0e 770a 	mla	r7, lr, sl, r7
 8026bb8:	f892 a000 	ldrb.w	sl, [r2]
 8026bbc:	fb01 770a 	mla	r7, r1, sl, r7
 8026bc0:	f890 a000 	ldrb.w	sl, [r0]
 8026bc4:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026bc8:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8026bcc:	f89c c002 	ldrb.w	ip, [ip, #2]
 8026bd0:	fb0e 8807 	mla	r8, lr, r7, r8
 8026bd4:	7857      	ldrb	r7, [r2, #1]
 8026bd6:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026bda:	fb0e 330c 	mla	r3, lr, ip, r3
 8026bde:	fb01 8807 	mla	r8, r1, r7, r8
 8026be2:	7847      	ldrb	r7, [r0, #1]
 8026be4:	fb09 8707 	mla	r7, r9, r7, r8
 8026be8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026bec:	ea4a 0707 	orr.w	r7, sl, r7
 8026bf0:	f892 a002 	ldrb.w	sl, [r2, #2]
 8026bf4:	fb01 310a 	mla	r1, r1, sl, r3
 8026bf8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026bfe:	fb09 1a0a 	mla	sl, r9, sl, r1
 8026c02:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8026c06:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 8026c0a:	ea47 070a 	orr.w	r7, r7, sl
 8026c0e:	601f      	str	r7, [r3, #0]
 8026c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c12:	3304      	adds	r3, #4
 8026c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c16:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c18:	449b      	add	fp, r3
 8026c1a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026c1c:	441d      	add	r5, r3
 8026c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c20:	3b01      	subs	r3, #1
 8026c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026c24:	e76c      	b.n	8026b00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026c26:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c28:	449b      	add	fp, r3
 8026c2a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026c2c:	441d      	add	r5, r3
 8026c2e:	9b06      	ldr	r3, [sp, #24]
 8026c30:	3b01      	subs	r3, #1
 8026c32:	9306      	str	r3, [sp, #24]
 8026c34:	9b07      	ldr	r3, [sp, #28]
 8026c36:	3304      	adds	r3, #4
 8026c38:	9307      	str	r3, [sp, #28]
 8026c3a:	e741      	b.n	8026ac0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026c3c:	d023      	beq.n	8026c86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8026c3e:	9b06      	ldr	r3, [sp, #24]
 8026c40:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026c42:	3b01      	subs	r3, #1
 8026c44:	fb00 b003 	mla	r0, r0, r3, fp
 8026c48:	1400      	asrs	r0, r0, #16
 8026c4a:	f53f af55 	bmi.w	8026af8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026c4e:	3901      	subs	r1, #1
 8026c50:	4288      	cmp	r0, r1
 8026c52:	f6bf af51 	bge.w	8026af8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026c56:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026c58:	fb01 5303 	mla	r3, r1, r3, r5
 8026c5c:	141b      	asrs	r3, r3, #16
 8026c5e:	f53f af4b 	bmi.w	8026af8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026c62:	3a01      	subs	r2, #1
 8026c64:	4293      	cmp	r3, r2
 8026c66:	f6bf af47 	bge.w	8026af8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026c6a:	9b06      	ldr	r3, [sp, #24]
 8026c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c6e:	9b07      	ldr	r3, [sp, #28]
 8026c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	dc6f      	bgt.n	8026d58 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026c78:	9b06      	ldr	r3, [sp, #24]
 8026c7a:	9a07      	ldr	r2, [sp, #28]
 8026c7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026c80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026c84:	9307      	str	r3, [sp, #28]
 8026c86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	f340 80ee 	ble.w	8026e6a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026c8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026c92:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026c94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026c98:	eeb0 6a62 	vmov.f32	s12, s5
 8026c9c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026ca0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026ca4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026ca8:	ee16 ba10 	vmov	fp, s12
 8026cac:	eeb0 6a43 	vmov.f32	s12, s6
 8026cb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026cb4:	ee16 5a10 	vmov	r5, s12
 8026cb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026cbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026cc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026cc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026cc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ccc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026cd0:	ee12 2a90 	vmov	r2, s5
 8026cd4:	eef0 2a47 	vmov.f32	s5, s14
 8026cd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8026cdc:	ee13 2a10 	vmov	r2, s6
 8026ce0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026ce2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026ce4:	eeb0 3a67 	vmov.f32	s6, s15
 8026ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8026cec:	931c      	str	r3, [sp, #112]	@ 0x70
 8026cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026cf2:	3b01      	subs	r3, #1
 8026cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8026cf6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026cf8:	bf08      	it	eq
 8026cfa:	4613      	moveq	r3, r2
 8026cfc:	9306      	str	r3, [sp, #24]
 8026cfe:	e6d1      	b.n	8026aa4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8026d00:	b151      	cbz	r1, 8026d18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026d02:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026d06:	4660      	mov	r0, ip
 8026d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026d0c:	4422      	add	r2, r4
 8026d0e:	4666      	mov	r6, ip
 8026d10:	e735      	b.n	8026b7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026d12:	4660      	mov	r0, ip
 8026d14:	4662      	mov	r2, ip
 8026d16:	e732      	b.n	8026b7e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026d18:	4660      	mov	r0, ip
 8026d1a:	4662      	mov	r2, ip
 8026d1c:	e7f7      	b.n	8026d0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8026d1e:	f110 0c01 	adds.w	ip, r0, #1
 8026d22:	f53f af75 	bmi.w	8026c10 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026d26:	4562      	cmp	r2, ip
 8026d28:	f6ff af72 	blt.w	8026c10 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026d2c:	f116 0c01 	adds.w	ip, r6, #1
 8026d30:	f53f af6e 	bmi.w	8026c10 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026d34:	4567      	cmp	r7, ip
 8026d36:	f6ff af6b 	blt.w	8026c10 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026d3a:	b23f      	sxth	r7, r7
 8026d3c:	b212      	sxth	r2, r2
 8026d3e:	9701      	str	r7, [sp, #4]
 8026d40:	9200      	str	r2, [sp, #0]
 8026d42:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8026d46:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8026d4a:	4623      	mov	r3, r4
 8026d4c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026d4e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8026d52:	f7ff fdd5 	bl	8026900 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8026d56:	e75b      	b.n	8026c10 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026d58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026d5a:	ea4f 462b 	mov.w	r6, fp, asr #16
 8026d5e:	1428      	asrs	r0, r5, #16
 8026d60:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026d64:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026d68:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026d6c:	fb02 6000 	mla	r0, r2, r0, r6
 8026d70:	9e08      	ldr	r6, [sp, #32]
 8026d72:	5c37      	ldrb	r7, [r6, r0]
 8026d74:	eb06 0e00 	add.w	lr, r6, r0
 8026d78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026d7c:	eb04 0c07 	add.w	ip, r4, r7
 8026d80:	2b00      	cmp	r3, #0
 8026d82:	d063      	beq.n	8026e4c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8026d84:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026d88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026d8c:	4426      	add	r6, r4
 8026d8e:	2900      	cmp	r1, #0
 8026d90:	d065      	beq.n	8026e5e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8026d92:	eb0e 0002 	add.w	r0, lr, r2
 8026d96:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026d9a:	7840      	ldrb	r0, [r0, #1]
 8026d9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026da0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026da4:	4422      	add	r2, r4
 8026da6:	4420      	add	r0, r4
 8026da8:	b29b      	uxth	r3, r3
 8026daa:	f814 a007 	ldrb.w	sl, [r4, r7]
 8026dae:	b289      	uxth	r1, r1
 8026db0:	7837      	ldrb	r7, [r6, #0]
 8026db2:	f896 8001 	ldrb.w	r8, [r6, #1]
 8026db6:	fb03 f901 	mul.w	r9, r3, r1
 8026dba:	011b      	lsls	r3, r3, #4
 8026dbc:	78b6      	ldrb	r6, [r6, #2]
 8026dbe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026dc2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026dc6:	eba3 0309 	sub.w	r3, r3, r9
 8026dca:	b289      	uxth	r1, r1
 8026dcc:	b29b      	uxth	r3, r3
 8026dce:	ebae 0e01 	sub.w	lr, lr, r1
 8026dd2:	435f      	muls	r7, r3
 8026dd4:	fa1f fe8e 	uxth.w	lr, lr
 8026dd8:	fb03 f808 	mul.w	r8, r3, r8
 8026ddc:	4373      	muls	r3, r6
 8026dde:	7896      	ldrb	r6, [r2, #2]
 8026de0:	fb0e 770a 	mla	r7, lr, sl, r7
 8026de4:	f892 a000 	ldrb.w	sl, [r2]
 8026de8:	fb01 770a 	mla	r7, r1, sl, r7
 8026dec:	f890 a000 	ldrb.w	sl, [r0]
 8026df0:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026df4:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8026df8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8026dfc:	fb0e 8807 	mla	r8, lr, r7, r8
 8026e00:	7857      	ldrb	r7, [r2, #1]
 8026e02:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026e06:	fb0e 330c 	mla	r3, lr, ip, r3
 8026e0a:	fb01 8807 	mla	r8, r1, r7, r8
 8026e0e:	7847      	ldrb	r7, [r0, #1]
 8026e10:	fb01 3306 	mla	r3, r1, r6, r3
 8026e14:	fb09 8707 	mla	r7, r9, r7, r8
 8026e18:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026e1c:	ea4a 0707 	orr.w	r7, sl, r7
 8026e20:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026e24:	fb09 3a0a 	mla	sl, r9, sl, r3
 8026e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e2a:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8026e2e:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 8026e32:	ea47 070a 	orr.w	r7, r7, sl
 8026e36:	f843 7b04 	str.w	r7, [r3], #4
 8026e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026e3c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026e3e:	449b      	add	fp, r3
 8026e40:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026e42:	441d      	add	r5, r3
 8026e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e46:	3b01      	subs	r3, #1
 8026e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8026e4a:	e712      	b.n	8026c72 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026e4c:	b151      	cbz	r1, 8026e64 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026e4e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026e52:	4660      	mov	r0, ip
 8026e54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026e58:	4422      	add	r2, r4
 8026e5a:	4666      	mov	r6, ip
 8026e5c:	e7a4      	b.n	8026da8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026e5e:	4660      	mov	r0, ip
 8026e60:	4662      	mov	r2, ip
 8026e62:	e7a1      	b.n	8026da8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026e64:	4660      	mov	r0, ip
 8026e66:	4662      	mov	r2, ip
 8026e68:	e7f7      	b.n	8026e5a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026e6a:	b00f      	add	sp, #60	@ 0x3c
 8026e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e70 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8026e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e74:	b085      	sub	sp, #20
 8026e76:	6808      	ldr	r0, [r1, #0]
 8026e78:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	@ 0x40
 8026e7c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	@ 0x38
 8026e80:	f1b9 0f00 	cmp.w	r9, #0
 8026e84:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8026e88:	fb09 6408 	mla	r4, r9, r8, r6
 8026e8c:	f89d c048 	ldrb.w	ip, [sp, #72]	@ 0x48
 8026e90:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026e94:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 8026e98:	eb02 0a04 	add.w	sl, r2, r4
 8026e9c:	f2c0 8103 	blt.w	80270a6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8026ea0:	45cb      	cmp	fp, r9
 8026ea2:	f340 8100 	ble.w	80270a6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8026ea6:	2e00      	cmp	r6, #0
 8026ea8:	f2c0 80fb 	blt.w	80270a2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8026eac:	45b0      	cmp	r8, r6
 8026eae:	f340 80f8 	ble.w	80270a2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8026eb2:	5d12      	ldrb	r2, [r2, r4]
 8026eb4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026eb8:	1c72      	adds	r2, r6, #1
 8026eba:	f100 80f5 	bmi.w	80270a8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8026ebe:	4590      	cmp	r8, r2
 8026ec0:	f340 80f2 	ble.w	80270a8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8026ec4:	f1bc 0f00 	cmp.w	ip, #0
 8026ec8:	f000 80ee 	beq.w	80270a8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8026ecc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026ed0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8026ed4:	f119 0901 	adds.w	r9, r9, #1
 8026ed8:	f100 80ea 	bmi.w	80270b0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8026edc:	45cb      	cmp	fp, r9
 8026ede:	f340 80e7 	ble.w	80270b0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8026ee2:	f1be 0f00 	cmp.w	lr, #0
 8026ee6:	f000 80e3 	beq.w	80270b0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8026eea:	2e00      	cmp	r6, #0
 8026eec:	f2c0 80de 	blt.w	80270ac <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8026ef0:	45b0      	cmp	r8, r6
 8026ef2:	f340 80db 	ble.w	80270ac <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8026ef6:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8026efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026efe:	3601      	adds	r6, #1
 8026f00:	d409      	bmi.n	8026f16 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026f02:	45b0      	cmp	r8, r6
 8026f04:	dd07      	ble.n	8026f16 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026f06:	f1bc 0f00 	cmp.w	ip, #0
 8026f0a:	d004      	beq.n	8026f16 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8026f0c:	44d0      	add	r8, sl
 8026f0e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8026f12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8026f16:	fa1f fc8c 	uxth.w	ip, ip
 8026f1a:	fa1f f38e 	uxth.w	r3, lr
 8026f1e:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8026f22:	fb03 fe0c 	mul.w	lr, r3, ip
 8026f26:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026f2a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026f2e:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8026f32:	ebac 060e 	sub.w	r6, ip, lr
 8026f36:	f5cc 7c80 	rsb	ip, ip, #256	@ 0x100
 8026f3a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8026f3e:	b29b      	uxth	r3, r3
 8026f40:	b2b6      	uxth	r6, r6
 8026f42:	ebac 0c03 	sub.w	ip, ip, r3
 8026f46:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026f4a:	9601      	str	r6, [sp, #4]
 8026f4c:	fa1f f68c 	uxth.w	r6, ip
 8026f50:	9602      	str	r6, [sp, #8]
 8026f52:	9e01      	ldr	r6, [sp, #4]
 8026f54:	fb06 fc0a 	mul.w	ip, r6, sl
 8026f58:	9e02      	ldr	r6, [sp, #8]
 8026f5a:	fb06 cc0b 	mla	ip, r6, fp, ip
 8026f5e:	fb03 cc09 	mla	ip, r3, r9, ip
 8026f62:	fb0e cc08 	mla	ip, lr, r8, ip
 8026f66:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8026f6a:	9603      	str	r6, [sp, #12]
 8026f6c:	2e00      	cmp	r6, #0
 8026f6e:	f000 8095 	beq.w	802709c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8026f72:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026f76:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026f7a:	fb0b fc0c 	mul.w	ip, fp, ip
 8026f7e:	fb0b f505 	mul.w	r5, fp, r5
 8026f82:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026f86:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026f8a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026f8e:	44dc      	add	ip, fp
 8026f90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f94:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 8026f98:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026f9c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026fa0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026fa4:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026fa8:	fb0a fc0c 	mul.w	ip, sl, ip
 8026fac:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026fb0:	fb0a fa04 	mul.w	sl, sl, r4
 8026fb4:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026fb8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026fbc:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 8026fc0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026fc4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026fc8:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8026fcc:	4465      	add	r5, ip
 8026fce:	f002 1cff 	and.w	ip, r2, #16711935	@ 0xff00ff
 8026fd2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026fd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fda:	fb09 fc0c 	mul.w	ip, r9, ip
 8026fde:	0a2d      	lsrs	r5, r5, #8
 8026fe0:	fb09 f902 	mul.w	r9, r9, r2
 8026fe4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026fe8:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8026fec:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026ff0:	f509 7280 	add.w	r2, r9, #256	@ 0x100
 8026ff4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026ff8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026ffc:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027000:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
 8027004:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027008:	4464      	add	r4, ip
 802700a:	fb08 f202 	mul.w	r2, r8, r2
 802700e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027012:	fb08 f800 	mul.w	r8, r8, r0
 8027016:	0a24      	lsrs	r4, r4, #8
 8027018:	0a10      	lsrs	r0, r2, #8
 802701a:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 802701e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027022:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8027026:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802702a:	4402      	add	r2, r0
 802702c:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8027030:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027034:	9801      	ldr	r0, [sp, #4]
 8027036:	0a12      	lsrs	r2, r2, #8
 8027038:	4345      	muls	r5, r0
 802703a:	9802      	ldr	r0, [sp, #8]
 802703c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027040:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027044:	fb06 5500 	mla	r5, r6, r0, r5
 8027048:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802704c:	fb02 520e 	mla	r2, r2, lr, r5
 8027050:	fb04 2403 	mla	r4, r4, r3, r2
 8027054:	9a01      	ldr	r2, [sp, #4]
 8027056:	fb02 f60a 	mul.w	r6, r2, sl
 802705a:	0a24      	lsrs	r4, r4, #8
 802705c:	9a03      	ldr	r2, [sp, #12]
 802705e:	fb00 660b 	mla	r6, r0, fp, r6
 8027062:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027066:	fb07 fc02 	mul.w	ip, r7, r2
 802706a:	fb0e 6e08 	mla	lr, lr, r8, r6
 802706e:	fb03 e309 	mla	r3, r3, r9, lr
 8027072:	0a1b      	lsrs	r3, r3, #8
 8027074:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027078:	4323      	orrs	r3, r4
 802707a:	f10c 0401 	add.w	r4, ip, #1
 802707e:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8027082:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8027086:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802708a:	1224      	asrs	r4, r4, #8
 802708c:	b2d5      	uxtb	r5, r2
 802708e:	2cff      	cmp	r4, #255	@ 0xff
 8027090:	b2c6      	uxtb	r6, r0
 8027092:	d10f      	bne.n	80270b4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 8027094:	700b      	strb	r3, [r1, #0]
 8027096:	7048      	strb	r0, [r1, #1]
 8027098:	708a      	strb	r2, [r1, #2]
 802709a:	70cc      	strb	r4, [r1, #3]
 802709c:	b005      	add	sp, #20
 802709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270a2:	4605      	mov	r5, r0
 80270a4:	e708      	b.n	8026eb8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 80270a6:	4605      	mov	r5, r0
 80270a8:	4604      	mov	r4, r0
 80270aa:	e713      	b.n	8026ed4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 80270ac:	4602      	mov	r2, r0
 80270ae:	e726      	b.n	8026efe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 80270b0:	4602      	mov	r2, r0
 80270b2:	e730      	b.n	8026f16 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80270b4:	b2e2      	uxtb	r2, r4
 80270b6:	2c00      	cmp	r4, #0
 80270b8:	d0f0      	beq.n	802709c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 80270ba:	78cc      	ldrb	r4, [r1, #3]
 80270bc:	b2db      	uxtb	r3, r3
 80270be:	fb17 f606 	smulbb	r6, r7, r6
 80270c2:	fb02 fc04 	mul.w	ip, r2, r4
 80270c6:	4422      	add	r2, r4
 80270c8:	f10c 0001 	add.w	r0, ip, #1
 80270cc:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80270d0:	1200      	asrs	r0, r0, #8
 80270d2:	1a24      	subs	r4, r4, r0
 80270d4:	1a12      	subs	r2, r2, r0
 80270d6:	7808      	ldrb	r0, [r1, #0]
 80270d8:	b2d2      	uxtb	r2, r2
 80270da:	4360      	muls	r0, r4
 80270dc:	70ca      	strb	r2, [r1, #3]
 80270de:	fb07 0303 	mla	r3, r7, r3, r0
 80270e2:	7848      	ldrb	r0, [r1, #1]
 80270e4:	fb17 f705 	smulbb	r7, r7, r5
 80270e8:	fb04 6000 	mla	r0, r4, r0, r6
 80270ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80270f0:	2bff      	cmp	r3, #255	@ 0xff
 80270f2:	bfd6      	itet	le
 80270f4:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80270f8:	23ff      	movgt	r3, #255	@ 0xff
 80270fa:	b2db      	uxtble	r3, r3
 80270fc:	fb90 f0f2 	sdiv	r0, r0, r2
 8027100:	700b      	strb	r3, [r1, #0]
 8027102:	28ff      	cmp	r0, #255	@ 0xff
 8027104:	788b      	ldrb	r3, [r1, #2]
 8027106:	bfd4      	ite	le
 8027108:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802710c:	20ff      	movgt	r0, #255	@ 0xff
 802710e:	fb04 7303 	mla	r3, r4, r3, r7
 8027112:	bfd8      	it	le
 8027114:	b2c0      	uxtble	r0, r0
 8027116:	fb93 f3f2 	sdiv	r3, r3, r2
 802711a:	2bff      	cmp	r3, #255	@ 0xff
 802711c:	7048      	strb	r0, [r1, #1]
 802711e:	bfd6      	itet	le
 8027120:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027124:	23ff      	movgt	r3, #255	@ 0xff
 8027126:	b2db      	uxtble	r3, r3
 8027128:	708b      	strb	r3, [r1, #2]
 802712a:	e7b7      	b.n	802709c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

0802712c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027130:	b09d      	sub	sp, #116	@ 0x74
 8027132:	921a      	str	r2, [sp, #104]	@ 0x68
 8027134:	9308      	str	r3, [sp, #32]
 8027136:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8027138:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802713c:	901b      	str	r0, [sp, #108]	@ 0x6c
 802713e:	9118      	str	r1, [sp, #96]	@ 0x60
 8027140:	6850      	ldr	r0, [r2, #4]
 8027142:	9309      	str	r3, [sp, #36]	@ 0x24
 8027144:	6812      	ldr	r2, [r2, #0]
 8027146:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802714a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 802714e:	fb00 1303 	mla	r3, r0, r3, r1
 8027152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027156:	930c      	str	r3, [sp, #48]	@ 0x30
 8027158:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802715a:	681b      	ldr	r3, [r3, #0]
 802715c:	9311      	str	r3, [sp, #68]	@ 0x44
 802715e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027160:	685f      	ldr	r7, [r3, #4]
 8027162:	3704      	adds	r7, #4
 8027164:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027166:	2b00      	cmp	r3, #0
 8027168:	dc03      	bgt.n	8027172 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802716a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802716c:	2b00      	cmp	r3, #0
 802716e:	f340 83cd 	ble.w	802790c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 8027172:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027174:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027178:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802717c:	1e48      	subs	r0, r1, #1
 802717e:	f102 3cff 	add.w	ip, r2, #4294967295
 8027182:	9b08      	ldr	r3, [sp, #32]
 8027184:	2b00      	cmp	r3, #0
 8027186:	f340 816c 	ble.w	8027462 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 802718a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802718e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027192:	d406      	bmi.n	80271a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027194:	4586      	cmp	lr, r0
 8027196:	da04      	bge.n	80271a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027198:	2b00      	cmp	r3, #0
 802719a:	db02      	blt.n	80271a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802719c:	4563      	cmp	r3, ip
 802719e:	f2c0 8161 	blt.w	8027464 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80271a2:	f11e 0e01 	adds.w	lr, lr, #1
 80271a6:	f100 8151 	bmi.w	802744c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80271aa:	4571      	cmp	r1, lr
 80271ac:	f2c0 814e 	blt.w	802744c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80271b0:	3301      	adds	r3, #1
 80271b2:	f100 814b 	bmi.w	802744c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80271b6:	429a      	cmp	r2, r3
 80271b8:	f2c0 8148 	blt.w	802744c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80271bc:	9b08      	ldr	r3, [sp, #32]
 80271be:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80271c2:	9319      	str	r3, [sp, #100]	@ 0x64
 80271c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80271c6:	2b00      	cmp	r3, #0
 80271c8:	f340 8169 	ble.w	802749e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80271cc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80271ce:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80271d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80271d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80271da:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80271de:	1423      	asrs	r3, r4, #16
 80271e0:	f100 81f7 	bmi.w	80275d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80271e4:	f100 39ff 	add.w	r9, r0, #4294967295
 80271e8:	454b      	cmp	r3, r9
 80271ea:	f280 81f2 	bge.w	80275d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80271ee:	f1bc 0f00 	cmp.w	ip, #0
 80271f2:	f2c0 81ee 	blt.w	80275d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80271f6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80271fa:	45cc      	cmp	ip, r9
 80271fc:	f280 81e9 	bge.w	80275d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8027200:	b200      	sxth	r0, r0
 8027202:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027204:	fb0c 3300 	mla	r3, ip, r0, r3
 8027208:	eb05 0903 	add.w	r9, r5, r3
 802720c:	5ceb      	ldrb	r3, [r5, r3]
 802720e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8027212:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027216:	2a00      	cmp	r2, #0
 8027218:	f000 8187 	beq.w	802752a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802721c:	f899 c001 	ldrb.w	ip, [r9, #1]
 8027220:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8027224:	950d      	str	r5, [sp, #52]	@ 0x34
 8027226:	0e2d      	lsrs	r5, r5, #24
 8027228:	9514      	str	r5, [sp, #80]	@ 0x50
 802722a:	b179      	cbz	r1, 802724c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 802722c:	eb09 0c00 	add.w	ip, r9, r0
 8027230:	f819 0000 	ldrb.w	r0, [r9, r0]
 8027234:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8027238:	900a      	str	r0, [sp, #40]	@ 0x28
 802723a:	0e00      	lsrs	r0, r0, #24
 802723c:	9012      	str	r0, [sp, #72]	@ 0x48
 802723e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027242:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8027246:	900e      	str	r0, [sp, #56]	@ 0x38
 8027248:	0e00      	lsrs	r0, r0, #24
 802724a:	9015      	str	r0, [sp, #84]	@ 0x54
 802724c:	b292      	uxth	r2, r2
 802724e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8027250:	b289      	uxth	r1, r1
 8027252:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027254:	fb02 fa01 	mul.w	sl, r2, r1
 8027258:	0112      	lsls	r2, r2, #4
 802725a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802725e:	eba2 090a 	sub.w	r9, r2, sl
 8027262:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8027266:	b289      	uxth	r1, r1
 8027268:	fa1f f989 	uxth.w	r9, r9
 802726c:	1a52      	subs	r2, r2, r1
 802726e:	fb09 f000 	mul.w	r0, r9, r0
 8027272:	b292      	uxth	r2, r2
 8027274:	fb02 000e 	mla	r0, r2, lr, r0
 8027278:	fb01 0005 	mla	r0, r1, r5, r0
 802727c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802727e:	fb0a 0005 	mla	r0, sl, r5, r0
 8027282:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027286:	2800      	cmp	r0, #0
 8027288:	f000 80d6 	beq.w	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802728c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027290:	d01b      	beq.n	80272ca <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027292:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
 8027296:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802729a:	fb0e fb0b 	mul.w	fp, lr, fp
 802729e:	fb0e fe03 	mul.w	lr, lr, r3
 80272a2:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80272a6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80272aa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80272ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80272b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80272b6:	445b      	add	r3, fp
 80272b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272bc:	0a1b      	lsrs	r3, r3, #8
 80272be:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80272c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80272c6:	ea43 030c 	orr.w	r3, r3, ip
 80272ca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80272cc:	2dff      	cmp	r5, #255	@ 0xff
 80272ce:	d021      	beq.n	8027314 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80272d0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80272d2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80272d6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80272d8:	fb05 fc0c 	mul.w	ip, r5, ip
 80272dc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80272de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80272e2:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 80272e6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80272e8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80272ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272f0:	fb05 fb0b 	mul.w	fp, r5, fp
 80272f4:	44e6      	add	lr, ip
 80272f6:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80272fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272fe:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027302:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027306:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802730a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802730e:	ea4e 050b 	orr.w	r5, lr, fp
 8027312:	950d      	str	r5, [sp, #52]	@ 0x34
 8027314:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027316:	2dff      	cmp	r5, #255	@ 0xff
 8027318:	d021      	beq.n	802735e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802731a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802731c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027320:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027322:	fb05 fc0c 	mul.w	ip, r5, ip
 8027326:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027328:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802732c:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8027330:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027332:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027336:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802733a:	fb05 fb0b 	mul.w	fp, r5, fp
 802733e:	44e6      	add	lr, ip
 8027340:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8027344:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027348:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802734c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027350:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027354:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027358:	ea4e 050b 	orr.w	r5, lr, fp
 802735c:	950a      	str	r5, [sp, #40]	@ 0x28
 802735e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027360:	2dff      	cmp	r5, #255	@ 0xff
 8027362:	d021      	beq.n	80273a8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8027364:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027366:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802736a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802736c:	fb05 fc0c 	mul.w	ip, r5, ip
 8027370:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027372:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027376:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 802737a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802737c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027380:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027384:	fb05 fb0b 	mul.w	fp, r5, fp
 8027388:	44e6      	add	lr, ip
 802738a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802738e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027392:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027396:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802739a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802739e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80273a2:	ea4e 050b 	orr.w	r5, lr, fp
 80273a6:	950e      	str	r5, [sp, #56]	@ 0x38
 80273a8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80273aa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80273ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80273b2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80273b6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80273b8:	fb09 fc0c 	mul.w	ip, r9, ip
 80273bc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80273c0:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80273c4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80273c6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80273ca:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80273ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80273d0:	fb0a cc0e 	mla	ip, sl, lr, ip
 80273d4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80273d8:	fb09 f90e 	mul.w	r9, r9, lr
 80273dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273e0:	fb02 9303 	mla	r3, r2, r3, r9
 80273e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80273e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80273ea:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
 80273ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80273f0:	fb01 330b 	mla	r3, r1, fp, r3
 80273f4:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80273f8:	fb0a 3a01 	mla	sl, sl, r1, r3
 80273fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273fe:	4358      	muls	r0, r3
 8027400:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027404:	1c43      	adds	r3, r0, #1
 8027406:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802740a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802740e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8027412:	1200      	asrs	r0, r0, #8
 8027414:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8027418:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802741c:	28ff      	cmp	r0, #255	@ 0xff
 802741e:	b2d9      	uxtb	r1, r3
 8027420:	fa5f fe82 	uxtb.w	lr, r2
 8027424:	f040 808c 	bne.w	8027540 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8027428:	f888 c000 	strb.w	ip, [r8]
 802742c:	f888 2001 	strb.w	r2, [r8, #1]
 8027430:	f888 3002 	strb.w	r3, [r8, #2]
 8027434:	f888 0003 	strb.w	r0, [r8, #3]
 8027438:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802743a:	f108 0804 	add.w	r8, r8, #4
 802743e:	441c      	add	r4, r3
 8027440:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027442:	441e      	add	r6, r3
 8027444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027446:	3b01      	subs	r3, #1
 8027448:	9319      	str	r3, [sp, #100]	@ 0x64
 802744a:	e6bb      	b.n	80271c4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802744c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802744e:	441c      	add	r4, r3
 8027450:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027452:	441e      	add	r6, r3
 8027454:	9b08      	ldr	r3, [sp, #32]
 8027456:	3b01      	subs	r3, #1
 8027458:	9308      	str	r3, [sp, #32]
 802745a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802745c:	3304      	adds	r3, #4
 802745e:	930c      	str	r3, [sp, #48]	@ 0x30
 8027460:	e68f      	b.n	8027182 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027462:	d023      	beq.n	80274ac <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8027464:	9b08      	ldr	r3, [sp, #32]
 8027466:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8027468:	3b01      	subs	r3, #1
 802746a:	fb00 4003 	mla	r0, r0, r3, r4
 802746e:	1400      	asrs	r0, r0, #16
 8027470:	f53f aea4 	bmi.w	80271bc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027474:	3901      	subs	r1, #1
 8027476:	4288      	cmp	r0, r1
 8027478:	f6bf aea0 	bge.w	80271bc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802747c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802747e:	fb01 6303 	mla	r3, r1, r3, r6
 8027482:	141b      	asrs	r3, r3, #16
 8027484:	f53f ae9a 	bmi.w	80271bc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027488:	3a01      	subs	r2, #1
 802748a:	4293      	cmp	r3, r2
 802748c:	f6bf ae96 	bge.w	80271bc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027490:	9b08      	ldr	r3, [sp, #32]
 8027492:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027494:	9319      	str	r3, [sp, #100]	@ 0x64
 8027496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027498:	2b00      	cmp	r3, #0
 802749a:	f300 80ba 	bgt.w	8027612 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802749e:	9b08      	ldr	r3, [sp, #32]
 80274a0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80274a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80274a6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80274aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80274ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	f340 822c 	ble.w	802790c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 80274b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80274b8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80274ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80274be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80274c2:	eef0 6a62 	vmov.f32	s13, s5
 80274c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80274ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80274ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274d2:	ee16 4a90 	vmov	r4, s13
 80274d6:	eef0 6a43 	vmov.f32	s13, s6
 80274da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274de:	ee16 6a90 	vmov	r6, s13
 80274e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80274e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80274ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80274ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80274f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80274f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80274fa:	ee12 2a90 	vmov	r2, s5
 80274fe:	eef0 2a47 	vmov.f32	s5, s14
 8027502:	fb92 f3f3 	sdiv	r3, r2, r3
 8027506:	ee13 2a10 	vmov	r2, s6
 802750a:	9329      	str	r3, [sp, #164]	@ 0xa4
 802750c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802750e:	eeb0 3a67 	vmov.f32	s6, s15
 8027512:	fb92 f3f3 	sdiv	r3, r2, r3
 8027516:	932a      	str	r3, [sp, #168]	@ 0xa8
 8027518:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802751a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802751c:	3b01      	subs	r3, #1
 802751e:	9318      	str	r3, [sp, #96]	@ 0x60
 8027520:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027522:	bf08      	it	eq
 8027524:	4613      	moveq	r3, r2
 8027526:	9308      	str	r3, [sp, #32]
 8027528:	e61c      	b.n	8027164 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802752a:	2900      	cmp	r1, #0
 802752c:	f43f ae8e 	beq.w	802724c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027530:	f819 0000 	ldrb.w	r0, [r9, r0]
 8027534:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8027538:	900a      	str	r0, [sp, #40]	@ 0x28
 802753a:	0e00      	lsrs	r0, r0, #24
 802753c:	9012      	str	r0, [sp, #72]	@ 0x48
 802753e:	e685      	b.n	802724c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027540:	b2c3      	uxtb	r3, r0
 8027542:	2800      	cmp	r0, #0
 8027544:	f43f af78 	beq.w	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027548:	f898 0003 	ldrb.w	r0, [r8, #3]
 802754c:	fa5f fc8c 	uxtb.w	ip, ip
 8027550:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027552:	fb03 f900 	mul.w	r9, r3, r0
 8027556:	4403      	add	r3, r0
 8027558:	f109 0201 	add.w	r2, r9, #1
 802755c:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8027560:	1212      	asrs	r2, r2, #8
 8027562:	1a80      	subs	r0, r0, r2
 8027564:	1a9b      	subs	r3, r3, r2
 8027566:	f898 2000 	ldrb.w	r2, [r8]
 802756a:	b2db      	uxtb	r3, r3
 802756c:	4342      	muls	r2, r0
 802756e:	f888 3003 	strb.w	r3, [r8, #3]
 8027572:	fb05 220c 	mla	r2, r5, ip, r2
 8027576:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027578:	fb92 f2f3 	sdiv	r2, r2, r3
 802757c:	fb15 fe0e 	smulbb	lr, r5, lr
 8027580:	2aff      	cmp	r2, #255	@ 0xff
 8027582:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027584:	bfd4      	ite	le
 8027586:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802758a:	22ff      	movgt	r2, #255	@ 0xff
 802758c:	fb15 f101 	smulbb	r1, r5, r1
 8027590:	bfd8      	it	le
 8027592:	b2d2      	uxtble	r2, r2
 8027594:	f888 2000 	strb.w	r2, [r8]
 8027598:	f898 2001 	ldrb.w	r2, [r8, #1]
 802759c:	fb00 e202 	mla	r2, r0, r2, lr
 80275a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80275a4:	2aff      	cmp	r2, #255	@ 0xff
 80275a6:	bfd6      	itet	le
 80275a8:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80275ac:	22ff      	movgt	r2, #255	@ 0xff
 80275ae:	b2d2      	uxtble	r2, r2
 80275b0:	f888 2001 	strb.w	r2, [r8, #1]
 80275b4:	f898 2002 	ldrb.w	r2, [r8, #2]
 80275b8:	fb00 1202 	mla	r2, r0, r2, r1
 80275bc:	fb92 f2f3 	sdiv	r2, r2, r3
 80275c0:	2aff      	cmp	r2, #255	@ 0xff
 80275c2:	bfd6      	itet	le
 80275c4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80275c8:	22ff      	movgt	r2, #255	@ 0xff
 80275ca:	b2d2      	uxtble	r2, r2
 80275cc:	f888 2002 	strb.w	r2, [r8, #2]
 80275d0:	e732      	b.n	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80275d2:	f113 0901 	adds.w	r9, r3, #1
 80275d6:	f53f af2f 	bmi.w	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80275da:	4548      	cmp	r0, r9
 80275dc:	f6ff af2c 	blt.w	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80275e0:	f11c 0901 	adds.w	r9, ip, #1
 80275e4:	f53f af28 	bmi.w	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80275e8:	45ce      	cmp	lr, r9
 80275ea:	f6ff af25 	blt.w	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80275ee:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80275f0:	b200      	sxth	r0, r0
 80275f2:	9302      	str	r3, [sp, #8]
 80275f4:	fa0f f38e 	sxth.w	r3, lr
 80275f8:	9000      	str	r0, [sp, #0]
 80275fa:	9301      	str	r3, [sp, #4]
 80275fc:	463b      	mov	r3, r7
 80275fe:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8027600:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027604:	e9cd c203 	strd	ip, r2, [sp, #12]
 8027608:	4641      	mov	r1, r8
 802760a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802760c:	f7ff fc30 	bl	8026e70 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8027610:	e712      	b.n	8027438 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027612:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027614:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8027618:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802761a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802761e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8027622:	1433      	asrs	r3, r6, #16
 8027624:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027628:	fb0c e303 	mla	r3, ip, r3, lr
 802762c:	eb05 0e03 	add.w	lr, r5, r3
 8027630:	5ceb      	ldrb	r3, [r5, r3]
 8027632:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8027636:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802763a:	2a00      	cmp	r2, #0
 802763c:	f000 8116 	beq.w	802786c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8027640:	f89e 9001 	ldrb.w	r9, [lr, #1]
 8027644:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 8027648:	950f      	str	r5, [sp, #60]	@ 0x3c
 802764a:	0e2d      	lsrs	r5, r5, #24
 802764c:	9516      	str	r5, [sp, #88]	@ 0x58
 802764e:	b178      	cbz	r0, 8027670 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027650:	eb0e 090c 	add.w	r9, lr, ip
 8027654:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8027658:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802765c:	f899 c001 	ldrb.w	ip, [r9, #1]
 8027660:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027662:	0e2d      	lsrs	r5, r5, #24
 8027664:	9513      	str	r5, [sp, #76]	@ 0x4c
 8027666:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802766a:	9510      	str	r5, [sp, #64]	@ 0x40
 802766c:	0e2d      	lsrs	r5, r5, #24
 802766e:	9517      	str	r5, [sp, #92]	@ 0x5c
 8027670:	b292      	uxth	r2, r2
 8027672:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027674:	b280      	uxth	r0, r0
 8027676:	fb02 fa00 	mul.w	sl, r2, r0
 802767a:	0112      	lsls	r2, r2, #4
 802767c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027680:	eba2 090a 	sub.w	r9, r2, sl
 8027684:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8027688:	fa1f fc80 	uxth.w	ip, r0
 802768c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802768e:	fa1f f989 	uxth.w	r9, r9
 8027692:	eba2 020c 	sub.w	r2, r2, ip
 8027696:	fb09 f000 	mul.w	r0, r9, r0
 802769a:	b292      	uxth	r2, r2
 802769c:	fb02 0008 	mla	r0, r2, r8, r0
 80276a0:	fb0c 0005 	mla	r0, ip, r5, r0
 80276a4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80276a6:	fb0a 0005 	mla	r0, sl, r5, r0
 80276aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80276ae:	2800      	cmp	r0, #0
 80276b0:	f000 80d3 	beq.w	802785a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80276b4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80276b8:	d01b      	beq.n	80276f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80276ba:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
 80276be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80276c2:	fb08 fb0b 	mul.w	fp, r8, fp
 80276c6:	fb08 f803 	mul.w	r8, r8, r3
 80276ca:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80276ce:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80276d2:	f508 7e80 	add.w	lr, r8, #256	@ 0x100
 80276d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80276da:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 80276de:	445b      	add	r3, fp
 80276e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80276e4:	0a1b      	lsrs	r3, r3, #8
 80276e6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80276ea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80276ee:	ea43 030e 	orr.w	r3, r3, lr
 80276f2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80276f4:	2dff      	cmp	r5, #255	@ 0xff
 80276f6:	d021      	beq.n	802773c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80276f8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80276fa:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80276fe:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027700:	fb05 fe0e 	mul.w	lr, r5, lr
 8027704:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027706:	ea4f 281e 	mov.w	r8, lr, lsr #8
 802770a:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 802770e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027710:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027714:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8027718:	fb05 fb0b 	mul.w	fp, r5, fp
 802771c:	44f0      	add	r8, lr
 802771e:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 8027722:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027726:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 802772a:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802772e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027732:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027736:	ea48 050b 	orr.w	r5, r8, fp
 802773a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802773c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802773e:	2dff      	cmp	r5, #255	@ 0xff
 8027740:	d021      	beq.n	8027786 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8027742:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027744:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027748:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802774a:	fb05 fe0e 	mul.w	lr, r5, lr
 802774e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027750:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8027754:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8027758:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802775a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802775e:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8027762:	fb05 fb0b 	mul.w	fp, r5, fp
 8027766:	44f0      	add	r8, lr
 8027768:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 802776c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027770:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8027774:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8027778:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802777c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027780:	ea48 050b 	orr.w	r5, r8, fp
 8027784:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027786:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8027788:	2dff      	cmp	r5, #255	@ 0xff
 802778a:	d021      	beq.n	80277d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 802778c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802778e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027792:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8027794:	fb05 fe0e 	mul.w	lr, r5, lr
 8027798:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802779a:	ea4f 281e 	mov.w	r8, lr, lsr #8
 802779e:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 80277a2:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80277a4:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80277a8:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80277ac:	fb05 fb0b 	mul.w	fp, r5, fp
 80277b0:	44f0      	add	r8, lr
 80277b2:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 80277b6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80277ba:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 80277be:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80277c2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80277c6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80277ca:	ea48 050b 	orr.w	r5, r8, fp
 80277ce:	9510      	str	r5, [sp, #64]	@ 0x40
 80277d0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80277d2:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 80277d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80277da:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80277de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80277e0:	fb09 fe0e 	mul.w	lr, r9, lr
 80277e4:	fb02 ee08 	mla	lr, r2, r8, lr
 80277e8:	f005 18ff 	and.w	r8, r5, #16711935	@ 0xff00ff
 80277ec:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80277ee:	fb0c ee08 	mla	lr, ip, r8, lr
 80277f2:	f005 18ff 	and.w	r8, r5, #16711935	@ 0xff00ff
 80277f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80277f8:	fb0a ee08 	mla	lr, sl, r8, lr
 80277fc:	f405 487f 	and.w	r8, r5, #65280	@ 0xff00
 8027800:	fb09 f908 	mul.w	r9, r9, r8
 8027804:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027808:	fb02 9303 	mla	r3, r2, r3, r9
 802780c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802780e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027812:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
 8027816:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027818:	fb0c 330b 	mla	r3, ip, fp, r3
 802781c:	f402 487f 	and.w	r8, r2, #65280	@ 0xff00
 8027820:	fb0a 3808 	mla	r8, sl, r8, r3
 8027824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027826:	4358      	muls	r0, r3
 8027828:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802782c:	1c43      	adds	r3, r0, #1
 802782e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027832:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027836:	ea4e 0e08 	orr.w	lr, lr, r8
 802783a:	1200      	asrs	r0, r0, #8
 802783c:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8027840:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8027844:	28ff      	cmp	r0, #255	@ 0xff
 8027846:	fa5f fc83 	uxtb.w	ip, r3
 802784a:	fa5f f882 	uxtb.w	r8, r2
 802784e:	d118      	bne.n	8027882 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8027850:	f881 e000 	strb.w	lr, [r1]
 8027854:	704a      	strb	r2, [r1, #1]
 8027856:	708b      	strb	r3, [r1, #2]
 8027858:	70c8      	strb	r0, [r1, #3]
 802785a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802785c:	3104      	adds	r1, #4
 802785e:	441c      	add	r4, r3
 8027860:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027862:	441e      	add	r6, r3
 8027864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027866:	3b01      	subs	r3, #1
 8027868:	9319      	str	r3, [sp, #100]	@ 0x64
 802786a:	e614      	b.n	8027496 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802786c:	2800      	cmp	r0, #0
 802786e:	f43f aeff 	beq.w	8027670 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027872:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8027876:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802787a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802787c:	0e2d      	lsrs	r5, r5, #24
 802787e:	9513      	str	r5, [sp, #76]	@ 0x4c
 8027880:	e6f6      	b.n	8027670 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027882:	b2c3      	uxtb	r3, r0
 8027884:	2800      	cmp	r0, #0
 8027886:	d0e8      	beq.n	802785a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027888:	78c8      	ldrb	r0, [r1, #3]
 802788a:	fa5f fe8e 	uxtb.w	lr, lr
 802788e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027890:	fb03 f900 	mul.w	r9, r3, r0
 8027894:	4403      	add	r3, r0
 8027896:	f109 0201 	add.w	r2, r9, #1
 802789a:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 802789e:	1212      	asrs	r2, r2, #8
 80278a0:	1a9b      	subs	r3, r3, r2
 80278a2:	1a82      	subs	r2, r0, r2
 80278a4:	7808      	ldrb	r0, [r1, #0]
 80278a6:	b2db      	uxtb	r3, r3
 80278a8:	4350      	muls	r0, r2
 80278aa:	70cb      	strb	r3, [r1, #3]
 80278ac:	fb05 0e0e 	mla	lr, r5, lr, r0
 80278b0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80278b2:	7848      	ldrb	r0, [r1, #1]
 80278b4:	fb15 f808 	smulbb	r8, r5, r8
 80278b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80278ba:	fb9e fef3 	sdiv	lr, lr, r3
 80278be:	fb02 8000 	mla	r0, r2, r0, r8
 80278c2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80278c6:	fb15 fc0c 	smulbb	ip, r5, ip
 80278ca:	bfd4      	ite	le
 80278cc:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 80278d0:	f04f 0eff 	movgt.w	lr, #255	@ 0xff
 80278d4:	fb90 f0f3 	sdiv	r0, r0, r3
 80278d8:	bfd8      	it	le
 80278da:	fa5f fe8e 	uxtble.w	lr, lr
 80278de:	28ff      	cmp	r0, #255	@ 0xff
 80278e0:	bfd4      	ite	le
 80278e2:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80278e6:	20ff      	movgt	r0, #255	@ 0xff
 80278e8:	f881 e000 	strb.w	lr, [r1]
 80278ec:	bfd8      	it	le
 80278ee:	b2c0      	uxtble	r0, r0
 80278f0:	7048      	strb	r0, [r1, #1]
 80278f2:	7888      	ldrb	r0, [r1, #2]
 80278f4:	fb02 c200 	mla	r2, r2, r0, ip
 80278f8:	fb92 f2f3 	sdiv	r2, r2, r3
 80278fc:	2aff      	cmp	r2, #255	@ 0xff
 80278fe:	bfd6      	itet	le
 8027900:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027904:	22ff      	movgt	r2, #255	@ 0xff
 8027906:	b2d2      	uxtble	r2, r2
 8027908:	708a      	strb	r2, [r1, #2]
 802790a:	e7a6      	b.n	802785a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802790c:	b01d      	add	sp, #116	@ 0x74
 802790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027912 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8027912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027916:	b087      	sub	sp, #28
 8027918:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 802791c:	f89d 0058 	ldrb.w	r0, [sp, #88]	@ 0x58
 8027920:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	@ 0x40
 8027924:	2e00      	cmp	r6, #0
 8027926:	9002      	str	r0, [sp, #8]
 8027928:	fb06 8005 	mla	r0, r6, r5, r8
 802792c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8027930:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8027934:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 8027938:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 802793c:	9703      	str	r7, [sp, #12]
 802793e:	eb03 0700 	add.w	r7, r3, r0
 8027942:	9704      	str	r7, [sp, #16]
 8027944:	f2c0 8133 	blt.w	8027bae <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8027948:	45b3      	cmp	fp, r6
 802794a:	f340 8130 	ble.w	8027bae <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 802794e:	f1b8 0f00 	cmp.w	r8, #0
 8027952:	f2c0 8128 	blt.w	8027ba6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8027956:	4545      	cmp	r5, r8
 8027958:	f340 8125 	ble.w	8027ba6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 802795c:	f813 c000 	ldrb.w	ip, [r3, r0]
 8027960:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8027964:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8027968:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802796c:	f423 6afc 	bic.w	sl, r3, #2016	@ 0x7e0
 8027970:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027974:	fb0c f303 	mul.w	r3, ip, r3
 8027978:	fb0a f202 	mul.w	r2, sl, r2
 802797c:	f103 0a20 	add.w	sl, r3, #32
 8027980:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8027984:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 8027988:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 802798c:	4402      	add	r2, r0
 802798e:	0a1b      	lsrs	r3, r3, #8
 8027990:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 8027994:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027998:	ea47 0a03 	orr.w	sl, r7, r3
 802799c:	f118 0301 	adds.w	r3, r8, #1
 80279a0:	f100 810a 	bmi.w	8027bb8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 80279a4:	429d      	cmp	r5, r3
 80279a6:	f340 8107 	ble.w	8027bb8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 80279aa:	2c00      	cmp	r4, #0
 80279ac:	f000 8107 	beq.w	8027bbe <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 80279b0:	9b04      	ldr	r3, [sp, #16]
 80279b2:	785a      	ldrb	r2, [r3, #1]
 80279b4:	9b03      	ldr	r3, [sp, #12]
 80279b6:	10d7      	asrs	r7, r2, #3
 80279b8:	885b      	ldrh	r3, [r3, #2]
 80279ba:	f423 60fc 	bic.w	r0, r3, #2016	@ 0x7e0
 80279be:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80279c2:	4347      	muls	r7, r0
 80279c4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80279c8:	4353      	muls	r3, r2
 80279ca:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 80279ce:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 80279d2:	444f      	add	r7, r9
 80279d4:	f103 0920 	add.w	r9, r3, #32
 80279d8:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 80279dc:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 80279e0:	0a1b      	lsrs	r3, r3, #8
 80279e2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80279e6:	4303      	orrs	r3, r0
 80279e8:	9301      	str	r3, [sp, #4]
 80279ea:	3601      	adds	r6, #1
 80279ec:	f100 80ed 	bmi.w	8027bca <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 80279f0:	45b3      	cmp	fp, r6
 80279f2:	f340 80ea 	ble.w	8027bca <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 80279f6:	f1be 0f00 	cmp.w	lr, #0
 80279fa:	f000 80eb 	beq.w	8027bd4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 80279fe:	f1b8 0f00 	cmp.w	r8, #0
 8027a02:	f2c0 80df 	blt.w	8027bc4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8027a06:	4545      	cmp	r5, r8
 8027a08:	f340 80dc 	ble.w	8027bc4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8027a0c:	9b04      	ldr	r3, [sp, #16]
 8027a0e:	5d5f      	ldrb	r7, [r3, r5]
 8027a10:	9b03      	ldr	r3, [sp, #12]
 8027a12:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027a16:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8027a1a:	f423 66fc 	bic.w	r6, r3, #2016	@ 0x7e0
 8027a1e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027a22:	fb09 f906 	mul.w	r9, r9, r6
 8027a26:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027a2a:	437b      	muls	r3, r7
 8027a2c:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8027a30:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8027a34:	44d9      	add	r9, fp
 8027a36:	f103 0b20 	add.w	fp, r3, #32
 8027a3a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8027a3e:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8027a42:	0a1b      	lsrs	r3, r3, #8
 8027a44:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027a48:	431e      	orrs	r6, r3
 8027a4a:	f118 0801 	adds.w	r8, r8, #1
 8027a4e:	f100 80c6 	bmi.w	8027bde <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8027a52:	4545      	cmp	r5, r8
 8027a54:	f340 80c3 	ble.w	8027bde <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8027a58:	2c00      	cmp	r4, #0
 8027a5a:	f000 80c3 	beq.w	8027be4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8027a5e:	3501      	adds	r5, #1
 8027a60:	9b04      	ldr	r3, [sp, #16]
 8027a62:	9803      	ldr	r0, [sp, #12]
 8027a64:	5d5b      	ldrb	r3, [r3, r5]
 8027a66:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 8027a6a:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8027a6e:	f428 65fc 	bic.w	r5, r8, #2016	@ 0x7e0
 8027a72:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8027a76:	fb09 f905 	mul.w	r9, r9, r5
 8027a7a:	f64f 051f 	movw	r5, #63519	@ 0xf81f
 8027a7e:	fb03 f808 	mul.w	r8, r3, r8
 8027a82:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 8027a86:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8027a8a:	44d9      	add	r9, fp
 8027a8c:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 8027a90:	f108 0920 	add.w	r9, r8, #32
 8027a94:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8027a98:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027a9c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8027aa0:	ea45 0508 	orr.w	r5, r5, r8
 8027aa4:	fa1f f984 	uxth.w	r9, r4
 8027aa8:	fa1f f88e 	uxth.w	r8, lr
 8027aac:	fb09 f008 	mul.w	r0, r9, r8
 8027ab0:	9003      	str	r0, [sp, #12]
 8027ab2:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8027ab6:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8027aba:	f42a 6afc 	bic.w	sl, sl, #2016	@ 0x7e0
 8027abe:	9004      	str	r0, [sp, #16]
 8027ac0:	9803      	ldr	r0, [sp, #12]
 8027ac2:	f009 69fc 	and.w	r9, r9, #132120576	@ 0x7e00000
 8027ac6:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8027aca:	ea49 090a 	orr.w	r9, r9, sl
 8027ace:	f1ce 0a10 	rsb	sl, lr, #16
 8027ad2:	fa1f f088 	uxth.w	r0, r8
 8027ad6:	fb14 f80e 	smulbb	r8, r4, lr
 8027ada:	ebaa 0a04 	sub.w	sl, sl, r4
 8027ade:	9005      	str	r0, [sp, #20]
 8027ae0:	9801      	ldr	r0, [sp, #4]
 8027ae2:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 8027ae6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027aea:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027aee:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8027af2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027af6:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8027afa:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8027afe:	ea4b 0000 	orr.w	r0, fp, r0
 8027b02:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027b06:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027b0a:	4360      	muls	r0, r4
 8027b0c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027b10:	9c04      	ldr	r4, [sp, #16]
 8027b12:	ea4b 0505 	orr.w	r5, fp, r5
 8027b16:	fb0a 0009 	mla	r0, sl, r9, r0
 8027b1a:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8027b1e:	fb08 0005 	mla	r0, r8, r5, r0
 8027b22:	0435      	lsls	r5, r6, #16
 8027b24:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8027b28:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8027b2c:	432e      	orrs	r6, r5
 8027b2e:	9d05      	ldr	r5, [sp, #20]
 8027b30:	fb0e 0e06 	mla	lr, lr, r6, r0
 8027b34:	1b64      	subs	r4, r4, r5
 8027b36:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8027b3a:	b2a4      	uxth	r4, r4
 8027b3c:	1bad      	subs	r5, r5, r6
 8027b3e:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8027b42:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027b46:	b2ad      	uxth	r5, r5
 8027b48:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027b4c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027b50:	436a      	muls	r2, r5
 8027b52:	ea40 0e0e 	orr.w	lr, r0, lr
 8027b56:	fb0c 2204 	mla	r2, ip, r4, r2
 8027b5a:	9c05      	ldr	r4, [sp, #20]
 8027b5c:	fa1f f08e 	uxth.w	r0, lr
 8027b60:	fb04 2707 	mla	r7, r4, r7, r2
 8027b64:	9a02      	ldr	r2, [sp, #8]
 8027b66:	1205      	asrs	r5, r0, #8
 8027b68:	fb06 7303 	mla	r3, r6, r3, r7
 8027b6c:	10c7      	asrs	r7, r0, #3
 8027b6e:	00c0      	lsls	r0, r0, #3
 8027b70:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027b74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027b78:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027b7c:	b2c0      	uxtb	r0, r0
 8027b7e:	4353      	muls	r3, r2
 8027b80:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8027b84:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8027b88:	1c5a      	adds	r2, r3, #1
 8027b8a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8027b8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027b92:	121b      	asrs	r3, r3, #8
 8027b94:	2bff      	cmp	r3, #255	@ 0xff
 8027b96:	d128      	bne.n	8027bea <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 8027b98:	7008      	strb	r0, [r1, #0]
 8027b9a:	704f      	strb	r7, [r1, #1]
 8027b9c:	708d      	strb	r5, [r1, #2]
 8027b9e:	70cb      	strb	r3, [r1, #3]
 8027ba0:	b007      	add	sp, #28
 8027ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ba6:	f04f 0c00 	mov.w	ip, #0
 8027baa:	46e2      	mov	sl, ip
 8027bac:	e6f6      	b.n	802799c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8027bae:	2200      	movs	r2, #0
 8027bb0:	4694      	mov	ip, r2
 8027bb2:	9201      	str	r2, [sp, #4]
 8027bb4:	4692      	mov	sl, r2
 8027bb6:	e718      	b.n	80279ea <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027bb8:	2200      	movs	r2, #0
 8027bba:	9201      	str	r2, [sp, #4]
 8027bbc:	e715      	b.n	80279ea <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027bbe:	4622      	mov	r2, r4
 8027bc0:	9401      	str	r4, [sp, #4]
 8027bc2:	e712      	b.n	80279ea <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027bc4:	2700      	movs	r7, #0
 8027bc6:	463e      	mov	r6, r7
 8027bc8:	e73f      	b.n	8027a4a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8027bca:	2300      	movs	r3, #0
 8027bcc:	461f      	mov	r7, r3
 8027bce:	461d      	mov	r5, r3
 8027bd0:	461e      	mov	r6, r3
 8027bd2:	e767      	b.n	8027aa4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027bd4:	4673      	mov	r3, lr
 8027bd6:	4677      	mov	r7, lr
 8027bd8:	4675      	mov	r5, lr
 8027bda:	4676      	mov	r6, lr
 8027bdc:	e762      	b.n	8027aa4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027bde:	2300      	movs	r3, #0
 8027be0:	461d      	mov	r5, r3
 8027be2:	e75f      	b.n	8027aa4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027be4:	4623      	mov	r3, r4
 8027be6:	4625      	mov	r5, r4
 8027be8:	e75c      	b.n	8027aa4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027bea:	b2dc      	uxtb	r4, r3
 8027bec:	2b00      	cmp	r3, #0
 8027bee:	d0d7      	beq.n	8027ba0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8027bf0:	f891 c003 	ldrb.w	ip, [r1, #3]
 8027bf4:	fb04 f20c 	mul.w	r2, r4, ip
 8027bf8:	eb0c 0304 	add.w	r3, ip, r4
 8027bfc:	780c      	ldrb	r4, [r1, #0]
 8027bfe:	1c56      	adds	r6, r2, #1
 8027c00:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8027c04:	1232      	asrs	r2, r6, #8
 8027c06:	ebac 0602 	sub.w	r6, ip, r2
 8027c0a:	1a9b      	subs	r3, r3, r2
 8027c0c:	9a02      	ldr	r2, [sp, #8]
 8027c0e:	b2db      	uxtb	r3, r3
 8027c10:	fb10 f002 	smulbb	r0, r0, r2
 8027c14:	9a02      	ldr	r2, [sp, #8]
 8027c16:	fb06 0404 	mla	r4, r6, r4, r0
 8027c1a:	fb12 f707 	smulbb	r7, r2, r7
 8027c1e:	7848      	ldrb	r0, [r1, #1]
 8027c20:	788a      	ldrb	r2, [r1, #2]
 8027c22:	fb06 7000 	mla	r0, r6, r0, r7
 8027c26:	fb94 f4f3 	sdiv	r4, r4, r3
 8027c2a:	fb90 f0f3 	sdiv	r0, r0, r3
 8027c2e:	2cff      	cmp	r4, #255	@ 0xff
 8027c30:	bfd6      	itet	le
 8027c32:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8027c36:	24ff      	movgt	r4, #255	@ 0xff
 8027c38:	b2e4      	uxtble	r4, r4
 8027c3a:	28ff      	cmp	r0, #255	@ 0xff
 8027c3c:	bfd4      	ite	le
 8027c3e:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027c42:	20ff      	movgt	r0, #255	@ 0xff
 8027c44:	700c      	strb	r4, [r1, #0]
 8027c46:	bfd8      	it	le
 8027c48:	b2c0      	uxtble	r0, r0
 8027c4a:	7048      	strb	r0, [r1, #1]
 8027c4c:	9802      	ldr	r0, [sp, #8]
 8027c4e:	fb10 f505 	smulbb	r5, r0, r5
 8027c52:	fb06 5202 	mla	r2, r6, r2, r5
 8027c56:	fb92 f2f3 	sdiv	r2, r2, r3
 8027c5a:	2aff      	cmp	r2, #255	@ 0xff
 8027c5c:	bfd6      	itet	le
 8027c5e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027c62:	22ff      	movgt	r2, #255	@ 0xff
 8027c64:	b2d2      	uxtble	r2, r2
 8027c66:	708a      	strb	r2, [r1, #2]
 8027c68:	e799      	b.n	8027b9e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08027c6a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c6e:	b097      	sub	sp, #92	@ 0x5c
 8027c70:	9214      	str	r2, [sp, #80]	@ 0x50
 8027c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c74:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027c76:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027c7a:	9015      	str	r0, [sp, #84]	@ 0x54
 8027c7c:	9112      	str	r1, [sp, #72]	@ 0x48
 8027c7e:	6850      	ldr	r0, [r2, #4]
 8027c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8027c82:	6812      	ldr	r2, [r2, #0]
 8027c84:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027c88:	fb00 1303 	mla	r3, r0, r3, r1
 8027c8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027c92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027c94:	681b      	ldr	r3, [r3, #0]
 8027c96:	930c      	str	r3, [sp, #48]	@ 0x30
 8027c98:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027c9a:	685b      	ldr	r3, [r3, #4]
 8027c9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8027c9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	dc03      	bgt.n	8027cac <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8027ca4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027ca6:	2b00      	cmp	r3, #0
 8027ca8:	f340 8407 	ble.w	80284ba <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8027cac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027cae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cb2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027cb6:	1e48      	subs	r0, r1, #1
 8027cb8:	1e55      	subs	r5, r2, #1
 8027cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	f340 81b7 	ble.w	8028030 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8027cc2:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8027cc4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027cc6:	1436      	asrs	r6, r6, #16
 8027cc8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027ccc:	d406      	bmi.n	8027cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027cce:	4286      	cmp	r6, r0
 8027cd0:	da04      	bge.n	8027cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027cd2:	2b00      	cmp	r3, #0
 8027cd4:	db02      	blt.n	8027cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027cd6:	42ab      	cmp	r3, r5
 8027cd8:	f2c0 81ab 	blt.w	8028032 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027cdc:	3601      	adds	r6, #1
 8027cde:	f100 8198 	bmi.w	8028012 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027ce2:	42b1      	cmp	r1, r6
 8027ce4:	f2c0 8195 	blt.w	8028012 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027ce8:	3301      	adds	r3, #1
 8027cea:	f100 8192 	bmi.w	8028012 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027cee:	429a      	cmp	r2, r3
 8027cf0:	f2c0 818f 	blt.w	8028012 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cf6:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8027cfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027cfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027cfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	f340 81b7 	ble.w	8028074 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8027d06:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027d08:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8027d0a:	1418      	asrs	r0, r3, #16
 8027d0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027d0e:	1436      	asrs	r6, r6, #16
 8027d10:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027d14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027d16:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027d1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027d20:	f100 820f 	bmi.w	8028142 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027d24:	f102 3eff 	add.w	lr, r2, #4294967295
 8027d28:	4576      	cmp	r6, lr
 8027d2a:	f280 820a 	bge.w	8028142 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027d2e:	2800      	cmp	r0, #0
 8027d30:	f2c0 8207 	blt.w	8028142 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027d34:	f103 3eff 	add.w	lr, r3, #4294967295
 8027d38:	4570      	cmp	r0, lr
 8027d3a:	f280 8202 	bge.w	8028142 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8027d3e:	b212      	sxth	r2, r2
 8027d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027d42:	fa1f fe81 	uxth.w	lr, r1
 8027d46:	fb00 6002 	mla	r0, r0, r2, r6
 8027d4a:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8027d4e:	eb03 0a00 	add.w	sl, r3, r0
 8027d52:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027d56:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8027d5a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027d5e:	b29b      	uxth	r3, r3
 8027d60:	f1bc 0f00 	cmp.w	ip, #0
 8027d64:	f000 81cc 	beq.w	8028100 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8027d68:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027d6c:	eb0a 0b02 	add.w	fp, sl, r2
 8027d70:	fa1f fa8c 	uxth.w	sl, ip
 8027d74:	940e      	str	r4, [sp, #56]	@ 0x38
 8027d76:	fb0a fe0e 	mul.w	lr, sl, lr
 8027d7a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027d7e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027d82:	eba6 060e 	sub.w	r6, r6, lr
 8027d86:	940f      	str	r4, [sp, #60]	@ 0x3c
 8027d88:	fa1f fa8a 	uxth.w	sl, sl
 8027d8c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027d8e:	b2b6      	uxth	r6, r6
 8027d90:	eba3 030a 	sub.w	r3, r3, sl
 8027d94:	fb08 f606 	mul.w	r6, r8, r6
 8027d98:	b29b      	uxth	r3, r3
 8027d9a:	fb09 6303 	mla	r3, r9, r3, r6
 8027d9e:	fb0a 3304 	mla	r3, sl, r4, r3
 8027da2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027da4:	fb0e 3304 	mla	r3, lr, r4, r3
 8027da8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027dac:	2b00      	cmp	r3, #0
 8027dae:	f000 8123 	beq.w	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027db2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027db4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027db8:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8027dbc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027dc0:	f000 81a3 	beq.w	802810a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 8027dc4:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027dc8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027dcc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027dd0:	fb0a fe0e 	mul.w	lr, sl, lr
 8027dd4:	fb09 f000 	mul.w	r0, r9, r0
 8027dd8:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8027ddc:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027de0:	f100 0b20 	add.w	fp, r0, #32
 8027de4:	44ce      	add	lr, r9
 8027de6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027dea:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8027dee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027df2:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027df6:	ea4e 0909 	orr.w	r9, lr, r9
 8027dfa:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027dfe:	8870      	ldrh	r0, [r6, #2]
 8027e00:	d019      	beq.n	8027e36 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8027e02:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027e06:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027e0a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027e0e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027e12:	fb08 f800 	mul.w	r8, r8, r0
 8027e16:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8027e1a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027e1e:	f108 0b20 	add.w	fp, r8, #32
 8027e22:	4486      	add	lr, r0
 8027e24:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027e28:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8027e2c:	0a00      	lsrs	r0, r0, #8
 8027e2e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027e32:	ea4e 0000 	orr.w	r0, lr, r0
 8027e36:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027e3a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027e3e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027e42:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027e46:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027e4a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027e4e:	ea4e 0909 	orr.w	r9, lr, r9
 8027e52:	ea4a 0000 	orr.w	r0, sl, r0
 8027e56:	f1bc 0f00 	cmp.w	ip, #0
 8027e5a:	f000 8158 	beq.w	802810e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8027e5e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8027e62:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027e64:	3a01      	subs	r2, #1
 8027e66:	2cff      	cmp	r4, #255	@ 0xff
 8027e68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027e6c:	f102 0202 	add.w	r2, r2, #2
 8027e70:	eb06 0e02 	add.w	lr, r6, r2
 8027e74:	5ab2      	ldrh	r2, [r6, r2]
 8027e76:	d018      	beq.n	8027eaa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8027e78:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8027e7c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027e80:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027e84:	fb04 fa02 	mul.w	sl, r4, r2
 8027e88:	fb08 f806 	mul.w	r8, r8, r6
 8027e8c:	f10a 0620 	add.w	r6, sl, #32
 8027e90:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8027e94:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027e98:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8027e9c:	4442      	add	r2, r8
 8027e9e:	0a36      	lsrs	r6, r6, #8
 8027ea0:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8027ea4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8027ea8:	4332      	orrs	r2, r6
 8027eaa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027eac:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8027eb0:	2cff      	cmp	r4, #255	@ 0xff
 8027eb2:	d01a      	beq.n	8027eea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8027eb4:	f426 6efc 	bic.w	lr, r6, #2016	@ 0x7e0
 8027eb8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8027ebc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027ec0:	fb04 fa06 	mul.w	sl, r4, r6
 8027ec4:	fb08 f80e 	mul.w	r8, r8, lr
 8027ec8:	f10a 0e20 	add.w	lr, sl, #32
 8027ecc:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8027ed0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027ed4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027ed8:	4446      	add	r6, r8
 8027eda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ede:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8027ee2:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8027ee6:	ea46 060e 	orr.w	r6, r6, lr
 8027eea:	fb1c fe01 	smulbb	lr, ip, r1
 8027eee:	f1cc 0810 	rsb	r8, ip, #16
 8027ef2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027ef6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027efa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027efe:	eba8 0801 	sub.w	r8, r8, r1
 8027f02:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8027f06:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027f0a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027f0e:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8027f12:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027f16:	ea4a 0202 	orr.w	r2, sl, r2
 8027f1a:	4341      	muls	r1, r0
 8027f1c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027f20:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027f24:	fb09 1108 	mla	r1, r9, r8, r1
 8027f28:	ea4b 0606 	orr.w	r6, fp, r6
 8027f2c:	fb0c 1102 	mla	r1, ip, r2, r1
 8027f30:	fb0e 1e06 	mla	lr, lr, r6, r1
 8027f34:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8027f38:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027f3c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027f40:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027f44:	ea40 0e0e 	orr.w	lr, r0, lr
 8027f48:	fa1f f08e 	uxth.w	r0, lr
 8027f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027f4e:	1206      	asrs	r6, r0, #8
 8027f50:	10c1      	asrs	r1, r0, #3
 8027f52:	4353      	muls	r3, r2
 8027f54:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8027f58:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027f5c:	1c5a      	adds	r2, r3, #1
 8027f5e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8027f62:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8027f66:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8027f6a:	00c2      	lsls	r2, r0, #3
 8027f6c:	121b      	asrs	r3, r3, #8
 8027f6e:	b2d2      	uxtb	r2, r2
 8027f70:	2bff      	cmp	r3, #255	@ 0xff
 8027f72:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8027f76:	f000 80de 	beq.w	8028136 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8027f7a:	b2d8      	uxtb	r0, r3
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	d03b      	beq.n	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027f80:	f895 c003 	ldrb.w	ip, [r5, #3]
 8027f84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027f86:	fb00 fe0c 	mul.w	lr, r0, ip
 8027f8a:	4460      	add	r0, ip
 8027f8c:	fb12 f204 	smulbb	r2, r2, r4
 8027f90:	f10e 0301 	add.w	r3, lr, #1
 8027f94:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8027f98:	121b      	asrs	r3, r3, #8
 8027f9a:	ebac 0c03 	sub.w	ip, ip, r3
 8027f9e:	1ac0      	subs	r0, r0, r3
 8027fa0:	782b      	ldrb	r3, [r5, #0]
 8027fa2:	b2c0      	uxtb	r0, r0
 8027fa4:	fb0c 2303 	mla	r3, ip, r3, r2
 8027fa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027faa:	70e8      	strb	r0, [r5, #3]
 8027fac:	fb12 f101 	smulbb	r1, r2, r1
 8027fb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027fb2:	fb93 f3f0 	sdiv	r3, r3, r0
 8027fb6:	fb12 f606 	smulbb	r6, r2, r6
 8027fba:	2bff      	cmp	r3, #255	@ 0xff
 8027fbc:	bfd6      	itet	le
 8027fbe:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027fc2:	23ff      	movgt	r3, #255	@ 0xff
 8027fc4:	b2db      	uxtble	r3, r3
 8027fc6:	702b      	strb	r3, [r5, #0]
 8027fc8:	786b      	ldrb	r3, [r5, #1]
 8027fca:	fb0c 1303 	mla	r3, ip, r3, r1
 8027fce:	fb93 f3f0 	sdiv	r3, r3, r0
 8027fd2:	2bff      	cmp	r3, #255	@ 0xff
 8027fd4:	bfd6      	itet	le
 8027fd6:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027fda:	23ff      	movgt	r3, #255	@ 0xff
 8027fdc:	b2db      	uxtble	r3, r3
 8027fde:	706b      	strb	r3, [r5, #1]
 8027fe0:	78ab      	ldrb	r3, [r5, #2]
 8027fe2:	fb0c 6303 	mla	r3, ip, r3, r6
 8027fe6:	fb93 f3f0 	sdiv	r3, r3, r0
 8027fea:	2bff      	cmp	r3, #255	@ 0xff
 8027fec:	bfd6      	itet	le
 8027fee:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027ff2:	23ff      	movgt	r3, #255	@ 0xff
 8027ff4:	b2db      	uxtble	r3, r3
 8027ff6:	70ab      	strb	r3, [r5, #2]
 8027ff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027ffa:	3504      	adds	r5, #4
 8027ffc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027ffe:	4413      	add	r3, r2
 8028000:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8028002:	9321      	str	r3, [sp, #132]	@ 0x84
 8028004:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028006:	441a      	add	r2, r3
 8028008:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802800a:	3b01      	subs	r3, #1
 802800c:	9222      	str	r2, [sp, #136]	@ 0x88
 802800e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028010:	e675      	b.n	8027cfe <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028014:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8028016:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8028018:	4433      	add	r3, r6
 802801a:	9321      	str	r3, [sp, #132]	@ 0x84
 802801c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802801e:	441c      	add	r4, r3
 8028020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028022:	3b01      	subs	r3, #1
 8028024:	9422      	str	r4, [sp, #136]	@ 0x88
 8028026:	9309      	str	r3, [sp, #36]	@ 0x24
 8028028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802802a:	3304      	adds	r3, #4
 802802c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802802e:	e644      	b.n	8027cba <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8028030:	d027      	beq.n	8028082 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028034:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8028036:	3b01      	subs	r3, #1
 8028038:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 802803a:	fb00 5003 	mla	r0, r0, r3, r5
 802803e:	1400      	asrs	r0, r0, #16
 8028040:	f53f ae58 	bmi.w	8027cf4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028044:	3901      	subs	r1, #1
 8028046:	4288      	cmp	r0, r1
 8028048:	f6bf ae54 	bge.w	8027cf4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802804c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802804e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8028050:	fb01 0303 	mla	r3, r1, r3, r0
 8028054:	141b      	asrs	r3, r3, #16
 8028056:	f53f ae4d 	bmi.w	8027cf4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802805a:	3a01      	subs	r2, #1
 802805c:	4293      	cmp	r3, r2
 802805e:	f6bf ae49 	bge.w	8027cf4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028064:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8028068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802806a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802806c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802806e:	2b00      	cmp	r3, #0
 8028070:	f300 8086 	bgt.w	8028180 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8028074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028076:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802807a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802807c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028082:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028084:	2b00      	cmp	r3, #0
 8028086:	f340 8218 	ble.w	80284ba <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 802808a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802808e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028090:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028094:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028098:	eef0 6a62 	vmov.f32	s13, s5
 802809c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80280a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80280a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280a8:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 80280ac:	eef0 6a43 	vmov.f32	s13, s6
 80280b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280b4:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 80280b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80280bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80280c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80280c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80280c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80280cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80280d0:	ee12 2a90 	vmov	r2, s5
 80280d4:	eef0 2a47 	vmov.f32	s5, s14
 80280d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80280dc:	ee13 2a10 	vmov	r2, s6
 80280e0:	9323      	str	r3, [sp, #140]	@ 0x8c
 80280e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80280e4:	eeb0 3a67 	vmov.f32	s6, s15
 80280e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80280ec:	9324      	str	r3, [sp, #144]	@ 0x90
 80280ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80280f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80280f2:	3b01      	subs	r3, #1
 80280f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80280f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80280f8:	bf08      	it	eq
 80280fa:	4613      	moveq	r3, r2
 80280fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80280fe:	e5ce      	b.n	8027c9e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028100:	fb08 f606 	mul.w	r6, r8, r6
 8028104:	fb09 6303 	mla	r3, r9, r3, r6
 8028108:	e64e      	b.n	8027da8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802810a:	4681      	mov	r9, r0
 802810c:	e675      	b.n	8027dfa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802810e:	f1c1 0210 	rsb	r2, r1, #16
 8028112:	4341      	muls	r1, r0
 8028114:	fb09 1902 	mla	r9, r9, r2, r1
 8028118:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802811c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028120:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028124:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028128:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802812c:	ea40 0909 	orr.w	r9, r0, r9
 8028130:	fa1f f089 	uxth.w	r0, r9
 8028134:	e70a      	b.n	8027f4c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8028136:	0209      	lsls	r1, r1, #8
 8028138:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 802813c:	4332      	orrs	r2, r6
 802813e:	602a      	str	r2, [r5, #0]
 8028140:	e75a      	b.n	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028142:	f116 0e01 	adds.w	lr, r6, #1
 8028146:	f53f af57 	bmi.w	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802814a:	4572      	cmp	r2, lr
 802814c:	f6ff af54 	blt.w	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028150:	f110 0e01 	adds.w	lr, r0, #1
 8028154:	f53f af50 	bmi.w	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028158:	4573      	cmp	r3, lr
 802815a:	f6ff af4d 	blt.w	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802815e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028160:	b21b      	sxth	r3, r3
 8028162:	b212      	sxth	r2, r2
 8028164:	9602      	str	r6, [sp, #8]
 8028166:	9301      	str	r3, [sp, #4]
 8028168:	9200      	str	r2, [sp, #0]
 802816a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802816e:	e9cd c405 	strd	ip, r4, [sp, #20]
 8028172:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8028176:	4629      	mov	r1, r5
 8028178:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802817a:	f7ff fbca 	bl	8027912 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 802817e:	e73b      	b.n	8027ff8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028180:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028182:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028186:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8028188:	f3c3 3603 	ubfx	r6, r3, #12, #4
 802818c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802818e:	fa1f fe82 	uxth.w	lr, r2
 8028192:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8028196:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8028198:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802819c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80281a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80281a2:	141b      	asrs	r3, r3, #16
 80281a4:	fb00 3c0c 	mla	ip, r0, ip, r3
 80281a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80281aa:	eb03 0a0c 	add.w	sl, r3, ip
 80281ae:	f813 900c 	ldrb.w	r9, [r3, ip]
 80281b2:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80281b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80281ba:	b29b      	uxth	r3, r3
 80281bc:	2e00      	cmp	r6, #0
 80281be:	f000 815c 	beq.w	802847a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 80281c2:	f81a 4000 	ldrb.w	r4, [sl, r0]
 80281c6:	eb0a 0b00 	add.w	fp, sl, r0
 80281ca:	fa1f fa86 	uxth.w	sl, r6
 80281ce:	9410      	str	r4, [sp, #64]	@ 0x40
 80281d0:	fb0a fe0e 	mul.w	lr, sl, lr
 80281d4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80281d8:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80281dc:	eba5 050e 	sub.w	r5, r5, lr
 80281e0:	9411      	str	r4, [sp, #68]	@ 0x44
 80281e2:	fa1f fa8a 	uxth.w	sl, sl
 80281e6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80281e8:	b2ad      	uxth	r5, r5
 80281ea:	eba3 030a 	sub.w	r3, r3, sl
 80281ee:	fb08 f505 	mul.w	r5, r8, r5
 80281f2:	b29b      	uxth	r3, r3
 80281f4:	fb09 5303 	mla	r3, r9, r3, r5
 80281f8:	fb0a 3304 	mla	r3, sl, r4, r3
 80281fc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80281fe:	fb0e 3304 	mla	r3, lr, r4, r3
 8028202:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028206:	2b00      	cmp	r3, #0
 8028208:	f000 812a 	beq.w	8028460 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 802820c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802820e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028212:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 8028216:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 802821a:	f000 8133 	beq.w	8028484 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 802821e:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 8028222:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028226:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802822a:	fb0a fe0e 	mul.w	lr, sl, lr
 802822e:	fb09 fc0c 	mul.w	ip, r9, ip
 8028232:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8028236:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802823a:	f10c 0b20 	add.w	fp, ip, #32
 802823e:	44ce      	add	lr, r9
 8028240:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 8028244:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028248:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802824c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028250:	ea4e 0909 	orr.w	r9, lr, r9
 8028254:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028258:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 802825c:	d01a      	beq.n	8028294 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 802825e:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 8028262:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028266:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802826a:	fb0a fe0e 	mul.w	lr, sl, lr
 802826e:	fb08 f80c 	mul.w	r8, r8, ip
 8028272:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 8028276:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802827a:	f108 0b20 	add.w	fp, r8, #32
 802827e:	44e6      	add	lr, ip
 8028280:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 8028284:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028288:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802828c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028290:	ea4e 0c0c 	orr.w	ip, lr, ip
 8028294:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028298:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802829c:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 80282a0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80282a4:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80282a8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80282ac:	ea4e 0909 	orr.w	r9, lr, r9
 80282b0:	ea4a 0c0c 	orr.w	ip, sl, ip
 80282b4:	2e00      	cmp	r6, #0
 80282b6:	f000 80e7 	beq.w	8028488 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 80282ba:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80282be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80282c0:	3801      	subs	r0, #1
 80282c2:	2cff      	cmp	r4, #255	@ 0xff
 80282c4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80282c8:	f100 0002 	add.w	r0, r0, #2
 80282cc:	eb05 0e00 	add.w	lr, r5, r0
 80282d0:	5a28      	ldrh	r0, [r5, r0]
 80282d2:	d018      	beq.n	8028306 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80282d4:	f420 65fc 	bic.w	r5, r0, #2016	@ 0x7e0
 80282d8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80282dc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80282e0:	fb04 fa00 	mul.w	sl, r4, r0
 80282e4:	fb08 f805 	mul.w	r8, r8, r5
 80282e8:	f10a 0520 	add.w	r5, sl, #32
 80282ec:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 80282f0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80282f4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80282f8:	4440      	add	r0, r8
 80282fa:	0a2d      	lsrs	r5, r5, #8
 80282fc:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8028300:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028304:	4328      	orrs	r0, r5
 8028306:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8028308:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802830c:	2cff      	cmp	r4, #255	@ 0xff
 802830e:	d01a      	beq.n	8028346 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028310:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8028314:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028318:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802831c:	fb04 fa05 	mul.w	sl, r4, r5
 8028320:	fb08 f80e 	mul.w	r8, r8, lr
 8028324:	f10a 0e20 	add.w	lr, sl, #32
 8028328:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 802832c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028330:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028334:	4445      	add	r5, r8
 8028336:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802833a:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 802833e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028342:	ea45 050e 	orr.w	r5, r5, lr
 8028346:	fb16 fe02 	smulbb	lr, r6, r2
 802834a:	f1c6 0810 	rsb	r8, r6, #16
 802834e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028352:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028356:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802835a:	eba8 0802 	sub.w	r8, r8, r2
 802835e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028362:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028366:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 802836a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802836e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028372:	ea4a 0000 	orr.w	r0, sl, r0
 8028376:	fb0c f202 	mul.w	r2, ip, r2
 802837a:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 802837e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028382:	fb09 2208 	mla	r2, r9, r8, r2
 8028386:	ea4b 0505 	orr.w	r5, fp, r5
 802838a:	fb06 2200 	mla	r2, r6, r0, r2
 802838e:	fb0e 2205 	mla	r2, lr, r5, r2
 8028392:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 8028396:	0952      	lsrs	r2, r2, #5
 8028398:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802839c:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80283a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80283a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80283a6:	fa1f fc8c 	uxth.w	ip, ip
 80283aa:	4353      	muls	r3, r2
 80283ac:	ea4f 262c 	mov.w	r6, ip, asr #8
 80283b0:	ea4f 00ec 	mov.w	r0, ip, asr #3
 80283b4:	1c5a      	adds	r2, r3, #1
 80283b6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80283ba:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80283be:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80283c2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80283c6:	121b      	asrs	r3, r3, #8
 80283c8:	b2d2      	uxtb	r2, r2
 80283ca:	2bff      	cmp	r3, #255	@ 0xff
 80283cc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80283d0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80283d4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80283d8:	d069      	beq.n	80284ae <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 80283da:	b2dd      	uxtb	r5, r3
 80283dc:	2b00      	cmp	r3, #0
 80283de:	d03f      	beq.n	8028460 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80283e0:	f891 c003 	ldrb.w	ip, [r1, #3]
 80283e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80283e6:	fb05 fe0c 	mul.w	lr, r5, ip
 80283ea:	4465      	add	r5, ip
 80283ec:	f891 8000 	ldrb.w	r8, [r1]
 80283f0:	fb12 f204 	smulbb	r2, r2, r4
 80283f4:	f10e 0301 	add.w	r3, lr, #1
 80283f8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80283fc:	121b      	asrs	r3, r3, #8
 80283fe:	1aed      	subs	r5, r5, r3
 8028400:	ebac 0303 	sub.w	r3, ip, r3
 8028404:	f891 c001 	ldrb.w	ip, [r1, #1]
 8028408:	b2ed      	uxtb	r5, r5
 802840a:	fb03 2208 	mla	r2, r3, r8, r2
 802840e:	fb92 f2f5 	sdiv	r2, r2, r5
 8028412:	2aff      	cmp	r2, #255	@ 0xff
 8028414:	70cd      	strb	r5, [r1, #3]
 8028416:	bfd6      	itet	le
 8028418:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802841c:	22ff      	movgt	r2, #255	@ 0xff
 802841e:	b2d2      	uxtble	r2, r2
 8028420:	700a      	strb	r2, [r1, #0]
 8028422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028424:	fb12 f000 	smulbb	r0, r2, r0
 8028428:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802842a:	fb03 000c 	mla	r0, r3, ip, r0
 802842e:	fb12 f606 	smulbb	r6, r2, r6
 8028432:	f891 c002 	ldrb.w	ip, [r1, #2]
 8028436:	fb90 f0f5 	sdiv	r0, r0, r5
 802843a:	fb03 630c 	mla	r3, r3, ip, r6
 802843e:	28ff      	cmp	r0, #255	@ 0xff
 8028440:	fb93 f3f5 	sdiv	r3, r3, r5
 8028444:	bfd6      	itet	le
 8028446:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802844a:	20ff      	movgt	r0, #255	@ 0xff
 802844c:	b2c0      	uxtble	r0, r0
 802844e:	2bff      	cmp	r3, #255	@ 0xff
 8028450:	bfd4      	ite	le
 8028452:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8028456:	23ff      	movgt	r3, #255	@ 0xff
 8028458:	7048      	strb	r0, [r1, #1]
 802845a:	bfd8      	it	le
 802845c:	b2db      	uxtble	r3, r3
 802845e:	708b      	strb	r3, [r1, #2]
 8028460:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028462:	3104      	adds	r1, #4
 8028464:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8028466:	4413      	add	r3, r2
 8028468:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802846a:	9321      	str	r3, [sp, #132]	@ 0x84
 802846c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802846e:	441a      	add	r2, r3
 8028470:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028472:	3b01      	subs	r3, #1
 8028474:	9222      	str	r2, [sp, #136]	@ 0x88
 8028476:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028478:	e5f8      	b.n	802806c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802847a:	fb08 f505 	mul.w	r5, r8, r5
 802847e:	fb09 5303 	mla	r3, r9, r3, r5
 8028482:	e6be      	b.n	8028202 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8028484:	46e1      	mov	r9, ip
 8028486:	e6e5      	b.n	8028254 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8028488:	f1c2 0010 	rsb	r0, r2, #16
 802848c:	fb0c f202 	mul.w	r2, ip, r2
 8028490:	fb09 2900 	mla	r9, r9, r0, r2
 8028494:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028498:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 802849c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80284a0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80284a4:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80284a8:	ea4c 0c09 	orr.w	ip, ip, r9
 80284ac:	e77a      	b.n	80283a4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80284ae:	0200      	lsls	r0, r0, #8
 80284b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80284b4:	4302      	orrs	r2, r0
 80284b6:	600a      	str	r2, [r1, #0]
 80284b8:	e7d2      	b.n	8028460 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80284ba:	b017      	add	sp, #92	@ 0x5c
 80284bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080284c0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 80284c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284c4:	b085      	sub	sp, #20
 80284c6:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	@ 0x40
 80284ca:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	@ 0x38
 80284ce:	2800      	cmp	r0, #0
 80284d0:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 80284d4:	fb00 8504 	mla	r5, r0, r4, r8
 80284d8:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80284dc:	f89d c04c 	ldrb.w	ip, [sp, #76]	@ 0x4c
 80284e0:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 80284e4:	9702      	str	r7, [sp, #8]
 80284e6:	eb03 0705 	add.w	r7, r3, r5
 80284ea:	9703      	str	r7, [sp, #12]
 80284ec:	f2c0 812e 	blt.w	802874c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 80284f0:	4582      	cmp	sl, r0
 80284f2:	f340 812b 	ble.w	802874c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 80284f6:	f1b8 0f00 	cmp.w	r8, #0
 80284fa:	f2c0 8122 	blt.w	8028742 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 80284fe:	4544      	cmp	r4, r8
 8028500:	f340 811f 	ble.w	8028742 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8028504:	f813 e005 	ldrb.w	lr, [r3, r5]
 8028508:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 802850c:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8028510:	f423 67fc 	bic.w	r7, r3, #2016	@ 0x7e0
 8028514:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028518:	4357      	muls	r7, r2
 802851a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802851e:	fb0e f503 	mul.w	r5, lr, r3
 8028522:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 8028526:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 802852a:	441f      	add	r7, r3
 802852c:	f105 0320 	add.w	r3, r5, #32
 8028530:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8028534:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 8028538:	0a1b      	lsrs	r3, r3, #8
 802853a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802853e:	4313      	orrs	r3, r2
 8028540:	9301      	str	r3, [sp, #4]
 8028542:	f118 0301 	adds.w	r3, r8, #1
 8028546:	f100 8106 	bmi.w	8028756 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 802854a:	429c      	cmp	r4, r3
 802854c:	f340 8103 	ble.w	8028756 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8028550:	2e00      	cmp	r6, #0
 8028552:	f000 8103 	beq.w	802875c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 8028556:	9b03      	ldr	r3, [sp, #12]
 8028558:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802855c:	785a      	ldrb	r2, [r3, #1]
 802855e:	9b02      	ldr	r3, [sp, #8]
 8028560:	10d7      	asrs	r7, r2, #3
 8028562:	885b      	ldrh	r3, [r3, #2]
 8028564:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8028568:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802856c:	436f      	muls	r7, r5
 802856e:	4353      	muls	r3, r2
 8028570:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 8028574:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 8028578:	444f      	add	r7, r9
 802857a:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 802857e:	f103 0b20 	add.w	fp, r3, #32
 8028582:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8028586:	0a1b      	lsrs	r3, r3, #8
 8028588:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802858c:	431d      	orrs	r5, r3
 802858e:	3001      	adds	r0, #1
 8028590:	f100 80ea 	bmi.w	8028768 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8028594:	4582      	cmp	sl, r0
 8028596:	f340 80e7 	ble.w	8028768 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 802859a:	f1bc 0f00 	cmp.w	ip, #0
 802859e:	f000 80e8 	beq.w	8028772 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 80285a2:	f1b8 0f00 	cmp.w	r8, #0
 80285a6:	f2c0 80dc 	blt.w	8028762 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80285aa:	4544      	cmp	r4, r8
 80285ac:	f340 80d9 	ble.w	8028762 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80285b0:	9b03      	ldr	r3, [sp, #12]
 80285b2:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80285b6:	5d1f      	ldrb	r7, [r3, r4]
 80285b8:	9b02      	ldr	r3, [sp, #8]
 80285ba:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80285be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80285c2:	f423 60fc 	bic.w	r0, r3, #2016	@ 0x7e0
 80285c6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80285ca:	fb09 f900 	mul.w	r9, r9, r0
 80285ce:	437b      	muls	r3, r7
 80285d0:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 80285d4:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80285d8:	44d1      	add	r9, sl
 80285da:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 80285de:	f103 0b20 	add.w	fp, r3, #32
 80285e2:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80285e6:	0a1b      	lsrs	r3, r3, #8
 80285e8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80285ec:	4318      	orrs	r0, r3
 80285ee:	f118 0801 	adds.w	r8, r8, #1
 80285f2:	f100 80c3 	bmi.w	802877c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 80285f6:	4544      	cmp	r4, r8
 80285f8:	f340 80c0 	ble.w	802877c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 80285fc:	2e00      	cmp	r6, #0
 80285fe:	f000 80c0 	beq.w	8028782 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 8028602:	f104 0801 	add.w	r8, r4, #1
 8028606:	9b03      	ldr	r3, [sp, #12]
 8028608:	9c02      	ldr	r4, [sp, #8]
 802860a:	f813 3008 	ldrb.w	r3, [r3, r8]
 802860e:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 8028612:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 8028616:	f424 68fc 	bic.w	r8, r4, #2016	@ 0x7e0
 802861a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802861e:	fb0a fa08 	mul.w	sl, sl, r8
 8028622:	fb03 f904 	mul.w	r9, r3, r4
 8028626:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802862a:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 802862e:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8028632:	44da      	add	sl, fp
 8028634:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 8028638:	f109 0420 	add.w	r4, r9, #32
 802863c:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8028640:	0a24      	lsrs	r4, r4, #8
 8028642:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028646:	ea48 0404 	orr.w	r4, r8, r4
 802864a:	fa1f f886 	uxth.w	r8, r6
 802864e:	fa1f fa8c 	uxth.w	sl, ip
 8028652:	fb08 fb0a 	mul.w	fp, r8, sl
 8028656:	ea4f 1808 	mov.w	r8, r8, lsl #4
 802865a:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 802865e:	f5c8 7980 	rsb	r9, r8, #256	@ 0x100
 8028662:	eba8 080b 	sub.w	r8, r8, fp
 8028666:	fa1f fa8a 	uxth.w	sl, sl
 802866a:	fa1f f888 	uxth.w	r8, r8
 802866e:	eba9 090a 	sub.w	r9, r9, sl
 8028672:	fb02 f808 	mul.w	r8, r2, r8
 8028676:	9a01      	ldr	r2, [sp, #4]
 8028678:	fa1f f989 	uxth.w	r9, r9
 802867c:	0412      	lsls	r2, r2, #16
 802867e:	fb0e 8809 	mla	r8, lr, r9, r8
 8028682:	f002 6efc 	and.w	lr, r2, #132120576	@ 0x7e00000
 8028686:	9a01      	ldr	r2, [sp, #4]
 8028688:	fb0a 8707 	mla	r7, sl, r7, r8
 802868c:	ea4f 4805 	mov.w	r8, r5, lsl #16
 8028690:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028694:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028698:	fb0b 7303 	mla	r3, fp, r3, r7
 802869c:	fb16 f70c 	smulbb	r7, r6, ip
 80286a0:	ea4e 0202 	orr.w	r2, lr, r2
 80286a4:	f008 68fc 	and.w	r8, r8, #132120576	@ 0x7e00000
 80286a8:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 80286ac:	f1cc 0e10 	rsb	lr, ip, #16
 80286b0:	ea48 0505 	orr.w	r5, r8, r5
 80286b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80286b8:	ebae 0e06 	sub.w	lr, lr, r6
 80286bc:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 80286c0:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 80286c4:	2bff      	cmp	r3, #255	@ 0xff
 80286c6:	fb06 f605 	mul.w	r6, r6, r5
 80286ca:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 80286ce:	fb0e 6202 	mla	r2, lr, r2, r6
 80286d2:	ea4f 4604 	mov.w	r6, r4, lsl #16
 80286d6:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80286da:	f006 66fc 	and.w	r6, r6, #132120576	@ 0x7e00000
 80286de:	ea44 0406 	orr.w	r4, r4, r6
 80286e2:	fb07 2604 	mla	r6, r7, r4, r2
 80286e6:	ea4f 4200 	mov.w	r2, r0, lsl #16
 80286ea:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80286ee:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80286f2:	ea40 0002 	orr.w	r0, r0, r2
 80286f6:	fb0c 6c00 	mla	ip, ip, r0, r6
 80286fa:	ea4f 525c 	mov.w	r2, ip, lsr #21
 80286fe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028702:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028706:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802870a:	ea42 020c 	orr.w	r2, r2, ip
 802870e:	b292      	uxth	r2, r2
 8028710:	ea4f 2022 	mov.w	r0, r2, asr #8
 8028714:	ea4f 05e2 	mov.w	r5, r2, asr #3
 8028718:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802871c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028720:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8028724:	b2d2      	uxtb	r2, r2
 8028726:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802872a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802872e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028732:	d129      	bne.n	8028788 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 8028734:	700a      	strb	r2, [r1, #0]
 8028736:	704d      	strb	r5, [r1, #1]
 8028738:	7088      	strb	r0, [r1, #2]
 802873a:	70cb      	strb	r3, [r1, #3]
 802873c:	b005      	add	sp, #20
 802873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028742:	f04f 0e00 	mov.w	lr, #0
 8028746:	f8cd e004 	str.w	lr, [sp, #4]
 802874a:	e6fa      	b.n	8028542 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 802874c:	2200      	movs	r2, #0
 802874e:	4696      	mov	lr, r2
 8028750:	4615      	mov	r5, r2
 8028752:	9201      	str	r2, [sp, #4]
 8028754:	e71b      	b.n	802858e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028756:	2200      	movs	r2, #0
 8028758:	4615      	mov	r5, r2
 802875a:	e718      	b.n	802858e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 802875c:	4632      	mov	r2, r6
 802875e:	4635      	mov	r5, r6
 8028760:	e715      	b.n	802858e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028762:	2700      	movs	r7, #0
 8028764:	4638      	mov	r0, r7
 8028766:	e742      	b.n	80285ee <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 8028768:	2300      	movs	r3, #0
 802876a:	461f      	mov	r7, r3
 802876c:	461c      	mov	r4, r3
 802876e:	4618      	mov	r0, r3
 8028770:	e76b      	b.n	802864a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028772:	4663      	mov	r3, ip
 8028774:	4667      	mov	r7, ip
 8028776:	4664      	mov	r4, ip
 8028778:	4660      	mov	r0, ip
 802877a:	e766      	b.n	802864a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 802877c:	2300      	movs	r3, #0
 802877e:	461c      	mov	r4, r3
 8028780:	e763      	b.n	802864a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028782:	4633      	mov	r3, r6
 8028784:	4634      	mov	r4, r6
 8028786:	e760      	b.n	802864a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028788:	2b00      	cmp	r3, #0
 802878a:	d0d7      	beq.n	802873c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 802878c:	78cf      	ldrb	r7, [r1, #3]
 802878e:	fb03 f607 	mul.w	r6, r3, r7
 8028792:	443b      	add	r3, r7
 8028794:	1c74      	adds	r4, r6, #1
 8028796:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 802879a:	780e      	ldrb	r6, [r1, #0]
 802879c:	1224      	asrs	r4, r4, #8
 802879e:	1b3f      	subs	r7, r7, r4
 80287a0:	1b1b      	subs	r3, r3, r4
 80287a2:	24ff      	movs	r4, #255	@ 0xff
 80287a4:	437e      	muls	r6, r7
 80287a6:	b2db      	uxtb	r3, r3
 80287a8:	fb14 6202 	smlabb	r2, r4, r2, r6
 80287ac:	fb92 f6f3 	sdiv	r6, r2, r3
 80287b0:	42a6      	cmp	r6, r4
 80287b2:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 80287b6:	bfc8      	it	gt
 80287b8:	4626      	movgt	r6, r4
 80287ba:	784c      	ldrb	r4, [r1, #1]
 80287bc:	bfd8      	it	le
 80287be:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 80287c2:	fb07 f404 	mul.w	r4, r7, r4
 80287c6:	bfd8      	it	le
 80287c8:	b2f6      	uxtble	r6, r6
 80287ca:	fb12 4505 	smlabb	r5, r2, r5, r4
 80287ce:	700e      	strb	r6, [r1, #0]
 80287d0:	fb95 f4f3 	sdiv	r4, r5, r3
 80287d4:	4294      	cmp	r4, r2
 80287d6:	bfd4      	ite	le
 80287d8:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 80287dc:	4614      	movgt	r4, r2
 80287de:	788a      	ldrb	r2, [r1, #2]
 80287e0:	bfd8      	it	le
 80287e2:	b2e4      	uxtble	r4, r4
 80287e4:	437a      	muls	r2, r7
 80287e6:	704c      	strb	r4, [r1, #1]
 80287e8:	24ff      	movs	r4, #255	@ 0xff
 80287ea:	fb14 2000 	smlabb	r0, r4, r0, r2
 80287ee:	fb90 f2f3 	sdiv	r2, r0, r3
 80287f2:	42a2      	cmp	r2, r4
 80287f4:	bfd6      	itet	le
 80287f6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80287fa:	4622      	movgt	r2, r4
 80287fc:	b2d2      	uxtble	r2, r2
 80287fe:	708a      	strb	r2, [r1, #2]
 8028800:	e79b      	b.n	802873a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08028802 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028806:	b093      	sub	sp, #76	@ 0x4c
 8028808:	9210      	str	r2, [sp, #64]	@ 0x40
 802880a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802880c:	9011      	str	r0, [sp, #68]	@ 0x44
 802880e:	910e      	str	r1, [sp, #56]	@ 0x38
 8028810:	6850      	ldr	r0, [r2, #4]
 8028812:	9306      	str	r3, [sp, #24]
 8028814:	6812      	ldr	r2, [r2, #0]
 8028816:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802881a:	fb00 1303 	mla	r3, r0, r3, r1
 802881e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028822:	9307      	str	r3, [sp, #28]
 8028824:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028826:	681b      	ldr	r3, [r3, #0]
 8028828:	9308      	str	r3, [sp, #32]
 802882a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802882c:	685b      	ldr	r3, [r3, #4]
 802882e:	9309      	str	r3, [sp, #36]	@ 0x24
 8028830:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028832:	2b00      	cmp	r3, #0
 8028834:	dc03      	bgt.n	802883e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028838:	2b00      	cmp	r3, #0
 802883a:	f340 83f9 	ble.w	8029030 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 802883e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028840:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028844:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028848:	1e48      	subs	r0, r1, #1
 802884a:	1e55      	subs	r5, r2, #1
 802884c:	9b06      	ldr	r3, [sp, #24]
 802884e:	2b00      	cmp	r3, #0
 8028850:	f340 81b4 	ble.w	8028bbc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8028854:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8028856:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028858:	1436      	asrs	r6, r6, #16
 802885a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802885e:	d406      	bmi.n	802886e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028860:	4286      	cmp	r6, r0
 8028862:	da04      	bge.n	802886e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028864:	2b00      	cmp	r3, #0
 8028866:	db02      	blt.n	802886e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028868:	42ab      	cmp	r3, r5
 802886a:	f2c0 81a8 	blt.w	8028bbe <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802886e:	3601      	adds	r6, #1
 8028870:	f100 8195 	bmi.w	8028b9e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028874:	42b1      	cmp	r1, r6
 8028876:	f2c0 8192 	blt.w	8028b9e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802887a:	3301      	adds	r3, #1
 802887c:	f100 818f 	bmi.w	8028b9e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028880:	429a      	cmp	r2, r3
 8028882:	f2c0 818c 	blt.w	8028b9e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028886:	9b06      	ldr	r3, [sp, #24]
 8028888:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 802888c:	9d07      	ldr	r5, [sp, #28]
 802888e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028892:	2b00      	cmp	r3, #0
 8028894:	f340 81b5 	ble.w	8028c02 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8028898:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802889a:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802889c:	1418      	asrs	r0, r3, #16
 802889e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80288a0:	1436      	asrs	r6, r6, #16
 80288a2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80288a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80288a8:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80288ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80288ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80288b2:	f100 820e 	bmi.w	8028cd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80288b6:	f102 3eff 	add.w	lr, r2, #4294967295
 80288ba:	4576      	cmp	r6, lr
 80288bc:	f280 8209 	bge.w	8028cd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80288c0:	2800      	cmp	r0, #0
 80288c2:	f2c0 8206 	blt.w	8028cd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80288c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80288ca:	4570      	cmp	r0, lr
 80288cc:	f280 8201 	bge.w	8028cd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80288d0:	b212      	sxth	r2, r2
 80288d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80288d4:	fa1f fe81 	uxth.w	lr, r1
 80288d8:	fb00 6002 	mla	r0, r0, r2, r6
 80288dc:	ea4f 160e 	mov.w	r6, lr, lsl #4
 80288e0:	eb03 0a00 	add.w	sl, r3, r0
 80288e4:	f813 9000 	ldrb.w	r9, [r3, r0]
 80288e8:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80288ec:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80288f0:	b29b      	uxth	r3, r3
 80288f2:	f1bc 0f00 	cmp.w	ip, #0
 80288f6:	f000 81ca 	beq.w	8028c8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80288fa:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80288fe:	eb0a 0b02 	add.w	fp, sl, r2
 8028902:	fa1f fa8c 	uxth.w	sl, ip
 8028906:	940a      	str	r4, [sp, #40]	@ 0x28
 8028908:	fb0a fe0e 	mul.w	lr, sl, lr
 802890c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028910:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028914:	eba6 060e 	sub.w	r6, r6, lr
 8028918:	940b      	str	r4, [sp, #44]	@ 0x2c
 802891a:	fa1f fa8a 	uxth.w	sl, sl
 802891e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028920:	b2b6      	uxth	r6, r6
 8028922:	eba3 030a 	sub.w	r3, r3, sl
 8028926:	fb08 f606 	mul.w	r6, r8, r6
 802892a:	b29b      	uxth	r3, r3
 802892c:	fb09 6303 	mla	r3, r9, r3, r6
 8028930:	fb0a 3304 	mla	r3, sl, r4, r3
 8028934:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028936:	fb0e 3304 	mla	r3, lr, r4, r3
 802893a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802893e:	2b00      	cmp	r3, #0
 8028940:	f000 8120 	beq.w	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028944:	9c08      	ldr	r4, [sp, #32]
 8028946:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802894a:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 802894e:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8028952:	f000 81a1 	beq.w	8028c98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8028956:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802895a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802895e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028962:	fb0a fe0e 	mul.w	lr, sl, lr
 8028966:	fb09 f000 	mul.w	r0, r9, r0
 802896a:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 802896e:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028972:	f100 0b20 	add.w	fp, r0, #32
 8028976:	44ce      	add	lr, r9
 8028978:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802897c:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028980:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028984:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028988:	ea4e 0909 	orr.w	r9, lr, r9
 802898c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028990:	8870      	ldrh	r0, [r6, #2]
 8028992:	d019      	beq.n	80289c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8028994:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8028998:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802899c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80289a0:	fb0a fe0e 	mul.w	lr, sl, lr
 80289a4:	fb08 f800 	mul.w	r8, r8, r0
 80289a8:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 80289ac:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80289b0:	f108 0b20 	add.w	fp, r8, #32
 80289b4:	4486      	add	lr, r0
 80289b6:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80289ba:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80289be:	0a00      	lsrs	r0, r0, #8
 80289c0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80289c4:	ea4e 0000 	orr.w	r0, lr, r0
 80289c8:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80289cc:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80289d0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80289d4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80289d8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80289dc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80289e0:	ea4e 0909 	orr.w	r9, lr, r9
 80289e4:	ea4a 0000 	orr.w	r0, sl, r0
 80289e8:	f1bc 0f00 	cmp.w	ip, #0
 80289ec:	f000 8156 	beq.w	8028c9c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80289f0:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80289f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80289f6:	3a01      	subs	r2, #1
 80289f8:	2cff      	cmp	r4, #255	@ 0xff
 80289fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80289fe:	f102 0202 	add.w	r2, r2, #2
 8028a02:	eb06 0e02 	add.w	lr, r6, r2
 8028a06:	5ab2      	ldrh	r2, [r6, r2]
 8028a08:	d018      	beq.n	8028a3c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8028a0a:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8028a0e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028a12:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028a16:	fb04 fa02 	mul.w	sl, r4, r2
 8028a1a:	fb08 f806 	mul.w	r8, r8, r6
 8028a1e:	f10a 0620 	add.w	r6, sl, #32
 8028a22:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8028a26:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028a2a:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8028a2e:	4442      	add	r2, r8
 8028a30:	0a36      	lsrs	r6, r6, #8
 8028a32:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8028a36:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8028a3a:	4332      	orrs	r2, r6
 8028a3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028a3e:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8028a42:	2cff      	cmp	r4, #255	@ 0xff
 8028a44:	d01a      	beq.n	8028a7c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8028a46:	f426 6efc 	bic.w	lr, r6, #2016	@ 0x7e0
 8028a4a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8028a4e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028a52:	fb04 fa06 	mul.w	sl, r4, r6
 8028a56:	fb08 f80e 	mul.w	r8, r8, lr
 8028a5a:	f10a 0e20 	add.w	lr, sl, #32
 8028a5e:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8028a62:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028a66:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028a6a:	4446      	add	r6, r8
 8028a6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a70:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8028a74:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028a78:	ea46 060e 	orr.w	r6, r6, lr
 8028a7c:	fb1c fe01 	smulbb	lr, ip, r1
 8028a80:	f1cc 0810 	rsb	r8, ip, #16
 8028a84:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028a88:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028a8c:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028a90:	eba8 0801 	sub.w	r8, r8, r1
 8028a94:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8028a98:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028a9c:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8028aa0:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8028aa4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028aa8:	ea4a 0202 	orr.w	r2, sl, r2
 8028aac:	4341      	muls	r1, r0
 8028aae:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028ab2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028ab6:	fb09 1108 	mla	r1, r9, r8, r1
 8028aba:	ea4b 0606 	orr.w	r6, fp, r6
 8028abe:	fb0c 1102 	mla	r1, ip, r2, r1
 8028ac2:	fb0e 1e06 	mla	lr, lr, r6, r1
 8028ac6:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8028aca:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028ace:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028ad2:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028ad6:	ea41 0e0e 	orr.w	lr, r1, lr
 8028ada:	fa1f f18e 	uxth.w	r1, lr
 8028ade:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028ae2:	2bff      	cmp	r3, #255	@ 0xff
 8028ae4:	ea4f 00e1 	mov.w	r0, r1, asr #3
 8028ae8:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8028aec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028af0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028af4:	b2d2      	uxtb	r2, r2
 8028af6:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028afa:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8028afe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028b02:	f000 80df 	beq.w	8028cc4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8028b06:	f895 8003 	ldrb.w	r8, [r5, #3]
 8028b0a:	24ff      	movs	r4, #255	@ 0xff
 8028b0c:	fb03 f608 	mul.w	r6, r3, r8
 8028b10:	4443      	add	r3, r8
 8028b12:	1c71      	adds	r1, r6, #1
 8028b14:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8028b18:	782e      	ldrb	r6, [r5, #0]
 8028b1a:	1209      	asrs	r1, r1, #8
 8028b1c:	1a5b      	subs	r3, r3, r1
 8028b1e:	eba8 0101 	sub.w	r1, r8, r1
 8028b22:	f895 8002 	ldrb.w	r8, [r5, #2]
 8028b26:	434e      	muls	r6, r1
 8028b28:	b2db      	uxtb	r3, r3
 8028b2a:	fb14 6202 	smlabb	r2, r4, r2, r6
 8028b2e:	24ff      	movs	r4, #255	@ 0xff
 8028b30:	70eb      	strb	r3, [r5, #3]
 8028b32:	fb92 f2f3 	sdiv	r2, r2, r3
 8028b36:	2aff      	cmp	r2, #255	@ 0xff
 8028b38:	bfd6      	itet	le
 8028b3a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028b3e:	22ff      	movgt	r2, #255	@ 0xff
 8028b40:	b2d2      	uxtble	r2, r2
 8028b42:	702a      	strb	r2, [r5, #0]
 8028b44:	786a      	ldrb	r2, [r5, #1]
 8028b46:	434a      	muls	r2, r1
 8028b48:	fb01 f108 	mul.w	r1, r1, r8
 8028b4c:	fb14 2000 	smlabb	r0, r4, r0, r2
 8028b50:	22ff      	movs	r2, #255	@ 0xff
 8028b52:	fb90 f0f3 	sdiv	r0, r0, r3
 8028b56:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8028b5a:	28ff      	cmp	r0, #255	@ 0xff
 8028b5c:	fb9c fcf3 	sdiv	ip, ip, r3
 8028b60:	bfd6      	itet	le
 8028b62:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028b66:	20ff      	movgt	r0, #255	@ 0xff
 8028b68:	b2c0      	uxtble	r0, r0
 8028b6a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028b6e:	bfd4      	ite	le
 8028b70:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8028b74:	f04f 0cff 	movgt.w	ip, #255	@ 0xff
 8028b78:	7068      	strb	r0, [r5, #1]
 8028b7a:	bfd8      	it	le
 8028b7c:	fa5f fc8c 	uxtble.w	ip, ip
 8028b80:	f885 c002 	strb.w	ip, [r5, #2]
 8028b84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028b86:	3504      	adds	r5, #4
 8028b88:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028b8a:	4413      	add	r3, r2
 8028b8c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028b8e:	931d      	str	r3, [sp, #116]	@ 0x74
 8028b90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028b92:	441a      	add	r2, r3
 8028b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028b96:	3b01      	subs	r3, #1
 8028b98:	921e      	str	r2, [sp, #120]	@ 0x78
 8028b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028b9c:	e678      	b.n	8028890 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028ba0:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8028ba2:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8028ba4:	4433      	add	r3, r6
 8028ba6:	931d      	str	r3, [sp, #116]	@ 0x74
 8028ba8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028baa:	441c      	add	r4, r3
 8028bac:	9b06      	ldr	r3, [sp, #24]
 8028bae:	3b01      	subs	r3, #1
 8028bb0:	941e      	str	r4, [sp, #120]	@ 0x78
 8028bb2:	9306      	str	r3, [sp, #24]
 8028bb4:	9b07      	ldr	r3, [sp, #28]
 8028bb6:	3304      	adds	r3, #4
 8028bb8:	9307      	str	r3, [sp, #28]
 8028bba:	e647      	b.n	802884c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028bbc:	d028      	beq.n	8028c10 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8028bbe:	9b06      	ldr	r3, [sp, #24]
 8028bc0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028bc2:	3b01      	subs	r3, #1
 8028bc4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8028bc6:	fb00 5003 	mla	r0, r0, r3, r5
 8028bca:	1400      	asrs	r0, r0, #16
 8028bcc:	f53f ae5b 	bmi.w	8028886 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028bd0:	3901      	subs	r1, #1
 8028bd2:	4288      	cmp	r0, r1
 8028bd4:	f6bf ae57 	bge.w	8028886 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028bd8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028bda:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8028bdc:	fb01 0303 	mla	r3, r1, r3, r0
 8028be0:	141b      	asrs	r3, r3, #16
 8028be2:	f53f ae50 	bmi.w	8028886 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028be6:	3a01      	subs	r2, #1
 8028be8:	4293      	cmp	r3, r2
 8028bea:	f6bf ae4c 	bge.w	8028886 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028bee:	9b07      	ldr	r3, [sp, #28]
 8028bf0:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8028bf4:	1d19      	adds	r1, r3, #4
 8028bf6:	9b06      	ldr	r3, [sp, #24]
 8028bf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028bfc:	2b00      	cmp	r3, #0
 8028bfe:	f300 8085 	bgt.w	8028d0c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8028c02:	9b06      	ldr	r3, [sp, #24]
 8028c04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028c08:	9b07      	ldr	r3, [sp, #28]
 8028c0a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028c0e:	9307      	str	r3, [sp, #28]
 8028c10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028c12:	2b00      	cmp	r3, #0
 8028c14:	f340 820c 	ble.w	8029030 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8028c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028c1c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028c1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028c22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028c26:	eef0 6a62 	vmov.f32	s13, s5
 8028c2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028c2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c36:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8028c3a:	eef0 6a43 	vmov.f32	s13, s6
 8028c3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c42:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8028c46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028c4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028c4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028c52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028c56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028c5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028c5e:	ee12 2a90 	vmov	r2, s5
 8028c62:	eef0 2a47 	vmov.f32	s5, s14
 8028c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c6a:	ee13 2a10 	vmov	r2, s6
 8028c6e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028c70:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028c72:	eeb0 3a67 	vmov.f32	s6, s15
 8028c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c7a:	9320      	str	r3, [sp, #128]	@ 0x80
 8028c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028c7e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028c80:	3b01      	subs	r3, #1
 8028c82:	930e      	str	r3, [sp, #56]	@ 0x38
 8028c84:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028c86:	bf08      	it	eq
 8028c88:	4613      	moveq	r3, r2
 8028c8a:	9306      	str	r3, [sp, #24]
 8028c8c:	e5d0      	b.n	8028830 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8028c8e:	fb08 f606 	mul.w	r6, r8, r6
 8028c92:	fb09 6303 	mla	r3, r9, r3, r6
 8028c96:	e650      	b.n	802893a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8028c98:	4681      	mov	r9, r0
 8028c9a:	e677      	b.n	802898c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8028c9c:	f1c1 0210 	rsb	r2, r1, #16
 8028ca0:	4341      	muls	r1, r0
 8028ca2:	fb09 1902 	mla	r9, r9, r2, r1
 8028ca6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028caa:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8028cae:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028cb2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028cb6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028cba:	ea41 0909 	orr.w	r9, r1, r9
 8028cbe:	fa1f f189 	uxth.w	r1, r9
 8028cc2:	e70c      	b.n	8028ade <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8028cc4:	0200      	lsls	r0, r0, #8
 8028cc6:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8028cca:	ea4c 0202 	orr.w	r2, ip, r2
 8028cce:	602a      	str	r2, [r5, #0]
 8028cd0:	e758      	b.n	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028cd2:	f116 0e01 	adds.w	lr, r6, #1
 8028cd6:	f53f af55 	bmi.w	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028cda:	4572      	cmp	r2, lr
 8028cdc:	f6ff af52 	blt.w	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028ce0:	f110 0e01 	adds.w	lr, r0, #1
 8028ce4:	f53f af4e 	bmi.w	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028ce8:	4573      	cmp	r3, lr
 8028cea:	f6ff af4b 	blt.w	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028cee:	b21b      	sxth	r3, r3
 8028cf0:	b212      	sxth	r2, r2
 8028cf2:	9301      	str	r3, [sp, #4]
 8028cf4:	9200      	str	r2, [sp, #0]
 8028cf6:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028cfa:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8028cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8028d02:	4629      	mov	r1, r5
 8028d04:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028d06:	f7ff fbdb 	bl	80284c0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8028d0a:	e73b      	b.n	8028b84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028d0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028d0e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028d12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028d14:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8028d18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028d1a:	fa1f fe82 	uxth.w	lr, r2
 8028d1e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8028d22:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028d24:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8028d28:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8028d2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028d2e:	141b      	asrs	r3, r3, #16
 8028d30:	fb00 3c0c 	mla	ip, r0, ip, r3
 8028d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028d36:	eb03 0a0c 	add.w	sl, r3, ip
 8028d3a:	f813 900c 	ldrb.w	r9, [r3, ip]
 8028d3e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8028d42:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028d46:	b29b      	uxth	r3, r3
 8028d48:	2e00      	cmp	r6, #0
 8028d4a:	f000 8152 	beq.w	8028ff2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 8028d4e:	f81a 4000 	ldrb.w	r4, [sl, r0]
 8028d52:	eb0a 0b00 	add.w	fp, sl, r0
 8028d56:	fa1f fa86 	uxth.w	sl, r6
 8028d5a:	940c      	str	r4, [sp, #48]	@ 0x30
 8028d5c:	fb0a fe0e 	mul.w	lr, sl, lr
 8028d60:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028d64:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028d68:	eba5 050e 	sub.w	r5, r5, lr
 8028d6c:	940d      	str	r4, [sp, #52]	@ 0x34
 8028d6e:	fa1f fa8a 	uxth.w	sl, sl
 8028d72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028d74:	b2ad      	uxth	r5, r5
 8028d76:	eba3 030a 	sub.w	r3, r3, sl
 8028d7a:	fb08 f505 	mul.w	r5, r8, r5
 8028d7e:	b29b      	uxth	r3, r3
 8028d80:	fb09 5303 	mla	r3, r9, r3, r5
 8028d84:	fb0a 3304 	mla	r3, sl, r4, r3
 8028d88:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028d8a:	fb0e 3304 	mla	r3, lr, r4, r3
 8028d8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028d92:	2b00      	cmp	r3, #0
 8028d94:	f000 8120 	beq.w	8028fd8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8028d98:	9c08      	ldr	r4, [sp, #32]
 8028d9a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028d9e:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 8028da2:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 8028da6:	f000 8129 	beq.w	8028ffc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 8028daa:	f425 6cfc 	bic.w	ip, r5, #2016	@ 0x7e0
 8028dae:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028db2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028db6:	fb0a fc0c 	mul.w	ip, sl, ip
 8028dba:	fb09 f505 	mul.w	r5, r9, r5
 8028dbe:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 8028dc2:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028dc6:	f105 0b20 	add.w	fp, r5, #32
 8028dca:	44cc      	add	ip, r9
 8028dcc:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 8028dd0:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8028dd4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028dd8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028ddc:	ea4c 0909 	orr.w	r9, ip, r9
 8028de0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028de4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028de8:	d019      	beq.n	8028e1e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8028dea:	f425 6cfc 	bic.w	ip, r5, #2016	@ 0x7e0
 8028dee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028df2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028df6:	fb0a fc0c 	mul.w	ip, sl, ip
 8028dfa:	fb08 f805 	mul.w	r8, r8, r5
 8028dfe:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 8028e02:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028e06:	f108 0b20 	add.w	fp, r8, #32
 8028e0a:	44ac      	add	ip, r5
 8028e0c:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8028e10:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8028e14:	0a2d      	lsrs	r5, r5, #8
 8028e16:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028e1a:	ea4c 0505 	orr.w	r5, ip, r5
 8028e1e:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028e22:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028e26:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8028e2a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028e2e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028e32:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028e36:	ea4c 0909 	orr.w	r9, ip, r9
 8028e3a:	ea4a 0505 	orr.w	r5, sl, r5
 8028e3e:	2e00      	cmp	r6, #0
 8028e40:	f000 80de 	beq.w	8029000 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 8028e44:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8028e48:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028e4a:	3801      	subs	r0, #1
 8028e4c:	2cff      	cmp	r4, #255	@ 0xff
 8028e4e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8028e52:	f100 0002 	add.w	r0, r0, #2
 8028e56:	eb0e 0800 	add.w	r8, lr, r0
 8028e5a:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8028e5e:	d01a      	beq.n	8028e96 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8028e60:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8028e64:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028e68:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8028e6c:	fb04 fa00 	mul.w	sl, r4, r0
 8028e70:	fb0e fe0c 	mul.w	lr, lr, ip
 8028e74:	f10a 0c20 	add.w	ip, sl, #32
 8028e78:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8028e7c:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028e80:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028e84:	4470      	add	r0, lr
 8028e86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e8a:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8028e8e:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028e92:	ea40 000c 	orr.w	r0, r0, ip
 8028e96:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028e98:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 8028e9c:	2cff      	cmp	r4, #255	@ 0xff
 8028e9e:	d01a      	beq.n	8028ed6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8028ea0:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 8028ea4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028ea8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028eac:	fb04 fa0c 	mul.w	sl, r4, ip
 8028eb0:	fb08 f80e 	mul.w	r8, r8, lr
 8028eb4:	f10a 0e20 	add.w	lr, sl, #32
 8028eb8:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 8028ebc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028ec0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028ec4:	44c4      	add	ip, r8
 8028ec6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028eca:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8028ece:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028ed2:	ea4c 0c0e 	orr.w	ip, ip, lr
 8028ed6:	fb16 fe02 	smulbb	lr, r6, r2
 8028eda:	f1c6 0810 	rsb	r8, r6, #16
 8028ede:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028ee2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028ee6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028eea:	eba8 0802 	sub.w	r8, r8, r2
 8028eee:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 8028ef2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028ef6:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8028efa:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028efe:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028f02:	ea4a 0000 	orr.w	r0, sl, r0
 8028f06:	436a      	muls	r2, r5
 8028f08:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8028f0c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028f10:	fb09 2208 	mla	r2, r9, r8, r2
 8028f14:	ea4b 0c0c 	orr.w	ip, fp, ip
 8028f18:	fb06 2200 	mla	r2, r6, r0, r2
 8028f1c:	fb0e 220c 	mla	r2, lr, ip, r2
 8028f20:	0d55      	lsrs	r5, r2, #21
 8028f22:	0952      	lsrs	r2, r2, #5
 8028f24:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028f28:	f422 6cfc 	bic.w	ip, r2, #2016	@ 0x7e0
 8028f2c:	ea45 000c 	orr.w	r0, r5, ip
 8028f30:	b280      	uxth	r0, r0
 8028f32:	2bff      	cmp	r3, #255	@ 0xff
 8028f34:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8028f38:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8028f3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8028f40:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028f44:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8028f48:	b2d2      	uxtb	r2, r2
 8028f4a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028f4e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8028f52:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028f56:	d064      	beq.n	8029022 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 8028f58:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8028f5c:	24ff      	movs	r4, #255	@ 0xff
 8028f5e:	fb03 f508 	mul.w	r5, r3, r8
 8028f62:	4443      	add	r3, r8
 8028f64:	1c68      	adds	r0, r5, #1
 8028f66:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8028f6a:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8028f6e:	1200      	asrs	r0, r0, #8
 8028f70:	1a1b      	subs	r3, r3, r0
 8028f72:	eba8 0000 	sub.w	r0, r8, r0
 8028f76:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8028f7a:	4345      	muls	r5, r0
 8028f7c:	b2db      	uxtb	r3, r3
 8028f7e:	fb14 5202 	smlabb	r2, r4, r2, r5
 8028f82:	24ff      	movs	r4, #255	@ 0xff
 8028f84:	f801 3c01 	strb.w	r3, [r1, #-1]
 8028f88:	fb92 f2f3 	sdiv	r2, r2, r3
 8028f8c:	2aff      	cmp	r2, #255	@ 0xff
 8028f8e:	bfd6      	itet	le
 8028f90:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028f94:	22ff      	movgt	r2, #255	@ 0xff
 8028f96:	b2d2      	uxtble	r2, r2
 8028f98:	f801 2c04 	strb.w	r2, [r1, #-4]
 8028f9c:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8028fa0:	4342      	muls	r2, r0
 8028fa2:	fb00 f008 	mul.w	r0, r0, r8
 8028fa6:	fb14 2206 	smlabb	r2, r4, r6, r2
 8028faa:	fb92 f2f3 	sdiv	r2, r2, r3
 8028fae:	2aff      	cmp	r2, #255	@ 0xff
 8028fb0:	bfd6      	itet	le
 8028fb2:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028fb6:	22ff      	movgt	r2, #255	@ 0xff
 8028fb8:	b2d2      	uxtble	r2, r2
 8028fba:	f801 2c03 	strb.w	r2, [r1, #-3]
 8028fbe:	22ff      	movs	r2, #255	@ 0xff
 8028fc0:	fb12 000c 	smlabb	r0, r2, ip, r0
 8028fc4:	fb90 f0f3 	sdiv	r0, r0, r3
 8028fc8:	28ff      	cmp	r0, #255	@ 0xff
 8028fca:	bfd6      	itet	le
 8028fcc:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028fd0:	20ff      	movgt	r0, #255	@ 0xff
 8028fd2:	b2c0      	uxtble	r0, r0
 8028fd4:	f801 0c02 	strb.w	r0, [r1, #-2]
 8028fd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028fda:	3104      	adds	r1, #4
 8028fdc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028fde:	4413      	add	r3, r2
 8028fe0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028fe2:	931d      	str	r3, [sp, #116]	@ 0x74
 8028fe4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028fe6:	441a      	add	r2, r3
 8028fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028fea:	3b01      	subs	r3, #1
 8028fec:	921e      	str	r2, [sp, #120]	@ 0x78
 8028fee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ff0:	e603      	b.n	8028bfa <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028ff2:	fb08 f505 	mul.w	r5, r8, r5
 8028ff6:	fb09 5303 	mla	r3, r9, r3, r5
 8028ffa:	e6c8      	b.n	8028d8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8028ffc:	46a9      	mov	r9, r5
 8028ffe:	e6ef      	b.n	8028de0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8029000:	f1c2 0010 	rsb	r0, r2, #16
 8029004:	436a      	muls	r2, r5
 8029006:	fb09 2900 	mla	r9, r9, r0, r2
 802900a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802900e:	ea4f 5659 	mov.w	r6, r9, lsr #21
 8029012:	ea4f 1059 	mov.w	r0, r9, lsr #5
 8029016:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802901a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802901e:	4330      	orrs	r0, r6
 8029020:	e786      	b.n	8028f30 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8029022:	0236      	lsls	r6, r6, #8
 8029024:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8029028:	4332      	orrs	r2, r6
 802902a:	f841 2c04 	str.w	r2, [r1, #-4]
 802902e:	e7d3      	b.n	8028fd8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8029030:	b013      	add	sp, #76	@ 0x4c
 8029032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029036 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 8029036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802903a:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	@ 0x28
 802903e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029042:	fb08 6703 	mla	r7, r8, r3, r6
 8029046:	f1b8 0f00 	cmp.w	r8, #0
 802904a:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 802904e:	f89d e034 	ldrb.w	lr, [sp, #52]	@ 0x34
 8029052:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 8029056:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 802905a:	6808      	ldr	r0, [r1, #0]
 802905c:	f2c0 80d5 	blt.w	802920a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8029060:	45c1      	cmp	r9, r8
 8029062:	f340 80d2 	ble.w	802920a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8029066:	2e00      	cmp	r6, #0
 8029068:	f2c0 80cd 	blt.w	8029206 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 802906c:	42b3      	cmp	r3, r6
 802906e:	f340 80ca 	ble.w	8029206 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8029072:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8029076:	ea4f 272c 	mov.w	r7, ip, asr #8
 802907a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802907e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8029082:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029086:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802908a:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 802908e:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 8029092:	fa5f fc8c 	uxtb.w	ip, ip
 8029096:	023f      	lsls	r7, r7, #8
 8029098:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802909c:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 80290a0:	ea47 070c 	orr.w	r7, r7, ip
 80290a4:	1c72      	adds	r2, r6, #1
 80290a6:	f100 80b3 	bmi.w	8029210 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80290aa:	4293      	cmp	r3, r2
 80290ac:	f340 80b0 	ble.w	8029210 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80290b0:	2c00      	cmp	r4, #0
 80290b2:	f000 80ad 	beq.w	8029210 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80290b6:	f8ba b002 	ldrh.w	fp, [sl, #2]
 80290ba:	ea4f 02eb 	mov.w	r2, fp, asr #3
 80290be:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 80290c2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80290c6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80290ca:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80290ce:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80290d2:	fa5f fb8b 	uxtb.w	fp, fp
 80290d6:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80290da:	0212      	lsls	r2, r2, #8
 80290dc:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 80290e0:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80290e4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80290e8:	f118 0801 	adds.w	r8, r8, #1
 80290ec:	f100 8094 	bmi.w	8029218 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80290f0:	45c1      	cmp	r9, r8
 80290f2:	f340 8091 	ble.w	8029218 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80290f6:	f1be 0f00 	cmp.w	lr, #0
 80290fa:	f000 808d 	beq.w	8029218 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80290fe:	2e00      	cmp	r6, #0
 8029100:	f2c0 8088 	blt.w	8029214 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 8029104:	42b3      	cmp	r3, r6
 8029106:	f340 8085 	ble.w	8029214 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 802910a:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 802910e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8029112:	ea4f 09e8 	mov.w	r9, r8, asr #3
 8029116:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802911a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802911e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8029122:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8029126:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 802912a:	fa5f f888 	uxtb.w	r8, r8
 802912e:	0212      	lsls	r2, r2, #8
 8029130:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8029134:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8029138:	ea42 0208 	orr.w	r2, r2, r8
 802913c:	3601      	adds	r6, #1
 802913e:	d417      	bmi.n	8029170 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029140:	42b3      	cmp	r3, r6
 8029142:	dd15      	ble.n	8029170 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029144:	b1a4      	cbz	r4, 8029170 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029146:	3301      	adds	r3, #1
 8029148:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 802914c:	10f3      	asrs	r3, r6, #3
 802914e:	1230      	asrs	r0, r6, #8
 8029150:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029154:	00f6      	lsls	r6, r6, #3
 8029156:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802915a:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802915e:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 8029162:	b2f6      	uxtb	r6, r6
 8029164:	0218      	lsls	r0, r3, #8
 8029166:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802916a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 802916e:	4330      	orrs	r0, r6
 8029170:	b2a4      	uxth	r4, r4
 8029172:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8029176:	fa1f fe8e 	uxth.w	lr, lr
 802917a:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 802917e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029182:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029186:	fb04 f80e 	mul.w	r8, r4, lr
 802918a:	0124      	lsls	r4, r4, #4
 802918c:	2dff      	cmp	r5, #255	@ 0xff
 802918e:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 8029192:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8029196:	eba4 0408 	sub.w	r4, r4, r8
 802919a:	fa1f fe8e 	uxth.w	lr, lr
 802919e:	b2a4      	uxth	r4, r4
 80291a0:	eba9 090e 	sub.w	r9, r9, lr
 80291a4:	fb04 f303 	mul.w	r3, r4, r3
 80291a8:	fa1f f989 	uxth.w	r9, r9
 80291ac:	fb04 f40c 	mul.w	r4, r4, ip
 80291b0:	fb09 3606 	mla	r6, r9, r6, r3
 80291b4:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80291b8:	fb09 4407 	mla	r4, r9, r7, r4
 80291bc:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80291c0:	fb08 6603 	mla	r6, r8, r3, r6
 80291c4:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80291c8:	fb08 4000 	mla	r0, r8, r0, r4
 80291cc:	fb0e 6303 	mla	r3, lr, r3, r6
 80291d0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80291d4:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80291d8:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 80291dc:	fb0e 0303 	mla	r3, lr, r3, r0
 80291e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80291e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80291e8:	ea43 0306 	orr.w	r3, r3, r6
 80291ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80291f0:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80291f4:	b2d4      	uxtb	r4, r2
 80291f6:	b2c6      	uxtb	r6, r0
 80291f8:	d110      	bne.n	802921c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 80291fa:	700b      	strb	r3, [r1, #0]
 80291fc:	7048      	strb	r0, [r1, #1]
 80291fe:	708a      	strb	r2, [r1, #2]
 8029200:	70cd      	strb	r5, [r1, #3]
 8029202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029206:	4607      	mov	r7, r0
 8029208:	e74c      	b.n	80290a4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 802920a:	4684      	mov	ip, r0
 802920c:	4607      	mov	r7, r0
 802920e:	e76b      	b.n	80290e8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8029210:	4684      	mov	ip, r0
 8029212:	e769      	b.n	80290e8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8029214:	4602      	mov	r2, r0
 8029216:	e791      	b.n	802913c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 8029218:	4602      	mov	r2, r0
 802921a:	e7a9      	b.n	8029170 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802921c:	2d00      	cmp	r5, #0
 802921e:	d0f0      	beq.n	8029202 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 8029220:	78cf      	ldrb	r7, [r1, #3]
 8029222:	b2db      	uxtb	r3, r3
 8029224:	fb15 f606 	smulbb	r6, r5, r6
 8029228:	fb05 f207 	mul.w	r2, r5, r7
 802922c:	1c50      	adds	r0, r2, #1
 802922e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029232:	19ea      	adds	r2, r5, r7
 8029234:	1200      	asrs	r0, r0, #8
 8029236:	1a12      	subs	r2, r2, r0
 8029238:	1a38      	subs	r0, r7, r0
 802923a:	780f      	ldrb	r7, [r1, #0]
 802923c:	b2d2      	uxtb	r2, r2
 802923e:	4347      	muls	r7, r0
 8029240:	70ca      	strb	r2, [r1, #3]
 8029242:	fb05 7303 	mla	r3, r5, r3, r7
 8029246:	fb15 f504 	smulbb	r5, r5, r4
 802924a:	fb93 f3f2 	sdiv	r3, r3, r2
 802924e:	700b      	strb	r3, [r1, #0]
 8029250:	784b      	ldrb	r3, [r1, #1]
 8029252:	fb00 6303 	mla	r3, r0, r3, r6
 8029256:	fb93 f3f2 	sdiv	r3, r3, r2
 802925a:	704b      	strb	r3, [r1, #1]
 802925c:	788b      	ldrb	r3, [r1, #2]
 802925e:	fb00 5503 	mla	r5, r0, r3, r5
 8029262:	fb95 f5f2 	sdiv	r5, r5, r2
 8029266:	708d      	strb	r5, [r1, #2]
 8029268:	e7cb      	b.n	8029202 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

0802926a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802926a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802926e:	b08f      	sub	sp, #60	@ 0x3c
 8029270:	461f      	mov	r7, r3
 8029272:	920c      	str	r2, [sp, #48]	@ 0x30
 8029274:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8029276:	900d      	str	r0, [sp, #52]	@ 0x34
 8029278:	9107      	str	r1, [sp, #28]
 802927a:	6850      	ldr	r0, [r2, #4]
 802927c:	6812      	ldr	r2, [r2, #0]
 802927e:	f89d 4084 	ldrb.w	r4, [sp, #132]	@ 0x84
 8029282:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8029286:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	@ 0x64
 802928a:	fb00 1303 	mla	r3, r0, r3, r1
 802928e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8029292:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029294:	681b      	ldr	r3, [r3, #0]
 8029296:	9306      	str	r3, [sp, #24]
 8029298:	9b07      	ldr	r3, [sp, #28]
 802929a:	2b00      	cmp	r3, #0
 802929c:	dc03      	bgt.n	80292a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802929e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80292a0:	2b00      	cmp	r3, #0
 80292a2:	f340 8230 	ble.w	8029706 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80292a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80292a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80292ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80292b0:	1e48      	subs	r0, r1, #1
 80292b2:	1e56      	subs	r6, r2, #1
 80292b4:	2f00      	cmp	r7, #0
 80292b6:	f340 80bd 	ble.w	8029434 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80292ba:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80292be:	ea4f 4328 	mov.w	r3, r8, asr #16
 80292c2:	d406      	bmi.n	80292d2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80292c4:	4584      	cmp	ip, r0
 80292c6:	da04      	bge.n	80292d2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80292c8:	2b00      	cmp	r3, #0
 80292ca:	db02      	blt.n	80292d2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80292cc:	42b3      	cmp	r3, r6
 80292ce:	f2c0 80b2 	blt.w	8029436 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 80292d2:	f11c 0c01 	adds.w	ip, ip, #1
 80292d6:	f100 80a5 	bmi.w	8029424 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80292da:	4561      	cmp	r1, ip
 80292dc:	f2c0 80a2 	blt.w	8029424 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80292e0:	3301      	adds	r3, #1
 80292e2:	f100 809f 	bmi.w	8029424 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80292e6:	429a      	cmp	r2, r3
 80292e8:	f2c0 809c 	blt.w	8029424 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80292ec:	46ba      	mov	sl, r7
 80292ee:	464e      	mov	r6, r9
 80292f0:	f1ba 0f00 	cmp.w	sl, #0
 80292f4:	f340 80bb 	ble.w	802946e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80292f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80292fa:	1429      	asrs	r1, r5, #16
 80292fc:	ea4f 4028 	mov.w	r0, r8, asr #16
 8029300:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8029304:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 8029308:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802930c:	f100 8122 	bmi.w	8029554 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029310:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029314:	4559      	cmp	r1, fp
 8029316:	f280 811d 	bge.w	8029554 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 802931a:	2800      	cmp	r0, #0
 802931c:	f2c0 811a 	blt.w	8029554 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029320:	f103 3bff 	add.w	fp, r3, #4294967295
 8029324:	4558      	cmp	r0, fp
 8029326:	f280 8115 	bge.w	8029554 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 802932a:	fa0f fe8e 	sxth.w	lr, lr
 802932e:	9b06      	ldr	r3, [sp, #24]
 8029330:	fb00 110e 	mla	r1, r0, lr, r1
 8029334:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 8029338:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 802933c:	8841      	ldrh	r1, [r0, #2]
 802933e:	f1bc 0f00 	cmp.w	ip, #0
 8029342:	d00b      	beq.n	802935c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 8029344:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8029348:	3b01      	subs	r3, #1
 802934a:	005b      	lsls	r3, r3, #1
 802934c:	3302      	adds	r3, #2
 802934e:	eb00 0e03 	add.w	lr, r0, r3
 8029352:	5ac3      	ldrh	r3, [r0, r3]
 8029354:	9308      	str	r3, [sp, #32]
 8029356:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802935a:	9309      	str	r3, [sp, #36]	@ 0x24
 802935c:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8029360:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8029364:	fb12 f30c 	smulbb	r3, r2, ip
 8029368:	f1cc 0e10 	rsb	lr, ip, #16
 802936c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8029370:	2cff      	cmp	r4, #255	@ 0xff
 8029372:	ea4f 03e3 	mov.w	r3, r3, asr #3
 8029376:	ebae 0e02 	sub.w	lr, lr, r2
 802937a:	ea40 000b 	orr.w	r0, r0, fp
 802937e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029382:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8029386:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802938a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802938e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029392:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 8029396:	ea4b 0101 	orr.w	r1, fp, r1
 802939a:	fb02 f101 	mul.w	r1, r2, r1
 802939e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80293a0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80293a4:	ea4f 4002 	mov.w	r0, r2, lsl #16
 80293a8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80293ac:	9908      	ldr	r1, [sp, #32]
 80293ae:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80293b2:	ea40 0002 	orr.w	r0, r0, r2
 80293b6:	9a08      	ldr	r2, [sp, #32]
 80293b8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80293bc:	fb03 e000 	mla	r0, r3, r0, lr
 80293c0:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80293c4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80293c8:	ea42 020e 	orr.w	r2, r2, lr
 80293cc:	fb0c 0c02 	mla	ip, ip, r2, r0
 80293d0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80293d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80293d8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80293dc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80293e0:	ea43 0c0c 	orr.w	ip, r3, ip
 80293e4:	fa1f f38c 	uxth.w	r3, ip
 80293e8:	ea4f 2223 	mov.w	r2, r3, asr #8
 80293ec:	ea4f 01e3 	mov.w	r1, r3, asr #3
 80293f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80293f4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80293f8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80293fc:	b2db      	uxtb	r3, r3
 80293fe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029402:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8029406:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802940a:	d174      	bne.n	80294f6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802940c:	7033      	strb	r3, [r6, #0]
 802940e:	7071      	strb	r1, [r6, #1]
 8029410:	70b2      	strb	r2, [r6, #2]
 8029412:	70f4      	strb	r4, [r6, #3]
 8029414:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029416:	3604      	adds	r6, #4
 8029418:	f10a 3aff 	add.w	sl, sl, #4294967295
 802941c:	441d      	add	r5, r3
 802941e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029420:	4498      	add	r8, r3
 8029422:	e765      	b.n	80292f0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8029424:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029426:	3f01      	subs	r7, #1
 8029428:	f109 0904 	add.w	r9, r9, #4
 802942c:	441d      	add	r5, r3
 802942e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029430:	4498      	add	r8, r3
 8029432:	e73f      	b.n	80292b4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8029434:	d01f      	beq.n	8029476 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8029436:	1e7b      	subs	r3, r7, #1
 8029438:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802943a:	fb00 5003 	mla	r0, r0, r3, r5
 802943e:	1400      	asrs	r0, r0, #16
 8029440:	f53f af54 	bmi.w	80292ec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029444:	3901      	subs	r1, #1
 8029446:	4288      	cmp	r0, r1
 8029448:	f6bf af50 	bge.w	80292ec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802944c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802944e:	fb01 8303 	mla	r3, r1, r3, r8
 8029452:	141b      	asrs	r3, r3, #16
 8029454:	f53f af4a 	bmi.w	80292ec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029458:	3a01      	subs	r2, #1
 802945a:	4293      	cmp	r3, r2
 802945c:	f6bf af46 	bge.w	80292ec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029460:	f109 0304 	add.w	r3, r9, #4
 8029464:	46ba      	mov	sl, r7
 8029466:	f1ba 0f00 	cmp.w	sl, #0
 802946a:	f300 8090 	bgt.w	802958e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802946e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8029472:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 8029476:	9b07      	ldr	r3, [sp, #28]
 8029478:	2b00      	cmp	r3, #0
 802947a:	f340 8144 	ble.w	8029706 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802947e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029482:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029484:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029488:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802948c:	eef0 6a62 	vmov.f32	s13, s5
 8029490:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029494:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802949c:	ee16 5a90 	vmov	r5, s13
 80294a0:	eef0 6a43 	vmov.f32	s13, s6
 80294a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80294a8:	ee16 8a90 	vmov	r8, s13
 80294ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80294b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80294b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80294b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80294bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80294c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80294c4:	ee12 2a90 	vmov	r2, s5
 80294c8:	eef0 2a47 	vmov.f32	s5, s14
 80294cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80294d0:	ee13 2a10 	vmov	r2, s6
 80294d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80294d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80294d8:	eeb0 3a67 	vmov.f32	s6, s15
 80294dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80294e0:	931c      	str	r3, [sp, #112]	@ 0x70
 80294e2:	9b07      	ldr	r3, [sp, #28]
 80294e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80294e6:	3b01      	subs	r3, #1
 80294e8:	9307      	str	r3, [sp, #28]
 80294ea:	bf08      	it	eq
 80294ec:	4617      	moveq	r7, r2
 80294ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80294f0:	bf18      	it	ne
 80294f2:	461f      	movne	r7, r3
 80294f4:	e6d0      	b.n	8029298 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80294f6:	2c00      	cmp	r4, #0
 80294f8:	d08c      	beq.n	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80294fa:	f896 e003 	ldrb.w	lr, [r6, #3]
 80294fe:	fb13 f304 	smulbb	r3, r3, r4
 8029502:	fb14 f101 	smulbb	r1, r4, r1
 8029506:	fb14 f202 	smulbb	r2, r4, r2
 802950a:	fb04 fc0e 	mul.w	ip, r4, lr
 802950e:	f10c 0001 	add.w	r0, ip, #1
 8029512:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8029516:	eb04 0c0e 	add.w	ip, r4, lr
 802951a:	1200      	asrs	r0, r0, #8
 802951c:	ebac 0c00 	sub.w	ip, ip, r0
 8029520:	ebae 0000 	sub.w	r0, lr, r0
 8029524:	f896 e000 	ldrb.w	lr, [r6]
 8029528:	fa5f fc8c 	uxtb.w	ip, ip
 802952c:	fb00 330e 	mla	r3, r0, lr, r3
 8029530:	f886 c003 	strb.w	ip, [r6, #3]
 8029534:	fb93 f3fc 	sdiv	r3, r3, ip
 8029538:	7033      	strb	r3, [r6, #0]
 802953a:	7873      	ldrb	r3, [r6, #1]
 802953c:	fb00 1103 	mla	r1, r0, r3, r1
 8029540:	78b3      	ldrb	r3, [r6, #2]
 8029542:	fb00 2003 	mla	r0, r0, r3, r2
 8029546:	fb91 f1fc 	sdiv	r1, r1, ip
 802954a:	fb90 f0fc 	sdiv	r0, r0, ip
 802954e:	7071      	strb	r1, [r6, #1]
 8029550:	70b0      	strb	r0, [r6, #2]
 8029552:	e75f      	b.n	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029554:	f111 0b01 	adds.w	fp, r1, #1
 8029558:	f53f af5c 	bmi.w	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802955c:	45de      	cmp	lr, fp
 802955e:	f6ff af59 	blt.w	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029562:	f110 0b01 	adds.w	fp, r0, #1
 8029566:	f53f af55 	bmi.w	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802956a:	455b      	cmp	r3, fp
 802956c:	f6ff af52 	blt.w	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029570:	b21b      	sxth	r3, r3
 8029572:	9101      	str	r1, [sp, #4]
 8029574:	4631      	mov	r1, r6
 8029576:	9300      	str	r3, [sp, #0]
 8029578:	fa0f f38e 	sxth.w	r3, lr
 802957c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8029580:	e9cd c404 	strd	ip, r4, [sp, #16]
 8029584:	9a06      	ldr	r2, [sp, #24]
 8029586:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029588:	f7ff fd55 	bl	8029036 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 802958c:	e742      	b.n	8029414 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802958e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8029590:	142e      	asrs	r6, r5, #16
 8029592:	ea4f 4028 	mov.w	r0, r8, asr #16
 8029596:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 802959a:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 802959e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80295a2:	9a06      	ldr	r2, [sp, #24]
 80295a4:	fb0b 6000 	mla	r0, fp, r0, r6
 80295a8:	9e06      	ldr	r6, [sp, #24]
 80295aa:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80295ae:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 80295b2:	8870      	ldrh	r0, [r6, #2]
 80295b4:	f1be 0f00 	cmp.w	lr, #0
 80295b8:	d00b      	beq.n	80295d2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80295ba:	f10b 4200 	add.w	r2, fp, #2147483648	@ 0x80000000
 80295be:	3a01      	subs	r2, #1
 80295c0:	0052      	lsls	r2, r2, #1
 80295c2:	3202      	adds	r2, #2
 80295c4:	eb06 0b02 	add.w	fp, r6, r2
 80295c8:	5ab2      	ldrh	r2, [r6, r2]
 80295ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80295cc:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80295d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80295d2:	ea4f 460c 	mov.w	r6, ip, lsl #16
 80295d6:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80295da:	fb11 f20e 	smulbb	r2, r1, lr
 80295de:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80295e2:	f006 66fc 	and.w	r6, r6, #132120576	@ 0x7e00000
 80295e6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80295ea:	10d2      	asrs	r2, r2, #3
 80295ec:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80295f0:	ea46 060c 	orr.w	r6, r6, ip
 80295f4:	f1ce 0c10 	rsb	ip, lr, #16
 80295f8:	ea4b 0000 	orr.w	r0, fp, r0
 80295fc:	2cff      	cmp	r4, #255	@ 0xff
 80295fe:	ebac 0c01 	sub.w	ip, ip, r1
 8029602:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 8029606:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802960a:	fb01 f000 	mul.w	r0, r1, r0
 802960e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029610:	fb0c 0c06 	mla	ip, ip, r6, r0
 8029614:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029616:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802961a:	f421 66fc 	bic.w	r6, r1, #2016	@ 0x7e0
 802961e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029620:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029624:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8029628:	ea4b 0606 	orr.w	r6, fp, r6
 802962c:	f420 6bfc 	bic.w	fp, r0, #2016	@ 0x7e0
 8029630:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8029634:	fb02 c606 	mla	r6, r2, r6, ip
 8029638:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 802963c:	ea41 0b0b 	orr.w	fp, r1, fp
 8029640:	fb02 660b 	mla	r6, r2, fp, r6
 8029644:	ea4f 5256 	mov.w	r2, r6, lsr #21
 8029648:	ea4f 1656 	mov.w	r6, r6, lsr #5
 802964c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029650:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8029654:	ea46 0602 	orr.w	r6, r6, r2
 8029658:	b2b2      	uxth	r2, r6
 802965a:	ea4f 2122 	mov.w	r1, r2, asr #8
 802965e:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8029662:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8029666:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802966a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802966e:	b2d2      	uxtb	r2, r2
 8029670:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029674:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8029678:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802967c:	d10f      	bne.n	802969e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802967e:	f803 2c04 	strb.w	r2, [r3, #-4]
 8029682:	f803 0c03 	strb.w	r0, [r3, #-3]
 8029686:	f803 1c02 	strb.w	r1, [r3, #-2]
 802968a:	f803 4c01 	strb.w	r4, [r3, #-1]
 802968e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8029690:	3304      	adds	r3, #4
 8029692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029696:	4415      	add	r5, r2
 8029698:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802969a:	4490      	add	r8, r2
 802969c:	e6e3      	b.n	8029466 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802969e:	2c00      	cmp	r4, #0
 80296a0:	d0f5      	beq.n	802968e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80296a2:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 80296a6:	fb12 f204 	smulbb	r2, r2, r4
 80296aa:	fb14 f000 	smulbb	r0, r4, r0
 80296ae:	fb14 f101 	smulbb	r1, r4, r1
 80296b2:	fb04 f60e 	mul.w	r6, r4, lr
 80296b6:	f106 0c01 	add.w	ip, r6, #1
 80296ba:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80296be:	eb04 060e 	add.w	r6, r4, lr
 80296c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80296c6:	eba6 060c 	sub.w	r6, r6, ip
 80296ca:	ebae 0c0c 	sub.w	ip, lr, ip
 80296ce:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 80296d2:	b2f6      	uxtb	r6, r6
 80296d4:	fb0c 220e 	mla	r2, ip, lr, r2
 80296d8:	f803 6c01 	strb.w	r6, [r3, #-1]
 80296dc:	fb92 f2f6 	sdiv	r2, r2, r6
 80296e0:	f803 2c04 	strb.w	r2, [r3, #-4]
 80296e4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80296e8:	fb0c 0002 	mla	r0, ip, r2, r0
 80296ec:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80296f0:	fb0c 1c02 	mla	ip, ip, r2, r1
 80296f4:	fb90 f0f6 	sdiv	r0, r0, r6
 80296f8:	fb9c fcf6 	sdiv	ip, ip, r6
 80296fc:	f803 0c03 	strb.w	r0, [r3, #-3]
 8029700:	f803 cc02 	strb.w	ip, [r3, #-2]
 8029704:	e7c3      	b.n	802968e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8029706:	b00f      	add	sp, #60	@ 0x3c
 8029708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802970c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 802970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029710:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	@ 0x28
 8029714:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8029718:	fb08 7403 	mla	r4, r8, r3, r7
 802971c:	f1b8 0f00 	cmp.w	r8, #0
 8029720:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8029724:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8029728:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 802972c:	6808      	ldr	r0, [r1, #0]
 802972e:	f2c0 80be 	blt.w	80298ae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8029732:	45c2      	cmp	sl, r8
 8029734:	f340 80bb 	ble.w	80298ae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8029738:	2f00      	cmp	r7, #0
 802973a:	f2c0 80b6 	blt.w	80298aa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 802973e:	42bb      	cmp	r3, r7
 8029740:	f340 80b3 	ble.w	80298aa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8029744:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8029748:	10d5      	asrs	r5, r2, #3
 802974a:	1214      	asrs	r4, r2, #8
 802974c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8029750:	00d2      	lsls	r2, r2, #3
 8029752:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029756:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802975a:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 802975e:	b2d2      	uxtb	r2, r2
 8029760:	022c      	lsls	r4, r5, #8
 8029762:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029766:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 802976a:	4314      	orrs	r4, r2
 802976c:	1c7a      	adds	r2, r7, #1
 802976e:	f100 80a1 	bmi.w	80298b4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029772:	4293      	cmp	r3, r2
 8029774:	f340 809e 	ble.w	80298b4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029778:	2e00      	cmp	r6, #0
 802977a:	f000 809b 	beq.w	80298b4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 802977e:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8029782:	ea4f 252e 	mov.w	r5, lr, asr #8
 8029786:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802978a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802978e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029792:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8029796:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 802979a:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 802979e:	fa5f fe8e 	uxtb.w	lr, lr
 80297a2:	022d      	lsls	r5, r5, #8
 80297a4:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80297a8:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 80297ac:	ea45 050e 	orr.w	r5, r5, lr
 80297b0:	f118 0801 	adds.w	r8, r8, #1
 80297b4:	f100 8082 	bmi.w	80298bc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 80297b8:	45c2      	cmp	sl, r8
 80297ba:	dd7f      	ble.n	80298bc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 80297bc:	f1bc 0f00 	cmp.w	ip, #0
 80297c0:	d07c      	beq.n	80298bc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 80297c2:	2f00      	cmp	r7, #0
 80297c4:	db78      	blt.n	80298b8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 80297c6:	42bb      	cmp	r3, r7
 80297c8:	dd76      	ble.n	80298b8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 80297ca:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 80297ce:	ea4f 08ee 	mov.w	r8, lr, asr #3
 80297d2:	ea4f 222e 	mov.w	r2, lr, asr #8
 80297d6:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 80297da:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80297de:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80297e2:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 80297e6:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 80297ea:	fa5f fe8e 	uxtb.w	lr, lr
 80297ee:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80297f2:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80297f6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80297fa:	ea42 020e 	orr.w	r2, r2, lr
 80297fe:	3701      	adds	r7, #1
 8029800:	d417      	bmi.n	8029832 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029802:	42bb      	cmp	r3, r7
 8029804:	dd15      	ble.n	8029832 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029806:	b1a6      	cbz	r6, 8029832 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029808:	3301      	adds	r3, #1
 802980a:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 802980e:	10df      	asrs	r7, r3, #3
 8029810:	1218      	asrs	r0, r3, #8
 8029812:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8029816:	00db      	lsls	r3, r3, #3
 8029818:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802981c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8029820:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8029824:	b2db      	uxtb	r3, r3
 8029826:	0238      	lsls	r0, r7, #8
 8029828:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802982c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8029830:	4318      	orrs	r0, r3
 8029832:	b2b6      	uxth	r6, r6
 8029834:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 8029838:	fa1f f78c 	uxth.w	r7, ip
 802983c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029840:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8029844:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8029848:	fb06 fc07 	mul.w	ip, r6, r7
 802984c:	0136      	lsls	r6, r6, #4
 802984e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029852:	f5c6 7e80 	rsb	lr, r6, #256	@ 0x100
 8029856:	eba6 060c 	sub.w	r6, r6, ip
 802985a:	b2bf      	uxth	r7, r7
 802985c:	b2b6      	uxth	r6, r6
 802985e:	ebae 0e07 	sub.w	lr, lr, r7
 8029862:	4373      	muls	r3, r6
 8029864:	fa1f fe8e 	uxth.w	lr, lr
 8029868:	4375      	muls	r5, r6
 802986a:	fb0e 3808 	mla	r8, lr, r8, r3
 802986e:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8029872:	fb0e 5404 	mla	r4, lr, r4, r5
 8029876:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802987a:	fb0c 8803 	mla	r8, ip, r3, r8
 802987e:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8029882:	fb0c 4000 	mla	r0, ip, r0, r4
 8029886:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802988a:	fb07 8303 	mla	r3, r7, r3, r8
 802988e:	fb07 0002 	mla	r0, r7, r2, r0
 8029892:	0a1b      	lsrs	r3, r3, #8
 8029894:	0a00      	lsrs	r0, r0, #8
 8029896:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802989a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802989e:	4318      	orrs	r0, r3
 80298a0:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80298a4:	6008      	str	r0, [r1, #0]
 80298a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298aa:	4604      	mov	r4, r0
 80298ac:	e75e      	b.n	802976c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 80298ae:	4605      	mov	r5, r0
 80298b0:	4604      	mov	r4, r0
 80298b2:	e77d      	b.n	80297b0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 80298b4:	4605      	mov	r5, r0
 80298b6:	e77b      	b.n	80297b0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 80298b8:	4602      	mov	r2, r0
 80298ba:	e7a0      	b.n	80297fe <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 80298bc:	4602      	mov	r2, r0
 80298be:	e7b8      	b.n	8029832 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

080298c0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80298c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298c4:	b08f      	sub	sp, #60	@ 0x3c
 80298c6:	461d      	mov	r5, r3
 80298c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80298ca:	9107      	str	r1, [sp, #28]
 80298cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80298ce:	6859      	ldr	r1, [r3, #4]
 80298d0:	681b      	ldr	r3, [r3, #0]
 80298d2:	900d      	str	r0, [sp, #52]	@ 0x34
 80298d4:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 80298d8:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 80298dc:	fb01 2707 	mla	r7, r1, r7, r2
 80298e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80298e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80298e6:	f8d3 8000 	ldr.w	r8, [r3]
 80298ea:	9b07      	ldr	r3, [sp, #28]
 80298ec:	2b00      	cmp	r3, #0
 80298ee:	dc03      	bgt.n	80298f8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80298f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	f340 81aa 	ble.w	8029c4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80298f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80298fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80298fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029902:	1e48      	subs	r0, r1, #1
 8029904:	f102 3cff 	add.w	ip, r2, #4294967295
 8029908:	2d00      	cmp	r5, #0
 802990a:	f340 80b0 	ble.w	8029a6e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802990e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029912:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029916:	d406      	bmi.n	8029926 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029918:	4586      	cmp	lr, r0
 802991a:	da04      	bge.n	8029926 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802991c:	2b00      	cmp	r3, #0
 802991e:	db02      	blt.n	8029926 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029920:	4563      	cmp	r3, ip
 8029922:	f2c0 80a5 	blt.w	8029a70 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8029926:	f11e 0e01 	adds.w	lr, lr, #1
 802992a:	f100 8099 	bmi.w	8029a60 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802992e:	4571      	cmp	r1, lr
 8029930:	f2c0 8096 	blt.w	8029a60 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029934:	3301      	adds	r3, #1
 8029936:	f100 8093 	bmi.w	8029a60 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802993a:	429a      	cmp	r2, r3
 802993c:	f2c0 8090 	blt.w	8029a60 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029940:	46aa      	mov	sl, r5
 8029942:	46b9      	mov	r9, r7
 8029944:	f1ba 0f00 	cmp.w	sl, #0
 8029948:	f340 80ac 	ble.w	8029aa4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802994c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802994e:	1421      	asrs	r1, r4, #16
 8029950:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029954:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029958:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802995c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8029960:	f100 80e4 	bmi.w	8029b2c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029964:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029968:	4559      	cmp	r1, fp
 802996a:	f280 80df 	bge.w	8029b2c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802996e:	2800      	cmp	r0, #0
 8029970:	f2c0 80dc 	blt.w	8029b2c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029974:	f103 3bff 	add.w	fp, r3, #4294967295
 8029978:	4558      	cmp	r0, fp
 802997a:	f280 80d7 	bge.w	8029b2c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802997e:	fa0f fe8e 	sxth.w	lr, lr
 8029982:	fb00 110e 	mla	r1, r0, lr, r1
 8029986:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802998a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802998e:	8841      	ldrh	r1, [r0, #2]
 8029990:	f1bc 0f00 	cmp.w	ip, #0
 8029994:	d00b      	beq.n	80299ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8029996:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802999a:	3b01      	subs	r3, #1
 802999c:	005b      	lsls	r3, r3, #1
 802999e:	3302      	adds	r3, #2
 80299a0:	eb00 0e03 	add.w	lr, r0, r3
 80299a4:	5ac3      	ldrh	r3, [r0, r3]
 80299a6:	9308      	str	r3, [sp, #32]
 80299a8:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80299ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80299ae:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80299b2:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80299b6:	fb12 f30c 	smulbb	r3, r2, ip
 80299ba:	f1cc 0e10 	rsb	lr, ip, #16
 80299be:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80299c2:	10db      	asrs	r3, r3, #3
 80299c4:	ebae 0e02 	sub.w	lr, lr, r2
 80299c8:	ea40 000b 	orr.w	r0, r0, fp
 80299cc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80299d0:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80299d4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80299d8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80299dc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80299e0:	ea4b 0101 	orr.w	r1, fp, r1
 80299e4:	4351      	muls	r1, r2
 80299e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80299e8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80299ec:	0410      	lsls	r0, r2, #16
 80299ee:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80299f2:	9908      	ldr	r1, [sp, #32]
 80299f4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80299f8:	4310      	orrs	r0, r2
 80299fa:	9a08      	ldr	r2, [sp, #32]
 80299fc:	0412      	lsls	r2, r2, #16
 80299fe:	fb03 e000 	mla	r0, r3, r0, lr
 8029a02:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8029a06:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029a0a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029a0e:	ea42 020e 	orr.w	r2, r2, lr
 8029a12:	fb03 0302 	mla	r3, r3, r2, r0
 8029a16:	0d59      	lsrs	r1, r3, #21
 8029a18:	095b      	lsrs	r3, r3, #5
 8029a1a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8029a1e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8029a22:	430b      	orrs	r3, r1
 8029a24:	b299      	uxth	r1, r3
 8029a26:	10ca      	asrs	r2, r1, #3
 8029a28:	1208      	asrs	r0, r1, #8
 8029a2a:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 8029a2e:	00c9      	lsls	r1, r1, #3
 8029a30:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029a34:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029a38:	b2c9      	uxtb	r1, r1
 8029a3a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8029a3e:	021b      	lsls	r3, r3, #8
 8029a40:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029a44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8029a48:	430b      	orrs	r3, r1
 8029a4a:	f8c9 3000 	str.w	r3, [r9]
 8029a4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029a50:	f109 0904 	add.w	r9, r9, #4
 8029a54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029a58:	441c      	add	r4, r3
 8029a5a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029a5c:	441e      	add	r6, r3
 8029a5e:	e771      	b.n	8029944 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8029a60:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029a62:	3d01      	subs	r5, #1
 8029a64:	3704      	adds	r7, #4
 8029a66:	441c      	add	r4, r3
 8029a68:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029a6a:	441e      	add	r6, r3
 8029a6c:	e74c      	b.n	8029908 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029a6e:	d01d      	beq.n	8029aac <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029a70:	1e6b      	subs	r3, r5, #1
 8029a72:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029a74:	fb00 4003 	mla	r0, r0, r3, r4
 8029a78:	1400      	asrs	r0, r0, #16
 8029a7a:	f53f af61 	bmi.w	8029940 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029a7e:	3901      	subs	r1, #1
 8029a80:	4288      	cmp	r0, r1
 8029a82:	f6bf af5d 	bge.w	8029940 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029a86:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8029a88:	fb01 6303 	mla	r3, r1, r3, r6
 8029a8c:	141b      	asrs	r3, r3, #16
 8029a8e:	f53f af57 	bmi.w	8029940 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029a92:	3a01      	subs	r2, #1
 8029a94:	4293      	cmp	r3, r2
 8029a96:	f6bf af53 	bge.w	8029940 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029a9a:	46a9      	mov	r9, r5
 8029a9c:	46ba      	mov	sl, r7
 8029a9e:	f1b9 0f00 	cmp.w	r9, #0
 8029aa2:	dc5b      	bgt.n	8029b5c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8029aa4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029aa8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8029aac:	9b07      	ldr	r3, [sp, #28]
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	f340 80cc 	ble.w	8029c4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029ab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029ab8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029aba:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029abe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029ac2:	eef0 6a62 	vmov.f32	s13, s5
 8029ac6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029aca:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029ace:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029ad2:	ee16 4a90 	vmov	r4, s13
 8029ad6:	eef0 6a43 	vmov.f32	s13, s6
 8029ada:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029ade:	ee16 6a90 	vmov	r6, s13
 8029ae2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029ae6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029aea:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029aee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029af2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029af6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029afa:	ee12 2a90 	vmov	r2, s5
 8029afe:	eef0 2a47 	vmov.f32	s5, s14
 8029b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b06:	ee13 2a10 	vmov	r2, s6
 8029b0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029b0c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029b0e:	eeb0 3a67 	vmov.f32	s6, s15
 8029b12:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b16:	931c      	str	r3, [sp, #112]	@ 0x70
 8029b18:	9b07      	ldr	r3, [sp, #28]
 8029b1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029b1c:	3b01      	subs	r3, #1
 8029b1e:	9307      	str	r3, [sp, #28]
 8029b20:	bf08      	it	eq
 8029b22:	4615      	moveq	r5, r2
 8029b24:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029b26:	bf18      	it	ne
 8029b28:	461d      	movne	r5, r3
 8029b2a:	e6de      	b.n	80298ea <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8029b2c:	f111 0b01 	adds.w	fp, r1, #1
 8029b30:	d48d      	bmi.n	8029a4e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029b32:	45de      	cmp	lr, fp
 8029b34:	db8b      	blt.n	8029a4e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029b36:	f110 0b01 	adds.w	fp, r0, #1
 8029b3a:	d488      	bmi.n	8029a4e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029b3c:	455b      	cmp	r3, fp
 8029b3e:	db86      	blt.n	8029a4e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029b40:	b21b      	sxth	r3, r3
 8029b42:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8029b46:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8029b4a:	9300      	str	r3, [sp, #0]
 8029b4c:	4642      	mov	r2, r8
 8029b4e:	fa0f f38e 	sxth.w	r3, lr
 8029b52:	4649      	mov	r1, r9
 8029b54:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029b56:	f7ff fdd9 	bl	802970c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8029b5a:	e778      	b.n	8029a4e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029b5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029b5e:	1420      	asrs	r0, r4, #16
 8029b60:	1431      	asrs	r1, r6, #16
 8029b62:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029b66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029b6a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029b6e:	fb03 0101 	mla	r1, r3, r1, r0
 8029b72:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029b76:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8029b7a:	8841      	ldrh	r1, [r0, #2]
 8029b7c:	f1be 0f00 	cmp.w	lr, #0
 8029b80:	d00b      	beq.n	8029b9a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8029b82:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029b86:	3b01      	subs	r3, #1
 8029b88:	005b      	lsls	r3, r3, #1
 8029b8a:	3302      	adds	r3, #2
 8029b8c:	eb00 0b03 	add.w	fp, r0, r3
 8029b90:	5ac3      	ldrh	r3, [r0, r3]
 8029b92:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b94:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8029b98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029b9a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029b9e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8029ba2:	fb12 f30e 	smulbb	r3, r2, lr
 8029ba6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029baa:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8029bae:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8029bb2:	10db      	asrs	r3, r3, #3
 8029bb4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029bb8:	ea40 000c 	orr.w	r0, r0, ip
 8029bbc:	f1ce 0c10 	rsb	ip, lr, #16
 8029bc0:	ea4b 0101 	orr.w	r1, fp, r1
 8029bc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8029bc8:	ebac 0c02 	sub.w	ip, ip, r2
 8029bcc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029bd0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029bd4:	4351      	muls	r1, r2
 8029bd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029bd8:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029bdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029bde:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029be2:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8029be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029be8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029bec:	0412      	lsls	r2, r2, #16
 8029bee:	ea4b 0000 	orr.w	r0, fp, r0
 8029bf2:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8029bf6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029bfa:	fb03 c000 	mla	r0, r3, r0, ip
 8029bfe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029c02:	ea42 0b0b 	orr.w	fp, r2, fp
 8029c06:	fb03 000b 	mla	r0, r3, fp, r0
 8029c0a:	0d42      	lsrs	r2, r0, #21
 8029c0c:	0940      	lsrs	r0, r0, #5
 8029c0e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029c12:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029c16:	4310      	orrs	r0, r2
 8029c18:	b282      	uxth	r2, r0
 8029c1a:	10d3      	asrs	r3, r2, #3
 8029c1c:	1211      	asrs	r1, r2, #8
 8029c1e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029c22:	00d2      	lsls	r2, r2, #3
 8029c24:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8029c28:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029c2c:	b2d2      	uxtb	r2, r2
 8029c2e:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029c32:	021b      	lsls	r3, r3, #8
 8029c34:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8029c3c:	431a      	orrs	r2, r3
 8029c3e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029c40:	441c      	add	r4, r3
 8029c42:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029c44:	f84a 2b04 	str.w	r2, [sl], #4
 8029c48:	441e      	add	r6, r3
 8029c4a:	e728      	b.n	8029a9e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8029c4c:	b00f      	add	sp, #60	@ 0x3c
 8029c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029c52 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8029c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c56:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	@ 0x28
 8029c5a:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8029c5e:	fb09 6c03 	mla	ip, r9, r3, r6
 8029c62:	f1b9 0f00 	cmp.w	r9, #0
 8029c66:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8029c6a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8029c6e:	f89d e034 	ldrb.w	lr, [sp, #52]	@ 0x34
 8029c72:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 8029c76:	eb02 080c 	add.w	r8, r2, ip
 8029c7a:	6808      	ldr	r0, [r1, #0]
 8029c7c:	f2c0 80a0 	blt.w	8029dc0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8029c80:	45ca      	cmp	sl, r9
 8029c82:	f340 809d 	ble.w	8029dc0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8029c86:	2e00      	cmp	r6, #0
 8029c88:	f2c0 8098 	blt.w	8029dbc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8029c8c:	42b3      	cmp	r3, r6
 8029c8e:	f340 8095 	ble.w	8029dbc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8029c92:	f898 7002 	ldrb.w	r7, [r8, #2]
 8029c96:	f898 b001 	ldrb.w	fp, [r8, #1]
 8029c9a:	043f      	lsls	r7, r7, #16
 8029c9c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8029ca0:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8029ca4:	4317      	orrs	r7, r2
 8029ca6:	1c72      	adds	r2, r6, #1
 8029ca8:	f100 808b 	bmi.w	8029dc2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029cac:	4293      	cmp	r3, r2
 8029cae:	f340 8088 	ble.w	8029dc2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029cb2:	2c00      	cmp	r4, #0
 8029cb4:	f000 8085 	beq.w	8029dc2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029cb8:	f898 c005 	ldrb.w	ip, [r8, #5]
 8029cbc:	f898 2004 	ldrb.w	r2, [r8, #4]
 8029cc0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8029cc4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8029cc8:	f898 2003 	ldrb.w	r2, [r8, #3]
 8029ccc:	ea4c 0c02 	orr.w	ip, ip, r2
 8029cd0:	f119 0901 	adds.w	r9, r9, #1
 8029cd4:	d479      	bmi.n	8029dca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029cd6:	45ca      	cmp	sl, r9
 8029cd8:	dd77      	ble.n	8029dca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029cda:	f1be 0f00 	cmp.w	lr, #0
 8029cde:	d074      	beq.n	8029dca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029ce0:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8029ce4:	2e00      	cmp	r6, #0
 8029ce6:	eb08 090a 	add.w	r9, r8, sl
 8029cea:	db6c      	blt.n	8029dc6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8029cec:	42b3      	cmp	r3, r6
 8029cee:	dd6a      	ble.n	8029dc6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8029cf0:	f899 2002 	ldrb.w	r2, [r9, #2]
 8029cf4:	f899 b001 	ldrb.w	fp, [r9, #1]
 8029cf8:	0412      	lsls	r2, r2, #16
 8029cfa:	f818 800a 	ldrb.w	r8, [r8, sl]
 8029cfe:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8029d02:	ea42 0208 	orr.w	r2, r2, r8
 8029d06:	3601      	adds	r6, #1
 8029d08:	d40c      	bmi.n	8029d24 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029d0a:	42b3      	cmp	r3, r6
 8029d0c:	dd0a      	ble.n	8029d24 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029d0e:	b14c      	cbz	r4, 8029d24 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029d10:	f899 0005 	ldrb.w	r0, [r9, #5]
 8029d14:	f899 3004 	ldrb.w	r3, [r9, #4]
 8029d18:	0400      	lsls	r0, r0, #16
 8029d1a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8029d1e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8029d22:	4318      	orrs	r0, r3
 8029d24:	fa1f f38e 	uxth.w	r3, lr
 8029d28:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 8029d2c:	b2a4      	uxth	r4, r4
 8029d2e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029d32:	2dff      	cmp	r5, #255	@ 0xff
 8029d34:	fb04 f803 	mul.w	r8, r4, r3
 8029d38:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8029d3c:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 8029d40:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8029d44:	eba4 0408 	sub.w	r4, r4, r8
 8029d48:	fa1f fe83 	uxth.w	lr, r3
 8029d4c:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8029d50:	b2a4      	uxth	r4, r4
 8029d52:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029d56:	eba9 090e 	sub.w	r9, r9, lr
 8029d5a:	fb04 f303 	mul.w	r3, r4, r3
 8029d5e:	fa1f f989 	uxth.w	r9, r9
 8029d62:	fb04 f40c 	mul.w	r4, r4, ip
 8029d66:	fb09 3606 	mla	r6, r9, r6, r3
 8029d6a:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8029d6e:	fb09 4407 	mla	r4, r9, r7, r4
 8029d72:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8029d76:	fb08 6603 	mla	r6, r8, r3, r6
 8029d7a:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8029d7e:	fb08 4000 	mla	r0, r8, r0, r4
 8029d82:	fb0e 6303 	mla	r3, lr, r3, r6
 8029d86:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8029d8a:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 8029d8e:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8029d92:	fb0e 0303 	mla	r3, lr, r3, r0
 8029d96:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8029d9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029d9e:	ea43 0306 	orr.w	r3, r3, r6
 8029da2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8029da6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8029daa:	b2d4      	uxtb	r4, r2
 8029dac:	b2c6      	uxtb	r6, r0
 8029dae:	d10e      	bne.n	8029dce <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 8029db0:	700b      	strb	r3, [r1, #0]
 8029db2:	7048      	strb	r0, [r1, #1]
 8029db4:	708a      	strb	r2, [r1, #2]
 8029db6:	70cd      	strb	r5, [r1, #3]
 8029db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029dbc:	4607      	mov	r7, r0
 8029dbe:	e772      	b.n	8029ca6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 8029dc0:	4607      	mov	r7, r0
 8029dc2:	4684      	mov	ip, r0
 8029dc4:	e784      	b.n	8029cd0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 8029dc6:	4602      	mov	r2, r0
 8029dc8:	e79d      	b.n	8029d06 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 8029dca:	4602      	mov	r2, r0
 8029dcc:	e7aa      	b.n	8029d24 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8029dce:	2d00      	cmp	r5, #0
 8029dd0:	d0f2      	beq.n	8029db8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 8029dd2:	78cf      	ldrb	r7, [r1, #3]
 8029dd4:	b2db      	uxtb	r3, r3
 8029dd6:	fb15 f606 	smulbb	r6, r5, r6
 8029dda:	fb05 f207 	mul.w	r2, r5, r7
 8029dde:	1c50      	adds	r0, r2, #1
 8029de0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029de4:	19ea      	adds	r2, r5, r7
 8029de6:	1200      	asrs	r0, r0, #8
 8029de8:	1a12      	subs	r2, r2, r0
 8029dea:	1a38      	subs	r0, r7, r0
 8029dec:	780f      	ldrb	r7, [r1, #0]
 8029dee:	b2d2      	uxtb	r2, r2
 8029df0:	4347      	muls	r7, r0
 8029df2:	70ca      	strb	r2, [r1, #3]
 8029df4:	fb05 7303 	mla	r3, r5, r3, r7
 8029df8:	fb15 f504 	smulbb	r5, r5, r4
 8029dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8029e00:	700b      	strb	r3, [r1, #0]
 8029e02:	784b      	ldrb	r3, [r1, #1]
 8029e04:	fb00 6303 	mla	r3, r0, r3, r6
 8029e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8029e0c:	704b      	strb	r3, [r1, #1]
 8029e0e:	788b      	ldrb	r3, [r1, #2]
 8029e10:	fb00 5503 	mla	r5, r0, r3, r5
 8029e14:	fb95 f5f2 	sdiv	r5, r5, r2
 8029e18:	708d      	strb	r5, [r1, #2]
 8029e1a:	e7cd      	b.n	8029db8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

08029e1c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e20:	b09b      	sub	sp, #108	@ 0x6c
 8029e22:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8029e26:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8029e28:	9019      	str	r0, [sp, #100]	@ 0x64
 8029e2a:	9307      	str	r3, [sp, #28]
 8029e2c:	6850      	ldr	r0, [r2, #4]
 8029e2e:	6812      	ldr	r2, [r2, #0]
 8029e30:	f89d 40b4 	ldrb.w	r4, [sp, #180]	@ 0xb4
 8029e34:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8029e38:	fb00 1303 	mla	r3, r0, r3, r1
 8029e3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029e40:	9308      	str	r3, [sp, #32]
 8029e42:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029e44:	681b      	ldr	r3, [r3, #0]
 8029e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8029e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029e4a:	2b00      	cmp	r3, #0
 8029e4c:	dc03      	bgt.n	8029e56 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e50:	2b00      	cmp	r3, #0
 8029e52:	f340 8231 	ble.w	802a2b8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8029e56:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029e58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029e5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029e60:	1e48      	subs	r0, r1, #1
 8029e62:	1e55      	subs	r5, r2, #1
 8029e64:	9b07      	ldr	r3, [sp, #28]
 8029e66:	2b00      	cmp	r3, #0
 8029e68:	f340 80c3 	ble.w	8029ff2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029e6c:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8029e6e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029e70:	1436      	asrs	r6, r6, #16
 8029e72:	ea4f 4323 	mov.w	r3, r3, asr #16
 8029e76:	d406      	bmi.n	8029e86 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029e78:	4286      	cmp	r6, r0
 8029e7a:	da04      	bge.n	8029e86 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029e7c:	2b00      	cmp	r3, #0
 8029e7e:	db02      	blt.n	8029e86 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029e80:	42ab      	cmp	r3, r5
 8029e82:	f2c0 80b7 	blt.w	8029ff4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8029e86:	3601      	adds	r6, #1
 8029e88:	f100 80a4 	bmi.w	8029fd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029e8c:	42b1      	cmp	r1, r6
 8029e8e:	f2c0 80a1 	blt.w	8029fd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029e92:	3301      	adds	r3, #1
 8029e94:	f100 809e 	bmi.w	8029fd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029e98:	429a      	cmp	r2, r3
 8029e9a:	f2c0 809b 	blt.w	8029fd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029e9e:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8029ea2:	f1bb 0f00 	cmp.w	fp, #0
 8029ea6:	f340 80c5 	ble.w	802a034 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8029eaa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029eac:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8029eae:	1418      	asrs	r0, r3, #16
 8029eb0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029eb2:	68cf      	ldr	r7, [r1, #12]
 8029eb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029eb8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8029eba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029ebc:	1409      	asrs	r1, r1, #16
 8029ebe:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8029ec2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029ec4:	689b      	ldr	r3, [r3, #8]
 8029ec6:	f100 8127 	bmi.w	802a118 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029eca:	f103 3cff 	add.w	ip, r3, #4294967295
 8029ece:	4561      	cmp	r1, ip
 8029ed0:	f280 8122 	bge.w	802a118 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029ed4:	2800      	cmp	r0, #0
 8029ed6:	f2c0 811f 	blt.w	802a118 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029eda:	f107 3cff 	add.w	ip, r7, #4294967295
 8029ede:	4560      	cmp	r0, ip
 8029ee0:	f280 811a 	bge.w	802a118 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029ee4:	b21b      	sxth	r3, r3
 8029ee6:	fb00 1103 	mla	r1, r0, r3, r1
 8029eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029eec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029ef0:	1847      	adds	r7, r0, r1
 8029ef2:	5c40      	ldrb	r0, [r0, r1]
 8029ef4:	7879      	ldrb	r1, [r7, #1]
 8029ef6:	f897 e002 	ldrb.w	lr, [r7, #2]
 8029efa:	910c      	str	r1, [sp, #48]	@ 0x30
 8029efc:	f897 9003 	ldrb.w	r9, [r7, #3]
 8029f00:	f897 8004 	ldrb.w	r8, [r7, #4]
 8029f04:	f897 a005 	ldrb.w	sl, [r7, #5]
 8029f08:	b1cd      	cbz	r5, 8029f3e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8029f0a:	f04f 0c03 	mov.w	ip, #3
 8029f0e:	f06f 0104 	mvn.w	r1, #4
 8029f12:	3705      	adds	r7, #5
 8029f14:	fb13 130c 	smlabb	r3, r3, ip, r1
 8029f18:	eb07 0c03 	add.w	ip, r7, r3
 8029f1c:	5cfb      	ldrb	r3, [r7, r3]
 8029f1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8029f20:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8029f24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029f26:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8029f2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8029f2c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8029f30:	930e      	str	r3, [sp, #56]	@ 0x38
 8029f32:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8029f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8029f38:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8029f3c:	9312      	str	r3, [sp, #72]	@ 0x48
 8029f3e:	b292      	uxth	r2, r2
 8029f40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029f42:	b2ad      	uxth	r5, r5
 8029f44:	2cff      	cmp	r4, #255	@ 0xff
 8029f46:	fb02 f305 	mul.w	r3, r2, r5
 8029f4a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8029f4e:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 8029f52:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8029f56:	eba2 0203 	sub.w	r2, r2, r3
 8029f5a:	b2ad      	uxth	r5, r5
 8029f5c:	b292      	uxth	r2, r2
 8029f5e:	eba7 0705 	sub.w	r7, r7, r5
 8029f62:	fb02 f909 	mul.w	r9, r2, r9
 8029f66:	b2bf      	uxth	r7, r7
 8029f68:	fb02 f808 	mul.w	r8, r2, r8
 8029f6c:	fb02 fa0a 	mul.w	sl, r2, sl
 8029f70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029f72:	fb07 9900 	mla	r9, r7, r0, r9
 8029f76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029f78:	fb07 8801 	mla	r8, r7, r1, r8
 8029f7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029f7e:	fb07 aa0e 	mla	sl, r7, lr, sl
 8029f82:	fb05 9900 	mla	r9, r5, r0, r9
 8029f86:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029f88:	fb05 8801 	mla	r8, r5, r1, r8
 8029f8c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8029f8e:	fb05 a502 	mla	r5, r5, r2, sl
 8029f92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029f94:	fb03 9900 	mla	r9, r3, r0, r9
 8029f98:	fb03 8801 	mla	r8, r3, r1, r8
 8029f9c:	fb03 5302 	mla	r3, r3, r2, r5
 8029fa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8029fa4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8029fa8:	ea4f 2323 	mov.w	r3, r3, asr #8
 8029fac:	f040 8088 	bne.w	802a0c0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8029fb0:	f886 9000 	strb.w	r9, [r6]
 8029fb4:	f886 8001 	strb.w	r8, [r6, #1]
 8029fb8:	70b3      	strb	r3, [r6, #2]
 8029fba:	70f4      	strb	r4, [r6, #3]
 8029fbc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029fbe:	3604      	adds	r6, #4
 8029fc0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8029fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029fc6:	4413      	add	r3, r2
 8029fc8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8029fca:	9325      	str	r3, [sp, #148]	@ 0x94
 8029fcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029fce:	4413      	add	r3, r2
 8029fd0:	9326      	str	r3, [sp, #152]	@ 0x98
 8029fd2:	e766      	b.n	8029ea2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8029fd4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029fd6:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8029fd8:	4433      	add	r3, r6
 8029fda:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8029fdc:	9325      	str	r3, [sp, #148]	@ 0x94
 8029fde:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029fe0:	4433      	add	r3, r6
 8029fe2:	9326      	str	r3, [sp, #152]	@ 0x98
 8029fe4:	9b07      	ldr	r3, [sp, #28]
 8029fe6:	3b01      	subs	r3, #1
 8029fe8:	9307      	str	r3, [sp, #28]
 8029fea:	9b08      	ldr	r3, [sp, #32]
 8029fec:	3304      	adds	r3, #4
 8029fee:	9308      	str	r3, [sp, #32]
 8029ff0:	e738      	b.n	8029e64 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029ff2:	d026      	beq.n	802a042 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8029ff4:	9b07      	ldr	r3, [sp, #28]
 8029ff6:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8029ff8:	3b01      	subs	r3, #1
 8029ffa:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8029ffc:	fb00 5003 	mla	r0, r0, r3, r5
 802a000:	1400      	asrs	r0, r0, #16
 802a002:	f53f af4c 	bmi.w	8029e9e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a006:	3901      	subs	r1, #1
 802a008:	4288      	cmp	r0, r1
 802a00a:	f6bf af48 	bge.w	8029e9e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a00e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a010:	9826      	ldr	r0, [sp, #152]	@ 0x98
 802a012:	fb01 0303 	mla	r3, r1, r3, r0
 802a016:	141b      	asrs	r3, r3, #16
 802a018:	f53f af41 	bmi.w	8029e9e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a01c:	3a01      	subs	r2, #1
 802a01e:	4293      	cmp	r3, r2
 802a020:	f6bf af3d 	bge.w	8029e9e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a024:	9b08      	ldr	r3, [sp, #32]
 802a026:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802a02a:	1d18      	adds	r0, r3, #4
 802a02c:	f1be 0f00 	cmp.w	lr, #0
 802a030:	f300 808e 	bgt.w	802a150 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802a034:	9b07      	ldr	r3, [sp, #28]
 802a036:	9a08      	ldr	r2, [sp, #32]
 802a038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802a03c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a040:	9308      	str	r3, [sp, #32]
 802a042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a044:	2b00      	cmp	r3, #0
 802a046:	f340 8137 	ble.w	802a2b8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802a04a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a04e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a050:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a054:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a058:	eef0 6a62 	vmov.f32	s13, s5
 802a05c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a060:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a064:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a068:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 802a06c:	eef0 6a43 	vmov.f32	s13, s6
 802a070:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a074:	edcd 6a26 	vstr	s13, [sp, #152]	@ 0x98
 802a078:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a07c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a080:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a084:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a088:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a08c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a090:	ee12 2a90 	vmov	r2, s5
 802a094:	eef0 2a47 	vmov.f32	s5, s14
 802a098:	fb92 f3f3 	sdiv	r3, r2, r3
 802a09c:	ee13 2a10 	vmov	r2, s6
 802a0a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a0a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a0a4:	eeb0 3a67 	vmov.f32	s6, s15
 802a0a8:	fb92 f3f3 	sdiv	r3, r2, r3
 802a0ac:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a0b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802a0b2:	3b01      	subs	r3, #1
 802a0b4:	930a      	str	r3, [sp, #40]	@ 0x28
 802a0b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a0b8:	bf08      	it	eq
 802a0ba:	4613      	moveq	r3, r2
 802a0bc:	9307      	str	r3, [sp, #28]
 802a0be:	e6c3      	b.n	8029e48 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a0c0:	2c00      	cmp	r4, #0
 802a0c2:	f43f af7b 	beq.w	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a0c6:	78f0      	ldrb	r0, [r6, #3]
 802a0c8:	fa5f f989 	uxtb.w	r9, r9
 802a0cc:	fa5f f888 	uxtb.w	r8, r8
 802a0d0:	fb04 f100 	mul.w	r1, r4, r0
 802a0d4:	1822      	adds	r2, r4, r0
 802a0d6:	b2db      	uxtb	r3, r3
 802a0d8:	1c4d      	adds	r5, r1, #1
 802a0da:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802a0de:	1229      	asrs	r1, r5, #8
 802a0e0:	1a45      	subs	r5, r0, r1
 802a0e2:	1a52      	subs	r2, r2, r1
 802a0e4:	7831      	ldrb	r1, [r6, #0]
 802a0e6:	b2d2      	uxtb	r2, r2
 802a0e8:	4369      	muls	r1, r5
 802a0ea:	70f2      	strb	r2, [r6, #3]
 802a0ec:	fb04 1909 	mla	r9, r4, r9, r1
 802a0f0:	7871      	ldrb	r1, [r6, #1]
 802a0f2:	4369      	muls	r1, r5
 802a0f4:	fb04 1808 	mla	r8, r4, r8, r1
 802a0f8:	78b1      	ldrb	r1, [r6, #2]
 802a0fa:	434d      	muls	r5, r1
 802a0fc:	fb04 5303 	mla	r3, r4, r3, r5
 802a100:	fb99 f9f2 	sdiv	r9, r9, r2
 802a104:	fb98 f8f2 	sdiv	r8, r8, r2
 802a108:	fb93 f3f2 	sdiv	r3, r3, r2
 802a10c:	f886 9000 	strb.w	r9, [r6]
 802a110:	f886 8001 	strb.w	r8, [r6, #1]
 802a114:	70b3      	strb	r3, [r6, #2]
 802a116:	e751      	b.n	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a118:	f111 0c01 	adds.w	ip, r1, #1
 802a11c:	f53f af4e 	bmi.w	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a120:	4563      	cmp	r3, ip
 802a122:	f6ff af4b 	blt.w	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a126:	f110 0c01 	adds.w	ip, r0, #1
 802a12a:	f53f af47 	bmi.w	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a12e:	4567      	cmp	r7, ip
 802a130:	f6ff af44 	blt.w	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a134:	b23f      	sxth	r7, r7
 802a136:	9101      	str	r1, [sp, #4]
 802a138:	b21b      	sxth	r3, r3
 802a13a:	4631      	mov	r1, r6
 802a13c:	9700      	str	r7, [sp, #0]
 802a13e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802a142:	e9cd 5404 	strd	r5, r4, [sp, #16]
 802a146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a148:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a14a:	f7ff fd82 	bl	8029c52 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 802a14e:	e735      	b.n	8029fbc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a150:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a152:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a154:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802a158:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a15a:	1412      	asrs	r2, r2, #16
 802a15c:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802a160:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a162:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802a166:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a168:	141b      	asrs	r3, r3, #16
 802a16a:	fb0c 2303 	mla	r3, ip, r3, r2
 802a16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a174:	18d6      	adds	r6, r2, r3
 802a176:	5cd2      	ldrb	r2, [r2, r3]
 802a178:	7873      	ldrb	r3, [r6, #1]
 802a17a:	f896 8002 	ldrb.w	r8, [r6, #2]
 802a17e:	930c      	str	r3, [sp, #48]	@ 0x30
 802a180:	f896 a003 	ldrb.w	sl, [r6, #3]
 802a184:	f896 9004 	ldrb.w	r9, [r6, #4]
 802a188:	f896 b005 	ldrb.w	fp, [r6, #5]
 802a18c:	b1a5      	cbz	r5, 802a1b8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802a18e:	2703      	movs	r7, #3
 802a190:	f06f 0304 	mvn.w	r3, #4
 802a194:	3605      	adds	r6, #5
 802a196:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802a19a:	eb06 070c 	add.w	r7, r6, ip
 802a19e:	f816 600c 	ldrb.w	r6, [r6, ip]
 802a1a2:	9613      	str	r6, [sp, #76]	@ 0x4c
 802a1a4:	787e      	ldrb	r6, [r7, #1]
 802a1a6:	9615      	str	r6, [sp, #84]	@ 0x54
 802a1a8:	78be      	ldrb	r6, [r7, #2]
 802a1aa:	9617      	str	r6, [sp, #92]	@ 0x5c
 802a1ac:	78fe      	ldrb	r6, [r7, #3]
 802a1ae:	9614      	str	r6, [sp, #80]	@ 0x50
 802a1b0:	793e      	ldrb	r6, [r7, #4]
 802a1b2:	9616      	str	r6, [sp, #88]	@ 0x58
 802a1b4:	797e      	ldrb	r6, [r7, #5]
 802a1b6:	9618      	str	r6, [sp, #96]	@ 0x60
 802a1b8:	b289      	uxth	r1, r1
 802a1ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1bc:	b2ad      	uxth	r5, r5
 802a1be:	2cff      	cmp	r4, #255	@ 0xff
 802a1c0:	fb01 f605 	mul.w	r6, r1, r5
 802a1c4:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802a1c8:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 802a1cc:	f5c1 7780 	rsb	r7, r1, #256	@ 0x100
 802a1d0:	eba1 0106 	sub.w	r1, r1, r6
 802a1d4:	b2ad      	uxth	r5, r5
 802a1d6:	b289      	uxth	r1, r1
 802a1d8:	eba7 0705 	sub.w	r7, r7, r5
 802a1dc:	fb01 f909 	mul.w	r9, r1, r9
 802a1e0:	b2bf      	uxth	r7, r7
 802a1e2:	fb01 fa0a 	mul.w	sl, r1, sl
 802a1e6:	fb01 fb0b 	mul.w	fp, r1, fp
 802a1ea:	fb07 9903 	mla	r9, r7, r3, r9
 802a1ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802a1f0:	fb07 aa02 	mla	sl, r7, r2, sl
 802a1f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a1f6:	fb05 9903 	mla	r9, r5, r3, r9
 802a1fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a1fc:	fb07 bb08 	mla	fp, r7, r8, fp
 802a200:	fb06 9903 	mla	r9, r6, r3, r9
 802a204:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a206:	fb05 aa02 	mla	sl, r5, r2, sl
 802a20a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a20c:	fb05 bb03 	mla	fp, r5, r3, fp
 802a210:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a212:	fb06 aa02 	mla	sl, r6, r2, sl
 802a216:	ea4f 2929 	mov.w	r9, r9, asr #8
 802a21a:	fb06 b603 	mla	r6, r6, r3, fp
 802a21e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802a222:	ea4f 2626 	mov.w	r6, r6, asr #8
 802a226:	d113      	bne.n	802a250 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802a228:	f800 ac04 	strb.w	sl, [r0, #-4]
 802a22c:	f800 9c03 	strb.w	r9, [r0, #-3]
 802a230:	f800 6c02 	strb.w	r6, [r0, #-2]
 802a234:	f800 4c01 	strb.w	r4, [r0, #-1]
 802a238:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a23a:	3004      	adds	r0, #4
 802a23c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802a23e:	f10e 3eff 	add.w	lr, lr, #4294967295
 802a242:	4413      	add	r3, r2
 802a244:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802a246:	9325      	str	r3, [sp, #148]	@ 0x94
 802a248:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a24a:	4413      	add	r3, r2
 802a24c:	9326      	str	r3, [sp, #152]	@ 0x98
 802a24e:	e6ed      	b.n	802a02c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802a250:	2c00      	cmp	r4, #0
 802a252:	d0f1      	beq.n	802a238 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a254:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 802a258:	fa5f fa8a 	uxtb.w	sl, sl
 802a25c:	fa5f f989 	uxtb.w	r9, r9
 802a260:	fb04 f302 	mul.w	r3, r4, r2
 802a264:	eb04 0c02 	add.w	ip, r4, r2
 802a268:	b2f6      	uxtb	r6, r6
 802a26a:	1c59      	adds	r1, r3, #1
 802a26c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a270:	120b      	asrs	r3, r1, #8
 802a272:	1ad1      	subs	r1, r2, r3
 802a274:	ebac 0c03 	sub.w	ip, ip, r3
 802a278:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 802a27c:	fa5f fc8c 	uxtb.w	ip, ip
 802a280:	434b      	muls	r3, r1
 802a282:	f800 cc01 	strb.w	ip, [r0, #-1]
 802a286:	fb04 3a0a 	mla	sl, r4, sl, r3
 802a28a:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 802a28e:	434b      	muls	r3, r1
 802a290:	fb04 3909 	mla	r9, r4, r9, r3
 802a294:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 802a298:	4359      	muls	r1, r3
 802a29a:	fb04 1606 	mla	r6, r4, r6, r1
 802a29e:	fb9a fafc 	sdiv	sl, sl, ip
 802a2a2:	fb99 f9fc 	sdiv	r9, r9, ip
 802a2a6:	fb96 f6fc 	sdiv	r6, r6, ip
 802a2aa:	f800 ac04 	strb.w	sl, [r0, #-4]
 802a2ae:	f800 9c03 	strb.w	r9, [r0, #-3]
 802a2b2:	f800 6c02 	strb.w	r6, [r0, #-2]
 802a2b6:	e7bf      	b.n	802a238 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a2b8:	b01b      	add	sp, #108	@ 0x6c
 802a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a2be <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 802a2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a2c2:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	@ 0x24
 802a2c6:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 802a2ca:	fb08 7603 	mla	r6, r8, r3, r7
 802a2ce:	f1b8 0f00 	cmp.w	r8, #0
 802a2d2:	f89d 502c 	ldrb.w	r5, [sp, #44]	@ 0x2c
 802a2d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802a2da:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 802a2de:	6808      	ldr	r0, [r1, #0]
 802a2e0:	eb02 0e06 	add.w	lr, r2, r6
 802a2e4:	f2c0 8089 	blt.w	802a3fa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802a2e8:	45c1      	cmp	r9, r8
 802a2ea:	f340 8086 	ble.w	802a3fa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802a2ee:	2f00      	cmp	r7, #0
 802a2f0:	f2c0 8081 	blt.w	802a3f6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802a2f4:	42bb      	cmp	r3, r7
 802a2f6:	dd7e      	ble.n	802a3f6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802a2f8:	f89e 4002 	ldrb.w	r4, [lr, #2]
 802a2fc:	f89e a001 	ldrb.w	sl, [lr, #1]
 802a300:	0424      	lsls	r4, r4, #16
 802a302:	5d92      	ldrb	r2, [r2, r6]
 802a304:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 802a308:	4314      	orrs	r4, r2
 802a30a:	1c7a      	adds	r2, r7, #1
 802a30c:	d478      	bmi.n	802a400 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a30e:	4293      	cmp	r3, r2
 802a310:	dd76      	ble.n	802a400 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a312:	2d00      	cmp	r5, #0
 802a314:	d074      	beq.n	802a400 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a316:	f89e 6005 	ldrb.w	r6, [lr, #5]
 802a31a:	f89e 2004 	ldrb.w	r2, [lr, #4]
 802a31e:	0436      	lsls	r6, r6, #16
 802a320:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 802a324:	f89e 2003 	ldrb.w	r2, [lr, #3]
 802a328:	4316      	orrs	r6, r2
 802a32a:	f118 0801 	adds.w	r8, r8, #1
 802a32e:	d46b      	bmi.n	802a408 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a330:	45c1      	cmp	r9, r8
 802a332:	dd69      	ble.n	802a408 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a334:	f1bc 0f00 	cmp.w	ip, #0
 802a338:	d066      	beq.n	802a408 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a33a:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 802a33e:	2f00      	cmp	r7, #0
 802a340:	eb0e 0809 	add.w	r8, lr, r9
 802a344:	db5e      	blt.n	802a404 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802a346:	42bb      	cmp	r3, r7
 802a348:	dd5c      	ble.n	802a404 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802a34a:	f898 2002 	ldrb.w	r2, [r8, #2]
 802a34e:	f898 a001 	ldrb.w	sl, [r8, #1]
 802a352:	0412      	lsls	r2, r2, #16
 802a354:	f81e e009 	ldrb.w	lr, [lr, r9]
 802a358:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 802a35c:	ea42 020e 	orr.w	r2, r2, lr
 802a360:	3701      	adds	r7, #1
 802a362:	d40c      	bmi.n	802a37e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a364:	42bb      	cmp	r3, r7
 802a366:	dd0a      	ble.n	802a37e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a368:	b14d      	cbz	r5, 802a37e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a36a:	f898 0005 	ldrb.w	r0, [r8, #5]
 802a36e:	f898 3004 	ldrb.w	r3, [r8, #4]
 802a372:	0400      	lsls	r0, r0, #16
 802a374:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 802a378:	f898 3003 	ldrb.w	r3, [r8, #3]
 802a37c:	4318      	orrs	r0, r3
 802a37e:	b2ad      	uxth	r5, r5
 802a380:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 802a384:	fa1f f78c 	uxth.w	r7, ip
 802a388:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802a38c:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 802a390:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a394:	fb05 fc07 	mul.w	ip, r5, r7
 802a398:	012d      	lsls	r5, r5, #4
 802a39a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a39e:	f5c5 7e80 	rsb	lr, r5, #256	@ 0x100
 802a3a2:	eba5 050c 	sub.w	r5, r5, ip
 802a3a6:	b2bf      	uxth	r7, r7
 802a3a8:	b2ad      	uxth	r5, r5
 802a3aa:	ebae 0e07 	sub.w	lr, lr, r7
 802a3ae:	436b      	muls	r3, r5
 802a3b0:	fa1f fe8e 	uxth.w	lr, lr
 802a3b4:	436e      	muls	r6, r5
 802a3b6:	fb0e 3808 	mla	r8, lr, r8, r3
 802a3ba:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802a3be:	fb0e 6404 	mla	r4, lr, r4, r6
 802a3c2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a3c6:	fb0c 8803 	mla	r8, ip, r3, r8
 802a3ca:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 802a3ce:	fb0c 4000 	mla	r0, ip, r0, r4
 802a3d2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a3d6:	fb07 8303 	mla	r3, r7, r3, r8
 802a3da:	fb07 0002 	mla	r0, r7, r2, r0
 802a3de:	0a1b      	lsrs	r3, r3, #8
 802a3e0:	0a00      	lsrs	r0, r0, #8
 802a3e2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a3e6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a3ea:	4318      	orrs	r0, r3
 802a3ec:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 802a3f0:	6008      	str	r0, [r1, #0]
 802a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a3f6:	4604      	mov	r4, r0
 802a3f8:	e787      	b.n	802a30a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 802a3fa:	4606      	mov	r6, r0
 802a3fc:	4604      	mov	r4, r0
 802a3fe:	e794      	b.n	802a32a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802a400:	4606      	mov	r6, r0
 802a402:	e792      	b.n	802a32a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802a404:	4602      	mov	r2, r0
 802a406:	e7ab      	b.n	802a360 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 802a408:	4602      	mov	r2, r0
 802a40a:	e7b8      	b.n	802a37e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

0802a40c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a410:	b09b      	sub	sp, #108	@ 0x6c
 802a412:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 802a416:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a418:	9019      	str	r0, [sp, #100]	@ 0x64
 802a41a:	9306      	str	r3, [sp, #24]
 802a41c:	6850      	ldr	r0, [r2, #4]
 802a41e:	6812      	ldr	r2, [r2, #0]
 802a420:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a424:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	@ 0x94
 802a428:	fb00 1303 	mla	r3, r0, r3, r1
 802a42c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a430:	9307      	str	r3, [sp, #28]
 802a432:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a434:	681b      	ldr	r3, [r3, #0]
 802a436:	9308      	str	r3, [sp, #32]
 802a438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a43a:	2b00      	cmp	r3, #0
 802a43c:	dc03      	bgt.n	802a446 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a43e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a440:	2b00      	cmp	r3, #0
 802a442:	f340 81a6 	ble.w	802a792 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802a446:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a448:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a44c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a450:	1e48      	subs	r0, r1, #1
 802a452:	1e55      	subs	r5, r2, #1
 802a454:	9b06      	ldr	r3, [sp, #24]
 802a456:	2b00      	cmp	r3, #0
 802a458:	f340 80b0 	ble.w	802a5bc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802a45c:	1426      	asrs	r6, r4, #16
 802a45e:	ea4f 432a 	mov.w	r3, sl, asr #16
 802a462:	d406      	bmi.n	802a472 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a464:	4286      	cmp	r6, r0
 802a466:	da04      	bge.n	802a472 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a468:	2b00      	cmp	r3, #0
 802a46a:	db02      	blt.n	802a472 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a46c:	42ab      	cmp	r3, r5
 802a46e:	f2c0 80a6 	blt.w	802a5be <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a472:	3601      	adds	r6, #1
 802a474:	f100 8097 	bmi.w	802a5a6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a478:	42b1      	cmp	r1, r6
 802a47a:	f2c0 8094 	blt.w	802a5a6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a47e:	3301      	adds	r3, #1
 802a480:	f100 8091 	bmi.w	802a5a6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a484:	429a      	cmp	r2, r3
 802a486:	f2c0 808e 	blt.w	802a5a6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a48a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802a48e:	f1bb 0f00 	cmp.w	fp, #0
 802a492:	f340 80af 	ble.w	802a5f4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802a496:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802a498:	ea4f 452a 	mov.w	r5, sl, asr #16
 802a49c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a49e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a4a2:	68c7      	ldr	r7, [r0, #12]
 802a4a4:	1420      	asrs	r0, r4, #16
 802a4a6:	f3ca 3103 	ubfx	r1, sl, #12, #4
 802a4aa:	689b      	ldr	r3, [r3, #8]
 802a4ac:	f100 80e8 	bmi.w	802a680 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a4b0:	f103 3cff 	add.w	ip, r3, #4294967295
 802a4b4:	4560      	cmp	r0, ip
 802a4b6:	f280 80e3 	bge.w	802a680 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a4ba:	2d00      	cmp	r5, #0
 802a4bc:	f2c0 80e0 	blt.w	802a680 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a4c0:	f107 3cff 	add.w	ip, r7, #4294967295
 802a4c4:	4565      	cmp	r5, ip
 802a4c6:	f280 80db 	bge.w	802a680 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a4ca:	b21b      	sxth	r3, r3
 802a4cc:	fb05 0003 	mla	r0, r5, r3, r0
 802a4d0:	9d08      	ldr	r5, [sp, #32]
 802a4d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a4d6:	182f      	adds	r7, r5, r0
 802a4d8:	5c28      	ldrb	r0, [r5, r0]
 802a4da:	900b      	str	r0, [sp, #44]	@ 0x2c
 802a4dc:	7978      	ldrb	r0, [r7, #5]
 802a4de:	787d      	ldrb	r5, [r7, #1]
 802a4e0:	f897 e002 	ldrb.w	lr, [r7, #2]
 802a4e4:	f897 9003 	ldrb.w	r9, [r7, #3]
 802a4e8:	f897 8004 	ldrb.w	r8, [r7, #4]
 802a4ec:	900c      	str	r0, [sp, #48]	@ 0x30
 802a4ee:	b1c1      	cbz	r1, 802a522 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802a4f0:	f06f 0c04 	mvn.w	ip, #4
 802a4f4:	2003      	movs	r0, #3
 802a4f6:	3705      	adds	r7, #5
 802a4f8:	fb13 c300 	smlabb	r3, r3, r0, ip
 802a4fc:	eb07 0c03 	add.w	ip, r7, r3
 802a500:	5cfb      	ldrb	r3, [r7, r3]
 802a502:	930d      	str	r3, [sp, #52]	@ 0x34
 802a504:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802a508:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a50a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802a50e:	9311      	str	r3, [sp, #68]	@ 0x44
 802a510:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802a514:	930e      	str	r3, [sp, #56]	@ 0x38
 802a516:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802a51a:	9310      	str	r3, [sp, #64]	@ 0x40
 802a51c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802a520:	9312      	str	r3, [sp, #72]	@ 0x48
 802a522:	b292      	uxth	r2, r2
 802a524:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802a526:	b289      	uxth	r1, r1
 802a528:	fb02 f301 	mul.w	r3, r2, r1
 802a52c:	0112      	lsls	r2, r2, #4
 802a52e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a532:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a536:	1ad2      	subs	r2, r2, r3
 802a538:	b289      	uxth	r1, r1
 802a53a:	b292      	uxth	r2, r2
 802a53c:	1a7f      	subs	r7, r7, r1
 802a53e:	fb02 f909 	mul.w	r9, r2, r9
 802a542:	b2bf      	uxth	r7, r7
 802a544:	fb02 f808 	mul.w	r8, r2, r8
 802a548:	fb07 9900 	mla	r9, r7, r0, r9
 802a54c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a54e:	fb07 8805 	mla	r8, r7, r5, r8
 802a552:	fb01 9900 	mla	r9, r1, r0, r9
 802a556:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a558:	fb03 9900 	mla	r9, r3, r0, r9
 802a55c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a55e:	fb01 8800 	mla	r8, r1, r0, r8
 802a562:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a564:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802a568:	fb03 8800 	mla	r8, r3, r0, r8
 802a56c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a56e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a572:	4342      	muls	r2, r0
 802a574:	ea49 0908 	orr.w	r9, r9, r8
 802a578:	fb07 280e 	mla	r8, r7, lr, r2
 802a57c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a57e:	fb01 8802 	mla	r8, r1, r2, r8
 802a582:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a584:	fb03 8802 	mla	r8, r3, r2, r8
 802a588:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802a58c:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
 802a590:	ea49 0308 	orr.w	r3, r9, r8
 802a594:	6033      	str	r3, [r6, #0]
 802a596:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a598:	3604      	adds	r6, #4
 802a59a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a59e:	441c      	add	r4, r3
 802a5a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a5a2:	449a      	add	sl, r3
 802a5a4:	e773      	b.n	802a48e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a5a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a5a8:	441c      	add	r4, r3
 802a5aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a5ac:	449a      	add	sl, r3
 802a5ae:	9b06      	ldr	r3, [sp, #24]
 802a5b0:	3b01      	subs	r3, #1
 802a5b2:	9306      	str	r3, [sp, #24]
 802a5b4:	9b07      	ldr	r3, [sp, #28]
 802a5b6:	3304      	adds	r3, #4
 802a5b8:	9307      	str	r3, [sp, #28]
 802a5ba:	e74b      	b.n	802a454 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a5bc:	d021      	beq.n	802a602 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802a5be:	9b06      	ldr	r3, [sp, #24]
 802a5c0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a5c2:	3b01      	subs	r3, #1
 802a5c4:	fb00 4003 	mla	r0, r0, r3, r4
 802a5c8:	1400      	asrs	r0, r0, #16
 802a5ca:	f53f af5e 	bmi.w	802a48a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a5ce:	3901      	subs	r1, #1
 802a5d0:	4288      	cmp	r0, r1
 802a5d2:	f6bf af5a 	bge.w	802a48a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a5d6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a5d8:	fb01 a303 	mla	r3, r1, r3, sl
 802a5dc:	141b      	asrs	r3, r3, #16
 802a5de:	f53f af54 	bmi.w	802a48a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a5e2:	3a01      	subs	r2, #1
 802a5e4:	4293      	cmp	r3, r2
 802a5e6:	f6bf af50 	bge.w	802a48a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a5ea:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 802a5ee:	f1bc 0f00 	cmp.w	ip, #0
 802a5f2:	dc5c      	bgt.n	802a6ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802a5f4:	9b06      	ldr	r3, [sp, #24]
 802a5f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802a5fa:	9b07      	ldr	r3, [sp, #28]
 802a5fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802a600:	9307      	str	r3, [sp, #28]
 802a602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a604:	2b00      	cmp	r3, #0
 802a606:	f340 80c4 	ble.w	802a792 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802a60a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a60e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a610:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a614:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a618:	eef0 6a62 	vmov.f32	s13, s5
 802a61c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a620:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a624:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a628:	ee16 4a90 	vmov	r4, s13
 802a62c:	eef0 6a43 	vmov.f32	s13, s6
 802a630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a634:	ee16 aa90 	vmov	sl, s13
 802a638:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a63c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a640:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a644:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a64c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a650:	ee12 2a90 	vmov	r2, s5
 802a654:	eef0 2a47 	vmov.f32	s5, s14
 802a658:	fb92 f3f3 	sdiv	r3, r2, r3
 802a65c:	ee13 2a10 	vmov	r2, s6
 802a660:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a662:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a664:	eeb0 3a67 	vmov.f32	s6, s15
 802a668:	fb92 f3f3 	sdiv	r3, r2, r3
 802a66c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a670:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a672:	3b01      	subs	r3, #1
 802a674:	9309      	str	r3, [sp, #36]	@ 0x24
 802a676:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a678:	bf08      	it	eq
 802a67a:	4613      	moveq	r3, r2
 802a67c:	9306      	str	r3, [sp, #24]
 802a67e:	e6db      	b.n	802a438 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a680:	f110 0c01 	adds.w	ip, r0, #1
 802a684:	d487      	bmi.n	802a596 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a686:	4563      	cmp	r3, ip
 802a688:	db85      	blt.n	802a596 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a68a:	f115 0c01 	adds.w	ip, r5, #1
 802a68e:	d482      	bmi.n	802a596 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a690:	4567      	cmp	r7, ip
 802a692:	db80      	blt.n	802a596 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a694:	b23f      	sxth	r7, r7
 802a696:	b21b      	sxth	r3, r3
 802a698:	9700      	str	r7, [sp, #0]
 802a69a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802a69e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802a6a2:	9a08      	ldr	r2, [sp, #32]
 802a6a4:	4631      	mov	r1, r6
 802a6a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a6a8:	f7ff fe09 	bl	802a2be <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 802a6ac:	e773      	b.n	802a596 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a6ae:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802a6b0:	1420      	asrs	r0, r4, #16
 802a6b2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a6b6:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802a6ba:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802a6be:	ea4f 412a 	mov.w	r1, sl, asr #16
 802a6c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a6c4:	fb07 0101 	mla	r1, r7, r1, r0
 802a6c8:	9808      	ldr	r0, [sp, #32]
 802a6ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a6ce:	1845      	adds	r5, r0, r1
 802a6d0:	5c41      	ldrb	r1, [r0, r1]
 802a6d2:	78ae      	ldrb	r6, [r5, #2]
 802a6d4:	7868      	ldrb	r0, [r5, #1]
 802a6d6:	960c      	str	r6, [sp, #48]	@ 0x30
 802a6d8:	f895 9003 	ldrb.w	r9, [r5, #3]
 802a6dc:	f895 8004 	ldrb.w	r8, [r5, #4]
 802a6e0:	f895 b005 	ldrb.w	fp, [r5, #5]
 802a6e4:	b192      	cbz	r2, 802a70c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802a6e6:	2603      	movs	r6, #3
 802a6e8:	f06f 0304 	mvn.w	r3, #4
 802a6ec:	3505      	adds	r5, #5
 802a6ee:	fb17 3706 	smlabb	r7, r7, r6, r3
 802a6f2:	19ee      	adds	r6, r5, r7
 802a6f4:	5ded      	ldrb	r5, [r5, r7]
 802a6f6:	9513      	str	r5, [sp, #76]	@ 0x4c
 802a6f8:	7875      	ldrb	r5, [r6, #1]
 802a6fa:	9515      	str	r5, [sp, #84]	@ 0x54
 802a6fc:	78b5      	ldrb	r5, [r6, #2]
 802a6fe:	9517      	str	r5, [sp, #92]	@ 0x5c
 802a700:	78f5      	ldrb	r5, [r6, #3]
 802a702:	9514      	str	r5, [sp, #80]	@ 0x50
 802a704:	7935      	ldrb	r5, [r6, #4]
 802a706:	9516      	str	r5, [sp, #88]	@ 0x58
 802a708:	7975      	ldrb	r5, [r6, #5]
 802a70a:	9518      	str	r5, [sp, #96]	@ 0x60
 802a70c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 802a710:	b292      	uxth	r2, r2
 802a712:	f10c 3cff 	add.w	ip, ip, #4294967295
 802a716:	fb03 f502 	mul.w	r5, r3, r2
 802a71a:	011b      	lsls	r3, r3, #4
 802a71c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802a720:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 802a724:	1b5b      	subs	r3, r3, r5
 802a726:	b292      	uxth	r2, r2
 802a728:	b29b      	uxth	r3, r3
 802a72a:	1ab6      	subs	r6, r6, r2
 802a72c:	fb03 f909 	mul.w	r9, r3, r9
 802a730:	b2b6      	uxth	r6, r6
 802a732:	fb03 f808 	mul.w	r8, r3, r8
 802a736:	fb03 fb0b 	mul.w	fp, r3, fp
 802a73a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a73c:	fb06 9901 	mla	r9, r6, r1, r9
 802a740:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802a742:	fb06 8800 	mla	r8, r6, r0, r8
 802a746:	fb02 9901 	mla	r9, r2, r1, r9
 802a74a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802a74c:	fb06 bb03 	mla	fp, r6, r3, fp
 802a750:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a752:	fb05 9901 	mla	r9, r5, r1, r9
 802a756:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802a758:	fb02 bb03 	mla	fp, r2, r3, fp
 802a75c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a75e:	fb02 8801 	mla	r8, r2, r1, r8
 802a762:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802a764:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802a768:	fb05 8801 	mla	r8, r5, r1, r8
 802a76c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a770:	ea49 0908 	orr.w	r9, r9, r8
 802a774:	fb05 b803 	mla	r8, r5, r3, fp
 802a778:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a77a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802a77e:	441c      	add	r4, r3
 802a780:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a782:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
 802a786:	449a      	add	sl, r3
 802a788:	ea49 0508 	orr.w	r5, r9, r8
 802a78c:	f84e 5b04 	str.w	r5, [lr], #4
 802a790:	e72d      	b.n	802a5ee <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802a792:	b01b      	add	sp, #108	@ 0x6c
 802a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a798 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 802a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a79c:	b085      	sub	sp, #20
 802a79e:	6808      	ldr	r0, [r1, #0]
 802a7a0:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	@ 0x3c
 802a7a4:	f9bd a038 	ldrsh.w	sl, [sp, #56]	@ 0x38
 802a7a8:	fb08 6403 	mla	r4, r8, r3, r6
 802a7ac:	f1b8 0f00 	cmp.w	r8, #0
 802a7b0:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 802a7b4:	f89d e048 	ldrb.w	lr, [sp, #72]	@ 0x48
 802a7b8:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 802a7bc:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 802a7c0:	f2c0 80fc 	blt.w	802a9bc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802a7c4:	45c2      	cmp	sl, r8
 802a7c6:	f340 80f9 	ble.w	802a9bc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802a7ca:	2e00      	cmp	r6, #0
 802a7cc:	f2c0 80f4 	blt.w	802a9b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802a7d0:	42b3      	cmp	r3, r6
 802a7d2:	f340 80f1 	ble.w	802a9b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802a7d6:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 802a7da:	1c72      	adds	r2, r6, #1
 802a7dc:	f100 80ef 	bmi.w	802a9be <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802a7e0:	4293      	cmp	r3, r2
 802a7e2:	f340 80ec 	ble.w	802a9be <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802a7e6:	f1bc 0f00 	cmp.w	ip, #0
 802a7ea:	f000 80e8 	beq.w	802a9be <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802a7ee:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802a7f2:	f118 0801 	adds.w	r8, r8, #1
 802a7f6:	f100 80e6 	bmi.w	802a9c6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802a7fa:	45c2      	cmp	sl, r8
 802a7fc:	f340 80e3 	ble.w	802a9c6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802a800:	f1be 0f00 	cmp.w	lr, #0
 802a804:	f000 80df 	beq.w	802a9c6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802a808:	2e00      	cmp	r6, #0
 802a80a:	f2c0 80da 	blt.w	802a9c2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802a80e:	42b3      	cmp	r3, r6
 802a810:	f340 80d7 	ble.w	802a9c2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802a814:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 802a818:	3601      	adds	r6, #1
 802a81a:	d407      	bmi.n	802a82c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a81c:	42b3      	cmp	r3, r6
 802a81e:	dd05      	ble.n	802a82c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a820:	f1bc 0f00 	cmp.w	ip, #0
 802a824:	d002      	beq.n	802a82c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a826:	3301      	adds	r3, #1
 802a828:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 802a82c:	fa1f fc8c 	uxth.w	ip, ip
 802a830:	fa1f f38e 	uxth.w	r3, lr
 802a834:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802a838:	fb03 fe0c 	mul.w	lr, r3, ip
 802a83c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802a840:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802a844:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 802a848:	ebac 060e 	sub.w	r6, ip, lr
 802a84c:	f5cc 7c80 	rsb	ip, ip, #256	@ 0x100
 802a850:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802a854:	b29b      	uxth	r3, r3
 802a856:	b2b6      	uxth	r6, r6
 802a858:	ebac 0c03 	sub.w	ip, ip, r3
 802a85c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802a860:	9601      	str	r6, [sp, #4]
 802a862:	fa1f f68c 	uxth.w	r6, ip
 802a866:	9602      	str	r6, [sp, #8]
 802a868:	9e01      	ldr	r6, [sp, #4]
 802a86a:	fb06 fc0a 	mul.w	ip, r6, sl
 802a86e:	9e02      	ldr	r6, [sp, #8]
 802a870:	fb06 cc0b 	mla	ip, r6, fp, ip
 802a874:	fb03 cc09 	mla	ip, r3, r9, ip
 802a878:	fb0e cc08 	mla	ip, lr, r8, ip
 802a87c:	f3cc 2607 	ubfx	r6, ip, #8, #8
 802a880:	9603      	str	r6, [sp, #12]
 802a882:	2e00      	cmp	r6, #0
 802a884:	f000 8095 	beq.w	802a9b2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802a888:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a88c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802a890:	fb0b fc0c 	mul.w	ip, fp, ip
 802a894:	fb0b f505 	mul.w	r5, fp, r5
 802a898:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802a89c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a8a0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802a8a4:	44dc      	add	ip, fp
 802a8a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a8aa:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 802a8ae:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802a8b2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802a8b6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a8ba:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a8be:	fb0a fc0c 	mul.w	ip, sl, ip
 802a8c2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802a8c6:	fb0a fa04 	mul.w	sl, sl, r4
 802a8ca:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802a8ce:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a8d2:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 802a8d6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802a8da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a8de:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 802a8e2:	4465      	add	r5, ip
 802a8e4:	f002 1cff 	and.w	ip, r2, #16711935	@ 0xff00ff
 802a8e8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a8ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a8f0:	fb09 fc0c 	mul.w	ip, r9, ip
 802a8f4:	0a2d      	lsrs	r5, r5, #8
 802a8f6:	fb09 f902 	mul.w	r9, r9, r2
 802a8fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a8fe:	ea4f 241c 	mov.w	r4, ip, lsr #8
 802a902:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a906:	f509 7280 	add.w	r2, r9, #256	@ 0x100
 802a90a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a90e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a912:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802a916:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
 802a91a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a91e:	4464      	add	r4, ip
 802a920:	fb08 f202 	mul.w	r2, r8, r2
 802a924:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a928:	fb08 f800 	mul.w	r8, r8, r0
 802a92c:	0a24      	lsrs	r4, r4, #8
 802a92e:	0a10      	lsrs	r0, r2, #8
 802a930:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 802a934:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a938:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a93c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802a940:	4402      	add	r2, r0
 802a942:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 802a946:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802a94a:	9801      	ldr	r0, [sp, #4]
 802a94c:	0a12      	lsrs	r2, r2, #8
 802a94e:	4345      	muls	r5, r0
 802a950:	9802      	ldr	r0, [sp, #8]
 802a952:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a956:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a95a:	fb06 5500 	mla	r5, r6, r0, r5
 802a95e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a962:	fb02 520e 	mla	r2, r2, lr, r5
 802a966:	fb04 2403 	mla	r4, r4, r3, r2
 802a96a:	9a01      	ldr	r2, [sp, #4]
 802a96c:	fb02 f60a 	mul.w	r6, r2, sl
 802a970:	0a24      	lsrs	r4, r4, #8
 802a972:	9a03      	ldr	r2, [sp, #12]
 802a974:	fb00 660b 	mla	r6, r0, fp, r6
 802a978:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a97c:	fb07 fc02 	mul.w	ip, r7, r2
 802a980:	fb0e 6e08 	mla	lr, lr, r8, r6
 802a984:	fb03 e309 	mla	r3, r3, r9, lr
 802a988:	0a1b      	lsrs	r3, r3, #8
 802a98a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a98e:	4323      	orrs	r3, r4
 802a990:	f10c 0401 	add.w	r4, ip, #1
 802a994:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 802a998:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802a99c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802a9a0:	1224      	asrs	r4, r4, #8
 802a9a2:	b2d5      	uxtb	r5, r2
 802a9a4:	2cff      	cmp	r4, #255	@ 0xff
 802a9a6:	b2c6      	uxtb	r6, r0
 802a9a8:	d10f      	bne.n	802a9ca <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 802a9aa:	700b      	strb	r3, [r1, #0]
 802a9ac:	7048      	strb	r0, [r1, #1]
 802a9ae:	708a      	strb	r2, [r1, #2]
 802a9b0:	70cc      	strb	r4, [r1, #3]
 802a9b2:	b005      	add	sp, #20
 802a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9b8:	4605      	mov	r5, r0
 802a9ba:	e70e      	b.n	802a7da <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 802a9bc:	4605      	mov	r5, r0
 802a9be:	4604      	mov	r4, r0
 802a9c0:	e717      	b.n	802a7f2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 802a9c2:	4602      	mov	r2, r0
 802a9c4:	e728      	b.n	802a818 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 802a9c6:	4602      	mov	r2, r0
 802a9c8:	e730      	b.n	802a82c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802a9ca:	b2e2      	uxtb	r2, r4
 802a9cc:	2c00      	cmp	r4, #0
 802a9ce:	d0f0      	beq.n	802a9b2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802a9d0:	78cc      	ldrb	r4, [r1, #3]
 802a9d2:	b2db      	uxtb	r3, r3
 802a9d4:	fb17 f606 	smulbb	r6, r7, r6
 802a9d8:	fb02 fc04 	mul.w	ip, r2, r4
 802a9dc:	4422      	add	r2, r4
 802a9de:	f10c 0001 	add.w	r0, ip, #1
 802a9e2:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802a9e6:	1200      	asrs	r0, r0, #8
 802a9e8:	1a24      	subs	r4, r4, r0
 802a9ea:	1a12      	subs	r2, r2, r0
 802a9ec:	7808      	ldrb	r0, [r1, #0]
 802a9ee:	b2d2      	uxtb	r2, r2
 802a9f0:	4360      	muls	r0, r4
 802a9f2:	70ca      	strb	r2, [r1, #3]
 802a9f4:	fb07 0303 	mla	r3, r7, r3, r0
 802a9f8:	7848      	ldrb	r0, [r1, #1]
 802a9fa:	fb17 f705 	smulbb	r7, r7, r5
 802a9fe:	fb04 6000 	mla	r0, r4, r0, r6
 802aa02:	fb93 f3f2 	sdiv	r3, r3, r2
 802aa06:	2bff      	cmp	r3, #255	@ 0xff
 802aa08:	bfd6      	itet	le
 802aa0a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802aa0e:	23ff      	movgt	r3, #255	@ 0xff
 802aa10:	b2db      	uxtble	r3, r3
 802aa12:	fb90 f0f2 	sdiv	r0, r0, r2
 802aa16:	700b      	strb	r3, [r1, #0]
 802aa18:	28ff      	cmp	r0, #255	@ 0xff
 802aa1a:	788b      	ldrb	r3, [r1, #2]
 802aa1c:	bfd4      	ite	le
 802aa1e:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802aa22:	20ff      	movgt	r0, #255	@ 0xff
 802aa24:	fb04 7303 	mla	r3, r4, r3, r7
 802aa28:	bfd8      	it	le
 802aa2a:	b2c0      	uxtble	r0, r0
 802aa2c:	fb93 f3f2 	sdiv	r3, r3, r2
 802aa30:	2bff      	cmp	r3, #255	@ 0xff
 802aa32:	7048      	strb	r0, [r1, #1]
 802aa34:	bfd6      	itet	le
 802aa36:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802aa3a:	23ff      	movgt	r3, #255	@ 0xff
 802aa3c:	b2db      	uxtble	r3, r3
 802aa3e:	708b      	strb	r3, [r1, #2]
 802aa40:	e7b7      	b.n	802a9b2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

0802aa42 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802aa42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa46:	b09b      	sub	sp, #108	@ 0x6c
 802aa48:	9218      	str	r2, [sp, #96]	@ 0x60
 802aa4a:	9306      	str	r3, [sp, #24]
 802aa4c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802aa4e:	f89d 30b4 	ldrb.w	r3, [sp, #180]	@ 0xb4
 802aa52:	9019      	str	r0, [sp, #100]	@ 0x64
 802aa54:	9116      	str	r1, [sp, #88]	@ 0x58
 802aa56:	6850      	ldr	r0, [r2, #4]
 802aa58:	9307      	str	r3, [sp, #28]
 802aa5a:	6812      	ldr	r2, [r2, #0]
 802aa5c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802aa60:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802aa64:	fb00 1303 	mla	r3, r0, r3, r1
 802aa68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802aa6c:	930a      	str	r3, [sp, #40]	@ 0x28
 802aa6e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802aa70:	681b      	ldr	r3, [r3, #0]
 802aa72:	930f      	str	r3, [sp, #60]	@ 0x3c
 802aa74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802aa76:	2b00      	cmp	r3, #0
 802aa78:	dc03      	bgt.n	802aa82 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802aa7a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802aa7c:	2b00      	cmp	r3, #0
 802aa7e:	f340 83b3 	ble.w	802b1e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802aa82:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802aa84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802aa88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802aa8c:	1e48      	subs	r0, r1, #1
 802aa8e:	1e57      	subs	r7, r2, #1
 802aa90:	9b06      	ldr	r3, [sp, #24]
 802aa92:	2b00      	cmp	r3, #0
 802aa94:	f340 8167 	ble.w	802ad66 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802aa98:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802aa9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aaa0:	d406      	bmi.n	802aab0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802aaa2:	4584      	cmp	ip, r0
 802aaa4:	da04      	bge.n	802aab0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	db02      	blt.n	802aab0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802aaaa:	42bb      	cmp	r3, r7
 802aaac:	f2c0 815c 	blt.w	802ad68 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802aab0:	f11c 0c01 	adds.w	ip, ip, #1
 802aab4:	f100 814c 	bmi.w	802ad50 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802aab8:	4561      	cmp	r1, ip
 802aaba:	f2c0 8149 	blt.w	802ad50 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802aabe:	3301      	adds	r3, #1
 802aac0:	f100 8146 	bmi.w	802ad50 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802aac4:	429a      	cmp	r2, r3
 802aac6:	f2c0 8143 	blt.w	802ad50 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802aaca:	9b06      	ldr	r3, [sp, #24]
 802aacc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802aace:	9317      	str	r3, [sp, #92]	@ 0x5c
 802aad0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802aad2:	2b00      	cmp	r3, #0
 802aad4:	f340 8165 	ble.w	802ada2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802aad8:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802aada:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802aade:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802aae0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802aae4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802aae8:	1422      	asrs	r2, r4, #16
 802aaea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802aaee:	689b      	ldr	r3, [r3, #8]
 802aaf0:	f100 81e7 	bmi.w	802aec2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802aaf4:	f103 38ff 	add.w	r8, r3, #4294967295
 802aaf8:	4542      	cmp	r2, r8
 802aafa:	f280 81e2 	bge.w	802aec2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802aafe:	f1bc 0f00 	cmp.w	ip, #0
 802ab02:	f2c0 81de 	blt.w	802aec2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802ab06:	f10e 38ff 	add.w	r8, lr, #4294967295
 802ab0a:	45c4      	cmp	ip, r8
 802ab0c:	f280 81d9 	bge.w	802aec2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802ab10:	b21b      	sxth	r3, r3
 802ab12:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802ab14:	fb0c 2203 	mla	r2, ip, r3, r2
 802ab18:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802ab1c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802ab20:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802ab24:	2800      	cmp	r0, #0
 802ab26:	f000 8182 	beq.w	802ae2e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802ab2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802ab2e:	950b      	str	r5, [sp, #44]	@ 0x2c
 802ab30:	0e2d      	lsrs	r5, r5, #24
 802ab32:	9512      	str	r5, [sp, #72]	@ 0x48
 802ab34:	b181      	cbz	r1, 802ab58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802ab36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802ab3a:	3b01      	subs	r3, #1
 802ab3c:	009b      	lsls	r3, r3, #2
 802ab3e:	3304      	adds	r3, #4
 802ab40:	eb08 0c03 	add.w	ip, r8, r3
 802ab44:	f858 3003 	ldr.w	r3, [r8, r3]
 802ab48:	9308      	str	r3, [sp, #32]
 802ab4a:	0e1b      	lsrs	r3, r3, #24
 802ab4c:	9310      	str	r3, [sp, #64]	@ 0x40
 802ab4e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802ab52:	930c      	str	r3, [sp, #48]	@ 0x30
 802ab54:	0e1b      	lsrs	r3, r3, #24
 802ab56:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ab58:	b280      	uxth	r0, r0
 802ab5a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ab5c:	b289      	uxth	r1, r1
 802ab5e:	fb00 f901 	mul.w	r9, r0, r1
 802ab62:	0100      	lsls	r0, r0, #4
 802ab64:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802ab68:	eba0 0809 	sub.w	r8, r0, r9
 802ab6c:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802ab70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802ab72:	b289      	uxth	r1, r1
 802ab74:	fa1f f888 	uxth.w	r8, r8
 802ab78:	1a5b      	subs	r3, r3, r1
 802ab7a:	fb08 f000 	mul.w	r0, r8, r0
 802ab7e:	b29b      	uxth	r3, r3
 802ab80:	fb03 000e 	mla	r0, r3, lr, r0
 802ab84:	fb01 0005 	mla	r0, r1, r5, r0
 802ab88:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ab8a:	fb09 0005 	mla	r0, r9, r5, r0
 802ab8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802ab92:	2800      	cmp	r0, #0
 802ab94:	f000 80d3 	beq.w	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802ab98:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802ab9c:	d01b      	beq.n	802abd6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 802ab9e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802aba2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802aba6:	fb0e fa0a 	mul.w	sl, lr, sl
 802abaa:	fb0e fe02 	mul.w	lr, lr, r2
 802abae:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802abb2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802abb6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802abba:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802abbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802abc2:	4452      	add	r2, sl
 802abc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802abc8:	0a12      	lsrs	r2, r2, #8
 802abca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802abce:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802abd2:	ea42 020c 	orr.w	r2, r2, ip
 802abd6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802abd8:	2dff      	cmp	r5, #255	@ 0xff
 802abda:	d021      	beq.n	802ac20 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802abdc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802abde:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802abe2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802abe4:	fb05 fb0b 	mul.w	fp, r5, fp
 802abe8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802abea:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802abee:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802abf0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802abf4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802abf8:	fb05 fa0a 	mul.w	sl, r5, sl
 802abfc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ac00:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802ac04:	44de      	add	lr, fp
 802ac06:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802ac0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802ac0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ac12:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ac16:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802ac1a:	ea4e 050a 	orr.w	r5, lr, sl
 802ac1e:	950b      	str	r5, [sp, #44]	@ 0x2c
 802ac20:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ac22:	2dff      	cmp	r5, #255	@ 0xff
 802ac24:	d021      	beq.n	802ac6a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802ac26:	9d08      	ldr	r5, [sp, #32]
 802ac28:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802ac2c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ac2e:	fb05 fb0b 	mul.w	fp, r5, fp
 802ac32:	9d08      	ldr	r5, [sp, #32]
 802ac34:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802ac38:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ac3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802ac3e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802ac42:	fb05 fa0a 	mul.w	sl, r5, sl
 802ac46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ac4a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802ac4e:	44de      	add	lr, fp
 802ac50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802ac54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802ac58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ac5c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ac60:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802ac64:	ea4e 050a 	orr.w	r5, lr, sl
 802ac68:	9508      	str	r5, [sp, #32]
 802ac6a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ac6c:	2dff      	cmp	r5, #255	@ 0xff
 802ac6e:	d021      	beq.n	802acb4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802ac70:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802ac72:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802ac76:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ac78:	fb05 fb0b 	mul.w	fp, r5, fp
 802ac7c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802ac7e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802ac82:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802ac84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802ac88:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802ac8c:	fb05 fa0a 	mul.w	sl, r5, sl
 802ac90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ac94:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802ac98:	44de      	add	lr, fp
 802ac9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802ac9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802aca2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802aca6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802acaa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802acae:	ea4e 050a 	orr.w	r5, lr, sl
 802acb2:	950c      	str	r5, [sp, #48]	@ 0x30
 802acb4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802acb6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802acba:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802acbe:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802acc2:	9d08      	ldr	r5, [sp, #32]
 802acc4:	fb08 fc0c 	mul.w	ip, r8, ip
 802acc8:	fb03 cc0e 	mla	ip, r3, lr, ip
 802accc:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802acd0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802acd2:	fb01 cc0e 	mla	ip, r1, lr, ip
 802acd6:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802acda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802acdc:	fb09 cc0e 	mla	ip, r9, lr, ip
 802ace0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802ace4:	fb08 f80e 	mul.w	r8, r8, lr
 802ace8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802acec:	fb03 8202 	mla	r2, r3, r2, r8
 802acf0:	9b08      	ldr	r3, [sp, #32]
 802acf2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802acf6:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802acfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802acfc:	fb01 220a 	mla	r2, r1, sl, r2
 802ad00:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 802ad04:	9b07      	ldr	r3, [sp, #28]
 802ad06:	fb09 2901 	mla	r9, r9, r1, r2
 802ad0a:	4358      	muls	r0, r3
 802ad0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802ad10:	1c43      	adds	r3, r0, #1
 802ad12:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802ad16:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ad1a:	ea4c 0c09 	orr.w	ip, ip, r9
 802ad1e:	1200      	asrs	r0, r0, #8
 802ad20:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802ad24:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802ad28:	28ff      	cmp	r0, #255	@ 0xff
 802ad2a:	b2d9      	uxtb	r1, r3
 802ad2c:	fa5f fe82 	uxtb.w	lr, r2
 802ad30:	f040 8086 	bne.w	802ae40 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802ad34:	f887 c000 	strb.w	ip, [r7]
 802ad38:	707a      	strb	r2, [r7, #1]
 802ad3a:	70bb      	strb	r3, [r7, #2]
 802ad3c:	70f8      	strb	r0, [r7, #3]
 802ad3e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad40:	3704      	adds	r7, #4
 802ad42:	441c      	add	r4, r3
 802ad44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad46:	441e      	add	r6, r3
 802ad48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ad4a:	3b01      	subs	r3, #1
 802ad4c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802ad4e:	e6bf      	b.n	802aad0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802ad50:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad52:	441c      	add	r4, r3
 802ad54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad56:	441e      	add	r6, r3
 802ad58:	9b06      	ldr	r3, [sp, #24]
 802ad5a:	3b01      	subs	r3, #1
 802ad5c:	9306      	str	r3, [sp, #24]
 802ad5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ad60:	3304      	adds	r3, #4
 802ad62:	930a      	str	r3, [sp, #40]	@ 0x28
 802ad64:	e694      	b.n	802aa90 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802ad66:	d023      	beq.n	802adb0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802ad68:	9b06      	ldr	r3, [sp, #24]
 802ad6a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802ad6c:	3b01      	subs	r3, #1
 802ad6e:	fb00 4003 	mla	r0, r0, r3, r4
 802ad72:	1400      	asrs	r0, r0, #16
 802ad74:	f53f aea9 	bmi.w	802aaca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802ad78:	3901      	subs	r1, #1
 802ad7a:	4288      	cmp	r0, r1
 802ad7c:	f6bf aea5 	bge.w	802aaca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802ad80:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802ad82:	fb01 6303 	mla	r3, r1, r3, r6
 802ad86:	141b      	asrs	r3, r3, #16
 802ad88:	f53f ae9f 	bmi.w	802aaca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802ad8c:	3a01      	subs	r2, #1
 802ad8e:	4293      	cmp	r3, r2
 802ad90:	f6bf ae9b 	bge.w	802aaca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802ad94:	f8dd b018 	ldr.w	fp, [sp, #24]
 802ad98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ad9a:	f1bb 0f00 	cmp.w	fp, #0
 802ad9e:	f300 80ae 	bgt.w	802aefe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802ada2:	9b06      	ldr	r3, [sp, #24]
 802ada4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ada8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802adaa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802adae:	930a      	str	r3, [sp, #40]	@ 0x28
 802adb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802adb2:	2b00      	cmp	r3, #0
 802adb4:	f340 8218 	ble.w	802b1e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802adb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802adbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802adbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 802adc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802adc6:	eef0 6a62 	vmov.f32	s13, s5
 802adca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802adce:	ee31 1a05 	vadd.f32	s2, s2, s10
 802add2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802add6:	ee16 4a90 	vmov	r4, s13
 802adda:	eef0 6a43 	vmov.f32	s13, s6
 802adde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ade2:	ee16 6a90 	vmov	r6, s13
 802ade6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802adea:	ee61 7a27 	vmul.f32	s15, s2, s15
 802adee:	ee77 2a62 	vsub.f32	s5, s14, s5
 802adf2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802adf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802adfa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802adfe:	ee12 2a90 	vmov	r2, s5
 802ae02:	eef0 2a47 	vmov.f32	s5, s14
 802ae06:	fb92 f3f3 	sdiv	r3, r2, r3
 802ae0a:	ee13 2a10 	vmov	r2, s6
 802ae0e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ae12:	eeb0 3a67 	vmov.f32	s6, s15
 802ae16:	fb92 f3f3 	sdiv	r3, r2, r3
 802ae1a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ae1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802ae20:	3b01      	subs	r3, #1
 802ae22:	9316      	str	r3, [sp, #88]	@ 0x58
 802ae24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ae26:	bf08      	it	eq
 802ae28:	4613      	moveq	r3, r2
 802ae2a:	9306      	str	r3, [sp, #24]
 802ae2c:	e622      	b.n	802aa74 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802ae2e:	2900      	cmp	r1, #0
 802ae30:	f43f ae92 	beq.w	802ab58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802ae34:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802ae38:	9308      	str	r3, [sp, #32]
 802ae3a:	0e1b      	lsrs	r3, r3, #24
 802ae3c:	9310      	str	r3, [sp, #64]	@ 0x40
 802ae3e:	e68b      	b.n	802ab58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802ae40:	b2c3      	uxtb	r3, r0
 802ae42:	2800      	cmp	r0, #0
 802ae44:	f43f af7b 	beq.w	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802ae48:	78f8      	ldrb	r0, [r7, #3]
 802ae4a:	fa5f fc8c 	uxtb.w	ip, ip
 802ae4e:	9d07      	ldr	r5, [sp, #28]
 802ae50:	fb03 f800 	mul.w	r8, r3, r0
 802ae54:	4403      	add	r3, r0
 802ae56:	f108 0201 	add.w	r2, r8, #1
 802ae5a:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 802ae5e:	1212      	asrs	r2, r2, #8
 802ae60:	1a80      	subs	r0, r0, r2
 802ae62:	1a9b      	subs	r3, r3, r2
 802ae64:	783a      	ldrb	r2, [r7, #0]
 802ae66:	b2db      	uxtb	r3, r3
 802ae68:	4342      	muls	r2, r0
 802ae6a:	70fb      	strb	r3, [r7, #3]
 802ae6c:	fb05 220c 	mla	r2, r5, ip, r2
 802ae70:	9d07      	ldr	r5, [sp, #28]
 802ae72:	fb92 f2f3 	sdiv	r2, r2, r3
 802ae76:	fb15 fe0e 	smulbb	lr, r5, lr
 802ae7a:	2aff      	cmp	r2, #255	@ 0xff
 802ae7c:	9d07      	ldr	r5, [sp, #28]
 802ae7e:	bfd4      	ite	le
 802ae80:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802ae84:	22ff      	movgt	r2, #255	@ 0xff
 802ae86:	fb15 f101 	smulbb	r1, r5, r1
 802ae8a:	bfd8      	it	le
 802ae8c:	b2d2      	uxtble	r2, r2
 802ae8e:	703a      	strb	r2, [r7, #0]
 802ae90:	787a      	ldrb	r2, [r7, #1]
 802ae92:	fb00 e202 	mla	r2, r0, r2, lr
 802ae96:	fb92 f2f3 	sdiv	r2, r2, r3
 802ae9a:	2aff      	cmp	r2, #255	@ 0xff
 802ae9c:	bfd6      	itet	le
 802ae9e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802aea2:	22ff      	movgt	r2, #255	@ 0xff
 802aea4:	b2d2      	uxtble	r2, r2
 802aea6:	707a      	strb	r2, [r7, #1]
 802aea8:	78ba      	ldrb	r2, [r7, #2]
 802aeaa:	fb00 1202 	mla	r2, r0, r2, r1
 802aeae:	fb92 f2f3 	sdiv	r2, r2, r3
 802aeb2:	2aff      	cmp	r2, #255	@ 0xff
 802aeb4:	bfd6      	itet	le
 802aeb6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802aeba:	22ff      	movgt	r2, #255	@ 0xff
 802aebc:	b2d2      	uxtble	r2, r2
 802aebe:	70ba      	strb	r2, [r7, #2]
 802aec0:	e73d      	b.n	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aec2:	f112 0801 	adds.w	r8, r2, #1
 802aec6:	f53f af3a 	bmi.w	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aeca:	4543      	cmp	r3, r8
 802aecc:	f6ff af37 	blt.w	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aed0:	f11c 0801 	adds.w	r8, ip, #1
 802aed4:	f53f af33 	bmi.w	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aed8:	45c6      	cmp	lr, r8
 802aeda:	f6ff af30 	blt.w	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aede:	9d07      	ldr	r5, [sp, #28]
 802aee0:	b21b      	sxth	r3, r3
 802aee2:	9201      	str	r2, [sp, #4]
 802aee4:	fa0f f28e 	sxth.w	r2, lr
 802aee8:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802aeec:	e9cd c002 	strd	ip, r0, [sp, #8]
 802aef0:	9200      	str	r2, [sp, #0]
 802aef2:	4639      	mov	r1, r7
 802aef4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aef6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802aef8:	f7ff fc4e 	bl	802a798 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 802aefc:	e71f      	b.n	802ad3e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802aefe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802af00:	ea4f 4c24 	mov.w	ip, r4, asr #16
 802af04:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802af06:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802af0a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802af0e:	1433      	asrs	r3, r6, #16
 802af10:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802af14:	fb00 c303 	mla	r3, r0, r3, ip
 802af18:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 802af1c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802af20:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802af24:	2a00      	cmp	r2, #0
 802af26:	f000 8111 	beq.w	802b14c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802af2a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 802af2e:	950d      	str	r5, [sp, #52]	@ 0x34
 802af30:	0e2d      	lsrs	r5, r5, #24
 802af32:	9514      	str	r5, [sp, #80]	@ 0x50
 802af34:	b187      	cbz	r7, 802af58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802af36:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 802af3a:	3801      	subs	r0, #1
 802af3c:	0080      	lsls	r0, r0, #2
 802af3e:	3004      	adds	r0, #4
 802af40:	eb0c 0800 	add.w	r8, ip, r0
 802af44:	f85c 0000 	ldr.w	r0, [ip, r0]
 802af48:	9009      	str	r0, [sp, #36]	@ 0x24
 802af4a:	0e00      	lsrs	r0, r0, #24
 802af4c:	9011      	str	r0, [sp, #68]	@ 0x44
 802af4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802af52:	900e      	str	r0, [sp, #56]	@ 0x38
 802af54:	0e00      	lsrs	r0, r0, #24
 802af56:	9015      	str	r0, [sp, #84]	@ 0x54
 802af58:	b292      	uxth	r2, r2
 802af5a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802af5c:	b2bf      	uxth	r7, r7
 802af5e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802af60:	fb02 f907 	mul.w	r9, r2, r7
 802af64:	0112      	lsls	r2, r2, #4
 802af66:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 802af6a:	eba2 0809 	sub.w	r8, r2, r9
 802af6e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802af72:	b2bf      	uxth	r7, r7
 802af74:	fa1f f888 	uxth.w	r8, r8
 802af78:	1bd2      	subs	r2, r2, r7
 802af7a:	fb08 f000 	mul.w	r0, r8, r0
 802af7e:	b292      	uxth	r2, r2
 802af80:	fb02 000e 	mla	r0, r2, lr, r0
 802af84:	fb07 0005 	mla	r0, r7, r5, r0
 802af88:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802af8a:	fb09 0005 	mla	r0, r9, r5, r0
 802af8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802af92:	2800      	cmp	r0, #0
 802af94:	f000 80d2 	beq.w	802b13c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802af98:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802af9c:	d01b      	beq.n	802afd6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 802af9e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802afa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802afa6:	fb0e fa0a 	mul.w	sl, lr, sl
 802afaa:	fb0e fe03 	mul.w	lr, lr, r3
 802afae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802afb2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802afb6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802afba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802afbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802afc2:	4453      	add	r3, sl
 802afc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802afc8:	0a1b      	lsrs	r3, r3, #8
 802afca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802afce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802afd2:	ea43 030c 	orr.w	r3, r3, ip
 802afd6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802afd8:	2dff      	cmp	r5, #255	@ 0xff
 802afda:	d021      	beq.n	802b020 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 802afdc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802afde:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802afe2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802afe4:	fb05 fc0c 	mul.w	ip, r5, ip
 802afe8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802afea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802afee:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802aff2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802aff4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802aff8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802affc:	fb05 fa0a 	mul.w	sl, r5, sl
 802b000:	44e6      	add	lr, ip
 802b002:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802b006:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b00a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b00e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b012:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b016:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802b01a:	ea4e 050a 	orr.w	r5, lr, sl
 802b01e:	950d      	str	r5, [sp, #52]	@ 0x34
 802b020:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802b022:	2dff      	cmp	r5, #255	@ 0xff
 802b024:	d021      	beq.n	802b06a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802b026:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802b028:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802b02c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802b02e:	fb05 fc0c 	mul.w	ip, r5, ip
 802b032:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802b034:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b038:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802b03c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802b03e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802b042:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b046:	fb05 fa0a 	mul.w	sl, r5, sl
 802b04a:	44e6      	add	lr, ip
 802b04c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802b050:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b054:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b058:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b05c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b060:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802b064:	ea4e 050a 	orr.w	r5, lr, sl
 802b068:	9509      	str	r5, [sp, #36]	@ 0x24
 802b06a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802b06c:	2dff      	cmp	r5, #255	@ 0xff
 802b06e:	d021      	beq.n	802b0b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 802b070:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b072:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802b076:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802b078:	fb05 fc0c 	mul.w	ip, r5, ip
 802b07c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b07e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b082:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802b086:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802b088:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802b08c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b090:	fb05 fa0a 	mul.w	sl, r5, sl
 802b094:	44e6      	add	lr, ip
 802b096:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802b09a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b09e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b0a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b0a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b0aa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802b0ae:	ea4e 050a 	orr.w	r5, lr, sl
 802b0b2:	950e      	str	r5, [sp, #56]	@ 0x38
 802b0b4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802b0b6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802b0ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802b0be:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802b0c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802b0c4:	fb08 fc0c 	mul.w	ip, r8, ip
 802b0c8:	fb02 cc0e 	mla	ip, r2, lr, ip
 802b0cc:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802b0d0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b0d2:	fb07 cc0e 	mla	ip, r7, lr, ip
 802b0d6:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802b0da:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802b0dc:	fb09 cc0e 	mla	ip, r9, lr, ip
 802b0e0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802b0e4:	fb08 f80e 	mul.w	r8, r8, lr
 802b0e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b0ec:	fb02 8303 	mla	r3, r2, r3, r8
 802b0f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b0f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802b0f6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802b0fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b0fc:	fb07 330a 	mla	r3, r7, sl, r3
 802b100:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 802b104:	fb09 3e0e 	mla	lr, r9, lr, r3
 802b108:	9b07      	ldr	r3, [sp, #28]
 802b10a:	4358      	muls	r0, r3
 802b10c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b110:	1c43      	adds	r3, r0, #1
 802b112:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802b116:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b11a:	ea4c 0c0e 	orr.w	ip, ip, lr
 802b11e:	1200      	asrs	r0, r0, #8
 802b120:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802b124:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802b128:	28ff      	cmp	r0, #255	@ 0xff
 802b12a:	b2df      	uxtb	r7, r3
 802b12c:	fa5f fe82 	uxtb.w	lr, r2
 802b130:	d115      	bne.n	802b15e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 802b132:	f881 c000 	strb.w	ip, [r1]
 802b136:	704a      	strb	r2, [r1, #1]
 802b138:	708b      	strb	r3, [r1, #2]
 802b13a:	70c8      	strb	r0, [r1, #3]
 802b13c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b13e:	3104      	adds	r1, #4
 802b140:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b144:	441c      	add	r4, r3
 802b146:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b148:	441e      	add	r6, r3
 802b14a:	e626      	b.n	802ad9a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b14c:	2f00      	cmp	r7, #0
 802b14e:	f43f af03 	beq.w	802af58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b152:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 802b156:	9009      	str	r0, [sp, #36]	@ 0x24
 802b158:	0e00      	lsrs	r0, r0, #24
 802b15a:	9011      	str	r0, [sp, #68]	@ 0x44
 802b15c:	e6fc      	b.n	802af58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b15e:	b2c3      	uxtb	r3, r0
 802b160:	2800      	cmp	r0, #0
 802b162:	d0eb      	beq.n	802b13c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b164:	78c8      	ldrb	r0, [r1, #3]
 802b166:	fa5f fc8c 	uxtb.w	ip, ip
 802b16a:	9d07      	ldr	r5, [sp, #28]
 802b16c:	fb03 f800 	mul.w	r8, r3, r0
 802b170:	4403      	add	r3, r0
 802b172:	f108 0201 	add.w	r2, r8, #1
 802b176:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 802b17a:	1212      	asrs	r2, r2, #8
 802b17c:	1a9b      	subs	r3, r3, r2
 802b17e:	1a82      	subs	r2, r0, r2
 802b180:	7808      	ldrb	r0, [r1, #0]
 802b182:	b2db      	uxtb	r3, r3
 802b184:	4350      	muls	r0, r2
 802b186:	70cb      	strb	r3, [r1, #3]
 802b188:	fb05 0c0c 	mla	ip, r5, ip, r0
 802b18c:	9d07      	ldr	r5, [sp, #28]
 802b18e:	7848      	ldrb	r0, [r1, #1]
 802b190:	fb15 fe0e 	smulbb	lr, r5, lr
 802b194:	9d07      	ldr	r5, [sp, #28]
 802b196:	fb9c fcf3 	sdiv	ip, ip, r3
 802b19a:	fb02 e000 	mla	r0, r2, r0, lr
 802b19e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802b1a2:	fb15 f707 	smulbb	r7, r5, r7
 802b1a6:	bfd4      	ite	le
 802b1a8:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 802b1ac:	f04f 0cff 	movgt.w	ip, #255	@ 0xff
 802b1b0:	fb90 f0f3 	sdiv	r0, r0, r3
 802b1b4:	bfd8      	it	le
 802b1b6:	fa5f fc8c 	uxtble.w	ip, ip
 802b1ba:	28ff      	cmp	r0, #255	@ 0xff
 802b1bc:	bfd4      	ite	le
 802b1be:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802b1c2:	20ff      	movgt	r0, #255	@ 0xff
 802b1c4:	f881 c000 	strb.w	ip, [r1]
 802b1c8:	bfd8      	it	le
 802b1ca:	b2c0      	uxtble	r0, r0
 802b1cc:	7048      	strb	r0, [r1, #1]
 802b1ce:	7888      	ldrb	r0, [r1, #2]
 802b1d0:	fb02 7200 	mla	r2, r2, r0, r7
 802b1d4:	fb92 f2f3 	sdiv	r2, r2, r3
 802b1d8:	2aff      	cmp	r2, #255	@ 0xff
 802b1da:	bfd6      	itet	le
 802b1dc:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802b1e0:	22ff      	movgt	r2, #255	@ 0xff
 802b1e2:	b2d2      	uxtble	r2, r2
 802b1e4:	708a      	strb	r2, [r1, #2]
 802b1e6:	e7a9      	b.n	802b13c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b1e8:	b01b      	add	sp, #108	@ 0x6c
 802b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802b1f0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 802b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b1f4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 802b1f8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802b1fc:	2c00      	cmp	r4, #0
 802b1fe:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802b202:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802b206:	fb00 4e03 	mla	lr, r0, r3, r4
 802b20a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802b20e:	f2c0 808f 	blt.w	802b330 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b212:	45a1      	cmp	r9, r4
 802b214:	f340 808c 	ble.w	802b330 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b218:	2800      	cmp	r0, #0
 802b21a:	f2c0 8089 	blt.w	802b330 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b21e:	4580      	cmp	r8, r0
 802b220:	f340 8086 	ble.w	802b330 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b224:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802b228:	f01e 0f01 	tst.w	lr, #1
 802b22c:	5d56      	ldrb	r6, [r2, r5]
 802b22e:	bf0c      	ite	eq
 802b230:	f006 060f 	andeq.w	r6, r6, #15
 802b234:	1136      	asrne	r6, r6, #4
 802b236:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b23a:	b2f6      	uxtb	r6, r6
 802b23c:	f114 0a01 	adds.w	sl, r4, #1
 802b240:	d478      	bmi.n	802b334 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b242:	45d1      	cmp	r9, sl
 802b244:	dd76      	ble.n	802b334 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b246:	2800      	cmp	r0, #0
 802b248:	db74      	blt.n	802b334 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b24a:	4580      	cmp	r8, r0
 802b24c:	dd72      	ble.n	802b334 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b24e:	2f00      	cmp	r7, #0
 802b250:	d072      	beq.n	802b338 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 802b252:	f10e 0b01 	add.w	fp, lr, #1
 802b256:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802b25a:	f01b 0f01 	tst.w	fp, #1
 802b25e:	5d55      	ldrb	r5, [r2, r5]
 802b260:	bf0c      	ite	eq
 802b262:	f005 050f 	andeq.w	r5, r5, #15
 802b266:	112d      	asrne	r5, r5, #4
 802b268:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b26c:	b2ed      	uxtb	r5, r5
 802b26e:	f1bc 0f00 	cmp.w	ip, #0
 802b272:	d065      	beq.n	802b340 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 802b274:	2c00      	cmp	r4, #0
 802b276:	f100 0001 	add.w	r0, r0, #1
 802b27a:	db5f      	blt.n	802b33c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b27c:	45a1      	cmp	r9, r4
 802b27e:	dd5d      	ble.n	802b33c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b280:	2800      	cmp	r0, #0
 802b282:	db5b      	blt.n	802b33c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b284:	4580      	cmp	r8, r0
 802b286:	dd59      	ble.n	802b33c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b288:	eb03 0b0e 	add.w	fp, r3, lr
 802b28c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802b290:	f01b 0f01 	tst.w	fp, #1
 802b294:	5d14      	ldrb	r4, [r2, r4]
 802b296:	bf0c      	ite	eq
 802b298:	f004 040f 	andeq.w	r4, r4, #15
 802b29c:	1124      	asrne	r4, r4, #4
 802b29e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b2a2:	b2e4      	uxtb	r4, r4
 802b2a4:	f1ba 0f00 	cmp.w	sl, #0
 802b2a8:	db4d      	blt.n	802b346 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b2aa:	45d1      	cmp	r9, sl
 802b2ac:	dd4b      	ble.n	802b346 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b2ae:	2800      	cmp	r0, #0
 802b2b0:	db49      	blt.n	802b346 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b2b2:	4580      	cmp	r8, r0
 802b2b4:	dd47      	ble.n	802b346 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b2b6:	2f00      	cmp	r7, #0
 802b2b8:	d047      	beq.n	802b34a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802b2ba:	3301      	adds	r3, #1
 802b2bc:	449e      	add	lr, r3
 802b2be:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b2c2:	f01e 0f01 	tst.w	lr, #1
 802b2c6:	5cd0      	ldrb	r0, [r2, r3]
 802b2c8:	bf0c      	ite	eq
 802b2ca:	f000 000f 	andeq.w	r0, r0, #15
 802b2ce:	1100      	asrne	r0, r0, #4
 802b2d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b2d4:	b2c3      	uxtb	r3, r0
 802b2d6:	b2ba      	uxth	r2, r7
 802b2d8:	fa1f fc8c 	uxth.w	ip, ip
 802b2dc:	fb02 f00c 	mul.w	r0, r2, ip
 802b2e0:	0112      	lsls	r2, r2, #4
 802b2e2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b2e6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802b2ea:	1a12      	subs	r2, r2, r0
 802b2ec:	fa1f fc8c 	uxth.w	ip, ip
 802b2f0:	b292      	uxth	r2, r2
 802b2f2:	eba7 070c 	sub.w	r7, r7, ip
 802b2f6:	436a      	muls	r2, r5
 802b2f8:	b2bf      	uxth	r7, r7
 802b2fa:	fb06 2207 	mla	r2, r6, r7, r2
 802b2fe:	fb0c 2404 	mla	r4, ip, r4, r2
 802b302:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802b306:	fb00 4303 	mla	r3, r0, r3, r4
 802b30a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b30e:	4353      	muls	r3, r2
 802b310:	1c5a      	adds	r2, r3, #1
 802b312:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b316:	4a21      	ldr	r2, [pc, #132]	@ (802b39c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 802b318:	121b      	asrs	r3, r3, #8
 802b31a:	7895      	ldrb	r5, [r2, #2]
 802b31c:	7857      	ldrb	r7, [r2, #1]
 802b31e:	2bff      	cmp	r3, #255	@ 0xff
 802b320:	7814      	ldrb	r4, [r2, #0]
 802b322:	d114      	bne.n	802b34e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 802b324:	700c      	strb	r4, [r1, #0]
 802b326:	704f      	strb	r7, [r1, #1]
 802b328:	708d      	strb	r5, [r1, #2]
 802b32a:	70cb      	strb	r3, [r1, #3]
 802b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b330:	2600      	movs	r6, #0
 802b332:	e783      	b.n	802b23c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 802b334:	2500      	movs	r5, #0
 802b336:	e79a      	b.n	802b26e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802b338:	463d      	mov	r5, r7
 802b33a:	e798      	b.n	802b26e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802b33c:	2400      	movs	r4, #0
 802b33e:	e7b1      	b.n	802b2a4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 802b340:	4663      	mov	r3, ip
 802b342:	4664      	mov	r4, ip
 802b344:	e7c7      	b.n	802b2d6 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b346:	2300      	movs	r3, #0
 802b348:	e7c5      	b.n	802b2d6 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b34a:	463b      	mov	r3, r7
 802b34c:	e7c3      	b.n	802b2d6 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b34e:	b2da      	uxtb	r2, r3
 802b350:	2b00      	cmp	r3, #0
 802b352:	d0eb      	beq.n	802b32c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802b354:	78ce      	ldrb	r6, [r1, #3]
 802b356:	435c      	muls	r4, r3
 802b358:	435f      	muls	r7, r3
 802b35a:	fb02 fc06 	mul.w	ip, r2, r6
 802b35e:	4432      	add	r2, r6
 802b360:	436b      	muls	r3, r5
 802b362:	f10c 0001 	add.w	r0, ip, #1
 802b366:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802b36a:	1200      	asrs	r0, r0, #8
 802b36c:	1a12      	subs	r2, r2, r0
 802b36e:	1a30      	subs	r0, r6, r0
 802b370:	780e      	ldrb	r6, [r1, #0]
 802b372:	b2d2      	uxtb	r2, r2
 802b374:	fb00 4606 	mla	r6, r0, r6, r4
 802b378:	784c      	ldrb	r4, [r1, #1]
 802b37a:	70ca      	strb	r2, [r1, #3]
 802b37c:	fb00 7404 	mla	r4, r0, r4, r7
 802b380:	fb94 f4f2 	sdiv	r4, r4, r2
 802b384:	704c      	strb	r4, [r1, #1]
 802b386:	788c      	ldrb	r4, [r1, #2]
 802b388:	fb00 3304 	mla	r3, r0, r4, r3
 802b38c:	fb96 f6f2 	sdiv	r6, r6, r2
 802b390:	fb93 f3f2 	sdiv	r3, r3, r2
 802b394:	700e      	strb	r6, [r1, #0]
 802b396:	708b      	strb	r3, [r1, #2]
 802b398:	e7c8      	b.n	802b32c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802b39a:	bf00      	nop
 802b39c:	200122d4 	.word	0x200122d4

0802b3a0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3a4:	b097      	sub	sp, #92	@ 0x5c
 802b3a6:	9214      	str	r2, [sp, #80]	@ 0x50
 802b3a8:	9309      	str	r3, [sp, #36]	@ 0x24
 802b3aa:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802b3ac:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802b3b0:	9015      	str	r0, [sp, #84]	@ 0x54
 802b3b2:	910d      	str	r1, [sp, #52]	@ 0x34
 802b3b4:	6850      	ldr	r0, [r2, #4]
 802b3b6:	930e      	str	r3, [sp, #56]	@ 0x38
 802b3b8:	6812      	ldr	r2, [r2, #0]
 802b3ba:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802b3be:	e9dd a521 	ldrd	sl, r5, [sp, #132]	@ 0x84
 802b3c2:	fb00 1303 	mla	r3, r0, r3, r1
 802b3c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802b3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 802b3cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b3ce:	689b      	ldr	r3, [r3, #8]
 802b3d0:	3301      	adds	r3, #1
 802b3d2:	f023 0301 	bic.w	r3, r3, #1
 802b3d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b3d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b3da:	681e      	ldr	r6, [r3, #0]
 802b3dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b3de:	2b00      	cmp	r3, #0
 802b3e0:	dc03      	bgt.n	802b3ea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802b3e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802b3e4:	2b00      	cmp	r3, #0
 802b3e6:	f340 8255 	ble.w	802b894 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802b3ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b3ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b3f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b3f4:	1e48      	subs	r0, r1, #1
 802b3f6:	1e57      	subs	r7, r2, #1
 802b3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b3fa:	2b00      	cmp	r3, #0
 802b3fc:	f340 80bb 	ble.w	802b576 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b400:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802b404:	ea4f 4325 	mov.w	r3, r5, asr #16
 802b408:	d406      	bmi.n	802b418 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b40a:	4584      	cmp	ip, r0
 802b40c:	da04      	bge.n	802b418 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b40e:	2b00      	cmp	r3, #0
 802b410:	db02      	blt.n	802b418 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b412:	42bb      	cmp	r3, r7
 802b414:	f2c0 80b0 	blt.w	802b578 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802b418:	f11c 0c01 	adds.w	ip, ip, #1
 802b41c:	f100 80a0 	bmi.w	802b560 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b420:	4561      	cmp	r1, ip
 802b422:	f2c0 809d 	blt.w	802b560 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b426:	3301      	adds	r3, #1
 802b428:	f100 809a 	bmi.w	802b560 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b42c:	429a      	cmp	r2, r3
 802b42e:	f2c0 8097 	blt.w	802b560 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b432:	e9dd b709 	ldrd	fp, r7, [sp, #36]	@ 0x24
 802b436:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802b43a:	f1bb 0f00 	cmp.w	fp, #0
 802b43e:	f340 80bb 	ble.w	802b5b8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802b442:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b444:	1428      	asrs	r0, r5, #16
 802b446:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802b44a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802b44e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b452:	ea5f 432a 	movs.w	r3, sl, asr #16
 802b456:	f100 8134 	bmi.w	802b6c2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b45a:	f10c 39ff 	add.w	r9, ip, #4294967295
 802b45e:	454b      	cmp	r3, r9
 802b460:	f280 812f 	bge.w	802b6c2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b464:	2800      	cmp	r0, #0
 802b466:	f2c0 812c 	blt.w	802b6c2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b46a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802b46e:	4548      	cmp	r0, r9
 802b470:	f280 8127 	bge.w	802b6c2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b474:	fb00 3308 	mla	r3, r0, r8, r3
 802b478:	0858      	lsrs	r0, r3, #1
 802b47a:	07dc      	lsls	r4, r3, #31
 802b47c:	f816 c000 	ldrb.w	ip, [r6, r0]
 802b480:	bf54      	ite	pl
 802b482:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b486:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b48a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b48e:	fa5f fc8c 	uxtb.w	ip, ip
 802b492:	2a00      	cmp	r2, #0
 802b494:	f000 80d6 	beq.w	802b644 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802b498:	1c58      	adds	r0, r3, #1
 802b49a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b49e:	07c0      	lsls	r0, r0, #31
 802b4a0:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802b4a4:	bf54      	ite	pl
 802b4a6:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b4aa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b4ae:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b4b2:	fa5f f08e 	uxtb.w	r0, lr
 802b4b6:	9010      	str	r0, [sp, #64]	@ 0x40
 802b4b8:	b1d9      	cbz	r1, 802b4f2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b4ba:	4443      	add	r3, r8
 802b4bc:	0858      	lsrs	r0, r3, #1
 802b4be:	07dc      	lsls	r4, r3, #31
 802b4c0:	f103 0301 	add.w	r3, r3, #1
 802b4c4:	5c30      	ldrb	r0, [r6, r0]
 802b4c6:	bf54      	ite	pl
 802b4c8:	f000 000f 	andpl.w	r0, r0, #15
 802b4cc:	1100      	asrmi	r0, r0, #4
 802b4ce:	07dc      	lsls	r4, r3, #31
 802b4d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b4d4:	b2c0      	uxtb	r0, r0
 802b4d6:	900b      	str	r0, [sp, #44]	@ 0x2c
 802b4d8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802b4dc:	f816 e000 	ldrb.w	lr, [r6, r0]
 802b4e0:	bf54      	ite	pl
 802b4e2:	f00e 030f 	andpl.w	r3, lr, #15
 802b4e6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802b4ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b4ee:	b2db      	uxtb	r3, r3
 802b4f0:	9311      	str	r3, [sp, #68]	@ 0x44
 802b4f2:	b292      	uxth	r2, r2
 802b4f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802b4f6:	b289      	uxth	r1, r1
 802b4f8:	fb02 f301 	mul.w	r3, r2, r1
 802b4fc:	0112      	lsls	r2, r2, #4
 802b4fe:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b502:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802b506:	1ad2      	subs	r2, r2, r3
 802b508:	b289      	uxth	r1, r1
 802b50a:	b292      	uxth	r2, r2
 802b50c:	1a40      	subs	r0, r0, r1
 802b50e:	4362      	muls	r2, r4
 802b510:	b280      	uxth	r0, r0
 802b512:	fb0c 2c00 	mla	ip, ip, r0, r2
 802b516:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802b518:	fb01 c102 	mla	r1, r1, r2, ip
 802b51c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b51e:	fb03 1302 	mla	r3, r3, r2, r1
 802b522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b524:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b528:	4353      	muls	r3, r2
 802b52a:	1c5a      	adds	r2, r3, #1
 802b52c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b530:	4abf      	ldr	r2, [pc, #764]	@ (802b830 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802b532:	121b      	asrs	r3, r3, #8
 802b534:	f892 9002 	ldrb.w	r9, [r2, #2]
 802b538:	7850      	ldrb	r0, [r2, #1]
 802b53a:	2bff      	cmp	r3, #255	@ 0xff
 802b53c:	f892 c000 	ldrb.w	ip, [r2]
 802b540:	f040 8091 	bne.w	802b666 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802b544:	f887 c000 	strb.w	ip, [r7]
 802b548:	7078      	strb	r0, [r7, #1]
 802b54a:	f887 9002 	strb.w	r9, [r7, #2]
 802b54e:	70fb      	strb	r3, [r7, #3]
 802b550:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b552:	3704      	adds	r7, #4
 802b554:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b558:	449a      	add	sl, r3
 802b55a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b55c:	441d      	add	r5, r3
 802b55e:	e76c      	b.n	802b43a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802b560:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b562:	449a      	add	sl, r3
 802b564:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b566:	441d      	add	r5, r3
 802b568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b56a:	3b01      	subs	r3, #1
 802b56c:	9309      	str	r3, [sp, #36]	@ 0x24
 802b56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b570:	3304      	adds	r3, #4
 802b572:	930a      	str	r3, [sp, #40]	@ 0x28
 802b574:	e740      	b.n	802b3f8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b576:	d026      	beq.n	802b5c6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802b578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b57a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802b57c:	3b01      	subs	r3, #1
 802b57e:	fb00 a003 	mla	r0, r0, r3, sl
 802b582:	1400      	asrs	r0, r0, #16
 802b584:	f53f af55 	bmi.w	802b432 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b588:	3901      	subs	r1, #1
 802b58a:	4288      	cmp	r0, r1
 802b58c:	f6bf af51 	bge.w	802b432 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b590:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802b592:	fb01 5303 	mla	r3, r1, r3, r5
 802b596:	141b      	asrs	r3, r3, #16
 802b598:	f53f af4b 	bmi.w	802b432 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b59c:	3a01      	subs	r2, #1
 802b59e:	4293      	cmp	r3, r2
 802b5a0:	f6bf af47 	bge.w	802b432 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b5a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b5a6:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802b5aa:	3304      	adds	r3, #4
 802b5ac:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802b5b0:	f1be 0f00 	cmp.w	lr, #0
 802b5b4:	f300 80a6 	bgt.w	802b704 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 802b5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b5ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802b5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b5c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802b5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 802b5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b5c8:	2b00      	cmp	r3, #0
 802b5ca:	f340 8163 	ble.w	802b894 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802b5ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b5d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b5d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b5d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b5dc:	eef0 6a62 	vmov.f32	s13, s5
 802b5e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b5e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b5e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b5ec:	ee16 aa90 	vmov	sl, s13
 802b5f0:	eef0 6a43 	vmov.f32	s13, s6
 802b5f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b5f8:	ee16 5a90 	vmov	r5, s13
 802b5fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b600:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b604:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b608:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b60c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b610:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b614:	ee12 2a90 	vmov	r2, s5
 802b618:	eef0 2a47 	vmov.f32	s5, s14
 802b61c:	fb92 f3f3 	sdiv	r3, r2, r3
 802b620:	ee13 2a10 	vmov	r2, s6
 802b624:	9323      	str	r3, [sp, #140]	@ 0x8c
 802b626:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b628:	eeb0 3a67 	vmov.f32	s6, s15
 802b62c:	fb92 f3f3 	sdiv	r3, r2, r3
 802b630:	9324      	str	r3, [sp, #144]	@ 0x90
 802b632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b634:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b636:	3b01      	subs	r3, #1
 802b638:	930d      	str	r3, [sp, #52]	@ 0x34
 802b63a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b63c:	bf08      	it	eq
 802b63e:	4613      	moveq	r3, r2
 802b640:	9309      	str	r3, [sp, #36]	@ 0x24
 802b642:	e6cb      	b.n	802b3dc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802b644:	2900      	cmp	r1, #0
 802b646:	f43f af54 	beq.w	802b4f2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b64a:	eb08 0003 	add.w	r0, r8, r3
 802b64e:	0843      	lsrs	r3, r0, #1
 802b650:	07c0      	lsls	r0, r0, #31
 802b652:	5cf3      	ldrb	r3, [r6, r3]
 802b654:	bf54      	ite	pl
 802b656:	f003 030f 	andpl.w	r3, r3, #15
 802b65a:	111b      	asrmi	r3, r3, #4
 802b65c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b660:	b2db      	uxtb	r3, r3
 802b662:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b664:	e745      	b.n	802b4f2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b666:	b2da      	uxtb	r2, r3
 802b668:	2b00      	cmp	r3, #0
 802b66a:	f43f af71 	beq.w	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b66e:	f897 e003 	ldrb.w	lr, [r7, #3]
 802b672:	fb03 fc0c 	mul.w	ip, r3, ip
 802b676:	4358      	muls	r0, r3
 802b678:	fb02 f10e 	mul.w	r1, r2, lr
 802b67c:	4472      	add	r2, lr
 802b67e:	fb03 f309 	mul.w	r3, r3, r9
 802b682:	1c4c      	adds	r4, r1, #1
 802b684:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802b688:	1209      	asrs	r1, r1, #8
 802b68a:	1a52      	subs	r2, r2, r1
 802b68c:	ebae 0101 	sub.w	r1, lr, r1
 802b690:	f897 e000 	ldrb.w	lr, [r7]
 802b694:	b2d2      	uxtb	r2, r2
 802b696:	fb01 cc0e 	mla	ip, r1, lr, ip
 802b69a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802b69e:	70fa      	strb	r2, [r7, #3]
 802b6a0:	fb9c fcf2 	sdiv	ip, ip, r2
 802b6a4:	f887 c000 	strb.w	ip, [r7]
 802b6a8:	f897 c001 	ldrb.w	ip, [r7, #1]
 802b6ac:	fb01 000c 	mla	r0, r1, ip, r0
 802b6b0:	fb01 310e 	mla	r1, r1, lr, r3
 802b6b4:	fb90 f0f2 	sdiv	r0, r0, r2
 802b6b8:	fb91 f1f2 	sdiv	r1, r1, r2
 802b6bc:	7078      	strb	r0, [r7, #1]
 802b6be:	70b9      	strb	r1, [r7, #2]
 802b6c0:	e746      	b.n	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b6c2:	f113 0901 	adds.w	r9, r3, #1
 802b6c6:	f53f af43 	bmi.w	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b6ca:	45cc      	cmp	ip, r9
 802b6cc:	f6ff af40 	blt.w	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b6d0:	f110 0901 	adds.w	r9, r0, #1
 802b6d4:	f53f af3c 	bmi.w	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b6d8:	45ce      	cmp	lr, r9
 802b6da:	f6ff af39 	blt.w	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b6de:	9302      	str	r3, [sp, #8]
 802b6e0:	fa0f f38e 	sxth.w	r3, lr
 802b6e4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802b6e6:	9301      	str	r3, [sp, #4]
 802b6e8:	fa0f f38c 	sxth.w	r3, ip
 802b6ec:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b6f0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802b6f4:	9300      	str	r3, [sp, #0]
 802b6f6:	4632      	mov	r2, r6
 802b6f8:	4643      	mov	r3, r8
 802b6fa:	4639      	mov	r1, r7
 802b6fc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802b6fe:	f7ff fd77 	bl	802b1f0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 802b702:	e725      	b.n	802b550 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b704:	ea4f 412a 	mov.w	r1, sl, asr #16
 802b708:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802b70c:	142a      	asrs	r2, r5, #16
 802b70e:	f3c5 3703 	ubfx	r7, r5, #12, #4
 802b712:	fb08 1202 	mla	r2, r8, r2, r1
 802b716:	0851      	lsrs	r1, r2, #1
 802b718:	07d4      	lsls	r4, r2, #31
 802b71a:	5c71      	ldrb	r1, [r6, r1]
 802b71c:	bf54      	ite	pl
 802b71e:	f001 010f 	andpl.w	r1, r1, #15
 802b722:	1109      	asrmi	r1, r1, #4
 802b724:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b728:	b2c9      	uxtb	r1, r1
 802b72a:	2800      	cmp	r0, #0
 802b72c:	d06d      	beq.n	802b80a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802b72e:	f102 0901 	add.w	r9, r2, #1
 802b732:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 802b736:	f019 0f01 	tst.w	r9, #1
 802b73a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b73e:	bf0c      	ite	eq
 802b740:	f00c 0c0f 	andeq.w	ip, ip, #15
 802b744:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802b748:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b74c:	fa5f f48c 	uxtb.w	r4, ip
 802b750:	9412      	str	r4, [sp, #72]	@ 0x48
 802b752:	b307      	cbz	r7, 802b796 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802b754:	4442      	add	r2, r8
 802b756:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802b75a:	07d4      	lsls	r4, r2, #31
 802b75c:	f102 0201 	add.w	r2, r2, #1
 802b760:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b764:	bf54      	ite	pl
 802b766:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b76a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b76e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b772:	fa5f f48c 	uxtb.w	r4, ip
 802b776:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802b77a:	940c      	str	r4, [sp, #48]	@ 0x30
 802b77c:	07d4      	lsls	r4, r2, #31
 802b77e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b782:	bf54      	ite	pl
 802b784:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b788:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b78c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b790:	fa5f f28c 	uxtb.w	r2, ip
 802b794:	9213      	str	r2, [sp, #76]	@ 0x4c
 802b796:	b280      	uxth	r0, r0
 802b798:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802b79a:	b2bf      	uxth	r7, r7
 802b79c:	fb00 f207 	mul.w	r2, r0, r7
 802b7a0:	0100      	lsls	r0, r0, #4
 802b7a2:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 802b7a6:	f5c0 7c80 	rsb	ip, r0, #256	@ 0x100
 802b7aa:	1a80      	subs	r0, r0, r2
 802b7ac:	b2bf      	uxth	r7, r7
 802b7ae:	b280      	uxth	r0, r0
 802b7b0:	ebac 0c07 	sub.w	ip, ip, r7
 802b7b4:	4360      	muls	r0, r4
 802b7b6:	fa1f fc8c 	uxth.w	ip, ip
 802b7ba:	fb01 010c 	mla	r1, r1, ip, r0
 802b7be:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802b7c0:	fb07 1700 	mla	r7, r7, r0, r1
 802b7c4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802b7c6:	fb02 7201 	mla	r2, r2, r1, r7
 802b7ca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802b7cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802b7d0:	434a      	muls	r2, r1
 802b7d2:	1c51      	adds	r1, r2, #1
 802b7d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b7d8:	4915      	ldr	r1, [pc, #84]	@ (802b830 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802b7da:	1212      	asrs	r2, r2, #8
 802b7dc:	7888      	ldrb	r0, [r1, #2]
 802b7de:	784f      	ldrb	r7, [r1, #1]
 802b7e0:	2aff      	cmp	r2, #255	@ 0xff
 802b7e2:	4604      	mov	r4, r0
 802b7e4:	f891 c000 	ldrb.w	ip, [r1]
 802b7e8:	d124      	bne.n	802b834 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802b7ea:	f803 cc04 	strb.w	ip, [r3, #-4]
 802b7ee:	f803 7c03 	strb.w	r7, [r3, #-3]
 802b7f2:	f803 0c02 	strb.w	r0, [r3, #-2]
 802b7f6:	f803 2c01 	strb.w	r2, [r3, #-1]
 802b7fa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b7fc:	3304      	adds	r3, #4
 802b7fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 802b802:	4492      	add	sl, r2
 802b804:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802b806:	4415      	add	r5, r2
 802b808:	e6d2      	b.n	802b5b0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802b80a:	2f00      	cmp	r7, #0
 802b80c:	d0c3      	beq.n	802b796 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802b80e:	4442      	add	r2, r8
 802b810:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802b814:	07d2      	lsls	r2, r2, #31
 802b816:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802b81a:	bf54      	ite	pl
 802b81c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b820:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b824:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b828:	fa5f f28c 	uxtb.w	r2, ip
 802b82c:	920c      	str	r2, [sp, #48]	@ 0x30
 802b82e:	e7b2      	b.n	802b796 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802b830:	200122d4 	.word	0x200122d4
 802b834:	b2d1      	uxtb	r1, r2
 802b836:	2a00      	cmp	r2, #0
 802b838:	d0df      	beq.n	802b7fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802b83a:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 802b83e:	fb02 fc0c 	mul.w	ip, r2, ip
 802b842:	4357      	muls	r7, r2
 802b844:	fb01 fb09 	mul.w	fp, r1, r9
 802b848:	4449      	add	r1, r9
 802b84a:	4362      	muls	r2, r4
 802b84c:	f10b 0001 	add.w	r0, fp, #1
 802b850:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802b854:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 802b858:	1200      	asrs	r0, r0, #8
 802b85a:	1a09      	subs	r1, r1, r0
 802b85c:	eba9 0000 	sub.w	r0, r9, r0
 802b860:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 802b864:	b2c9      	uxtb	r1, r1
 802b866:	fb00 cc0b 	mla	ip, r0, fp, ip
 802b86a:	fb9c fcf1 	sdiv	ip, ip, r1
 802b86e:	f803 cc04 	strb.w	ip, [r3, #-4]
 802b872:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 802b876:	f803 1c01 	strb.w	r1, [r3, #-1]
 802b87a:	fb00 770c 	mla	r7, r0, ip, r7
 802b87e:	fb00 2009 	mla	r0, r0, r9, r2
 802b882:	fb97 f7f1 	sdiv	r7, r7, r1
 802b886:	fb90 f0f1 	sdiv	r0, r0, r1
 802b88a:	f803 7c03 	strb.w	r7, [r3, #-3]
 802b88e:	f803 0c02 	strb.w	r0, [r3, #-2]
 802b892:	e7b2      	b.n	802b7fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802b894:	b017      	add	sp, #92	@ 0x5c
 802b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b89a:	bf00      	nop

0802b89c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 802b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b8a0:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	@ 0x2c
 802b8a4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802b8a8:	2800      	cmp	r0, #0
 802b8aa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802b8ae:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 802b8b2:	fb0c 0e03 	mla	lr, ip, r3, r0
 802b8b6:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 802b8ba:	f2c0 8088 	blt.w	802b9ce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b8be:	4581      	cmp	r9, r0
 802b8c0:	f340 8085 	ble.w	802b9ce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b8c4:	f1bc 0f00 	cmp.w	ip, #0
 802b8c8:	f2c0 8081 	blt.w	802b9ce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b8cc:	45e0      	cmp	r8, ip
 802b8ce:	dd7e      	ble.n	802b9ce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802b8d0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802b8d4:	f01e 0f01 	tst.w	lr, #1
 802b8d8:	5d15      	ldrb	r5, [r2, r4]
 802b8da:	bf0c      	ite	eq
 802b8dc:	f005 050f 	andeq.w	r5, r5, #15
 802b8e0:	112d      	asrne	r5, r5, #4
 802b8e2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b8e6:	b2ed      	uxtb	r5, r5
 802b8e8:	f110 0a01 	adds.w	sl, r0, #1
 802b8ec:	d471      	bmi.n	802b9d2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b8ee:	45d1      	cmp	r9, sl
 802b8f0:	dd6f      	ble.n	802b9d2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b8f2:	f1bc 0f00 	cmp.w	ip, #0
 802b8f6:	db6c      	blt.n	802b9d2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b8f8:	45e0      	cmp	r8, ip
 802b8fa:	dd6a      	ble.n	802b9d2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802b8fc:	2e00      	cmp	r6, #0
 802b8fe:	d06a      	beq.n	802b9d6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 802b900:	f10e 0b01 	add.w	fp, lr, #1
 802b904:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802b908:	f01b 0f01 	tst.w	fp, #1
 802b90c:	5d14      	ldrb	r4, [r2, r4]
 802b90e:	bf0c      	ite	eq
 802b910:	f004 040f 	andeq.w	r4, r4, #15
 802b914:	1124      	asrne	r4, r4, #4
 802b916:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b91a:	b2e4      	uxtb	r4, r4
 802b91c:	2f00      	cmp	r7, #0
 802b91e:	d05e      	beq.n	802b9de <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 802b920:	2800      	cmp	r0, #0
 802b922:	f10c 0c01 	add.w	ip, ip, #1
 802b926:	db58      	blt.n	802b9da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b928:	4581      	cmp	r9, r0
 802b92a:	dd56      	ble.n	802b9da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b92c:	f1bc 0f00 	cmp.w	ip, #0
 802b930:	db53      	blt.n	802b9da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b932:	45e0      	cmp	r8, ip
 802b934:	dd51      	ble.n	802b9da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802b936:	eb03 0b0e 	add.w	fp, r3, lr
 802b93a:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802b93e:	f01b 0f01 	tst.w	fp, #1
 802b942:	5c10      	ldrb	r0, [r2, r0]
 802b944:	bf0c      	ite	eq
 802b946:	f000 000f 	andeq.w	r0, r0, #15
 802b94a:	1100      	asrne	r0, r0, #4
 802b94c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b950:	b2c0      	uxtb	r0, r0
 802b952:	f1ba 0f00 	cmp.w	sl, #0
 802b956:	db45      	blt.n	802b9e4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b958:	45d1      	cmp	r9, sl
 802b95a:	dd43      	ble.n	802b9e4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b95c:	f1bc 0f00 	cmp.w	ip, #0
 802b960:	db40      	blt.n	802b9e4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b962:	45e0      	cmp	r8, ip
 802b964:	dd3e      	ble.n	802b9e4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802b966:	2e00      	cmp	r6, #0
 802b968:	d03e      	beq.n	802b9e8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 802b96a:	3301      	adds	r3, #1
 802b96c:	449e      	add	lr, r3
 802b96e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b972:	f01e 0f01 	tst.w	lr, #1
 802b976:	5cd3      	ldrb	r3, [r2, r3]
 802b978:	bf0c      	ite	eq
 802b97a:	f003 030f 	andeq.w	r3, r3, #15
 802b97e:	111b      	asrne	r3, r3, #4
 802b980:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b984:	b2db      	uxtb	r3, r3
 802b986:	b2b2      	uxth	r2, r6
 802b988:	b2bf      	uxth	r7, r7
 802b98a:	fb02 f607 	mul.w	r6, r2, r7
 802b98e:	0112      	lsls	r2, r2, #4
 802b990:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 802b994:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802b998:	1b92      	subs	r2, r2, r6
 802b99a:	b2bf      	uxth	r7, r7
 802b99c:	b292      	uxth	r2, r2
 802b99e:	ebac 0c07 	sub.w	ip, ip, r7
 802b9a2:	4362      	muls	r2, r4
 802b9a4:	fa1f fc8c 	uxth.w	ip, ip
 802b9a8:	fb05 220c 	mla	r2, r5, ip, r2
 802b9ac:	fb07 2000 	mla	r0, r7, r0, r2
 802b9b0:	4a22      	ldr	r2, [pc, #136]	@ (802ba3c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 802b9b2:	fb06 0303 	mla	r3, r6, r3, r0
 802b9b6:	7817      	ldrb	r7, [r2, #0]
 802b9b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b9bc:	2bff      	cmp	r3, #255	@ 0xff
 802b9be:	d115      	bne.n	802b9ec <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 802b9c0:	700f      	strb	r7, [r1, #0]
 802b9c2:	7853      	ldrb	r3, [r2, #1]
 802b9c4:	704b      	strb	r3, [r1, #1]
 802b9c6:	7893      	ldrb	r3, [r2, #2]
 802b9c8:	708b      	strb	r3, [r1, #2]
 802b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b9ce:	2500      	movs	r5, #0
 802b9d0:	e78a      	b.n	802b8e8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 802b9d2:	2400      	movs	r4, #0
 802b9d4:	e7a2      	b.n	802b91c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802b9d6:	4634      	mov	r4, r6
 802b9d8:	e7a0      	b.n	802b91c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802b9da:	2000      	movs	r0, #0
 802b9dc:	e7b9      	b.n	802b952 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 802b9de:	463b      	mov	r3, r7
 802b9e0:	4638      	mov	r0, r7
 802b9e2:	e7d0      	b.n	802b986 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802b9e4:	2300      	movs	r3, #0
 802b9e6:	e7ce      	b.n	802b986 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802b9e8:	4633      	mov	r3, r6
 802b9ea:	e7cc      	b.n	802b986 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802b9ec:	2b00      	cmp	r3, #0
 802b9ee:	d0ec      	beq.n	802b9ca <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 802b9f0:	78cc      	ldrb	r4, [r1, #3]
 802b9f2:	435f      	muls	r7, r3
 802b9f4:	7896      	ldrb	r6, [r2, #2]
 802b9f6:	f892 c001 	ldrb.w	ip, [r2, #1]
 802b9fa:	fb03 f204 	mul.w	r2, r3, r4
 802b9fe:	780d      	ldrb	r5, [r1, #0]
 802ba00:	1c50      	adds	r0, r2, #1
 802ba02:	fb03 fc0c 	mul.w	ip, r3, ip
 802ba06:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802ba0a:	191a      	adds	r2, r3, r4
 802ba0c:	4373      	muls	r3, r6
 802ba0e:	1200      	asrs	r0, r0, #8
 802ba10:	1a12      	subs	r2, r2, r0
 802ba12:	1a20      	subs	r0, r4, r0
 802ba14:	784c      	ldrb	r4, [r1, #1]
 802ba16:	b2d2      	uxtb	r2, r2
 802ba18:	fb00 7505 	mla	r5, r0, r5, r7
 802ba1c:	fb00 c404 	mla	r4, r0, r4, ip
 802ba20:	70ca      	strb	r2, [r1, #3]
 802ba22:	fb94 f4f2 	sdiv	r4, r4, r2
 802ba26:	704c      	strb	r4, [r1, #1]
 802ba28:	788c      	ldrb	r4, [r1, #2]
 802ba2a:	fb00 3304 	mla	r3, r0, r4, r3
 802ba2e:	fb95 f5f2 	sdiv	r5, r5, r2
 802ba32:	fb93 f3f2 	sdiv	r3, r3, r2
 802ba36:	700d      	strb	r5, [r1, #0]
 802ba38:	708b      	strb	r3, [r1, #2]
 802ba3a:	e7c6      	b.n	802b9ca <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 802ba3c:	200122d4 	.word	0x200122d4

0802ba40 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ba44:	b095      	sub	sp, #84	@ 0x54
 802ba46:	461c      	mov	r4, r3
 802ba48:	4fc4      	ldr	r7, [pc, #784]	@ (802bd5c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 802ba4a:	920d      	str	r2, [sp, #52]	@ 0x34
 802ba4c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ba4e:	9013      	str	r0, [sp, #76]	@ 0x4c
 802ba50:	9108      	str	r1, [sp, #32]
 802ba52:	6850      	ldr	r0, [r2, #4]
 802ba54:	6812      	ldr	r2, [r2, #0]
 802ba56:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 802ba5a:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	@ 0x7c
 802ba5e:	fb00 1303 	mla	r3, r0, r3, r1
 802ba62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802ba66:	9307      	str	r3, [sp, #28]
 802ba68:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ba6a:	689b      	ldr	r3, [r3, #8]
 802ba6c:	3301      	adds	r3, #1
 802ba6e:	f023 0301 	bic.w	r3, r3, #1
 802ba72:	930a      	str	r3, [sp, #40]	@ 0x28
 802ba74:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ba76:	681e      	ldr	r6, [r3, #0]
 802ba78:	9b08      	ldr	r3, [sp, #32]
 802ba7a:	2b00      	cmp	r3, #0
 802ba7c:	dc03      	bgt.n	802ba86 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802ba7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ba80:	2b00      	cmp	r3, #0
 802ba82:	f340 824e 	ble.w	802bf22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802ba86:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ba88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802ba8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802ba90:	1e48      	subs	r0, r1, #1
 802ba92:	f102 3cff 	add.w	ip, r2, #4294967295
 802ba96:	2c00      	cmp	r4, #0
 802ba98:	f340 80b3 	ble.w	802bc02 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802ba9c:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 802baa0:	ea4f 4325 	mov.w	r3, r5, asr #16
 802baa4:	d406      	bmi.n	802bab4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802baa6:	4586      	cmp	lr, r0
 802baa8:	da04      	bge.n	802bab4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802baaa:	2b00      	cmp	r3, #0
 802baac:	db02      	blt.n	802bab4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802baae:	4563      	cmp	r3, ip
 802bab0:	f2c0 80a8 	blt.w	802bc04 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802bab4:	f11e 0e01 	adds.w	lr, lr, #1
 802bab8:	f100 809a 	bmi.w	802bbf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802babc:	4571      	cmp	r1, lr
 802babe:	f2c0 8097 	blt.w	802bbf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bac2:	3301      	adds	r3, #1
 802bac4:	f100 8094 	bmi.w	802bbf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bac8:	429a      	cmp	r2, r3
 802baca:	f2c0 8091 	blt.w	802bbf0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bace:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802bad2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 802bad6:	9409      	str	r4, [sp, #36]	@ 0x24
 802bad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bada:	2b00      	cmp	r3, #0
 802badc:	f340 80b0 	ble.w	802bc40 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802bae0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802bae2:	1428      	asrs	r0, r5, #16
 802bae4:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802bae8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802baec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802baf0:	ea5f 432b 	movs.w	r3, fp, asr #16
 802baf4:	f100 8134 	bmi.w	802bd60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802baf8:	f10c 3aff 	add.w	sl, ip, #4294967295
 802bafc:	4553      	cmp	r3, sl
 802bafe:	f280 812f 	bge.w	802bd60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802bb02:	2800      	cmp	r0, #0
 802bb04:	f2c0 812c 	blt.w	802bd60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802bb08:	f10e 3aff 	add.w	sl, lr, #4294967295
 802bb0c:	4550      	cmp	r0, sl
 802bb0e:	f280 8127 	bge.w	802bd60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802bb12:	fb00 3309 	mla	r3, r0, r9, r3
 802bb16:	0858      	lsrs	r0, r3, #1
 802bb18:	f816 c000 	ldrb.w	ip, [r6, r0]
 802bb1c:	07d8      	lsls	r0, r3, #31
 802bb1e:	bf54      	ite	pl
 802bb20:	f00c 0c0f 	andpl.w	ip, ip, #15
 802bb24:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802bb28:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802bb2c:	fa5f fc8c 	uxtb.w	ip, ip
 802bb30:	2a00      	cmp	r2, #0
 802bb32:	f000 80cb 	beq.w	802bccc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802bb36:	1c58      	adds	r0, r3, #1
 802bb38:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802bb3c:	07c0      	lsls	r0, r0, #31
 802bb3e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802bb42:	bf54      	ite	pl
 802bb44:	f00e 0e0f 	andpl.w	lr, lr, #15
 802bb48:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802bb4c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802bb50:	fa5f fe8e 	uxtb.w	lr, lr
 802bb54:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 802bb58:	b1c1      	cbz	r1, 802bb8c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bb5a:	444b      	add	r3, r9
 802bb5c:	0858      	lsrs	r0, r3, #1
 802bb5e:	f013 0f01 	tst.w	r3, #1
 802bb62:	5c30      	ldrb	r0, [r6, r0]
 802bb64:	bf0c      	ite	eq
 802bb66:	f000 000f 	andeq.w	r0, r0, #15
 802bb6a:	1100      	asrne	r0, r0, #4
 802bb6c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bb70:	b2c0      	uxtb	r0, r0
 802bb72:	900b      	str	r0, [sp, #44]	@ 0x2c
 802bb74:	1c58      	adds	r0, r3, #1
 802bb76:	0843      	lsrs	r3, r0, #1
 802bb78:	07c0      	lsls	r0, r0, #31
 802bb7a:	5cf3      	ldrb	r3, [r6, r3]
 802bb7c:	bf54      	ite	pl
 802bb7e:	f003 030f 	andpl.w	r3, r3, #15
 802bb82:	111b      	asrmi	r3, r3, #4
 802bb84:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802bb88:	b2db      	uxtb	r3, r3
 802bb8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bb8c:	b292      	uxth	r2, r2
 802bb8e:	b289      	uxth	r1, r1
 802bb90:	fb02 f301 	mul.w	r3, r2, r1
 802bb94:	0112      	lsls	r2, r2, #4
 802bb96:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802bb9a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802bb9e:	1ad2      	subs	r2, r2, r3
 802bba0:	b289      	uxth	r1, r1
 802bba2:	b292      	uxth	r2, r2
 802bba4:	1a40      	subs	r0, r0, r1
 802bba6:	fa1f fe80 	uxth.w	lr, r0
 802bbaa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802bbac:	4342      	muls	r2, r0
 802bbae:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802bbb2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802bbb4:	fb01 c102 	mla	r1, r1, r2, ip
 802bbb8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802bbba:	f897 c000 	ldrb.w	ip, [r7]
 802bbbe:	fb03 1302 	mla	r3, r3, r2, r1
 802bbc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bbc6:	2bff      	cmp	r3, #255	@ 0xff
 802bbc8:	f040 8091 	bne.w	802bcee <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802bbcc:	f888 c000 	strb.w	ip, [r8]
 802bbd0:	787b      	ldrb	r3, [r7, #1]
 802bbd2:	f888 3001 	strb.w	r3, [r8, #1]
 802bbd6:	78bb      	ldrb	r3, [r7, #2]
 802bbd8:	f888 3002 	strb.w	r3, [r8, #2]
 802bbdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bbde:	f108 0804 	add.w	r8, r8, #4
 802bbe2:	449b      	add	fp, r3
 802bbe4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802bbe6:	441d      	add	r5, r3
 802bbe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bbea:	3b01      	subs	r3, #1
 802bbec:	9309      	str	r3, [sp, #36]	@ 0x24
 802bbee:	e773      	b.n	802bad8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802bbf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bbf2:	3c01      	subs	r4, #1
 802bbf4:	449b      	add	fp, r3
 802bbf6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802bbf8:	441d      	add	r5, r3
 802bbfa:	9b07      	ldr	r3, [sp, #28]
 802bbfc:	3304      	adds	r3, #4
 802bbfe:	9307      	str	r3, [sp, #28]
 802bc00:	e749      	b.n	802ba96 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802bc02:	d023      	beq.n	802bc4c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802bc04:	1e63      	subs	r3, r4, #1
 802bc06:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802bc08:	fb00 b003 	mla	r0, r0, r3, fp
 802bc0c:	1400      	asrs	r0, r0, #16
 802bc0e:	f53f af5e 	bmi.w	802bace <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bc12:	3901      	subs	r1, #1
 802bc14:	4288      	cmp	r0, r1
 802bc16:	f6bf af5a 	bge.w	802bace <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bc1a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 802bc1c:	fb01 5303 	mla	r3, r1, r3, r5
 802bc20:	141b      	asrs	r3, r3, #16
 802bc22:	f53f af54 	bmi.w	802bace <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bc26:	3a01      	subs	r2, #1
 802bc28:	4293      	cmp	r3, r2
 802bc2a:	f6bf af50 	bge.w	802bace <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bc2e:	9b07      	ldr	r3, [sp, #28]
 802bc30:	46a0      	mov	r8, r4
 802bc32:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 802bc36:	1d1a      	adds	r2, r3, #4
 802bc38:	f1b8 0f00 	cmp.w	r8, #0
 802bc3c:	f300 80af 	bgt.w	802bd9e <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802bc40:	9b07      	ldr	r3, [sp, #28]
 802bc42:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802bc46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802bc4a:	9307      	str	r3, [sp, #28]
 802bc4c:	9b08      	ldr	r3, [sp, #32]
 802bc4e:	2b00      	cmp	r3, #0
 802bc50:	f340 8167 	ble.w	802bf22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802bc54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802bc58:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bc5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802bc5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802bc62:	eef0 6a62 	vmov.f32	s13, s5
 802bc66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802bc6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802bc6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bc72:	ee16 ba90 	vmov	fp, s13
 802bc76:	eef0 6a43 	vmov.f32	s13, s6
 802bc7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bc7e:	ee16 5a90 	vmov	r5, s13
 802bc82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802bc86:	ee61 7a27 	vmul.f32	s15, s2, s15
 802bc8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802bc8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802bc92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802bc96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802bc9a:	ee12 2a90 	vmov	r2, s5
 802bc9e:	eef0 2a47 	vmov.f32	s5, s14
 802bca2:	fb92 f3f3 	sdiv	r3, r2, r3
 802bca6:	ee13 2a10 	vmov	r2, s6
 802bcaa:	9321      	str	r3, [sp, #132]	@ 0x84
 802bcac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bcae:	eeb0 3a67 	vmov.f32	s6, s15
 802bcb2:	fb92 f3f3 	sdiv	r3, r2, r3
 802bcb6:	9322      	str	r3, [sp, #136]	@ 0x88
 802bcb8:	9b08      	ldr	r3, [sp, #32]
 802bcba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802bcbc:	3b01      	subs	r3, #1
 802bcbe:	9308      	str	r3, [sp, #32]
 802bcc0:	bf08      	it	eq
 802bcc2:	4614      	moveq	r4, r2
 802bcc4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bcc6:	bf18      	it	ne
 802bcc8:	461c      	movne	r4, r3
 802bcca:	e6d5      	b.n	802ba78 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802bccc:	2900      	cmp	r1, #0
 802bcce:	f43f af5d 	beq.w	802bb8c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bcd2:	eb09 0003 	add.w	r0, r9, r3
 802bcd6:	0843      	lsrs	r3, r0, #1
 802bcd8:	07c0      	lsls	r0, r0, #31
 802bcda:	5cf3      	ldrb	r3, [r6, r3]
 802bcdc:	bf54      	ite	pl
 802bcde:	f003 030f 	andpl.w	r3, r3, #15
 802bce2:	111b      	asrmi	r3, r3, #4
 802bce4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802bce8:	b2db      	uxtb	r3, r3
 802bcea:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bcec:	e74e      	b.n	802bb8c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bcee:	2b00      	cmp	r3, #0
 802bcf0:	f43f af74 	beq.w	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bcf4:	f898 a003 	ldrb.w	sl, [r8, #3]
 802bcf8:	fb03 fc0c 	mul.w	ip, r3, ip
 802bcfc:	78ba      	ldrb	r2, [r7, #2]
 802bcfe:	fb03 f00a 	mul.w	r0, r3, sl
 802bd02:	f897 e001 	ldrb.w	lr, [r7, #1]
 802bd06:	9210      	str	r2, [sp, #64]	@ 0x40
 802bd08:	eb03 020a 	add.w	r2, r3, sl
 802bd0c:	1c41      	adds	r1, r0, #1
 802bd0e:	fb03 fe0e 	mul.w	lr, r3, lr
 802bd12:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802bd16:	1208      	asrs	r0, r1, #8
 802bd18:	ebaa 0100 	sub.w	r1, sl, r0
 802bd1c:	1a12      	subs	r2, r2, r0
 802bd1e:	f898 0000 	ldrb.w	r0, [r8]
 802bd22:	b2d2      	uxtb	r2, r2
 802bd24:	fb01 cc00 	mla	ip, r1, r0, ip
 802bd28:	f898 0001 	ldrb.w	r0, [r8, #1]
 802bd2c:	f888 2003 	strb.w	r2, [r8, #3]
 802bd30:	fb01 ee00 	mla	lr, r1, r0, lr
 802bd34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802bd36:	fb9c fcf2 	sdiv	ip, ip, r2
 802bd3a:	4343      	muls	r3, r0
 802bd3c:	f888 c000 	strb.w	ip, [r8]
 802bd40:	f898 c002 	ldrb.w	ip, [r8, #2]
 802bd44:	fb01 330c 	mla	r3, r1, ip, r3
 802bd48:	fb9e fef2 	sdiv	lr, lr, r2
 802bd4c:	fb93 f3f2 	sdiv	r3, r3, r2
 802bd50:	f888 e001 	strb.w	lr, [r8, #1]
 802bd54:	f888 3002 	strb.w	r3, [r8, #2]
 802bd58:	e740      	b.n	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bd5a:	bf00      	nop
 802bd5c:	200122d4 	.word	0x200122d4
 802bd60:	f113 0a01 	adds.w	sl, r3, #1
 802bd64:	f53f af3a 	bmi.w	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bd68:	45d4      	cmp	ip, sl
 802bd6a:	f6ff af37 	blt.w	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bd6e:	f110 0a01 	adds.w	sl, r0, #1
 802bd72:	f53f af33 	bmi.w	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bd76:	45d6      	cmp	lr, sl
 802bd78:	f6ff af30 	blt.w	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bd7c:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802bd80:	fa0f f38e 	sxth.w	r3, lr
 802bd84:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802bd86:	9301      	str	r3, [sp, #4]
 802bd88:	fa0f f38c 	sxth.w	r3, ip
 802bd8c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802bd90:	9300      	str	r3, [sp, #0]
 802bd92:	4632      	mov	r2, r6
 802bd94:	464b      	mov	r3, r9
 802bd96:	4641      	mov	r1, r8
 802bd98:	f7ff fd80 	bl	802b89c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 802bd9c:	e71e      	b.n	802bbdc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bd9e:	ea4f 412b 	mov.w	r1, fp, asr #16
 802bda2:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 802bda6:	142b      	asrs	r3, r5, #16
 802bda8:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 802bdac:	fb09 1303 	mla	r3, r9, r3, r1
 802bdb0:	0859      	lsrs	r1, r3, #1
 802bdb2:	07d8      	lsls	r0, r3, #31
 802bdb4:	5c71      	ldrb	r1, [r6, r1]
 802bdb6:	bf54      	ite	pl
 802bdb8:	f001 010f 	andpl.w	r1, r1, #15
 802bdbc:	1109      	asrmi	r1, r1, #4
 802bdbe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802bdc2:	b2c9      	uxtb	r1, r1
 802bdc4:	f1bc 0f00 	cmp.w	ip, #0
 802bdc8:	d062      	beq.n	802be90 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802bdca:	f103 0a01 	add.w	sl, r3, #1
 802bdce:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802bdd2:	f01a 0f01 	tst.w	sl, #1
 802bdd6:	5c30      	ldrb	r0, [r6, r0]
 802bdd8:	bf0c      	ite	eq
 802bdda:	f000 000f 	andeq.w	r0, r0, #15
 802bdde:	1100      	asrne	r0, r0, #4
 802bde0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bde4:	b2c0      	uxtb	r0, r0
 802bde6:	9011      	str	r0, [sp, #68]	@ 0x44
 802bde8:	f1be 0f00 	cmp.w	lr, #0
 802bdec:	d019      	beq.n	802be22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802bdee:	444b      	add	r3, r9
 802bdf0:	0858      	lsrs	r0, r3, #1
 802bdf2:	f013 0f01 	tst.w	r3, #1
 802bdf6:	f103 0301 	add.w	r3, r3, #1
 802bdfa:	5c30      	ldrb	r0, [r6, r0]
 802bdfc:	bf0c      	ite	eq
 802bdfe:	f000 000f 	andeq.w	r0, r0, #15
 802be02:	1100      	asrne	r0, r0, #4
 802be04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802be08:	b2c0      	uxtb	r0, r0
 802be0a:	900c      	str	r0, [sp, #48]	@ 0x30
 802be0c:	0858      	lsrs	r0, r3, #1
 802be0e:	07db      	lsls	r3, r3, #31
 802be10:	5c30      	ldrb	r0, [r6, r0]
 802be12:	bf54      	ite	pl
 802be14:	f000 000f 	andpl.w	r0, r0, #15
 802be18:	1100      	asrmi	r0, r0, #4
 802be1a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802be1e:	b2c0      	uxtb	r0, r0
 802be20:	9012      	str	r0, [sp, #72]	@ 0x48
 802be22:	fa1f fc8c 	uxth.w	ip, ip
 802be26:	fa1f fe8e 	uxth.w	lr, lr
 802be2a:	fb0c f30e 	mul.w	r3, ip, lr
 802be2e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802be32:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 802be36:	f5cc 7080 	rsb	r0, ip, #256	@ 0x100
 802be3a:	ebac 0c03 	sub.w	ip, ip, r3
 802be3e:	fa1f fe8e 	uxth.w	lr, lr
 802be42:	fa1f fc8c 	uxth.w	ip, ip
 802be46:	eba0 000e 	sub.w	r0, r0, lr
 802be4a:	fa1f fa80 	uxth.w	sl, r0
 802be4e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802be50:	fb00 fc0c 	mul.w	ip, r0, ip
 802be54:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802be56:	fb01 c10a 	mla	r1, r1, sl, ip
 802be5a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802be5e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802be60:	fb03 e301 	mla	r3, r3, r1, lr
 802be64:	f897 e000 	ldrb.w	lr, [r7]
 802be68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802be6c:	2bff      	cmp	r3, #255	@ 0xff
 802be6e:	d11f      	bne.n	802beb0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802be70:	f802 ec04 	strb.w	lr, [r2, #-4]
 802be74:	787b      	ldrb	r3, [r7, #1]
 802be76:	f802 3c03 	strb.w	r3, [r2, #-3]
 802be7a:	78bb      	ldrb	r3, [r7, #2]
 802be7c:	f802 3c02 	strb.w	r3, [r2, #-2]
 802be80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802be82:	3204      	adds	r2, #4
 802be84:	f108 38ff 	add.w	r8, r8, #4294967295
 802be88:	449b      	add	fp, r3
 802be8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802be8c:	441d      	add	r5, r3
 802be8e:	e6d3      	b.n	802bc38 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802be90:	f1be 0f00 	cmp.w	lr, #0
 802be94:	d0c5      	beq.n	802be22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802be96:	444b      	add	r3, r9
 802be98:	0858      	lsrs	r0, r3, #1
 802be9a:	07db      	lsls	r3, r3, #31
 802be9c:	5c30      	ldrb	r0, [r6, r0]
 802be9e:	bf54      	ite	pl
 802bea0:	f000 000f 	andpl.w	r0, r0, #15
 802bea4:	1100      	asrmi	r0, r0, #4
 802bea6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802beaa:	b2c0      	uxtb	r0, r0
 802beac:	900c      	str	r0, [sp, #48]	@ 0x30
 802beae:	e7b8      	b.n	802be22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802beb0:	2b00      	cmp	r3, #0
 802beb2:	d0e5      	beq.n	802be80 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802beb4:	78b9      	ldrb	r1, [r7, #2]
 802beb6:	fb03 fe0e 	mul.w	lr, r3, lr
 802beba:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 802bebe:	9110      	str	r1, [sp, #64]	@ 0x40
 802bec0:	fb03 f100 	mul.w	r1, r3, r0
 802bec4:	f897 a001 	ldrb.w	sl, [r7, #1]
 802bec8:	f101 0c01 	add.w	ip, r1, #1
 802becc:	fb03 fa0a 	mul.w	sl, r3, sl
 802bed0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802bed4:	1819      	adds	r1, r3, r0
 802bed6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802beda:	eba0 000c 	sub.w	r0, r0, ip
 802bede:	eba1 010c 	sub.w	r1, r1, ip
 802bee2:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 802bee6:	9009      	str	r0, [sp, #36]	@ 0x24
 802bee8:	b2c9      	uxtb	r1, r1
 802beea:	fb00 ee0c 	mla	lr, r0, ip, lr
 802beee:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 802bef2:	f802 1c01 	strb.w	r1, [r2, #-1]
 802bef6:	fb00 aa0c 	mla	sl, r0, ip, sl
 802befa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802befc:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 802bf00:	4343      	muls	r3, r0
 802bf02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bf04:	fb00 330c 	mla	r3, r0, ip, r3
 802bf08:	fb9e fef1 	sdiv	lr, lr, r1
 802bf0c:	fb9a faf1 	sdiv	sl, sl, r1
 802bf10:	fb93 f3f1 	sdiv	r3, r3, r1
 802bf14:	f802 ec04 	strb.w	lr, [r2, #-4]
 802bf18:	f802 ac03 	strb.w	sl, [r2, #-3]
 802bf1c:	f802 3c02 	strb.w	r3, [r2, #-2]
 802bf20:	e7ae      	b.n	802be80 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802bf22:	b015      	add	sp, #84	@ 0x54
 802bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802bf28 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>:
 802bf28:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bf2a:	6810      	ldr	r0, [r2, #0]
 802bf2c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 802bf30:	10cc      	asrs	r4, r1, #3
 802bf32:	120d      	asrs	r5, r1, #8
 802bf34:	fa5f fc8c 	uxtb.w	ip, ip
 802bf38:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802bf3c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802bf40:	0e07      	lsrs	r7, r0, #24
 802bf42:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802bf46:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802bf4a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802bf4e:	d108      	bne.n	802bf62 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh+0x3a>
 802bf50:	0224      	lsls	r4, r4, #8
 802bf52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 802bf56:	ea45 0c0c 	orr.w	ip, r5, ip
 802bf5a:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 802bf5e:	6013      	str	r3, [r2, #0]
 802bf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bf62:	fb13 f505 	smulbb	r5, r3, r5
 802bf66:	fb03 f607 	mul.w	r6, r3, r7
 802bf6a:	fb1c fc03 	smulbb	ip, ip, r3
 802bf6e:	1c71      	adds	r1, r6, #1
 802bf70:	eb01 2126 	add.w	r1, r1, r6, asr #8
 802bf74:	19de      	adds	r6, r3, r7
 802bf76:	fb13 f304 	smulbb	r3, r3, r4
 802bf7a:	1209      	asrs	r1, r1, #8
 802bf7c:	1a7f      	subs	r7, r7, r1
 802bf7e:	1a76      	subs	r6, r6, r1
 802bf80:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802bf84:	b2f6      	uxtb	r6, r6
 802bf86:	fb07 5101 	mla	r1, r7, r1, r5
 802bf8a:	b2c5      	uxtb	r5, r0
 802bf8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802bf90:	fb07 c505 	mla	r5, r7, r5, ip
 802bf94:	fb07 3300 	mla	r3, r7, r0, r3
 802bf98:	fbb1 f1f6 	udiv	r1, r1, r6
 802bf9c:	fbb5 f5f6 	udiv	r5, r5, r6
 802bfa0:	fbb3 f3f6 	udiv	r3, r3, r6
 802bfa4:	0409      	lsls	r1, r1, #16
 802bfa6:	b2ed      	uxtb	r5, r5
 802bfa8:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 802bfac:	021b      	lsls	r3, r3, #8
 802bfae:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 802bfb2:	b29b      	uxth	r3, r3
 802bfb4:	4329      	orrs	r1, r5
 802bfb6:	430b      	orrs	r3, r1
 802bfb8:	e7d1      	b.n	802bf5e <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh+0x36>
	...

0802bfbc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bfc0:	461c      	mov	r4, r3
 802bfc2:	b08b      	sub	sp, #44	@ 0x2c
 802bfc4:	460d      	mov	r5, r1
 802bfc6:	4616      	mov	r6, r2
 802bfc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802bfca:	4682      	mov	sl, r0
 802bfcc:	6861      	ldr	r1, [r4, #4]
 802bfce:	aa06      	add	r2, sp, #24
 802bfd0:	6820      	ldr	r0, [r4, #0]
 802bfd2:	2702      	movs	r7, #2
 802bfd4:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802bfd8:	3604      	adds	r6, #4
 802bfda:	c203      	stmia	r2!, {r0, r1}
 802bfdc:	6818      	ldr	r0, [r3, #0]
 802bfde:	aa08      	add	r2, sp, #32
 802bfe0:	6859      	ldr	r1, [r3, #4]
 802bfe2:	c203      	stmia	r2!, {r0, r1}
 802bfe4:	a806      	add	r0, sp, #24
 802bfe6:	f7ee ff03 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bfea:	4621      	mov	r1, r4
 802bfec:	a808      	add	r0, sp, #32
 802bfee:	f7ee ff27 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bff2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802bff6:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802bffa:	f002 0301 	and.w	r3, r2, #1
 802bffe:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802c002:	9302      	str	r3, [sp, #8]
 802c004:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c008:	f003 0101 	and.w	r1, r3, #1
 802c00c:	9101      	str	r1, [sp, #4]
 802c00e:	9801      	ldr	r0, [sp, #4]
 802c010:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802c014:	4403      	add	r3, r0
 802c016:	fb01 2303 	mla	r3, r1, r3, r2
 802c01a:	fb93 f3f7 	sdiv	r3, r3, r7
 802c01e:	441d      	add	r5, r3
 802c020:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802c024:	441a      	add	r2, r3
 802c026:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802c02a:	4419      	add	r1, r3
 802c02c:	4b84      	ldr	r3, [pc, #528]	@ (802c240 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x284>)
 802c02e:	f8ad 2020 	strh.w	r2, [sp, #32]
 802c032:	6818      	ldr	r0, [r3, #0]
 802c034:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802c038:	6803      	ldr	r3, [r0, #0]
 802c03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802c03c:	4798      	blx	r3
 802c03e:	4b81      	ldr	r3, [pc, #516]	@ (802c244 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>)
 802c040:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802c044:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802c048:	881a      	ldrh	r2, [r3, #0]
 802c04a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802c04e:	fb0b fb02 	mul.w	fp, fp, r2
 802c052:	fb02 1404 	mla	r4, r2, r4, r1
 802c056:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c05a:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 802c05e:	9203      	str	r2, [sp, #12]
 802c060:	461a      	mov	r2, r3
 802c062:	d033      	beq.n	802c0cc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x110>
 802c064:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802c068:	9b03      	ldr	r3, [sp, #12]
 802c06a:	429c      	cmp	r4, r3
 802c06c:	f080 80df 	bcs.w	802c22e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 802c070:	9b02      	ldr	r3, [sp, #8]
 802c072:	2b00      	cmp	r3, #0
 802c074:	f000 80be 	beq.w	802c1f4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x238>
 802c078:	7829      	ldrb	r1, [r5, #0]
 802c07a:	4622      	mov	r2, r4
 802c07c:	1c6f      	adds	r7, r5, #1
 802c07e:	3404      	adds	r4, #4
 802c080:	f001 010f 	and.w	r1, r1, #15
 802c084:	f108 3bff 	add.w	fp, r8, #4294967295
 802c088:	464b      	mov	r3, r9
 802c08a:	4650      	mov	r0, sl
 802c08c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802c090:	f7ff ff4a 	bl	802bf28 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802c094:	f1bb 0f01 	cmp.w	fp, #1
 802c098:	f340 80af 	ble.w	802c1fa <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23e>
 802c09c:	7839      	ldrb	r1, [r7, #0]
 802c09e:	4622      	mov	r2, r4
 802c0a0:	464b      	mov	r3, r9
 802c0a2:	4650      	mov	r0, sl
 802c0a4:	0909      	lsrs	r1, r1, #4
 802c0a6:	f1ab 0b02 	sub.w	fp, fp, #2
 802c0aa:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802c0ae:	f7ff ff3b 	bl	802bf28 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802c0b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 802c0b6:	1d22      	adds	r2, r4, #4
 802c0b8:	464b      	mov	r3, r9
 802c0ba:	f001 010f 	and.w	r1, r1, #15
 802c0be:	4650      	mov	r0, sl
 802c0c0:	3408      	adds	r4, #8
 802c0c2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802c0c6:	f7ff ff2f 	bl	802bf28 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802c0ca:	e7e3      	b.n	802c094 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xd8>
 802c0cc:	4639      	mov	r1, r7
 802c0ce:	9b03      	ldr	r3, [sp, #12]
 802c0d0:	429c      	cmp	r4, r3
 802c0d2:	f080 80ac 	bcs.w	802c22e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 802c0d6:	9b02      	ldr	r3, [sp, #8]
 802c0d8:	2b00      	cmp	r3, #0
 802c0da:	d05f      	beq.n	802c19c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802c0dc:	782b      	ldrb	r3, [r5, #0]
 802c0de:	1c6f      	adds	r7, r5, #1
 802c0e0:	f003 030f 	and.w	r3, r3, #15
 802c0e4:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802c0e8:	10c3      	asrs	r3, r0, #3
 802c0ea:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802c0ee:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c0f2:	00c0      	lsls	r0, r0, #3
 802c0f4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802c0f8:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c0fc:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802c100:	b2c0      	uxtb	r0, r0
 802c102:	021b      	lsls	r3, r3, #8
 802c104:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802c108:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 802c10c:	f108 3cff 	add.w	ip, r8, #4294967295
 802c110:	4303      	orrs	r3, r0
 802c112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c116:	f844 3b04 	str.w	r3, [r4], #4
 802c11a:	f1bc 0f01 	cmp.w	ip, #1
 802c11e:	4620      	mov	r0, r4
 802c120:	f104 0408 	add.w	r4, r4, #8
 802c124:	dd3d      	ble.n	802c1a2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e6>
 802c126:	783b      	ldrb	r3, [r7, #0]
 802c128:	f1ac 0c02 	sub.w	ip, ip, #2
 802c12c:	091b      	lsrs	r3, r3, #4
 802c12e:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802c132:	10c3      	asrs	r3, r0, #3
 802c134:	ea4f 2e20 	mov.w	lr, r0, asr #8
 802c138:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c13c:	00c0      	lsls	r0, r0, #3
 802c13e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802c142:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c146:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802c14a:	b2c0      	uxtb	r0, r0
 802c14c:	021b      	lsls	r3, r3, #8
 802c14e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802c152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802c156:	4303      	orrs	r3, r0
 802c158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c15c:	f844 3c08 	str.w	r3, [r4, #-8]
 802c160:	f817 3b01 	ldrb.w	r3, [r7], #1
 802c164:	f003 030f 	and.w	r3, r3, #15
 802c168:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802c16c:	10c3      	asrs	r3, r0, #3
 802c16e:	ea4f 2e20 	mov.w	lr, r0, asr #8
 802c172:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c176:	00c0      	lsls	r0, r0, #3
 802c178:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802c17c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c180:	b2c0      	uxtb	r0, r0
 802c182:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802c186:	021b      	lsls	r3, r3, #8
 802c188:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802c18c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802c190:	4303      	orrs	r3, r0
 802c192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c196:	f844 3c04 	str.w	r3, [r4, #-4]
 802c19a:	e7be      	b.n	802c11a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x15e>
 802c19c:	462f      	mov	r7, r5
 802c19e:	46c4      	mov	ip, r8
 802c1a0:	e7bb      	b.n	802c11a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x15e>
 802c1a2:	d11a      	bne.n	802c1da <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x21e>
 802c1a4:	783b      	ldrb	r3, [r7, #0]
 802c1a6:	3004      	adds	r0, #4
 802c1a8:	091b      	lsrs	r3, r3, #4
 802c1aa:	f836 4013 	ldrh.w	r4, [r6, r3, lsl #1]
 802c1ae:	10e3      	asrs	r3, r4, #3
 802c1b0:	1227      	asrs	r7, r4, #8
 802c1b2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802c1b6:	00e4      	lsls	r4, r4, #3
 802c1b8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802c1bc:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802c1c0:	b2e4      	uxtb	r4, r4
 802c1c2:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 802c1c6:	021b      	lsls	r3, r3, #8
 802c1c8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802c1cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c1d0:	4323      	orrs	r3, r4
 802c1d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c1d6:	f840 3c04 	str.w	r3, [r0, #-4]
 802c1da:	8814      	ldrh	r4, [r2, #0]
 802c1dc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c1e0:	eba4 0408 	sub.w	r4, r4, r8
 802c1e4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c1e8:	9801      	ldr	r0, [sp, #4]
 802c1ea:	4403      	add	r3, r0
 802c1ec:	fb93 f3f1 	sdiv	r3, r3, r1
 802c1f0:	441d      	add	r5, r3
 802c1f2:	e76c      	b.n	802c0ce <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x112>
 802c1f4:	462f      	mov	r7, r5
 802c1f6:	46c3      	mov	fp, r8
 802c1f8:	e74c      	b.n	802c094 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xd8>
 802c1fa:	d109      	bne.n	802c210 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 802c1fc:	7839      	ldrb	r1, [r7, #0]
 802c1fe:	4622      	mov	r2, r4
 802c200:	3404      	adds	r4, #4
 802c202:	464b      	mov	r3, r9
 802c204:	0909      	lsrs	r1, r1, #4
 802c206:	4650      	mov	r0, sl
 802c208:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802c20c:	f7ff fe8c 	bl	802bf28 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802c210:	9b04      	ldr	r3, [sp, #16]
 802c212:	9a01      	ldr	r2, [sp, #4]
 802c214:	881b      	ldrh	r3, [r3, #0]
 802c216:	eba3 0308 	sub.w	r3, r3, r8
 802c21a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802c21e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c222:	4413      	add	r3, r2
 802c224:	9a05      	ldr	r2, [sp, #20]
 802c226:	fb93 f3f2 	sdiv	r3, r3, r2
 802c22a:	441d      	add	r5, r3
 802c22c:	e71c      	b.n	802c068 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xac>
 802c22e:	4b04      	ldr	r3, [pc, #16]	@ (802c240 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x284>)
 802c230:	6818      	ldr	r0, [r3, #0]
 802c232:	6803      	ldr	r3, [r0, #0]
 802c234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c236:	4798      	blx	r3
 802c238:	b00b      	add	sp, #44	@ 0x2c
 802c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c23e:	bf00      	nop
 802c240:	200122c4 	.word	0x200122c4
 802c244:	200122be 	.word	0x200122be

0802c248 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>:
 802c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c24a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802c24e:	436b      	muls	r3, r5
 802c250:	1c5d      	adds	r5, r3, #1
 802c252:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802c256:	121d      	asrs	r5, r3, #8
 802c258:	2dff      	cmp	r5, #255	@ 0xff
 802c25a:	d002      	beq.n	802c262 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x1a>
 802c25c:	6810      	ldr	r0, [r2, #0]
 802c25e:	0e03      	lsrs	r3, r0, #24
 802c260:	d10a      	bne.n	802c278 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x30>
 802c262:	784b      	ldrb	r3, [r1, #1]
 802c264:	7888      	ldrb	r0, [r1, #2]
 802c266:	021b      	lsls	r3, r3, #8
 802c268:	7809      	ldrb	r1, [r1, #0]
 802c26a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802c26e:	430b      	orrs	r3, r1
 802c270:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 802c274:	6015      	str	r5, [r2, #0]
 802c276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c278:	b2ee      	uxtb	r6, r5
 802c27a:	2d00      	cmp	r5, #0
 802c27c:	d0fb      	beq.n	802c276 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x2e>
 802c27e:	fb06 f703 	mul.w	r7, r6, r3
 802c282:	441e      	add	r6, r3
 802c284:	fa5f fc80 	uxtb.w	ip, r0
 802c288:	1c7c      	adds	r4, r7, #1
 802c28a:	eb04 2427 	add.w	r4, r4, r7, asr #8
 802c28e:	1224      	asrs	r4, r4, #8
 802c290:	1b1f      	subs	r7, r3, r4
 802c292:	788b      	ldrb	r3, [r1, #2]
 802c294:	1b36      	subs	r6, r6, r4
 802c296:	f3c0 4407 	ubfx	r4, r0, #16, #8
 802c29a:	436b      	muls	r3, r5
 802c29c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802c2a0:	fb07 fc0c 	mul.w	ip, r7, ip
 802c2a4:	b2f6      	uxtb	r6, r6
 802c2a6:	fb07 3404 	mla	r4, r7, r4, r3
 802c2aa:	780b      	ldrb	r3, [r1, #0]
 802c2ac:	fb05 c303 	mla	r3, r5, r3, ip
 802c2b0:	fbb4 f4f6 	udiv	r4, r4, r6
 802c2b4:	fbb3 f3f6 	udiv	r3, r3, r6
 802c2b8:	0424      	lsls	r4, r4, #16
 802c2ba:	b2db      	uxtb	r3, r3
 802c2bc:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 802c2c0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 802c2c4:	431c      	orrs	r4, r3
 802c2c6:	784b      	ldrb	r3, [r1, #1]
 802c2c8:	436b      	muls	r3, r5
 802c2ca:	fb07 3300 	mla	r3, r7, r0, r3
 802c2ce:	fbb3 f3f6 	udiv	r3, r3, r6
 802c2d2:	021b      	lsls	r3, r3, #8
 802c2d4:	b29b      	uxth	r3, r3
 802c2d6:	4323      	orrs	r3, r4
 802c2d8:	6013      	str	r3, [r2, #0]
 802c2da:	e7cc      	b.n	802c276 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x2e>

0802c2dc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c2e0:	461d      	mov	r5, r3
 802c2e2:	b08f      	sub	sp, #60	@ 0x3c
 802c2e4:	460c      	mov	r4, r1
 802c2e6:	4616      	mov	r6, r2
 802c2e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802c2ea:	4680      	mov	r8, r0
 802c2ec:	6869      	ldr	r1, [r5, #4]
 802c2ee:	aa0a      	add	r2, sp, #40	@ 0x28
 802c2f0:	6828      	ldr	r0, [r5, #0]
 802c2f2:	3604      	adds	r6, #4
 802c2f4:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 802c2f8:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 802c458 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 802c2fc:	c203      	stmia	r2!, {r0, r1}
 802c2fe:	6818      	ldr	r0, [r3, #0]
 802c300:	aa0c      	add	r2, sp, #48	@ 0x30
 802c302:	6859      	ldr	r1, [r3, #4]
 802c304:	c203      	stmia	r2!, {r0, r1}
 802c306:	a80a      	add	r0, sp, #40	@ 0x28
 802c308:	f7ee fd72 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c30c:	4629      	mov	r1, r5
 802c30e:	a80c      	add	r0, sp, #48	@ 0x30
 802c310:	2502      	movs	r5, #2
 802c312:	f7ee fd95 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c316:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802c31a:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 802c31e:	f002 0301 	and.w	r3, r2, #1
 802c322:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802c326:	9304      	str	r3, [sp, #16]
 802c328:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802c32c:	f003 0101 	and.w	r1, r3, #1
 802c330:	9103      	str	r1, [sp, #12]
 802c332:	9803      	ldr	r0, [sp, #12]
 802c334:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802c338:	4403      	add	r3, r0
 802c33a:	f8da 0000 	ldr.w	r0, [sl]
 802c33e:	fb01 2303 	mla	r3, r1, r3, r2
 802c342:	fb93 f3f5 	sdiv	r3, r3, r5
 802c346:	18e5      	adds	r5, r4, r3
 802c348:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802c34c:	441a      	add	r2, r3
 802c34e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802c352:	4419      	add	r1, r3
 802c354:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802c358:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802c35c:	6803      	ldr	r3, [r0, #0]
 802c35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802c360:	4798      	blx	r3
 802c362:	4b3c      	ldr	r3, [pc, #240]	@ (802c454 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>)
 802c364:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802c368:	881a      	ldrh	r2, [r3, #0]
 802c36a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802c36e:	4357      	muls	r7, r2
 802c370:	fb02 1404 	mla	r4, r2, r4, r1
 802c374:	9307      	str	r3, [sp, #28]
 802c376:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c37a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 802c37e:	e9cd 2a05 	strd	r2, sl, [sp, #20]
 802c382:	9b05      	ldr	r3, [sp, #20]
 802c384:	429c      	cmp	r4, r3
 802c386:	d25c      	bcs.n	802c442 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 802c388:	9b04      	ldr	r3, [sp, #16]
 802c38a:	2b00      	cmp	r3, #0
 802c38c:	d037      	beq.n	802c3fe <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802c38e:	782b      	ldrb	r3, [r5, #0]
 802c390:	1c6f      	adds	r7, r5, #1
 802c392:	f003 030f 	and.w	r3, r3, #15
 802c396:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c39a:	9309      	str	r3, [sp, #36]	@ 0x24
 802c39c:	0e1b      	lsrs	r3, r3, #24
 802c39e:	d006      	beq.n	802c3ae <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd2>
 802c3a0:	9300      	str	r3, [sp, #0]
 802c3a2:	4622      	mov	r2, r4
 802c3a4:	464b      	mov	r3, r9
 802c3a6:	a909      	add	r1, sp, #36	@ 0x24
 802c3a8:	4640      	mov	r0, r8
 802c3aa:	f7ff ff4d 	bl	802c248 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c3ae:	3404      	adds	r4, #4
 802c3b0:	f10b 3aff 	add.w	sl, fp, #4294967295
 802c3b4:	f1ba 0f01 	cmp.w	sl, #1
 802c3b8:	dd24      	ble.n	802c404 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 802c3ba:	783b      	ldrb	r3, [r7, #0]
 802c3bc:	091b      	lsrs	r3, r3, #4
 802c3be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c3c2:	9308      	str	r3, [sp, #32]
 802c3c4:	0e1b      	lsrs	r3, r3, #24
 802c3c6:	d006      	beq.n	802c3d6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfa>
 802c3c8:	9300      	str	r3, [sp, #0]
 802c3ca:	4622      	mov	r2, r4
 802c3cc:	464b      	mov	r3, r9
 802c3ce:	a908      	add	r1, sp, #32
 802c3d0:	4640      	mov	r0, r8
 802c3d2:	f7ff ff39 	bl	802c248 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c3d6:	f817 3b01 	ldrb.w	r3, [r7], #1
 802c3da:	f003 030f 	and.w	r3, r3, #15
 802c3de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 802c3e4:	0e1b      	lsrs	r3, r3, #24
 802c3e6:	d006      	beq.n	802c3f6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11a>
 802c3e8:	9300      	str	r3, [sp, #0]
 802c3ea:	1d22      	adds	r2, r4, #4
 802c3ec:	464b      	mov	r3, r9
 802c3ee:	a909      	add	r1, sp, #36	@ 0x24
 802c3f0:	4640      	mov	r0, r8
 802c3f2:	f7ff ff29 	bl	802c248 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c3f6:	3408      	adds	r4, #8
 802c3f8:	f1aa 0a02 	sub.w	sl, sl, #2
 802c3fc:	e7da      	b.n	802c3b4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd8>
 802c3fe:	462f      	mov	r7, r5
 802c400:	46da      	mov	sl, fp
 802c402:	e7d7      	b.n	802c3b4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd8>
 802c404:	d10e      	bne.n	802c424 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802c406:	783b      	ldrb	r3, [r7, #0]
 802c408:	091b      	lsrs	r3, r3, #4
 802c40a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c40e:	9309      	str	r3, [sp, #36]	@ 0x24
 802c410:	0e1b      	lsrs	r3, r3, #24
 802c412:	d006      	beq.n	802c422 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x146>
 802c414:	9300      	str	r3, [sp, #0]
 802c416:	4622      	mov	r2, r4
 802c418:	464b      	mov	r3, r9
 802c41a:	a909      	add	r1, sp, #36	@ 0x24
 802c41c:	4640      	mov	r0, r8
 802c41e:	f7ff ff13 	bl	802c248 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802c422:	3404      	adds	r4, #4
 802c424:	9b07      	ldr	r3, [sp, #28]
 802c426:	9a03      	ldr	r2, [sp, #12]
 802c428:	881b      	ldrh	r3, [r3, #0]
 802c42a:	eba3 030b 	sub.w	r3, r3, fp
 802c42e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802c432:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802c436:	4413      	add	r3, r2
 802c438:	2202      	movs	r2, #2
 802c43a:	fb93 f3f2 	sdiv	r3, r3, r2
 802c43e:	441d      	add	r5, r3
 802c440:	e79f      	b.n	802c382 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802c442:	9b06      	ldr	r3, [sp, #24]
 802c444:	6818      	ldr	r0, [r3, #0]
 802c446:	6803      	ldr	r3, [r0, #0]
 802c448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c44a:	4798      	blx	r3
 802c44c:	b00f      	add	sp, #60	@ 0x3c
 802c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c452:	bf00      	nop
 802c454:	200122be 	.word	0x200122be
 802c458:	200122c4 	.word	0x200122c4

0802c45c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>:
 802c45c:	6810      	ldr	r0, [r2, #0]
 802c45e:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c460:	0e06      	lsrs	r6, r0, #24
 802c462:	f891 c000 	ldrb.w	ip, [r1]
 802c466:	784f      	ldrb	r7, [r1, #1]
 802c468:	788c      	ldrb	r4, [r1, #2]
 802c46a:	d108      	bne.n	802c47e <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh+0x22>
 802c46c:	0424      	lsls	r4, r4, #16
 802c46e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 802c472:	ea43 030c 	orr.w	r3, r3, ip
 802c476:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
 802c47a:	6017      	str	r7, [r2, #0]
 802c47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c47e:	fb13 f404 	smulbb	r4, r3, r4
 802c482:	fb03 f506 	mul.w	r5, r3, r6
 802c486:	fb1c fc03 	smulbb	ip, ip, r3
 802c48a:	1c69      	adds	r1, r5, #1
 802c48c:	eb01 2125 	add.w	r1, r1, r5, asr #8
 802c490:	199d      	adds	r5, r3, r6
 802c492:	fb13 f307 	smulbb	r3, r3, r7
 802c496:	1209      	asrs	r1, r1, #8
 802c498:	1a76      	subs	r6, r6, r1
 802c49a:	1a6d      	subs	r5, r5, r1
 802c49c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802c4a0:	b2ed      	uxtb	r5, r5
 802c4a2:	fb06 4101 	mla	r1, r6, r1, r4
 802c4a6:	b2c4      	uxtb	r4, r0
 802c4a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802c4ac:	fb06 c404 	mla	r4, r6, r4, ip
 802c4b0:	fb06 3300 	mla	r3, r6, r0, r3
 802c4b4:	fbb1 f1f5 	udiv	r1, r1, r5
 802c4b8:	fbb4 f4f5 	udiv	r4, r4, r5
 802c4bc:	fbb3 f3f5 	udiv	r3, r3, r5
 802c4c0:	0409      	lsls	r1, r1, #16
 802c4c2:	b2e4      	uxtb	r4, r4
 802c4c4:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 802c4c8:	021b      	lsls	r3, r3, #8
 802c4ca:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 802c4ce:	b29b      	uxth	r3, r3
 802c4d0:	4321      	orrs	r1, r4
 802c4d2:	430b      	orrs	r3, r1
 802c4d4:	6013      	str	r3, [r2, #0]
 802c4d6:	e7d1      	b.n	802c47c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh+0x20>

0802c4d8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4dc:	461e      	mov	r6, r3
 802c4de:	b08b      	sub	sp, #44	@ 0x2c
 802c4e0:	460c      	mov	r4, r1
 802c4e2:	4615      	mov	r5, r2
 802c4e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802c4e6:	4682      	mov	sl, r0
 802c4e8:	6871      	ldr	r1, [r6, #4]
 802c4ea:	aa06      	add	r2, sp, #24
 802c4ec:	6830      	ldr	r0, [r6, #0]
 802c4ee:	2702      	movs	r7, #2
 802c4f0:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802c4f4:	3504      	adds	r5, #4
 802c4f6:	c203      	stmia	r2!, {r0, r1}
 802c4f8:	6818      	ldr	r0, [r3, #0]
 802c4fa:	aa08      	add	r2, sp, #32
 802c4fc:	6859      	ldr	r1, [r3, #4]
 802c4fe:	c203      	stmia	r2!, {r0, r1}
 802c500:	a806      	add	r0, sp, #24
 802c502:	f7ee fc75 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c506:	4631      	mov	r1, r6
 802c508:	a808      	add	r0, sp, #32
 802c50a:	f7ee fc99 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c50e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802c512:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802c516:	f002 0301 	and.w	r3, r2, #1
 802c51a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802c51e:	9302      	str	r3, [sp, #8]
 802c520:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c524:	f003 0101 	and.w	r1, r3, #1
 802c528:	9101      	str	r1, [sp, #4]
 802c52a:	9801      	ldr	r0, [sp, #4]
 802c52c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802c530:	4403      	add	r3, r0
 802c532:	fb01 2303 	mla	r3, r1, r3, r2
 802c536:	fb93 f3f7 	sdiv	r3, r3, r7
 802c53a:	18e6      	adds	r6, r4, r3
 802c53c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802c540:	441a      	add	r2, r3
 802c542:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802c546:	4419      	add	r1, r3
 802c548:	4b71      	ldr	r3, [pc, #452]	@ (802c710 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802c54a:	f8ad 2020 	strh.w	r2, [sp, #32]
 802c54e:	6818      	ldr	r0, [r3, #0]
 802c550:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802c554:	6803      	ldr	r3, [r0, #0]
 802c556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802c558:	4798      	blx	r3
 802c55a:	4b6e      	ldr	r3, [pc, #440]	@ (802c714 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23c>)
 802c55c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802c560:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802c564:	881a      	ldrh	r2, [r3, #0]
 802c566:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802c56a:	fb0b fb02 	mul.w	fp, fp, r2
 802c56e:	fb02 1404 	mla	r4, r2, r4, r1
 802c572:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802c576:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 802c57a:	9203      	str	r2, [sp, #12]
 802c57c:	461a      	mov	r2, r3
 802c57e:	d056      	beq.n	802c62e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x156>
 802c580:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802c584:	9b03      	ldr	r3, [sp, #12]
 802c586:	429c      	cmp	r4, r3
 802c588:	f080 80b9 	bcs.w	802c6fe <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 802c58c:	9b02      	ldr	r3, [sp, #8]
 802c58e:	2b00      	cmp	r3, #0
 802c590:	f000 8097 	beq.w	802c6c2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802c594:	7831      	ldrb	r1, [r6, #0]
 802c596:	4622      	mov	r2, r4
 802c598:	1c77      	adds	r7, r6, #1
 802c59a:	3404      	adds	r4, #4
 802c59c:	f001 010f 	and.w	r1, r1, #15
 802c5a0:	f108 3bff 	add.w	fp, r8, #4294967295
 802c5a4:	464b      	mov	r3, r9
 802c5a6:	4650      	mov	r0, sl
 802c5a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c5ac:	4429      	add	r1, r5
 802c5ae:	f7ff ff55 	bl	802c45c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c5b2:	f1bb 0f01 	cmp.w	fp, #1
 802c5b6:	f340 8087 	ble.w	802c6c8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f0>
 802c5ba:	7839      	ldrb	r1, [r7, #0]
 802c5bc:	4622      	mov	r2, r4
 802c5be:	464b      	mov	r3, r9
 802c5c0:	4650      	mov	r0, sl
 802c5c2:	0909      	lsrs	r1, r1, #4
 802c5c4:	f1ab 0b02 	sub.w	fp, fp, #2
 802c5c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c5cc:	4429      	add	r1, r5
 802c5ce:	f7ff ff45 	bl	802c45c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c5d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 802c5d6:	1d22      	adds	r2, r4, #4
 802c5d8:	464b      	mov	r3, r9
 802c5da:	f001 010f 	and.w	r1, r1, #15
 802c5de:	4650      	mov	r0, sl
 802c5e0:	3408      	adds	r4, #8
 802c5e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c5e6:	4429      	add	r1, r5
 802c5e8:	f7ff ff38 	bl	802c45c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c5ec:	e7e1      	b.n	802c5b2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802c5ee:	4633      	mov	r3, r6
 802c5f0:	4640      	mov	r0, r8
 802c5f2:	e037      	b.n	802c664 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 802c5f4:	d10f      	bne.n	802c616 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 802c5f6:	781b      	ldrb	r3, [r3, #0]
 802c5f8:	091b      	lsrs	r3, r3, #4
 802c5fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802c5fe:	18e8      	adds	r0, r5, r3
 802c600:	5ceb      	ldrb	r3, [r5, r3]
 802c602:	7884      	ldrb	r4, [r0, #2]
 802c604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802c608:	7840      	ldrb	r0, [r0, #1]
 802c60a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c60e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 802c612:	f841 3b04 	str.w	r3, [r1], #4
 802c616:	8814      	ldrh	r4, [r2, #0]
 802c618:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c61c:	eba4 0408 	sub.w	r4, r4, r8
 802c620:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802c624:	9901      	ldr	r1, [sp, #4]
 802c626:	440b      	add	r3, r1
 802c628:	fb93 f3f7 	sdiv	r3, r3, r7
 802c62c:	441e      	add	r6, r3
 802c62e:	9b03      	ldr	r3, [sp, #12]
 802c630:	429c      	cmp	r4, r3
 802c632:	d264      	bcs.n	802c6fe <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 802c634:	9b02      	ldr	r3, [sp, #8]
 802c636:	2b00      	cmp	r3, #0
 802c638:	d0d9      	beq.n	802c5ee <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x116>
 802c63a:	7831      	ldrb	r1, [r6, #0]
 802c63c:	1c73      	adds	r3, r6, #1
 802c63e:	f001 010f 	and.w	r1, r1, #15
 802c642:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c646:	1868      	adds	r0, r5, r1
 802c648:	5c69      	ldrb	r1, [r5, r1]
 802c64a:	f890 c002 	ldrb.w	ip, [r0, #2]
 802c64e:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802c652:	7840      	ldrb	r0, [r0, #1]
 802c654:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 802c658:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 802c65c:	f108 30ff 	add.w	r0, r8, #4294967295
 802c660:	f844 1b04 	str.w	r1, [r4], #4
 802c664:	2801      	cmp	r0, #1
 802c666:	4621      	mov	r1, r4
 802c668:	f104 0408 	add.w	r4, r4, #8
 802c66c:	ddc2      	ble.n	802c5f4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 802c66e:	7819      	ldrb	r1, [r3, #0]
 802c670:	3802      	subs	r0, #2
 802c672:	0909      	lsrs	r1, r1, #4
 802c674:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c678:	eb05 0c01 	add.w	ip, r5, r1
 802c67c:	5c69      	ldrb	r1, [r5, r1]
 802c67e:	f89c e002 	ldrb.w	lr, [ip, #2]
 802c682:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802c686:	f89c c001 	ldrb.w	ip, [ip, #1]
 802c68a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 802c68e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802c692:	f844 1c08 	str.w	r1, [r4, #-8]
 802c696:	f813 1b01 	ldrb.w	r1, [r3], #1
 802c69a:	f001 010f 	and.w	r1, r1, #15
 802c69e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c6a2:	eb05 0c01 	add.w	ip, r5, r1
 802c6a6:	5c69      	ldrb	r1, [r5, r1]
 802c6a8:	f89c e002 	ldrb.w	lr, [ip, #2]
 802c6ac:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802c6b0:	f89c c001 	ldrb.w	ip, [ip, #1]
 802c6b4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 802c6b8:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802c6bc:	f844 1c04 	str.w	r1, [r4, #-4]
 802c6c0:	e7d0      	b.n	802c664 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 802c6c2:	4637      	mov	r7, r6
 802c6c4:	46c3      	mov	fp, r8
 802c6c6:	e774      	b.n	802c5b2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802c6c8:	d10a      	bne.n	802c6e0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x208>
 802c6ca:	7839      	ldrb	r1, [r7, #0]
 802c6cc:	4622      	mov	r2, r4
 802c6ce:	3404      	adds	r4, #4
 802c6d0:	464b      	mov	r3, r9
 802c6d2:	0909      	lsrs	r1, r1, #4
 802c6d4:	4650      	mov	r0, sl
 802c6d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c6da:	4429      	add	r1, r5
 802c6dc:	f7ff febe 	bl	802c45c <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 802c6e0:	9b04      	ldr	r3, [sp, #16]
 802c6e2:	9a01      	ldr	r2, [sp, #4]
 802c6e4:	881b      	ldrh	r3, [r3, #0]
 802c6e6:	eba3 0308 	sub.w	r3, r3, r8
 802c6ea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802c6ee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802c6f2:	4413      	add	r3, r2
 802c6f4:	9a05      	ldr	r2, [sp, #20]
 802c6f6:	fb93 f3f2 	sdiv	r3, r3, r2
 802c6fa:	441e      	add	r6, r3
 802c6fc:	e742      	b.n	802c584 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xac>
 802c6fe:	4b04      	ldr	r3, [pc, #16]	@ (802c710 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802c700:	6818      	ldr	r0, [r3, #0]
 802c702:	6803      	ldr	r3, [r0, #0]
 802c704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c706:	4798      	blx	r3
 802c708:	b00b      	add	sp, #44	@ 0x2c
 802c70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c70e:	bf00      	nop
 802c710:	200122c4 	.word	0x200122c4
 802c714:	200122be 	.word	0x200122be

0802c718 <CRC_Lock>:
 802c718:	4a2d      	ldr	r2, [pc, #180]	@ (802c7d0 <CRC_Lock+0xb8>)
 802c71a:	b530      	push	{r4, r5, lr}
 802c71c:	6813      	ldr	r3, [r2, #0]
 802c71e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802c722:	f023 0301 	bic.w	r3, r3, #1
 802c726:	6013      	str	r3, [r2, #0]
 802c728:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802c72c:	4b29      	ldr	r3, [pc, #164]	@ (802c7d4 <CRC_Lock+0xbc>)
 802c72e:	681c      	ldr	r4, [r3, #0]
 802c730:	4014      	ands	r4, r2
 802c732:	42ac      	cmp	r4, r5
 802c734:	d005      	beq.n	802c742 <CRC_Lock+0x2a>
 802c736:	681c      	ldr	r4, [r3, #0]
 802c738:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802c73c:	4014      	ands	r4, r2
 802c73e:	42ac      	cmp	r4, r5
 802c740:	d125      	bne.n	802c78e <CRC_Lock+0x76>
 802c742:	4b25      	ldr	r3, [pc, #148]	@ (802c7d8 <CRC_Lock+0xc0>)
 802c744:	681b      	ldr	r3, [r3, #0]
 802c746:	2b00      	cmp	r3, #0
 802c748:	d139      	bne.n	802c7be <CRC_Lock+0xa6>
 802c74a:	4b24      	ldr	r3, [pc, #144]	@ (802c7dc <CRC_Lock+0xc4>)
 802c74c:	681a      	ldr	r2, [r3, #0]
 802c74e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c752:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802c756:	d00d      	beq.n	802c774 <CRC_Lock+0x5c>
 802c758:	681a      	ldr	r2, [r3, #0]
 802c75a:	f240 4483 	movw	r4, #1155	@ 0x483
 802c75e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c762:	42a2      	cmp	r2, r4
 802c764:	d006      	beq.n	802c774 <CRC_Lock+0x5c>
 802c766:	681b      	ldr	r3, [r3, #0]
 802c768:	f240 4285 	movw	r2, #1157	@ 0x485
 802c76c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c770:	4293      	cmp	r3, r2
 802c772:	d124      	bne.n	802c7be <CRC_Lock+0xa6>
 802c774:	4b1a      	ldr	r3, [pc, #104]	@ (802c7e0 <CRC_Lock+0xc8>)
 802c776:	2201      	movs	r2, #1
 802c778:	601a      	str	r2, [r3, #0]
 802c77a:	681a      	ldr	r2, [r3, #0]
 802c77c:	2a00      	cmp	r2, #0
 802c77e:	d1fc      	bne.n	802c77a <CRC_Lock+0x62>
 802c780:	4b18      	ldr	r3, [pc, #96]	@ (802c7e4 <CRC_Lock+0xcc>)
 802c782:	6018      	str	r0, [r3, #0]
 802c784:	6818      	ldr	r0, [r3, #0]
 802c786:	1a43      	subs	r3, r0, r1
 802c788:	4258      	negs	r0, r3
 802c78a:	4158      	adcs	r0, r3
 802c78c:	e00e      	b.n	802c7ac <CRC_Lock+0x94>
 802c78e:	681b      	ldr	r3, [r3, #0]
 802c790:	4013      	ands	r3, r2
 802c792:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802c796:	4293      	cmp	r3, r2
 802c798:	d111      	bne.n	802c7be <CRC_Lock+0xa6>
 802c79a:	4b13      	ldr	r3, [pc, #76]	@ (802c7e8 <CRC_Lock+0xd0>)
 802c79c:	f240 4286 	movw	r2, #1158	@ 0x486
 802c7a0:	681b      	ldr	r3, [r3, #0]
 802c7a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c7a6:	4293      	cmp	r3, r2
 802c7a8:	d001      	beq.n	802c7ae <CRC_Lock+0x96>
 802c7aa:	2000      	movs	r0, #0
 802c7ac:	bd30      	pop	{r4, r5, pc}
 802c7ae:	4b0f      	ldr	r3, [pc, #60]	@ (802c7ec <CRC_Lock+0xd4>)
 802c7b0:	2201      	movs	r2, #1
 802c7b2:	601a      	str	r2, [r3, #0]
 802c7b4:	681a      	ldr	r2, [r3, #0]
 802c7b6:	2a00      	cmp	r2, #0
 802c7b8:	d1fc      	bne.n	802c7b4 <CRC_Lock+0x9c>
 802c7ba:	4b0d      	ldr	r3, [pc, #52]	@ (802c7f0 <CRC_Lock+0xd8>)
 802c7bc:	e7e1      	b.n	802c782 <CRC_Lock+0x6a>
 802c7be:	4b0d      	ldr	r3, [pc, #52]	@ (802c7f4 <CRC_Lock+0xdc>)
 802c7c0:	2201      	movs	r2, #1
 802c7c2:	601a      	str	r2, [r3, #0]
 802c7c4:	681a      	ldr	r2, [r3, #0]
 802c7c6:	2a00      	cmp	r2, #0
 802c7c8:	d1fc      	bne.n	802c7c4 <CRC_Lock+0xac>
 802c7ca:	4b0b      	ldr	r3, [pc, #44]	@ (802c7f8 <CRC_Lock+0xe0>)
 802c7cc:	e7d9      	b.n	802c782 <CRC_Lock+0x6a>
 802c7ce:	bf00      	nop
 802c7d0:	e0002000 	.word	0xe0002000
 802c7d4:	e000ed00 	.word	0xe000ed00
 802c7d8:	e0042000 	.word	0xe0042000
 802c7dc:	5c001000 	.word	0x5c001000
 802c7e0:	58024c08 	.word	0x58024c08
 802c7e4:	58024c00 	.word	0x58024c00
 802c7e8:	46008ff0 	.word	0x46008ff0
 802c7ec:	46024c08 	.word	0x46024c08
 802c7f0:	46024c00 	.word	0x46024c00
 802c7f4:	40023008 	.word	0x40023008
 802c7f8:	40023000 	.word	0x40023000

0802c7fc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802c7fc:	6101      	str	r1, [r0, #16]
 802c7fe:	4770      	bx	lr

0802c800 <_ZN8touchgfx8Gestures4tickEv>:
 802c800:	7b83      	ldrb	r3, [r0, #14]
 802c802:	b14b      	cbz	r3, 802c818 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802c804:	8903      	ldrh	r3, [r0, #8]
 802c806:	3301      	adds	r3, #1
 802c808:	b29b      	uxth	r3, r3
 802c80a:	2b07      	cmp	r3, #7
 802c80c:	8103      	strh	r3, [r0, #8]
 802c80e:	bf81      	itttt	hi
 802c810:	2300      	movhi	r3, #0
 802c812:	8143      	strhhi	r3, [r0, #10]
 802c814:	8183      	strhhi	r3, [r0, #12]
 802c816:	7383      	strbhi	r3, [r0, #14]
 802c818:	4770      	bx	lr
	...

0802c81c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802c81c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802c820:	4698      	mov	r8, r3
 802c822:	8883      	ldrh	r3, [r0, #4]
 802c824:	4604      	mov	r4, r0
 802c826:	4617      	mov	r7, r2
 802c828:	f8ad 3006 	strh.w	r3, [sp, #6]
 802c82c:	eba8 0303 	sub.w	r3, r8, r3
 802c830:	4a19      	ldr	r2, [pc, #100]	@ (802c898 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802c832:	460e      	mov	r6, r1
 802c834:	b21b      	sxth	r3, r3
 802c836:	88c1      	ldrh	r1, [r0, #6]
 802c838:	9200      	str	r2, [sp, #0]
 802c83a:	2000      	movs	r0, #0
 802c83c:	2b00      	cmp	r3, #0
 802c83e:	8aa2      	ldrh	r2, [r4, #20]
 802c840:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802c844:	bfb8      	it	lt
 802c846:	425b      	neglt	r3, r3
 802c848:	f88d 0004 	strb.w	r0, [sp, #4]
 802c84c:	f8ad 1008 	strh.w	r1, [sp, #8]
 802c850:	b21b      	sxth	r3, r3
 802c852:	f8ad 800a 	strh.w	r8, [sp, #10]
 802c856:	f8ad 500c 	strh.w	r5, [sp, #12]
 802c85a:	4293      	cmp	r3, r2
 802c85c:	dc07      	bgt.n	802c86e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802c85e:	1a69      	subs	r1, r5, r1
 802c860:	b209      	sxth	r1, r1
 802c862:	2900      	cmp	r1, #0
 802c864:	bfb8      	it	lt
 802c866:	4249      	neglt	r1, r1
 802c868:	b209      	sxth	r1, r1
 802c86a:	428a      	cmp	r2, r1
 802c86c:	da10      	bge.n	802c890 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802c86e:	6920      	ldr	r0, [r4, #16]
 802c870:	4669      	mov	r1, sp
 802c872:	eba8 0606 	sub.w	r6, r8, r6
 802c876:	1bef      	subs	r7, r5, r7
 802c878:	6803      	ldr	r3, [r0, #0]
 802c87a:	685b      	ldr	r3, [r3, #4]
 802c87c:	4798      	blx	r3
 802c87e:	2300      	movs	r3, #0
 802c880:	2001      	movs	r0, #1
 802c882:	8166      	strh	r6, [r4, #10]
 802c884:	8123      	strh	r3, [r4, #8]
 802c886:	81a7      	strh	r7, [r4, #12]
 802c888:	f8a4 8004 	strh.w	r8, [r4, #4]
 802c88c:	80e5      	strh	r5, [r4, #6]
 802c88e:	73a0      	strb	r0, [r4, #14]
 802c890:	b004      	add	sp, #16
 802c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c896:	bf00      	nop
 802c898:	0803241c 	.word	0x0803241c

0802c89c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802c89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c89e:	461e      	mov	r6, r3
 802c8a0:	1e4b      	subs	r3, r1, #1
 802c8a2:	b085      	sub	sp, #20
 802c8a4:	4604      	mov	r4, r0
 802c8a6:	2b01      	cmp	r3, #1
 802c8a8:	460d      	mov	r5, r1
 802c8aa:	4617      	mov	r7, r2
 802c8ac:	d84b      	bhi.n	802c946 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802c8ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802c8b2:	1cd3      	adds	r3, r2, #3
 802c8b4:	b29b      	uxth	r3, r3
 802c8b6:	2b06      	cmp	r3, #6
 802c8b8:	d916      	bls.n	802c8e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802c8ba:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802c95c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c8be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c8c2:	f8cd c004 	str.w	ip, [sp, #4]
 802c8c6:	f04f 0c00 	mov.w	ip, #0
 802c8ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c8ce:	6900      	ldr	r0, [r0, #16]
 802c8d0:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c8d4:	a901      	add	r1, sp, #4
 802c8d6:	f88d c008 	strb.w	ip, [sp, #8]
 802c8da:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c8de:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c8e2:	6803      	ldr	r3, [r0, #0]
 802c8e4:	689b      	ldr	r3, [r3, #8]
 802c8e6:	4798      	blx	r3
 802c8e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c8ec:	1cd3      	adds	r3, r2, #3
 802c8ee:	b29b      	uxth	r3, r3
 802c8f0:	2b06      	cmp	r3, #6
 802c8f2:	d916      	bls.n	802c922 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c8f4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802c95c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c8f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c8fc:	f8cd c004 	str.w	ip, [sp, #4]
 802c900:	f04f 0c01 	mov.w	ip, #1
 802c904:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c908:	6920      	ldr	r0, [r4, #16]
 802c90a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c90e:	a901      	add	r1, sp, #4
 802c910:	f88d c008 	strb.w	ip, [sp, #8]
 802c914:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c918:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c91c:	6803      	ldr	r3, [r0, #0]
 802c91e:	689b      	ldr	r3, [r3, #8]
 802c920:	4798      	blx	r3
 802c922:	4b0d      	ldr	r3, [pc, #52]	@ (802c958 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802c924:	a901      	add	r1, sp, #4
 802c926:	6920      	ldr	r0, [r4, #16]
 802c928:	9301      	str	r3, [sp, #4]
 802c92a:	2300      	movs	r3, #0
 802c92c:	f88d 5008 	strb.w	r5, [sp, #8]
 802c930:	f8ad 700a 	strh.w	r7, [sp, #10]
 802c934:	f8ad 600c 	strh.w	r6, [sp, #12]
 802c938:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c93c:	6803      	ldr	r3, [r0, #0]
 802c93e:	681b      	ldr	r3, [r3, #0]
 802c940:	4798      	blx	r3
 802c942:	b005      	add	sp, #20
 802c944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c946:	2900      	cmp	r1, #0
 802c948:	d1eb      	bne.n	802c922 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c94a:	80a2      	strh	r2, [r4, #4]
 802c94c:	80c6      	strh	r6, [r0, #6]
 802c94e:	60a1      	str	r1, [r4, #8]
 802c950:	81a1      	strh	r1, [r4, #12]
 802c952:	73a1      	strb	r1, [r4, #14]
 802c954:	e7e5      	b.n	802c922 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c956:	bf00      	nop
 802c958:	08032408 	.word	0x08032408
 802c95c:	08032430 	.word	0x08032430

0802c960 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802c960:	10c9      	asrs	r1, r1, #3
 802c962:	2900      	cmp	r1, #0
 802c964:	bfb8      	it	lt
 802c966:	4249      	neglt	r1, r1
 802c968:	2801      	cmp	r0, #1
 802c96a:	d108      	bne.n	802c97e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c96c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802c970:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802c974:	4601      	mov	r1, r0
 802c976:	dd02      	ble.n	802c97e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c978:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802c97c:	4770      	bx	lr
 802c97e:	29ff      	cmp	r1, #255	@ 0xff
 802c980:	bfa8      	it	ge
 802c982:	21ff      	movge	r1, #255	@ 0xff
 802c984:	4608      	mov	r0, r1
 802c986:	4770      	bx	lr

0802c988 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802c988:	b410      	push	{r4}
 802c98a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802c98e:	429c      	cmp	r4, r3
 802c990:	d803      	bhi.n	802c99a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802c992:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c996:	f7ec bd1f 	b.w	80193d8 <_ZN8touchgfx7Outline6lineToEii>
 802c99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c99e:	4770      	bx	lr

0802c9a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9a4:	b08b      	sub	sp, #44	@ 0x2c
 802c9a6:	4606      	mov	r6, r0
 802c9a8:	468a      	mov	sl, r1
 802c9aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c9ae:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802c9b2:	9308      	str	r3, [sp, #32]
 802c9b4:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802c9b8:	9309      	str	r3, [sp, #36]	@ 0x24
 802c9ba:	f7ec fe78 	bl	80196ae <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802c9be:	68b5      	ldr	r5, [r6, #8]
 802c9c0:	4604      	mov	r4, r0
 802c9c2:	2d00      	cmp	r5, #0
 802c9c4:	d044      	beq.n	802ca50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c9c6:	6873      	ldr	r3, [r6, #4]
 802c9c8:	42ab      	cmp	r3, r5
 802c9ca:	d33d      	bcc.n	802ca48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802c9cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802c9d0:	f04f 0800 	mov.w	r8, #0
 802c9d4:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802c9d8:	eb02 0b03 	add.w	fp, r2, r3
 802c9dc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802c9e0:	fb02 1203 	mla	r2, r2, r3, r1
 802c9e4:	9205      	str	r2, [sp, #20]
 802c9e6:	1e6a      	subs	r2, r5, #1
 802c9e8:	9204      	str	r2, [sp, #16]
 802c9ea:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802c9ee:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c9f2:	454b      	cmp	r3, r9
 802c9f4:	463a      	mov	r2, r7
 802c9f6:	d008      	beq.n	802ca0a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802c9f8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802c9fc:	eb03 0b09 	add.w	fp, r3, r9
 802ca00:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802ca04:	fb03 1309 	mla	r3, r3, r9, r1
 802ca08:	9305      	str	r3, [sp, #20]
 802ca0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802ca0e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802ca12:	4498      	add	r8, r3
 802ca14:	9b04      	ldr	r3, [sp, #16]
 802ca16:	3b01      	subs	r3, #1
 802ca18:	9304      	str	r3, [sp, #16]
 802ca1a:	9b04      	ldr	r3, [sp, #16]
 802ca1c:	3301      	adds	r3, #1
 802ca1e:	d015      	beq.n	802ca4c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802ca20:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802ca24:	42bb      	cmp	r3, r7
 802ca26:	d117      	bne.n	802ca58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802ca28:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802ca2c:	9b04      	ldr	r3, [sp, #16]
 802ca2e:	4548      	cmp	r0, r9
 802ca30:	f103 33ff 	add.w	r3, r3, #4294967295
 802ca34:	d17d      	bne.n	802cb32 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802ca36:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802ca3a:	4401      	add	r1, r0
 802ca3c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802ca40:	4480      	add	r8, r0
 802ca42:	e7e9      	b.n	802ca18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802ca44:	461f      	mov	r7, r3
 802ca46:	e042      	b.n	802cace <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802ca48:	2000      	movs	r0, #0
 802ca4a:	e002      	b.n	802ca52 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802ca4c:	2900      	cmp	r1, #0
 802ca4e:	d16d      	bne.n	802cb2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802ca50:	2001      	movs	r0, #1
 802ca52:	b00b      	add	sp, #44	@ 0x2c
 802ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ca58:	b379      	cbz	r1, 802caba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802ca5a:	2f00      	cmp	r7, #0
 802ca5c:	db29      	blt.n	802cab2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802ca5e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802ca62:	42bb      	cmp	r3, r7
 802ca64:	dd25      	ble.n	802cab2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802ca66:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802ca6a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802ca6e:	f7ff ff77 	bl	802c960 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802ca72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ca74:	fb10 f003 	smulbb	r0, r0, r3
 802ca78:	b280      	uxth	r0, r0
 802ca7a:	1c41      	adds	r1, r0, #1
 802ca7c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802ca80:	1209      	asrs	r1, r1, #8
 802ca82:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802ca86:	d014      	beq.n	802cab2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802ca88:	b2c9      	uxtb	r1, r1
 802ca8a:	9808      	ldr	r0, [sp, #32]
 802ca8c:	b2ba      	uxth	r2, r7
 802ca8e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802ca90:	9102      	str	r1, [sp, #8]
 802ca92:	2101      	movs	r1, #1
 802ca94:	4413      	add	r3, r2
 802ca96:	4402      	add	r2, r0
 802ca98:	9101      	str	r1, [sp, #4]
 802ca9a:	fa0f f18b 	sxth.w	r1, fp
 802ca9e:	f8da 0000 	ldr.w	r0, [sl]
 802caa2:	b21b      	sxth	r3, r3
 802caa4:	9100      	str	r1, [sp, #0]
 802caa6:	b212      	sxth	r2, r2
 802caa8:	6941      	ldr	r1, [r0, #20]
 802caaa:	4650      	mov	r0, sl
 802caac:	460d      	mov	r5, r1
 802caae:	9905      	ldr	r1, [sp, #20]
 802cab0:	47a8      	blx	r5
 802cab2:	9b04      	ldr	r3, [sp, #16]
 802cab4:	1c7a      	adds	r2, r7, #1
 802cab6:	3301      	adds	r3, #1
 802cab8:	d0ca      	beq.n	802ca50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802caba:	f9b4 7000 	ldrsh.w	r7, [r4]
 802cabe:	1abb      	subs	r3, r7, r2
 802cac0:	2b00      	cmp	r3, #0
 802cac2:	dd31      	ble.n	802cb28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802cac4:	2a00      	cmp	r2, #0
 802cac6:	dabd      	bge.n	802ca44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802cac8:	2f00      	cmp	r7, #0
 802caca:	dd2d      	ble.n	802cb28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802cacc:	2200      	movs	r2, #0
 802cace:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802cad2:	19d1      	adds	r1, r2, r7
 802cad4:	4299      	cmp	r1, r3
 802cad6:	db02      	blt.n	802cade <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802cad8:	1a9f      	subs	r7, r3, r2
 802cada:	2f00      	cmp	r7, #0
 802cadc:	dd24      	ble.n	802cb28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802cade:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802cae2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802cae6:	f7ff ff3b 	bl	802c960 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802caea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802caec:	fb10 f003 	smulbb	r0, r0, r3
 802caf0:	b280      	uxth	r0, r0
 802caf2:	1c41      	adds	r1, r0, #1
 802caf4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802caf8:	1209      	asrs	r1, r1, #8
 802cafa:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802cafe:	d013      	beq.n	802cb28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802cb00:	b292      	uxth	r2, r2
 802cb02:	9808      	ldr	r0, [sp, #32]
 802cb04:	b2c9      	uxtb	r1, r1
 802cb06:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802cb08:	b23f      	sxth	r7, r7
 802cb0a:	4413      	add	r3, r2
 802cb0c:	9102      	str	r1, [sp, #8]
 802cb0e:	4402      	add	r2, r0
 802cb10:	fa0f f18b 	sxth.w	r1, fp
 802cb14:	f8da 0000 	ldr.w	r0, [sl]
 802cb18:	b21b      	sxth	r3, r3
 802cb1a:	9100      	str	r1, [sp, #0]
 802cb1c:	b212      	sxth	r2, r2
 802cb1e:	9701      	str	r7, [sp, #4]
 802cb20:	9905      	ldr	r1, [sp, #20]
 802cb22:	6947      	ldr	r7, [r0, #20]
 802cb24:	4650      	mov	r0, sl
 802cb26:	47b8      	blx	r7
 802cb28:	464b      	mov	r3, r9
 802cb2a:	e75e      	b.n	802c9ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802cb2c:	2f00      	cmp	r7, #0
 802cb2e:	da96      	bge.n	802ca5e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802cb30:	e78e      	b.n	802ca50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802cb32:	2900      	cmp	r1, #0
 802cb34:	d0f8      	beq.n	802cb28 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802cb36:	e790      	b.n	802ca5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802cb38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802cb38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802cb3c:	461e      	mov	r6, r3
 802cb3e:	4b36      	ldr	r3, [pc, #216]	@ (802cc18 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802cb40:	2500      	movs	r5, #0
 802cb42:	f100 0814 	add.w	r8, r0, #20
 802cb46:	4604      	mov	r4, r0
 802cb48:	4617      	mov	r7, r2
 802cb4a:	e9c0 3100 	strd	r3, r1, [r0]
 802cb4e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802cb52:	8185      	strh	r5, [r0, #12]
 802cb54:	8103      	strh	r3, [r0, #8]
 802cb56:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802cb5a:	81c5      	strh	r5, [r0, #14]
 802cb5c:	7283      	strb	r3, [r0, #10]
 802cb5e:	8205      	strh	r5, [r0, #16]
 802cb60:	8245      	strh	r5, [r0, #18]
 802cb62:	4640      	mov	r0, r8
 802cb64:	f7eb ff7e 	bl	8018a64 <_ZN8touchgfx7OutlineC1Ev>
 802cb68:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802cb6c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802cb70:	466b      	mov	r3, sp
 802cb72:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802cb76:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802cb7a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802cb7e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802cb82:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802cb86:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802cb8a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802cb8e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802cb92:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802cb96:	6830      	ldr	r0, [r6, #0]
 802cb98:	6871      	ldr	r1, [r6, #4]
 802cb9a:	8872      	ldrh	r2, [r6, #2]
 802cb9c:	8835      	ldrh	r5, [r6, #0]
 802cb9e:	c303      	stmia	r3!, {r0, r1}
 802cba0:	887b      	ldrh	r3, [r7, #2]
 802cba2:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802cba6:	4413      	add	r3, r2
 802cba8:	883a      	ldrh	r2, [r7, #0]
 802cbaa:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802cbae:	442a      	add	r2, r5
 802cbb0:	81e3      	strh	r3, [r4, #14]
 802cbb2:	8220      	strh	r0, [r4, #16]
 802cbb4:	4668      	mov	r0, sp
 802cbb6:	81a2      	strh	r2, [r4, #12]
 802cbb8:	8261      	strh	r1, [r4, #18]
 802cbba:	4639      	mov	r1, r7
 802cbbc:	f7ee f940 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802cbc0:	f104 000c 	add.w	r0, r4, #12
 802cbc4:	f7ee f914 	bl	801adf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802cbc8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802cbcc:	f8bd 2000 	ldrh.w	r2, [sp]
 802cbd0:	4640      	mov	r0, r8
 802cbd2:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802cbd6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802cbda:	f7eb ff27 	bl	8018a2c <_ZN8touchgfx7Outline5resetEv>
 802cbde:	f9bd 3000 	ldrsh.w	r3, [sp]
 802cbe2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802cbe6:	4620      	mov	r0, r4
 802cbe8:	015b      	lsls	r3, r3, #5
 802cbea:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802cbec:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802cbf0:	015b      	lsls	r3, r3, #5
 802cbf2:	6523      	str	r3, [r4, #80]	@ 0x50
 802cbf4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802cbf8:	015b      	lsls	r3, r3, #5
 802cbfa:	6563      	str	r3, [r4, #84]	@ 0x54
 802cbfc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802cc00:	015b      	lsls	r3, r3, #5
 802cc02:	65a3      	str	r3, [r4, #88]	@ 0x58
 802cc04:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802cc08:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802cc0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802cc10:	b002      	add	sp, #8
 802cc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc16:	bf00      	nop
 802cc18:	08032770 	.word	0x08032770

0802cc1c <_ZN8touchgfx6Canvas5closeEv>:
 802cc1c:	b538      	push	{r3, r4, r5, lr}
 802cc1e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802cc22:	4604      	mov	r4, r0
 802cc24:	b193      	cbz	r3, 802cc4c <_ZN8touchgfx6Canvas5closeEv+0x30>
 802cc26:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802cc2a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802cc2e:	4213      	tst	r3, r2
 802cc30:	d10c      	bne.n	802cc4c <_ZN8touchgfx6Canvas5closeEv+0x30>
 802cc32:	f100 0514 	add.w	r5, r0, #20
 802cc36:	b123      	cbz	r3, 802cc42 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802cc38:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802cc3c:	4628      	mov	r0, r5
 802cc3e:	f7ff fea3 	bl	802c988 <_ZN8touchgfx10Rasterizer6lineToEii>
 802cc42:	4628      	mov	r0, r5
 802cc44:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802cc48:	f7ff fe9e 	bl	802c988 <_ZN8touchgfx10Rasterizer6lineToEii>
 802cc4c:	2300      	movs	r3, #0
 802cc4e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802cc52:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802cc56:	4298      	cmp	r0, r3
 802cc58:	bf34      	ite	cc
 802cc5a:	2000      	movcc	r0, #0
 802cc5c:	2001      	movcs	r0, #1
 802cc5e:	bd38      	pop	{r3, r4, r5, pc}

0802cc60 <_ZN8touchgfx6Canvas6renderEh>:
 802cc60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802cc64:	7a85      	ldrb	r5, [r0, #10]
 802cc66:	4604      	mov	r4, r0
 802cc68:	4369      	muls	r1, r5
 802cc6a:	1c4d      	adds	r5, r1, #1
 802cc6c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802cc70:	122d      	asrs	r5, r5, #8
 802cc72:	f000 8098 	beq.w	802cda6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802cc76:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802cc7a:	2b00      	cmp	r3, #0
 802cc7c:	f000 8093 	beq.w	802cda6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802cc80:	f7ff ffcc 	bl	802cc1c <_ZN8touchgfx6Canvas5closeEv>
 802cc84:	4607      	mov	r7, r0
 802cc86:	2800      	cmp	r0, #0
 802cc88:	d045      	beq.n	802cd16 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802cc8a:	6860      	ldr	r0, [r4, #4]
 802cc8c:	4e47      	ldr	r6, [pc, #284]	@ (802cdac <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802cc8e:	6803      	ldr	r3, [r0, #0]
 802cc90:	6837      	ldr	r7, [r6, #0]
 802cc92:	689b      	ldr	r3, [r3, #8]
 802cc94:	4798      	blx	r3
 802cc96:	4601      	mov	r1, r0
 802cc98:	4638      	mov	r0, r7
 802cc9a:	f7e9 f92b 	bl	8015ef4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802cc9e:	4607      	mov	r7, r0
 802cca0:	f7dd ff4e 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 802cca4:	6803      	ldr	r3, [r0, #0]
 802cca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802cca8:	4798      	blx	r3
 802ccaa:	4680      	mov	r8, r0
 802ccac:	f7dd ff48 	bl	800ab40 <_ZN8touchgfx3HAL3lcdEv>
 802ccb0:	6803      	ldr	r3, [r0, #0]
 802ccb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ccb4:	4798      	blx	r3
 802ccb6:	280b      	cmp	r0, #11
 802ccb8:	d85a      	bhi.n	802cd70 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802ccba:	e8df f000 	tbb	[pc, r0]
 802ccbe:	5b50      	.short	0x5b50
 802ccc0:	3059066b 	.word	0x3059066b
 802ccc4:	64646440 	.word	0x64646440
 802ccc8:	6464      	.short	0x6464
 802ccca:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802ccce:	2208      	movs	r2, #8
 802ccd0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802ccd4:	fb91 f2f2 	sdiv	r2, r1, r2
 802ccd8:	fb08 2303 	mla	r3, r8, r3, r2
 802ccdc:	441f      	add	r7, r3
 802ccde:	424b      	negs	r3, r1
 802cce0:	f001 0107 	and.w	r1, r1, #7
 802cce4:	f003 0307 	and.w	r3, r3, #7
 802cce8:	bf58      	it	pl
 802ccea:	4259      	negpl	r1, r3
 802ccec:	b2c9      	uxtb	r1, r1
 802ccee:	b2ed      	uxtb	r5, r5
 802ccf0:	463a      	mov	r2, r7
 802ccf2:	fa0f f388 	sxth.w	r3, r8
 802ccf6:	f104 0014 	add.w	r0, r4, #20
 802ccfa:	e9cd 1500 	strd	r1, r5, [sp]
 802ccfe:	6861      	ldr	r1, [r4, #4]
 802cd00:	f7ff fe4e 	bl	802c9a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802cd04:	4607      	mov	r7, r0
 802cd06:	6860      	ldr	r0, [r4, #4]
 802cd08:	6803      	ldr	r3, [r0, #0]
 802cd0a:	691b      	ldr	r3, [r3, #16]
 802cd0c:	4798      	blx	r3
 802cd0e:	6830      	ldr	r0, [r6, #0]
 802cd10:	6803      	ldr	r3, [r0, #0]
 802cd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802cd14:	4798      	blx	r3
 802cd16:	4638      	mov	r0, r7
 802cd18:	b002      	add	sp, #8
 802cd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cd1e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802cd22:	2204      	movs	r2, #4
 802cd24:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cd28:	fb91 f2f2 	sdiv	r2, r1, r2
 802cd2c:	fb08 2303 	mla	r3, r8, r3, r2
 802cd30:	441f      	add	r7, r3
 802cd32:	424b      	negs	r3, r1
 802cd34:	f001 0103 	and.w	r1, r1, #3
 802cd38:	f003 0303 	and.w	r3, r3, #3
 802cd3c:	e7d4      	b.n	802cce8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802cd3e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802cd42:	2202      	movs	r2, #2
 802cd44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cd48:	2900      	cmp	r1, #0
 802cd4a:	fb91 f2f2 	sdiv	r2, r1, r2
 802cd4e:	f001 0101 	and.w	r1, r1, #1
 802cd52:	fb08 2303 	mla	r3, r8, r3, r2
 802cd56:	bfb8      	it	lt
 802cd58:	4249      	neglt	r1, r1
 802cd5a:	441f      	add	r7, r3
 802cd5c:	e7c6      	b.n	802ccec <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802cd5e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cd62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802cd66:	fb08 f303 	mul.w	r3, r8, r3
 802cd6a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802cd6e:	441f      	add	r7, r3
 802cd70:	2100      	movs	r1, #0
 802cd72:	e7bc      	b.n	802ccee <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802cd74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cd78:	2103      	movs	r1, #3
 802cd7a:	fb08 f203 	mul.w	r2, r8, r3
 802cd7e:	89a3      	ldrh	r3, [r4, #12]
 802cd80:	fb13 2301 	smlabb	r3, r3, r1, r2
 802cd84:	e7f3      	b.n	802cd6e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802cd86:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cd8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802cd8e:	fb08 2303 	mla	r3, r8, r3, r2
 802cd92:	e7ec      	b.n	802cd6e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802cd94:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802cd98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802cd9c:	fb08 f303 	mul.w	r3, r8, r3
 802cda0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802cda4:	e7e3      	b.n	802cd6e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802cda6:	2701      	movs	r7, #1
 802cda8:	e7b5      	b.n	802cd16 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802cdaa:	bf00      	nop
 802cdac:	200122c4 	.word	0x200122c4

0802cdb0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802cdb0:	4b06      	ldr	r3, [pc, #24]	@ (802cdcc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802cdb2:	b510      	push	{r4, lr}
 802cdb4:	781b      	ldrb	r3, [r3, #0]
 802cdb6:	2b01      	cmp	r3, #1
 802cdb8:	d107      	bne.n	802cdca <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802cdba:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802cdbe:	680b      	ldr	r3, [r1, #0]
 802cdc0:	6814      	ldr	r4, [r2, #0]
 802cdc2:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802cdc6:	6013      	str	r3, [r2, #0]
 802cdc8:	600c      	str	r4, [r1, #0]
 802cdca:	bd10      	pop	{r4, pc}
 802cdcc:	200122bc 	.word	0x200122bc

0802cdd0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802cdd0:	b513      	push	{r0, r1, r4, lr}
 802cdd2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802cdd6:	4604      	mov	r4, r0
 802cdd8:	e9cd 2100 	strd	r2, r1, [sp]
 802cddc:	b9a3      	cbnz	r3, 802ce08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802cdde:	466a      	mov	r2, sp
 802cde0:	a901      	add	r1, sp, #4
 802cde2:	4620      	mov	r0, r4
 802cde4:	f7ff ffe4 	bl	802cdb0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802cde8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802cdea:	9901      	ldr	r1, [sp, #4]
 802cdec:	9a00      	ldr	r2, [sp, #0]
 802cdee:	1ac9      	subs	r1, r1, r3
 802cdf0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802cdf2:	1ad2      	subs	r2, r2, r3
 802cdf4:	9101      	str	r1, [sp, #4]
 802cdf6:	2a00      	cmp	r2, #0
 802cdf8:	9200      	str	r2, [sp, #0]
 802cdfa:	da0b      	bge.n	802ce14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802cdfc:	2301      	movs	r3, #1
 802cdfe:	2900      	cmp	r1, #0
 802ce00:	da0e      	bge.n	802ce20 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802ce02:	f043 0304 	orr.w	r3, r3, #4
 802ce06:	e013      	b.n	802ce30 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802ce08:	f7ff ff08 	bl	802cc1c <_ZN8touchgfx6Canvas5closeEv>
 802ce0c:	2800      	cmp	r0, #0
 802ce0e:	d1e6      	bne.n	802cdde <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802ce10:	b002      	add	sp, #8
 802ce12:	bd10      	pop	{r4, pc}
 802ce14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802ce16:	429a      	cmp	r2, r3
 802ce18:	bfac      	ite	ge
 802ce1a:	2302      	movge	r3, #2
 802ce1c:	2300      	movlt	r3, #0
 802ce1e:	e7ee      	b.n	802cdfe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802ce20:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802ce22:	4281      	cmp	r1, r0
 802ce24:	bfac      	ite	ge
 802ce26:	2008      	movge	r0, #8
 802ce28:	2000      	movlt	r0, #0
 802ce2a:	4318      	orrs	r0, r3
 802ce2c:	b2c3      	uxtb	r3, r0
 802ce2e:	b158      	cbz	r0, 802ce48 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802ce30:	2200      	movs	r2, #0
 802ce32:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802ce36:	9901      	ldr	r1, [sp, #4]
 802ce38:	9a00      	ldr	r2, [sp, #0]
 802ce3a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802ce3c:	6722      	str	r2, [r4, #112]	@ 0x70
 802ce3e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802ce42:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802ce46:	e7e3      	b.n	802ce10 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802ce48:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802ce4c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802ce50:	4298      	cmp	r0, r3
 802ce52:	d803      	bhi.n	802ce5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802ce54:	f104 0014 	add.w	r0, r4, #20
 802ce58:	f7ec fad8 	bl	801940c <_ZN8touchgfx7Outline6moveToEii>
 802ce5c:	2301      	movs	r3, #1
 802ce5e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802ce62:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802ce66:	2300      	movs	r3, #0
 802ce68:	e7e5      	b.n	802ce36 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802ce6a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802ce6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ce6c:	ab02      	add	r3, sp, #8
 802ce6e:	4604      	mov	r4, r0
 802ce70:	9101      	str	r1, [sp, #4]
 802ce72:	a901      	add	r1, sp, #4
 802ce74:	f843 2d08 	str.w	r2, [r3, #-8]!
 802ce78:	461a      	mov	r2, r3
 802ce7a:	f7ff ff99 	bl	802cdb0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802ce7e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802ce80:	9901      	ldr	r1, [sp, #4]
 802ce82:	9a00      	ldr	r2, [sp, #0]
 802ce84:	1ac9      	subs	r1, r1, r3
 802ce86:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802ce88:	1ad2      	subs	r2, r2, r3
 802ce8a:	9101      	str	r1, [sp, #4]
 802ce8c:	2a00      	cmp	r2, #0
 802ce8e:	9200      	str	r2, [sp, #0]
 802ce90:	db1c      	blt.n	802cecc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802ce92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802ce94:	429a      	cmp	r2, r3
 802ce96:	bfac      	ite	ge
 802ce98:	2002      	movge	r0, #2
 802ce9a:	2000      	movlt	r0, #0
 802ce9c:	2900      	cmp	r1, #0
 802ce9e:	db17      	blt.n	802ced0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802cea0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802cea2:	4299      	cmp	r1, r3
 802cea4:	bfac      	ite	ge
 802cea6:	2308      	movge	r3, #8
 802cea8:	2300      	movlt	r3, #0
 802ceaa:	4303      	orrs	r3, r0
 802ceac:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802ceb0:	b2dd      	uxtb	r5, r3
 802ceb2:	b978      	cbnz	r0, 802ced4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802ceb4:	f104 0014 	add.w	r0, r4, #20
 802ceb8:	f7ff fd66 	bl	802c988 <_ZN8touchgfx10Rasterizer6lineToEii>
 802cebc:	9b01      	ldr	r3, [sp, #4]
 802cebe:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802cec2:	6623      	str	r3, [r4, #96]	@ 0x60
 802cec4:	9b00      	ldr	r3, [sp, #0]
 802cec6:	6663      	str	r3, [r4, #100]	@ 0x64
 802cec8:	b002      	add	sp, #8
 802ceca:	bd70      	pop	{r4, r5, r6, pc}
 802cecc:	2001      	movs	r0, #1
 802cece:	e7e5      	b.n	802ce9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802ced0:	2304      	movs	r3, #4
 802ced2:	e7ea      	b.n	802ceaa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802ced4:	b113      	cbz	r3, 802cedc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802ced6:	ea10 0305 	ands.w	r3, r0, r5
 802ceda:	d11c      	bne.n	802cf16 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802cedc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802cee0:	f104 0614 	add.w	r6, r4, #20
 802cee4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802cee8:	b98b      	cbnz	r3, 802cf0e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802ceea:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802ceee:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802cef2:	4298      	cmp	r0, r3
 802cef4:	d802      	bhi.n	802cefc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802cef6:	4630      	mov	r0, r6
 802cef8:	f7ec fa88 	bl	801940c <_ZN8touchgfx7Outline6moveToEii>
 802cefc:	2301      	movs	r3, #1
 802cefe:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802cf02:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802cf06:	4630      	mov	r0, r6
 802cf08:	e9dd 2100 	ldrd	r2, r1, [sp]
 802cf0c:	e7d4      	b.n	802ceb8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802cf0e:	4630      	mov	r0, r6
 802cf10:	f7ff fd3a 	bl	802c988 <_ZN8touchgfx10Rasterizer6lineToEii>
 802cf14:	e7f7      	b.n	802cf06 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802cf16:	461d      	mov	r5, r3
 802cf18:	e7d0      	b.n	802cebc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802cf1c <_ZN8touchgfx6CanvasD1Ev>:
 802cf1c:	4b04      	ldr	r3, [pc, #16]	@ (802cf30 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802cf1e:	b510      	push	{r4, lr}
 802cf20:	4604      	mov	r4, r0
 802cf22:	f840 3b14 	str.w	r3, [r0], #20
 802cf26:	f7eb fd79 	bl	8018a1c <_ZN8touchgfx7OutlineD1Ev>
 802cf2a:	4620      	mov	r0, r4
 802cf2c:	bd10      	pop	{r4, pc}
 802cf2e:	bf00      	nop
 802cf30:	08032770 	.word	0x08032770

0802cf34 <_ZN8touchgfx6CanvasD0Ev>:
 802cf34:	b510      	push	{r4, lr}
 802cf36:	4604      	mov	r4, r0
 802cf38:	f7ff fff0 	bl	802cf1c <_ZN8touchgfx6CanvasD1Ev>
 802cf3c:	2174      	movs	r1, #116	@ 0x74
 802cf3e:	4620      	mov	r0, r4
 802cf40:	f000 f807 	bl	802cf52 <_ZdlPvj>
 802cf44:	4620      	mov	r0, r4
 802cf46:	bd10      	pop	{r4, pc}

0802cf48 <__aeabi_atexit>:
 802cf48:	460b      	mov	r3, r1
 802cf4a:	4601      	mov	r1, r0
 802cf4c:	4618      	mov	r0, r3
 802cf4e:	f000 be43 	b.w	802dbd8 <__cxa_atexit>

0802cf52 <_ZdlPvj>:
 802cf52:	f000 b812 	b.w	802cf7a <_ZdlPv>

0802cf56 <__cxa_guard_acquire>:
 802cf56:	6802      	ldr	r2, [r0, #0]
 802cf58:	07d2      	lsls	r2, r2, #31
 802cf5a:	4603      	mov	r3, r0
 802cf5c:	d405      	bmi.n	802cf6a <__cxa_guard_acquire+0x14>
 802cf5e:	7842      	ldrb	r2, [r0, #1]
 802cf60:	b102      	cbz	r2, 802cf64 <__cxa_guard_acquire+0xe>
 802cf62:	deff      	udf	#255	@ 0xff
 802cf64:	2001      	movs	r0, #1
 802cf66:	7058      	strb	r0, [r3, #1]
 802cf68:	4770      	bx	lr
 802cf6a:	2000      	movs	r0, #0
 802cf6c:	4770      	bx	lr

0802cf6e <__cxa_guard_release>:
 802cf6e:	2301      	movs	r3, #1
 802cf70:	6003      	str	r3, [r0, #0]
 802cf72:	4770      	bx	lr

0802cf74 <__cxa_pure_virtual>:
 802cf74:	b508      	push	{r3, lr}
 802cf76:	f000 f80f 	bl	802cf98 <_ZSt9terminatev>

0802cf7a <_ZdlPv>:
 802cf7a:	f000 bd77 	b.w	802da6c <free>

0802cf7e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802cf7e:	b508      	push	{r3, lr}
 802cf80:	4780      	blx	r0
 802cf82:	f000 fd3f 	bl	802da04 <abort>
	...

0802cf88 <_ZSt13get_terminatev>:
 802cf88:	4b02      	ldr	r3, [pc, #8]	@ (802cf94 <_ZSt13get_terminatev+0xc>)
 802cf8a:	6818      	ldr	r0, [r3, #0]
 802cf8c:	f3bf 8f5b 	dmb	ish
 802cf90:	4770      	bx	lr
 802cf92:	bf00      	nop
 802cf94:	20000094 	.word	0x20000094

0802cf98 <_ZSt9terminatev>:
 802cf98:	b508      	push	{r3, lr}
 802cf9a:	f7ff fff5 	bl	802cf88 <_ZSt13get_terminatev>
 802cf9e:	f7ff ffee 	bl	802cf7e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802cfa4 <sinf>:
 802cfa4:	ee10 3a10 	vmov	r3, s0
 802cfa8:	b507      	push	{r0, r1, r2, lr}
 802cfaa:	4a1f      	ldr	r2, [pc, #124]	@ (802d028 <sinf+0x84>)
 802cfac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802cfb0:	4293      	cmp	r3, r2
 802cfb2:	d807      	bhi.n	802cfc4 <sinf+0x20>
 802cfb4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802d02c <sinf+0x88>
 802cfb8:	2000      	movs	r0, #0
 802cfba:	b003      	add	sp, #12
 802cfbc:	f85d eb04 	ldr.w	lr, [sp], #4
 802cfc0:	f000 b88e 	b.w	802d0e0 <__kernel_sinf>
 802cfc4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802cfc8:	d304      	bcc.n	802cfd4 <sinf+0x30>
 802cfca:	ee30 0a40 	vsub.f32	s0, s0, s0
 802cfce:	b003      	add	sp, #12
 802cfd0:	f85d fb04 	ldr.w	pc, [sp], #4
 802cfd4:	4668      	mov	r0, sp
 802cfd6:	f000 f8cb 	bl	802d170 <__ieee754_rem_pio2f>
 802cfda:	f000 0003 	and.w	r0, r0, #3
 802cfde:	2801      	cmp	r0, #1
 802cfe0:	d00a      	beq.n	802cff8 <sinf+0x54>
 802cfe2:	2802      	cmp	r0, #2
 802cfe4:	d00f      	beq.n	802d006 <sinf+0x62>
 802cfe6:	b9c0      	cbnz	r0, 802d01a <sinf+0x76>
 802cfe8:	eddd 0a01 	vldr	s1, [sp, #4]
 802cfec:	ed9d 0a00 	vldr	s0, [sp]
 802cff0:	2001      	movs	r0, #1
 802cff2:	f000 f875 	bl	802d0e0 <__kernel_sinf>
 802cff6:	e7ea      	b.n	802cfce <sinf+0x2a>
 802cff8:	eddd 0a01 	vldr	s1, [sp, #4]
 802cffc:	ed9d 0a00 	vldr	s0, [sp]
 802d000:	f000 f816 	bl	802d030 <__kernel_cosf>
 802d004:	e7e3      	b.n	802cfce <sinf+0x2a>
 802d006:	eddd 0a01 	vldr	s1, [sp, #4]
 802d00a:	ed9d 0a00 	vldr	s0, [sp]
 802d00e:	2001      	movs	r0, #1
 802d010:	f000 f866 	bl	802d0e0 <__kernel_sinf>
 802d014:	eeb1 0a40 	vneg.f32	s0, s0
 802d018:	e7d9      	b.n	802cfce <sinf+0x2a>
 802d01a:	eddd 0a01 	vldr	s1, [sp, #4]
 802d01e:	ed9d 0a00 	vldr	s0, [sp]
 802d022:	f000 f805 	bl	802d030 <__kernel_cosf>
 802d026:	e7f5      	b.n	802d014 <sinf+0x70>
 802d028:	3f490fd8 	.word	0x3f490fd8
 802d02c:	00000000 	.word	0x00000000

0802d030 <__kernel_cosf>:
 802d030:	ee10 3a10 	vmov	r3, s0
 802d034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802d038:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802d03c:	eef0 6a40 	vmov.f32	s13, s0
 802d040:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d044:	d204      	bcs.n	802d050 <__kernel_cosf+0x20>
 802d046:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802d04a:	ee17 2a90 	vmov	r2, s15
 802d04e:	b342      	cbz	r2, 802d0a2 <__kernel_cosf+0x72>
 802d050:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802d054:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802d0c0 <__kernel_cosf+0x90>
 802d058:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802d0c4 <__kernel_cosf+0x94>
 802d05c:	4a1a      	ldr	r2, [pc, #104]	@ (802d0c8 <__kernel_cosf+0x98>)
 802d05e:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d062:	4293      	cmp	r3, r2
 802d064:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802d0cc <__kernel_cosf+0x9c>
 802d068:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d06c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 802d0d0 <__kernel_cosf+0xa0>
 802d070:	eea7 6a87 	vfma.f32	s12, s15, s14
 802d074:	eddf 7a17 	vldr	s15, [pc, #92]	@ 802d0d4 <__kernel_cosf+0xa4>
 802d078:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d07c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 802d0d8 <__kernel_cosf+0xa8>
 802d080:	eea7 6a87 	vfma.f32	s12, s15, s14
 802d084:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802d088:	ee26 6a07 	vmul.f32	s12, s12, s14
 802d08c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d090:	eee7 0a06 	vfma.f32	s1, s14, s12
 802d094:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d098:	d804      	bhi.n	802d0a4 <__kernel_cosf+0x74>
 802d09a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802d09e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d0a2:	4770      	bx	lr
 802d0a4:	4a0d      	ldr	r2, [pc, #52]	@ (802d0dc <__kernel_cosf+0xac>)
 802d0a6:	4293      	cmp	r3, r2
 802d0a8:	bf9a      	itte	ls
 802d0aa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802d0ae:	ee07 3a10 	vmovls	s14, r3
 802d0b2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802d0b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d0ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d0be:	e7ec      	b.n	802d09a <__kernel_cosf+0x6a>
 802d0c0:	ad47d74e 	.word	0xad47d74e
 802d0c4:	310f74f6 	.word	0x310f74f6
 802d0c8:	3e999999 	.word	0x3e999999
 802d0cc:	b493f27c 	.word	0xb493f27c
 802d0d0:	37d00d01 	.word	0x37d00d01
 802d0d4:	bab60b61 	.word	0xbab60b61
 802d0d8:	3d2aaaab 	.word	0x3d2aaaab
 802d0dc:	3f480000 	.word	0x3f480000

0802d0e0 <__kernel_sinf>:
 802d0e0:	ee10 3a10 	vmov	r3, s0
 802d0e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802d0e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802d0ec:	d204      	bcs.n	802d0f8 <__kernel_sinf+0x18>
 802d0ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802d0f2:	ee17 3a90 	vmov	r3, s15
 802d0f6:	b35b      	cbz	r3, 802d150 <__kernel_sinf+0x70>
 802d0f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 802d0fc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802d154 <__kernel_sinf+0x74>
 802d100:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802d158 <__kernel_sinf+0x78>
 802d104:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d108:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802d15c <__kernel_sinf+0x7c>
 802d10c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d110:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 802d160 <__kernel_sinf+0x80>
 802d114:	eea7 6a87 	vfma.f32	s12, s15, s14
 802d118:	eddf 7a12 	vldr	s15, [pc, #72]	@ 802d164 <__kernel_sinf+0x84>
 802d11c:	ee60 6a07 	vmul.f32	s13, s0, s14
 802d120:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d124:	b930      	cbnz	r0, 802d134 <__kernel_sinf+0x54>
 802d126:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802d168 <__kernel_sinf+0x88>
 802d12a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d12e:	eea6 0a26 	vfma.f32	s0, s12, s13
 802d132:	4770      	bx	lr
 802d134:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802d138:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802d13c:	eee0 7a86 	vfma.f32	s15, s1, s12
 802d140:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802d144:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802d16c <__kernel_sinf+0x8c>
 802d148:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802d14c:	ee30 0a60 	vsub.f32	s0, s0, s1
 802d150:	4770      	bx	lr
 802d152:	bf00      	nop
 802d154:	2f2ec9d3 	.word	0x2f2ec9d3
 802d158:	b2d72f34 	.word	0xb2d72f34
 802d15c:	3638ef1b 	.word	0x3638ef1b
 802d160:	b9500d01 	.word	0xb9500d01
 802d164:	3c088889 	.word	0x3c088889
 802d168:	be2aaaab 	.word	0xbe2aaaab
 802d16c:	3e2aaaab 	.word	0x3e2aaaab

0802d170 <__ieee754_rem_pio2f>:
 802d170:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d172:	ee10 6a10 	vmov	r6, s0
 802d176:	4b88      	ldr	r3, [pc, #544]	@ (802d398 <__ieee754_rem_pio2f+0x228>)
 802d178:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802d17c:	429d      	cmp	r5, r3
 802d17e:	b087      	sub	sp, #28
 802d180:	4604      	mov	r4, r0
 802d182:	d805      	bhi.n	802d190 <__ieee754_rem_pio2f+0x20>
 802d184:	2300      	movs	r3, #0
 802d186:	ed80 0a00 	vstr	s0, [r0]
 802d18a:	6043      	str	r3, [r0, #4]
 802d18c:	2000      	movs	r0, #0
 802d18e:	e022      	b.n	802d1d6 <__ieee754_rem_pio2f+0x66>
 802d190:	4b82      	ldr	r3, [pc, #520]	@ (802d39c <__ieee754_rem_pio2f+0x22c>)
 802d192:	429d      	cmp	r5, r3
 802d194:	d83a      	bhi.n	802d20c <__ieee754_rem_pio2f+0x9c>
 802d196:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802d19a:	2e00      	cmp	r6, #0
 802d19c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 802d3a0 <__ieee754_rem_pio2f+0x230>
 802d1a0:	4a80      	ldr	r2, [pc, #512]	@ (802d3a4 <__ieee754_rem_pio2f+0x234>)
 802d1a2:	f023 030f 	bic.w	r3, r3, #15
 802d1a6:	dd18      	ble.n	802d1da <__ieee754_rem_pio2f+0x6a>
 802d1a8:	4293      	cmp	r3, r2
 802d1aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 802d1ae:	bf09      	itett	eq
 802d1b0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 802d3a8 <__ieee754_rem_pio2f+0x238>
 802d1b4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 802d3ac <__ieee754_rem_pio2f+0x23c>
 802d1b8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 802d3b0 <__ieee754_rem_pio2f+0x240>
 802d1bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802d1c0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802d1c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d1c8:	ed80 7a00 	vstr	s14, [r0]
 802d1cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d1d0:	edc0 7a01 	vstr	s15, [r0, #4]
 802d1d4:	2001      	movs	r0, #1
 802d1d6:	b007      	add	sp, #28
 802d1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d1da:	4293      	cmp	r3, r2
 802d1dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 802d1e0:	bf09      	itett	eq
 802d1e2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 802d3a8 <__ieee754_rem_pio2f+0x238>
 802d1e6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 802d3ac <__ieee754_rem_pio2f+0x23c>
 802d1ea:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 802d3b0 <__ieee754_rem_pio2f+0x240>
 802d1ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802d1f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d1f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d1fa:	ed80 7a00 	vstr	s14, [r0]
 802d1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d202:	edc0 7a01 	vstr	s15, [r0, #4]
 802d206:	f04f 30ff 	mov.w	r0, #4294967295
 802d20a:	e7e4      	b.n	802d1d6 <__ieee754_rem_pio2f+0x66>
 802d20c:	4b69      	ldr	r3, [pc, #420]	@ (802d3b4 <__ieee754_rem_pio2f+0x244>)
 802d20e:	429d      	cmp	r5, r3
 802d210:	d873      	bhi.n	802d2fa <__ieee754_rem_pio2f+0x18a>
 802d212:	f000 f8dd 	bl	802d3d0 <fabsf>
 802d216:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 802d3b8 <__ieee754_rem_pio2f+0x248>
 802d21a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d21e:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d22a:	ee17 0a90 	vmov	r0, s15
 802d22e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802d3a0 <__ieee754_rem_pio2f+0x230>
 802d232:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d236:	281f      	cmp	r0, #31
 802d238:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802d3ac <__ieee754_rem_pio2f+0x23c>
 802d23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d240:	eeb1 6a47 	vneg.f32	s12, s14
 802d244:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d248:	ee16 1a90 	vmov	r1, s13
 802d24c:	dc09      	bgt.n	802d262 <__ieee754_rem_pio2f+0xf2>
 802d24e:	4a5b      	ldr	r2, [pc, #364]	@ (802d3bc <__ieee754_rem_pio2f+0x24c>)
 802d250:	1e47      	subs	r7, r0, #1
 802d252:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802d256:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802d25a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802d25e:	4293      	cmp	r3, r2
 802d260:	d107      	bne.n	802d272 <__ieee754_rem_pio2f+0x102>
 802d262:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802d266:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802d26a:	2a08      	cmp	r2, #8
 802d26c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802d270:	dc14      	bgt.n	802d29c <__ieee754_rem_pio2f+0x12c>
 802d272:	6021      	str	r1, [r4, #0]
 802d274:	ed94 7a00 	vldr	s14, [r4]
 802d278:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d27c:	2e00      	cmp	r6, #0
 802d27e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d282:	ed84 0a01 	vstr	s0, [r4, #4]
 802d286:	daa6      	bge.n	802d1d6 <__ieee754_rem_pio2f+0x66>
 802d288:	eeb1 7a47 	vneg.f32	s14, s14
 802d28c:	eeb1 0a40 	vneg.f32	s0, s0
 802d290:	ed84 7a00 	vstr	s14, [r4]
 802d294:	ed84 0a01 	vstr	s0, [r4, #4]
 802d298:	4240      	negs	r0, r0
 802d29a:	e79c      	b.n	802d1d6 <__ieee754_rem_pio2f+0x66>
 802d29c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 802d3a8 <__ieee754_rem_pio2f+0x238>
 802d2a0:	eef0 6a40 	vmov.f32	s13, s0
 802d2a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 802d2a8:	ee70 7a66 	vsub.f32	s15, s0, s13
 802d2ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d2b0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802d3b0 <__ieee754_rem_pio2f+0x240>
 802d2b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802d2b8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802d2bc:	ee15 2a90 	vmov	r2, s11
 802d2c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d2c4:	1a5b      	subs	r3, r3, r1
 802d2c6:	2b19      	cmp	r3, #25
 802d2c8:	dc04      	bgt.n	802d2d4 <__ieee754_rem_pio2f+0x164>
 802d2ca:	edc4 5a00 	vstr	s11, [r4]
 802d2ce:	eeb0 0a66 	vmov.f32	s0, s13
 802d2d2:	e7cf      	b.n	802d274 <__ieee754_rem_pio2f+0x104>
 802d2d4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802d3c0 <__ieee754_rem_pio2f+0x250>
 802d2d8:	eeb0 0a66 	vmov.f32	s0, s13
 802d2dc:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d2e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d2e4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802d3c4 <__ieee754_rem_pio2f+0x254>
 802d2e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d2ec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d2f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d2f4:	ed84 7a00 	vstr	s14, [r4]
 802d2f8:	e7bc      	b.n	802d274 <__ieee754_rem_pio2f+0x104>
 802d2fa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802d2fe:	d306      	bcc.n	802d30e <__ieee754_rem_pio2f+0x19e>
 802d300:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d304:	edc0 7a01 	vstr	s15, [r0, #4]
 802d308:	edc0 7a00 	vstr	s15, [r0]
 802d30c:	e73e      	b.n	802d18c <__ieee754_rem_pio2f+0x1c>
 802d30e:	15ea      	asrs	r2, r5, #23
 802d310:	3a86      	subs	r2, #134	@ 0x86
 802d312:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d316:	ee07 3a90 	vmov	s15, r3
 802d31a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d31e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 802d3c8 <__ieee754_rem_pio2f+0x258>
 802d322:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d326:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d32a:	ed8d 7a03 	vstr	s14, [sp, #12]
 802d32e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d332:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d336:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d33a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d33e:	ed8d 7a04 	vstr	s14, [sp, #16]
 802d342:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d346:	eef5 7a40 	vcmp.f32	s15, #0.0
 802d34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d34e:	edcd 7a05 	vstr	s15, [sp, #20]
 802d352:	d11e      	bne.n	802d392 <__ieee754_rem_pio2f+0x222>
 802d354:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802d358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d35c:	bf0c      	ite	eq
 802d35e:	2301      	moveq	r3, #1
 802d360:	2302      	movne	r3, #2
 802d362:	491a      	ldr	r1, [pc, #104]	@ (802d3cc <__ieee754_rem_pio2f+0x25c>)
 802d364:	9101      	str	r1, [sp, #4]
 802d366:	2102      	movs	r1, #2
 802d368:	9100      	str	r1, [sp, #0]
 802d36a:	a803      	add	r0, sp, #12
 802d36c:	4621      	mov	r1, r4
 802d36e:	f000 f89d 	bl	802d4ac <__kernel_rem_pio2f>
 802d372:	2e00      	cmp	r6, #0
 802d374:	f6bf af2f 	bge.w	802d1d6 <__ieee754_rem_pio2f+0x66>
 802d378:	edd4 7a00 	vldr	s15, [r4]
 802d37c:	eef1 7a67 	vneg.f32	s15, s15
 802d380:	edc4 7a00 	vstr	s15, [r4]
 802d384:	edd4 7a01 	vldr	s15, [r4, #4]
 802d388:	eef1 7a67 	vneg.f32	s15, s15
 802d38c:	edc4 7a01 	vstr	s15, [r4, #4]
 802d390:	e782      	b.n	802d298 <__ieee754_rem_pio2f+0x128>
 802d392:	2303      	movs	r3, #3
 802d394:	e7e5      	b.n	802d362 <__ieee754_rem_pio2f+0x1f2>
 802d396:	bf00      	nop
 802d398:	3f490fd8 	.word	0x3f490fd8
 802d39c:	4016cbe3 	.word	0x4016cbe3
 802d3a0:	3fc90f80 	.word	0x3fc90f80
 802d3a4:	3fc90fd0 	.word	0x3fc90fd0
 802d3a8:	37354400 	.word	0x37354400
 802d3ac:	37354443 	.word	0x37354443
 802d3b0:	2e85a308 	.word	0x2e85a308
 802d3b4:	43490f80 	.word	0x43490f80
 802d3b8:	3f22f984 	.word	0x3f22f984
 802d3bc:	0803277c 	.word	0x0803277c
 802d3c0:	2e85a300 	.word	0x2e85a300
 802d3c4:	248d3132 	.word	0x248d3132
 802d3c8:	43800000 	.word	0x43800000
 802d3cc:	080327fc 	.word	0x080327fc

0802d3d0 <fabsf>:
 802d3d0:	ee10 3a10 	vmov	r3, s0
 802d3d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802d3d8:	ee00 3a10 	vmov	s0, r3
 802d3dc:	4770      	bx	lr
	...

0802d3e0 <scalbnf>:
 802d3e0:	ee10 3a10 	vmov	r3, s0
 802d3e4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802d3e8:	d02b      	beq.n	802d442 <scalbnf+0x62>
 802d3ea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802d3ee:	d302      	bcc.n	802d3f6 <scalbnf+0x16>
 802d3f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d3f4:	4770      	bx	lr
 802d3f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802d3fa:	d123      	bne.n	802d444 <scalbnf+0x64>
 802d3fc:	4b24      	ldr	r3, [pc, #144]	@ (802d490 <scalbnf+0xb0>)
 802d3fe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 802d494 <scalbnf+0xb4>
 802d402:	4298      	cmp	r0, r3
 802d404:	ee20 0a27 	vmul.f32	s0, s0, s15
 802d408:	db17      	blt.n	802d43a <scalbnf+0x5a>
 802d40a:	ee10 3a10 	vmov	r3, s0
 802d40e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d412:	3a19      	subs	r2, #25
 802d414:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802d418:	4288      	cmp	r0, r1
 802d41a:	dd15      	ble.n	802d448 <scalbnf+0x68>
 802d41c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 802d498 <scalbnf+0xb8>
 802d420:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 802d49c <scalbnf+0xbc>
 802d424:	ee10 3a10 	vmov	r3, s0
 802d428:	eeb0 7a67 	vmov.f32	s14, s15
 802d42c:	2b00      	cmp	r3, #0
 802d42e:	bfb8      	it	lt
 802d430:	eef0 7a66 	vmovlt.f32	s15, s13
 802d434:	ee27 0a87 	vmul.f32	s0, s15, s14
 802d438:	4770      	bx	lr
 802d43a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802d4a0 <scalbnf+0xc0>
 802d43e:	ee27 0a80 	vmul.f32	s0, s15, s0
 802d442:	4770      	bx	lr
 802d444:	0dd2      	lsrs	r2, r2, #23
 802d446:	e7e5      	b.n	802d414 <scalbnf+0x34>
 802d448:	4410      	add	r0, r2
 802d44a:	28fe      	cmp	r0, #254	@ 0xfe
 802d44c:	dce6      	bgt.n	802d41c <scalbnf+0x3c>
 802d44e:	2800      	cmp	r0, #0
 802d450:	dd06      	ble.n	802d460 <scalbnf+0x80>
 802d452:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d456:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802d45a:	ee00 3a10 	vmov	s0, r3
 802d45e:	4770      	bx	lr
 802d460:	f110 0f16 	cmn.w	r0, #22
 802d464:	da09      	bge.n	802d47a <scalbnf+0x9a>
 802d466:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 802d4a0 <scalbnf+0xc0>
 802d46a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 802d4a4 <scalbnf+0xc4>
 802d46e:	ee10 3a10 	vmov	r3, s0
 802d472:	eeb0 7a67 	vmov.f32	s14, s15
 802d476:	2b00      	cmp	r3, #0
 802d478:	e7d9      	b.n	802d42e <scalbnf+0x4e>
 802d47a:	3019      	adds	r0, #25
 802d47c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d480:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802d484:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 802d4a8 <scalbnf+0xc8>
 802d488:	ee07 3a90 	vmov	s15, r3
 802d48c:	e7d7      	b.n	802d43e <scalbnf+0x5e>
 802d48e:	bf00      	nop
 802d490:	ffff3cb0 	.word	0xffff3cb0
 802d494:	4c000000 	.word	0x4c000000
 802d498:	7149f2ca 	.word	0x7149f2ca
 802d49c:	f149f2ca 	.word	0xf149f2ca
 802d4a0:	0da24260 	.word	0x0da24260
 802d4a4:	8da24260 	.word	0x8da24260
 802d4a8:	33000000 	.word	0x33000000

0802d4ac <__kernel_rem_pio2f>:
 802d4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d4b0:	ed2d 8b04 	vpush	{d8-d9}
 802d4b4:	b0d9      	sub	sp, #356	@ 0x164
 802d4b6:	4690      	mov	r8, r2
 802d4b8:	9001      	str	r0, [sp, #4]
 802d4ba:	4ab6      	ldr	r2, [pc, #728]	@ (802d794 <__kernel_rem_pio2f+0x2e8>)
 802d4bc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802d4be:	f118 0f04 	cmn.w	r8, #4
 802d4c2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802d4c6:	460f      	mov	r7, r1
 802d4c8:	f103 3bff 	add.w	fp, r3, #4294967295
 802d4cc:	db26      	blt.n	802d51c <__kernel_rem_pio2f+0x70>
 802d4ce:	f1b8 0203 	subs.w	r2, r8, #3
 802d4d2:	bf48      	it	mi
 802d4d4:	f108 0204 	addmi.w	r2, r8, #4
 802d4d8:	10d2      	asrs	r2, r2, #3
 802d4da:	1c55      	adds	r5, r2, #1
 802d4dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802d4de:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d4e2:	00e8      	lsls	r0, r5, #3
 802d4e4:	eba2 060b 	sub.w	r6, r2, fp
 802d4e8:	9002      	str	r0, [sp, #8]
 802d4ea:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802d4ee:	eb0a 0c0b 	add.w	ip, sl, fp
 802d4f2:	ac1c      	add	r4, sp, #112	@ 0x70
 802d4f4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802d4f8:	2000      	movs	r0, #0
 802d4fa:	4560      	cmp	r0, ip
 802d4fc:	dd10      	ble.n	802d520 <__kernel_rem_pio2f+0x74>
 802d4fe:	a91c      	add	r1, sp, #112	@ 0x70
 802d500:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802d504:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802d508:	2600      	movs	r6, #0
 802d50a:	4556      	cmp	r6, sl
 802d50c:	dc24      	bgt.n	802d558 <__kernel_rem_pio2f+0xac>
 802d50e:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d512:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d516:	4684      	mov	ip, r0
 802d518:	2400      	movs	r4, #0
 802d51a:	e016      	b.n	802d54a <__kernel_rem_pio2f+0x9e>
 802d51c:	2200      	movs	r2, #0
 802d51e:	e7dc      	b.n	802d4da <__kernel_rem_pio2f+0x2e>
 802d520:	42c6      	cmn	r6, r0
 802d522:	bf5d      	ittte	pl
 802d524:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802d528:	ee07 1a90 	vmovpl	s15, r1
 802d52c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d530:	eef0 7a47 	vmovmi.f32	s15, s14
 802d534:	ece4 7a01 	vstmia	r4!, {s15}
 802d538:	3001      	adds	r0, #1
 802d53a:	e7de      	b.n	802d4fa <__kernel_rem_pio2f+0x4e>
 802d53c:	ecfe 6a01 	vldmia	lr!, {s13}
 802d540:	ed3c 7a01 	vldmdb	ip!, {s14}
 802d544:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d548:	3401      	adds	r4, #1
 802d54a:	455c      	cmp	r4, fp
 802d54c:	ddf6      	ble.n	802d53c <__kernel_rem_pio2f+0x90>
 802d54e:	ece9 7a01 	vstmia	r9!, {s15}
 802d552:	3601      	adds	r6, #1
 802d554:	3004      	adds	r0, #4
 802d556:	e7d8      	b.n	802d50a <__kernel_rem_pio2f+0x5e>
 802d558:	a908      	add	r1, sp, #32
 802d55a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802d55e:	9104      	str	r1, [sp, #16]
 802d560:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802d562:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 802d7a0 <__kernel_rem_pio2f+0x2f4>
 802d566:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802d79c <__kernel_rem_pio2f+0x2f0>
 802d56a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802d56e:	9203      	str	r2, [sp, #12]
 802d570:	4654      	mov	r4, sl
 802d572:	00a2      	lsls	r2, r4, #2
 802d574:	9205      	str	r2, [sp, #20]
 802d576:	aa58      	add	r2, sp, #352	@ 0x160
 802d578:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802d57c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802d580:	a944      	add	r1, sp, #272	@ 0x110
 802d582:	aa08      	add	r2, sp, #32
 802d584:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802d588:	4694      	mov	ip, r2
 802d58a:	4626      	mov	r6, r4
 802d58c:	2e00      	cmp	r6, #0
 802d58e:	dc4c      	bgt.n	802d62a <__kernel_rem_pio2f+0x17e>
 802d590:	4628      	mov	r0, r5
 802d592:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802d596:	f7ff ff23 	bl	802d3e0 <scalbnf>
 802d59a:	eeb0 8a40 	vmov.f32	s16, s0
 802d59e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802d5a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d5a6:	f000 f9e9 	bl	802d97c <floorf>
 802d5aa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802d5ae:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d5b2:	2d00      	cmp	r5, #0
 802d5b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802d5b8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d5bc:	ee17 9a90 	vmov	r9, s15
 802d5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d5c4:	ee38 8a67 	vsub.f32	s16, s16, s15
 802d5c8:	dd41      	ble.n	802d64e <__kernel_rem_pio2f+0x1a2>
 802d5ca:	f104 3cff 	add.w	ip, r4, #4294967295
 802d5ce:	a908      	add	r1, sp, #32
 802d5d0:	f1c5 0e08 	rsb	lr, r5, #8
 802d5d4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802d5d8:	fa46 f00e 	asr.w	r0, r6, lr
 802d5dc:	4481      	add	r9, r0
 802d5de:	fa00 f00e 	lsl.w	r0, r0, lr
 802d5e2:	1a36      	subs	r6, r6, r0
 802d5e4:	f1c5 0007 	rsb	r0, r5, #7
 802d5e8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802d5ec:	4106      	asrs	r6, r0
 802d5ee:	2e00      	cmp	r6, #0
 802d5f0:	dd3c      	ble.n	802d66c <__kernel_rem_pio2f+0x1c0>
 802d5f2:	f04f 0e00 	mov.w	lr, #0
 802d5f6:	f109 0901 	add.w	r9, r9, #1
 802d5fa:	4670      	mov	r0, lr
 802d5fc:	4574      	cmp	r4, lr
 802d5fe:	dc68      	bgt.n	802d6d2 <__kernel_rem_pio2f+0x226>
 802d600:	2d00      	cmp	r5, #0
 802d602:	dd03      	ble.n	802d60c <__kernel_rem_pio2f+0x160>
 802d604:	2d01      	cmp	r5, #1
 802d606:	d074      	beq.n	802d6f2 <__kernel_rem_pio2f+0x246>
 802d608:	2d02      	cmp	r5, #2
 802d60a:	d07d      	beq.n	802d708 <__kernel_rem_pio2f+0x25c>
 802d60c:	2e02      	cmp	r6, #2
 802d60e:	d12d      	bne.n	802d66c <__kernel_rem_pio2f+0x1c0>
 802d610:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d614:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d618:	b340      	cbz	r0, 802d66c <__kernel_rem_pio2f+0x1c0>
 802d61a:	4628      	mov	r0, r5
 802d61c:	9306      	str	r3, [sp, #24]
 802d61e:	f7ff fedf 	bl	802d3e0 <scalbnf>
 802d622:	9b06      	ldr	r3, [sp, #24]
 802d624:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d628:	e020      	b.n	802d66c <__kernel_rem_pio2f+0x1c0>
 802d62a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d62e:	3e01      	subs	r6, #1
 802d630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d638:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d63c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d640:	ecac 0a01 	vstmia	ip!, {s0}
 802d644:	ed30 0a01 	vldmdb	r0!, {s0}
 802d648:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d64c:	e79e      	b.n	802d58c <__kernel_rem_pio2f+0xe0>
 802d64e:	d105      	bne.n	802d65c <__kernel_rem_pio2f+0x1b0>
 802d650:	1e60      	subs	r0, r4, #1
 802d652:	a908      	add	r1, sp, #32
 802d654:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802d658:	11f6      	asrs	r6, r6, #7
 802d65a:	e7c8      	b.n	802d5ee <__kernel_rem_pio2f+0x142>
 802d65c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d660:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d668:	da31      	bge.n	802d6ce <__kernel_rem_pio2f+0x222>
 802d66a:	2600      	movs	r6, #0
 802d66c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d674:	f040 8098 	bne.w	802d7a8 <__kernel_rem_pio2f+0x2fc>
 802d678:	1e60      	subs	r0, r4, #1
 802d67a:	2200      	movs	r2, #0
 802d67c:	4550      	cmp	r0, sl
 802d67e:	da4b      	bge.n	802d718 <__kernel_rem_pio2f+0x26c>
 802d680:	2a00      	cmp	r2, #0
 802d682:	d065      	beq.n	802d750 <__kernel_rem_pio2f+0x2a4>
 802d684:	3c01      	subs	r4, #1
 802d686:	ab08      	add	r3, sp, #32
 802d688:	3d08      	subs	r5, #8
 802d68a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802d68e:	2b00      	cmp	r3, #0
 802d690:	d0f8      	beq.n	802d684 <__kernel_rem_pio2f+0x1d8>
 802d692:	4628      	mov	r0, r5
 802d694:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d698:	f7ff fea2 	bl	802d3e0 <scalbnf>
 802d69c:	1c63      	adds	r3, r4, #1
 802d69e:	aa44      	add	r2, sp, #272	@ 0x110
 802d6a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802d7a0 <__kernel_rem_pio2f+0x2f4>
 802d6a4:	0099      	lsls	r1, r3, #2
 802d6a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802d6aa:	4623      	mov	r3, r4
 802d6ac:	2b00      	cmp	r3, #0
 802d6ae:	f280 80a9 	bge.w	802d804 <__kernel_rem_pio2f+0x358>
 802d6b2:	4623      	mov	r3, r4
 802d6b4:	2b00      	cmp	r3, #0
 802d6b6:	f2c0 80c7 	blt.w	802d848 <__kernel_rem_pio2f+0x39c>
 802d6ba:	aa44      	add	r2, sp, #272	@ 0x110
 802d6bc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802d6c0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 802d798 <__kernel_rem_pio2f+0x2ec>
 802d6c4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d6c8:	2000      	movs	r0, #0
 802d6ca:	1ae2      	subs	r2, r4, r3
 802d6cc:	e0b1      	b.n	802d832 <__kernel_rem_pio2f+0x386>
 802d6ce:	2602      	movs	r6, #2
 802d6d0:	e78f      	b.n	802d5f2 <__kernel_rem_pio2f+0x146>
 802d6d2:	f852 1b04 	ldr.w	r1, [r2], #4
 802d6d6:	b948      	cbnz	r0, 802d6ec <__kernel_rem_pio2f+0x240>
 802d6d8:	b121      	cbz	r1, 802d6e4 <__kernel_rem_pio2f+0x238>
 802d6da:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802d6de:	f842 1c04 	str.w	r1, [r2, #-4]
 802d6e2:	2101      	movs	r1, #1
 802d6e4:	f10e 0e01 	add.w	lr, lr, #1
 802d6e8:	4608      	mov	r0, r1
 802d6ea:	e787      	b.n	802d5fc <__kernel_rem_pio2f+0x150>
 802d6ec:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802d6f0:	e7f5      	b.n	802d6de <__kernel_rem_pio2f+0x232>
 802d6f2:	f104 3cff 	add.w	ip, r4, #4294967295
 802d6f6:	aa08      	add	r2, sp, #32
 802d6f8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d6fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802d700:	a908      	add	r1, sp, #32
 802d702:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802d706:	e781      	b.n	802d60c <__kernel_rem_pio2f+0x160>
 802d708:	f104 3cff 	add.w	ip, r4, #4294967295
 802d70c:	aa08      	add	r2, sp, #32
 802d70e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d712:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802d716:	e7f3      	b.n	802d700 <__kernel_rem_pio2f+0x254>
 802d718:	a908      	add	r1, sp, #32
 802d71a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802d71e:	3801      	subs	r0, #1
 802d720:	430a      	orrs	r2, r1
 802d722:	e7ab      	b.n	802d67c <__kernel_rem_pio2f+0x1d0>
 802d724:	3201      	adds	r2, #1
 802d726:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802d72a:	2e00      	cmp	r6, #0
 802d72c:	d0fa      	beq.n	802d724 <__kernel_rem_pio2f+0x278>
 802d72e:	9905      	ldr	r1, [sp, #20]
 802d730:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802d734:	eb0d 0001 	add.w	r0, sp, r1
 802d738:	18e6      	adds	r6, r4, r3
 802d73a:	a91c      	add	r1, sp, #112	@ 0x70
 802d73c:	f104 0c01 	add.w	ip, r4, #1
 802d740:	384c      	subs	r0, #76	@ 0x4c
 802d742:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802d746:	4422      	add	r2, r4
 802d748:	4562      	cmp	r2, ip
 802d74a:	da04      	bge.n	802d756 <__kernel_rem_pio2f+0x2aa>
 802d74c:	4614      	mov	r4, r2
 802d74e:	e710      	b.n	802d572 <__kernel_rem_pio2f+0xc6>
 802d750:	9804      	ldr	r0, [sp, #16]
 802d752:	2201      	movs	r2, #1
 802d754:	e7e7      	b.n	802d726 <__kernel_rem_pio2f+0x27a>
 802d756:	9903      	ldr	r1, [sp, #12]
 802d758:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d75c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802d760:	9105      	str	r1, [sp, #20]
 802d762:	ee07 1a90 	vmov	s15, r1
 802d766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d76a:	2400      	movs	r4, #0
 802d76c:	ece6 7a01 	vstmia	r6!, {s15}
 802d770:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d774:	46b1      	mov	r9, r6
 802d776:	455c      	cmp	r4, fp
 802d778:	dd04      	ble.n	802d784 <__kernel_rem_pio2f+0x2d8>
 802d77a:	ece0 7a01 	vstmia	r0!, {s15}
 802d77e:	f10c 0c01 	add.w	ip, ip, #1
 802d782:	e7e1      	b.n	802d748 <__kernel_rem_pio2f+0x29c>
 802d784:	ecfe 6a01 	vldmia	lr!, {s13}
 802d788:	ed39 7a01 	vldmdb	r9!, {s14}
 802d78c:	3401      	adds	r4, #1
 802d78e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d792:	e7f0      	b.n	802d776 <__kernel_rem_pio2f+0x2ca>
 802d794:	08032b40 	.word	0x08032b40
 802d798:	08032b14 	.word	0x08032b14
 802d79c:	43800000 	.word	0x43800000
 802d7a0:	3b800000 	.word	0x3b800000
 802d7a4:	00000000 	.word	0x00000000
 802d7a8:	9b02      	ldr	r3, [sp, #8]
 802d7aa:	eeb0 0a48 	vmov.f32	s0, s16
 802d7ae:	eba3 0008 	sub.w	r0, r3, r8
 802d7b2:	f7ff fe15 	bl	802d3e0 <scalbnf>
 802d7b6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802d79c <__kernel_rem_pio2f+0x2f0>
 802d7ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802d7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d7c2:	db19      	blt.n	802d7f8 <__kernel_rem_pio2f+0x34c>
 802d7c4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802d7a0 <__kernel_rem_pio2f+0x2f4>
 802d7c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 802d7cc:	aa08      	add	r2, sp, #32
 802d7ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d7d2:	3508      	adds	r5, #8
 802d7d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d7d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802d7dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d7e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d7e4:	ee10 3a10 	vmov	r3, s0
 802d7e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d7ec:	ee17 3a90 	vmov	r3, s15
 802d7f0:	3401      	adds	r4, #1
 802d7f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d7f6:	e74c      	b.n	802d692 <__kernel_rem_pio2f+0x1e6>
 802d7f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d7fc:	aa08      	add	r2, sp, #32
 802d7fe:	ee10 3a10 	vmov	r3, s0
 802d802:	e7f6      	b.n	802d7f2 <__kernel_rem_pio2f+0x346>
 802d804:	a808      	add	r0, sp, #32
 802d806:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802d80a:	9001      	str	r0, [sp, #4]
 802d80c:	ee07 0a90 	vmov	s15, r0
 802d810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d814:	3b01      	subs	r3, #1
 802d816:	ee67 7a80 	vmul.f32	s15, s15, s0
 802d81a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802d81e:	ed62 7a01 	vstmdb	r2!, {s15}
 802d822:	e743      	b.n	802d6ac <__kernel_rem_pio2f+0x200>
 802d824:	ecfc 6a01 	vldmia	ip!, {s13}
 802d828:	ecb5 7a01 	vldmia	r5!, {s14}
 802d82c:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d830:	3001      	adds	r0, #1
 802d832:	4550      	cmp	r0, sl
 802d834:	dc01      	bgt.n	802d83a <__kernel_rem_pio2f+0x38e>
 802d836:	4290      	cmp	r0, r2
 802d838:	ddf4      	ble.n	802d824 <__kernel_rem_pio2f+0x378>
 802d83a:	a858      	add	r0, sp, #352	@ 0x160
 802d83c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802d840:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802d844:	3b01      	subs	r3, #1
 802d846:	e735      	b.n	802d6b4 <__kernel_rem_pio2f+0x208>
 802d848:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802d84a:	2b02      	cmp	r3, #2
 802d84c:	dc09      	bgt.n	802d862 <__kernel_rem_pio2f+0x3b6>
 802d84e:	2b00      	cmp	r3, #0
 802d850:	dc27      	bgt.n	802d8a2 <__kernel_rem_pio2f+0x3f6>
 802d852:	d040      	beq.n	802d8d6 <__kernel_rem_pio2f+0x42a>
 802d854:	f009 0007 	and.w	r0, r9, #7
 802d858:	b059      	add	sp, #356	@ 0x164
 802d85a:	ecbd 8b04 	vpop	{d8-d9}
 802d85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d862:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802d864:	2b03      	cmp	r3, #3
 802d866:	d1f5      	bne.n	802d854 <__kernel_rem_pio2f+0x3a8>
 802d868:	aa30      	add	r2, sp, #192	@ 0xc0
 802d86a:	1f0b      	subs	r3, r1, #4
 802d86c:	4413      	add	r3, r2
 802d86e:	461a      	mov	r2, r3
 802d870:	4620      	mov	r0, r4
 802d872:	2800      	cmp	r0, #0
 802d874:	dc50      	bgt.n	802d918 <__kernel_rem_pio2f+0x46c>
 802d876:	4622      	mov	r2, r4
 802d878:	2a01      	cmp	r2, #1
 802d87a:	dc5d      	bgt.n	802d938 <__kernel_rem_pio2f+0x48c>
 802d87c:	ab30      	add	r3, sp, #192	@ 0xc0
 802d87e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d882:	440b      	add	r3, r1
 802d884:	2c01      	cmp	r4, #1
 802d886:	dc67      	bgt.n	802d958 <__kernel_rem_pio2f+0x4ac>
 802d888:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802d88c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802d890:	2e00      	cmp	r6, #0
 802d892:	d167      	bne.n	802d964 <__kernel_rem_pio2f+0x4b8>
 802d894:	edc7 6a00 	vstr	s13, [r7]
 802d898:	ed87 7a01 	vstr	s14, [r7, #4]
 802d89c:	edc7 7a02 	vstr	s15, [r7, #8]
 802d8a0:	e7d8      	b.n	802d854 <__kernel_rem_pio2f+0x3a8>
 802d8a2:	ab30      	add	r3, sp, #192	@ 0xc0
 802d8a4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d8a8:	440b      	add	r3, r1
 802d8aa:	4622      	mov	r2, r4
 802d8ac:	2a00      	cmp	r2, #0
 802d8ae:	da24      	bge.n	802d8fa <__kernel_rem_pio2f+0x44e>
 802d8b0:	b34e      	cbz	r6, 802d906 <__kernel_rem_pio2f+0x45a>
 802d8b2:	eef1 7a47 	vneg.f32	s15, s14
 802d8b6:	edc7 7a00 	vstr	s15, [r7]
 802d8ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802d8be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d8c2:	aa31      	add	r2, sp, #196	@ 0xc4
 802d8c4:	2301      	movs	r3, #1
 802d8c6:	429c      	cmp	r4, r3
 802d8c8:	da20      	bge.n	802d90c <__kernel_rem_pio2f+0x460>
 802d8ca:	b10e      	cbz	r6, 802d8d0 <__kernel_rem_pio2f+0x424>
 802d8cc:	eef1 7a67 	vneg.f32	s15, s15
 802d8d0:	edc7 7a01 	vstr	s15, [r7, #4]
 802d8d4:	e7be      	b.n	802d854 <__kernel_rem_pio2f+0x3a8>
 802d8d6:	ab30      	add	r3, sp, #192	@ 0xc0
 802d8d8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802d7a4 <__kernel_rem_pio2f+0x2f8>
 802d8dc:	440b      	add	r3, r1
 802d8de:	2c00      	cmp	r4, #0
 802d8e0:	da05      	bge.n	802d8ee <__kernel_rem_pio2f+0x442>
 802d8e2:	b10e      	cbz	r6, 802d8e8 <__kernel_rem_pio2f+0x43c>
 802d8e4:	eef1 7a67 	vneg.f32	s15, s15
 802d8e8:	edc7 7a00 	vstr	s15, [r7]
 802d8ec:	e7b2      	b.n	802d854 <__kernel_rem_pio2f+0x3a8>
 802d8ee:	ed33 7a01 	vldmdb	r3!, {s14}
 802d8f2:	3c01      	subs	r4, #1
 802d8f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d8f8:	e7f1      	b.n	802d8de <__kernel_rem_pio2f+0x432>
 802d8fa:	ed73 7a01 	vldmdb	r3!, {s15}
 802d8fe:	3a01      	subs	r2, #1
 802d900:	ee37 7a27 	vadd.f32	s14, s14, s15
 802d904:	e7d2      	b.n	802d8ac <__kernel_rem_pio2f+0x400>
 802d906:	eef0 7a47 	vmov.f32	s15, s14
 802d90a:	e7d4      	b.n	802d8b6 <__kernel_rem_pio2f+0x40a>
 802d90c:	ecb2 7a01 	vldmia	r2!, {s14}
 802d910:	3301      	adds	r3, #1
 802d912:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d916:	e7d6      	b.n	802d8c6 <__kernel_rem_pio2f+0x41a>
 802d918:	ed72 7a01 	vldmdb	r2!, {s15}
 802d91c:	edd2 6a01 	vldr	s13, [r2, #4]
 802d920:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d924:	3801      	subs	r0, #1
 802d926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d92a:	ed82 7a00 	vstr	s14, [r2]
 802d92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d932:	edc2 7a01 	vstr	s15, [r2, #4]
 802d936:	e79c      	b.n	802d872 <__kernel_rem_pio2f+0x3c6>
 802d938:	ed73 7a01 	vldmdb	r3!, {s15}
 802d93c:	edd3 6a01 	vldr	s13, [r3, #4]
 802d940:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d944:	3a01      	subs	r2, #1
 802d946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d94a:	ed83 7a00 	vstr	s14, [r3]
 802d94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d952:	edc3 7a01 	vstr	s15, [r3, #4]
 802d956:	e78f      	b.n	802d878 <__kernel_rem_pio2f+0x3cc>
 802d958:	ed33 7a01 	vldmdb	r3!, {s14}
 802d95c:	3c01      	subs	r4, #1
 802d95e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d962:	e78f      	b.n	802d884 <__kernel_rem_pio2f+0x3d8>
 802d964:	eef1 6a66 	vneg.f32	s13, s13
 802d968:	eeb1 7a47 	vneg.f32	s14, s14
 802d96c:	edc7 6a00 	vstr	s13, [r7]
 802d970:	ed87 7a01 	vstr	s14, [r7, #4]
 802d974:	eef1 7a67 	vneg.f32	s15, s15
 802d978:	e790      	b.n	802d89c <__kernel_rem_pio2f+0x3f0>
 802d97a:	bf00      	nop

0802d97c <floorf>:
 802d97c:	ee10 3a10 	vmov	r3, s0
 802d980:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d984:	3a7f      	subs	r2, #127	@ 0x7f
 802d986:	2a16      	cmp	r2, #22
 802d988:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802d98c:	dc2b      	bgt.n	802d9e6 <floorf+0x6a>
 802d98e:	2a00      	cmp	r2, #0
 802d990:	da12      	bge.n	802d9b8 <floorf+0x3c>
 802d992:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802d9f8 <floorf+0x7c>
 802d996:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d99a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d9a2:	dd06      	ble.n	802d9b2 <floorf+0x36>
 802d9a4:	2b00      	cmp	r3, #0
 802d9a6:	da24      	bge.n	802d9f2 <floorf+0x76>
 802d9a8:	2900      	cmp	r1, #0
 802d9aa:	4b14      	ldr	r3, [pc, #80]	@ (802d9fc <floorf+0x80>)
 802d9ac:	bf08      	it	eq
 802d9ae:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 802d9b2:	ee00 3a10 	vmov	s0, r3
 802d9b6:	4770      	bx	lr
 802d9b8:	4911      	ldr	r1, [pc, #68]	@ (802da00 <floorf+0x84>)
 802d9ba:	4111      	asrs	r1, r2
 802d9bc:	420b      	tst	r3, r1
 802d9be:	d0fa      	beq.n	802d9b6 <floorf+0x3a>
 802d9c0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802d9f8 <floorf+0x7c>
 802d9c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d9c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d9d0:	ddef      	ble.n	802d9b2 <floorf+0x36>
 802d9d2:	2b00      	cmp	r3, #0
 802d9d4:	bfbe      	ittt	lt
 802d9d6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 802d9da:	fa40 f202 	asrlt.w	r2, r0, r2
 802d9de:	189b      	addlt	r3, r3, r2
 802d9e0:	ea23 0301 	bic.w	r3, r3, r1
 802d9e4:	e7e5      	b.n	802d9b2 <floorf+0x36>
 802d9e6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802d9ea:	d3e4      	bcc.n	802d9b6 <floorf+0x3a>
 802d9ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d9f0:	4770      	bx	lr
 802d9f2:	2300      	movs	r3, #0
 802d9f4:	e7dd      	b.n	802d9b2 <floorf+0x36>
 802d9f6:	bf00      	nop
 802d9f8:	7149f2ca 	.word	0x7149f2ca
 802d9fc:	bf800000 	.word	0xbf800000
 802da00:	007fffff 	.word	0x007fffff

0802da04 <abort>:
 802da04:	b508      	push	{r3, lr}
 802da06:	2006      	movs	r0, #6
 802da08:	f000 fb40 	bl	802e08c <raise>
 802da0c:	2001      	movs	r0, #1
 802da0e:	f7d5 f9ed 	bl	8002dec <_exit>
	...

0802da14 <__assert_func>:
 802da14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802da16:	4614      	mov	r4, r2
 802da18:	461a      	mov	r2, r3
 802da1a:	4b09      	ldr	r3, [pc, #36]	@ (802da40 <__assert_func+0x2c>)
 802da1c:	681b      	ldr	r3, [r3, #0]
 802da1e:	4605      	mov	r5, r0
 802da20:	68d8      	ldr	r0, [r3, #12]
 802da22:	b14c      	cbz	r4, 802da38 <__assert_func+0x24>
 802da24:	4b07      	ldr	r3, [pc, #28]	@ (802da44 <__assert_func+0x30>)
 802da26:	9100      	str	r1, [sp, #0]
 802da28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802da2c:	4906      	ldr	r1, [pc, #24]	@ (802da48 <__assert_func+0x34>)
 802da2e:	462b      	mov	r3, r5
 802da30:	f000 f984 	bl	802dd3c <fiprintf>
 802da34:	f7ff ffe6 	bl	802da04 <abort>
 802da38:	4b04      	ldr	r3, [pc, #16]	@ (802da4c <__assert_func+0x38>)
 802da3a:	461c      	mov	r4, r3
 802da3c:	e7f3      	b.n	802da26 <__assert_func+0x12>
 802da3e:	bf00      	nop
 802da40:	200000a4 	.word	0x200000a4
 802da44:	0803105f 	.word	0x0803105f
 802da48:	0803106c 	.word	0x0803106c
 802da4c:	0803109a 	.word	0x0803109a

0802da50 <atexit>:
 802da50:	2300      	movs	r3, #0
 802da52:	4601      	mov	r1, r0
 802da54:	461a      	mov	r2, r3
 802da56:	4618      	mov	r0, r3
 802da58:	f000 bc24 	b.w	802e2a4 <__register_exitproc>

0802da5c <malloc>:
 802da5c:	4b02      	ldr	r3, [pc, #8]	@ (802da68 <malloc+0xc>)
 802da5e:	4601      	mov	r1, r0
 802da60:	6818      	ldr	r0, [r3, #0]
 802da62:	f000 b82d 	b.w	802dac0 <_malloc_r>
 802da66:	bf00      	nop
 802da68:	200000a4 	.word	0x200000a4

0802da6c <free>:
 802da6c:	4b02      	ldr	r3, [pc, #8]	@ (802da78 <free+0xc>)
 802da6e:	4601      	mov	r1, r0
 802da70:	6818      	ldr	r0, [r3, #0]
 802da72:	f000 bc73 	b.w	802e35c <_free_r>
 802da76:	bf00      	nop
 802da78:	200000a4 	.word	0x200000a4

0802da7c <sbrk_aligned>:
 802da7c:	b570      	push	{r4, r5, r6, lr}
 802da7e:	4e0f      	ldr	r6, [pc, #60]	@ (802dabc <sbrk_aligned+0x40>)
 802da80:	460c      	mov	r4, r1
 802da82:	6831      	ldr	r1, [r6, #0]
 802da84:	4605      	mov	r5, r0
 802da86:	b911      	cbnz	r1, 802da8e <sbrk_aligned+0x12>
 802da88:	f000 fbae 	bl	802e1e8 <_sbrk_r>
 802da8c:	6030      	str	r0, [r6, #0]
 802da8e:	4621      	mov	r1, r4
 802da90:	4628      	mov	r0, r5
 802da92:	f000 fba9 	bl	802e1e8 <_sbrk_r>
 802da96:	1c43      	adds	r3, r0, #1
 802da98:	d103      	bne.n	802daa2 <sbrk_aligned+0x26>
 802da9a:	f04f 34ff 	mov.w	r4, #4294967295
 802da9e:	4620      	mov	r0, r4
 802daa0:	bd70      	pop	{r4, r5, r6, pc}
 802daa2:	1cc4      	adds	r4, r0, #3
 802daa4:	f024 0403 	bic.w	r4, r4, #3
 802daa8:	42a0      	cmp	r0, r4
 802daaa:	d0f8      	beq.n	802da9e <sbrk_aligned+0x22>
 802daac:	1a21      	subs	r1, r4, r0
 802daae:	4628      	mov	r0, r5
 802dab0:	f000 fb9a 	bl	802e1e8 <_sbrk_r>
 802dab4:	3001      	adds	r0, #1
 802dab6:	d1f2      	bne.n	802da9e <sbrk_aligned+0x22>
 802dab8:	e7ef      	b.n	802da9a <sbrk_aligned+0x1e>
 802daba:	bf00      	nop
 802dabc:	20012d20 	.word	0x20012d20

0802dac0 <_malloc_r>:
 802dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dac4:	1ccd      	adds	r5, r1, #3
 802dac6:	f025 0503 	bic.w	r5, r5, #3
 802daca:	3508      	adds	r5, #8
 802dacc:	2d0c      	cmp	r5, #12
 802dace:	bf38      	it	cc
 802dad0:	250c      	movcc	r5, #12
 802dad2:	2d00      	cmp	r5, #0
 802dad4:	4606      	mov	r6, r0
 802dad6:	db01      	blt.n	802dadc <_malloc_r+0x1c>
 802dad8:	42a9      	cmp	r1, r5
 802dada:	d904      	bls.n	802dae6 <_malloc_r+0x26>
 802dadc:	230c      	movs	r3, #12
 802dade:	6033      	str	r3, [r6, #0]
 802dae0:	2000      	movs	r0, #0
 802dae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802dbbc <_malloc_r+0xfc>
 802daea:	f000 f869 	bl	802dbc0 <__malloc_lock>
 802daee:	f8d8 3000 	ldr.w	r3, [r8]
 802daf2:	461c      	mov	r4, r3
 802daf4:	bb44      	cbnz	r4, 802db48 <_malloc_r+0x88>
 802daf6:	4629      	mov	r1, r5
 802daf8:	4630      	mov	r0, r6
 802dafa:	f7ff ffbf 	bl	802da7c <sbrk_aligned>
 802dafe:	1c43      	adds	r3, r0, #1
 802db00:	4604      	mov	r4, r0
 802db02:	d158      	bne.n	802dbb6 <_malloc_r+0xf6>
 802db04:	f8d8 4000 	ldr.w	r4, [r8]
 802db08:	4627      	mov	r7, r4
 802db0a:	2f00      	cmp	r7, #0
 802db0c:	d143      	bne.n	802db96 <_malloc_r+0xd6>
 802db0e:	2c00      	cmp	r4, #0
 802db10:	d04b      	beq.n	802dbaa <_malloc_r+0xea>
 802db12:	6823      	ldr	r3, [r4, #0]
 802db14:	4639      	mov	r1, r7
 802db16:	4630      	mov	r0, r6
 802db18:	eb04 0903 	add.w	r9, r4, r3
 802db1c:	f000 fb64 	bl	802e1e8 <_sbrk_r>
 802db20:	4581      	cmp	r9, r0
 802db22:	d142      	bne.n	802dbaa <_malloc_r+0xea>
 802db24:	6821      	ldr	r1, [r4, #0]
 802db26:	1a6d      	subs	r5, r5, r1
 802db28:	4629      	mov	r1, r5
 802db2a:	4630      	mov	r0, r6
 802db2c:	f7ff ffa6 	bl	802da7c <sbrk_aligned>
 802db30:	3001      	adds	r0, #1
 802db32:	d03a      	beq.n	802dbaa <_malloc_r+0xea>
 802db34:	6823      	ldr	r3, [r4, #0]
 802db36:	442b      	add	r3, r5
 802db38:	6023      	str	r3, [r4, #0]
 802db3a:	f8d8 3000 	ldr.w	r3, [r8]
 802db3e:	685a      	ldr	r2, [r3, #4]
 802db40:	bb62      	cbnz	r2, 802db9c <_malloc_r+0xdc>
 802db42:	f8c8 7000 	str.w	r7, [r8]
 802db46:	e00f      	b.n	802db68 <_malloc_r+0xa8>
 802db48:	6822      	ldr	r2, [r4, #0]
 802db4a:	1b52      	subs	r2, r2, r5
 802db4c:	d420      	bmi.n	802db90 <_malloc_r+0xd0>
 802db4e:	2a0b      	cmp	r2, #11
 802db50:	d917      	bls.n	802db82 <_malloc_r+0xc2>
 802db52:	1961      	adds	r1, r4, r5
 802db54:	42a3      	cmp	r3, r4
 802db56:	6025      	str	r5, [r4, #0]
 802db58:	bf18      	it	ne
 802db5a:	6059      	strne	r1, [r3, #4]
 802db5c:	6863      	ldr	r3, [r4, #4]
 802db5e:	bf08      	it	eq
 802db60:	f8c8 1000 	streq.w	r1, [r8]
 802db64:	5162      	str	r2, [r4, r5]
 802db66:	604b      	str	r3, [r1, #4]
 802db68:	4630      	mov	r0, r6
 802db6a:	f000 f82f 	bl	802dbcc <__malloc_unlock>
 802db6e:	f104 000b 	add.w	r0, r4, #11
 802db72:	1d23      	adds	r3, r4, #4
 802db74:	f020 0007 	bic.w	r0, r0, #7
 802db78:	1ac2      	subs	r2, r0, r3
 802db7a:	bf1c      	itt	ne
 802db7c:	1a1b      	subne	r3, r3, r0
 802db7e:	50a3      	strne	r3, [r4, r2]
 802db80:	e7af      	b.n	802dae2 <_malloc_r+0x22>
 802db82:	6862      	ldr	r2, [r4, #4]
 802db84:	42a3      	cmp	r3, r4
 802db86:	bf0c      	ite	eq
 802db88:	f8c8 2000 	streq.w	r2, [r8]
 802db8c:	605a      	strne	r2, [r3, #4]
 802db8e:	e7eb      	b.n	802db68 <_malloc_r+0xa8>
 802db90:	4623      	mov	r3, r4
 802db92:	6864      	ldr	r4, [r4, #4]
 802db94:	e7ae      	b.n	802daf4 <_malloc_r+0x34>
 802db96:	463c      	mov	r4, r7
 802db98:	687f      	ldr	r7, [r7, #4]
 802db9a:	e7b6      	b.n	802db0a <_malloc_r+0x4a>
 802db9c:	461a      	mov	r2, r3
 802db9e:	685b      	ldr	r3, [r3, #4]
 802dba0:	42a3      	cmp	r3, r4
 802dba2:	d1fb      	bne.n	802db9c <_malloc_r+0xdc>
 802dba4:	2300      	movs	r3, #0
 802dba6:	6053      	str	r3, [r2, #4]
 802dba8:	e7de      	b.n	802db68 <_malloc_r+0xa8>
 802dbaa:	230c      	movs	r3, #12
 802dbac:	6033      	str	r3, [r6, #0]
 802dbae:	4630      	mov	r0, r6
 802dbb0:	f000 f80c 	bl	802dbcc <__malloc_unlock>
 802dbb4:	e794      	b.n	802dae0 <_malloc_r+0x20>
 802dbb6:	6005      	str	r5, [r0, #0]
 802dbb8:	e7d6      	b.n	802db68 <_malloc_r+0xa8>
 802dbba:	bf00      	nop
 802dbbc:	20012d24 	.word	0x20012d24

0802dbc0 <__malloc_lock>:
 802dbc0:	4801      	ldr	r0, [pc, #4]	@ (802dbc8 <__malloc_lock+0x8>)
 802dbc2:	f000 bb5e 	b.w	802e282 <__retarget_lock_acquire_recursive>
 802dbc6:	bf00      	nop
 802dbc8:	20012e68 	.word	0x20012e68

0802dbcc <__malloc_unlock>:
 802dbcc:	4801      	ldr	r0, [pc, #4]	@ (802dbd4 <__malloc_unlock+0x8>)
 802dbce:	f000 bb59 	b.w	802e284 <__retarget_lock_release_recursive>
 802dbd2:	bf00      	nop
 802dbd4:	20012e68 	.word	0x20012e68

0802dbd8 <__cxa_atexit>:
 802dbd8:	b510      	push	{r4, lr}
 802dbda:	4604      	mov	r4, r0
 802dbdc:	4804      	ldr	r0, [pc, #16]	@ (802dbf0 <__cxa_atexit+0x18>)
 802dbde:	4613      	mov	r3, r2
 802dbe0:	b120      	cbz	r0, 802dbec <__cxa_atexit+0x14>
 802dbe2:	460a      	mov	r2, r1
 802dbe4:	2002      	movs	r0, #2
 802dbe6:	4621      	mov	r1, r4
 802dbe8:	f000 fb5c 	bl	802e2a4 <__register_exitproc>
 802dbec:	bd10      	pop	{r4, pc}
 802dbee:	bf00      	nop
 802dbf0:	0802e2a5 	.word	0x0802e2a5

0802dbf4 <std>:
 802dbf4:	2300      	movs	r3, #0
 802dbf6:	b510      	push	{r4, lr}
 802dbf8:	4604      	mov	r4, r0
 802dbfa:	e9c0 3300 	strd	r3, r3, [r0]
 802dbfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dc02:	6083      	str	r3, [r0, #8]
 802dc04:	8181      	strh	r1, [r0, #12]
 802dc06:	6643      	str	r3, [r0, #100]	@ 0x64
 802dc08:	81c2      	strh	r2, [r0, #14]
 802dc0a:	6183      	str	r3, [r0, #24]
 802dc0c:	4619      	mov	r1, r3
 802dc0e:	2208      	movs	r2, #8
 802dc10:	305c      	adds	r0, #92	@ 0x5c
 802dc12:	f000 fa0b 	bl	802e02c <memset>
 802dc16:	4b0d      	ldr	r3, [pc, #52]	@ (802dc4c <std+0x58>)
 802dc18:	6263      	str	r3, [r4, #36]	@ 0x24
 802dc1a:	4b0d      	ldr	r3, [pc, #52]	@ (802dc50 <std+0x5c>)
 802dc1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802dc1e:	4b0d      	ldr	r3, [pc, #52]	@ (802dc54 <std+0x60>)
 802dc20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802dc22:	4b0d      	ldr	r3, [pc, #52]	@ (802dc58 <std+0x64>)
 802dc24:	6323      	str	r3, [r4, #48]	@ 0x30
 802dc26:	4b0d      	ldr	r3, [pc, #52]	@ (802dc5c <std+0x68>)
 802dc28:	6224      	str	r4, [r4, #32]
 802dc2a:	429c      	cmp	r4, r3
 802dc2c:	d006      	beq.n	802dc3c <std+0x48>
 802dc2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802dc32:	4294      	cmp	r4, r2
 802dc34:	d002      	beq.n	802dc3c <std+0x48>
 802dc36:	33d0      	adds	r3, #208	@ 0xd0
 802dc38:	429c      	cmp	r4, r3
 802dc3a:	d105      	bne.n	802dc48 <std+0x54>
 802dc3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802dc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dc44:	f000 bb1c 	b.w	802e280 <__retarget_lock_init_recursive>
 802dc48:	bd10      	pop	{r4, pc}
 802dc4a:	bf00      	nop
 802dc4c:	0802de7d 	.word	0x0802de7d
 802dc50:	0802de9f 	.word	0x0802de9f
 802dc54:	0802ded7 	.word	0x0802ded7
 802dc58:	0802defb 	.word	0x0802defb
 802dc5c:	20012d28 	.word	0x20012d28

0802dc60 <stdio_exit_handler>:
 802dc60:	4a02      	ldr	r2, [pc, #8]	@ (802dc6c <stdio_exit_handler+0xc>)
 802dc62:	4903      	ldr	r1, [pc, #12]	@ (802dc70 <stdio_exit_handler+0x10>)
 802dc64:	4803      	ldr	r0, [pc, #12]	@ (802dc74 <stdio_exit_handler+0x14>)
 802dc66:	f000 b87b 	b.w	802dd60 <_fwalk_sglue>
 802dc6a:	bf00      	nop
 802dc6c:	20000098 	.word	0x20000098
 802dc70:	0802ea95 	.word	0x0802ea95
 802dc74:	200000a8 	.word	0x200000a8

0802dc78 <cleanup_stdio>:
 802dc78:	6841      	ldr	r1, [r0, #4]
 802dc7a:	4b0c      	ldr	r3, [pc, #48]	@ (802dcac <cleanup_stdio+0x34>)
 802dc7c:	4299      	cmp	r1, r3
 802dc7e:	b510      	push	{r4, lr}
 802dc80:	4604      	mov	r4, r0
 802dc82:	d001      	beq.n	802dc88 <cleanup_stdio+0x10>
 802dc84:	f000 ff06 	bl	802ea94 <_fflush_r>
 802dc88:	68a1      	ldr	r1, [r4, #8]
 802dc8a:	4b09      	ldr	r3, [pc, #36]	@ (802dcb0 <cleanup_stdio+0x38>)
 802dc8c:	4299      	cmp	r1, r3
 802dc8e:	d002      	beq.n	802dc96 <cleanup_stdio+0x1e>
 802dc90:	4620      	mov	r0, r4
 802dc92:	f000 feff 	bl	802ea94 <_fflush_r>
 802dc96:	68e1      	ldr	r1, [r4, #12]
 802dc98:	4b06      	ldr	r3, [pc, #24]	@ (802dcb4 <cleanup_stdio+0x3c>)
 802dc9a:	4299      	cmp	r1, r3
 802dc9c:	d004      	beq.n	802dca8 <cleanup_stdio+0x30>
 802dc9e:	4620      	mov	r0, r4
 802dca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dca4:	f000 bef6 	b.w	802ea94 <_fflush_r>
 802dca8:	bd10      	pop	{r4, pc}
 802dcaa:	bf00      	nop
 802dcac:	20012d28 	.word	0x20012d28
 802dcb0:	20012d90 	.word	0x20012d90
 802dcb4:	20012df8 	.word	0x20012df8

0802dcb8 <global_stdio_init.part.0>:
 802dcb8:	b510      	push	{r4, lr}
 802dcba:	4b0b      	ldr	r3, [pc, #44]	@ (802dce8 <global_stdio_init.part.0+0x30>)
 802dcbc:	4c0b      	ldr	r4, [pc, #44]	@ (802dcec <global_stdio_init.part.0+0x34>)
 802dcbe:	4a0c      	ldr	r2, [pc, #48]	@ (802dcf0 <global_stdio_init.part.0+0x38>)
 802dcc0:	601a      	str	r2, [r3, #0]
 802dcc2:	4620      	mov	r0, r4
 802dcc4:	2200      	movs	r2, #0
 802dcc6:	2104      	movs	r1, #4
 802dcc8:	f7ff ff94 	bl	802dbf4 <std>
 802dccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802dcd0:	2201      	movs	r2, #1
 802dcd2:	2109      	movs	r1, #9
 802dcd4:	f7ff ff8e 	bl	802dbf4 <std>
 802dcd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802dcdc:	2202      	movs	r2, #2
 802dcde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dce2:	2112      	movs	r1, #18
 802dce4:	f7ff bf86 	b.w	802dbf4 <std>
 802dce8:	20012e60 	.word	0x20012e60
 802dcec:	20012d28 	.word	0x20012d28
 802dcf0:	0802dc61 	.word	0x0802dc61

0802dcf4 <__sfp_lock_acquire>:
 802dcf4:	4801      	ldr	r0, [pc, #4]	@ (802dcfc <__sfp_lock_acquire+0x8>)
 802dcf6:	f000 bac4 	b.w	802e282 <__retarget_lock_acquire_recursive>
 802dcfa:	bf00      	nop
 802dcfc:	20012e6a 	.word	0x20012e6a

0802dd00 <__sfp_lock_release>:
 802dd00:	4801      	ldr	r0, [pc, #4]	@ (802dd08 <__sfp_lock_release+0x8>)
 802dd02:	f000 babf 	b.w	802e284 <__retarget_lock_release_recursive>
 802dd06:	bf00      	nop
 802dd08:	20012e6a 	.word	0x20012e6a

0802dd0c <__sinit>:
 802dd0c:	b510      	push	{r4, lr}
 802dd0e:	4604      	mov	r4, r0
 802dd10:	f7ff fff0 	bl	802dcf4 <__sfp_lock_acquire>
 802dd14:	6a23      	ldr	r3, [r4, #32]
 802dd16:	b11b      	cbz	r3, 802dd20 <__sinit+0x14>
 802dd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dd1c:	f7ff bff0 	b.w	802dd00 <__sfp_lock_release>
 802dd20:	4b04      	ldr	r3, [pc, #16]	@ (802dd34 <__sinit+0x28>)
 802dd22:	6223      	str	r3, [r4, #32]
 802dd24:	4b04      	ldr	r3, [pc, #16]	@ (802dd38 <__sinit+0x2c>)
 802dd26:	681b      	ldr	r3, [r3, #0]
 802dd28:	2b00      	cmp	r3, #0
 802dd2a:	d1f5      	bne.n	802dd18 <__sinit+0xc>
 802dd2c:	f7ff ffc4 	bl	802dcb8 <global_stdio_init.part.0>
 802dd30:	e7f2      	b.n	802dd18 <__sinit+0xc>
 802dd32:	bf00      	nop
 802dd34:	0802dc79 	.word	0x0802dc79
 802dd38:	20012e60 	.word	0x20012e60

0802dd3c <fiprintf>:
 802dd3c:	b40e      	push	{r1, r2, r3}
 802dd3e:	b503      	push	{r0, r1, lr}
 802dd40:	4601      	mov	r1, r0
 802dd42:	ab03      	add	r3, sp, #12
 802dd44:	4805      	ldr	r0, [pc, #20]	@ (802dd5c <fiprintf+0x20>)
 802dd46:	f853 2b04 	ldr.w	r2, [r3], #4
 802dd4a:	6800      	ldr	r0, [r0, #0]
 802dd4c:	9301      	str	r3, [sp, #4]
 802dd4e:	f000 fb79 	bl	802e444 <_vfiprintf_r>
 802dd52:	b002      	add	sp, #8
 802dd54:	f85d eb04 	ldr.w	lr, [sp], #4
 802dd58:	b003      	add	sp, #12
 802dd5a:	4770      	bx	lr
 802dd5c:	200000a4 	.word	0x200000a4

0802dd60 <_fwalk_sglue>:
 802dd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dd64:	4607      	mov	r7, r0
 802dd66:	4688      	mov	r8, r1
 802dd68:	4614      	mov	r4, r2
 802dd6a:	2600      	movs	r6, #0
 802dd6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802dd70:	f1b9 0901 	subs.w	r9, r9, #1
 802dd74:	d505      	bpl.n	802dd82 <_fwalk_sglue+0x22>
 802dd76:	6824      	ldr	r4, [r4, #0]
 802dd78:	2c00      	cmp	r4, #0
 802dd7a:	d1f7      	bne.n	802dd6c <_fwalk_sglue+0xc>
 802dd7c:	4630      	mov	r0, r6
 802dd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dd82:	89ab      	ldrh	r3, [r5, #12]
 802dd84:	2b01      	cmp	r3, #1
 802dd86:	d907      	bls.n	802dd98 <_fwalk_sglue+0x38>
 802dd88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802dd8c:	3301      	adds	r3, #1
 802dd8e:	d003      	beq.n	802dd98 <_fwalk_sglue+0x38>
 802dd90:	4629      	mov	r1, r5
 802dd92:	4638      	mov	r0, r7
 802dd94:	47c0      	blx	r8
 802dd96:	4306      	orrs	r6, r0
 802dd98:	3568      	adds	r5, #104	@ 0x68
 802dd9a:	e7e9      	b.n	802dd70 <_fwalk_sglue+0x10>

0802dd9c <iprintf>:
 802dd9c:	b40f      	push	{r0, r1, r2, r3}
 802dd9e:	b507      	push	{r0, r1, r2, lr}
 802dda0:	4906      	ldr	r1, [pc, #24]	@ (802ddbc <iprintf+0x20>)
 802dda2:	ab04      	add	r3, sp, #16
 802dda4:	6808      	ldr	r0, [r1, #0]
 802dda6:	f853 2b04 	ldr.w	r2, [r3], #4
 802ddaa:	6881      	ldr	r1, [r0, #8]
 802ddac:	9301      	str	r3, [sp, #4]
 802ddae:	f000 fb49 	bl	802e444 <_vfiprintf_r>
 802ddb2:	b003      	add	sp, #12
 802ddb4:	f85d eb04 	ldr.w	lr, [sp], #4
 802ddb8:	b004      	add	sp, #16
 802ddba:	4770      	bx	lr
 802ddbc:	200000a4 	.word	0x200000a4

0802ddc0 <_puts_r>:
 802ddc0:	6a03      	ldr	r3, [r0, #32]
 802ddc2:	b570      	push	{r4, r5, r6, lr}
 802ddc4:	6884      	ldr	r4, [r0, #8]
 802ddc6:	4605      	mov	r5, r0
 802ddc8:	460e      	mov	r6, r1
 802ddca:	b90b      	cbnz	r3, 802ddd0 <_puts_r+0x10>
 802ddcc:	f7ff ff9e 	bl	802dd0c <__sinit>
 802ddd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ddd2:	07db      	lsls	r3, r3, #31
 802ddd4:	d405      	bmi.n	802dde2 <_puts_r+0x22>
 802ddd6:	89a3      	ldrh	r3, [r4, #12]
 802ddd8:	0598      	lsls	r0, r3, #22
 802ddda:	d402      	bmi.n	802dde2 <_puts_r+0x22>
 802dddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ddde:	f000 fa50 	bl	802e282 <__retarget_lock_acquire_recursive>
 802dde2:	89a3      	ldrh	r3, [r4, #12]
 802dde4:	0719      	lsls	r1, r3, #28
 802dde6:	d502      	bpl.n	802ddee <_puts_r+0x2e>
 802dde8:	6923      	ldr	r3, [r4, #16]
 802ddea:	2b00      	cmp	r3, #0
 802ddec:	d135      	bne.n	802de5a <_puts_r+0x9a>
 802ddee:	4621      	mov	r1, r4
 802ddf0:	4628      	mov	r0, r5
 802ddf2:	f000 f8c5 	bl	802df80 <__swsetup_r>
 802ddf6:	b380      	cbz	r0, 802de5a <_puts_r+0x9a>
 802ddf8:	f04f 35ff 	mov.w	r5, #4294967295
 802ddfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ddfe:	07da      	lsls	r2, r3, #31
 802de00:	d405      	bmi.n	802de0e <_puts_r+0x4e>
 802de02:	89a3      	ldrh	r3, [r4, #12]
 802de04:	059b      	lsls	r3, r3, #22
 802de06:	d402      	bmi.n	802de0e <_puts_r+0x4e>
 802de08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802de0a:	f000 fa3b 	bl	802e284 <__retarget_lock_release_recursive>
 802de0e:	4628      	mov	r0, r5
 802de10:	bd70      	pop	{r4, r5, r6, pc}
 802de12:	2b00      	cmp	r3, #0
 802de14:	da04      	bge.n	802de20 <_puts_r+0x60>
 802de16:	69a2      	ldr	r2, [r4, #24]
 802de18:	429a      	cmp	r2, r3
 802de1a:	dc17      	bgt.n	802de4c <_puts_r+0x8c>
 802de1c:	290a      	cmp	r1, #10
 802de1e:	d015      	beq.n	802de4c <_puts_r+0x8c>
 802de20:	6823      	ldr	r3, [r4, #0]
 802de22:	1c5a      	adds	r2, r3, #1
 802de24:	6022      	str	r2, [r4, #0]
 802de26:	7019      	strb	r1, [r3, #0]
 802de28:	68a3      	ldr	r3, [r4, #8]
 802de2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802de2e:	3b01      	subs	r3, #1
 802de30:	60a3      	str	r3, [r4, #8]
 802de32:	2900      	cmp	r1, #0
 802de34:	d1ed      	bne.n	802de12 <_puts_r+0x52>
 802de36:	2b00      	cmp	r3, #0
 802de38:	da11      	bge.n	802de5e <_puts_r+0x9e>
 802de3a:	4622      	mov	r2, r4
 802de3c:	210a      	movs	r1, #10
 802de3e:	4628      	mov	r0, r5
 802de40:	f000 f85f 	bl	802df02 <__swbuf_r>
 802de44:	3001      	adds	r0, #1
 802de46:	d0d7      	beq.n	802ddf8 <_puts_r+0x38>
 802de48:	250a      	movs	r5, #10
 802de4a:	e7d7      	b.n	802ddfc <_puts_r+0x3c>
 802de4c:	4622      	mov	r2, r4
 802de4e:	4628      	mov	r0, r5
 802de50:	f000 f857 	bl	802df02 <__swbuf_r>
 802de54:	3001      	adds	r0, #1
 802de56:	d1e7      	bne.n	802de28 <_puts_r+0x68>
 802de58:	e7ce      	b.n	802ddf8 <_puts_r+0x38>
 802de5a:	3e01      	subs	r6, #1
 802de5c:	e7e4      	b.n	802de28 <_puts_r+0x68>
 802de5e:	6823      	ldr	r3, [r4, #0]
 802de60:	1c5a      	adds	r2, r3, #1
 802de62:	6022      	str	r2, [r4, #0]
 802de64:	220a      	movs	r2, #10
 802de66:	701a      	strb	r2, [r3, #0]
 802de68:	e7ee      	b.n	802de48 <_puts_r+0x88>
	...

0802de6c <puts>:
 802de6c:	4b02      	ldr	r3, [pc, #8]	@ (802de78 <puts+0xc>)
 802de6e:	4601      	mov	r1, r0
 802de70:	6818      	ldr	r0, [r3, #0]
 802de72:	f7ff bfa5 	b.w	802ddc0 <_puts_r>
 802de76:	bf00      	nop
 802de78:	200000a4 	.word	0x200000a4

0802de7c <__sread>:
 802de7c:	b510      	push	{r4, lr}
 802de7e:	460c      	mov	r4, r1
 802de80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802de84:	f000 f98a 	bl	802e19c <_read_r>
 802de88:	2800      	cmp	r0, #0
 802de8a:	bfab      	itete	ge
 802de8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802de8e:	89a3      	ldrhlt	r3, [r4, #12]
 802de90:	181b      	addge	r3, r3, r0
 802de92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802de96:	bfac      	ite	ge
 802de98:	6563      	strge	r3, [r4, #84]	@ 0x54
 802de9a:	81a3      	strhlt	r3, [r4, #12]
 802de9c:	bd10      	pop	{r4, pc}

0802de9e <__swrite>:
 802de9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dea2:	461f      	mov	r7, r3
 802dea4:	898b      	ldrh	r3, [r1, #12]
 802dea6:	05db      	lsls	r3, r3, #23
 802dea8:	4605      	mov	r5, r0
 802deaa:	460c      	mov	r4, r1
 802deac:	4616      	mov	r6, r2
 802deae:	d505      	bpl.n	802debc <__swrite+0x1e>
 802deb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802deb4:	2302      	movs	r3, #2
 802deb6:	2200      	movs	r2, #0
 802deb8:	f000 f95e 	bl	802e178 <_lseek_r>
 802debc:	89a3      	ldrh	r3, [r4, #12]
 802debe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802dec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802dec6:	81a3      	strh	r3, [r4, #12]
 802dec8:	4632      	mov	r2, r6
 802deca:	463b      	mov	r3, r7
 802decc:	4628      	mov	r0, r5
 802dece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ded2:	f000 b999 	b.w	802e208 <_write_r>

0802ded6 <__sseek>:
 802ded6:	b510      	push	{r4, lr}
 802ded8:	460c      	mov	r4, r1
 802deda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dede:	f000 f94b 	bl	802e178 <_lseek_r>
 802dee2:	1c43      	adds	r3, r0, #1
 802dee4:	89a3      	ldrh	r3, [r4, #12]
 802dee6:	bf15      	itete	ne
 802dee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 802deea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802deee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802def2:	81a3      	strheq	r3, [r4, #12]
 802def4:	bf18      	it	ne
 802def6:	81a3      	strhne	r3, [r4, #12]
 802def8:	bd10      	pop	{r4, pc}

0802defa <__sclose>:
 802defa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802defe:	f000 b8cd 	b.w	802e09c <_close_r>

0802df02 <__swbuf_r>:
 802df02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802df04:	460e      	mov	r6, r1
 802df06:	4614      	mov	r4, r2
 802df08:	4605      	mov	r5, r0
 802df0a:	b118      	cbz	r0, 802df14 <__swbuf_r+0x12>
 802df0c:	6a03      	ldr	r3, [r0, #32]
 802df0e:	b90b      	cbnz	r3, 802df14 <__swbuf_r+0x12>
 802df10:	f7ff fefc 	bl	802dd0c <__sinit>
 802df14:	69a3      	ldr	r3, [r4, #24]
 802df16:	60a3      	str	r3, [r4, #8]
 802df18:	89a3      	ldrh	r3, [r4, #12]
 802df1a:	071a      	lsls	r2, r3, #28
 802df1c:	d501      	bpl.n	802df22 <__swbuf_r+0x20>
 802df1e:	6923      	ldr	r3, [r4, #16]
 802df20:	b943      	cbnz	r3, 802df34 <__swbuf_r+0x32>
 802df22:	4621      	mov	r1, r4
 802df24:	4628      	mov	r0, r5
 802df26:	f000 f82b 	bl	802df80 <__swsetup_r>
 802df2a:	b118      	cbz	r0, 802df34 <__swbuf_r+0x32>
 802df2c:	f04f 37ff 	mov.w	r7, #4294967295
 802df30:	4638      	mov	r0, r7
 802df32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802df34:	6823      	ldr	r3, [r4, #0]
 802df36:	6922      	ldr	r2, [r4, #16]
 802df38:	1a98      	subs	r0, r3, r2
 802df3a:	6963      	ldr	r3, [r4, #20]
 802df3c:	b2f6      	uxtb	r6, r6
 802df3e:	4283      	cmp	r3, r0
 802df40:	4637      	mov	r7, r6
 802df42:	dc05      	bgt.n	802df50 <__swbuf_r+0x4e>
 802df44:	4621      	mov	r1, r4
 802df46:	4628      	mov	r0, r5
 802df48:	f000 fda4 	bl	802ea94 <_fflush_r>
 802df4c:	2800      	cmp	r0, #0
 802df4e:	d1ed      	bne.n	802df2c <__swbuf_r+0x2a>
 802df50:	68a3      	ldr	r3, [r4, #8]
 802df52:	3b01      	subs	r3, #1
 802df54:	60a3      	str	r3, [r4, #8]
 802df56:	6823      	ldr	r3, [r4, #0]
 802df58:	1c5a      	adds	r2, r3, #1
 802df5a:	6022      	str	r2, [r4, #0]
 802df5c:	701e      	strb	r6, [r3, #0]
 802df5e:	6962      	ldr	r2, [r4, #20]
 802df60:	1c43      	adds	r3, r0, #1
 802df62:	429a      	cmp	r2, r3
 802df64:	d004      	beq.n	802df70 <__swbuf_r+0x6e>
 802df66:	89a3      	ldrh	r3, [r4, #12]
 802df68:	07db      	lsls	r3, r3, #31
 802df6a:	d5e1      	bpl.n	802df30 <__swbuf_r+0x2e>
 802df6c:	2e0a      	cmp	r6, #10
 802df6e:	d1df      	bne.n	802df30 <__swbuf_r+0x2e>
 802df70:	4621      	mov	r1, r4
 802df72:	4628      	mov	r0, r5
 802df74:	f000 fd8e 	bl	802ea94 <_fflush_r>
 802df78:	2800      	cmp	r0, #0
 802df7a:	d0d9      	beq.n	802df30 <__swbuf_r+0x2e>
 802df7c:	e7d6      	b.n	802df2c <__swbuf_r+0x2a>
	...

0802df80 <__swsetup_r>:
 802df80:	b538      	push	{r3, r4, r5, lr}
 802df82:	4b29      	ldr	r3, [pc, #164]	@ (802e028 <__swsetup_r+0xa8>)
 802df84:	4605      	mov	r5, r0
 802df86:	6818      	ldr	r0, [r3, #0]
 802df88:	460c      	mov	r4, r1
 802df8a:	b118      	cbz	r0, 802df94 <__swsetup_r+0x14>
 802df8c:	6a03      	ldr	r3, [r0, #32]
 802df8e:	b90b      	cbnz	r3, 802df94 <__swsetup_r+0x14>
 802df90:	f7ff febc 	bl	802dd0c <__sinit>
 802df94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802df98:	0719      	lsls	r1, r3, #28
 802df9a:	d422      	bmi.n	802dfe2 <__swsetup_r+0x62>
 802df9c:	06da      	lsls	r2, r3, #27
 802df9e:	d407      	bmi.n	802dfb0 <__swsetup_r+0x30>
 802dfa0:	2209      	movs	r2, #9
 802dfa2:	602a      	str	r2, [r5, #0]
 802dfa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dfa8:	81a3      	strh	r3, [r4, #12]
 802dfaa:	f04f 30ff 	mov.w	r0, #4294967295
 802dfae:	e033      	b.n	802e018 <__swsetup_r+0x98>
 802dfb0:	0758      	lsls	r0, r3, #29
 802dfb2:	d512      	bpl.n	802dfda <__swsetup_r+0x5a>
 802dfb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802dfb6:	b141      	cbz	r1, 802dfca <__swsetup_r+0x4a>
 802dfb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802dfbc:	4299      	cmp	r1, r3
 802dfbe:	d002      	beq.n	802dfc6 <__swsetup_r+0x46>
 802dfc0:	4628      	mov	r0, r5
 802dfc2:	f000 f9cb 	bl	802e35c <_free_r>
 802dfc6:	2300      	movs	r3, #0
 802dfc8:	6363      	str	r3, [r4, #52]	@ 0x34
 802dfca:	89a3      	ldrh	r3, [r4, #12]
 802dfcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802dfd0:	81a3      	strh	r3, [r4, #12]
 802dfd2:	2300      	movs	r3, #0
 802dfd4:	6063      	str	r3, [r4, #4]
 802dfd6:	6923      	ldr	r3, [r4, #16]
 802dfd8:	6023      	str	r3, [r4, #0]
 802dfda:	89a3      	ldrh	r3, [r4, #12]
 802dfdc:	f043 0308 	orr.w	r3, r3, #8
 802dfe0:	81a3      	strh	r3, [r4, #12]
 802dfe2:	6923      	ldr	r3, [r4, #16]
 802dfe4:	b94b      	cbnz	r3, 802dffa <__swsetup_r+0x7a>
 802dfe6:	89a3      	ldrh	r3, [r4, #12]
 802dfe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802dfec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802dff0:	d003      	beq.n	802dffa <__swsetup_r+0x7a>
 802dff2:	4621      	mov	r1, r4
 802dff4:	4628      	mov	r0, r5
 802dff6:	f000 fd9b 	bl	802eb30 <__smakebuf_r>
 802dffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dffe:	f013 0201 	ands.w	r2, r3, #1
 802e002:	d00a      	beq.n	802e01a <__swsetup_r+0x9a>
 802e004:	2200      	movs	r2, #0
 802e006:	60a2      	str	r2, [r4, #8]
 802e008:	6962      	ldr	r2, [r4, #20]
 802e00a:	4252      	negs	r2, r2
 802e00c:	61a2      	str	r2, [r4, #24]
 802e00e:	6922      	ldr	r2, [r4, #16]
 802e010:	b942      	cbnz	r2, 802e024 <__swsetup_r+0xa4>
 802e012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802e016:	d1c5      	bne.n	802dfa4 <__swsetup_r+0x24>
 802e018:	bd38      	pop	{r3, r4, r5, pc}
 802e01a:	0799      	lsls	r1, r3, #30
 802e01c:	bf58      	it	pl
 802e01e:	6962      	ldrpl	r2, [r4, #20]
 802e020:	60a2      	str	r2, [r4, #8]
 802e022:	e7f4      	b.n	802e00e <__swsetup_r+0x8e>
 802e024:	2000      	movs	r0, #0
 802e026:	e7f7      	b.n	802e018 <__swsetup_r+0x98>
 802e028:	200000a4 	.word	0x200000a4

0802e02c <memset>:
 802e02c:	4402      	add	r2, r0
 802e02e:	4603      	mov	r3, r0
 802e030:	4293      	cmp	r3, r2
 802e032:	d100      	bne.n	802e036 <memset+0xa>
 802e034:	4770      	bx	lr
 802e036:	f803 1b01 	strb.w	r1, [r3], #1
 802e03a:	e7f9      	b.n	802e030 <memset+0x4>

0802e03c <_raise_r>:
 802e03c:	291f      	cmp	r1, #31
 802e03e:	b538      	push	{r3, r4, r5, lr}
 802e040:	4605      	mov	r5, r0
 802e042:	460c      	mov	r4, r1
 802e044:	d904      	bls.n	802e050 <_raise_r+0x14>
 802e046:	2316      	movs	r3, #22
 802e048:	6003      	str	r3, [r0, #0]
 802e04a:	f04f 30ff 	mov.w	r0, #4294967295
 802e04e:	bd38      	pop	{r3, r4, r5, pc}
 802e050:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e052:	b112      	cbz	r2, 802e05a <_raise_r+0x1e>
 802e054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e058:	b94b      	cbnz	r3, 802e06e <_raise_r+0x32>
 802e05a:	4628      	mov	r0, r5
 802e05c:	f000 f8c2 	bl	802e1e4 <_getpid_r>
 802e060:	4622      	mov	r2, r4
 802e062:	4601      	mov	r1, r0
 802e064:	4628      	mov	r0, r5
 802e066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e06a:	f000 b8a9 	b.w	802e1c0 <_kill_r>
 802e06e:	2b01      	cmp	r3, #1
 802e070:	d00a      	beq.n	802e088 <_raise_r+0x4c>
 802e072:	1c59      	adds	r1, r3, #1
 802e074:	d103      	bne.n	802e07e <_raise_r+0x42>
 802e076:	2316      	movs	r3, #22
 802e078:	6003      	str	r3, [r0, #0]
 802e07a:	2001      	movs	r0, #1
 802e07c:	e7e7      	b.n	802e04e <_raise_r+0x12>
 802e07e:	2100      	movs	r1, #0
 802e080:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802e084:	4620      	mov	r0, r4
 802e086:	4798      	blx	r3
 802e088:	2000      	movs	r0, #0
 802e08a:	e7e0      	b.n	802e04e <_raise_r+0x12>

0802e08c <raise>:
 802e08c:	4b02      	ldr	r3, [pc, #8]	@ (802e098 <raise+0xc>)
 802e08e:	4601      	mov	r1, r0
 802e090:	6818      	ldr	r0, [r3, #0]
 802e092:	f7ff bfd3 	b.w	802e03c <_raise_r>
 802e096:	bf00      	nop
 802e098:	200000a4 	.word	0x200000a4

0802e09c <_close_r>:
 802e09c:	b538      	push	{r3, r4, r5, lr}
 802e09e:	4d06      	ldr	r5, [pc, #24]	@ (802e0b8 <_close_r+0x1c>)
 802e0a0:	2300      	movs	r3, #0
 802e0a2:	4604      	mov	r4, r0
 802e0a4:	4608      	mov	r0, r1
 802e0a6:	602b      	str	r3, [r5, #0]
 802e0a8:	f7d4 fee4 	bl	8002e74 <_close>
 802e0ac:	1c43      	adds	r3, r0, #1
 802e0ae:	d102      	bne.n	802e0b6 <_close_r+0x1a>
 802e0b0:	682b      	ldr	r3, [r5, #0]
 802e0b2:	b103      	cbz	r3, 802e0b6 <_close_r+0x1a>
 802e0b4:	6023      	str	r3, [r4, #0]
 802e0b6:	bd38      	pop	{r3, r4, r5, pc}
 802e0b8:	20012e64 	.word	0x20012e64

0802e0bc <_reclaim_reent>:
 802e0bc:	4b2d      	ldr	r3, [pc, #180]	@ (802e174 <_reclaim_reent+0xb8>)
 802e0be:	681b      	ldr	r3, [r3, #0]
 802e0c0:	4283      	cmp	r3, r0
 802e0c2:	b570      	push	{r4, r5, r6, lr}
 802e0c4:	4604      	mov	r4, r0
 802e0c6:	d053      	beq.n	802e170 <_reclaim_reent+0xb4>
 802e0c8:	69c3      	ldr	r3, [r0, #28]
 802e0ca:	b31b      	cbz	r3, 802e114 <_reclaim_reent+0x58>
 802e0cc:	68db      	ldr	r3, [r3, #12]
 802e0ce:	b163      	cbz	r3, 802e0ea <_reclaim_reent+0x2e>
 802e0d0:	2500      	movs	r5, #0
 802e0d2:	69e3      	ldr	r3, [r4, #28]
 802e0d4:	68db      	ldr	r3, [r3, #12]
 802e0d6:	5959      	ldr	r1, [r3, r5]
 802e0d8:	b9b1      	cbnz	r1, 802e108 <_reclaim_reent+0x4c>
 802e0da:	3504      	adds	r5, #4
 802e0dc:	2d80      	cmp	r5, #128	@ 0x80
 802e0de:	d1f8      	bne.n	802e0d2 <_reclaim_reent+0x16>
 802e0e0:	69e3      	ldr	r3, [r4, #28]
 802e0e2:	4620      	mov	r0, r4
 802e0e4:	68d9      	ldr	r1, [r3, #12]
 802e0e6:	f000 f939 	bl	802e35c <_free_r>
 802e0ea:	69e3      	ldr	r3, [r4, #28]
 802e0ec:	6819      	ldr	r1, [r3, #0]
 802e0ee:	b111      	cbz	r1, 802e0f6 <_reclaim_reent+0x3a>
 802e0f0:	4620      	mov	r0, r4
 802e0f2:	f000 f933 	bl	802e35c <_free_r>
 802e0f6:	69e3      	ldr	r3, [r4, #28]
 802e0f8:	689d      	ldr	r5, [r3, #8]
 802e0fa:	b15d      	cbz	r5, 802e114 <_reclaim_reent+0x58>
 802e0fc:	4629      	mov	r1, r5
 802e0fe:	4620      	mov	r0, r4
 802e100:	682d      	ldr	r5, [r5, #0]
 802e102:	f000 f92b 	bl	802e35c <_free_r>
 802e106:	e7f8      	b.n	802e0fa <_reclaim_reent+0x3e>
 802e108:	680e      	ldr	r6, [r1, #0]
 802e10a:	4620      	mov	r0, r4
 802e10c:	f000 f926 	bl	802e35c <_free_r>
 802e110:	4631      	mov	r1, r6
 802e112:	e7e1      	b.n	802e0d8 <_reclaim_reent+0x1c>
 802e114:	6961      	ldr	r1, [r4, #20]
 802e116:	b111      	cbz	r1, 802e11e <_reclaim_reent+0x62>
 802e118:	4620      	mov	r0, r4
 802e11a:	f000 f91f 	bl	802e35c <_free_r>
 802e11e:	69e1      	ldr	r1, [r4, #28]
 802e120:	b111      	cbz	r1, 802e128 <_reclaim_reent+0x6c>
 802e122:	4620      	mov	r0, r4
 802e124:	f000 f91a 	bl	802e35c <_free_r>
 802e128:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802e12a:	b111      	cbz	r1, 802e132 <_reclaim_reent+0x76>
 802e12c:	4620      	mov	r0, r4
 802e12e:	f000 f915 	bl	802e35c <_free_r>
 802e132:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802e134:	b111      	cbz	r1, 802e13c <_reclaim_reent+0x80>
 802e136:	4620      	mov	r0, r4
 802e138:	f000 f910 	bl	802e35c <_free_r>
 802e13c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802e13e:	b111      	cbz	r1, 802e146 <_reclaim_reent+0x8a>
 802e140:	4620      	mov	r0, r4
 802e142:	f000 f90b 	bl	802e35c <_free_r>
 802e146:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802e148:	b111      	cbz	r1, 802e150 <_reclaim_reent+0x94>
 802e14a:	4620      	mov	r0, r4
 802e14c:	f000 f906 	bl	802e35c <_free_r>
 802e150:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802e152:	b111      	cbz	r1, 802e15a <_reclaim_reent+0x9e>
 802e154:	4620      	mov	r0, r4
 802e156:	f000 f901 	bl	802e35c <_free_r>
 802e15a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802e15c:	b111      	cbz	r1, 802e164 <_reclaim_reent+0xa8>
 802e15e:	4620      	mov	r0, r4
 802e160:	f000 f8fc 	bl	802e35c <_free_r>
 802e164:	6a23      	ldr	r3, [r4, #32]
 802e166:	b11b      	cbz	r3, 802e170 <_reclaim_reent+0xb4>
 802e168:	4620      	mov	r0, r4
 802e16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e16e:	4718      	bx	r3
 802e170:	bd70      	pop	{r4, r5, r6, pc}
 802e172:	bf00      	nop
 802e174:	200000a4 	.word	0x200000a4

0802e178 <_lseek_r>:
 802e178:	b538      	push	{r3, r4, r5, lr}
 802e17a:	4d07      	ldr	r5, [pc, #28]	@ (802e198 <_lseek_r+0x20>)
 802e17c:	4604      	mov	r4, r0
 802e17e:	4608      	mov	r0, r1
 802e180:	4611      	mov	r1, r2
 802e182:	2200      	movs	r2, #0
 802e184:	602a      	str	r2, [r5, #0]
 802e186:	461a      	mov	r2, r3
 802e188:	f7d4 fe9b 	bl	8002ec2 <_lseek>
 802e18c:	1c43      	adds	r3, r0, #1
 802e18e:	d102      	bne.n	802e196 <_lseek_r+0x1e>
 802e190:	682b      	ldr	r3, [r5, #0]
 802e192:	b103      	cbz	r3, 802e196 <_lseek_r+0x1e>
 802e194:	6023      	str	r3, [r4, #0]
 802e196:	bd38      	pop	{r3, r4, r5, pc}
 802e198:	20012e64 	.word	0x20012e64

0802e19c <_read_r>:
 802e19c:	b538      	push	{r3, r4, r5, lr}
 802e19e:	4d07      	ldr	r5, [pc, #28]	@ (802e1bc <_read_r+0x20>)
 802e1a0:	4604      	mov	r4, r0
 802e1a2:	4608      	mov	r0, r1
 802e1a4:	4611      	mov	r1, r2
 802e1a6:	2200      	movs	r2, #0
 802e1a8:	602a      	str	r2, [r5, #0]
 802e1aa:	461a      	mov	r2, r3
 802e1ac:	f7d4 fe29 	bl	8002e02 <_read>
 802e1b0:	1c43      	adds	r3, r0, #1
 802e1b2:	d102      	bne.n	802e1ba <_read_r+0x1e>
 802e1b4:	682b      	ldr	r3, [r5, #0]
 802e1b6:	b103      	cbz	r3, 802e1ba <_read_r+0x1e>
 802e1b8:	6023      	str	r3, [r4, #0]
 802e1ba:	bd38      	pop	{r3, r4, r5, pc}
 802e1bc:	20012e64 	.word	0x20012e64

0802e1c0 <_kill_r>:
 802e1c0:	b538      	push	{r3, r4, r5, lr}
 802e1c2:	4d07      	ldr	r5, [pc, #28]	@ (802e1e0 <_kill_r+0x20>)
 802e1c4:	2300      	movs	r3, #0
 802e1c6:	4604      	mov	r4, r0
 802e1c8:	4608      	mov	r0, r1
 802e1ca:	4611      	mov	r1, r2
 802e1cc:	602b      	str	r3, [r5, #0]
 802e1ce:	f7d4 fdfd 	bl	8002dcc <_kill>
 802e1d2:	1c43      	adds	r3, r0, #1
 802e1d4:	d102      	bne.n	802e1dc <_kill_r+0x1c>
 802e1d6:	682b      	ldr	r3, [r5, #0]
 802e1d8:	b103      	cbz	r3, 802e1dc <_kill_r+0x1c>
 802e1da:	6023      	str	r3, [r4, #0]
 802e1dc:	bd38      	pop	{r3, r4, r5, pc}
 802e1de:	bf00      	nop
 802e1e0:	20012e64 	.word	0x20012e64

0802e1e4 <_getpid_r>:
 802e1e4:	f7d4 bdea 	b.w	8002dbc <_getpid>

0802e1e8 <_sbrk_r>:
 802e1e8:	b538      	push	{r3, r4, r5, lr}
 802e1ea:	4d06      	ldr	r5, [pc, #24]	@ (802e204 <_sbrk_r+0x1c>)
 802e1ec:	2300      	movs	r3, #0
 802e1ee:	4604      	mov	r4, r0
 802e1f0:	4608      	mov	r0, r1
 802e1f2:	602b      	str	r3, [r5, #0]
 802e1f4:	f7d4 fe72 	bl	8002edc <_sbrk>
 802e1f8:	1c43      	adds	r3, r0, #1
 802e1fa:	d102      	bne.n	802e202 <_sbrk_r+0x1a>
 802e1fc:	682b      	ldr	r3, [r5, #0]
 802e1fe:	b103      	cbz	r3, 802e202 <_sbrk_r+0x1a>
 802e200:	6023      	str	r3, [r4, #0]
 802e202:	bd38      	pop	{r3, r4, r5, pc}
 802e204:	20012e64 	.word	0x20012e64

0802e208 <_write_r>:
 802e208:	b538      	push	{r3, r4, r5, lr}
 802e20a:	4d07      	ldr	r5, [pc, #28]	@ (802e228 <_write_r+0x20>)
 802e20c:	4604      	mov	r4, r0
 802e20e:	4608      	mov	r0, r1
 802e210:	4611      	mov	r1, r2
 802e212:	2200      	movs	r2, #0
 802e214:	602a      	str	r2, [r5, #0]
 802e216:	461a      	mov	r2, r3
 802e218:	f7d4 fe10 	bl	8002e3c <_write>
 802e21c:	1c43      	adds	r3, r0, #1
 802e21e:	d102      	bne.n	802e226 <_write_r+0x1e>
 802e220:	682b      	ldr	r3, [r5, #0]
 802e222:	b103      	cbz	r3, 802e226 <_write_r+0x1e>
 802e224:	6023      	str	r3, [r4, #0]
 802e226:	bd38      	pop	{r3, r4, r5, pc}
 802e228:	20012e64 	.word	0x20012e64

0802e22c <__errno>:
 802e22c:	4b01      	ldr	r3, [pc, #4]	@ (802e234 <__errno+0x8>)
 802e22e:	6818      	ldr	r0, [r3, #0]
 802e230:	4770      	bx	lr
 802e232:	bf00      	nop
 802e234:	200000a4 	.word	0x200000a4

0802e238 <__libc_init_array>:
 802e238:	b570      	push	{r4, r5, r6, lr}
 802e23a:	4d0d      	ldr	r5, [pc, #52]	@ (802e270 <__libc_init_array+0x38>)
 802e23c:	4c0d      	ldr	r4, [pc, #52]	@ (802e274 <__libc_init_array+0x3c>)
 802e23e:	1b64      	subs	r4, r4, r5
 802e240:	10a4      	asrs	r4, r4, #2
 802e242:	2600      	movs	r6, #0
 802e244:	42a6      	cmp	r6, r4
 802e246:	d109      	bne.n	802e25c <__libc_init_array+0x24>
 802e248:	4d0b      	ldr	r5, [pc, #44]	@ (802e278 <__libc_init_array+0x40>)
 802e24a:	4c0c      	ldr	r4, [pc, #48]	@ (802e27c <__libc_init_array+0x44>)
 802e24c:	f000 fcce 	bl	802ebec <_init>
 802e250:	1b64      	subs	r4, r4, r5
 802e252:	10a4      	asrs	r4, r4, #2
 802e254:	2600      	movs	r6, #0
 802e256:	42a6      	cmp	r6, r4
 802e258:	d105      	bne.n	802e266 <__libc_init_array+0x2e>
 802e25a:	bd70      	pop	{r4, r5, r6, pc}
 802e25c:	f855 3b04 	ldr.w	r3, [r5], #4
 802e260:	4798      	blx	r3
 802e262:	3601      	adds	r6, #1
 802e264:	e7ee      	b.n	802e244 <__libc_init_array+0xc>
 802e266:	f855 3b04 	ldr.w	r3, [r5], #4
 802e26a:	4798      	blx	r3
 802e26c:	3601      	adds	r6, #1
 802e26e:	e7f2      	b.n	802e256 <__libc_init_array+0x1e>
 802e270:	08032b74 	.word	0x08032b74
 802e274:	08032b74 	.word	0x08032b74
 802e278:	08032b74 	.word	0x08032b74
 802e27c:	08032b88 	.word	0x08032b88

0802e280 <__retarget_lock_init_recursive>:
 802e280:	4770      	bx	lr

0802e282 <__retarget_lock_acquire_recursive>:
 802e282:	4770      	bx	lr

0802e284 <__retarget_lock_release_recursive>:
 802e284:	4770      	bx	lr

0802e286 <memcpy>:
 802e286:	440a      	add	r2, r1
 802e288:	4291      	cmp	r1, r2
 802e28a:	f100 33ff 	add.w	r3, r0, #4294967295
 802e28e:	d100      	bne.n	802e292 <memcpy+0xc>
 802e290:	4770      	bx	lr
 802e292:	b510      	push	{r4, lr}
 802e294:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e298:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e29c:	4291      	cmp	r1, r2
 802e29e:	d1f9      	bne.n	802e294 <memcpy+0xe>
 802e2a0:	bd10      	pop	{r4, pc}
	...

0802e2a4 <__register_exitproc>:
 802e2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e2a8:	4d27      	ldr	r5, [pc, #156]	@ (802e348 <__register_exitproc+0xa4>)
 802e2aa:	4607      	mov	r7, r0
 802e2ac:	6828      	ldr	r0, [r5, #0]
 802e2ae:	4691      	mov	r9, r2
 802e2b0:	460e      	mov	r6, r1
 802e2b2:	4698      	mov	r8, r3
 802e2b4:	f7ff ffe5 	bl	802e282 <__retarget_lock_acquire_recursive>
 802e2b8:	4a24      	ldr	r2, [pc, #144]	@ (802e34c <__register_exitproc+0xa8>)
 802e2ba:	6814      	ldr	r4, [r2, #0]
 802e2bc:	b93c      	cbnz	r4, 802e2ce <__register_exitproc+0x2a>
 802e2be:	4b24      	ldr	r3, [pc, #144]	@ (802e350 <__register_exitproc+0xac>)
 802e2c0:	6013      	str	r3, [r2, #0]
 802e2c2:	4a24      	ldr	r2, [pc, #144]	@ (802e354 <__register_exitproc+0xb0>)
 802e2c4:	b112      	cbz	r2, 802e2cc <__register_exitproc+0x28>
 802e2c6:	6812      	ldr	r2, [r2, #0]
 802e2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802e2cc:	4c20      	ldr	r4, [pc, #128]	@ (802e350 <__register_exitproc+0xac>)
 802e2ce:	6863      	ldr	r3, [r4, #4]
 802e2d0:	2b1f      	cmp	r3, #31
 802e2d2:	dd06      	ble.n	802e2e2 <__register_exitproc+0x3e>
 802e2d4:	6828      	ldr	r0, [r5, #0]
 802e2d6:	f7ff ffd5 	bl	802e284 <__retarget_lock_release_recursive>
 802e2da:	f04f 30ff 	mov.w	r0, #4294967295
 802e2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e2e2:	b32f      	cbz	r7, 802e330 <__register_exitproc+0x8c>
 802e2e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802e2e8:	b968      	cbnz	r0, 802e306 <__register_exitproc+0x62>
 802e2ea:	4b1b      	ldr	r3, [pc, #108]	@ (802e358 <__register_exitproc+0xb4>)
 802e2ec:	2b00      	cmp	r3, #0
 802e2ee:	d0f1      	beq.n	802e2d4 <__register_exitproc+0x30>
 802e2f0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802e2f4:	f7ff fbb2 	bl	802da5c <malloc>
 802e2f8:	2800      	cmp	r0, #0
 802e2fa:	d0eb      	beq.n	802e2d4 <__register_exitproc+0x30>
 802e2fc:	2300      	movs	r3, #0
 802e2fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802e302:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802e306:	6863      	ldr	r3, [r4, #4]
 802e308:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802e30c:	2201      	movs	r2, #1
 802e30e:	409a      	lsls	r2, r3
 802e310:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802e314:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802e318:	4313      	orrs	r3, r2
 802e31a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802e31e:	2f02      	cmp	r7, #2
 802e320:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802e324:	bf02      	ittt	eq
 802e326:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802e32a:	4313      	orreq	r3, r2
 802e32c:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802e330:	6863      	ldr	r3, [r4, #4]
 802e332:	6828      	ldr	r0, [r5, #0]
 802e334:	1c5a      	adds	r2, r3, #1
 802e336:	3302      	adds	r3, #2
 802e338:	6062      	str	r2, [r4, #4]
 802e33a:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802e33e:	f7ff ffa1 	bl	802e284 <__retarget_lock_release_recursive>
 802e342:	2000      	movs	r0, #0
 802e344:	e7cb      	b.n	802e2de <__register_exitproc+0x3a>
 802e346:	bf00      	nop
 802e348:	200000f4 	.word	0x200000f4
 802e34c:	20012ef8 	.word	0x20012ef8
 802e350:	20012e6c 	.word	0x20012e6c
 802e354:	08032b4c 	.word	0x08032b4c
 802e358:	0802da5d 	.word	0x0802da5d

0802e35c <_free_r>:
 802e35c:	b538      	push	{r3, r4, r5, lr}
 802e35e:	4605      	mov	r5, r0
 802e360:	2900      	cmp	r1, #0
 802e362:	d041      	beq.n	802e3e8 <_free_r+0x8c>
 802e364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e368:	1f0c      	subs	r4, r1, #4
 802e36a:	2b00      	cmp	r3, #0
 802e36c:	bfb8      	it	lt
 802e36e:	18e4      	addlt	r4, r4, r3
 802e370:	f7ff fc26 	bl	802dbc0 <__malloc_lock>
 802e374:	4a1d      	ldr	r2, [pc, #116]	@ (802e3ec <_free_r+0x90>)
 802e376:	6813      	ldr	r3, [r2, #0]
 802e378:	b933      	cbnz	r3, 802e388 <_free_r+0x2c>
 802e37a:	6063      	str	r3, [r4, #4]
 802e37c:	6014      	str	r4, [r2, #0]
 802e37e:	4628      	mov	r0, r5
 802e380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e384:	f7ff bc22 	b.w	802dbcc <__malloc_unlock>
 802e388:	42a3      	cmp	r3, r4
 802e38a:	d908      	bls.n	802e39e <_free_r+0x42>
 802e38c:	6820      	ldr	r0, [r4, #0]
 802e38e:	1821      	adds	r1, r4, r0
 802e390:	428b      	cmp	r3, r1
 802e392:	bf01      	itttt	eq
 802e394:	6819      	ldreq	r1, [r3, #0]
 802e396:	685b      	ldreq	r3, [r3, #4]
 802e398:	1809      	addeq	r1, r1, r0
 802e39a:	6021      	streq	r1, [r4, #0]
 802e39c:	e7ed      	b.n	802e37a <_free_r+0x1e>
 802e39e:	461a      	mov	r2, r3
 802e3a0:	685b      	ldr	r3, [r3, #4]
 802e3a2:	b10b      	cbz	r3, 802e3a8 <_free_r+0x4c>
 802e3a4:	42a3      	cmp	r3, r4
 802e3a6:	d9fa      	bls.n	802e39e <_free_r+0x42>
 802e3a8:	6811      	ldr	r1, [r2, #0]
 802e3aa:	1850      	adds	r0, r2, r1
 802e3ac:	42a0      	cmp	r0, r4
 802e3ae:	d10b      	bne.n	802e3c8 <_free_r+0x6c>
 802e3b0:	6820      	ldr	r0, [r4, #0]
 802e3b2:	4401      	add	r1, r0
 802e3b4:	1850      	adds	r0, r2, r1
 802e3b6:	4283      	cmp	r3, r0
 802e3b8:	6011      	str	r1, [r2, #0]
 802e3ba:	d1e0      	bne.n	802e37e <_free_r+0x22>
 802e3bc:	6818      	ldr	r0, [r3, #0]
 802e3be:	685b      	ldr	r3, [r3, #4]
 802e3c0:	6053      	str	r3, [r2, #4]
 802e3c2:	4408      	add	r0, r1
 802e3c4:	6010      	str	r0, [r2, #0]
 802e3c6:	e7da      	b.n	802e37e <_free_r+0x22>
 802e3c8:	d902      	bls.n	802e3d0 <_free_r+0x74>
 802e3ca:	230c      	movs	r3, #12
 802e3cc:	602b      	str	r3, [r5, #0]
 802e3ce:	e7d6      	b.n	802e37e <_free_r+0x22>
 802e3d0:	6820      	ldr	r0, [r4, #0]
 802e3d2:	1821      	adds	r1, r4, r0
 802e3d4:	428b      	cmp	r3, r1
 802e3d6:	bf04      	itt	eq
 802e3d8:	6819      	ldreq	r1, [r3, #0]
 802e3da:	685b      	ldreq	r3, [r3, #4]
 802e3dc:	6063      	str	r3, [r4, #4]
 802e3de:	bf04      	itt	eq
 802e3e0:	1809      	addeq	r1, r1, r0
 802e3e2:	6021      	streq	r1, [r4, #0]
 802e3e4:	6054      	str	r4, [r2, #4]
 802e3e6:	e7ca      	b.n	802e37e <_free_r+0x22>
 802e3e8:	bd38      	pop	{r3, r4, r5, pc}
 802e3ea:	bf00      	nop
 802e3ec:	20012d24 	.word	0x20012d24

0802e3f0 <__sfputc_r>:
 802e3f0:	6893      	ldr	r3, [r2, #8]
 802e3f2:	3b01      	subs	r3, #1
 802e3f4:	2b00      	cmp	r3, #0
 802e3f6:	b410      	push	{r4}
 802e3f8:	6093      	str	r3, [r2, #8]
 802e3fa:	da08      	bge.n	802e40e <__sfputc_r+0x1e>
 802e3fc:	6994      	ldr	r4, [r2, #24]
 802e3fe:	42a3      	cmp	r3, r4
 802e400:	db01      	blt.n	802e406 <__sfputc_r+0x16>
 802e402:	290a      	cmp	r1, #10
 802e404:	d103      	bne.n	802e40e <__sfputc_r+0x1e>
 802e406:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e40a:	f7ff bd7a 	b.w	802df02 <__swbuf_r>
 802e40e:	6813      	ldr	r3, [r2, #0]
 802e410:	1c58      	adds	r0, r3, #1
 802e412:	6010      	str	r0, [r2, #0]
 802e414:	7019      	strb	r1, [r3, #0]
 802e416:	4608      	mov	r0, r1
 802e418:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e41c:	4770      	bx	lr

0802e41e <__sfputs_r>:
 802e41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e420:	4606      	mov	r6, r0
 802e422:	460f      	mov	r7, r1
 802e424:	4614      	mov	r4, r2
 802e426:	18d5      	adds	r5, r2, r3
 802e428:	42ac      	cmp	r4, r5
 802e42a:	d101      	bne.n	802e430 <__sfputs_r+0x12>
 802e42c:	2000      	movs	r0, #0
 802e42e:	e007      	b.n	802e440 <__sfputs_r+0x22>
 802e430:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e434:	463a      	mov	r2, r7
 802e436:	4630      	mov	r0, r6
 802e438:	f7ff ffda 	bl	802e3f0 <__sfputc_r>
 802e43c:	1c43      	adds	r3, r0, #1
 802e43e:	d1f3      	bne.n	802e428 <__sfputs_r+0xa>
 802e440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e444 <_vfiprintf_r>:
 802e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e448:	460d      	mov	r5, r1
 802e44a:	b09d      	sub	sp, #116	@ 0x74
 802e44c:	4614      	mov	r4, r2
 802e44e:	4698      	mov	r8, r3
 802e450:	4606      	mov	r6, r0
 802e452:	b118      	cbz	r0, 802e45c <_vfiprintf_r+0x18>
 802e454:	6a03      	ldr	r3, [r0, #32]
 802e456:	b90b      	cbnz	r3, 802e45c <_vfiprintf_r+0x18>
 802e458:	f7ff fc58 	bl	802dd0c <__sinit>
 802e45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e45e:	07d9      	lsls	r1, r3, #31
 802e460:	d405      	bmi.n	802e46e <_vfiprintf_r+0x2a>
 802e462:	89ab      	ldrh	r3, [r5, #12]
 802e464:	059a      	lsls	r2, r3, #22
 802e466:	d402      	bmi.n	802e46e <_vfiprintf_r+0x2a>
 802e468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e46a:	f7ff ff0a 	bl	802e282 <__retarget_lock_acquire_recursive>
 802e46e:	89ab      	ldrh	r3, [r5, #12]
 802e470:	071b      	lsls	r3, r3, #28
 802e472:	d501      	bpl.n	802e478 <_vfiprintf_r+0x34>
 802e474:	692b      	ldr	r3, [r5, #16]
 802e476:	b99b      	cbnz	r3, 802e4a0 <_vfiprintf_r+0x5c>
 802e478:	4629      	mov	r1, r5
 802e47a:	4630      	mov	r0, r6
 802e47c:	f7ff fd80 	bl	802df80 <__swsetup_r>
 802e480:	b170      	cbz	r0, 802e4a0 <_vfiprintf_r+0x5c>
 802e482:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e484:	07dc      	lsls	r4, r3, #31
 802e486:	d504      	bpl.n	802e492 <_vfiprintf_r+0x4e>
 802e488:	f04f 30ff 	mov.w	r0, #4294967295
 802e48c:	b01d      	add	sp, #116	@ 0x74
 802e48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e492:	89ab      	ldrh	r3, [r5, #12]
 802e494:	0598      	lsls	r0, r3, #22
 802e496:	d4f7      	bmi.n	802e488 <_vfiprintf_r+0x44>
 802e498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e49a:	f7ff fef3 	bl	802e284 <__retarget_lock_release_recursive>
 802e49e:	e7f3      	b.n	802e488 <_vfiprintf_r+0x44>
 802e4a0:	2300      	movs	r3, #0
 802e4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 802e4a4:	2320      	movs	r3, #32
 802e4a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802e4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 802e4ae:	2330      	movs	r3, #48	@ 0x30
 802e4b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802e660 <_vfiprintf_r+0x21c>
 802e4b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802e4b8:	f04f 0901 	mov.w	r9, #1
 802e4bc:	4623      	mov	r3, r4
 802e4be:	469a      	mov	sl, r3
 802e4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e4c4:	b10a      	cbz	r2, 802e4ca <_vfiprintf_r+0x86>
 802e4c6:	2a25      	cmp	r2, #37	@ 0x25
 802e4c8:	d1f9      	bne.n	802e4be <_vfiprintf_r+0x7a>
 802e4ca:	ebba 0b04 	subs.w	fp, sl, r4
 802e4ce:	d00b      	beq.n	802e4e8 <_vfiprintf_r+0xa4>
 802e4d0:	465b      	mov	r3, fp
 802e4d2:	4622      	mov	r2, r4
 802e4d4:	4629      	mov	r1, r5
 802e4d6:	4630      	mov	r0, r6
 802e4d8:	f7ff ffa1 	bl	802e41e <__sfputs_r>
 802e4dc:	3001      	adds	r0, #1
 802e4de:	f000 80a7 	beq.w	802e630 <_vfiprintf_r+0x1ec>
 802e4e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e4e4:	445a      	add	r2, fp
 802e4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 802e4e8:	f89a 3000 	ldrb.w	r3, [sl]
 802e4ec:	2b00      	cmp	r3, #0
 802e4ee:	f000 809f 	beq.w	802e630 <_vfiprintf_r+0x1ec>
 802e4f2:	2300      	movs	r3, #0
 802e4f4:	f04f 32ff 	mov.w	r2, #4294967295
 802e4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e4fc:	f10a 0a01 	add.w	sl, sl, #1
 802e500:	9304      	str	r3, [sp, #16]
 802e502:	9307      	str	r3, [sp, #28]
 802e504:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802e508:	931a      	str	r3, [sp, #104]	@ 0x68
 802e50a:	4654      	mov	r4, sl
 802e50c:	2205      	movs	r2, #5
 802e50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e512:	4853      	ldr	r0, [pc, #332]	@ (802e660 <_vfiprintf_r+0x21c>)
 802e514:	f7d1 fe7c 	bl	8000210 <memchr>
 802e518:	9a04      	ldr	r2, [sp, #16]
 802e51a:	b9d8      	cbnz	r0, 802e554 <_vfiprintf_r+0x110>
 802e51c:	06d1      	lsls	r1, r2, #27
 802e51e:	bf44      	itt	mi
 802e520:	2320      	movmi	r3, #32
 802e522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e526:	0713      	lsls	r3, r2, #28
 802e528:	bf44      	itt	mi
 802e52a:	232b      	movmi	r3, #43	@ 0x2b
 802e52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e530:	f89a 3000 	ldrb.w	r3, [sl]
 802e534:	2b2a      	cmp	r3, #42	@ 0x2a
 802e536:	d015      	beq.n	802e564 <_vfiprintf_r+0x120>
 802e538:	9a07      	ldr	r2, [sp, #28]
 802e53a:	4654      	mov	r4, sl
 802e53c:	2000      	movs	r0, #0
 802e53e:	f04f 0c0a 	mov.w	ip, #10
 802e542:	4621      	mov	r1, r4
 802e544:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e548:	3b30      	subs	r3, #48	@ 0x30
 802e54a:	2b09      	cmp	r3, #9
 802e54c:	d94b      	bls.n	802e5e6 <_vfiprintf_r+0x1a2>
 802e54e:	b1b0      	cbz	r0, 802e57e <_vfiprintf_r+0x13a>
 802e550:	9207      	str	r2, [sp, #28]
 802e552:	e014      	b.n	802e57e <_vfiprintf_r+0x13a>
 802e554:	eba0 0308 	sub.w	r3, r0, r8
 802e558:	fa09 f303 	lsl.w	r3, r9, r3
 802e55c:	4313      	orrs	r3, r2
 802e55e:	9304      	str	r3, [sp, #16]
 802e560:	46a2      	mov	sl, r4
 802e562:	e7d2      	b.n	802e50a <_vfiprintf_r+0xc6>
 802e564:	9b03      	ldr	r3, [sp, #12]
 802e566:	1d19      	adds	r1, r3, #4
 802e568:	681b      	ldr	r3, [r3, #0]
 802e56a:	9103      	str	r1, [sp, #12]
 802e56c:	2b00      	cmp	r3, #0
 802e56e:	bfbb      	ittet	lt
 802e570:	425b      	neglt	r3, r3
 802e572:	f042 0202 	orrlt.w	r2, r2, #2
 802e576:	9307      	strge	r3, [sp, #28]
 802e578:	9307      	strlt	r3, [sp, #28]
 802e57a:	bfb8      	it	lt
 802e57c:	9204      	strlt	r2, [sp, #16]
 802e57e:	7823      	ldrb	r3, [r4, #0]
 802e580:	2b2e      	cmp	r3, #46	@ 0x2e
 802e582:	d10a      	bne.n	802e59a <_vfiprintf_r+0x156>
 802e584:	7863      	ldrb	r3, [r4, #1]
 802e586:	2b2a      	cmp	r3, #42	@ 0x2a
 802e588:	d132      	bne.n	802e5f0 <_vfiprintf_r+0x1ac>
 802e58a:	9b03      	ldr	r3, [sp, #12]
 802e58c:	1d1a      	adds	r2, r3, #4
 802e58e:	681b      	ldr	r3, [r3, #0]
 802e590:	9203      	str	r2, [sp, #12]
 802e592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802e596:	3402      	adds	r4, #2
 802e598:	9305      	str	r3, [sp, #20]
 802e59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802e670 <_vfiprintf_r+0x22c>
 802e59e:	7821      	ldrb	r1, [r4, #0]
 802e5a0:	2203      	movs	r2, #3
 802e5a2:	4650      	mov	r0, sl
 802e5a4:	f7d1 fe34 	bl	8000210 <memchr>
 802e5a8:	b138      	cbz	r0, 802e5ba <_vfiprintf_r+0x176>
 802e5aa:	9b04      	ldr	r3, [sp, #16]
 802e5ac:	eba0 000a 	sub.w	r0, r0, sl
 802e5b0:	2240      	movs	r2, #64	@ 0x40
 802e5b2:	4082      	lsls	r2, r0
 802e5b4:	4313      	orrs	r3, r2
 802e5b6:	3401      	adds	r4, #1
 802e5b8:	9304      	str	r3, [sp, #16]
 802e5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e5be:	4829      	ldr	r0, [pc, #164]	@ (802e664 <_vfiprintf_r+0x220>)
 802e5c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802e5c4:	2206      	movs	r2, #6
 802e5c6:	f7d1 fe23 	bl	8000210 <memchr>
 802e5ca:	2800      	cmp	r0, #0
 802e5cc:	d03f      	beq.n	802e64e <_vfiprintf_r+0x20a>
 802e5ce:	4b26      	ldr	r3, [pc, #152]	@ (802e668 <_vfiprintf_r+0x224>)
 802e5d0:	bb1b      	cbnz	r3, 802e61a <_vfiprintf_r+0x1d6>
 802e5d2:	9b03      	ldr	r3, [sp, #12]
 802e5d4:	3307      	adds	r3, #7
 802e5d6:	f023 0307 	bic.w	r3, r3, #7
 802e5da:	3308      	adds	r3, #8
 802e5dc:	9303      	str	r3, [sp, #12]
 802e5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e5e0:	443b      	add	r3, r7
 802e5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 802e5e4:	e76a      	b.n	802e4bc <_vfiprintf_r+0x78>
 802e5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 802e5ea:	460c      	mov	r4, r1
 802e5ec:	2001      	movs	r0, #1
 802e5ee:	e7a8      	b.n	802e542 <_vfiprintf_r+0xfe>
 802e5f0:	2300      	movs	r3, #0
 802e5f2:	3401      	adds	r4, #1
 802e5f4:	9305      	str	r3, [sp, #20]
 802e5f6:	4619      	mov	r1, r3
 802e5f8:	f04f 0c0a 	mov.w	ip, #10
 802e5fc:	4620      	mov	r0, r4
 802e5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e602:	3a30      	subs	r2, #48	@ 0x30
 802e604:	2a09      	cmp	r2, #9
 802e606:	d903      	bls.n	802e610 <_vfiprintf_r+0x1cc>
 802e608:	2b00      	cmp	r3, #0
 802e60a:	d0c6      	beq.n	802e59a <_vfiprintf_r+0x156>
 802e60c:	9105      	str	r1, [sp, #20]
 802e60e:	e7c4      	b.n	802e59a <_vfiprintf_r+0x156>
 802e610:	fb0c 2101 	mla	r1, ip, r1, r2
 802e614:	4604      	mov	r4, r0
 802e616:	2301      	movs	r3, #1
 802e618:	e7f0      	b.n	802e5fc <_vfiprintf_r+0x1b8>
 802e61a:	ab03      	add	r3, sp, #12
 802e61c:	9300      	str	r3, [sp, #0]
 802e61e:	462a      	mov	r2, r5
 802e620:	4b12      	ldr	r3, [pc, #72]	@ (802e66c <_vfiprintf_r+0x228>)
 802e622:	a904      	add	r1, sp, #16
 802e624:	4630      	mov	r0, r6
 802e626:	f3af 8000 	nop.w
 802e62a:	4607      	mov	r7, r0
 802e62c:	1c78      	adds	r0, r7, #1
 802e62e:	d1d6      	bne.n	802e5de <_vfiprintf_r+0x19a>
 802e630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e632:	07d9      	lsls	r1, r3, #31
 802e634:	d405      	bmi.n	802e642 <_vfiprintf_r+0x1fe>
 802e636:	89ab      	ldrh	r3, [r5, #12]
 802e638:	059a      	lsls	r2, r3, #22
 802e63a:	d402      	bmi.n	802e642 <_vfiprintf_r+0x1fe>
 802e63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e63e:	f7ff fe21 	bl	802e284 <__retarget_lock_release_recursive>
 802e642:	89ab      	ldrh	r3, [r5, #12]
 802e644:	065b      	lsls	r3, r3, #25
 802e646:	f53f af1f 	bmi.w	802e488 <_vfiprintf_r+0x44>
 802e64a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802e64c:	e71e      	b.n	802e48c <_vfiprintf_r+0x48>
 802e64e:	ab03      	add	r3, sp, #12
 802e650:	9300      	str	r3, [sp, #0]
 802e652:	462a      	mov	r2, r5
 802e654:	4b05      	ldr	r3, [pc, #20]	@ (802e66c <_vfiprintf_r+0x228>)
 802e656:	a904      	add	r1, sp, #16
 802e658:	4630      	mov	r0, r6
 802e65a:	f000 f879 	bl	802e750 <_printf_i>
 802e65e:	e7e4      	b.n	802e62a <_vfiprintf_r+0x1e6>
 802e660:	0803109b 	.word	0x0803109b
 802e664:	080310a5 	.word	0x080310a5
 802e668:	00000000 	.word	0x00000000
 802e66c:	0802e41f 	.word	0x0802e41f
 802e670:	080310a1 	.word	0x080310a1

0802e674 <_printf_common>:
 802e674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e678:	4616      	mov	r6, r2
 802e67a:	4698      	mov	r8, r3
 802e67c:	688a      	ldr	r2, [r1, #8]
 802e67e:	690b      	ldr	r3, [r1, #16]
 802e680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802e684:	4293      	cmp	r3, r2
 802e686:	bfb8      	it	lt
 802e688:	4613      	movlt	r3, r2
 802e68a:	6033      	str	r3, [r6, #0]
 802e68c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802e690:	4607      	mov	r7, r0
 802e692:	460c      	mov	r4, r1
 802e694:	b10a      	cbz	r2, 802e69a <_printf_common+0x26>
 802e696:	3301      	adds	r3, #1
 802e698:	6033      	str	r3, [r6, #0]
 802e69a:	6823      	ldr	r3, [r4, #0]
 802e69c:	0699      	lsls	r1, r3, #26
 802e69e:	bf42      	ittt	mi
 802e6a0:	6833      	ldrmi	r3, [r6, #0]
 802e6a2:	3302      	addmi	r3, #2
 802e6a4:	6033      	strmi	r3, [r6, #0]
 802e6a6:	6825      	ldr	r5, [r4, #0]
 802e6a8:	f015 0506 	ands.w	r5, r5, #6
 802e6ac:	d106      	bne.n	802e6bc <_printf_common+0x48>
 802e6ae:	f104 0a19 	add.w	sl, r4, #25
 802e6b2:	68e3      	ldr	r3, [r4, #12]
 802e6b4:	6832      	ldr	r2, [r6, #0]
 802e6b6:	1a9b      	subs	r3, r3, r2
 802e6b8:	42ab      	cmp	r3, r5
 802e6ba:	dc26      	bgt.n	802e70a <_printf_common+0x96>
 802e6bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802e6c0:	6822      	ldr	r2, [r4, #0]
 802e6c2:	3b00      	subs	r3, #0
 802e6c4:	bf18      	it	ne
 802e6c6:	2301      	movne	r3, #1
 802e6c8:	0692      	lsls	r2, r2, #26
 802e6ca:	d42b      	bmi.n	802e724 <_printf_common+0xb0>
 802e6cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802e6d0:	4641      	mov	r1, r8
 802e6d2:	4638      	mov	r0, r7
 802e6d4:	47c8      	blx	r9
 802e6d6:	3001      	adds	r0, #1
 802e6d8:	d01e      	beq.n	802e718 <_printf_common+0xa4>
 802e6da:	6823      	ldr	r3, [r4, #0]
 802e6dc:	6922      	ldr	r2, [r4, #16]
 802e6de:	f003 0306 	and.w	r3, r3, #6
 802e6e2:	2b04      	cmp	r3, #4
 802e6e4:	bf02      	ittt	eq
 802e6e6:	68e5      	ldreq	r5, [r4, #12]
 802e6e8:	6833      	ldreq	r3, [r6, #0]
 802e6ea:	1aed      	subeq	r5, r5, r3
 802e6ec:	68a3      	ldr	r3, [r4, #8]
 802e6ee:	bf0c      	ite	eq
 802e6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e6f4:	2500      	movne	r5, #0
 802e6f6:	4293      	cmp	r3, r2
 802e6f8:	bfc4      	itt	gt
 802e6fa:	1a9b      	subgt	r3, r3, r2
 802e6fc:	18ed      	addgt	r5, r5, r3
 802e6fe:	2600      	movs	r6, #0
 802e700:	341a      	adds	r4, #26
 802e702:	42b5      	cmp	r5, r6
 802e704:	d11a      	bne.n	802e73c <_printf_common+0xc8>
 802e706:	2000      	movs	r0, #0
 802e708:	e008      	b.n	802e71c <_printf_common+0xa8>
 802e70a:	2301      	movs	r3, #1
 802e70c:	4652      	mov	r2, sl
 802e70e:	4641      	mov	r1, r8
 802e710:	4638      	mov	r0, r7
 802e712:	47c8      	blx	r9
 802e714:	3001      	adds	r0, #1
 802e716:	d103      	bne.n	802e720 <_printf_common+0xac>
 802e718:	f04f 30ff 	mov.w	r0, #4294967295
 802e71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e720:	3501      	adds	r5, #1
 802e722:	e7c6      	b.n	802e6b2 <_printf_common+0x3e>
 802e724:	18e1      	adds	r1, r4, r3
 802e726:	1c5a      	adds	r2, r3, #1
 802e728:	2030      	movs	r0, #48	@ 0x30
 802e72a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802e72e:	4422      	add	r2, r4
 802e730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802e734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802e738:	3302      	adds	r3, #2
 802e73a:	e7c7      	b.n	802e6cc <_printf_common+0x58>
 802e73c:	2301      	movs	r3, #1
 802e73e:	4622      	mov	r2, r4
 802e740:	4641      	mov	r1, r8
 802e742:	4638      	mov	r0, r7
 802e744:	47c8      	blx	r9
 802e746:	3001      	adds	r0, #1
 802e748:	d0e6      	beq.n	802e718 <_printf_common+0xa4>
 802e74a:	3601      	adds	r6, #1
 802e74c:	e7d9      	b.n	802e702 <_printf_common+0x8e>
	...

0802e750 <_printf_i>:
 802e750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e754:	7e0f      	ldrb	r7, [r1, #24]
 802e756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802e758:	2f78      	cmp	r7, #120	@ 0x78
 802e75a:	4691      	mov	r9, r2
 802e75c:	4680      	mov	r8, r0
 802e75e:	460c      	mov	r4, r1
 802e760:	469a      	mov	sl, r3
 802e762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802e766:	d807      	bhi.n	802e778 <_printf_i+0x28>
 802e768:	2f62      	cmp	r7, #98	@ 0x62
 802e76a:	d80a      	bhi.n	802e782 <_printf_i+0x32>
 802e76c:	2f00      	cmp	r7, #0
 802e76e:	f000 80d1 	beq.w	802e914 <_printf_i+0x1c4>
 802e772:	2f58      	cmp	r7, #88	@ 0x58
 802e774:	f000 80b8 	beq.w	802e8e8 <_printf_i+0x198>
 802e778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e77c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802e780:	e03a      	b.n	802e7f8 <_printf_i+0xa8>
 802e782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802e786:	2b15      	cmp	r3, #21
 802e788:	d8f6      	bhi.n	802e778 <_printf_i+0x28>
 802e78a:	a101      	add	r1, pc, #4	@ (adr r1, 802e790 <_printf_i+0x40>)
 802e78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e790:	0802e7e9 	.word	0x0802e7e9
 802e794:	0802e7fd 	.word	0x0802e7fd
 802e798:	0802e779 	.word	0x0802e779
 802e79c:	0802e779 	.word	0x0802e779
 802e7a0:	0802e779 	.word	0x0802e779
 802e7a4:	0802e779 	.word	0x0802e779
 802e7a8:	0802e7fd 	.word	0x0802e7fd
 802e7ac:	0802e779 	.word	0x0802e779
 802e7b0:	0802e779 	.word	0x0802e779
 802e7b4:	0802e779 	.word	0x0802e779
 802e7b8:	0802e779 	.word	0x0802e779
 802e7bc:	0802e8fb 	.word	0x0802e8fb
 802e7c0:	0802e827 	.word	0x0802e827
 802e7c4:	0802e8b5 	.word	0x0802e8b5
 802e7c8:	0802e779 	.word	0x0802e779
 802e7cc:	0802e779 	.word	0x0802e779
 802e7d0:	0802e91d 	.word	0x0802e91d
 802e7d4:	0802e779 	.word	0x0802e779
 802e7d8:	0802e827 	.word	0x0802e827
 802e7dc:	0802e779 	.word	0x0802e779
 802e7e0:	0802e779 	.word	0x0802e779
 802e7e4:	0802e8bd 	.word	0x0802e8bd
 802e7e8:	6833      	ldr	r3, [r6, #0]
 802e7ea:	1d1a      	adds	r2, r3, #4
 802e7ec:	681b      	ldr	r3, [r3, #0]
 802e7ee:	6032      	str	r2, [r6, #0]
 802e7f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e7f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802e7f8:	2301      	movs	r3, #1
 802e7fa:	e09c      	b.n	802e936 <_printf_i+0x1e6>
 802e7fc:	6833      	ldr	r3, [r6, #0]
 802e7fe:	6820      	ldr	r0, [r4, #0]
 802e800:	1d19      	adds	r1, r3, #4
 802e802:	6031      	str	r1, [r6, #0]
 802e804:	0606      	lsls	r6, r0, #24
 802e806:	d501      	bpl.n	802e80c <_printf_i+0xbc>
 802e808:	681d      	ldr	r5, [r3, #0]
 802e80a:	e003      	b.n	802e814 <_printf_i+0xc4>
 802e80c:	0645      	lsls	r5, r0, #25
 802e80e:	d5fb      	bpl.n	802e808 <_printf_i+0xb8>
 802e810:	f9b3 5000 	ldrsh.w	r5, [r3]
 802e814:	2d00      	cmp	r5, #0
 802e816:	da03      	bge.n	802e820 <_printf_i+0xd0>
 802e818:	232d      	movs	r3, #45	@ 0x2d
 802e81a:	426d      	negs	r5, r5
 802e81c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e820:	4858      	ldr	r0, [pc, #352]	@ (802e984 <_printf_i+0x234>)
 802e822:	230a      	movs	r3, #10
 802e824:	e011      	b.n	802e84a <_printf_i+0xfa>
 802e826:	6821      	ldr	r1, [r4, #0]
 802e828:	6833      	ldr	r3, [r6, #0]
 802e82a:	0608      	lsls	r0, r1, #24
 802e82c:	f853 5b04 	ldr.w	r5, [r3], #4
 802e830:	d402      	bmi.n	802e838 <_printf_i+0xe8>
 802e832:	0649      	lsls	r1, r1, #25
 802e834:	bf48      	it	mi
 802e836:	b2ad      	uxthmi	r5, r5
 802e838:	2f6f      	cmp	r7, #111	@ 0x6f
 802e83a:	4852      	ldr	r0, [pc, #328]	@ (802e984 <_printf_i+0x234>)
 802e83c:	6033      	str	r3, [r6, #0]
 802e83e:	bf14      	ite	ne
 802e840:	230a      	movne	r3, #10
 802e842:	2308      	moveq	r3, #8
 802e844:	2100      	movs	r1, #0
 802e846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802e84a:	6866      	ldr	r6, [r4, #4]
 802e84c:	60a6      	str	r6, [r4, #8]
 802e84e:	2e00      	cmp	r6, #0
 802e850:	db05      	blt.n	802e85e <_printf_i+0x10e>
 802e852:	6821      	ldr	r1, [r4, #0]
 802e854:	432e      	orrs	r6, r5
 802e856:	f021 0104 	bic.w	r1, r1, #4
 802e85a:	6021      	str	r1, [r4, #0]
 802e85c:	d04b      	beq.n	802e8f6 <_printf_i+0x1a6>
 802e85e:	4616      	mov	r6, r2
 802e860:	fbb5 f1f3 	udiv	r1, r5, r3
 802e864:	fb03 5711 	mls	r7, r3, r1, r5
 802e868:	5dc7      	ldrb	r7, [r0, r7]
 802e86a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e86e:	462f      	mov	r7, r5
 802e870:	42bb      	cmp	r3, r7
 802e872:	460d      	mov	r5, r1
 802e874:	d9f4      	bls.n	802e860 <_printf_i+0x110>
 802e876:	2b08      	cmp	r3, #8
 802e878:	d10b      	bne.n	802e892 <_printf_i+0x142>
 802e87a:	6823      	ldr	r3, [r4, #0]
 802e87c:	07df      	lsls	r7, r3, #31
 802e87e:	d508      	bpl.n	802e892 <_printf_i+0x142>
 802e880:	6923      	ldr	r3, [r4, #16]
 802e882:	6861      	ldr	r1, [r4, #4]
 802e884:	4299      	cmp	r1, r3
 802e886:	bfde      	ittt	le
 802e888:	2330      	movle	r3, #48	@ 0x30
 802e88a:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e88e:	f106 36ff 	addle.w	r6, r6, #4294967295
 802e892:	1b92      	subs	r2, r2, r6
 802e894:	6122      	str	r2, [r4, #16]
 802e896:	f8cd a000 	str.w	sl, [sp]
 802e89a:	464b      	mov	r3, r9
 802e89c:	aa03      	add	r2, sp, #12
 802e89e:	4621      	mov	r1, r4
 802e8a0:	4640      	mov	r0, r8
 802e8a2:	f7ff fee7 	bl	802e674 <_printf_common>
 802e8a6:	3001      	adds	r0, #1
 802e8a8:	d14a      	bne.n	802e940 <_printf_i+0x1f0>
 802e8aa:	f04f 30ff 	mov.w	r0, #4294967295
 802e8ae:	b004      	add	sp, #16
 802e8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e8b4:	6823      	ldr	r3, [r4, #0]
 802e8b6:	f043 0320 	orr.w	r3, r3, #32
 802e8ba:	6023      	str	r3, [r4, #0]
 802e8bc:	4832      	ldr	r0, [pc, #200]	@ (802e988 <_printf_i+0x238>)
 802e8be:	2778      	movs	r7, #120	@ 0x78
 802e8c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802e8c4:	6823      	ldr	r3, [r4, #0]
 802e8c6:	6831      	ldr	r1, [r6, #0]
 802e8c8:	061f      	lsls	r7, r3, #24
 802e8ca:	f851 5b04 	ldr.w	r5, [r1], #4
 802e8ce:	d402      	bmi.n	802e8d6 <_printf_i+0x186>
 802e8d0:	065f      	lsls	r7, r3, #25
 802e8d2:	bf48      	it	mi
 802e8d4:	b2ad      	uxthmi	r5, r5
 802e8d6:	6031      	str	r1, [r6, #0]
 802e8d8:	07d9      	lsls	r1, r3, #31
 802e8da:	bf44      	itt	mi
 802e8dc:	f043 0320 	orrmi.w	r3, r3, #32
 802e8e0:	6023      	strmi	r3, [r4, #0]
 802e8e2:	b11d      	cbz	r5, 802e8ec <_printf_i+0x19c>
 802e8e4:	2310      	movs	r3, #16
 802e8e6:	e7ad      	b.n	802e844 <_printf_i+0xf4>
 802e8e8:	4826      	ldr	r0, [pc, #152]	@ (802e984 <_printf_i+0x234>)
 802e8ea:	e7e9      	b.n	802e8c0 <_printf_i+0x170>
 802e8ec:	6823      	ldr	r3, [r4, #0]
 802e8ee:	f023 0320 	bic.w	r3, r3, #32
 802e8f2:	6023      	str	r3, [r4, #0]
 802e8f4:	e7f6      	b.n	802e8e4 <_printf_i+0x194>
 802e8f6:	4616      	mov	r6, r2
 802e8f8:	e7bd      	b.n	802e876 <_printf_i+0x126>
 802e8fa:	6833      	ldr	r3, [r6, #0]
 802e8fc:	6825      	ldr	r5, [r4, #0]
 802e8fe:	6961      	ldr	r1, [r4, #20]
 802e900:	1d18      	adds	r0, r3, #4
 802e902:	6030      	str	r0, [r6, #0]
 802e904:	062e      	lsls	r6, r5, #24
 802e906:	681b      	ldr	r3, [r3, #0]
 802e908:	d501      	bpl.n	802e90e <_printf_i+0x1be>
 802e90a:	6019      	str	r1, [r3, #0]
 802e90c:	e002      	b.n	802e914 <_printf_i+0x1c4>
 802e90e:	0668      	lsls	r0, r5, #25
 802e910:	d5fb      	bpl.n	802e90a <_printf_i+0x1ba>
 802e912:	8019      	strh	r1, [r3, #0]
 802e914:	2300      	movs	r3, #0
 802e916:	6123      	str	r3, [r4, #16]
 802e918:	4616      	mov	r6, r2
 802e91a:	e7bc      	b.n	802e896 <_printf_i+0x146>
 802e91c:	6833      	ldr	r3, [r6, #0]
 802e91e:	1d1a      	adds	r2, r3, #4
 802e920:	6032      	str	r2, [r6, #0]
 802e922:	681e      	ldr	r6, [r3, #0]
 802e924:	6862      	ldr	r2, [r4, #4]
 802e926:	2100      	movs	r1, #0
 802e928:	4630      	mov	r0, r6
 802e92a:	f7d1 fc71 	bl	8000210 <memchr>
 802e92e:	b108      	cbz	r0, 802e934 <_printf_i+0x1e4>
 802e930:	1b80      	subs	r0, r0, r6
 802e932:	6060      	str	r0, [r4, #4]
 802e934:	6863      	ldr	r3, [r4, #4]
 802e936:	6123      	str	r3, [r4, #16]
 802e938:	2300      	movs	r3, #0
 802e93a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e93e:	e7aa      	b.n	802e896 <_printf_i+0x146>
 802e940:	6923      	ldr	r3, [r4, #16]
 802e942:	4632      	mov	r2, r6
 802e944:	4649      	mov	r1, r9
 802e946:	4640      	mov	r0, r8
 802e948:	47d0      	blx	sl
 802e94a:	3001      	adds	r0, #1
 802e94c:	d0ad      	beq.n	802e8aa <_printf_i+0x15a>
 802e94e:	6823      	ldr	r3, [r4, #0]
 802e950:	079b      	lsls	r3, r3, #30
 802e952:	d413      	bmi.n	802e97c <_printf_i+0x22c>
 802e954:	68e0      	ldr	r0, [r4, #12]
 802e956:	9b03      	ldr	r3, [sp, #12]
 802e958:	4298      	cmp	r0, r3
 802e95a:	bfb8      	it	lt
 802e95c:	4618      	movlt	r0, r3
 802e95e:	e7a6      	b.n	802e8ae <_printf_i+0x15e>
 802e960:	2301      	movs	r3, #1
 802e962:	4632      	mov	r2, r6
 802e964:	4649      	mov	r1, r9
 802e966:	4640      	mov	r0, r8
 802e968:	47d0      	blx	sl
 802e96a:	3001      	adds	r0, #1
 802e96c:	d09d      	beq.n	802e8aa <_printf_i+0x15a>
 802e96e:	3501      	adds	r5, #1
 802e970:	68e3      	ldr	r3, [r4, #12]
 802e972:	9903      	ldr	r1, [sp, #12]
 802e974:	1a5b      	subs	r3, r3, r1
 802e976:	42ab      	cmp	r3, r5
 802e978:	dcf2      	bgt.n	802e960 <_printf_i+0x210>
 802e97a:	e7eb      	b.n	802e954 <_printf_i+0x204>
 802e97c:	2500      	movs	r5, #0
 802e97e:	f104 0619 	add.w	r6, r4, #25
 802e982:	e7f5      	b.n	802e970 <_printf_i+0x220>
 802e984:	080310ac 	.word	0x080310ac
 802e988:	080310bd 	.word	0x080310bd

0802e98c <__sflush_r>:
 802e98c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802e990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e994:	0716      	lsls	r6, r2, #28
 802e996:	4605      	mov	r5, r0
 802e998:	460c      	mov	r4, r1
 802e99a:	d454      	bmi.n	802ea46 <__sflush_r+0xba>
 802e99c:	684b      	ldr	r3, [r1, #4]
 802e99e:	2b00      	cmp	r3, #0
 802e9a0:	dc02      	bgt.n	802e9a8 <__sflush_r+0x1c>
 802e9a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802e9a4:	2b00      	cmp	r3, #0
 802e9a6:	dd48      	ble.n	802ea3a <__sflush_r+0xae>
 802e9a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802e9aa:	2e00      	cmp	r6, #0
 802e9ac:	d045      	beq.n	802ea3a <__sflush_r+0xae>
 802e9ae:	2300      	movs	r3, #0
 802e9b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802e9b4:	682f      	ldr	r7, [r5, #0]
 802e9b6:	6a21      	ldr	r1, [r4, #32]
 802e9b8:	602b      	str	r3, [r5, #0]
 802e9ba:	d030      	beq.n	802ea1e <__sflush_r+0x92>
 802e9bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802e9be:	89a3      	ldrh	r3, [r4, #12]
 802e9c0:	0759      	lsls	r1, r3, #29
 802e9c2:	d505      	bpl.n	802e9d0 <__sflush_r+0x44>
 802e9c4:	6863      	ldr	r3, [r4, #4]
 802e9c6:	1ad2      	subs	r2, r2, r3
 802e9c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802e9ca:	b10b      	cbz	r3, 802e9d0 <__sflush_r+0x44>
 802e9cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802e9ce:	1ad2      	subs	r2, r2, r3
 802e9d0:	2300      	movs	r3, #0
 802e9d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802e9d4:	6a21      	ldr	r1, [r4, #32]
 802e9d6:	4628      	mov	r0, r5
 802e9d8:	47b0      	blx	r6
 802e9da:	1c43      	adds	r3, r0, #1
 802e9dc:	89a3      	ldrh	r3, [r4, #12]
 802e9de:	d106      	bne.n	802e9ee <__sflush_r+0x62>
 802e9e0:	6829      	ldr	r1, [r5, #0]
 802e9e2:	291d      	cmp	r1, #29
 802e9e4:	d82b      	bhi.n	802ea3e <__sflush_r+0xb2>
 802e9e6:	4a2a      	ldr	r2, [pc, #168]	@ (802ea90 <__sflush_r+0x104>)
 802e9e8:	40ca      	lsrs	r2, r1
 802e9ea:	07d6      	lsls	r6, r2, #31
 802e9ec:	d527      	bpl.n	802ea3e <__sflush_r+0xb2>
 802e9ee:	2200      	movs	r2, #0
 802e9f0:	6062      	str	r2, [r4, #4]
 802e9f2:	04d9      	lsls	r1, r3, #19
 802e9f4:	6922      	ldr	r2, [r4, #16]
 802e9f6:	6022      	str	r2, [r4, #0]
 802e9f8:	d504      	bpl.n	802ea04 <__sflush_r+0x78>
 802e9fa:	1c42      	adds	r2, r0, #1
 802e9fc:	d101      	bne.n	802ea02 <__sflush_r+0x76>
 802e9fe:	682b      	ldr	r3, [r5, #0]
 802ea00:	b903      	cbnz	r3, 802ea04 <__sflush_r+0x78>
 802ea02:	6560      	str	r0, [r4, #84]	@ 0x54
 802ea04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ea06:	602f      	str	r7, [r5, #0]
 802ea08:	b1b9      	cbz	r1, 802ea3a <__sflush_r+0xae>
 802ea0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ea0e:	4299      	cmp	r1, r3
 802ea10:	d002      	beq.n	802ea18 <__sflush_r+0x8c>
 802ea12:	4628      	mov	r0, r5
 802ea14:	f7ff fca2 	bl	802e35c <_free_r>
 802ea18:	2300      	movs	r3, #0
 802ea1a:	6363      	str	r3, [r4, #52]	@ 0x34
 802ea1c:	e00d      	b.n	802ea3a <__sflush_r+0xae>
 802ea1e:	2301      	movs	r3, #1
 802ea20:	4628      	mov	r0, r5
 802ea22:	47b0      	blx	r6
 802ea24:	4602      	mov	r2, r0
 802ea26:	1c50      	adds	r0, r2, #1
 802ea28:	d1c9      	bne.n	802e9be <__sflush_r+0x32>
 802ea2a:	682b      	ldr	r3, [r5, #0]
 802ea2c:	2b00      	cmp	r3, #0
 802ea2e:	d0c6      	beq.n	802e9be <__sflush_r+0x32>
 802ea30:	2b1d      	cmp	r3, #29
 802ea32:	d001      	beq.n	802ea38 <__sflush_r+0xac>
 802ea34:	2b16      	cmp	r3, #22
 802ea36:	d11e      	bne.n	802ea76 <__sflush_r+0xea>
 802ea38:	602f      	str	r7, [r5, #0]
 802ea3a:	2000      	movs	r0, #0
 802ea3c:	e022      	b.n	802ea84 <__sflush_r+0xf8>
 802ea3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ea42:	b21b      	sxth	r3, r3
 802ea44:	e01b      	b.n	802ea7e <__sflush_r+0xf2>
 802ea46:	690f      	ldr	r7, [r1, #16]
 802ea48:	2f00      	cmp	r7, #0
 802ea4a:	d0f6      	beq.n	802ea3a <__sflush_r+0xae>
 802ea4c:	0793      	lsls	r3, r2, #30
 802ea4e:	680e      	ldr	r6, [r1, #0]
 802ea50:	bf08      	it	eq
 802ea52:	694b      	ldreq	r3, [r1, #20]
 802ea54:	600f      	str	r7, [r1, #0]
 802ea56:	bf18      	it	ne
 802ea58:	2300      	movne	r3, #0
 802ea5a:	eba6 0807 	sub.w	r8, r6, r7
 802ea5e:	608b      	str	r3, [r1, #8]
 802ea60:	f1b8 0f00 	cmp.w	r8, #0
 802ea64:	dde9      	ble.n	802ea3a <__sflush_r+0xae>
 802ea66:	6a21      	ldr	r1, [r4, #32]
 802ea68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802ea6a:	4643      	mov	r3, r8
 802ea6c:	463a      	mov	r2, r7
 802ea6e:	4628      	mov	r0, r5
 802ea70:	47b0      	blx	r6
 802ea72:	2800      	cmp	r0, #0
 802ea74:	dc08      	bgt.n	802ea88 <__sflush_r+0xfc>
 802ea76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ea7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ea7e:	81a3      	strh	r3, [r4, #12]
 802ea80:	f04f 30ff 	mov.w	r0, #4294967295
 802ea84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ea88:	4407      	add	r7, r0
 802ea8a:	eba8 0800 	sub.w	r8, r8, r0
 802ea8e:	e7e7      	b.n	802ea60 <__sflush_r+0xd4>
 802ea90:	20400001 	.word	0x20400001

0802ea94 <_fflush_r>:
 802ea94:	b538      	push	{r3, r4, r5, lr}
 802ea96:	690b      	ldr	r3, [r1, #16]
 802ea98:	4605      	mov	r5, r0
 802ea9a:	460c      	mov	r4, r1
 802ea9c:	b913      	cbnz	r3, 802eaa4 <_fflush_r+0x10>
 802ea9e:	2500      	movs	r5, #0
 802eaa0:	4628      	mov	r0, r5
 802eaa2:	bd38      	pop	{r3, r4, r5, pc}
 802eaa4:	b118      	cbz	r0, 802eaae <_fflush_r+0x1a>
 802eaa6:	6a03      	ldr	r3, [r0, #32]
 802eaa8:	b90b      	cbnz	r3, 802eaae <_fflush_r+0x1a>
 802eaaa:	f7ff f92f 	bl	802dd0c <__sinit>
 802eaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802eab2:	2b00      	cmp	r3, #0
 802eab4:	d0f3      	beq.n	802ea9e <_fflush_r+0xa>
 802eab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802eab8:	07d0      	lsls	r0, r2, #31
 802eaba:	d404      	bmi.n	802eac6 <_fflush_r+0x32>
 802eabc:	0599      	lsls	r1, r3, #22
 802eabe:	d402      	bmi.n	802eac6 <_fflush_r+0x32>
 802eac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802eac2:	f7ff fbde 	bl	802e282 <__retarget_lock_acquire_recursive>
 802eac6:	4628      	mov	r0, r5
 802eac8:	4621      	mov	r1, r4
 802eaca:	f7ff ff5f 	bl	802e98c <__sflush_r>
 802eace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ead0:	07da      	lsls	r2, r3, #31
 802ead2:	4605      	mov	r5, r0
 802ead4:	d4e4      	bmi.n	802eaa0 <_fflush_r+0xc>
 802ead6:	89a3      	ldrh	r3, [r4, #12]
 802ead8:	059b      	lsls	r3, r3, #22
 802eada:	d4e1      	bmi.n	802eaa0 <_fflush_r+0xc>
 802eadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802eade:	f7ff fbd1 	bl	802e284 <__retarget_lock_release_recursive>
 802eae2:	e7dd      	b.n	802eaa0 <_fflush_r+0xc>

0802eae4 <__swhatbuf_r>:
 802eae4:	b570      	push	{r4, r5, r6, lr}
 802eae6:	460c      	mov	r4, r1
 802eae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eaec:	2900      	cmp	r1, #0
 802eaee:	b096      	sub	sp, #88	@ 0x58
 802eaf0:	4615      	mov	r5, r2
 802eaf2:	461e      	mov	r6, r3
 802eaf4:	da0d      	bge.n	802eb12 <__swhatbuf_r+0x2e>
 802eaf6:	89a3      	ldrh	r3, [r4, #12]
 802eaf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802eafc:	f04f 0100 	mov.w	r1, #0
 802eb00:	bf14      	ite	ne
 802eb02:	2340      	movne	r3, #64	@ 0x40
 802eb04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802eb08:	2000      	movs	r0, #0
 802eb0a:	6031      	str	r1, [r6, #0]
 802eb0c:	602b      	str	r3, [r5, #0]
 802eb0e:	b016      	add	sp, #88	@ 0x58
 802eb10:	bd70      	pop	{r4, r5, r6, pc}
 802eb12:	466a      	mov	r2, sp
 802eb14:	f000 f848 	bl	802eba8 <_fstat_r>
 802eb18:	2800      	cmp	r0, #0
 802eb1a:	dbec      	blt.n	802eaf6 <__swhatbuf_r+0x12>
 802eb1c:	9901      	ldr	r1, [sp, #4]
 802eb1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802eb22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802eb26:	4259      	negs	r1, r3
 802eb28:	4159      	adcs	r1, r3
 802eb2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802eb2e:	e7eb      	b.n	802eb08 <__swhatbuf_r+0x24>

0802eb30 <__smakebuf_r>:
 802eb30:	898b      	ldrh	r3, [r1, #12]
 802eb32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802eb34:	079d      	lsls	r5, r3, #30
 802eb36:	4606      	mov	r6, r0
 802eb38:	460c      	mov	r4, r1
 802eb3a:	d507      	bpl.n	802eb4c <__smakebuf_r+0x1c>
 802eb3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802eb40:	6023      	str	r3, [r4, #0]
 802eb42:	6123      	str	r3, [r4, #16]
 802eb44:	2301      	movs	r3, #1
 802eb46:	6163      	str	r3, [r4, #20]
 802eb48:	b003      	add	sp, #12
 802eb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802eb4c:	ab01      	add	r3, sp, #4
 802eb4e:	466a      	mov	r2, sp
 802eb50:	f7ff ffc8 	bl	802eae4 <__swhatbuf_r>
 802eb54:	9f00      	ldr	r7, [sp, #0]
 802eb56:	4605      	mov	r5, r0
 802eb58:	4639      	mov	r1, r7
 802eb5a:	4630      	mov	r0, r6
 802eb5c:	f7fe ffb0 	bl	802dac0 <_malloc_r>
 802eb60:	b948      	cbnz	r0, 802eb76 <__smakebuf_r+0x46>
 802eb62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802eb66:	059a      	lsls	r2, r3, #22
 802eb68:	d4ee      	bmi.n	802eb48 <__smakebuf_r+0x18>
 802eb6a:	f023 0303 	bic.w	r3, r3, #3
 802eb6e:	f043 0302 	orr.w	r3, r3, #2
 802eb72:	81a3      	strh	r3, [r4, #12]
 802eb74:	e7e2      	b.n	802eb3c <__smakebuf_r+0xc>
 802eb76:	89a3      	ldrh	r3, [r4, #12]
 802eb78:	6020      	str	r0, [r4, #0]
 802eb7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802eb7e:	81a3      	strh	r3, [r4, #12]
 802eb80:	9b01      	ldr	r3, [sp, #4]
 802eb82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802eb86:	b15b      	cbz	r3, 802eba0 <__smakebuf_r+0x70>
 802eb88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802eb8c:	4630      	mov	r0, r6
 802eb8e:	f000 f81d 	bl	802ebcc <_isatty_r>
 802eb92:	b128      	cbz	r0, 802eba0 <__smakebuf_r+0x70>
 802eb94:	89a3      	ldrh	r3, [r4, #12]
 802eb96:	f023 0303 	bic.w	r3, r3, #3
 802eb9a:	f043 0301 	orr.w	r3, r3, #1
 802eb9e:	81a3      	strh	r3, [r4, #12]
 802eba0:	89a3      	ldrh	r3, [r4, #12]
 802eba2:	431d      	orrs	r5, r3
 802eba4:	81a5      	strh	r5, [r4, #12]
 802eba6:	e7cf      	b.n	802eb48 <__smakebuf_r+0x18>

0802eba8 <_fstat_r>:
 802eba8:	b538      	push	{r3, r4, r5, lr}
 802ebaa:	4d07      	ldr	r5, [pc, #28]	@ (802ebc8 <_fstat_r+0x20>)
 802ebac:	2300      	movs	r3, #0
 802ebae:	4604      	mov	r4, r0
 802ebb0:	4608      	mov	r0, r1
 802ebb2:	4611      	mov	r1, r2
 802ebb4:	602b      	str	r3, [r5, #0]
 802ebb6:	f7d4 f969 	bl	8002e8c <_fstat>
 802ebba:	1c43      	adds	r3, r0, #1
 802ebbc:	d102      	bne.n	802ebc4 <_fstat_r+0x1c>
 802ebbe:	682b      	ldr	r3, [r5, #0]
 802ebc0:	b103      	cbz	r3, 802ebc4 <_fstat_r+0x1c>
 802ebc2:	6023      	str	r3, [r4, #0]
 802ebc4:	bd38      	pop	{r3, r4, r5, pc}
 802ebc6:	bf00      	nop
 802ebc8:	20012e64 	.word	0x20012e64

0802ebcc <_isatty_r>:
 802ebcc:	b538      	push	{r3, r4, r5, lr}
 802ebce:	4d06      	ldr	r5, [pc, #24]	@ (802ebe8 <_isatty_r+0x1c>)
 802ebd0:	2300      	movs	r3, #0
 802ebd2:	4604      	mov	r4, r0
 802ebd4:	4608      	mov	r0, r1
 802ebd6:	602b      	str	r3, [r5, #0]
 802ebd8:	f7d4 f968 	bl	8002eac <_isatty>
 802ebdc:	1c43      	adds	r3, r0, #1
 802ebde:	d102      	bne.n	802ebe6 <_isatty_r+0x1a>
 802ebe0:	682b      	ldr	r3, [r5, #0]
 802ebe2:	b103      	cbz	r3, 802ebe6 <_isatty_r+0x1a>
 802ebe4:	6023      	str	r3, [r4, #0]
 802ebe6:	bd38      	pop	{r3, r4, r5, pc}
 802ebe8:	20012e64 	.word	0x20012e64

0802ebec <_init>:
 802ebec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ebee:	bf00      	nop
 802ebf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ebf2:	bc08      	pop	{r3}
 802ebf4:	469e      	mov	lr, r3
 802ebf6:	4770      	bx	lr

0802ebf8 <_fini>:
 802ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ebfa:	bf00      	nop
 802ebfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ebfe:	bc08      	pop	{r3}
 802ec00:	469e      	mov	lr, r3
 802ec02:	4770      	bx	lr
